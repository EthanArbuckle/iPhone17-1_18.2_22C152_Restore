BOOL ZinAneTd<19u>::SetTileDmaDstDepthStride(uint64_t a1, ZinCodegenUtil *a2)
{
  BOOL result;
  unsigned int v4;

  v4 = 0;
  result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(void *)(a1 + 1464) + 552), &v4);
  if (!result) {
    ZinAssertImpl("Illegal TileDmaDst Depth Stride");
  }
  *(_DWORD *)(a1 + 1288) = *(_DWORD *)(a1 + 1288) & 0x3F | (v4 << 6);
  return result;
}

BOOL ZinAneTd<19u>::SetTileDmaDstGroupStride(uint64_t a1, ZinCodegenUtil *a2)
{
  unsigned int v4 = 0;
  BOOL result = ZinCodegenUtil::SignedValueToRegister(a2, 0x1AuLL, (unsigned int *)(*(void *)(a1 + 1464) + 560), &v4);
  if (!result) {
    ZinAssertImpl("Illegal TileDmaDst Group Stride");
  }
  *(_DWORD *)(a1 + 1292) = *(_DWORD *)(a1 + 1292) & 0x3F | (v4 << 6);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstZeroPad(uint64_t result, _DWORD *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 1320) & 0xFFDFFFFF | ((*a2 == 0) << 21);
  *(_DWORD *)(result + 1320) = v2;
  *(_DWORD *)(result + 1320) = v2 & 0xFFEFFFFF | ((a2[1] == 0) << 20);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstCropOffset(uint64_t result, unsigned __int16 a2, unsigned __int16 a3)
{
  *(_DWORD *)(result + 1344) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstWrapStatic(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned int a4)
{
  uint64_t result = ZinAneTd<19u>::SetTileDmaDstWrapCfg(a1, a4);
  *(_DWORD *)(a1 + 1316) = a3 | (a2 << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstWrapCfg(uint64_t a1, unsigned int a2)
{
  if (a2 == 4) {
    ZinAssertImpl("Width wrap axis is not supported on this architecture");
  }
  uint64_t result = ZinIrCodegenGetDMAWrapCfgDim(a2);
  *(_DWORD *)(a1 + 1268) = *(_DWORD *)(a1 + 1268) & 0xFFFFF8FF | ((result & 7) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstWrapDynamic(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v6 = (uint64_t *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
  ZinAneTdHw_v19::AddRelocInfo(v6, (uint64_t)__p, 5197, a2, 0, 0, 0, 0);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return ZinAneTd<19u>::SetTileDmaDstWrapCfg(a1, a3);
}

void sub_2112DC1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetTileDmaDstFmtOffsetCh(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1320) = *(_DWORD *)(result + 1320) & 0xFFF8FFFF | ((a2 & 7) << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstFmtCmpVec(uint64_t result, unsigned __int8 a2)
{
  *(_DWORD *)(result + 1320) = *(_DWORD *)(result + 1320) & 0xFFFFFFF | (a2 << 28);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstBaseAddrLo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ZinAneTdHw_v19::AddRelocInfo((uint64_t *)(a1 + 8), a2, 5186, a3, 1, 1, 0, 0);
}

BOOL ZinAneTd<19u>::SetTileDmaDstCompressedSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 24), &v7)) {
    ZinAssertImpl("Illegal TileDmaDst Compressed Width");
  }
  *(_DWORD *)(a1 + 1336) = *(_DWORD *)(a1 + 1336) & 0xFFFE0000 | v7 & 0x1FFFF;
  int v6 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(void *)(a1 + 1464) + 16), &v6);
  if (!result) {
    ZinAssertImpl("Illegal TileDmaDst Compressed Height");
  }
  *(_DWORD *)(a1 + 1340) = *(_DWORD *)(a1 + 1340) & 0xFFFE0000 | v6 & 0x1FFFF;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstCompressedInfo(uint64_t result, int a2, int a3, int a4)
{
  int v4 = *(_DWORD *)(result + 1328);
  *(_DWORD *)(result + 1328) = v4 | 1;
  switch(a4)
  {
    case 0:
      unsigned int v5 = v4 & 0xFFFFCFFE | 1;
      break;
    case 1:
      unsigned int v5 = v4 & 0xFFFFCFFE | 0x1001;
      break;
    case 2:
      unsigned int v5 = v4 & 0xFFFFCFFE | 0x2001;
      break;
    case 3:
      unsigned int v5 = v4 | 0x3001;
      break;
    default:
      ZinAssertImpl("Invalid Lossy Mode");
  }
  *(_DWORD *)(result + 1328) = v5;
  if (a3 == 2)
  {
    unsigned int v6 = v5 | 4;
  }
  else
  {
    if (a3 != 1) {
      ZinAssertImpl("Unsupported macro block size");
    }
    unsigned int v6 = v5 & 0xFFFFFFFB;
  }
  *(_DWORD *)(result + 1328) = v6;
  if ((a2 - 1) >= 0x13) {
    ZinAssertImpl("Invalid packing format");
  }
  *(_DWORD *)(result + 1328) = v6 & 0xFFFFFC0F | dword_211F04368[a2 - 1];
  return result;
}

double ZinAneTd<19u>::SetTileDmaDstMetaData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  ZinAneTdHw_v19::AddRelocInfo((uint64_t *)(a1 + 8), a2, 5192, a3, 1, 1, 0, 0);
  *(_DWORD *)(a1 + 1328) &= ~8u;
  double result = COERCE_DOUBLE(__PAIR64__(a5, a4));
  *(int32x2_t *)(a1 + 1304) = vsli_n_s32(*(int32x2_t *)(a1 + 1304), (int32x2_t)__PAIR64__(a5, a4), 7uLL);
  *(_DWORD *)(a1 + 1312) = *(_DWORD *)(a1 + 1312) & 0x7F | (a6 << 7);
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstNoMetaData(uint64_t result)
{
  *(_DWORD *)(result + 1328) |= 8u;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstDataSetId(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1265) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreEnable(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 1364) = *(_DWORD *)(result + 1364) & 0xFFFFFFFD | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreFlush(uint64_t result, int a2, __int16 a3)
{
  *(_DWORD *)(result + 1364) = *(_DWORD *)(result + 1364) & 0xFFFFFFFE | a2;
  *(_WORD *)(result + 1400) = a3;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreTaskSync(uint64_t result, int a2, int a3)
{
  if (a3) {
    int v3 = 4;
  }
  else {
    int v3 = 0;
  }
  if (a2) {
    int v4 = 8;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(result + 1364) = v3 | v4 | *(_DWORD *)(result + 1364) & 0xFFFFFFF3;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreEarlyTermination(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7, __int16 a8, __int16 a9, __int16 a10, char a11, __int16 a12, char a13)
{
  if (a2) {
    int v13 = 16;
  }
  else {
    int v13 = 0;
  }
  if (a3) {
    int v14 = 32;
  }
  else {
    int v14 = 0;
  }
  if (a4) {
    int v15 = 64;
  }
  else {
    int v15 = 0;
  }
  if (a5) {
    int v16 = 128;
  }
  else {
    int v16 = 0;
  }
  if (a6) {
    int v17 = 256;
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)(result + 1364) = v14 | v13 | v15 | v16 | v17 | *(_DWORD *)(result + 1364) & 0xFFFFFE0F;
  if (a3)
  {
    *(_WORD *)(result + 1396) = a8;
    if (!a4)
    {
LABEL_18:
      if (!a6) {
        goto LABEL_19;
      }
      goto LABEL_23;
    }
  }
  else if (!a4)
  {
    goto LABEL_18;
  }
  *(_WORD *)(result + 1398) = a9;
  if (!a6)
  {
LABEL_19:
    if (a5) {
      goto LABEL_25;
    }
LABEL_24:
    if (!a7) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  *(unsigned char *)(result + 1404) = a11;
  if ((a5 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_25:
  *(unsigned char *)(result + 1406) = a13;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreTelemetryBackOff(uint64_t result, int a2, char a3, unsigned __int8 a4, unsigned __int8 a5, int a6)
{
  unsigned int v6 = *(_DWORD *)(result + 1408) & 0xFFFFFFFE | a2;
  if (a2) {
    unsigned int v6 = (16 * (a3 & 0xF)) | (unsigned __int16)(a4 << 8) | (a5 << 16) | (a6 << 24) | *(_DWORD *)(result + 1408) & 0xE | a2 & 0xF;
  }
  *(_DWORD *)(result + 1408) = v6;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreFootprintLimiter(uint64_t result, int a2, __int16 a3, unsigned __int16 a4)
{
  if (a2) {
    int v4 = 512;
  }
  else {
    int v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(result + 1364) & 0xFFFFFDFF | v4;
  *(_DWORD *)(result + 1364) = v5;
  if (a2)
  {
    *(_DWORD *)(result + 1364) = (unsigned __int16)v5 | (a4 << 16);
    *(_DWORD *)(result + 1392) = *(_DWORD *)(result + 1392) & 0xF001FFFF | ((a3 & 0x7FF) << 17);
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreSieveFiltering(uint64_t result, char a2, char a3)
{
  *(_DWORD *)(result + 1368) = a2 & 7 | (16 * (a3 & 0xF)) | *(_DWORD *)(result + 1368) & 0xFFFFFF08;
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreBandwidthLimit(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 1368) = *(_DWORD *)(result + 1368) & 0xFFFE00FF | ((a2 & 0x1FF) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreTelemetryResponseAgeOut(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1368) = *(_DWORD *)(result + 1368) & 0xFF0FFFFF | ((a2 & 0xF) << 20);
  return result;
}

void ZinAneTd<19u>::SetCacheDmaPreDSIDAndSize(uint64_t a1, unsigned __int16 *a2, int a3)
{
  *(_DWORD *)(a1 + 1388) = *(_DWORD *)(a1 + 1388) & 0xC000007F | ((a3 & 0x7FFFFF) << 7);
  if (*((unsigned char *)a2 + 2))
  {
    int v4 = (uint64_t *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
    ZinAneTdHw_v19::AddRelocInfo(v4, (uint64_t)__p, 5698, *a2, 0, 0, 0, 0);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_2112DC670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<19u>::SetCacheDmaPreAddress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ZinAneTdHw_v19::AddRelocInfo((uint64_t *)(a1 + 8), a3, 5700, a2, 1, 1, 0, 0);
}

uint64_t ZinAneTd<19u>::SetCacheDmaPrePause(uint64_t result, int a2, int a3, int a4, int a5)
{
  if (a3) {
    int v5 = 0x20000;
  }
  else {
    int v5 = 0;
  }
  if ((a2 & 1) == 0 && (a3 & 1) == 0)
  {
    int v5 = 0;
    if (a5)
    {
      if ((a4 & 1) == 0) {
        ZinAssertImpl("Pause Duration has to be 0 if nothing to pause on");
      }
    }
  }
  if (a2) {
    int v6 = 0x40000;
  }
  else {
    int v6 = 0;
  }
  if (a4) {
    int v7 = 0x10000;
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(result + 1412) = (v7 | v6) & 0xFFFF0000 | (unsigned __int16)a5 | v5 | *(_DWORD *)(result + 1412) & 0xFFF80000;
  return result;
}

BOOL ZinAneTd<19u>::SetCacheDmaPreThrottle(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6)
{
  if (a3) {
    int v7 = 0x200000;
  }
  else {
    int v7 = 0;
  }
  if ((a2 & 1) == 0 && (a3 & 1) == 0)
  {
    int v7 = 0;
    if (a5)
    {
      if ((a4 & 1) == 0) {
        ZinAssertImpl("Throttle Duration has to be 0 if nothing to throttle on");
      }
    }
  }
  if (a2) {
    int v8 = 0x400000;
  }
  else {
    int v8 = 0;
  }
  if (a4) {
    int v9 = 0x100000;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)(a1 + 1416) = (v9 | v8) & 0xFFFF0000 | (unsigned __int16)a5 | v7 | *(_DWORD *)(a1 + 1416) & 0xFF8F0000;
  int v11 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a6, (unsigned int *)(*(void *)(a1 + 1464) + 744), &v11);
  if (!result) {
    ZinAssertImpl("Illegal Throttle Rate");
  }
  *(_DWORD *)(a1 + 1416) = *(_DWORD *)(a1 + 1416) & 0xFFF8FFFF | ((v11 & 7) << 16);
  return result;
}

BOOL ZinAneTd<19u>::SetCacheDmaPrePrefetchRate(uint64_t a1, unsigned int a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 752), &v4);
  if (!result) {
    ZinAssertImpl("Illegal Prefetch Rate");
  }
  *(_DWORD *)(a1 + 1364) = *(_DWORD *)(a1 + 1364) & 0xFFFF1FFF | ((v4 & 7) << 13);
  return result;
}

uint64_t ZinAneTd<19u>::SetFillLowerNEFirst(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 0x20000000;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xDFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetDoubleInt8Enable(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 0x4000000;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFBFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetArgOutputSelect(uint64_t result, int a2)
{
  if ((a2 - 6) > 5) {
    int v2 = 0x100000;
  }
  else {
    int v2 = dword_211F043B4[a2 - 6];
  }
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFF0FFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetMaxPoolMode(uint64_t result, unsigned int a2)
{
  if (a2 <= 0xE && ((1 << a2) & 0x48E2) != 0) {
    unsigned int v2 = *(_DWORD *)(result + 1208) | 0x80000;
  }
  else {
    unsigned int v2 = *(_DWORD *)(result + 1208) & 0xFFF7FFFF;
  }
  *(_DWORD *)(result + 1208) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::Set1DWinogradMode(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 0x8000000;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xF7FFFFFF | v2;
  return result;
}

BOOL ZinAneTd<19u>::SetKernelStrideRegisters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 52) |= 0x400u;
  int v7 = 0;
  if (!ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 736), &v7)) {
    ZinAssertImpl("Illegal Kernel Group Stride");
  }
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 76) & 0x3F | (v7 << 6);
  int v6 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a3, (unsigned int *)(*(void *)(a1 + 1464) + 728), &v6);
  if (!result) {
    ZinAssertImpl("Illegal Kernel OCG Stride");
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80) & 0x3F | (v6 << 6);
  return result;
}

uint64_t ZinAneTd<19u>::SetPaletteBlockSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 52) & 0xFFFFC7FF | ((a2 & 7) << 11);
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xF1FFFFFF | ((a2 & 7) << 25);
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelSparseBlockSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFF1FFFFF | ((a2 & 7) << 21);
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasKeyMask(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1224) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasMode(uint64_t result, int a2)
{
  switch(a2)
  {
    case 1:
      unsigned int v2 = *(_DWORD *)(result + 1224) & 0xFFEFFFFF;
LABEL_7:
      *(_DWORD *)(result + 1224) = v2;
      return result;
    case 2:
      unsigned int v2 = *(_DWORD *)(result + 1224) | 0x100000;
      goto LABEL_7;
    case 0:
      ZinAssertImpl("Unknown RCAS Mode.\n");
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasSenseAxis(uint64_t result, int a2)
{
  switch(a2)
  {
    case 0:
      unsigned int v2 = *(_DWORD *)(result + 1224) | 0x3000;
      goto LABEL_6;
    case 1:
      unsigned int v2 = *(_DWORD *)(result + 1224) & 0xFFFFCFFF | 0x1000;
      goto LABEL_6;
    case 2:
      unsigned int v2 = *(_DWORD *)(result + 1224) & 0xFFFFCFFF | 0x2000;
      goto LABEL_6;
    case 3:
      unsigned int v2 = *(_DWORD *)(result + 1224) & 0xFFFFCFFF;
LABEL_6:
      *(_DWORD *)(result + 1224) = v2;
      break;
    case 4:
    case 5:
      ZinAssertImpl("Unknown RCAS Sense Axis.\n");
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasSenseBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1224) = *(_DWORD *)(result + 1224) & 0xFFF0FFFF | ((a2 & 0xF) << 16);
  return result;
}

uint64_t ZinAneTd<19u>::SetRcasCmpBit(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1224) = *(_DWORD *)(result + 1224) & 0xFFFFF8FF | ((a2 & 7) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetGroupKernelReuse(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 1024;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFBFF | v2;
  if (a2) {
    int v3 = 16;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 52) & 0xFFFFFFEF | v3;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelSparseFmt(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFEFF | v2;
  if (a2) {
    int v3 = 32;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 52) & 0xFFFFFFDF | v3;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelSparseBinary(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 0x8000;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFF7FFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelPalettizedEn(uint64_t result, int a2)
{
  int v2 = 0;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      int v2 = 4;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    default:
      break;
  }
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelPalettizedBits(uint64_t result, int a2)
{
  int v2 = 128;
  switch(a2)
  {
    case 0:
    case 3:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      ZinAssertImpl("Unknown kernel format in codegen\n");
    case 7:
    case 8:
    case 9:
    case 10:
      int v2 = 16;
      break;
    case 11:
    case 12:
    case 13:
    case 14:
      int v2 = 32;
      break;
    case 15:
    case 16:
    case 17:
    case 18:
      ZinAssertImpl("Invalid kernel format");
    case 19:
    case 20:
    case 21:
    case 22:
      int v2 = 64;
      break;
    case 23:
    case 24:
    case 25:
    case 26:
      int v2 = 96;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFFFFFF0F | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelAsymQuantEn(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 0x1000000;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xFEFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDetectZeros(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 0x10000000;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 1204) = *(_DWORD *)(result + 1204) & 0xEFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetStochasticRoundMode(uint64_t result, int a2)
{
  if (a2 != 1 && a2 != 2)
  {
    if (!a2) {
      ZinAssertImpl("Invalid stochastic rounding mode");
    }
    a2 = 0;
  }
  *(_DWORD *)(result + 1228) = *(_DWORD *)(result + 1228) & 0xFFFFFFFC | a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetStochasticRoundSeed(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4 * a3 + 1232) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetStochasticRoundIntegerBits(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1228) = *(_DWORD *)(result + 1228) & 0xFFFFFE0F | (16 * (a2 & 0x1F));
  return result;
}

uint64_t ZinAneTd<19u>::SetQuantizationOutputZeroOffset(uint64_t result, int a2, char a3, int a4, uint64_t a5)
{
  int v6 = *(_DWORD **)a5;
  int v5 = *(_DWORD **)(a5 + 8);
  if (*(_DWORD **)a5 != v5)
  {
    while (*v6 != a4)
    {
      if (++v6 == v5)
      {
        int v6 = *(_DWORD **)(a5 + 8);
        break;
      }
    }
  }
  if (v6 != v5)
  {
    if (!a2) {
      a3 = 0;
    }
    *(unsigned char *)(result + 1248) = a3;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetNEBinaryPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFFC0FF | ((a2 & 0x3F) << 8);
  return result;
}

uint64_t ZinAneTd<19u>::SetNENonLinearMode(uint64_t result, int a2, uint64_t a3)
{
  if (a2)
  {
    if (a2 == 1)
    {
      a2 = 0x10000;
    }
    else
    {
      int v4 = *(_DWORD **)a3;
      int v3 = *(_DWORD **)(a3 + 8);
      if (*(_DWORD **)a3 != v3)
      {
        while (*v4 != a2)
        {
          if (++v4 == v3)
          {
            int v4 = *(_DWORD **)(a3 + 8);
            break;
          }
        }
      }
      if (v4 == v3) {
        ZinAssertImpl("Error: illegal non-linear mode\n");
      }
      a2 = 0x20000;
    }
  }
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFCFFFF | a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetNEPostScale(uint64_t result, unint64_t a2, char a3)
{
  _S0 = a2;
  __asm { FCVT            H0, S0 }
  int v8 = _S0;
  if (!_ZF) {
    int v8 = 0;
  }
  int v9 = ((a2 & 0xFF0000000000) != 0) << 14;
  int v10 = -((a2 >> 16) & 0x1F0000) & 0x1F0000 | v8;
  if (!a3)
  {
    int v9 = 0;
    int v10 = 15360;
  }
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFFBFFF | v9;
  *(_DWORD *)(result + 1220) = v10 | *(_DWORD *)(result + 1220) & 0xFFE00000;
  return result;
}

uint64_t ZinAneTd<19u>::SetNEBias(uint64_t result, unint64_t a2, char a3)
{
  _S0 = a2;
  __asm { FCVT            H0, S0 }
  int v8 = _S0;
  if (!_ZF) {
    int v8 = 0;
  }
  int v9 = 16 * ((a2 & 0xFF0000000000) != 0);
  int v10 = (a2 >> 16) & 0x1F0000 | v8;
  if (!a3)
  {
    int v9 = 0;
    int v10 = 0;
  }
  *(_DWORD *)(result + 1208) = *(_DWORD *)(result + 1208) & 0xFFFFFFEF | v9;
  *(_DWORD *)(result + 1216) = v10 | *(_DWORD *)(result + 1216) & 0xFFE00000;
  return result;
}

ZinIrKernel *ZinAneTd<19u>::SetNEMatrixVectorBias(uint64_t a1, ZinIrKernel **a2, uint64_t a3)
{
  BOOL result = *a2;
  if (*a2) {
    _ZF = (a3 & 0xFF00000000) == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF)
  {
    int v6 = 0;
  }
  else
  {
    _S8 = *(float *)&a3;
    BOOL result = (ZinIrKernel *)ZinIrKernel::GetWeightFormat(result);
    if (result == 4)
    {
      __asm { FCVT            H0, S8 }
      LOWORD(v8) = _H0;
    }
    else
    {
      if (result != 2 && result != 1) {
        ZinAssertImpl("Error: Invalid kernel format");
      }
      int v8 = (int)_S8;
    }
    *(_WORD *)(a1 + 1212) = v8;
    int v6 = 64;
  }
  *(_DWORD *)(a1 + 1208) = *(_DWORD *)(a1 + 1208) & 0xFFFFFFBF | v6;
  return result;
}

uint64_t ZinAneTd<19u>::SetNEOcgSize(uint64_t result, char a2)
{
  *(_DWORD *)(result + 580) = *(_DWORD *)(result + 580) & 0xFFFFFFF8 | a2 & 7;
  return result;
}

uint64_t ZinAneTd<19u>::SetOutputTranspose(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 0x10000000;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xEFFFFFFF | v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetNESmallSourceMode(uint64_t result, int a2)
{
  switch(a2)
  {
    case 0:
      unsigned int v2 = *(_DWORD *)(result + 576) & 0xFFFFFFF3;
      goto LABEL_6;
    case 1:
      unsigned int v2 = *(_DWORD *)(result + 576) & 0xFFFFFFF3 | 4;
      goto LABEL_6;
    case 2:
      ZinAssertImpl("Error: Tiny source mode is not supported for this arch");
    case 3:
      unsigned int v2 = *(_DWORD *)(result + 576) | 0xC;
      goto LABEL_6;
    case 4:
      unsigned int v2 = *(_DWORD *)(result + 576) & 0xFFFFFFF3 | 8;
LABEL_6:
      *(_DWORD *)(result + 576) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinAneTd<19u>::GetNESmallSourceMode(uint64_t a1)
{
  return *(unsigned int *)((char *)&unk_211ED50F0 + (*(_DWORD *)(a1 + 576) & 0xC));
}

uint64_t ZinAneTd<19u>::SetTileDmaSrcDma1UserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 618) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrcDma2UserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 622) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrcCompressedMdUserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 739) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaSrcCompressed2MdUserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 755) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetTileDmaDstUserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1266) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcCoeffUserTag(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2 = 0;
  int8x16_t v3 = (int8x16_t)vdupq_n_s32(a2 << 16);
  do
  {
    *(int8x16_t *)(result + 84 + v2) = vorrq_s8((int8x16_t)(*(_OWORD *)(result + 84 + v2) & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), v3);
    v2 += 16;
  }
  while (v2 != 64);
  return result;
}

uint64_t ZinAneTd<19u>::SetCachePrefetchDmaUserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1374) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcPostScaleUserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 294) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcPaletteLutUserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 310) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcBiasUserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 278) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetKernelDmaSrcNonLinearLutUserTag(uint64_t result, char a2)
{
  *(unsigned char *)(result + 326) = a2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCommonTaskType(uint64_t result, unsigned int a2)
{
  if (a2 <= 7) {
    *(_DWORD *)(result + 576) = *(_DWORD *)(result + 576) & 0xFFFFFF0F | dword_211F043CC[a2];
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetCommonInFmt(uint64_t result, int a2)
{
  if (a2 > 2)
  {
    if (a2 == 3)
    {
      unsigned int v2 = *(_DWORD *)(result + 516) & 0xFFFFFFFC | 2;
      goto LABEL_8;
    }
    if (a2 == 12) {
      ZinAssertImpl("Error: Invalid Common InFmt E4M3");
    }
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src1 input format");
  }
  if (a2 == 1)
  {
    unsigned int v2 = *(_DWORD *)(result + 516) & 0xFFFFFFFC | 1;
    goto LABEL_8;
  }
  if (a2 != 2) {
    goto LABEL_11;
  }
  unsigned int v2 = *(_DWORD *)(result + 516) & 0xFFFFFFFC;
LABEL_8:
  *(_DWORD *)(result + 516) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCommonSrc2InFmt(uint64_t result, int a2)
{
  if (a2 > 2)
  {
    if (a2 == 3)
    {
      unsigned int v2 = *(_DWORD *)(result + 516) & 0xFFFFFFF3 | 8;
      goto LABEL_8;
    }
    if (a2 == 12) {
      ZinAssertImpl("Error: Invalid TD programming for Src2 input format: E4M3");
    }
LABEL_11:
    ZinAssertImpl("Error: Invalid TD programming for Src2 input format");
  }
  if (a2 == 1)
  {
    unsigned int v2 = *(_DWORD *)(result + 516) & 0xFFFFFFF3 | 4;
    goto LABEL_8;
  }
  if (a2 != 2) {
    goto LABEL_11;
  }
  unsigned int v2 = *(_DWORD *)(result + 516) & 0xFFFFFFF3;
LABEL_8:
  *(_DWORD *)(result + 516) = v2;
  return result;
}

uint64_t ZinAneTd<19u>::SetCommonOutFmt(uint64_t result, int a2)
{
  if ((a2 - 3) < 9) {
    goto LABEL_2;
  }
  if (a2 <= 11)
  {
    if (a2 == 1)
    {
      unsigned int v2 = *(_DWORD *)(result + 516) & 0xFFFFFFCF | 0x10;
      goto LABEL_3;
    }
    if (a2 == 2)
    {
      unsigned int v2 = *(_DWORD *)(result + 516) & 0xFFFFFFCF;
      goto LABEL_3;
    }
LABEL_12:
    ZinAssertImpl("Error: Invalid output format");
  }
  if (a2 != 13)
  {
    if (a2 == 12) {
      ZinAssertImpl("Error: E4M3 is not supported");
    }
    goto LABEL_12;
  }
LABEL_2:
  unsigned int v2 = *(_DWORD *)(result + 516) & 0xFFFFFFCF | 0x20;
LABEL_3:
  *(_DWORD *)(result + 516) = v2;
  return result;
}

BOOL ZinAneTd<19u>::SetPatchHeight(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a1 + 584) & 0xFFFFFE0F | (16 * (a2 & 0x1F));
  return CheckRegValueRange(a2, (unsigned int *)(*(void *)(a1 + 1464) + 304));
}

BOOL ZinAneTd<19u>::SetPatchWidth(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a1 + 584) & 0xFFFFFFF0 | a2 & 0xF;
  return CheckRegValueRange(a2, (unsigned int *)(*(void *)(a1 + 1464) + 296));
}

BOOL ZinAneTd<19u>::SetTileHeight(uint64_t a1, unsigned int a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 216), &v4);
  if (result) {
    *(_DWORD *)(a1 + 568) = *(_DWORD *)(a1 + 568) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetTileOverlap(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 572) & 0xFFE0FFFF | ((a2 & 0x1F) << 16);
  return CheckRegValueRange(a2, (unsigned int *)(*(void *)(a1 + 1464) + 232));
}

BOOL ZinAneTd<19u>::SetTileOverlapPadBottom(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 572) & 0x83FFFFFF | ((a2 & 0x1F) << 26);
  return CheckRegValueRange(a2, (unsigned int *)(*(void *)(a1 + 1464) + 240));
}

BOOL ZinAneTd<19u>::SetTileOverlapPadTop(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 572) & 0xFC1FFFFF | ((a2 & 0x1F) << 21);
  return CheckRegValueRange(a2, (unsigned int *)(*(void *)(a1 + 1464) + 224));
}

BOOL ZinAneTd<19u>::SetCommonConvCfgKh(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 128), &v4);
  if (result) {
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFF03F | ((v4 & 0x3F) << 6);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgKw(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 136), &v4);
  if (result) {
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFFFC0 | v4 & 0x3F;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfg3dKd(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 168), &v4);
  if (result) {
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFFFFFFE0 | v4 & 0x1F;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgSx(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 120), &v4);
  if (result) {
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFF9FFF | ((v4 & 3) << 13);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgSy(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 112), &v4);
  if (result) {
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFE7FFF | ((v4 & 3) << 15);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfg3dSz(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 144), &v4);
  if (result) {
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFFFFFF3F | ((v4 & 3) << 6);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgOx(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 88), &v4);
  if (result) {
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xCFFFFFFF | ((v4 & 3) << 28);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgOy(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 80), &v4);
  if (result) {
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0x3FFFFFFF | (v4 << 30);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfg3dOz(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 160), &v4);
  if (result) {
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFFFF9FFF | ((v4 & 3) << 13);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgPadLeft(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 104), &v4);
  if (result) {
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFC1FFFF | ((v4 & 0x1F) << 17);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfgPadTop(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 96), &v4);
  if (result) {
    *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xF83FFFFF | ((v4 & 0x1F) << 22);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetCommonConvCfg3dPz(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 152), &v4);
  if (result) {
    *(_DWORD *)(a1 + 560) = *(_DWORD *)(a1 + 560) & 0xFFFFF0FF | ((v4 & 0xF) << 8);
  }
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnNumGroups(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 200), &v4);
  if (result) {
    *(_DWORD *)(a1 + 552) = *(_DWORD *)(a1 + 552) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnWin(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 24), &v4);
  if (result) {
    *(_DWORD *)(a1 + 520) = *(_DWORD *)(a1 + 520) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnHin(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 16), &v4);
  if (result) {
    *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnDin(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 32), &v4);
  if (result) {
    *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnCin(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 40), &v4);
  if (result) {
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 528) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnWout(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 64), &v4);
  if (result) {
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnHout(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 56), &v4);
  if (result) {
    *(_DWORD *)(a1 + 540) = *(_DWORD *)(a1 + 540) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnDout(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 72), &v4);
  if (result) {
    *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

BOOL ZinAneTd<19u>::SetOrReturnCout(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 48), &v4);
  if (result) {
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a1 + 544) & 0xFFFE0000 | v4 & 0x1FFFF;
  }
  return result;
}

uint64_t ZinAneTd<19u>::SetUnicastEn(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 0x4000;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(result + 564) = *(_DWORD *)(result + 564) & 0xFFFFBFFF | v2;
  return result;
}

BOOL ZinAneTd<19u>::SetUnicastCin(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(a2, (unsigned int *)(*(void *)(a1 + 1464) + 208), &v4);
  if (result) {
    *(_WORD *)(a1 + 566) = v4;
  }
  return result;
}

void ZinAneTd<8u>::SetPEIndexMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t ZinUAneCodegenUtil::CalculateBaseAddressOffsetDueToPadding(ZinUAneCodegenUtil *this, const ZinANELayer *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = *(void *)(*((void *)this + 11) + 8 * (int)a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v4 + 32))(v4, 0, 0);
  (*(void (**)(uint64_t *__return_ptr, ZinUAneCodegenUtil *))(*(void *)this + 352))(&v20, this);
  BOOL v6 = v2 != 0;
  uint64_t v7 = *(void *)(ZinMirL2Config::GetTileSrc(*((void *)this + 33) + 120, v6) + 8);
  uint64_t v19 = 0;
  if (ZinTensorFormatGetSizeInBytes(*(_DWORD *)(v5 + 88), &v19))
  {
    uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinUAneCodegenUtil::CalculateBaseAddressOffsetDueToPadding();
      return 0;
    }
  }
  else
  {
    uint64_t L2RdSymbol = ZinEngineLayerMirInfo::GetL2RdSymbol(*((void *)this + 33), v6);
    uint64_t v10 = *(void *)(L2RdSymbol + 384);
    unint64_t v11 = *(void *)(L2RdSymbol + 16);
    int v12 = v20;
    int v13 = v21;
    int v14 = v19;
    Hal = ZinIrTarget::GetHal(*((uint64_t **)this + 2), *(ZinIrTarget **)(*((void *)this + 2) + 160));
    uint64_t v16 = *(void *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal) + 632);
    int v17 = v12 * v14 + (int)v7 % (int)v16 * v13;
    int v18 = v11 % (int)v16;
    if (v17 > v18) {
      v17 += (v10 - 1) * v16 + (v10 - 1) * v16 * ((v17 + ~v18) / (int)v16);
    }
    return (v17 + (v7 - (int)v7 % (int)v16) * v13);
  }
  return result;
}

void ZinUAneCodegenUtil::CalculateBaseAddressOffsetDueToPadding()
{
  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Couldn't get size of tensor format\n", v0, 2u);
}

uint64_t ZinIrReductionUnitInfo::TensorDimensions(ZinIrReductionUnitInfo *this, const ZinTensorDimensions *a2, ZinTensorDimensions *a3)
{
  long long v3 = *(_OWORD *)a2;
  long long v4 = *((_OWORD *)a2 + 1);
  *((void *)a3 + 4) = *((void *)a2 + 4);
  *(_OWORD *)a3 = v3;
  *((_OWORD *)a3 + 1) = v4;
  uint64_t v5 = *((void *)this + 12);
  if ((v5 & 0x10) != 0)
  {
    *((void *)a3 + 3) = 1;
    uint64_t v5 = *((void *)this + 12);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  *((void *)a3 + 2) = 1;
  uint64_t v5 = *((void *)this + 12);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    *((void *)a3 + 4) = 1;
    if ((*((void *)this + 12) & 1) == 0) {
      return 0;
    }
    goto LABEL_6;
  }
LABEL_10:
  *((void *)a3 + 1) = 1;
  uint64_t v5 = *((void *)this + 12);
  if ((v5 & 2) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if (v5) {
LABEL_6:
  }
    *(void *)a3 = 1;
  return 0;
}

uint64_t ZinIrOpt::ReverseCSEDuplicateNode(uint64_t **a1, uint64_t a2, ZinIrOpLayerGraph *a3, uint64_t a4)
{
  v39[1] = *MEMORY[0x263EF8340];
  long long v4 = (uint64_t *)*((void *)a3 + 11);
  if (*((void *)a3 + 12) - (void)v4 != 8)
  {
    LOBYTE(v22) = 0;
    return v22 & 1;
  }
  uint64_t v31 = *v4;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  int v8 = *(void **)a4;
  int v9 = *(void **)(a4 + 8);
  if (*(void **)a4 == v9)
  {
    uint64_t v20 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    do
    {
      if (*v8)
      {
        (*(void (**)(ZinIrOpLayerGraph *, void, void))(*(void *)a3 + 32))(a3, 0, 0);
        (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a2 + 16))(&__p, a2, 0);
        ZinIrTensor::CreateTensor();
      }
      if (v11 >= v38)
      {
        uint64_t v12 = (v11 - (unsigned char *)v36) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = (v38 - (unsigned char *)v36) >> 2;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)(v38 - (unsigned char *)v36) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v38, v14);
        }
        else {
          int v15 = 0;
        }
        uint64_t v16 = &v15[8 * v12];
        *(void *)uint64_t v16 = 0;
        unint64_t v11 = v16 + 8;
        int v18 = (char *)v36;
        int v17 = v37;
        if (v37 != v36)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          int v17 = (char *)v36;
        }
        v36 = v16;
        v37 = v11;
        v38 = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)unint64_t v11 = 0;
        v11 += 8;
      }
      v37 = v11;
      ++v8;
    }
    while (v8 != v9);
    uint64_t v20 = (char *)v36;
    if (v11 != v36)
    {
      unint64_t v21 = 0;
      LOBYTE(v22) = 1;
      do
      {
        v23 = *(ZinIrOpLayer **)&v20[8 * v21];
        if (v23)
        {
          v39[0] = a3;
          v35[0] = v39;
          v35[1] = 1;
          Layer2TDMapper::SourceLayer::SourceLayer(&__p, v35);
          BOOL v24 = ZinIrOpLayerGraph::AddNode(a1, v23, (ZinIrOpLayer ***)&__p);
          __p = &unk_26C359A08;
          if (v33)
          {
            v34 = v33;
            operator delete(v33);
          }
          int v25 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v31, *((void *)v36 + v21), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          uint64_t v26 = *(void *)(*(void *)a4 + 8 * v21);
          v27 = *(ZinIrOpLayerGraph ***)(v26 + 88);
          v28 = *(ZinIrOpLayerGraph ***)(v26 + 96);
          v29 = v27;
          if (v27 != v28)
          {
            while (*v29 != a3)
            {
              if (++v29 == v28)
              {
                v29 = *(ZinIrOpLayerGraph ***)(v26 + 96);
                break;
              }
            }
          }
          int v22 = v24 & v25 & ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a1, a3, *((ZinIrOpLayer **)v36 + v21), v26, 0xFFFFFFFFFFFFFFFFLL, v29 - v27, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
          uint64_t v20 = (char *)v36;
          unint64_t v11 = v37;
        }
        ++v21;
      }
      while (v21 < (v11 - v20) >> 3);
      goto LABEL_38;
    }
  }
  LOBYTE(v22) = 1;
LABEL_38:
  if (*((void *)a3 + 15) == *((void *)a3 + 14))
  {
    LOBYTE(v22) = v22 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, a3, 0);
    uint64_t v20 = (char *)v36;
  }
  if (v20)
  {
    v37 = v20;
    operator delete(v20);
  }
  return v22 & 1;
}

void sub_2112DE2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2112DE374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    JUMPOUT(0x2112DE384);
  }
  JUMPOUT(0x2112DE35CLL);
}

uint64_t ZinIrOpt::ReverseCSEDuplicateNodeFanInPattern(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, ZinIrOpLayer *a5, uint64_t **a6)
{
  v42[1] = *MEMORY[0x263EF8340];
  v39 = 0;
  v40 = 0;
  v41 = 0;
  int v8 = *(void **)a3;
  int v9 = *(void **)(a3 + 8);
  if (*(void **)a3 == v9) {
    goto LABEL_35;
  }
  uint64_t v12 = 0;
  do
  {
    if (*v8)
    {
      (*(void (**)(void, void, void))(*(void *)*v8 + 32))(*v8, 0, 0);
      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a2 + 16))(&__p, a2, 0);
      ZinIrTensor::CreateTensor();
    }
    if (v12 >= v41)
    {
      uint64_t v13 = (v12 - (unsigned char *)v39) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = (v41 - (unsigned char *)v39) >> 2;
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      if ((unint64_t)(v41 - (unsigned char *)v39) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v41, v15);
      }
      else {
        uint64_t v16 = 0;
      }
      int v17 = &v16[8 * v13];
      *(void *)int v17 = 0;
      uint64_t v12 = v17 + 8;
      uint64_t v19 = (char *)v39;
      int v18 = v40;
      if (v40 != v39)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v17 - 1) = v20;
          v17 -= 8;
        }
        while (v18 != v19);
        int v18 = (char *)v39;
      }
      v39 = v17;
      v40 = v12;
      v41 = &v16[8 * v15];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(void *)uint64_t v12 = 0;
      v12 += 8;
    }
    v40 = v12;
    ++v8;
  }
  while (v8 != v9);
  unint64_t v21 = (char *)v39;
  if (v12 - (unsigned char *)v39 != *(void *)(a3 + 8) - *(void *)a3) {
    ZinAssertImpl("There should be one clone layer for each fan in branch.");
  }
  if (v12 == v39)
  {
LABEL_35:
    int v24 = 1;
  }
  else
  {
    unint64_t v22 = 0;
    v23 = a5;
    int v24 = 1;
    do
    {
      int v25 = *(ZinIrOpLayer **)&v21[8 * v22];
      if (v25)
      {
        uint64_t v26 = *(ZinIrOpLayer **)(*(void *)a3 + 8 * v22);
        if (!v26) {
          ZinAssertImpl("preceding layer should not be nullptr if the corresponding clone layer exist.");
        }
        if (*a4 != a4[1] && *(void *)(*a4 + 8 * v22)) {
          v23 = *(ZinIrOpLayer **)(*a4 + 8 * v22);
        }
        v42[0] = a6;
        v38[0] = v42;
        v38[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&__p, v38);
        int inserted = ZinIrOpLayerGraph::InsertNodeBetween(a1, v25, v26, v23, (ZinIrOpLayer ***)&__p);
        __p = &unk_26C359A08;
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
        v24 &= inserted;
        unint64_t v21 = (char *)v39;
        uint64_t v12 = v40;
      }
      ++v22;
    }
    while (v22 < (v12 - v21) >> 3);
  }
  memset(v33, 0, sizeof(v33));
  int v34 = 1065353216;
  int v28 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, a6, a5, v33);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v33);
  BOOL v29 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)a6, 0);
  if (v39)
  {
    v40 = (char *)v39;
    operator delete(v39);
  }
  return v24 & v28 & v29;
}

void sub_2112DE7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2112DE844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    JUMPOUT(0x2112DE854);
  }
  JUMPOUT(0x2112DE82CLL);
}

uint64_t ZinIrOpt::ReverseCSE(void *a1, uint64_t a2, unsigned char *a3, int a4)
{
  v160[4] = *MEMORY[0x263EF8340];
  uint64_t v59 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v132, "to_duplicate");
  uint64_t v19 = a3;
  v135 = &unk_26C380F00;
  v136 = ZinIrOpt::IsView;
  v137 = &v135;
  long long v138 = 0u;
  long long v139 = 0u;
  int v140 = 1065353216;
  v152 = 0;
  v150 = 0;
  uint64_t v151 = 0;
  __p = &v150;
  char v78 = 0;
  v150 = operator new(0x60uLL);
  uint64_t v151 = (uint64_t)v150;
  v152 = (char *)v150 + 96;
  uint64_t v151 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v152, (uint64_t)&v132, (uint64_t)v141, (uint64_t)v150);
  v65 = &v150;
  std::string::basic_string[abi:ne180100]<0>(&__p, "consumers");
  v80 = &unk_26C380F00;
  v81 = ZinIrOpt::IsMatmult;
  v82 = &v80;
  long long v83 = 0u;
  long long v84 = 0u;
  int v85 = 1065353216;
  v125 = 0;
  v123 = 0;
  uint64_t v124 = 0;
  v114 = &v123;
  LOBYTE(v115) = 0;
  v123 = operator new(0x60uLL);
  uint64_t v124 = (uint64_t)v123;
  v125 = (void **)((char *)v123 + 96);
  uint64_t v124 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v125, (uint64_t)&__p, (uint64_t)v86, (uint64_t)v123);
  uint64_t v66 = (uint64_t)&v123;
  v160[0] = &unk_26C3811C0;
  v160[1] = ZinIrOpt::IsQualified;
  v160[3] = v160;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v102, &v65, a2, 0, v160, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v102, v71);
  *(_OWORD *)v92 = *(_OWORD *)v71;
  v71[0] = 0;
  v71[1] = 0;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v114 = &v56;
  LOBYTE(v115) = 0;
  v56 = operator new(0x10uLL);
  v57 = v56;
  v58 = v56 + 2;
  v57 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>((uint64_t)&v58, v92, &v93, v56);
  if (v92[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92[1]);
  }
  if (v71[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v71[1]);
  }
  v102[0] = (void **)&unk_26C350430;
  v114 = v107;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  v104[0] = &unk_26C349BA8;
  v114 = v106;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  ZinPattern::~ZinPattern((ZinPattern *)v104);
  v114 = v103;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  ZinPattern::~ZinPattern((ZinPattern *)v102);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v160);
  v114 = &v123;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v83);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v80);
  if (v79 < 0) {
    operator delete(__p);
  }
  __p = &v150;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v138);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v135);
  if (v134 < 0) {
    operator delete(v132);
  }
  std::string::basic_string[abi:ne180100]<0>(&v132, "to_duplicate");
  v135 = &unk_26C380F00;
  v136 = ZinIrOpt::IsDeQuant;
  v137 = &v135;
  long long v138 = 0u;
  long long v139 = 0u;
  int v140 = 1065353216;
  v152 = 0;
  v150 = 0;
  uint64_t v151 = 0;
  __p = &v150;
  char v78 = 0;
  v150 = operator new(0x60uLL);
  uint64_t v151 = (uint64_t)v150;
  v152 = (char *)v150 + 96;
  uint64_t v151 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v152, (uint64_t)&v132, (uint64_t)v141, (uint64_t)v150);
  v65 = &v150;
  std::string::basic_string[abi:ne180100]<0>(&__p, "consumers");
  v80 = &unk_26C380F00;
  v81 = ZinIrOpt::IsAnyOp;
  v82 = &v80;
  long long v83 = 0u;
  long long v84 = 0u;
  int v85 = 1065353216;
  v125 = 0;
  v123 = 0;
  uint64_t v124 = 0;
  v114 = &v123;
  LOBYTE(v115) = 0;
  v123 = operator new(0x60uLL);
  uint64_t v124 = (uint64_t)v123;
  v125 = (void **)((char *)v123 + 96);
  uint64_t v124 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v125, (uint64_t)&__p, (uint64_t)v86, (uint64_t)v123);
  uint64_t v66 = (uint64_t)&v123;
  v159[0] = &unk_26C3811C0;
  v159[1] = ZinIrOpt::IsQualified;
  v159[3] = v159;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v102, &v65, a2, 0, v159, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v102, v71);
  *(_OWORD *)v92 = *(_OWORD *)v71;
  v71[0] = 0;
  v71[1] = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v114 = &v53;
  LOBYTE(v115) = 0;
  v53 = operator new(0x10uLL);
  v54 = v53;
  v55 = v53 + 2;
  v54 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>((uint64_t)&v55, v92, &v93, v53);
  if (v92[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92[1]);
  }
  if (v71[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v71[1]);
  }
  v102[0] = (void **)&unk_26C350430;
  v114 = v107;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  v104[0] = &unk_26C349BA8;
  v114 = v106;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  ZinPattern::~ZinPattern((ZinPattern *)v104);
  v114 = v103;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  ZinPattern::~ZinPattern((ZinPattern *)v102);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v159);
  v114 = &v123;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v83);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v80);
  if (v79 < 0) {
    operator delete(__p);
  }
  __p = &v150;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v138);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v135);
  if (v134 < 0) {
    operator delete(v132);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "to_duplicate");
  v80 = &unk_26C380F00;
  v81 = ZinIrOpt::IsBroadcast;
  v82 = &v80;
  long long v83 = 0u;
  long long v84 = 0u;
  int v85 = 1065353216;
  v72 = 0;
  v71[0] = 0;
  v71[1] = 0;
  v132 = v71;
  char v133 = 0;
  v71[0] = operator new(0x60uLL);
  v71[1] = v71[0];
  v72 = (char *)v71[0] + 96;
  v71[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v72, (uint64_t)&__p, (uint64_t)v86, (uint64_t)v71[0]);
  *(void *)&long long v38 = v71;
  std::string::basic_string[abi:ne180100]<0>(&v150, "consumers");
  v153 = &unk_26C380F00;
  v154 = ZinIrOpt::IsScaledEW;
  v155 = &v153;
  long long v156 = 0u;
  long long v157 = 0u;
  int v158 = 1065353216;
  v67 = 0;
  v65 = 0;
  uint64_t v66 = 0;
  v132 = &v65;
  char v133 = 0;
  v65 = operator new(0x60uLL);
  uint64_t v66 = (uint64_t)v65;
  v67 = (char *)v65 + 96;
  uint64_t v66 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v67, (uint64_t)&v150, (uint64_t)v159, (uint64_t)v65);
  *((void *)&v38 + 1) = &v65;
  v149[0] = &unk_26C3811C0;
  v149[1] = ZinIrOpt::IsQualified;
  v149[3] = v149;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v102, &v38, a2, 0, v149, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v102, &v42);
  *(_OWORD *)v92 = v42;
  long long v42 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v123, "to_duplicate");
  v126 = &unk_26C380F00;
  v127 = ZinIrOpt::IsDeQuant;
  v128 = &v126;
  long long v129 = 0u;
  long long v130 = 0u;
  int v131 = 1065353216;
  *(void *)&v99[0] = 0;
  long long v98 = 0uLL;
  v114 = &v98;
  LOBYTE(v115) = 0;
  uint64_t v20 = a1;
  *(void *)&long long v98 = operator new(0x60uLL);
  *((void *)&v98 + 1) = v98;
  *(void *)&v99[0] = v98 + 96;
  *((void *)&v98 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)v99, (uint64_t)&v123, (uint64_t)&v132, v98);
  *(void *)&long long v32 = &v98;
  std::string::basic_string[abi:ne180100]<0>(&v114, "consumers");
  v117 = &unk_26C380F00;
  v118 = ZinIrOpt::IsAnyOp;
  v119 = &v117;
  long long v120 = 0u;
  long long v121 = 0u;
  int v122 = 1065353216;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v44 = (void **)&v47;
  LOBYTE(v45) = 0;
  v47 = operator new(0x60uLL);
  v48 = v47;
  v49 = v47 + 12;
  v48 = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v49, (uint64_t)&v114, (uint64_t)&v123, (uint64_t)v47);
  *((void *)&v32 + 1) = &v47;
  v113[0] = &unk_26C3811C0;
  v113[1] = ZinIrOpt::IsQualified;
  v113[3] = v113;
  ZinOneToVariablePattern::ZinOneToVariablePattern(&v132, &v32, a2, 0, v113, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)&v132, &v36);
  long long v93 = v36;
  long long v36 = 0uLL;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  v44 = (void **)&v50;
  LOBYTE(v45) = 0;
  v50 = operator new(0x20uLL);
  v51 = v50;
  v52 = v50 + 4;
  v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>((uint64_t)&v52, v92, v94, v50);
  for (uint64_t i = 3; i != -1; i -= 2)
  {
    int v9 = (std::__shared_weak_count *)v92[i];
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  v132 = &unk_26C350430;
  v44 = (void **)v148;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100](&v44);
  v146[0] = &unk_26C349BA8;
  v44 = (void **)v147;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v44);
  ZinPattern::~ZinPattern((ZinPattern *)v146);
  v44 = (void **)&v144;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v44);
  ZinPattern::~ZinPattern((ZinPattern *)&v132);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v113);
  v44 = (void **)&v47;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v44);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v120);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v117);
  if (SHIBYTE(v116) < 0) {
    operator delete(v114);
  }
  v114 = &v98;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v129);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v126);
  if (SHIBYTE(v125) < 0) {
    operator delete(v123);
  }
  if (*((void *)&v42 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
  }
  v102[0] = (void **)&unk_26C350430;
  v132 = v107;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  v104[0] = &unk_26C349BA8;
  v132 = v106;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  ZinPattern::~ZinPattern((ZinPattern *)v104);
  v132 = v103;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  ZinPattern::~ZinPattern((ZinPattern *)v102);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v149);
  v132 = &v65;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v156);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v153);
  if (SHIBYTE(v152) < 0) {
    operator delete(v150);
  }
  v132 = v71;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v83);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v80);
  if (v79 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "to_duplicate");
  v80 = &unk_26C380F00;
  v81 = ZinIrOpt::IsPreScale;
  v82 = &v80;
  long long v83 = 0u;
  long long v84 = 0u;
  int v85 = 1065353216;
  v72 = 0;
  v71[0] = 0;
  v71[1] = 0;
  v132 = v71;
  char v133 = 0;
  v71[0] = operator new(0x60uLL);
  v71[1] = v71[0];
  v72 = (char *)v71[0] + 96;
  v71[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v72, (uint64_t)&__p, (uint64_t)v86, (uint64_t)v71[0]);
  *(void *)&long long v36 = v71;
  std::string::basic_string[abi:ne180100]<0>(&v150, "consumers");
  v153 = &unk_26C380F00;
  v154 = ZinIrOpt::IsScaledEW;
  v155 = &v153;
  long long v156 = 0u;
  long long v157 = 0u;
  int v158 = 1065353216;
  v67 = 0;
  v65 = 0;
  uint64_t v66 = 0;
  v132 = &v65;
  char v133 = 0;
  v65 = operator new(0x60uLL);
  uint64_t v66 = (uint64_t)v65;
  v67 = (char *)v65 + 96;
  uint64_t v66 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v67, (uint64_t)&v150, (uint64_t)v159, (uint64_t)v65);
  *((void *)&v36 + 1) = &v65;
  v112[0] = &unk_26C3811C0;
  v112[1] = ZinIrOpt::IsQualified;
  v112[3] = v112;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v102, &v36, a2, 0, v112, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v102, &v38);
  *(_OWORD *)v92 = v38;
  long long v38 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v123, "to_duplicate");
  v126 = &unk_26C380F00;
  v127 = ZinIrOpt::IsDeQuant;
  v128 = &v126;
  long long v129 = 0u;
  long long v130 = 0u;
  int v131 = 1065353216;
  *(void *)&v99[0] = 0;
  long long v98 = 0uLL;
  v114 = &v98;
  LOBYTE(v115) = 0;
  *(void *)&long long v98 = operator new(0x60uLL);
  *((void *)&v98 + 1) = v98;
  *(void *)&v99[0] = v98 + 96;
  *((void *)&v98 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)v99, (uint64_t)&v123, (uint64_t)&v132, v98);
  BOOL v29 = (void ***)&v98;
  std::string::basic_string[abi:ne180100]<0>(&v114, "consumers");
  v117 = &unk_26C380F00;
  v118 = ZinIrOpt::IsAnyOp;
  v119 = &v117;
  long long v120 = 0u;
  long long v121 = 0u;
  int v122 = 1065353216;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  *(void *)&long long v42 = &v44;
  BYTE8(v42) = 0;
  v44 = (void **)operator new(0x60uLL);
  v45 = v44;
  v46 = v44 + 12;
  v45 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v46, (uint64_t)&v114, (uint64_t)&v123, (uint64_t)v44);
  v30 = &v44;
  v111[0] = &unk_26C3811C0;
  v111[1] = ZinIrOpt::IsQualified;
  v111[3] = v111;
  ZinOneToVariablePattern::ZinOneToVariablePattern(&v132, &v29, a2, 0, v111, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)&v132, &v32);
  long long v93 = v32;
  long long v32 = 0uLL;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  *(void *)&long long v42 = &v47;
  BYTE8(v42) = 0;
  v47 = operator new(0x20uLL);
  v48 = v47;
  v49 = v47 + 4;
  v48 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>((uint64_t)&v49, v92, v94, v47);
  for (uint64_t j = 3; j != -1; j -= 2)
  {
    unint64_t v11 = (std::__shared_weak_count *)v92[j];
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  v132 = &unk_26C350430;
  *(void *)&long long v42 = v148;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v146[0] = &unk_26C349BA8;
  *(void *)&long long v42 = v147;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  ZinPattern::~ZinPattern((ZinPattern *)v146);
  *(void *)&long long v42 = &v144;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  ZinPattern::~ZinPattern((ZinPattern *)&v132);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v111);
  *(void *)&long long v42 = &v44;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v120);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v117);
  if (SHIBYTE(v116) < 0) {
    operator delete(v114);
  }
  v114 = &v98;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v129);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v126);
  if (SHIBYTE(v125) < 0) {
    operator delete(v123);
  }
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
  v102[0] = (void **)&unk_26C350430;
  v132 = v107;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  v104[0] = &unk_26C349BA8;
  v132 = v106;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  ZinPattern::~ZinPattern((ZinPattern *)v104);
  v132 = v103;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  ZinPattern::~ZinPattern((ZinPattern *)v102);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v112);
  v132 = &v65;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v156);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v153);
  if (SHIBYTE(v152) < 0) {
    operator delete(v150);
  }
  v132 = v71;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v83);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v80);
  if (v79 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v132, "producers");
  v135 = &unk_26C380F00;
  v136 = ZinIrOpt::IsMatmult;
  v137 = &v135;
  LODWORD(v38) = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v138, (int *)&v38, 1);
  std::string::basic_string[abi:ne180100]<0>(v141, "optional_mem_movements");
  v142[0] = &unk_26C380F00;
  v142[1] = ZinIrOpt::IsTranspose;
  v142[3] = v142;
  LODWORD(v36) = 0;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v143, (int *)&v36, 1);
  uint64_t v115 = 0;
  v114 = 0;
  v116 = 0;
  __p = &v114;
  char v78 = 0;
  v114 = operator new(0xC0uLL);
  uint64_t v115 = (uint64_t)v114;
  v116 = (char *)v114 + 192;
  uint64_t v115 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v116, (uint64_t)&v132, (uint64_t)&v145, (uint64_t)v114);
  v123 = &v114;
  std::string::basic_string[abi:ne180100]<0>(&__p, "concat");
  v80 = &unk_26C380F00;
  v81 = ZinIrOpt::IsConcat;
  v82 = &v80;
  long long v83 = 0u;
  long long v84 = 0u;
  int v85 = 1065353216;
  *(void *)&long long v93 = 0;
  v92[0] = 0;
  v92[1] = 0;
  v150 = v92;
  LOBYTE(v151) = 0;
  v92[0] = operator new(0x60uLL);
  v92[1] = v92[0];
  *(void *)&long long v93 = (char *)v92[0] + 96;
  v92[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v93, (uint64_t)&__p, (uint64_t)v86, (uint64_t)v92[0]);
  uint64_t v124 = (uint64_t)v92;
  std::string::basic_string[abi:ne180100]<0>(&v150, "to_duplicate");
  v153 = &unk_26C380F00;
  v154 = ZinIrOpt::IsPreScale;
  v155 = &v153;
  LODWORD(v32) = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v156, (int *)&v32, 1);
  v71[1] = 0;
  v71[0] = 0;
  v72 = 0;
  v65 = v71;
  LOBYTE(v66) = 0;
  v71[0] = operator new(0x60uLL);
  v71[1] = v71[0];
  v72 = (char *)v71[0] + 96;
  v71[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v72, (uint64_t)&v150, (uint64_t)v159, (uint64_t)v71[0]);
  v125 = v71;
  v128 = 0;
  v101[0] = &unk_26C3811C0;
  v101[1] = ZinIrOpt::IsSameFormat;
  v101[3] = v101;
  ZinVariableToOnePattern::ZinVariableToOnePattern(v102, &v123, a2, 0, v101, 0);
  std::allocate_shared[abi:ne180100]<ZinVariableToOnePattern,std::allocator<ZinVariableToOnePattern>,ZinVariableToOnePattern,void>((const ZinVariableToOnePattern *)v102, &v42);
  long long v98 = v42;
  long long v42 = 0uLL;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v65 = &v44;
  LOBYTE(v66) = 0;
  v44 = (void **)operator new(0x10uLL);
  v45 = v44;
  v46 = v44 + 2;
  v45 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>((uint64_t)&v46, &v98, v99, v44);
  if (*((void *)&v98 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v98 + 1));
  }
  if (*((void *)&v42 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
  }
  v102[0] = (void **)&unk_26C350940;
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v110);
  v108 = &unk_26C349BA8;
  v65 = &v109;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  ZinPattern::~ZinPattern((ZinPattern *)&v108);
  v105 = &unk_26C349BA8;
  v65 = v107;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  ZinPattern::~ZinPattern((ZinPattern *)&v105);
  v65 = v104;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  v65 = v103;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  ZinPattern::~ZinPattern((ZinPattern *)v102);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v101);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](&v126);
  v65 = v71;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v156);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v153);
  if (SHIBYTE(v152) < 0) {
    operator delete(v150);
  }
  v150 = v92;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v150);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v83);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v80);
  if (v79 < 0) {
    operator delete(__p);
  }
  __p = &v114;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (uint64_t k = 0; k != -24; k -= 12)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v143[k * 8]);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v142[k]);
    if (SHIBYTE(v141[k + 2]) < 0) {
      operator delete((void *)v141[k]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v150, "to_duplicate");
  v153 = &unk_26C380F00;
  v154 = ZinIrOpt::IsPreScale;
  v155 = &v153;
  long long v156 = 0u;
  long long v157 = 0u;
  int v158 = 1065353216;
  uint64_t v39 = 0;
  long long v38 = 0uLL;
  v132 = &v38;
  char v133 = 0;
  *(void *)&long long v38 = operator new(0x60uLL);
  *((void *)&v38 + 1) = v38;
  uint64_t v39 = v38 + 96;
  *((void *)&v38 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v39, (uint64_t)&v150, (uint64_t)v159, v38);
  v40[0] = &v38;
  std::string::basic_string[abi:ne180100]<0>(&v123, "consumers");
  v126 = &unk_26C380F00;
  v127 = ZinIrOpt::IsScaledEW;
  v128 = &v126;
  long long v129 = 0u;
  long long v130 = 0u;
  int v131 = 1065353216;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  v132 = &v36;
  char v133 = 0;
  *(void *)&long long v36 = operator new(0x60uLL);
  *((void *)&v36 + 1) = v36;
  uint64_t v37 = v36 + 96;
  *((void *)&v36 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v37, (uint64_t)&v123, (uint64_t)&v132, v36);
  v40[1] = &v36;
  v97[0] = &unk_26C3811C0;
  v97[1] = ZinIrOpt::IsQualified;
  v97[3] = v97;
  ZinOneToVariablePattern::ZinOneToVariablePattern(v102, v40, a2, 0, v97, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)v102, &v41);
  long long v98 = v41;
  long long v41 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v114, "to_duplicate");
  v117 = &unk_26C380F00;
  v118 = ZinIrOpt::IsDeQuant;
  v119 = &v117;
  long long v120 = 0u;
  long long v121 = 0u;
  int v122 = 1065353216;
  uint64_t v33 = 0;
  long long v32 = 0uLL;
  __p = &v32;
  char v78 = 0;
  *(void *)&long long v32 = operator new(0x60uLL);
  *((void *)&v32 + 1) = v32;
  uint64_t v33 = v32 + 96;
  *((void *)&v32 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v33, (uint64_t)&v114, (uint64_t)&v123, v32);
  v34[0] = &v32;
  std::string::basic_string[abi:ne180100]<0>(v92, "consumers");
  *((void *)&v93 + 1) = &unk_26C380F00;
  v94[0] = ZinIrOpt::IsAnyOp;
  v94[2] = (char *)&v93 + 8;
  memset(v95, 0, sizeof(v95));
  int v96 = 1065353216;
  v30 = 0;
  uint64_t v31 = 0;
  BOOL v29 = 0;
  __p = &v29;
  char v78 = 0;
  BOOL v29 = (void ***)operator new(0x60uLL);
  v30 = v29;
  uint64_t v31 = v29 + 12;
  v30 = (void ***)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v31, (uint64_t)v92, (uint64_t)v97, (uint64_t)v29);
  v34[1] = &v29;
  v91[0] = &unk_26C3811C0;
  v91[1] = ZinIrOpt::IsQualified;
  v91[3] = v91;
  ZinOneToVariablePattern::ZinOneToVariablePattern(&v132, v34, a2, 0, v91, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)&v132, &v35);
  v99[0] = v35;
  long long v35 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v71, "to_duplicate");
  v73[0] = &unk_26C380F00;
  v73[1] = ZinIrOpt::IsCHTranspose;
  v73[3] = v73;
  memset(v74, 0, sizeof(v74));
  int v75 = 1065353216;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v24 = 0;
  v65 = &v24;
  LOBYTE(v66) = 0;
  int v24 = (char *)operator new(0x60uLL);
  uint64_t v25 = (uint64_t)v24;
  uint64_t v26 = v24 + 96;
  uint64_t v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v26, (uint64_t)v71, (uint64_t)&v76, (uint64_t)v24);
  v27[0] = &v24;
  std::string::basic_string[abi:ne180100]<0>(&v65, "consumers");
  v68[0] = &unk_26C380F00;
  v68[1] = ZinIrOpt::IsAnyOp;
  v68[3] = v68;
  memset(v69, 0, sizeof(v69));
  int v70 = 1065353216;
  uint64_t v22 = 0;
  v23 = 0;
  unint64_t v21 = 0;
  v60 = &v21;
  char v61 = 0;
  unint64_t v21 = (char *)operator new(0x60uLL);
  uint64_t v22 = (uint64_t)v21;
  v23 = v21 + 96;
  uint64_t v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v23, (uint64_t)&v65, (uint64_t)v71, (uint64_t)v21);
  v27[1] = &v21;
  v64[0] = &unk_26C3811C0;
  v64[1] = ZinIrOpt::IsQualified;
  v64[3] = v64;
  ZinOneToVariablePattern::ZinOneToVariablePattern(&__p, v27, a2, 0, v64, 0);
  std::allocate_shared[abi:ne180100]<ZinOneToVariablePattern,std::allocator<ZinOneToVariablePattern>,ZinOneToVariablePattern,void>((const ZinOneToVariablePattern *)&__p, &v28);
  v99[1] = v28;
  long long v28 = 0uLL;
  uint64_t v43 = 0;
  long long v42 = 0uLL;
  v60 = (char **)&v42;
  char v61 = 0;
  *(void *)&long long v42 = operator new(0x30uLL);
  *((void *)&v42 + 1) = v42;
  uint64_t v43 = v42 + 48;
  *((void *)&v42 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>((uint64_t)&v43, &v98, &v100, (void *)v42);
  for (uint64_t m = 40; m != -8; m -= 16)
  {
    unint64_t v14 = *(std::__shared_weak_count **)((char *)&v99[-1] + m);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  __p = &unk_26C350430;
  v60 = (char **)&v90;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  v88 = &unk_26C349BA8;
  v60 = (char **)&v89;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  ZinPattern::~ZinPattern((ZinPattern *)&v88);
  v60 = (char **)&v87;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  ZinPattern::~ZinPattern((ZinPattern *)&__p);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v64);
  v60 = &v21;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v69);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v68);
  if (SHIBYTE(v67) < 0) {
    operator delete(v65);
  }
  v65 = &v24;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v74);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v73);
  if (SHIBYTE(v72) < 0) {
    operator delete(v71[0]);
  }
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  v132 = &unk_26C350430;
  __p = v148;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v146[0] = &unk_26C349BA8;
  __p = v147;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  ZinPattern::~ZinPattern((ZinPattern *)v146);
  __p = &v144;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  ZinPattern::~ZinPattern((ZinPattern *)&v132);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v91);
  __p = &v29;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v95);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100]((void *)&v93 + 1);
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  __p = &v32;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v120);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v117);
  if (SHIBYTE(v116) < 0) {
    operator delete(v114);
  }
  if (*((void *)&v41 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
  }
  v102[0] = (void **)&unk_26C350430;
  v132 = v107;
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  v104[0] = &unk_26C349BA8;
  v132 = v106;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  ZinPattern::~ZinPattern((ZinPattern *)v104);
  v132 = v103;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  ZinPattern::~ZinPattern((ZinPattern *)v102);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v97);
  v132 = &v36;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v129);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v126);
  if (SHIBYTE(v125) < 0) {
    operator delete(v123);
  }
  v132 = &v38;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v156);
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v153);
  if (SHIBYTE(v152) < 0) {
    operator delete(v150);
  }
  unint64_t v15 = &v56;
  switch(a4)
  {
    case 0:
      goto LABEL_87;
    case 1:
      goto LABEL_88;
    case 2:
      unint64_t v15 = (uint64_t **)&v42;
      goto LABEL_87;
    case 3:
      unint64_t v15 = &v50;
      goto LABEL_87;
    case 4:
      unint64_t v15 = &v53;
LABEL_87:
      std::vector<std::shared_ptr<ZinPattern>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinPattern>*,std::shared_ptr<ZinPattern>*>((uint64_t)&v47, *v15, v15[1], ((char *)v15[1] - (char *)*v15) >> 4);
      std::vector<std::shared_ptr<ZinPattern>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinPattern>*,std::shared_ptr<ZinPattern>*>((uint64_t)&v44, 0, 0, 0);
LABEL_88:
      v63 = 0;
      uint64_t v16 = operator new(0x20uLL);
      *uint64_t v16 = &unk_26C330870;
      v16[1] = &v47;
      v16[2] = &v59;
      v16[3] = &v44;
      v63 = v16;
      uint64_t v17 = ZinIrControlFlowGraph::TraverseForward(v20, (uint64_t)v62, 1);
      std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v62);
      if (v59) {
        *uint64_t v19 = 1;
      }
      v102[0] = (void **)&v42;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v102);
      v102[0] = (void **)&v44;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v102);
      v102[0] = (void **)&v47;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v102);
      v102[0] = (void **)&v50;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v102);
      v102[0] = (void **)&v53;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v102);
      v102[0] = (void **)&v56;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v102);
      return v17;
    default:
      ZinAssertImpl("[ZinIrOpt::ReverseCSE] Invalid option (ir-optimize, pre-lowering, pre-hoisting, pre-fusion, post-fusion are allowed)");
  }
}

void sub_2112E0A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](&a69);
  STACK[0x598] = (unint64_t)&a47;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a50;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a53;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a56;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a59;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  STACK[0x598] = (unint64_t)&a62;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x598]);
  _Unwind_Resume(a1);
}

BOOL ZinIrOpt::IsQualified(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "consumers");
  ZinPattern::GetMatch(a3, (unsigned __int8 *)__p, &v10);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v10 == v11)
  {
    uint64_t v4 = 0;
    if (!v10) {
      return v4 > 1;
    }
    goto LABEL_9;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v10;
  do
  {
    if (*v5++) {
      ++v4;
    }
  }
  while (v5 != v11);
  if (v10)
  {
LABEL_9:
    unint64_t v11 = v10;
    operator delete(v10);
  }
  return v4 > 1;
}

void sub_2112E1584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpt::IsDeQuant(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8) == 104) | 0x100u;
}

uint64_t ZinIrOpt::IsBroadcast(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8) == 18) | 0x100u;
}

uint64_t ZinIrOpt::IsScaledEW(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8) == 6) | 0x100u;
}

uint64_t ZinIrOpt::IsPreScale(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  BOOL v3 = *(_DWORD *)(*(void *)(v1 + 64) + 8) == 2
    && (int v2 = *(ZinIrKernel **)(v1 + 136)) != 0
    && ZinIrKernel::HasNoBiasNoWeightButSingularScale(v2, *(unsigned __int8 *)(**(void **)(a1 + 16) + 1244));
  return v3 | 0x100u;
}

uint64_t ZinIrOpt::IsConcat(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8) == 7) | 0x100u;
}

BOOL ZinIrOpt::IsSameFormat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "producers");
  ZinPattern::GetMatch(a3, (unsigned __int8 *)__p, &v17);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "concat");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "to_duplicate");
  uint64_t v5 = ZinPattern::GetSingleMatch(a3, (unsigned __int8 *)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  int v6 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 32))(v5, 0, 0) + 88);
  int v7 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)SingleMatch + 32))(SingleMatch, 0, 0)+ 88);
  int v8 = (char *)v17;
  if (v7 != v6)
  {
    BOOL v12 = 0;
    if (!v17) {
      return v12;
    }
    goto LABEL_18;
  }
  char v9 = v18;
  if (v17 == v18)
  {
    BOOL v12 = 1;
    if (!v17) {
      return v12;
    }
    goto LABEL_18;
  }
  uint64_t v10 = (char *)v17 + 8;
  do
  {
    int v11 = *(_DWORD *)((*(uint64_t (**)(void, void, void))(**((void **)v10 - 1) + 32))(*((void *)v10 - 1), 0, 0)+ 88);
    BOOL v12 = v11 == v6;
    BOOL v13 = v11 != v6 || v10 == v9;
    v10 += 8;
  }
  while (!v13);
  int v8 = (char *)v17;
  if (v17)
  {
LABEL_18:
    int v18 = v8;
    operator delete(v8);
  }
  return v12;
}

void sub_2112E183C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpt::IsCHTranspose(uint64_t a1)
{
  uint64_t v1 = *(ZinTransposeLayer **)(a1 + 8);
  BOOL v2 = *(_DWORD *)(*((void *)v1 + 8) + 8) == 37 && ZinTransposeLayer::IsCHTranspose(v1);
  return v2 | 0x100u;
}

void std::vector<std::shared_ptr<ZinPattern>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinPattern>*,std::shared_ptr<ZinPattern>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<ZinIrConstData>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100]((void *)a1, v12);
    BOOL v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    unint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData>*>((uint64_t)&v20, a2, v15, v9);
    BOOL v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData>*>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_2112E1A10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2112E1A18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C330870;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C330870;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  if (ZinIrOpLayer::IsIntermediate(*a3))
  {
    int v6 = *(uint64_t ***)(a1 + 8);
    uint64_t v8 = *v6;
    int v7 = v6[1];
    if (*v6 != v7)
    {
      do
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t **, ZinIrOpLayer *))(*(void *)*v8 + 8))(*v8, v4, v5))
        {
          uint64_t v9 = *v8;
          std::string::basic_string[abi:ne180100]<0>(&__p, "to_duplicate");
          uint64_t SingleMatch = (ZinIrOpLayerGraph *)ZinPattern::GetSingleMatch(v9, (unsigned __int8 *)&__p);
          if (v29 < 0) {
            operator delete(__p);
          }
          uint64_t v11 = *v8;
          std::string::basic_string[abi:ne180100]<0>(&__p, "consumers");
          ZinPattern::GetMatch(v11, (unsigned __int8 *)&__p, &v31);
          if (v29 < 0) {
            operator delete(__p);
          }
          ZinObjectNameFactory::ZinObjectNameFactory(&__p, (char *)SingleMatch + 24);
          if (ZinIrOpt::ReverseCSEDuplicateNode(v4, (uint64_t)&__p, SingleMatch, (uint64_t)&v31))
          {
            ++**(void **)(a1 + 16);
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(&buf, v26);
          }
          __p = &unk_26C34DA98;
          if (v30 < 0) {
            operator delete(v28);
          }
          if (v31)
          {
            long long v32 = v31;
            operator delete(v31);
          }
        }
        v8 += 2;
      }
      while (v8 != v7);
    }
    unint64_t v12 = *(uint64_t ***)(a1 + 24);
    unint64_t v14 = *v12;
    BOOL v13 = v12[1];
    if (*v12 != v13)
    {
      do
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t **, ZinIrOpLayer *))(*(void *)*v14 + 8))(*v14, v4, v5))
        {
          uint64_t v15 = *v14;
          std::string::basic_string[abi:ne180100]<0>(&__p, "producers");
          ZinPattern::GetMatch(v15, (unsigned __int8 *)&__p, &v31);
          if (v29 < 0) {
            operator delete(__p);
          }
          uint64_t v16 = *v14;
          std::string::basic_string[abi:ne180100]<0>(&__p, "optional_mem_movements");
          ZinPattern::GetMatch(v16, (unsigned __int8 *)&__p, v24);
          if (v29 < 0) {
            operator delete(__p);
          }
          uint64_t v17 = *v14;
          std::string::basic_string[abi:ne180100]<0>(&__p, "concat");
          uint64_t v18 = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v17, (unsigned __int8 *)&__p);
          if (v29 < 0) {
            operator delete(__p);
          }
          uint64_t v19 = *v14;
          std::string::basic_string[abi:ne180100]<0>(&__p, "to_duplicate");
          char v20 = (uint64_t **)ZinPattern::GetSingleMatch(v19, (unsigned __int8 *)&__p);
          if (v29 < 0) {
            operator delete(__p);
          }
          ZinObjectNameFactory::ZinObjectNameFactory(&__p, v20 + 3);
          if (ZinIrOpt::ReverseCSEDuplicateNodeFanInPattern(v4, (uint64_t)&__p, (uint64_t)&v31, v24, v18, v20))
          {
            ++**(void **)(a1 + 16);
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(&v22, v23);
          }
          __p = &unk_26C34DA98;
          if (v30 < 0) {
            operator delete(v28);
          }
          if (v24[0])
          {
            v24[1] = v24[0];
            operator delete(v24[0]);
          }
          if (v31)
          {
            long long v32 = v31;
            operator delete(v31);
          }
        }
        v14 += 2;
      }
      while (v14 != v13);
    }
  }
  return 0;
}

void sub_2112E1E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0,std::allocator<ZinIrOpt::ReverseCSE(ZinIrControlFlowGraph *,ZinIrParameters const&,BOOL &,ZinIrOpt::ReverseCSEType)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint8_t *buf, unsigned char *a2)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error during Reverse CSE: Unable to duplicate node.", buf, 2u);
}

void *ZinTypeCastLayer::ZinTypeCastLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  int v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  BOOL v13 = v6;
  uint64_t v14 = v5;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v14, &v12, a4, &v11);
  int v7 = v11;
  uint64_t v11 = 0;
  if (v7)
  {
    ZinIrKernel::~ZinIrKernel(v7);
    MEMORY[0x21667D3C0](v8, 0x1032C40C25AA5B7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *a1 = &unk_26C34A570;
  return a1;
}

void sub_2112E20E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinLayerNormLayer::ZinLayerNormLayer(&a12);
  _Unwind_Resume(a1);
}

void *ZinIrTypeCastInfo::ZinIrTypeCastInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = (void *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 71);
  *__n128 result = &unk_26C34AE88;
  *(void *)((char *)result + 12) = a2;
  return result;
}

uint64_t ZinTypeCastLayer::Lower()
{
  return 0;
}

void ZinTypeCastLayer::Clone()
{
}

void sub_2112E2290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void ZinTypeCastLayer::CreateDMALayer(ZinTypeCastLayer *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2112E2618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  int v34 = a9;
  a9 = 0;
  if (v34) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a9, v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  a19 = &unk_26C34DA98;
  if (a25 < 0) {
    operator delete(a20);
  }
  (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  _Unwind_Resume(a1);
}

BOOL ZinTypeCastLayer::IsReadDMAConversion(ZinTypeCastLayer *this)
{
  unsigned int v2 = *(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88);
  uint64_t v3 = (*(uint64_t (**)(ZinTypeCastLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  return CheckValidFormatConversion(v2, *(_DWORD *)(v3 + 88), 0) == 0;
}

uint64_t ZinTypeCastLayer::IsWriteDMAConversion(ZinTypeCastLayer *this)
{
  unsigned int v2 = *(_DWORD *)((*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0)+ 88);
  uint64_t v3 = (*(uint64_t (**)(ZinTypeCastLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  if (*(unsigned char *)(*((void *)this + 8) + 16)) {
    return 0;
  }
  uint64_t v4 = 1;
  if (CheckValidFormatConversion(v2, *(_DWORD *)(v3 + 88), 1)) {
    return 0;
  }
  return v4;
}

uint64_t ZinTypeCastLayer::NeedsTypeCastToRead()
{
  return 0;
}

uint64_t ZinTypeCastLayer::NeedsTypeCastToWrite()
{
  return 0;
}

float ZinIrPoolUnit::PoolUnitInfoToPoolParams@<S0>(ZinIrPoolUnit *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 36) = 0x100000001;
  *(_DWORD *)(a2 + 44) = 1;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  *(_OWORD *)(a2 + 72) = v5;
  *(_DWORD *)(a2 + 88) = 2;
  *(unsigned char *)(a2 + 92) = 0;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(unsigned char *)(a2 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a2 + 104) = 0;
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 88);
  uint64_t v6 = *((void *)this + 14);
  *(void *)(a2 + 16) = *((void *)this + 13);
  *(void *)(a2 + 24) = v6;
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 30);
  long long v7 = *(_OWORD *)((char *)this + 124);
  *(void *)(a2 + 64) = *(void *)((char *)this + 140);
  *(_OWORD *)(a2 + 48) = v7;
  int v8 = ZinIrPoolingTypeToZinIrPoolingMode(*((_DWORD *)this + 20));
  *(_DWORD *)(a2 + 84) = *((_DWORD *)this + 38);
  *(_DWORD *)(a2 + 88) = v8;
  *(unsigned char *)(a2 + 92) = *((unsigned char *)this + 148);
  float result = *((float *)this + 39);
  *(float *)(a2 + 96) = result;
  *(unsigned char *)(a2 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  return result;
}

uint64_t ZinIrPoolUnit::ValidateForDynamicShapes(ZinIrPoolUnit *this, ZinIrUnitStatus *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 == *((void *)this + 2)) {
    ZinAssertImpl("Pooling layer does not have input tensor", a2);
  }
  int v3 = *((_DWORD *)this + 34);
  if (v3 == 4 || v3 == 2)
  {
    if (*(_DWORD *)(v2 + 108) == 1 && *(void *)(v2 + 24) == *((void *)this + 19)
      || *(_DWORD *)(v2 + 112) == 1 && *(void *)(v2 + 32) == *((void *)this + 18))
    {
      ZinAssertImpl("Dynamic shape cannot support global max/min pool, please use reduction to replace global max/min pool", a2);
    }
    return 0;
  }
  if (v3 == 1 && *((_DWORD *)this + 52) == 1) {
    return 0;
  }
  ZinIrUnitStatus::SetError((CFArrayRef *)a2, @"InvalidUnit");
  return 3;
}

unsigned char *ZinIrDynamicGOCInfo::ZinIrDynamicGOCInfo(unsigned char *a1, float a2, uint64_t a3, char a4, char a5, uint64_t a6, char a7, char a8, char a9)
{
  uint64_t v17 = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)a1, 3);
  *(void *)uint64_t v17 = &unk_26C34CB78;
  *(float *)(v17 + 12) = a2;
  *(unsigned char *)(v17 + 16) = a4;
  *(unsigned char *)(v17 + 17) = a5;
  ZinIrBroadcastInfo::ZinIrBroadcastInfo(v17 + 24, a6);
  a1[80] = a7;
  a1[81] = a8;
  a1[82] = a9;
  return a1;
}

void sub_2112E2AD4(_Unwind_Exception *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrDynamicGOCInfo::TensorDimensions(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) == 1) {
    ZinAssertImpl("GOC missing bias scale input");
  }
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v7 = v2[3];
  uint64_t v6 = v2[4];
  int v8 = &v2[((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) - 5];
  long long v9 = *(_OWORD *)v8;
  long long v10 = *((_OWORD *)v8 + 1);
  uint64_t v21 = v8[4];
  long long v19 = v9;
  long long v20 = v10;
  if (a1[80])
  {
    uint64_t v11 = operator new(0x10uLL);
    uint64_t v16 = v11;
    *uint64_t v11 = xmmword_211EDF930;
    uint64_t v17 = v11 + 1;
    uint64_t v18 = v11 + 1;
    ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)v13, (uint64_t)&v16);
    if (ZinIrTransposeInfo::TensorDimensions((ZinIrTransposeInfo *)v13, (ZinTensorDimensions *)&v19)) {
      ZinAssertImpl("GOC bias scale transpose shape propagation failed");
    }
    v13[0] = &unk_26C34C0D0;
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v13);
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
  }
  if (a1[81] || a1[82])
  {
    if ((void)v20 != 1) {
      ZinAssertImpl("GOC individual bias or scale shape must have height of 1");
    }
  }
  else if ((void)v20 != 2)
  {
    ZinAssertImpl("GOC concatenated bias scale shape must have height of 2");
  }
  if ((void)v19 != 1 && (void)v19 != v5
    || v21 != 1 && v21 != v6
    || *((void *)&v19 + 1) != 1 && *((void *)&v19 + 1) != v4
    || *((void *)&v20 + 1) != 1 && *((void *)&v20 + 1) != v7)
  {
    ZinAssertImpl("GOC bias scale shape must match the data tensor", v13[0]);
  }
  ZinIrBroadcastInfo::GetBroadcastAxes((ZinIrBroadcastInfo *)(a1 + 24), (uint64_t)v13);
  if (*((void *)&v20 + 1) == 1 && v7 != 1)
  {
    LODWORD(v16) = 4;
    if (!std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v13, (int *)&v16))ZinAssertImpl("GOC bias scale shape must have width of 1 to support implicit broadcast", v13[0]); {
  }
    }
  if (*((void *)&v19 + 1) == 1 && v4 != 1)
  {
    LODWORD(v16) = 2;
    if (!std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v13, (int *)&v16))ZinAssertImpl("GOC bias scale shape must have channel of 1 to support implicit broadcast", v13[0]); {
  }
    }
  if (v21 != v6)
  {
    LODWORD(v16) = 1;
    if (!std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v13, (int *)&v16))ZinAssertImpl("GOC bias scale shape must have depth of 1 to support implicit broadcast", v13[0]); {
  }
    }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v13);
  return 0;
}

void sub_2112E2D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void *ZinTernaryDynamicGOCLayer::ZinTernaryDynamicGOCLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  BOOL v13 = v6;
  uint64_t v14 = v5;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v14, &v12, a4, &v11);
  uint64_t v7 = v11;
  uint64_t v11 = 0;
  if (v7)
  {
    ZinIrKernel::~ZinIrKernel(v7);
    MEMORY[0x21667D3C0](v8, 0x1032C40C25AA5B7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *a1 = &unk_26C351970;
  return a1;
}

void sub_2112E2E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinLayerNormLayer::ZinLayerNormLayer(&a12);
  _Unwind_Resume(a1);
}

uint64_t ZinTernaryDynamicGOCLayer::Lower(ZinTernaryDynamicGOCLayer *a1, uint64_t **a2, const ZinIrHalParameters ***a3)
{
  uint64_t v4 = **a3;
  if (!*((unsigned char *)v4 + 1113))
  {
    ZinTernaryDynamicGOCLayer::ValidateH11H12(a1, v4);
    ZinTernaryDynamicGOCLayer::LowerH11H12(a1, a2);
  }
  return 0;
}

uint64_t ZinTernaryDynamicGOCLayer::ValidateH11H12(ZinTernaryDynamicGOCLayer *this, const ZinIrHalParameters *a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (!*(unsigned char *)(v2 + 81) || *(unsigned char *)(v2 + 82)) {
    ZinAssertImpl("Scale-Only and Default DynamicGOC are not supported", a2);
  }
  uint64_t v5 = (*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0);
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(*((void *)this + 11) + 8) + 32))(*(void *)(*((void *)this + 11) + 8), 0, 0);
  if (*(_DWORD *)(v5 + 88) != 3 || *(_DWORD *)(result + 88) != 3) {
    ZinAssertImpl("DynamicGOC only supports FP16 bottoms format");
  }
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = *(void *)(result + 56);
  if (v7 != v8) {
    ZinAssertImpl("DynamicGOC must have the same bottoms channel size, but input N%zdD%zdC%zdH%zdW%zd and bias N%zdD%zdC%zdH%zdW%zd are given", *(void *)(v5 + 48), *(void *)(v5 + 80), v7, *(void *)(v5 + 64), *(void *)(v5 + 72), *(void *)(result + 48), *(void *)(result + 80), v8, *(void *)(result + 64), *(void *)(result + 72));
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = *(void *)((char *)a2 + v9 + 1648);
    if (v10 == v7) {
      break;
    }
    BOOL v13 = v9 == 32;
    v9 += 8;
  }
  while (!v13);
  uint64_t v11 = *(void *)(v5 + 48);
  if (v10 != v7) {
    ZinAssertImpl("DynamicGOC input channel size must be one of [1, 2, 3, 4, 8], but N%zdD%zdC%zdH%zdW%zd are given", v11, *(void *)(v5 + 80), v7, *(void *)(v5 + 64), *(void *)(v5 + 72));
  }
  uint64_t v12 = *(void *)(v5 + 80);
  BOOL v13 = v11 == 1 && v12 == 1;
  if (!v13 || *(void *)(v5 + 64) != 1) {
    ZinAssertImpl("DynamicGOC input dimensions N%zdD%zdC%zdH%zdW%zd are not within supported range, N[1-1]D[1-1]C[%zd-%zd]H[1-1]W[%zd-%zd].", v11, v12);
  }
  uint64_t v15 = *(void *)(result + 48);
  if (v15 != 1)
  {
    uint64_t v16 = *(void *)(result + 80);
    if (v16 != 1 && *(void *)(result + 64) != 1) {
      ZinAssertImpl("DynamicGOC bias dimensions N%zdD%zdC%zdH%zdW%zd are not within supported range, N[1-1]D[1-1]C[%zd-%zd]H[1-1]W[%zd-%zd].", v15, v16);
    }
  }
  return result;
}

void ZinTernaryDynamicGOCLayer::LowerH11H12(ZinIrOpLayer *a1, uint64_t **a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  __n128 v4 = ZinObjectNameFactory::ZinObjectNameFactory(&v18, (char *)a1 + 24);
  uint64_t v5 = (uint64_t *)*((void *)a1 + 11);
  uint64_t v6 = *v5;
  uint64_t v7 = (ZinIrOpLayer *)v5[1];
  uint64_t v17 = 0;
  uint64_t v8 = (*(uint64_t (**)(ZinIrOpLayer *, void, void, __n128))(*(void *)v7 + 32))(v7, 0, 0, v4);
  ZinMirTensorTransform::FixAllocation(v8, (uint64_t)&v18, 2, (uint64_t *)&v17, 1, 1uLL, 1);
  uint64_t v9 = v17;
  if (v17)
  {
    *(void *)&long long v24 = a1;
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
    v19.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v19);
    ZinIrOpLayerGraph::InsertNodeBetween(a2, v9, v7, a1, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_26C359A08;
    if (__p[1])
    {
      uint64_t v21 = __p[1];
      operator delete(__p[1]);
    }
    uint64_t v7 = v17;
  }
  uint64_t v10 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v7 + 32))(v7, 0, 0);
  DimensionOrderHint::DimensionOrderHint(__p, 2);
  int fixed = ZinMirTensorTransform::FixDimensionOrder(v10, a2, (DimensionOrderHint *)__p, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!fixed)
  {
    uint64_t v12 = *(void *)(*((void *)a1 + 11) + 8);
    (*(void (**)(uint64_t, void, void))(*(void *)v6 + 32))(v6, 0, 0);
    BOOL v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v12 + 40))(v12, 0, 0);
    uint64_t v14 = v13[1];
    uint64_t v22 = *v13;
    uint64_t v23 = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr, uint64_t *, void))(v18 + 16))(&v19, &v18, 0);
    uint64_t v15 = std::string::append(&v19, "_bias_tensor", 0xCuLL);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    uint64_t v21 = (void *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    ZinIrTensor::CreateTensor();
  }
  ZinAssertImpl("ANEC internal error: Ternary Dynamic GOC lowering failed to set dimension order hint");
}

void sub_2112E38F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32,void *__p,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void ZinTernaryDynamicGOCLayer::Clone()
{
}

void sub_2112E3D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void *ZinTernaryDynamicGOCLayer::OpCodeKindToString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TERNARY_DYNAMIC_GOC");
}

uint64_t ZinTernaryDynamicGOCLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_2112E3F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ZinTernaryDynamicGOCLayer::ValidateScaleOrBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)a3 != 3)
  {
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v6 = (const char *)a4;
    }
    else {
      uint64_t v6 = *(const char **)a4;
    }
    ZinAssertImpl("DynamicGOC %s tensor format must be FP16", v6);
  }
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4 != 1)
  {
    uint64_t v5 = *(void *)(a3 + 32);
    if (v5 != 1)
    {
      if (*(char *)(a4 + 23) >= 0) {
        uint64_t v8 = (const char *)a4;
      }
      else {
        uint64_t v8 = *(const char **)a4;
      }
      ZinAssertImpl("DynamicGOC %s must set either width or channel size to 1, but C%ldW%ld are given", v8, *(void *)(a3 + 16), v5);
    }
  }
  if (*(void *)(a3 + 24) != 1)
  {
    if (*(char *)(a4 + 23) >= 0) {
      char v7 = (const char *)a4;
    }
    else {
      char v7 = *(const char **)a4;
    }
    ZinAssertImpl("DynamicGOC %s height dimension must be 1, but N%zdD%zdC%zdH%zdW%zd are provided", v7, *(void *)(a3 + 8), *(void *)(a3 + 40), v4, *(void *)(a3 + 24), *(void *)(a3 + 32));
  }
}

void ZinTernaryDynamicGOCLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  if (!a3[1884]) {
    ZinAssertImpl("DynamicGOC is not supported");
  }
  uint64_t v6 = a2[1] - *a2;
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  uint64_t v7 = *((void *)a1 + 8);
  int v8 = *(unsigned __int8 *)(v7 + 81);
  int v9 = *(unsigned __int8 *)(v7 + 82);
  if (v8)
  {
    if (v9) {
      ZinAssertImpl("Invalid DynamicGOC: Bias_Only and Scale_Only can't be true at the same time");
    }
    if (v6 != 240) {
      ZinAssertImpl("Bias_only DynamicGOC requires 2 inputs.");
    }
    uint64_t v10 = *a2 + 120;
    uint64_t v11 = std::string::basic_string[abi:ne180100]<0>(__p, "Bias");
    ZinTernaryDynamicGOCLayer::ValidateScaleOrBias((uint64_t)v11, v12, v10, (uint64_t)__p);
  }
  else if (v9)
  {
    if (v6 != 240) {
      ZinAssertImpl("Scale_only DynamicGOC requires 2 inputs.");
    }
    uint64_t v13 = *a2 + 120;
    uint64_t v14 = std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
    ZinTernaryDynamicGOCLayer::ValidateScaleOrBias((uint64_t)v14, v15, v13, (uint64_t)__p);
  }
  else
  {
    if (v6 != 360) {
      ZinAssertImpl("DynamicGOC requires 3 inputs.");
    }
    if (!ZinTensorDimensionsEqual((void *)(*a2 + 128), (void *)(*a2 + 248))) {
      ZinAssertImpl("DynamicGOC Scale and Bias bias dimensions must be equal");
    }
    uint64_t v16 = *a2 + 120;
    uint64_t v17 = std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
    ZinTernaryDynamicGOCLayer::ValidateScaleOrBias((uint64_t)v17, v18, v16, (uint64_t)__p);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v19 = *a2 + 240;
    long long v20 = std::string::basic_string[abi:ne180100]<0>(__p, "Bias");
    ZinTernaryDynamicGOCLayer::ValidateScaleOrBias((uint64_t)v20, v21, v19, (uint64_t)__p);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (!a3[1113] && *(void *)(*a2 + 152) != 1) {
    ZinAssertImpl("DynamicGOC Bias width dimension must be 1");
  }
}

void sub_2112E41A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrDynamicGOCInfo::~ZinIrDynamicGOCInfo(ZinIrDynamicGOCInfo *this)
{
  *(void *)this = &unk_26C34CB78;
  uint64_t v2 = (ZinIrDynamicGOCInfo *)((char *)this + 24);
  *((void *)this + 3) = &unk_26C34BCF8;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 40);
  ZinIrHalH13g::~ZinIrHalH13g(v2);

  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  ZinIrHalH13g *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C34CB78;
  uint64_t v2 = (ZinIrDynamicGOCInfo *)((char *)this + 24);
  *((void *)this + 3) = &unk_26C34BCF8;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 40);
  ZinIrHalH13g::~ZinIrHalH13g(v2);
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t CpTransposeGraph::CpTransposeGraph(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  CpGraph::CpGraph(a1, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  return a1;
}

void sub_2112E4388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CpTransposeGraph::~CpTransposeGraph(void **this)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 52));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 47));
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table((uint64_t)(this + 42));
  std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::~__hash_table((uint64_t)(this + 37));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)(this + 32));

  CpGraph::~CpGraph(this);
}

void *CpTransposeGraph::SetLiveInTensor(CpTransposeGraph *this, unint64_t a2)
{
  unint64_t v3 = a2;
  return std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)this + 376, &v3, &v3);
}

void *CpTransposeGraph::SetLiveOutTensor(CpTransposeGraph *this, unint64_t a2)
{
  unint64_t v3 = a2;
  return std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>((uint64_t)this + 416, &v3, &v3);
}

char *CpTransposeGraph::SetTensorDimensions(uint64_t a1, unint64_t *a2, long long *a3)
{
  uint64_t v13 = a2;
  uint64_t v4 = a1 + 256;
  if (std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((void *)(a1 + 256), (unint64_t *)&v13))
  {
    int v9 = (unint64_t *)&v13;
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, (unint64_t *)&v13, (uint64_t)&std::piecewise_construct, &v9);
    long long v6 = *a3;
    long long v7 = a3[1];
    *((void *)result + 7) = *((void *)a3 + 4);
    *(_OWORD *)(result + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v7;
    *(_OWORD *)(result + 24) = v6;
  }
  else
  {
    int v9 = v13;
    long long v8 = a3[1];
    long long v10 = *a3;
    long long v11 = v8;
    uint64_t v12 = *((void *)a3 + 4);
    return (char *)std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::TensorDimensions>>(v4, (unint64_t *)&v9, &v9);
  }
  return result;
}

__n128 CpTransposeGraph::GetTensorDimensions@<Q0>(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 32, &v7);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __n128 result = *(__n128 *)(v4 + 3);
  long long v6 = *(_OWORD *)(v4 + 5);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 32) = v4[7];
  return result;
}

void CpTransposeGraph::SetRootTensorConstraint(uint64_t a1, unint64_t *a2, char *a3)
{
  int v9 = a2;
  uint64_t v4 = a1 + 336;
  if (std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((void *)(a1 + 336), (unint64_t *)&v9))
  {
    long long v6 = (unint64_t *)&v9;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4, (unint64_t *)&v9, (uint64_t)&std::piecewise_construct, &v6);
    *((unsigned char *)v5 + 24) = *a3;
    std::string::operator=((std::string *)(v5 + 4), (const std::string *)(a3 + 8));
  }
  else
  {
    long long v6 = v9;
    char v7 = *a3;
    if (a3[31] < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a3 + 1), *((void *)a3 + 2));
    }
    else {
      std::string __p = *(std::string *)(a3 + 8);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::RootTensorConstraint>>(v4, (unint64_t *)&v6, (uint64_t)&v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2112E4658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CpTransposeGraph::DisqualifyTranspose(uint64_t a1, unint64_t a2)
{
  unint64_t v8 = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((void *)(a1 + 336), &v8);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v3 = v2;
  *((unsigned char *)v2 + 24) = 1;
  std::operator+<char>();
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    std::string::size_type v5 = v7;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)(v3 + 4), (const std::string::value_type *)v4, v5);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2112E4718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CpTransposeGraph::SetLayerTruthTable(CpTransposeGraph *this, unint64_t a2, const std::string *a3)
{
  unint64_t v10 = a2;
  uint64_t v4 = (char *)this + 296;
  if (std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>((void *)this + 37, &v10))
  {
    long long v6 = &v10;
    std::string::size_type v5 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v4, &v10, (uint64_t)&std::piecewise_construct, &v6);
    if (&v5[1] != a3) {
      std::vector<CpTransposeUtils::LayerConstraint>::__assign_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v5[1], a3->__r_.__value_.__r.__words[0], a3->__r_.__value_.__l.__size_, 0x8E38E38E38E38E39 * ((uint64_t)(a3->__r_.__value_.__l.__size_ - a3->__r_.__value_.__r.__words[0]) >> 3));
    }
    std::string::operator=(v5 + 2, a3 + 1);
  }
  else
  {
    std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>::pair[abi:ne180100]<unsigned long long &,CpTransposeUtils::LayerTruthTable const&,0>(&v6, &v10, (uint64_t)a3);
    std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>>((uint64_t)v4, (unint64_t *)&v6, (uint64_t)&v6);
    if (v9 < 0) {
      operator delete(__p);
    }
    long long v11 = (void **)&v7;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&v11);
  }
}

void sub_2112E4828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  unint64_t v3 = (void **)(a1 + 8);
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void *CpTransposeGraph::GetRootTensorConstraint(CpTransposeGraph *this, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 42, &v4);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 3;
}

void *CpTransposeGraph::GetLayerTruthTable(CpTransposeGraph *this, unint64_t a2)
{
  unint64_t v4 = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 37, &v4);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 3;
}

uint64_t CpTransposeGraph::DebugPrintNode@<X0>(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  __p.__r_.__value_.__r.__words[0] = a2;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)&__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_211F4AA5D);
    CpGraph::GetLayerName((uint64_t)this, a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)p_p, size);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = a2;
    if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 24, (unint64_t *)&__p))goto LABEL_19; {
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"T", 1);
    }
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v9 = &__p;
    }
    else {
      char v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_19:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, a3);
  v14[0] = *MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v15 = v11;
  v16[0] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v18);
}

void sub_2112E4B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t CpTransposeGraph::DebugPrint@<X0>(CpTransposeGraph *this@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"livein: ", 8);
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)&v34, (uint64_t)this + 376);
  for (uint64_t i = v36; i; uint64_t i = (void *)*i)
  {
    CpTransposeGraph::DebugPrintNode(this, i[2], __p);
    if (v33 >= 0) {
      std::string::size_type v5 = __p;
    }
    else {
      std::string::size_type v5 = (void **)__p[0];
    }
    if (v33 >= 0) {
      uint64_t v6 = HIBYTE(v33);
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
    if (SHIBYTE(v33) < 0) {
      operator delete(__p[0]);
    }
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v34);
  LOBYTE(v34) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)&v34, 1);
  CpGraph::GetLayers((CpGraph **)this, &v34);
  unint64_t v8 = (unint64_t **)v34;
  char v9 = v35;
  if (v34 != v35)
  {
    do
    {
      std::string::size_type v10 = *v8;
      __p[0] = *v8;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)this + 19, (unint64_t *)__p))
      {
        OutputTensor = CpGraph::GetOutputTensor(this, v10);
        CpGraph::GetInputTensors(this, v10, (uint64_t)__p);
        *(void *)((char *)&v39[2] + *(void *)(v38 - 24)) = 40;
        CpTransposeGraph::DebugPrintNode(this, (unint64_t)OutputTensor, &v31);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v12 = &v31;
        }
        else {
          uint64_t v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v31.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v12, size);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)" = ", 3);
        CpTransposeGraph::DebugPrintNode(this, (unint64_t)v10, &v31);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v15 = &v31;
        }
        else {
          uint64_t v15 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v16 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v16 = v31.__r_.__value_.__l.__size_;
        }
        char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"  ", 2);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        uint64_t v18 = (unint64_t *)__p[0];
        uint64_t v19 = (unint64_t *)__p[1];
        while (v18 != v19)
        {
          CpTransposeGraph::DebugPrintNode(this, *v18, &v31);
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v20 = &v31;
          }
          else {
            long long v20 = (std::string *)v31.__r_.__value_.__r.__words[0];
          }
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v21 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v21 = v31.__r_.__value_.__l.__size_;
          }
          uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v20, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" ", 1);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          ++v18;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"\n", 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != (unint64_t **)v9);
    unint64_t v8 = (unint64_t **)v34;
  }
  if (v8)
  {
    long long v35 = (unint64_t *)v8;
    operator delete(v8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"liveout: ", 9);
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)&v34, (uint64_t)this + 416);
  for (uint64_t j = v36; j; uint64_t j = (void *)*j)
  {
    std::to_string(&v31, j[2]);
    long long v24 = std::string::insert(&v31, 0, "T", 1uLL);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    int64_t v33 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (v33 >= 0) {
      uint64_t v26 = __p;
    }
    else {
      uint64_t v26 = (void **)__p[0];
    }
    if (v33 >= 0) {
      uint64_t v27 = HIBYTE(v33);
    }
    else {
      uint64_t v27 = (uint64_t)__p[1];
    }
    long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
    if (SHIBYTE(v33) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v34);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v39, a2);
  v37[0] = *MEMORY[0x263F8C2B8];
  uint64_t v29 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v37 + *(void *)(v37[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v38 = v29;
  v39[0] = MEMORY[0x263F8C318] + 16;
  if (v40 < 0) {
    operator delete((void *)v39[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v41);
}

void sub_2112E5058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t CpTransposeGraph::DebugPrint@<X0>(CpTransposeGraph *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"   ", 3);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n=====================================================\n", 55);
  CpTransposeGraph::DebugPrint(a1, __p);
  if ((v17 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v17;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n=====================================================\n", 55);
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20, a3);
  v18[0] = *MEMORY[0x263F8C2B8];
  uint64_t v14 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v19 = v14;
  v20[0] = MEMORY[0x263F8C318] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v22);
}

void sub_2112E5334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void CpTransposeGraph::CreateDotStringRootTensorNode(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v113 = 0;
  unint64_t v114 = a2;
  v111 = 0;
  v112 = 0;
  std::string::size_type v5 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v110, "\n\t\tstyle=filled");
  std::string::append(v5, "\n\t\tfontname=\"Arial Unicode MS\"\n\t\tfontsize=11\n\t\tmargin=.2", 0x38uLL);
  std::string::append(&v110, "\n\t\tfillcolor=white\n\t\tgradientangle=270", 0x26uLL);
  std::string::basic_string[abi:ne180100]<0>(&v109, &byte_211F4AA5D);
  CpGraph::GetTensorName((uint64_t)this, v114, &v109);
  CpTransposeGraph::GetTensorDimensions(this, v114, (uint64_t)v108);
  std::string::basic_string[abi:ne180100]<0>(&v107, "[N");
  std::to_string(&v96, v108[0]);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v96;
  }
  else {
    uint64_t v6 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v96.__r_.__value_.__l.__size_;
  }
  std::string::append(&v107, (const std::string::value_type *)v6, size);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  std::to_string(&v106, v108[4]);
  uint64_t v8 = std::string::insert(&v106, 0, "D", 1uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = &v96;
  }
  else {
    std::string::size_type v10 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v96.__r_.__value_.__l.__size_;
  }
  std::string::append(&v107, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  std::to_string(&v106, v108[1]);
  uint64_t v12 = std::string::insert(&v106, 0, "C", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v96;
  }
  else {
    uint64_t v14 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v96.__r_.__value_.__l.__size_;
  }
  std::string::append(&v107, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  std::to_string(&v106, v108[2]);
  std::string::size_type v16 = std::string::insert(&v106, 0, "H", 1uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v18 = &v96;
  }
  else {
    uint64_t v18 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v96.__r_.__value_.__l.__size_;
  }
  std::string::append(&v107, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  std::to_string(&v106, v108[3]);
  long long v20 = std::string::insert(&v106, 0, "W", 1uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v96;
  }
  else {
    uint64_t v22 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v96.__r_.__value_.__l.__size_;
  }
  std::string::append(&v107, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  std::string::append(&v107, "]", 1uLL);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(&v96, "Dims", (long long *)&v107);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v111, (long long *)&v96);
  if (v98 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  RootTensorConstraint = CpTransposeGraph::GetRootTensorConstraint(this, v114);
  long long v25 = RootTensorConstraint;
  if (*((char *)RootTensorConstraint + 31) < 0) {
    std::string::__init_copy_ctor_external(&v106, (const std::string::value_type *)RootTensorConstraint[1], RootTensorConstraint[2]);
  }
  else {
    std::string v106 = *(std::string *)(RootTensorConstraint + 1);
  }
  std::string::size_type v26 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v26 = v109.__r_.__value_.__l.__size_;
  }
  std::string::replace(&v106, 0, v26 + 1, &byte_211F4AA5D, 0);
  std::string::size_type v27 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v28 = &v106;
  }
  else {
    long long v28 = (std::string *)v106.__r_.__value_.__r.__words[0];
  }
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = v106.__r_.__value_.__l.__size_;
  }
  for (; v27; --v27)
  {
    if (v28->__r_.__value_.__s.__data_[0] == 58) {
      v28->__r_.__value_.__s.__data_[0] = 44;
    }
    long long v28 = (std::string *)((char *)v28 + 1);
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(&v96, "Constraints", (long long *)&v106);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v111, (long long *)&v96);
  if (v98 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  uint64_t v29 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)this + 8, (unint64_t **)&v105);
  std::string::basic_string[abi:ne180100]<0>(&v105, &byte_211F4AA5D);
  char v30 = (unint64_t ***)(v29 + 3);
  if (!v29) {
    char v30 = (unint64_t ***)((char *)this + 104);
  }
  uint64_t v32 = v30;
  std::string v31 = *v30;
  if ((char *)v32[1] - (char *)v31 == 8)
  {
    CpGraph::GetLayerName((uint64_t)this, **v31, &v105);
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(&v96, "Def", (long long *)&v105);
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v111, (long long *)&v96);
    if (v98 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
  }
  v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  int64_t v33 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)this + 3, (unint64_t **)&v104);
  std::string::basic_string[abi:ne180100]<0>(&v104, &byte_211F4AA5D);
  int v34 = (char *)(v33 + 3);
  if (!v33) {
    int v34 = (char *)this + 104;
  }
  long long v35 = *(unint64_t ***)v34;
  long long v36 = (unint64_t **)*((void *)v34 + 1);
  if (*(unint64_t ***)v34 != v36)
  {
    unint64_t v37 = 1;
    do
    {
      CpGraph::GetLayerName((uint64_t)this, **v35, &v104);
      std::to_string(&v102, v37);
      uint64_t v38 = std::string::insert(&v102, 0, "Use ", 4uLL);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string,std::string&,0>((uint64_t)&v96, (long long *)&v103, (long long *)&v104);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v111, (long long *)&v96);
      if (v98 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v103.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      ++v35;
      ++v37;
    }
    while (v35 != v36);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v96);
  char v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)"\tsubgraph ", 10);
  std::to_string(&v95, v114);
  uint64_t v41 = std::string::insert(&v95, 0, "cluster_", 8uLL);
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  uint64_t v43 = std::string::append(&v102, " {", 2uLL);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v103.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v45 = &v103;
  }
  else {
    v45 = (std::string *)v103.__r_.__value_.__r.__words[0];
  }
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v46 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v46 = v103.__r_.__value_.__l.__size_;
  }
  v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v45, v46);
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v48 = &v110;
  }
  else {
    v48 = (std::string *)v110.__r_.__value_.__r.__words[0];
  }
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v49 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v49 = v110.__r_.__value_.__l.__size_;
  }
  v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
  v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n\t\tlabel=<", 10);
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n\t\t\t<font point-size='13' face='Arial Rounded MT Bold'>", 55);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v53 = &v109;
  }
  else {
    v53 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v54 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v54 = v109.__r_.__value_.__l.__size_;
  }
  v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"</font><br/><br align='left'/>", 30);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  v56 = v111;
  for (uint64_t i = v112; v56 != i; v56 += 48)
  {
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)"\n\t\t\t<font face='Arial Rounded MT Bold'>", 39);
    int v59 = v56[23];
    if (v59 >= 0) {
      uint64_t v60 = (uint64_t)v56;
    }
    else {
      uint64_t v60 = *(void *)v56;
    }
    if (v59 >= 0) {
      uint64_t v61 = v56[23];
    }
    else {
      uint64_t v61 = *((void *)v56 + 1);
    }
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)":</font> ", 9);
    int v64 = v56[47];
    if (v64 >= 0) {
      uint64_t v65 = (uint64_t)(v56 + 24);
    }
    else {
      uint64_t v65 = *((void *)v56 + 3);
    }
    if (v64 >= 0) {
      uint64_t v66 = v56[47];
    }
    else {
      uint64_t v66 = *((void *)v56 + 4);
    }
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"<br align='left'/>", 18);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)"\n\t\t>\n", 5);
  std::string::basic_string[abi:ne180100]<0>(&v103, "<");
  std::string::basic_string[abi:ne180100]<0>(&v102, "white");
  if (*v25)
  {
    std::string::append(&v103, "Original", 8uLL);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    {
      v102.__r_.__value_.__l.__size_ = 3;
      v68 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&v102.__r_.__value_.__s + 23) = 3;
      v68 = &v102;
    }
    LODWORD(v68->__r_.__value_.__l.__data_) = 6579570;
  }
  else
  {
    std::string::append(&v103, "Original | Transposed", 0x15uLL);
  }
  std::string::append(&v103, ">", 1uLL);
  std::to_string(&v89, v114);
  v69 = std::string::insert(&v89, 0, "\t\t\"node_", 8uLL);
  long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  v90.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  v71 = std::string::append(&v90, "\" [label=", 9uLL);
  long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v73 = &v103;
  }
  else {
    v73 = (std::string *)v103.__r_.__value_.__r.__words[0];
  }
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v74 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v74 = v103.__r_.__value_.__l.__size_;
  }
  int v75 = std::string::append(&v91, (const std::string::value_type *)v73, v74);
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  v77 = std::string::append(&v92, ",shape=box,style=filled,fillcolor=", 0x22uLL);
  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v79 = &v102;
  }
  else {
    char v79 = (std::string *)v102.__r_.__value_.__r.__words[0];
  }
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v80 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v80 = v102.__r_.__value_.__l.__size_;
  }
  v81 = std::string::append(&v93, (const std::string::value_type *)v79, v80);
  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v94.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  long long v83 = std::string::append(&v94, ",fontname=\"Consolas, monospace, bold\",fontsize=11]", 0x32uLL);
  long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v95.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v85 = &v95;
  }
  else {
    int v85 = (std::string *)v95.__r_.__value_.__r.__words[0];
  }
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v86 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v86 = v95.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)v85, v86);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  uint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)";\n",
          2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\t}\n", 3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p, a3);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  v96.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
  std::string::size_type v88 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + *(void *)(v96.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v96.__r_.__value_.__r.__words[2] = v88;
  std::string __p = (void *)(MEMORY[0x263F8C318] + 16);
  if (v100 < 0) {
    operator delete(v99);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21667D2B0](&v101);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
}

void sub_2112E5F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (*(char *)(v37 - 201) < 0) {
    operator delete(*(void **)(v37 - 224));
  }
  if (*(char *)(v37 - 137) < 0) {
    operator delete(*(void **)(v37 - 160));
  }
  if (*(char *)(v37 - 113) < 0) {
    operator delete(*(void **)(v37 - 136));
  }
  a37 = v37 - 112;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  unint64_t v4 = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v26.__end_cap_.__value_ = v4;
    if (v14) {
      std::string::size_type v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Group>>((uint64_t)v4, v14);
    }
    else {
      std::string::size_type v15 = 0;
    }
    std::string::size_type v16 = &v15[48 * v11];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string::size_type v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v20 = *a1;
    unint64_t v19 = (unint64_t)a1[1];
    if ((char *)v19 == *a1)
    {
      int64x2_t v24 = vdupq_n_s64(v19);
      long long v21 = &v15[48 * v11];
    }
    else
    {
      long long v21 = &v15[48 * v11];
      do
      {
        long long v22 = *(_OWORD *)(v19 - 48);
        *((void *)v21 - 4) = *(void *)(v19 - 32);
        *((_OWORD *)v21 - 3) = v22;
        *(void *)(v19 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
        *(void *)(v19 - 32) = 0;
        *(void *)(v19 - 48) = 0;
        long long v23 = *(_OWORD *)(v19 - 24);
        *((void *)v21 - 1) = *(void *)(v19 - 8);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 48;
        *(void *)(v19 - 16) = 0;
        *(void *)(v19 - 8) = 0;
        *(void *)(v19 - 24) = 0;
        v19 -= 48;
      }
      while ((char *)v19 != v20);
      int64x2_t v24 = *(int64x2_t *)a1;
    }
    std::string::size_type v10 = v16 + 48;
    *a1 = v21;
    a1[1] = v16 + 48;
    *(int64x2_t *)&v26.__begin_ = v24;
    long long v25 = (std::pair<std::string, std::string> *)a1[2];
    a1[2] = &v15[48 * v14];
    v26.__end_cap_.__value_ = v25;
    v26.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v24.i64[0];
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v26);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::string::size_type v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
}

void CpTransposeGraph::CreateDotStringLayerNode(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v189 = 0;
  unint64_t v190 = a2;
  v187 = 0;
  v188 = 0;
  unint64_t v5 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v186, "style=\"rounded,filled\"");
  std::string::append(v5, "\n\t\tfontname=\"Arial Unicode MS\"\n\t\tfontsize=11\n\t\tfontcolor=\"#222222\"\n\t\tpad=4", 0x4AuLL);
  std::string::append(&v186, "\n\t\tbgcolor=\"#EEEEEE\"\n\t", 0x16uLL);
  std::string::basic_string[abi:ne180100]<0>(&v185, &byte_211F4AA5D);
  CpGraph::GetLayerName((uint64_t)this, v190, &v185);
  LayerTruthTable = CpTransposeGraph::GetLayerTruthTable(this, v190);
  unint64_t v7 = LayerTruthTable;
  if (*((char *)LayerTruthTable + 47) < 0) {
    std::string::__init_copy_ctor_external(&v184, (const std::string::value_type *)LayerTruthTable[3], LayerTruthTable[4]);
  }
  else {
    std::string v184 = *(std::string *)((unsigned char *)LayerTruthTable + 1);
  }
  std::string::size_type size = HIBYTE(v185.__r_.__value_.__r.__words[2]);
  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v185.__r_.__value_.__l.__size_;
  }
  std::string::replace(&v184, 0, size + 1, &byte_211F4AA5D, 0);
  std::string::size_type v9 = HIBYTE(v184.__r_.__value_.__r.__words[2]);
  if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = &v184;
  }
  else {
    std::string::size_type v10 = (std::string *)v184.__r_.__value_.__r.__words[0];
  }
  if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = v184.__r_.__value_.__l.__size_;
  }
  for (; v9; --v9)
  {
    if (v10->__r_.__value_.__s.__data_[0] == 58) {
      v10->__r_.__value_.__s.__data_[0] = 44;
    }
    std::string::size_type v10 = (std::string *)((char *)v10 + 1);
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(v175, "Constraints", (long long *)&v184);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v187, (long long *)v175);
  if (v178 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v176) < 0) {
    operator delete(v175[0]);
  }
  v168[0] = &v190;
  unint64_t v11 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)this + 8, (unint64_t **)v168);
  if (v11) {
    unint64_t v12 = (char *)(v11 + 3);
  }
  else {
    unint64_t v12 = (char *)this + 104;
  }
  std::string::basic_string[abi:ne180100]<0>(&v183, &byte_211F4AA5D);
  unint64_t v13 = *(unint64_t ***)v12;
  unint64_t v14 = (unint64_t **)*((void *)v12 + 1);
  if (*(unint64_t ***)v12 != v14)
  {
    unint64_t v15 = 1;
    do
    {
      CpGraph::GetTensorName((uint64_t)this, **v13, &v183);
      std::to_string(&v182, v15);
      std::string::size_type v16 = std::string::insert(&v182, 0, "Input ", 6uLL);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      int64_t v169 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)v168 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string,std::string&,0>((uint64_t)v175, (long long *)v168, (long long *)&v183);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v187, (long long *)v175);
      if (v178 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v176) < 0) {
        operator delete(v175[0]);
      }
      if (SHIBYTE(v169) < 0) {
        operator delete(v168[0]);
      }
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v182.__r_.__value_.__l.__data_);
      }
      ++v13;
      ++v15;
    }
    while (v13 != v14);
  }
  v168[0] = &v190;
  long long v18 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((void *)this + 3, (unint64_t **)v168);
  std::string::basic_string[abi:ne180100]<0>(&v182, &byte_211F4AA5D);
  unint64_t v19 = (unint64_t ***)(v18 + 3);
  if (!v18) {
    unint64_t v19 = (unint64_t ***)((char *)this + 104);
  }
  long long v21 = v19;
  long long v20 = *v19;
  if ((char *)v21[1] - (char *)v20 == 8)
  {
    CpGraph::GetTensorName((uint64_t)this, **v20, &v182);
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(v175, "Output", (long long *)&v182);
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v187, (long long *)v175);
    if (v178 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v176) < 0) {
      operator delete(v175[0]);
    }
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v175);
  long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)"\tsubgraph ", 10);
  std::to_string(&v173, v190);
  long long v23 = std::string::insert(&v173, 0, "cluster_", 8uLL);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v174.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  long long v25 = std::string::append(&v174, " {", 2uLL);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  int64_t v169 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)v168 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v169 >= 0) {
    std::string::size_type v27 = v168;
  }
  else {
    std::string::size_type v27 = (void **)v168[0];
  }
  if (v169 >= 0) {
    uint64_t v28 = HIBYTE(v169);
  }
  else {
    uint64_t v28 = (uint64_t)v168[1];
  }
  uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v27, v28);
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v30 = &v186;
  }
  else {
    char v30 = (std::string *)v186.__r_.__value_.__r.__words[0];
  }
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = v186.__r_.__value_.__l.__size_;
  }
  uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
  int64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n\t\tlabel=<", 10);
  int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\n\t\t\t<font point-size='13' face='Arial Rounded MT Bold'>", 55);
  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v35 = &v185;
  }
  else {
    long long v35 = (std::string *)v185.__r_.__value_.__r.__words[0];
  }
  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = v185.__r_.__value_.__l.__size_;
  }
  uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"</font><br/><br align='left'/>", 30);
  if (SHIBYTE(v169) < 0) {
    operator delete(v168[0]);
  }
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  uint64_t v38 = v187;
  for (uint64_t i = v188; v38 != i; v38 += 48)
  {
    char v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)"\n\t\t\t<font face='Arial Rounded MT Bold'>", 39);
    int v41 = v38[23];
    if (v41 >= 0) {
      uint64_t v42 = (uint64_t)v38;
    }
    else {
      uint64_t v42 = *(void *)v38;
    }
    if (v41 >= 0) {
      uint64_t v43 = v38[23];
    }
    else {
      uint64_t v43 = *((void *)v38 + 1);
    }
    long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)":</font> ", 9);
    int v46 = v38[47];
    if (v46 >= 0) {
      uint64_t v47 = (uint64_t)(v38 + 24);
    }
    else {
      uint64_t v47 = *((void *)v38 + 3);
    }
    if (v46 >= 0) {
      uint64_t v48 = v38[47];
    }
    else {
      uint64_t v48 = *((void *)v38 + 4);
    }
    std::string::size_type v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"<br align='left'/>", 18);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)"\n\t\t>\n", 5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v168);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<", 1);
  if (*((void *)v12 + 1) - *(void *)v12 == 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Input 1    \t| Output     \t| Valid<br align='left'/>", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Original   \t| ", 28);
    if (*(unsigned char *)(*v7 + 24) || *(unsigned char *)(*v7 + 25)) {
      v50 = "T";
    }
    else {
      v50 = "<font color='red'>F</font>";
    }
    size_t v51 = strlen(v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v50, v51);
    if (*(void *)(*v7 + 32) != -1 && *(void *)(*v7 + 40) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v52 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" m:", 3);
      v53 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 25)) {
        std::string::size_type v54 = " (materialize transposed domain)";
      }
      else {
        std::string::size_type v54 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v54, 32 * *(unsigned __int8 *)(*v7 + 25));
      if (*(void *)(*v7 + 40)) {
        v55 = &byte_211F4AA5D;
      }
      else {
        v55 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v55, 16 * (*(void *)(*v7 + 40) == 0));
      if (*(unsigned char *)(*v7 + 26)) {
        v56 = &byte_211F4AA5D;
      }
      else {
        v56 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 26)) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v56, v57);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Transposed \t| ", 28);
    if (*(unsigned char *)(*v7 + 96) || *(unsigned char *)(*v7 + 97)) {
      v58 = "T";
    }
    else {
      v58 = "<font color='red'>F</font>";
    }
    size_t v59 = strlen(v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v58, v59);
    if (*(void *)(*v7 + 104) != -1 && *(void *)(*v7 + 112) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      uint64_t v60 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" m:", 3);
      uint64_t v61 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 97)) {
        v62 = " (materialize transposed domain)";
      }
      else {
        v62 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v62, 32 * *(unsigned __int8 *)(*v7 + 97));
      if (*(void *)(*v7 + 112)) {
        v63 = &byte_211F4AA5D;
      }
      else {
        v63 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v63, 16 * (*(void *)(*v7 + 112) == 0));
      if (*(unsigned char *)(*v7 + 98)) {
        int v64 = &byte_211F4AA5D;
      }
      else {
        int v64 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 98)) {
        uint64_t v65 = 0;
      }
      else {
        uint64_t v65 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v64, v65);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Original   \t| ", 28);
    if (*(unsigned char *)(*v7 + 168) || *(unsigned char *)(*v7 + 169)) {
      uint64_t v66 = "T";
    }
    else {
      uint64_t v66 = "<font color='red'>F</font>";
    }
    size_t v67 = strlen(v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v66, v67);
    if (*(void *)(*v7 + 176) != -1 && *(void *)(*v7 + 184) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v68 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" m:", 3);
      v69 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 169)) {
        long long v70 = " (materialize transposed domain)";
      }
      else {
        long long v70 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v70, 32 * *(unsigned __int8 *)(*v7 + 169));
      if (*(void *)(*v7 + 184)) {
        v71 = &byte_211F4AA5D;
      }
      else {
        v71 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v71, 16 * (*(void *)(*v7 + 184) == 0));
      if (*(unsigned char *)(*v7 + 170)) {
        long long v72 = &byte_211F4AA5D;
      }
      else {
        long long v72 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 170)) {
        uint64_t v73 = 0;
      }
      else {
        uint64_t v73 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v72, v73);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Transposed \t| ", 28);
    if (*(unsigned char *)(*v7 + 240) || *(unsigned char *)(*v7 + 241)) {
      std::string::size_type v74 = "T";
    }
    else {
      std::string::size_type v74 = "<font color='red'>F</font>";
    }
    size_t v75 = strlen(v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v74, v75);
    if (*(void *)(*v7 + 248) != -1 && *(void *)(*v7 + 256) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      long long v76 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" m:", 3);
      v77 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 241)) {
        long long v78 = " (materialize transposed domain)";
      }
      else {
        long long v78 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v78, 32 * *(unsigned __int8 *)(*v7 + 241));
      if (*(void *)(*v7 + 256)) {
        char v79 = &byte_211F4AA5D;
      }
      else {
        char v79 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v79, 16 * (*(void *)(*v7 + 256) == 0));
      unsigned int v80 = 3;
LABEL_283:
      int v143 = *(unsigned __int8 *)(*v7 + 72 * v80 + 26);
      if (v143) {
        uint64_t v144 = &byte_211F4AA5D;
      }
      else {
        uint64_t v144 = " (has transpose=false)";
      }
      if (v143) {
        uint64_t v145 = 0;
      }
      else {
        uint64_t v145 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v144, v145);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Input 1    \t| Input 2    \t| Output    \t| Valid<br align='left'/>", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Original   \t| Original  \t| ", 41);
    if (*(unsigned char *)(*v7 + 24) || *(unsigned char *)(*v7 + 25)) {
      v81 = "T";
    }
    else {
      v81 = "<font color='red'>F</font>";
    }
    size_t v82 = strlen(v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v81, v82);
    if (*(void *)(*v7 + 32) != -1 && *(void *)(*v7 + 40) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      long long v83 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" m:", 3);
      long long v84 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 25)) {
        int v85 = " (materialize transposed domain)";
      }
      else {
        int v85 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v85, 32 * *(unsigned __int8 *)(*v7 + 25));
      if (*(void *)(*v7 + 40)) {
        std::string::size_type v86 = &byte_211F4AA5D;
      }
      else {
        std::string::size_type v86 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v86, 16 * (*(void *)(*v7 + 40) == 0));
      if (*(unsigned char *)(*v7 + 26)) {
        uint64_t v87 = &byte_211F4AA5D;
      }
      else {
        uint64_t v87 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 26)) {
        uint64_t v88 = 0;
      }
      else {
        uint64_t v88 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v87, v88);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Original   \t| Transposed\t| ", 41);
    if (*(unsigned char *)(*v7 + 96) || *(unsigned char *)(*v7 + 97)) {
      std::string v89 = "T";
    }
    else {
      std::string v89 = "<font color='red'>F</font>";
    }
    size_t v90 = strlen(v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v89, v90);
    if (*(void *)(*v7 + 104) != -1 && *(void *)(*v7 + 112) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      std::string v91 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" m:", 3);
      std::string v92 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 97)) {
        std::string v93 = " (materialize transposed domain)";
      }
      else {
        std::string v93 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v93, 32 * *(unsigned __int8 *)(*v7 + 97));
      if (*(void *)(*v7 + 112)) {
        std::string v94 = &byte_211F4AA5D;
      }
      else {
        std::string v94 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v94, 16 * (*(void *)(*v7 + 112) == 0));
      if (*(unsigned char *)(*v7 + 98)) {
        std::string v95 = &byte_211F4AA5D;
      }
      else {
        std::string v95 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 98)) {
        uint64_t v96 = 0;
      }
      else {
        uint64_t v96 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v95, v96);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Transposed \t| Original  \t| ", 41);
    if (*(unsigned char *)(*v7 + 168) || *(unsigned char *)(*v7 + 169)) {
      v97 = "T";
    }
    else {
      v97 = "<font color='red'>F</font>";
    }
    size_t v98 = strlen(v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v97, v98);
    if (*(void *)(*v7 + 176) != -1 && *(void *)(*v7 + 184) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v99 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)" m:", 3);
      char v100 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 169)) {
        uint64_t v101 = " (materialize transposed domain)";
      }
      else {
        uint64_t v101 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v101, 32 * *(unsigned __int8 *)(*v7 + 169));
      if (*(void *)(*v7 + 184)) {
        std::string v102 = &byte_211F4AA5D;
      }
      else {
        std::string v102 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v102, 16 * (*(void *)(*v7 + 184) == 0));
      if (*(unsigned char *)(*v7 + 170)) {
        std::string v103 = &byte_211F4AA5D;
      }
      else {
        std::string v103 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 170)) {
        uint64_t v104 = 0;
      }
      else {
        uint64_t v104 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v103, v104);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Transposed \t| Transposed\t| ", 41);
    if (*(unsigned char *)(*v7 + 240) || *(unsigned char *)(*v7 + 241)) {
      std::string v105 = "T";
    }
    else {
      std::string v105 = "<font color='red'>F</font>";
    }
    size_t v106 = strlen(v105);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v105, v106);
    if (*(void *)(*v7 + 248) != -1 && *(void *)(*v7 + 256) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      std::string v107 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" m:", 3);
      v108 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 241)) {
        std::string v109 = " (materialize transposed domain)";
      }
      else {
        std::string v109 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v109, 32 * *(unsigned __int8 *)(*v7 + 241));
      if (*(void *)(*v7 + 256)) {
        std::string v110 = &byte_211F4AA5D;
      }
      else {
        std::string v110 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v110, 16 * (*(void *)(*v7 + 256) == 0));
      if (*(unsigned char *)(*v7 + 242)) {
        v111 = &byte_211F4AA5D;
      }
      else {
        v111 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 242)) {
        uint64_t v112 = 0;
      }
      else {
        uint64_t v112 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v111, v112);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Original   \t| Original  \t| ", 41);
    if (*(unsigned char *)(*v7 + 312) || *(unsigned char *)(*v7 + 313)) {
      uint64_t v113 = "T";
    }
    else {
      uint64_t v113 = "<font color='red'>F</font>";
    }
    size_t v114 = strlen(v113);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v113, v114);
    if (*(void *)(*v7 + 320) != -1 && *(void *)(*v7 + 328) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      uint64_t v115 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)" m:", 3);
      v116 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 313)) {
        v117 = " (materialize transposed domain)";
      }
      else {
        v117 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v117, 32 * *(unsigned __int8 *)(*v7 + 313));
      if (*(void *)(*v7 + 328)) {
        v118 = &byte_211F4AA5D;
      }
      else {
        v118 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v118, 16 * (*(void *)(*v7 + 328) == 0));
      if (*(unsigned char *)(*v7 + 314)) {
        v119 = &byte_211F4AA5D;
      }
      else {
        v119 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 314)) {
        uint64_t v120 = 0;
      }
      else {
        uint64_t v120 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v119, v120);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Original   \t| Transposed\t| ", 41);
    if (*(unsigned char *)(*v7 + 384) || *(unsigned char *)(*v7 + 385)) {
      long long v121 = "T";
    }
    else {
      long long v121 = "<font color='red'>F</font>";
    }
    size_t v122 = strlen(v121);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v121, v122);
    if (*(void *)(*v7 + 392) != -1 && *(void *)(*v7 + 400) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v123 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)" m:", 3);
      uint64_t v124 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 385)) {
        v125 = " (materialize transposed domain)";
      }
      else {
        v125 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v125, 32 * *(unsigned __int8 *)(*v7 + 385));
      if (*(void *)(*v7 + 400)) {
        v126 = &byte_211F4AA5D;
      }
      else {
        v126 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v126, 16 * (*(void *)(*v7 + 400) == 0));
      if (*(unsigned char *)(*v7 + 386)) {
        v127 = &byte_211F4AA5D;
      }
      else {
        v127 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 386)) {
        uint64_t v128 = 0;
      }
      else {
        uint64_t v128 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v127, v128);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Transposed \t| Original  \t| ", 41);
    if (*(unsigned char *)(*v7 + 456) || *(unsigned char *)(*v7 + 457)) {
      long long v129 = "T";
    }
    else {
      long long v129 = "<font color='red'>F</font>";
    }
    size_t v130 = strlen(v129);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v129, v130);
    if (*(void *)(*v7 + 464) != -1 && *(void *)(*v7 + 472) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      int v131 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" m:", 3);
      v132 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 457)) {
        char v133 = " (materialize transposed domain)";
      }
      else {
        char v133 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v133, 32 * *(unsigned __int8 *)(*v7 + 457));
      if (*(void *)(*v7 + 472)) {
        char v134 = &byte_211F4AA5D;
      }
      else {
        char v134 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v134, 16 * (*(void *)(*v7 + 472) == 0));
      if (*(unsigned char *)(*v7 + 458)) {
        v135 = &byte_211F4AA5D;
      }
      else {
        v135 = " (has transpose=false)";
      }
      if (*(unsigned char *)(*v7 + 458)) {
        uint64_t v136 = 0;
      }
      else {
        uint64_t v136 = 22;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v135, v136);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Transposed \t| Transposed\t| ", 41);
    if (*(unsigned char *)(*v7 + 528) || *(unsigned char *)(*v7 + 529)) {
      v137 = "T";
    }
    else {
      v137 = "<font color='red'>F</font>";
    }
    size_t v138 = strlen(v137);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v137, v138);
    if (*(void *)(*v7 + 536) != -1 && *(void *)(*v7 + 544) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      long long v139 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)" m:", 3);
      int v140 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)")", 1);
      if (*(unsigned char *)(*v7 + 529)) {
        v141 = " (materialize transposed domain)";
      }
      else {
        v141 = &byte_211F4AA5D;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v141, 32 * *(unsigned __int8 *)(*v7 + 529));
      if (*(void *)(*v7 + 544)) {
        v142 = &byte_211F4AA5D;
      }
      else {
        v142 = " (dce candidate)";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v142, 16 * (*(void *)(*v7 + 544) == 0));
      unsigned int v80 = 7;
      goto LABEL_283;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)">", 1);
  std::to_string(&v165, v190);
  v146 = std::string::insert(&v165, 0, "\t\t\"node_", 8uLL);
  long long v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
  v166.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v147;
  v146->__r_.__value_.__l.__size_ = 0;
  v146->__r_.__value_.__r.__words[2] = 0;
  v146->__r_.__value_.__r.__words[0] = 0;
  v148 = std::string::append(&v166, "\" [label=", 9uLL);
  long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v167.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v170, v163);
  if ((v164 & 0x80u) == 0) {
    v150 = v163;
  }
  else {
    v150 = (void **)v163[0];
  }
  if ((v164 & 0x80u) == 0) {
    std::string::size_type v151 = v164;
  }
  else {
    std::string::size_type v151 = (std::string::size_type)v163[1];
  }
  v152 = std::string::append(&v167, (const std::string::value_type *)v150, v151);
  long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  v173.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  v154 = std::string::append(&v173, ",shape=box,style=filled,fillcolor=white,fontname=\"Consolas, monospace, bold\",fontsize=11]", 0x59uLL);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  v174.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v156 = &v174;
  }
  else {
    long long v156 = (std::string *)v174.__r_.__value_.__r.__words[0];
  }
  if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v157 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v157 = v174.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)v156, v157);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  if ((char)v164 < 0) {
    operator delete(v163[0]);
  }
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v167.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
  int v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)";\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"\t}\n", 3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p, a3);
  v168[0] = *(void **)MEMORY[0x263F8C2B8];
  v159 = v168[0];
  uint64_t v160 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  v161 = *(void **)(MEMORY[0x263F8C2B8] + 64);
  *(void **)((char *)v168 + *((void *)v168[0] - 3)) = v161;
  uint64_t v162 = v160;
  int64_t v169 = v160;
  v170[0] = MEMORY[0x263F8C318] + 16;
  if (v171 < 0) {
    operator delete((void *)v170[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21667D2B0](&v172);
  v175[0] = v159;
  *(void **)((char *)v175 + *((void *)v159 - 3)) = v161;
  uint64_t v176 = v162;
  std::string __p = (void *)(MEMORY[0x263F8C318] + 16);
  if (v180 < 0) {
    operator delete(v179);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21667D2B0](&v181);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v183.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v184.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v185.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  v175[0] = &v187;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v175);
}

void sub_2112E7CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (*(char *)(v66 - 153) < 0) {
    operator delete(*(void **)(v66 - 176));
  }
  if (*(char *)(v66 - 129) < 0) {
    operator delete(*(void **)(v66 - 152));
  }
  a66 = v66 - 128;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
  _Unwind_Resume(a1);
}

uint64_t CpTransposeGraph::CreateDotString@<X0>(CpTransposeGraph *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"digraph D {", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  unint64_t v7 = std::locale::use_facet(&v33, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\tfontname=\"Arial Unicode MS\"", 28);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  std::string::size_type v9 = std::locale::use_facet(&v33, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  std::string::size_type v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\tgraph[compound=true];",
          22);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  unint64_t v11 = std::locale::use_facet(&v33, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v12 = *(void **)a1;
  if (*(CpTransposeGraph **)a1 != (CpTransposeGraph *)((char *)a1 + 8))
  {
    do
    {
      unint64_t v43 = v12[4];
      if (!a2[3]
        || std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, &v43))
      {
        std::string::basic_string[abi:ne180100]<0>(&v33, &byte_211F4AA5D);
        std::string::basic_string[abi:ne180100]<0>(&v40, &byte_211F4AA5D);
        std::string __p = (void *)v43;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((void *)a1 + 19, (unint64_t *)&__p))
        {
          CpTransposeGraph::CreateDotStringLayerNode(a1, v43, &__p);
          if ((v39 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if ((v39 & 0x80u) == 0) {
            uint64_t v14 = v39;
          }
          else {
            uint64_t v14 = (uint64_t)v38;
          }
        }
        else
        {
          CpTransposeGraph::CreateDotStringRootTensorNode(a1, v43, &__p);
          if ((v39 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if ((v39 & 0x80u) == 0) {
            uint64_t v14 = v39;
          }
          else {
            uint64_t v14 = (uint64_t)v38;
          }
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)p_p, v14);
        if ((char)v39 < 0) {
          operator delete(__p);
        }
        if (v42 < 0) {
          operator delete(v40);
        }
        if (SHIBYTE(v35) < 0) {
          operator delete(v33.__locale_);
        }
      }
      unint64_t v15 = (void *)v12[1];
      if (v15)
      {
        do
        {
          std::string::size_type v16 = v15;
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          std::string::size_type v16 = (void *)v12[2];
          BOOL v17 = *v16 == (void)v12;
          unint64_t v12 = v16;
        }
        while (!v17);
      }
      unint64_t v12 = v16;
    }
    while (v16 != (void *)((char *)a1 + 8));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\n", 1);
  uint64_t v32 = a3;
  long long v18 = (uint64_t **)*((void *)a1 + 5);
  if (!v18) {
    goto LABEL_48;
  }
  do
  {
    v33.__locale_ = (std::locale::__imp *)v18[2];
    long long v35 = 0;
    uint64_t v36 = 0;
    int v34 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v34, v18[3], (uint64_t)v18[4], v18[4] - v18[3]);
    unint64_t v19 = v34;
    long long v20 = v35;
    if (v34 == v35) {
      goto LABEL_45;
    }
    locale = (unint64_t *)v33.__locale_;
    do
    {
      long long v22 = *v19;
      if (a2[3]
        && (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, locale)|| !std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, v22)))
      {
        goto LABEL_43;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\t\"node_", 7);
      long long v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\" -> \"node_", 11);
      long long v24 = (void *)std::ostream::operator<<();
      long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" [ltail=\"cluster_", 17);
      long long v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\", lhead=\"cluster_", 18);
      std::string::size_type v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\"", 1);
      CpGraph::GetInputTensors(a1, (unint64_t *)*v22, (uint64_t)&v40);
      uint64_t v28 = v40;
      if (v41 - (unsigned char *)v40 == 16)
      {
        CpGraph::GetInputTensors(a1, (unint64_t *)*v22, (uint64_t)&__p);
        BOOL v29 = *((void *)__p + 1) == *locale;
        uint64_t v38 = __p;
        operator delete(__p);
        uint64_t v28 = v40;
        if (!v40) {
          goto LABEL_40;
        }
LABEL_39:
        int v41 = v28;
        operator delete(v28);
        goto LABEL_40;
      }
      BOOL v29 = 0;
      if (v40) {
        goto LABEL_39;
      }
LABEL_40:
      if (v29) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)", color=blue", 12);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"];\n", 3);
LABEL_43:
      ++v19;
    }
    while (v19 != v20);
    unint64_t v19 = v34;
LABEL_45:
    if (v19)
    {
      long long v35 = v19;
      operator delete(v19);
    }
    long long v18 = (uint64_t **)*v18;
  }
  while (v18);
LABEL_48:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"}", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v46, v32);
  v44[0] = *MEMORY[0x263F8C2B8];
  uint64_t v30 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v44 + *(void *)(v44[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v45 = v30;
  v46[0] = MEMORY[0x263F8C318] + 16;
  if (v47 < 0) {
    operator delete((void *)v46[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v48);
}

void sub_2112E851C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
}

void *std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>::pair[abi:ne180100]<unsigned long long &,CpTransposeUtils::LayerTruthTable const&,0>(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<CpTransposeUtils::LayerConstraint>::__init_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(a1 + 1, *(void *)a3, *(void *)(a3 + 8), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  unint64_t v5 = (std::string *)(a1 + 4);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 24);
    a1[6] = *(void *)(a3 + 40);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2112E8674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<CpTransposeUtils::LayerConstraint>::__assign_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  std::string::size_type v9 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<CpTransposeUtils::LayerConstraint>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<ANEDebugInfo::DebugInfoInMem::TD>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_2112E881C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2112E8824(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<CpTransposeUtils::LayerConstraint>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4) {
        std::vector<std::pair<unsigned long,CpTransposeUtils::TransposeType>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,CpTransposeUtils::TransposeType>*,std::pair<unsigned long,CpTransposeUtils::TransposeType>*>((void *)a4, *(long long **)v5, *(long long **)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 4);
      }
      long long v7 = *(_OWORD *)(v5 + 24);
      *(void *)(a4 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(v5 + 40);
      *(_OWORD *)(a4 + 24) = v7;
      std::string::operator=((std::string *)(a4 + 48), (const std::string *)(v5 + 48));
      v5 += 72;
      a4 += 72;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<std::pair<unsigned long,CpTransposeUtils::TransposeType>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,CpTransposeUtils::TransposeType>*,std::pair<unsigned long,CpTransposeUtils::TransposeType>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  long long v6 = a2;
  uint64_t v8 = a1[2];
  __n128 result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    char v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      long long v24 = result;
      if (a2 != a3)
      {
        long long v25 = result;
        do
        {
          *(void *)long long v25 = *(void *)v6;
          *((_DWORD *)v25 + 2) = *((_DWORD *)v6 + 2);
          v24 += 16;
          ++v6;
          v25 += 16;
        }
        while (v6 != a3);
      }
      char v17 = (char *)(v24 - result);
      uint64_t v12 = result;
    }
    else
    {
      long long v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(void *)__n128 result = *(void *)v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6++ + 2);
          result += 16;
        }
        while (v6 != v20);
      }
      long long v21 = v12;
      if (v20 != a3)
      {
        long long v22 = v12;
        do
        {
          long long v23 = *v20++;
          *(_OWORD *)long long v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v20 != a3);
      }
      char v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        long long v16 = *v6++;
        *(_OWORD *)uint64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    char v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = this->__end_; i != begin; std::__split_buffer<std::pair<std::string, std::string>>::pointer i = this->__end_)
  {
    this->__end_ = i - 1;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)&i[-1]);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2112E8B34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::pair[abi:ne180100]<std::string,std::string&,0>(uint64_t a1, long long *a2, long long *a3)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = (std::string *)(a1 + 24);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2112E8BB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = (void **)(a1 + 8);
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::TensorDimensions>>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    std::string::size_type v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x40uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  long long v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = a3[2];
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v10 = *v20;
LABEL_38:
    *long long v20 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2112E8F28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((void *)v11 + 2) = **a4;
  int64x2_t v13 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v11 + 24) = v13;
  *(int64x2_t *)(v11 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v13;
  *((void *)v11 + 7) = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)unint64_t v11 = *v21;
LABEL_38:
    *unint64_t v21 = v11;
    goto LABEL_39;
  }
  *(void *)unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v22 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_2112E915C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::RootTensorConstraint>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  uint64_t v10 = operator new(0x38uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  v10[2] = *(void *)a3;
  *((unsigned char *)v10 + 24) = *(unsigned char *)(a3 + 8);
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a3 + 16);
  v10[6] = *(void *)(a3 + 32);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v10 = *v20;
LABEL_38:
    *uint64_t v20 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *v12;
  *unint64_t v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2112E93BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = *v10; i; std::__split_buffer<std::pair<std::string, std::string>>::pointer i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer i = operator new(0x38uLL);
  *std::__split_buffer<std::pair<std::string, std::string>>::pointer i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *std::__split_buffer<std::pair<std::string, std::string>>::pointer i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  *std::__split_buffer<std::pair<std::string, std::string>>::pointer i = *v13;
  *float v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2112E9610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  float v13 = (char *)operator new(0x48uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *(void *)float v13 = 0;
  *((void *)v13 + 1) = v6;
  *((void *)v13 + 2) = *(void *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *((void *)v13 + 5) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((_OWORD *)v13 + 3) = *(_OWORD *)(a3 + 32);
  *((void *)v13 + 8) = *(void *)(a3 + 48);
  *(void *)(a3 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *uint64_t v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t v10 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100]((uint64_t)v23, 0);
  return v10;
}

void sub_2112E9898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  float v14 = (char *)operator new(0x48uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)float v14 = 0;
  *((void *)v14 + 1) = v7;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *unint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_2112E9B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

long long *ZinIrHalT0::GetParams(ZinIrHalT0 *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  {
    ZinIrHalT0::GetParams(void)const::ZinIrHalT0Parameters = xmmword_211F045D0;
    dword_26777E4D0 = 8;
    unk_26777E4D8 = xmmword_211EDE750;
    unk_26777E4E8 = xmmword_211ED25D0;
    unk_26777E4F8 = xmmword_211ED25E0;
    unk_26777E508 = xmmword_211ED25F0;
    unk_26777E518 = xmmword_211ED2600;
    unk_26777E528 = xmmword_211ED25E0;
    unk_26777E538 = vdupq_n_s64(1uLL);
    unk_26777E548 = xmmword_211EDE760;
    unk_26777E558 = xmmword_211EDE770;
    unk_26777E568 = unk_26777E538;
    unk_26777E578 = vdupq_n_s64(4uLL);
    qword_26777E588 = 1;
    xmmword_26777E590 = xmmword_211F04600;
    unk_26777E5A0 = unk_211F04610;
    xmmword_26777E5B0 = xmmword_211F04600;
    unk_26777E5C0 = unk_211F04610;
    qword_26777E5E0 = 4;
    xmmword_26777E5D0 = xmmword_211F04620;
    xmmword_26777E5E8 = xmmword_211EDE780;
    xmmword_26777E5F8 = xmmword_211ED2660;
    xmmword_26777E608 = xmmword_211ED2660;
    xmmword_26777E618 = unk_26777E538;
    xmmword_26777E628 = xmmword_211ED2670;
    xmmword_26777E638 = xmmword_211ED2680;
    xmmword_26777E648 = xmmword_211F045E0;
    xmmword_26777E658 = xmmword_211ED26A0;
    xmmword_26777E668 = xmmword_211ED26B0;
    xmmword_26777E678 = xmmword_211ED26C0;
    xmmword_26777E688 = xmmword_211EDE7A0;
    xmmword_26777E698 = xmmword_211EDE7B0;
    xmmword_26777E6A8 = xmmword_211EDE7C0;
    xmmword_26777E6B8 = xmmword_211ED2700;
    xmmword_26777E6C8 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_26777E6D8 = xmmword_211ED5530;
    xmmword_26777E6E8 = xmmword_211EDE7D0;
    xmmword_26777E6F8 = (__int128)vdupq_n_s64(0x20uLL);
    xmmword_26777E708 = xmmword_211ED2740;
    qword_26777E728 = 0;
    xmmword_26777E718 = 0u;
    xmmword_26777E730 = xmmword_211F045F0;
    word_26777E740 = 257;
    xmmword_26777E748 = xmmword_211ED2760;
    xmmword_26777E758 = xmmword_211ED2770;
    xmmword_26777E768 = xmmword_211ED2780;
    qword_26777E778 = 0x10000;
    byte_26777E780 = 8;
    xmmword_26777E788 = xmmword_211ED2790;
    dword_26777E798 = 520097776;
    qword_26777E79C = 0xFFFFFFEB0000000BLL;
    xmmword_26777E7A8 = xmmword_211EDE7E0;
    xmmword_26777E7B8 = xmmword_211EDE7F0;
    xmmword_26777E7C8 = xmmword_211ED27C0;
    int64x2_t v15 = vdupq_n_s64(8uLL);
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_26777E7D8, (uint64_t)&v15, 1uLL);
    xmmword_26777E7F0 = xmmword_211ED27D0;
    unk_26777E800 = xmmword_211ED27E0;
    xmmword_26777E810 = (__int128)vdupq_n_s64(0x20uLL);
    unk_26777E820 = xmmword_211ED2610;
    xmmword_26777E830 = (__int128)vdupq_n_s64(8uLL);
    unk_26777E840 = xmmword_211ED27F0;
    qword_26777E850 = 1;
    unk_26777E858 = 0u;
    unk_26777E868 = 0u;
    unk_26777E878 = 0u;
    unk_26777E888 = 0u;
    unk_26777E898 = 0u;
    unk_26777E8A8 = 0u;
    unk_26777E8B8 = 0u;
    unk_26777E8C8 = xmmword_211ED4670;
    unk_26777E8D8 = xmmword_211ED2790;
    xmmword_26777E8E8 = 0u;
    xmmword_26777E8F8 = 0u;
    qword_26777E908 = 12;
    word_26777E910 = 257;
    dword_26777E912 = 0;
    byte_26777E916 = 0;
    dword_26777E917 = 257;
    byte_26777E91B = 1;
    xmmword_26777E91C = 0u;
    dword_26777E92C = 0;
    byte_26777E930 = 1;
    dword_26777E931 = 0;
    byte_26777E935 = 1;
    word_26777E93A = 0;
    dword_26777E936 = 0;
    dword_26777E93C = 257;
    xmmword_26777E940 = xmmword_211ED2870;
    unk_26777E950 = xmmword_211ED2880;
    qword_26777E960 = 40;
    *(void *)((char *)&xmmword_26777E968 + 13) = 0;
    xmmword_26777E968 = 0u;
    dword_26777E97D = 1;
    xmmword_26777E988 = 0u;
    dword_26777E998 = 0;
    word_26777E99C = 1;
    byte_26777E99E = 1;
    qword_26777E99F = 0;
    byte_26777E9A7 = 0;
    dword_26777E9A8 = 65793;
    word_26777E9AC = 0;
    byte_26777E9AE = 1;
    dword_26777E9AF = 0;
    byte_26777E9B3 = 1;
    dword_26777E9B4 = 0;
    word_26777E9B8 = 0;
    qword_26777E9C0 = 128;
    unk_26777E9C8 = -1;
    qword_26777E9D0 = -1;
    word_26777E9D8 = 0;
    dword_26777E9DC = 0;
    word_26777E9E0 = 257;
    *(uint64_t *)((char *)&qword_26777E9E2 + 7) = 0;
    qword_26777E9E2 = 0;
    dword_26777E9F1 = 1542;
    byte_26777E9F5 = 1;
    dword_26777E9F6 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_26777EA00, "None");
    qword_26777EA18 = 0;
    dword_26777EA24 = 0;
    unk_26777EA28 = 0;
    dword_26777EA20 = 1071225242;
    unk_26777EA30 = xmmword_211ED2890;
    unk_26777EA40 = vdupq_n_s64(0x40uLL);
    unk_26777EA50 = xmmword_211ED27D0;
    qword_26777EA60 = 8;
    byte_26777EA68 = 0;
    unk_26777EA6C = 1048576000;
    byte_26777EA74 = 0;
    uint64_t v13 = 0x200000001;
    int v14 = 4;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_26777EA78, &v13, 3uLL);
    long long v11 = xmmword_211F04638;
    v12[0] = unk_211F04648;
    *(_OWORD *)((char *)v12 + 12) = unk_211F04654;
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_26777EA90, &v11, 0xBuLL);
    int v10 = 7;
    v9[0] = xmmword_211F04664;
    v9[1] = unk_211F04674;
    v9[2] = xmmword_211F04684;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_26777EAA8, v9, 0xDuLL);
    v7[0] = xmmword_211F04698;
    v7[1] = unk_211F046A8;
    v8[0] = xmmword_211F046B8;
    *(_OWORD *)((char *)v8 + 12) = *(long long *)((char *)&xmmword_211F046B8 + 12);
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_26777EAC0, v7, 0xFuLL);
    xmmword_26777EB08 = 0u;
    unk_26777EB18 = 0u;
    unk_26777EB30 = xmmword_211F046D8;
    qword_26777EAE8 = 0;
    qword_26777EAE0 = 0;
    qword_26777EAD8 = (uint64_t)&qword_26777EAE0;
    word_26777EAF0 = 0;
    byte_26777EAF2 = 1;
    *(_DWORD *)algn_26777EAF3 = 0;
    qword_26777EAF8 = 0;
    dword_26777EB00 = 0;
    word_26777EB28 = 1;
    unk_26777EB40 = unk_211F046E8;
    qword_26777EB50 = 8;
    xmmword_26777EB58 = xmmword_211EDE800;
    uint64_t v6 = 0x41C7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777EB68, &v6, 1uLL);
    uint64_t v5 = 0x41C7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777EB80, &v5, 1uLL);
    uint64_t v4 = 0x41C7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777EB98, &v4, 1uLL);
    int64x2_t v3 = vdupq_n_s64(0x41C7D78400000000uLL);
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_26777EBB0, (double *)v3.i64, 1);
    xmmword_26777EBC8 = xmmword_211ED28E0;
    v2[0] = xmmword_211F04700;
    *(_OWORD *)((char *)v2 + 12) = *(long long *)((char *)&xmmword_211F04700 + 12);
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_26777EBD8, v2, 7uLL);
    xmmword_26777EBF0 = xmmword_211ED2790;
    xmmword_26777EC00 = xmmword_211ED28F0;
    qword_26777EC10 = 64;
    dword_26777ECD0 = 0;
    word_26777ECD4 = 0;
    qword_26777ECF0 = 0;
    byte_26777ECF8 = 0;
    qword_26777ED00 = 0;
    byte_26777ED08 = 0;
    qword_26777EC18 = 0;
    *(uint64_t *)((char *)&qword_26777EC18 + 6) = 0;
    xmmword_26777EC28 = 0u;
    unk_26777EC38 = 0u;
    xmmword_26777EC48 = 0u;
    unk_26777EC58 = 0u;
    xmmword_26777EC68 = 0u;
    unk_26777EC78 = 0u;
    xmmword_26777EC88 = 0u;
    unk_26777EC98 = 0u;
    xmmword_26777ECA8 = 0u;
    unk_26777ECB8 = 0u;
    unk_26777ECC6 = 0;
    byte_26777ECE8 = 0;
    xmmword_26777ECD8 = 0u;
    word_26777ED09 = 257;
    qword_26777ED10 = 0x40000000;
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalT0::GetParams(void)const::ZinIrHalT0Parameters, &dword_210C72000);
  }
  return &ZinIrHalT0::GetParams(void)const::ZinIrHalT0Parameters;
}

void sub_2112EA334(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v2, *(void **)(v2 + 8));
  if (qword_26777EB98)
  {
    qword_26777EBA0 = qword_26777EB98;
    operator delete((void *)qword_26777EB98);
  }
  if (qword_26777EB80)
  {
    qword_26777EB88 = qword_26777EB80;
    operator delete((void *)qword_26777EB80);
  }
  if (qword_26777EB68)
  {
    qword_26777EB70 = qword_26777EB68;
    operator delete((void *)qword_26777EB68);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v1 + 24, *(void **)(v1 + 32));
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    qword_26777EAC8 = *(void *)v1;
    operator delete(v4);
  }
  if (qword_26777EAA8)
  {
    qword_26777EAB0 = qword_26777EAA8;
    operator delete((void *)qword_26777EAA8);
  }
  if (qword_26777EA90)
  {
    qword_26777EA98 = qword_26777EA90;
    operator delete((void *)qword_26777EA90);
  }
  if (qword_26777EA78)
  {
    qword_26777EA80 = qword_26777EA78;
    operator delete((void *)qword_26777EA78);
  }
  if (byte_26777EA17 < 0) {
    operator delete((void *)qword_26777EA00);
  }
  if (qword_26777E7D8)
  {
    qword_26777E7E0 = qword_26777E7D8;
    operator delete((void *)qword_26777E7D8);
  }
  _Unwind_Resume(a1);
}

void sub_2112EA478()
{
}

void sub_2112EA480()
{
}

void ZinIrOpt::RemoveIdentityDivMul(uint64_t a1, uint64_t a2)
{
  v2[5] = *MEMORY[0x263EF8340];
  ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(v2, a2);
}

void sub_2112EA55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a2) {
    ZinIrOpt::ReplaceSqrtEWDiv(a2);
  }
  _Unwind_Resume(a1);
}

void ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(void *a1, uint64_t a2)
{
  v17[26] = *MEMORY[0x263EF8340];
  *a1 = 0;
  std::string::basic_string[abi:ne180100]<0>(v11, "div");
  v12[0] = &unk_26C38C598;
  v12[3] = v12;
  int v4 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v13, &v4, 1);
  std::string::basic_string[abi:ne180100]<0>(v14, "mul");
  v15[0] = &unk_26C38C618;
  v15[3] = v15;
  int v3 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v16, &v3, 1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  v7[0] = 0;
  v7[1] = &v5;
  char v8 = 0;
  uint64_t v5 = (char *)operator new(0xC0uLL);
  uint64_t v6 = (uint64_t)v5;
  v7[0] = v5 + 192;
  uint64_t v6 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)v7, (uint64_t)v11, (uint64_t)v17, (uint64_t)v5);
  uint64_t v10 = 0;
  ZinLinearPattern::ZinLinearPattern(v17, &v5, a2, 0, v9, 0);
  operator new();
}

void sub_2112EA818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  MEMORY[0x21667D3C0](v45, 0x10F3C407E49AD01);
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)&a44);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](&a16);
  a14 = (void **)&a11;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&a14);
  for (uint64_t i = 96; i != -96; i -= 96)
    ZinLinearPattern::AtomItemDesc::~AtomItemDesc((ZinLinearPattern::AtomItemDesc *)(&a20 + i));
  uint64_t v48 = *v44;
  *long long v44 = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 48))(v48);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C38C598;
  return result;
}

void std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C38C598;
}

uint64_t std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<MatchStatus,false>::__call[abi:ne180100]<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1} &,MatchParams const&>(a1 + 8, a2);
}

uint64_t std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MatchStatus,false>::__call[abi:ne180100]<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1} &,MatchParams const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  uint64_t v3 = v2[8];
  if (*(_DWORD *)(v3 + 8) == 5 && v2[15] - v2[14] < 9uLL && *(_DWORD *)(v3 + 12) == 6)
  {
    LOBYTE(v4) = 1;
    int v5 = 1;
  }
  else
  {
    __int16 v4 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v5 = HIBYTE(v4);
  }
  return v4 | (v5 << 8);
}

void *std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C38C618;
  return result;
}

void std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C38C618;
}

uint64_t std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}::operator()(a1 + 8, a2);
}

uint64_t std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

uint64_t ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  if (v2[12] - v2[11] != 16) {
    goto LABEL_20;
  }
  uint64_t v3 = v2[8];
  int v4 = *(_DWORD *)(v3 + 8);
  if (v4 == 6)
  {
    if (*(_DWORD *)(v3 + 12) != 1
      || *(float *)(v3 + 16) != 1.0
      || *(float *)(v3 + 20) != 1.0
      || *(float *)(v3 + 24) != 0.0
      || *(unsigned char *)(v3 + 28)
      || *(unsigned char *)(v3 + 29))
    {
      goto LABEL_20;
    }
  }
  else if (v4 != 5 || *(_DWORD *)(v3 + 12) != 2)
  {
    goto LABEL_20;
  }
  int v5 = *(void **)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "div");
  ZinPattern::State::GetMatch(v5, (unsigned __int8 *)__p, &v16);
  if (v17 == v16) {
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = *v16;
  BOOL v17 = v16;
  operator delete(v16);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void *)(v6 + 88);
  if ((unint64_t)(*(void *)(v6 + 96) - v7) <= 8) {
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  }
  char v8 = (void *)v2[11];
  unint64_t v9 = v2[12] - (void)v8;
  if (!v9) {
LABEL_22:
  }
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  uint64_t v10 = *(void *)(v7 + 8);
  if (v10 != *v8)
  {
    if (v9 > 8)
    {
      if (v10 == v8[1]) {
        goto LABEL_13;
      }
LABEL_20:
      __int16 v12 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
      int v11 = HIBYTE(v12);
      return v12 | (v11 << 8);
    }
    goto LABEL_22;
  }
LABEL_13:
  int v11 = 0;
  LOBYTE(v12) = 1;
  return v12 | (v11 << 8);
}

void sub_2112EAC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C38C698;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C38C698;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, ZinIrOpLayer **a3)
{
  return 0;
}

uint64_t std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinIrOpt::IdentityDivMulRemover::MatchAndReplace(ZinIrOpt::IdentityDivMulRemover *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  if ((*(unsigned int (**)(void))(**(void **)this + 8))(*(void *)this))
  {
    ZinIrOpt::IdentityDivMulRemover::Replace(this, a2, a3);
  }
}

void ZinIrOpt::IdentityDivMulRemover::Replace(ZinIrOpt::IdentityDivMulRemover *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (*((char *)a3 + 47) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 47);
  }
  else {
    size_t v6 = *((void *)a3 + 4);
  }
  uint64_t v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 24);
  if (SBYTE7(v42) < 0) {
    uint64_t v7 = (void **)__p[0];
  }
  if (v6)
  {
    if (*((char *)a3 + 47) >= 0) {
      char v8 = (char *)a3 + 24;
    }
    else {
      char v8 = (char *)*((void *)a3 + 3);
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "_remove_identity_div_mul");
  ZinObjectNameFactory::ZinObjectNameFactory(v39, __p);
  if (SBYTE7(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "div");
  uint64_t SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v9, (unsigned __int8 *)__p);
  if (SBYTE7(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(void *)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "mul");
  __int16 v12 = (uint64_t **)ZinPattern::GetSingleMatch(v11, (unsigned __int8 *)__p);
  if (SBYTE7(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = *((void *)SingleMatch + 11);
  unint64_t v14 = *((void *)SingleMatch + 12) - v13;
  if (!v14) {
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  }
  if (v14 <= 8) {
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  }
  char v15 = *(ZinIrOpLayer **)v13;
  uint64_t v38 = *(void *)(v13 + 8);
  uint64_t v16 = (uint64_t *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v15 + 32))(v15, 0, 0)
                  + 48);
  BOOL v17 = (uint64_t *)(((uint64_t (*)(uint64_t **, void, void))(*v12)[4])(v12, 0, 0) + 48);
  if (ZinTensorDimensions::operator!=(v16, v17))
  {
    unint64_t v18 = operator new(0x14uLL);
    uint64_t v19 = 0;
    v18[4] = 4;
    *(_OWORD *)unint64_t v18 = xmmword_211F0499C;
    memset(v36, 0, sizeof(v36));
    int v37 = 1065353216;
    while (1)
    {
      uint64_t Dimension = ZinTensorDimensions::GetDimension(v16, v18[v19]);
      unint64_t v21 = (void *)ZinTensorDimensions::GetDimension(v17, v18[v19]);
      if ((void *)Dimension != v21)
      {
        if (Dimension != 1) {
          ZinAssertImpl("Error: invalid dimension size for broadcast. Input std::string::size_type size = %zd, output std::string::size_type size = %zd", Dimension, (size_t)v21);
        }
        LODWORD(__p[0]) = v18[v19];
        __p[1] = v21;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v36, (int *)__p, __p);
      }
      if (++v19 == 5)
      {
        ((void (*)(uint64_t **, void, void))(*v12)[4])(v12, 0, 0);
        (*(void (**)(void **__return_ptr, ZinIrOpLayer *, void, void))(*(void *)v15 + 80))(__p, v15, 0, 0);
        unint64_t v22 = operator new(0x78uLL);
        int v34 = (char *)v22 + 120;
        long long v35 = (char *)v22 + 120;
        long long v23 = v46;
        v22[4] = v45;
        v22[5] = v23;
        v22[6] = v47;
        *((_DWORD *)v22 + 28) = v48;
        long long v24 = v42;
        *unint64_t v22 = *(_OWORD *)__p;
        v22[1] = v24;
        long long v25 = v44;
        v22[2] = v43;
        v22[3] = v25;
        std::locale v33 = v22;
        ZinBuilder::CreateBroadcast();
      }
    }
  }
  memset(v31, 0, sizeof(v31));
  int v32 = 1065353216;
  char v26 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, v12, v15, v31);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v31);
  BOOL v27 = ZinIrOpLayerGraph::RemoveNode(a2, (ZinIrOpLayer *)v12, 0);
  if ((v26 & 1 & v27 & ZinIrOpLayerGraph::RemoveNode(a2, SingleMatch, 0)) == 0) {
    ZinAssertImpl("Error: graph manipulation failed when removing identity div-mul");
  }
  long long v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)std::string __p = 0u;
  std::deque<ZinIrOpLayer *>::push_back(__p, &v38);
  while (*((void *)&v43 + 1))
  {
    uint64_t v28 = *(ZinIrOpLayer **)(*(void *)((char *)__p[1] + (((unint64_t)v43 >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v43 & 0x1FF));
    *(void *)&long long v43 = v43 + 1;
    --*((void *)&v43 + 1);
    if ((unint64_t)v43 >= 0x400)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(void *)&long long v43 = v43 - 512;
    }
    if (*((void *)v28 + 15) == *((void *)v28 + 14))
    {
      BOOL v29 = (void *)*((void *)v28 + 11);
      uint64_t v30 = (void *)*((void *)v28 + 12);
      while (v29 != v30)
      {
        *(void *)&v36[0] = 0;
        *(void *)&v36[0] = *v29;
        std::deque<ZinIrOpLayer *>::push_back(__p, v36);
        ++v29;
      }
      if (!ZinIrOpLayerGraph::RemoveNode(a2, v28, 0)) {
        ZinAssertImpl("Error: graph manipulation failed when removing identity div-mul");
      }
    }
  }
  std::deque<unsigned long>::~deque[abi:ne180100](__p);
  v39[0] = &unk_26C34DA98;
  if (v40 < 0) {
    operator delete((void *)v39[1]);
  }
}

void sub_2112EB3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a19);
  operator delete(v38);
  a26 = &unk_26C34DA98;
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

ZinPadLayerUtils::PadDecomposedDesc *ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(ZinPadLayerUtils::PadDecomposedDesc *this, ZinIrConcatUnitInfo *a2)
{
  *((_OWORD *)this + 21) = xmmword_211F04A10;
  *(void *)this = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 8) = v5;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *(void *)this = &unk_26C34C998;
  int v6 = *((_DWORD *)a2 + 20);
  *((unsigned char *)this + 84) = *((unsigned char *)a2 + 84);
  *((_DWORD *)this + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v6;
  return this;
}

void sub_2112EB5D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ZinPadLayerUtils::PadDecomposedDesc *ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(ZinPadLayerUtils::PadDecomposedDesc *this, ZinIrInputViewUnitInfo *a2)
{
  *((_OWORD *)this + 21) = xmmword_211F04A20;
  *(void *)this = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 8) = v5;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *(void *)this = &unk_26C34F860;
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_2112EB6D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc(ZinPadLayerUtils::PadDecomposedDesc *this)
{
  int v2 = *((_DWORD *)this + 87);
  if (v2 > 16)
  {
    if (v2 == 17) {
      goto LABEL_14;
    }
    if (v2 != 21) {
      return;
    }
    *(void *)this = &unk_26C34F988;
    uint64_t v3 = (void *)*((void *)this + 10);
    if (!v3) {
      goto LABEL_14;
    }
    *((void *)this + 11) = v3;
LABEL_13:
    operator delete(v3);
    goto LABEL_14;
  }
  if (v2 == 1)
  {
    *(void *)this = &unk_26C34CC70;
    long long v4 = (void *)*((void *)this + 19);
    if (v4)
    {
      *((void *)this + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v4;
      operator delete(v4);
    }
    uint64_t v3 = (void *)*((void *)this + 16);
    if (!v3) {
      goto LABEL_14;
    }
    *((void *)this + 17) = v3;
    goto LABEL_13;
  }
  if (v2 == 3) {
LABEL_14:
  }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this);
}

ZinPadLayerUtils::PadDecomposedDesc *ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(ZinPadLayerUtils::PadDecomposedDesc *this, const ZinPadLayerUtils::PadDecomposedDesc *a2)
{
  *((void *)this + 42) = 0;
  *((_DWORD *)this + 86) = 0;
  int v4 = *((_DWORD *)a2 + 87);
  *((_DWORD *)this + 87) = v4;
  if (v4 > 16)
  {
    if (v4 == 17)
    {
      *(void *)this = &unk_26C345B80;
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
      }
      else
      {
        long long v11 = *(_OWORD *)((char *)a2 + 8);
        *((void *)this + 3) = *((void *)a2 + 3);
        *(_OWORD *)((char *)this + 8) = v11;
      }
      int v14 = *((_DWORD *)a2 + 8);
      *((void *)this + 5) = 0;
      *((_DWORD *)this + 8) = v14;
      *((void *)this + 6) = 0;
      *((void *)this + 7) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
      *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
      *(void *)this = &unk_26C34F860;
      *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
    }
    else if (v4 == 21)
    {
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo(this, a2);
    }
  }
  else if (v4 == 1)
  {
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo(this, a2);
    *(void *)this = &unk_26C34A9B8;
    long long v6 = *((_OWORD *)a2 + 16);
    *((_OWORD *)this + 15) = *((_OWORD *)a2 + 15);
    *((_OWORD *)this + 16) = v6;
    long long v7 = *((_OWORD *)a2 + 17);
    long long v8 = *((_OWORD *)a2 + 18);
    long long v9 = *((_OWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 316) = *(_OWORD *)((char *)a2 + 316);
    *((_OWORD *)this + 18) = v8;
    *((_OWORD *)this + 19) = v9;
    *((_OWORD *)this + 17) = v7;
    uint64_t v10 = *((void *)a2 + 42);
    *((_DWORD *)this + 86) = *((_DWORD *)a2 + 86);
    *((void *)this + 42) = v10;
  }
  else if (v4 == 3)
  {
    *(void *)this = &unk_26C345B80;
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    }
    else
    {
      long long v5 = *(_OWORD *)((char *)a2 + 8);
      *((void *)this + 3) = *((void *)a2 + 3);
      *(_OWORD *)((char *)this + 8) = v5;
    }
    int v12 = *((_DWORD *)a2 + 8);
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 8) = v12;
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
    *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
    *(void *)this = &unk_26C34C998;
    int v13 = *((_DWORD *)a2 + 20);
    *((unsigned char *)this + 84) = *((unsigned char *)a2 + 84);
    *((_DWORD *)this + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v13;
  }
  return this;
}

void sub_2112EB9F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinPadLayerUtils::IsReflectivePad(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 200);
  uint64_t v1 = *(void *)(a1 + 208);
  if (v2 == v1) {
    return 1;
  }
  uint64_t v3 = v2 + 8;
  do
  {
    int v4 = *(_DWORD *)(v3 - 4);
    BOOL result = v4 == 6;
    BOOL v6 = v4 != 6 || v3 == v1;
    v3 += 8;
  }
  while (!v6);
  return result;
}

uint64_t ZinPadLayerUtils::DecomposeReflectivePad(uint64_t a1, _DWORD *a2, uint64_t *a3, char **a4, int a5, uint64_t a6)
{
  long long v8 = (_OWORD *)a1;
  uint64_t v239 = *MEMORY[0x263EF8340];
  for (uint64_t i = *((void *)a2 + 25); i != *((void *)a2 + 26); i += 8)
  {
    if (*(_DWORD *)(i + 4) != 6) {
      return 0;
    }
  }
  if (*(void *)(a2 + 43)) {
    return 0;
  }
  int v10 = a2[41];
  v214 = a2;
  if (v10 >= 1)
  {
    int v11 = 0;
    int v12 = (_OWORD *)(a1 + 24);
    uint64_t v210 = (uint64_t)(a4 + 2);
    do
    {
      long long v218 = 0uLL;
      int v220 = 0;
      uint64_t v219 = 0;
      long long v221 = 0u;
      *(_OWORD *)v222 = 0u;
      *(void *)&v222[16] = -1;
      v217 = &unk_26C34F860;
      HIDWORD(__p) = 3;
      LODWORD(__p) = ++v11;
      *(void *)((char *)&__p + 4) = 0x100000001;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)&v217);
      unint64_t v13 = a3[1];
      if (v13 >= a3[2])
      {
        uint64_t v14 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
        uint64_t v14 = v13 + 352;
        a3[1] = v13 + 352;
      }
      a3[1] = v14;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
      *(_OWORD *)__src = *v8;
      *(_OWORD *)v227 = *v12;
      unint64_t v15 = (unint64_t)a4[1];
      unint64_t v16 = (unint64_t)a4[2];
      if (v15 >= v16)
      {
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - (void)*a4) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (void)*a4) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x333333333333333) {
          unint64_t v21 = 0x666666666666666;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v210, v21);
        }
        else {
          unint64_t v22 = 0;
        }
        long long v23 = &v22[40 * v18];
        *(_OWORD *)long long v23 = *(_OWORD *)__src;
        *((void *)v23 + 2) = 1;
        *(_OWORD *)(v23 + 24) = *(_OWORD *)v227;
        long long v25 = *a4;
        long long v24 = a4[1];
        char v26 = v23;
        if (v24 != *a4)
        {
          do
          {
            long long v27 = *(_OWORD *)(v24 - 40);
            long long v28 = *(_OWORD *)(v24 - 24);
            *((void *)v26 - 1) = *((void *)v24 - 1);
            *(_OWORD *)(v26 - 24) = v28;
            *(_OWORD *)(v26 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v27;
            v26 -= 40;
            v24 -= 40;
          }
          while (v24 != v25);
          long long v24 = *a4;
        }
        BOOL v17 = v23 + 40;
        *a4 = v26;
        a4[1] = v23 + 40;
        a4[2] = &v22[40 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v15 = *v8;
        *(void *)(v15 + 16) = 1;
        *(_OWORD *)(v15 + 24) = *(_OWORD *)v227;
        BOOL v17 = (char *)(v15 + 40);
      }
      a4[1] = v17;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
      long long v8 = (_OWORD *)a1;
      a2 = v214;
      int v10 = v214[41];
    }
    while (v11 < v10);
  }
  int v29 = a2[42];
  if (v29 >= 1)
  {
    for (int j = 0; j < v29; ++j)
    {
      long long v218 = 0uLL;
      int v220 = 0;
      uint64_t v219 = 0;
      long long v221 = 0u;
      *(_OWORD *)v222 = 0u;
      *(void *)&v222[16] = -1;
      v217 = &unk_26C34F860;
      HIDWORD(__p) = 3;
      LODWORD(__p) = *(_DWORD *)(a1 + 16) - j - 2;
      *(void *)((char *)&__p + 4) = 0x100000001;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)&v217);
      unint64_t v31 = a3[1];
      if (v31 >= a3[2])
      {
        uint64_t v32 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
        uint64_t v32 = v31 + 352;
        a3[1] = v31 + 352;
      }
      a3[1] = v32;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
      *(_OWORD *)__src = *(_OWORD *)a1;
      *(_OWORD *)v227 = *(_OWORD *)(a1 + 24);
      unint64_t v33 = (unint64_t)a4[1];
      unint64_t v34 = (unint64_t)a4[2];
      if (v33 >= v34)
      {
        unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - (void)*a4) >> 3);
        unint64_t v37 = v36 + 1;
        if (v36 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - (void)*a4) >> 3);
        if (2 * v38 > v37) {
          unint64_t v37 = 2 * v38;
        }
        if (v38 >= 0x333333333333333) {
          unint64_t v39 = 0x666666666666666;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39) {
          char v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v39);
        }
        else {
          char v40 = 0;
        }
        int v41 = &v40[40 * v36];
        *(_OWORD *)int v41 = *(_OWORD *)__src;
        *((void *)v41 + 2) = 1;
        *(_OWORD *)(v41 + 24) = *(_OWORD *)v227;
        long long v43 = *a4;
        long long v42 = a4[1];
        long long v44 = v41;
        if (v42 != *a4)
        {
          do
          {
            long long v45 = *(_OWORD *)(v42 - 40);
            long long v46 = *(_OWORD *)(v42 - 24);
            *((void *)v44 - 1) = *((void *)v42 - 1);
            *(_OWORD *)(v44 - 24) = v46;
            *(_OWORD *)(v44 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v45;
            v44 -= 40;
            v42 -= 40;
          }
          while (v42 != v43);
          long long v42 = *a4;
        }
        long long v35 = v41 + 40;
        *a4 = v44;
        a4[1] = v41 + 40;
        a4[2] = &v40[40 * v39];
        if (v42) {
          operator delete(v42);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v33 = *(_OWORD *)a1;
        *(void *)(v33 + 16) = 1;
        *(_OWORD *)(v33 + 24) = *(_OWORD *)v227;
        long long v35 = (char *)(v33 + 40);
      }
      a4[1] = v35;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
      int v29 = v214[42];
    }
    int v10 = v214[41];
  }
  if (v10 >= 1)
  {
    int v47 = 0;
    int v48 = (unint64_t *)(a4 + 2);
    do
    {
      long long v218 = 0uLL;
      uint64_t v219 = 0;
      long long v221 = 0u;
      *(_OWORD *)v222 = 0u;
      *(void *)&v222[16] = -1;
      v217 = &unk_26C34C998;
      BYTE4(__p) = 0;
      int v220 = 3;
      LODWORD(__p) = 3;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v217);
      unint64_t v49 = a3[1];
      if (v49 >= a3[2])
      {
        uint64_t v50 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
        uint64_t v50 = v49 + 352;
        a3[1] = v49 + 352;
      }
      a3[1] = v50;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
      unint64_t v51 = (unint64_t)a4[1];
      *(_OWORD *)__src = *(_OWORD *)(v51 - 40);
      uint64_t v52 = *(void *)(v51 - 24);
      *(_OWORD *)v227 = *(_OWORD *)(v51 - 16);
      if (!v47)
      {
        *(_OWORD *)__src = *(_OWORD *)a1;
        uint64_t v52 = *(void *)(a1 + 16);
        *(_OWORD *)v227 = *(_OWORD *)(a1 + 24);
      }
      uint64_t v53 = v52 + 1;
      if (v51 >= *v48)
      {
        unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - (void)*a4) >> 3);
        unint64_t v56 = v55 + 1;
        if (v55 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(*v48 - (void)*a4) >> 3) > v56) {
          unint64_t v56 = 0x999999999999999ALL * ((uint64_t)(*v48 - (void)*a4) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v48 - (void)*a4) >> 3) >= 0x333333333333333) {
          unint64_t v57 = 0x666666666666666;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57) {
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v57);
        }
        else {
          v58 = 0;
        }
        size_t v59 = &v58[40 * v55];
        *(_OWORD *)size_t v59 = *(_OWORD *)__src;
        *((void *)v59 + 2) = v53;
        *(_OWORD *)(v59 + 24) = *(_OWORD *)v227;
        uint64_t v61 = *a4;
        uint64_t v60 = a4[1];
        v62 = v59;
        if (v60 != *a4)
        {
          do
          {
            long long v63 = *(_OWORD *)(v60 - 40);
            long long v64 = *(_OWORD *)(v60 - 24);
            *((void *)v62 - 1) = *((void *)v60 - 1);
            *(_OWORD *)(v62 - 24) = v64;
            *(_OWORD *)(v62 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v63;
            v62 -= 40;
            v60 -= 40;
          }
          while (v60 != v61);
          uint64_t v60 = *a4;
        }
        std::string::size_type v54 = v59 + 40;
        *a4 = v62;
        a4[1] = v59 + 40;
        a4[2] = &v58[40 * v57];
        if (v60) {
          operator delete(v60);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v51 = *(_OWORD *)__src;
        *(void *)(v51 + 16) = v53;
        *(_OWORD *)(v51 + 24) = *(_OWORD *)v227;
        std::string::size_type v54 = (char *)(v51 + 40);
      }
      a4[1] = v54;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
      ++v47;
      int v10 = v214[41];
    }
    while (v47 < v10);
    int v29 = v214[42];
  }
  if (v29 >= 1)
  {
    for (int k = 0; k < v29; ++k)
    {
      long long v218 = 0uLL;
      uint64_t v219 = 0;
      long long v221 = 0u;
      *(_OWORD *)v222 = 0u;
      *(void *)&v222[16] = -1;
      v217 = &unk_26C34C998;
      BYTE4(__p) = 0;
      int v220 = 3;
      LODWORD(__p) = 3;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v217);
      unint64_t v66 = a3[1];
      if (v66 >= a3[2])
      {
        uint64_t v67 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
        uint64_t v67 = v66 + 352;
        a3[1] = v66 + 352;
      }
      a3[1] = v67;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
      unint64_t v68 = (unint64_t)a4[1];
      unint64_t v69 = (unint64_t)a4[2];
      *(_OWORD *)__src = *(_OWORD *)(v68 - 40);
      uint64_t v70 = *(void *)(v68 - 24);
      *(_OWORD *)v227 = *(_OWORD *)(v68 - 16);
      uint64_t v71 = v70 + 1;
      if (v68 >= v69)
      {
        unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - (void)*a4) >> 3);
        unint64_t v74 = v73 + 1;
        if (v73 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v75 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - (void)*a4) >> 3);
        if (2 * v75 > v74) {
          unint64_t v74 = 2 * v75;
        }
        if (v75 >= 0x333333333333333) {
          unint64_t v76 = 0x666666666666666;
        }
        else {
          unint64_t v76 = v74;
        }
        if (v76) {
          v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v76);
        }
        else {
          v77 = 0;
        }
        long long v78 = &v77[40 * v73];
        *(_OWORD *)long long v78 = *(_OWORD *)__src;
        *((void *)v78 + 2) = v71;
        *(_OWORD *)(v78 + 24) = *(_OWORD *)v227;
        unsigned int v80 = *a4;
        char v79 = a4[1];
        v81 = v78;
        if (v79 != *a4)
        {
          do
          {
            long long v82 = *(_OWORD *)(v79 - 40);
            long long v83 = *(_OWORD *)(v79 - 24);
            *((void *)v81 - 1) = *((void *)v79 - 1);
            *(_OWORD *)(v81 - 24) = v83;
            *(_OWORD *)(v81 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v82;
            v81 -= 40;
            v79 -= 40;
          }
          while (v79 != v80);
          char v79 = *a4;
        }
        long long v72 = v78 + 40;
        *a4 = v81;
        a4[1] = v78 + 40;
        a4[2] = &v77[40 * v76];
        if (v79) {
          operator delete(v79);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v68 = *(_OWORD *)(v68 - 40);
        *(void *)(v68 + 16) = v71;
        *(_OWORD *)(v68 + 24) = *(_OWORD *)(v68 - 16);
        long long v72 = (char *)(v68 + 40);
      }
      a4[1] = v72;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
      int v29 = v214[42];
    }
    int v10 = v214[41];
  }
  uint64_t v84 = *(void *)(a1 + 8);
  uint64_t v85 = *(void *)(a1 + 16);
  uint64_t v229 = 0;
  int v86 = a5;
  if (ZinTensorFormatGetSizeInBytes(a5, &v229)) {
    ZinAssertImpl("Error: Cannot retrieve tensor format during decompose reflecting pad lowering.");
  }
  v227[0] = 0;
  v227[1] = 0;
  uint64_t v228 = 0;
  v224 = 0;
  v225 = 0;
  uint64_t v226 = 0;
  if ((float)(ceilf((float)(v229 * v84) / (float)*(unint64_t *)(a6 + 528))
             * (float)*(unint64_t *)(a6 + 528)) >= (float)(ceilf((float)(v229 * (v85 + v29 + v10))/ (float)*(unint64_t *)(a6 + 528))* (float)*(unint64_t *)(a6 + 528)))
  {
    *(void *)&__src[16] = 0x400000003;
    *(_OWORD *)__src = xmmword_211F04A40;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v227, __src, (uint64_t)&v231, 3uLL);
    uint64_t v87 = (uint64_t *)a1;
    *(_OWORD *)__src = xmmword_211F04A58;
    *(void *)&__src[16] = 0x300000004;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v224, __src, (uint64_t)&v231, 3uLL);
    int v86 = a5;
  }
  else
  {
    *(_OWORD *)__src = xmmword_211ED4940;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v224, __src, (uint64_t)&__src[16], 2uLL);
    uint64_t v87 = (uint64_t *)a1;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v227, (char *)v224, (uint64_t)v225, (v225 - (unsigned char *)v224) >> 3);
  }
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v217, (uint64_t)v227, v86);
  long long v238 = xmmword_211F04A30;
  *(void *)__src = &unk_26C345B80;
  if (SHIBYTE(v219) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)v218, *((std::string::size_type *)&v218 + 1));
  }
  else
  {
    *(_OWORD *)&__src[8] = v218;
    uint64_t v231 = v219;
  }
  int v232 = v220;
  memset(&v233, 0, sizeof(v233));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v233, (long long *)v221, *((long long **)&v221 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v221 + 1) - v221) >> 3));
  long long v234 = *(_OWORD *)&v222[8];
  *(void *)__src = &unk_26C34F988;
  uint64_t v235 = 0;
  uint64_t v236 = 0;
  uint64_t v237 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v235, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
  unint64_t v89 = a3[1];
  if (v89 >= a3[2])
  {
    uint64_t v90 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
  }
  else
  {
    ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
    uint64_t v90 = v89 + 352;
    a3[1] = v89 + 352;
  }
  a3[1] = v90;
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
  std::string v91 = *a4;
  std::string v92 = a4[1];
  std::string v93 = (uint64_t *)(v92 - 40);
  uint64_t v94 = v92 - *a4;
  if (v92 == *a4) {
    std::string v93 = v87;
  }
  uint64_t v96 = *v93;
  uint64_t v95 = v93[1];
  uint64_t v97 = v93[2];
  uint64_t v98 = v93[3];
  uint64_t v99 = v93[4];
  unint64_t v100 = (unint64_t)a4[2];
  v213 = (unint64_t *)(a4 + 2);
  if ((unint64_t)v92 >= v100)
  {
    uint64_t v103 = v94 / 40;
    unint64_t v104 = v94 / 40 + 1;
    if (v104 > 0x666666666666666) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v105 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v100 - (void)v91) >> 3);
    if (2 * v105 > v104) {
      unint64_t v104 = 2 * v105;
    }
    if (v105 >= 0x333333333333333) {
      unint64_t v106 = 0x666666666666666;
    }
    else {
      unint64_t v106 = v104;
    }
    if (v106)
    {
      std::string v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v213, v106);
      std::string v91 = *a4;
      std::string v92 = a4[1];
    }
    else
    {
      std::string v107 = 0;
    }
    v108 = &v107[40 * v103];
    *(void *)v108 = v96;
    *((void *)v108 + 1) = v98;
    std::string v109 = &v107[40 * v106];
    *((void *)v108 + 2) = v97;
    *((void *)v108 + 3) = v95;
    *((void *)v108 + 4) = v99;
    uint64_t v101 = v108 + 40;
    if (v92 == v91)
    {
      std::string v102 = v214;
    }
    else
    {
      std::string v102 = v214;
      do
      {
        long long v110 = *(_OWORD *)(v92 - 40);
        long long v111 = *(_OWORD *)(v92 - 24);
        *((void *)v108 - 1) = *((void *)v92 - 1);
        *(_OWORD *)(v108 - 24) = v111;
        *(_OWORD *)(v108 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v110;
        v108 -= 40;
        v92 -= 40;
      }
      while (v92 != v91);
      std::string v91 = *a4;
    }
    *a4 = v108;
    a4[1] = v101;
    a4[2] = v109;
    if (v91) {
      operator delete(v91);
    }
  }
  else
  {
    *(void *)std::string v92 = v96;
    *((void *)v92 + 1) = v98;
    *((void *)v92 + 2) = v97;
    *((void *)v92 + 3) = v95;
    uint64_t v101 = v92 + 40;
    *((void *)v92 + 4) = v99;
    std::string v102 = v214;
  }
  a4[1] = v101;
  v217 = &unk_26C34F988;
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
  uint64_t v112 = a4[1];
  uint64_t v113 = *((void *)v112 - 5);
  uint64_t v211 = *((void *)v112 - 4);
  long long v215 = *(_OWORD *)(v112 - 24);
  uint64_t v216 = *((void *)v112 - 1);
  int v114 = v102[39];
  if (v114 >= 1)
  {
    int v115 = 0;
    do
    {
      long long v218 = 0uLL;
      int v220 = 0;
      uint64_t v219 = 0;
      long long v221 = 0u;
      *(_OWORD *)v222 = 0u;
      *(void *)&v222[16] = -1;
      v217 = &unk_26C34F860;
      HIDWORD(__p) = 2;
      LODWORD(__p) = ++v115;
      *(void *)((char *)&__p + 4) = 0x100000001;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)&v217);
      unint64_t v116 = a3[1];
      if (v116 >= a3[2])
      {
        uint64_t v117 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
        uint64_t v117 = v116 + 352;
        a3[1] = v116 + 352;
      }
      a3[1] = v117;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
      unint64_t v118 = (unint64_t)a4[1];
      unint64_t v119 = (unint64_t)a4[2];
      if (v118 >= v119)
      {
        unint64_t v121 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v118 - (void)*a4) >> 3);
        unint64_t v122 = v121 + 1;
        if (v121 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v123 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v119 - (void)*a4) >> 3);
        if (2 * v123 > v122) {
          unint64_t v122 = 2 * v123;
        }
        if (v123 >= 0x333333333333333) {
          unint64_t v124 = 0x666666666666666;
        }
        else {
          unint64_t v124 = v122;
        }
        if (v124) {
          v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v213, v124);
        }
        else {
          v125 = 0;
        }
        v126 = &v125[40 * v121];
        *(void *)v126 = v113;
        *((void *)v126 + 1) = 1;
        *((_OWORD *)v126 + 1) = v215;
        *((void *)v126 + 4) = v216;
        uint64_t v128 = *a4;
        v127 = a4[1];
        long long v129 = v126;
        if (v127 != *a4)
        {
          do
          {
            long long v130 = *(_OWORD *)(v127 - 40);
            long long v131 = *(_OWORD *)(v127 - 24);
            *((void *)v129 - 1) = *((void *)v127 - 1);
            *(_OWORD *)(v129 - 24) = v131;
            *(_OWORD *)(v129 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v130;
            v129 -= 40;
            v127 -= 40;
          }
          while (v127 != v128);
          v127 = *a4;
        }
        uint64_t v120 = v126 + 40;
        *a4 = v129;
        a4[1] = v126 + 40;
        a4[2] = &v125[40 * v124];
        if (v127) {
          operator delete(v127);
        }
      }
      else
      {
        *(void *)unint64_t v118 = v113;
        *(void *)(v118 + 8) = 1;
        *(_OWORD *)(v118 + 16) = v215;
        *(void *)(v118 + 32) = v216;
        uint64_t v120 = (char *)(v118 + 40);
      }
      a4[1] = v120;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
      int v114 = v214[39];
    }
    while (v115 < v114);
    std::string v102 = v214;
  }
  int v132 = v102[40];
  if (v132 >= 1)
  {
    for (int m = 0; m < v132; ++m)
    {
      long long v218 = 0uLL;
      int v220 = 0;
      uint64_t v219 = 0;
      long long v221 = 0u;
      *(_OWORD *)v222 = 0u;
      *(void *)&v222[16] = -1;
      v217 = &unk_26C34F860;
      HIDWORD(__p) = 2;
      LODWORD(__p) = v211 - 2 - m;
      *(void *)((char *)&__p + 4) = 0x100000001;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)&v217);
      unint64_t v134 = a3[1];
      if (v134 >= a3[2])
      {
        uint64_t v135 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
        uint64_t v135 = v134 + 352;
        a3[1] = v134 + 352;
      }
      a3[1] = v135;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
      unint64_t v136 = (unint64_t)a4[1];
      unint64_t v137 = (unint64_t)a4[2];
      if (v136 >= v137)
      {
        unint64_t v139 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v136 - (void)*a4) >> 3);
        unint64_t v140 = v139 + 1;
        if (v139 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v141 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v137 - (void)*a4) >> 3);
        if (2 * v141 > v140) {
          unint64_t v140 = 2 * v141;
        }
        if (v141 >= 0x333333333333333) {
          unint64_t v142 = 0x666666666666666;
        }
        else {
          unint64_t v142 = v140;
        }
        if (v142) {
          int v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v213, v142);
        }
        else {
          int v143 = 0;
        }
        uint64_t v144 = &v143[40 * v139];
        *(void *)uint64_t v144 = v113;
        *((void *)v144 + 1) = 1;
        *((_OWORD *)v144 + 1) = v215;
        *((void *)v144 + 4) = v216;
        v146 = *a4;
        uint64_t v145 = a4[1];
        long long v147 = v144;
        if (v145 != *a4)
        {
          do
          {
            long long v148 = *(_OWORD *)(v145 - 40);
            long long v149 = *(_OWORD *)(v145 - 24);
            *((void *)v147 - 1) = *((void *)v145 - 1);
            *(_OWORD *)(v147 - 24) = v149;
            *(_OWORD *)(v147 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v148;
            v147 -= 40;
            v145 -= 40;
          }
          while (v145 != v146);
          uint64_t v145 = *a4;
        }
        size_t v138 = v144 + 40;
        *a4 = v147;
        a4[1] = v144 + 40;
        a4[2] = &v143[40 * v142];
        if (v145) {
          operator delete(v145);
        }
      }
      else
      {
        *(void *)unint64_t v136 = v113;
        *(void *)(v136 + 8) = 1;
        *(_OWORD *)(v136 + 16) = v215;
        *(void *)(v136 + 32) = v216;
        size_t v138 = (char *)(v136 + 40);
      }
      a4[1] = v138;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
      int v132 = v214[40];
    }
    std::string v102 = v214;
    int v114 = v214[39];
  }
  if (v114 >= 1)
  {
    int v150 = 0;
    do
    {
      long long v218 = 0uLL;
      uint64_t v219 = 0;
      long long v221 = 0u;
      *(_OWORD *)v222 = 0u;
      *(void *)&v222[16] = -1;
      v217 = &unk_26C34C998;
      BYTE4(__p) = 0;
      int v220 = 3;
      LODWORD(__p) = 2;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v217);
      unint64_t v151 = a3[1];
      if (v151 >= a3[2])
      {
        uint64_t v152 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
        uint64_t v152 = v151 + 352;
        a3[1] = v151 + 352;
      }
      a3[1] = v152;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
      unint64_t v153 = (unint64_t)a4[1];
      uint64_t v155 = *(void *)(v153 - 40);
      uint64_t v154 = *(void *)(v153 - 32);
      *(_OWORD *)__src = *(_OWORD *)(v153 - 24);
      *(void *)&__src[16] = *(void *)(v153 - 8);
      if (!v150)
      {
        *(_OWORD *)__src = v215;
        *(void *)&__src[16] = v216;
        uint64_t v154 = v211;
        uint64_t v155 = v113;
      }
      uint64_t v156 = v154 + 1;
      if (v153 >= *v213)
      {
        unint64_t v158 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v153 - (void)*a4) >> 3);
        unint64_t v159 = v158 + 1;
        if (v158 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(*v213 - (void)*a4) >> 3) > v159) {
          unint64_t v159 = 0x999999999999999ALL * ((uint64_t)(*v213 - (void)*a4) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v213 - (void)*a4) >> 3) >= 0x333333333333333) {
          unint64_t v160 = 0x666666666666666;
        }
        else {
          unint64_t v160 = v159;
        }
        if (v160) {
          v161 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v213, v160);
        }
        else {
          v161 = 0;
        }
        uint64_t v162 = &v161[40 * v158];
        *(void *)uint64_t v162 = v155;
        *((void *)v162 + 1) = v156;
        *((_OWORD *)v162 + 1) = *(_OWORD *)__src;
        *((void *)v162 + 4) = *(void *)&__src[16];
        unsigned __int8 v164 = *a4;
        v163 = a4[1];
        std::string v165 = v162;
        if (v163 == *a4)
        {
          std::string v102 = v214;
        }
        else
        {
          std::string v102 = v214;
          do
          {
            long long v166 = *(_OWORD *)(v163 - 40);
            long long v167 = *(_OWORD *)(v163 - 24);
            *((void *)v165 - 1) = *((void *)v163 - 1);
            *(_OWORD *)(v165 - 24) = v167;
            *(_OWORD *)(v165 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v166;
            v165 -= 40;
            v163 -= 40;
          }
          while (v163 != v164);
          v163 = *a4;
        }
        std::string::size_type v157 = v162 + 40;
        *a4 = v165;
        a4[1] = v162 + 40;
        a4[2] = &v161[40 * v160];
        if (v163) {
          operator delete(v163);
        }
      }
      else
      {
        *(void *)unint64_t v153 = v155;
        *(void *)(v153 + 8) = v156;
        *(_OWORD *)(v153 + 16) = *(_OWORD *)__src;
        *(void *)(v153 + 32) = *(void *)&__src[16];
        std::string::size_type v157 = (char *)(v153 + 40);
      }
      a4[1] = v157;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
      ++v150;
    }
    while (v150 < v102[39]);
    int v132 = v102[40];
  }
  if (v132 >= 1)
  {
    int v168 = 0;
    do
    {
      long long v218 = 0uLL;
      uint64_t v219 = 0;
      long long v221 = 0u;
      *(_OWORD *)v222 = 0u;
      *(void *)&v222[16] = -1;
      v217 = &unk_26C34C998;
      BYTE4(__p) = 0;
      int v220 = 3;
      LODWORD(__p) = 2;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v217);
      unint64_t v169 = a3[1];
      if (v169 >= a3[2])
      {
        uint64_t v170 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
        uint64_t v170 = v169 + 352;
        a3[1] = v169 + 352;
      }
      a3[1] = v170;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
      unint64_t v171 = (unint64_t)a4[1];
      unint64_t v172 = (unint64_t)a4[2];
      uint64_t v174 = *(void *)(v171 - 40);
      uint64_t v173 = *(void *)(v171 - 32);
      *(_OWORD *)__src = *(_OWORD *)(v171 - 24);
      *(void *)&__src[16] = *(void *)(v171 - 8);
      uint64_t v175 = v173 + 1;
      if (v171 >= v172)
      {
        unint64_t v177 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v171 - (void)*a4) >> 3);
        unint64_t v178 = v177 + 1;
        if (v177 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v179 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v172 - (void)*a4) >> 3);
        if (2 * v179 > v178) {
          unint64_t v178 = 2 * v179;
        }
        if (v179 >= 0x333333333333333) {
          unint64_t v180 = 0x666666666666666;
        }
        else {
          unint64_t v180 = v178;
        }
        if (v180) {
          uint64_t v181 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v213, v180);
        }
        else {
          uint64_t v181 = 0;
        }
        std::string v182 = &v181[40 * v177];
        *(void *)std::string v182 = v174;
        *((void *)v182 + 1) = v175;
        *((_OWORD *)v182 + 1) = *(_OWORD *)__src;
        *((void *)v182 + 4) = *(void *)&__src[16];
        std::string v184 = *a4;
        std::string v183 = a4[1];
        std::string v185 = v182;
        if (v183 != *a4)
        {
          do
          {
            long long v186 = *(_OWORD *)(v183 - 40);
            long long v187 = *(_OWORD *)(v183 - 24);
            *((void *)v185 - 1) = *((void *)v183 - 1);
            *(_OWORD *)(v185 - 24) = v187;
            *(_OWORD *)(v185 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v186;
            v185 -= 40;
            v183 -= 40;
          }
          while (v183 != v184);
          std::string v183 = *a4;
        }
        uint64_t v176 = v182 + 40;
        *a4 = v185;
        a4[1] = v182 + 40;
        a4[2] = &v181[40 * v180];
        if (v183) {
          operator delete(v183);
        }
      }
      else
      {
        *(void *)unint64_t v171 = v174;
        *(void *)(v171 + 8) = v175;
        *(_OWORD *)(v171 + 16) = *(_OWORD *)(v171 - 24);
        *(void *)(v171 + 32) = *(void *)(v171 - 8);
        uint64_t v176 = (char *)(v171 + 40);
      }
      a4[1] = v176;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
      ++v168;
    }
    while (v168 < v214[40]);
  }
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v217, (uint64_t)&v224, a5);
  long long v238 = xmmword_211F04A30;
  *(void *)__src = &unk_26C345B80;
  if (SHIBYTE(v219) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__src[8], (const std::string::value_type *)v218, *((std::string::size_type *)&v218 + 1));
  }
  else
  {
    *(_OWORD *)&__src[8] = v218;
    uint64_t v231 = v219;
  }
  int v232 = v220;
  memset(&v233, 0, sizeof(v233));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v233, (long long *)v221, *((long long **)&v221 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v221 + 1) - v221) >> 3));
  long long v234 = *(_OWORD *)&v222[8];
  *(void *)__src = &unk_26C34F988;
  uint64_t v235 = 0;
  uint64_t v236 = 0;
  uint64_t v237 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v235, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
  unint64_t v188 = a3[1];
  if (v188 >= a3[2])
  {
    uint64_t v189 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
  }
  else
  {
    ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)__src);
    uint64_t v189 = v188 + 352;
    a3[1] = v188 + 352;
  }
  a3[1] = v189;
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__src);
  v191 = a4[1];
  unint64_t v190 = (unint64_t)a4[2];
  uint64_t v193 = *((void *)v191 - 5);
  uint64_t v192 = *((void *)v191 - 4);
  uint64_t v194 = *((void *)v191 - 3);
  uint64_t v195 = *((void *)v191 - 2);
  uint64_t v196 = *((void *)v191 - 1);
  if ((unint64_t)v191 >= v190)
  {
    v198 = *a4;
    unint64_t v199 = 0xCCCCCCCCCCCCCCCDLL * ((v191 - *a4) >> 3);
    unint64_t v200 = v199 + 1;
    if (v199 + 1 > 0x666666666666666) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v201 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v190 - (void)v198) >> 3);
    if (2 * v201 > v200) {
      unint64_t v200 = 2 * v201;
    }
    if (v201 >= 0x333333333333333) {
      unint64_t v202 = 0x666666666666666;
    }
    else {
      unint64_t v202 = v200;
    }
    if (v202)
    {
      v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v213, v202);
      v198 = *a4;
      v191 = a4[1];
    }
    else
    {
      v203 = 0;
    }
    v204 = &v203[40 * v199];
    *(void *)v204 = v193;
    *((void *)v204 + 1) = v195;
    v205 = &v203[40 * v202];
    *((void *)v204 + 2) = v194;
    *((void *)v204 + 3) = v192;
    *((void *)v204 + 4) = v196;
    v197 = v204 + 40;
    if (v191 != v198)
    {
      do
      {
        long long v206 = *(_OWORD *)(v191 - 40);
        long long v207 = *(_OWORD *)(v191 - 24);
        *((void *)v204 - 1) = *((void *)v191 - 1);
        *(_OWORD *)(v204 - 24) = v207;
        *(_OWORD *)(v204 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v206;
        v204 -= 40;
        v191 -= 40;
      }
      while (v191 != v198);
      v198 = *a4;
    }
    *a4 = v204;
    a4[1] = v197;
    a4[2] = v205;
    if (v198) {
      operator delete(v198);
    }
  }
  else
  {
    *(void *)v191 = v193;
    *((void *)v191 + 1) = v195;
    *((void *)v191 + 2) = v194;
    *((void *)v191 + 3) = v192;
    v197 = v191 + 40;
    *((void *)v191 + 4) = v196;
  }
  a4[1] = v197;
  v217 = &unk_26C34F988;
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(&v217);
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v227[0])
  {
    v227[1] = v227[0];
    operator delete(v227[0]);
  }
  return 1;
}

void sub_2112ED258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinPadLayerUtils::DecomposePad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char **a5, int a6)
{
  uint64_t v237 = *MEMORY[0x263EF8340];
  uint64_t v11 = *a4;
  for (uint64_t i = a4[1];
        i != v11;
  a4[1] = v11;
  int v12 = a5;
  unint64_t v13 = *a5;
  a5[1] = *a5;
  unint64_t v14 = (unint64_t)a5[2];
  if ((unint64_t)v13 >= v14)
  {
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (void)v13) >> 3);
    uint64_t v19 = 2 * v18;
    if (2 * v18 <= 1) {
      uint64_t v19 = 1;
    }
    if (v18 >= 0x333333333333333) {
      unint64_t v20 = 0x666666666666666;
    }
    else {
      unint64_t v20 = v19;
    }
    unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v20);
    long long v23 = &v21[40 * v22];
    int v12 = a5;
    long long v24 = *(_OWORD *)a1;
    long long v25 = *(_OWORD *)(a1 + 16);
    *((void *)v21 + 4) = *(void *)(a1 + 32);
    *(_OWORD *)unint64_t v21 = v24;
    *((_OWORD *)v21 + 1) = v25;
    BOOL v17 = v21 + 40;
    long long v27 = *a5;
    char v26 = a5[1];
    if (v26 != *a5)
    {
      do
      {
        long long v28 = *(_OWORD *)(v26 - 40);
        long long v29 = *(_OWORD *)(v26 - 24);
        *((void *)v21 - 1) = *((void *)v26 - 1);
        *(_OWORD *)(v21 - 24) = v29;
        *(_OWORD *)(v21 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v28;
        v21 -= 40;
        v26 -= 40;
      }
      while (v26 != v27);
      char v26 = *a5;
    }
    *a5 = v21;
    a5[1] = v17;
    a5[2] = v23;
    if (v26)
    {
      operator delete(v26);
      int v12 = a5;
    }
  }
  else
  {
    long long v15 = *(_OWORD *)a1;
    long long v16 = *(_OWORD *)(a1 + 16);
    *((void *)v13 + 4) = *(void *)(a1 + 32);
    *(_OWORD *)unint64_t v13 = v15;
    *((_OWORD *)v13 + 1) = v16;
    BOOL v17 = v13 + 40;
  }
  v12[1] = v17;
  uint64_t v30 = *(void *)(a2 + 200);
  uint64_t v31 = *(void *)(a2 + 208);
  if (v30 != v31)
  {
    uint64_t v32 = *(void *)(a2 + 200);
    do
    {
      if (*(_DWORD *)(v32 + 4) == 2) {
        ZinAssertImpl("Error: decomposition failed. Negative padding mode is not supported");
      }
      v32 += 8;
    }
    while (v32 != v31);
  }
  unint64_t v33 = *(_DWORD **)(a3 + 1464);
  unint64_t v34 = *(_DWORD **)(a3 + 1472);
  long long v35 = v33;
  if (v33 != v34)
  {
    long long v35 = *(_DWORD **)(a3 + 1464);
    while (*v35 != 9)
    {
      if (++v35 == v34)
      {
        long long v35 = *(_DWORD **)(a3 + 1472);
        break;
      }
    }
  }
  int v36 = *(unsigned __int8 *)(a3 + 1893);
  BOOL v38 = a6 == 12 || (a6 - 1) < 2;
  BOOL v39 = v35 != v34 && v38;
  if (v30 != v31)
  {
    uint64_t v40 = *(void *)(a2 + 200);
    while (*(_DWORD *)(v40 + 4) != 5)
    {
      v40 += 8;
      if (v40 == v31) {
        goto LABEL_38;
      }
    }
    if (!*(unsigned char *)(a3 + 1893)) {
      ZinAssertImpl("Error: decomposition failed. Symmetric padding mode is not supported");
    }
    return 1;
  }
LABEL_38:
  if (v33 != v34)
  {
    while (*v33 != 3)
    {
      if (++v33 == v34)
      {
        unint64_t v33 = *(_DWORD **)(a3 + 1472);
        break;
      }
    }
  }
  if (v33 == v34)
  {
    if (v30 != v31)
    {
      uint64_t v44 = *(void *)(a2 + 200);
      while (*(_DWORD *)(v44 + 4) != 3)
      {
        v44 += 8;
        if (v44 == v31) {
          goto LABEL_43;
        }
      }
      if (!*(unsigned char *)(a3 + 1893)) {
        ZinAssertImpl("Error: decomposition failed. Replication padding mode is not supported");
      }
      return 1;
    }
    int v41 = (_WORD *)(a2 + 224);
  }
  else
  {
LABEL_43:
    int v41 = (_WORD *)(a2 + 224);
    if (v30 != v31)
    {
      uint64_t v42 = *(void *)(a2 + 200);
      while (*(_DWORD *)(v42 + 4) != 7 || (*v41 & 0x7FFF) == 0)
      {
        v42 += 8;
        if (v42 == v31) {
          goto LABEL_60;
        }
      }
      if (!v39)
      {
        if (!*(unsigned char *)(a3 + 1893)) {
          ZinAssertImpl("Error: decomposition failed. Do not support background padding mode with non-zero value since constant padding mode is not supported");
        }
        return 1;
      }
LABEL_60:
      int v45 = *(_DWORD *)(v30 + 4);
      uint64_t v46 = *(void *)(a2 + 200);
      while (*(_DWORD *)(v46 + 4) == v45)
      {
        v46 += 8;
        if (v46 == v31) {
          goto LABEL_68;
        }
      }
      if (!*(unsigned char *)(a3 + 1893)) {
        ZinAssertImpl("Error: decomposition failed. Do not support multiple padding modes at different axes");
      }
      return 1;
    }
  }
  int v45 = *(_DWORD *)(v30 + 4);
LABEL_68:
  if (v45 == 7)
  {
    if ((*v41 & 0x7FFF) != 0) {
      int v45 = 9;
    }
    else {
      int v45 = 1;
    }
  }
  if (a6 == 3)
  {
    int v47 = *(_DWORD *)(a3 + 136);
  }
  else
  {
    int v47 = GetMaxLogicalKernelWidthForLargeKernelMode(a3, a6) - 1;
    uint64_t v30 = *(void *)(a2 + 200);
    uint64_t v31 = *(void *)(a2 + 208);
  }
  int v48 = *(_DWORD *)(a3 + 144);
  if (v47 >= v48) {
    int v49 = *(_DWORD *)(a3 + 144);
  }
  else {
    int v49 = v47;
  }
  if (*(_DWORD *)(a3 + 112) - 1 >= *(_DWORD *)(a3 + 152)) {
    int v50 = *(_DWORD *)(a3 + 152);
  }
  else {
    int v50 = *(_DWORD *)(a3 + 112) - 1;
  }
  int v51 = *(_DWORD *)(a3 + 160);
  if (*(_DWORD *)(a3 + 128) - 1 < v51) {
    int v51 = *(_DWORD *)(a3 + 128) - 1;
  }
  while (v30 != v31)
  {
    if (*(_DWORD *)(v30 + 4) != 6)
    {
      int v186 = v49;
      int v177 = v51;
      int v181 = v45;
      std::string v183 = (_DWORD *)a3;
      int v184 = a6;
      unint64_t v180 = a4;
      uint64_t v53 = operator new(0x18uLL);
      unint64_t v169 = (char *)(v53 + 3);
      *(_OWORD *)uint64_t v53 = *(_OWORD *)(a2 + 156);
      v53[2] = *(void *)(a2 + 172);
      int v54 = *(_DWORD *)(a2 + 156);
      int v56 = *(_DWORD *)(a2 + 164);
      int v55 = *(_DWORD *)(a2 + 168);
      int v189 = *(_DWORD *)(a2 + 160);
      BOOL v57 = v54 == v189 && v56 == v55;
      uint64_t v182 = a2;
      if (v57)
      {
        int v55 = *(_DWORD *)(a2 + 164);
        if (*(_DWORD *)(a2 + 172) == *(_DWORD *)(a2 + 176)) {
          goto LABEL_207;
        }
      }
      int v174 = v36;
      long long v167 = v53;
      int v58 = v189 + v54;
      int v59 = v55 + v56;
      uint64_t v60 = a2;
      int v61 = *(_DWORD *)(a2 + 172);
      int v62 = *(_DWORD *)(v60 + 176);
      int v63 = v62 + v61;
      BOOL v64 = v189 + v54 <= v186 && v59 <= v50;
      int v65 = v177;
      if (v64 && v63 <= v177) {
        goto LABEL_207;
      }
      uint64_t v229 = 0;
      long long __p = 0;
      v230[0] = 0;
      if (v184 == 3)
      {
        int v67 = v50;
        int v68 = v183[34];
      }
      else
      {
        int v68 = GetMaxLogicalKernelWidthForLargeKernelMode((uint64_t)v183, v184) - 1;
        int v48 = v183[36];
        int v69 = v183[32];
        int v65 = v183[40];
        if (v183[28] - 1 >= v183[38]) {
          int v67 = v183[38];
        }
        else {
          int v67 = v183[28] - 1;
        }
        if (v69 - 1 < v65) {
          int v65 = v69 - 1;
        }
      }
      int v70 = v68 >= v48 ? v48 : v68;
      int v71 = v189;
      int v178 = v65;
      int v176 = v70;
      int v175 = v67;
      while (v54 != v71 || v58 > v70 || v56 != v55 || v59 > v67 || v61 != v62 || v63 > v65)
      {
        int v190 = v71;
        if (v54 >= v71)
        {
          if (v71 >= v70) {
            int v73 = v70;
          }
          else {
            int v73 = v71;
          }
          if (((v70 - v73) & ~((v70 - v73) >> 31)) >= v54) {
            int v72 = v54;
          }
          else {
            int v72 = (v70 - v73) & ~((v70 - v73) >> 31);
          }
        }
        else
        {
          if (v54 >= v70) {
            int v72 = v70;
          }
          else {
            int v72 = v54;
          }
          if (((v70 - v72) & ~((v70 - v72) >> 31)) >= v71) {
            int v73 = v71;
          }
          else {
            int v73 = (v70 - v72) & ~((v70 - v72) >> 31);
          }
        }
        if (v55 >= v67) {
          int v74 = v67;
        }
        else {
          int v74 = v55;
        }
        int v75 = (v67 - v74) & ~((v67 - v74) >> 31);
        if (v75 >= v56) {
          int v75 = v56;
        }
        if (v56 >= v67) {
          int v76 = v67;
        }
        else {
          int v76 = v56;
        }
        int v77 = (v67 - v76) & ~((v67 - v76) >> 31);
        if (v77 >= v55) {
          int v77 = v55;
        }
        if (v56 < v55) {
          int v78 = v76;
        }
        else {
          int v78 = v75;
        }
        if (v56 < v55) {
          int v79 = v77;
        }
        else {
          int v79 = v74;
        }
        if (v62 >= v65) {
          int v80 = v65;
        }
        else {
          int v80 = v62;
        }
        int v81 = (v65 - v80) & ~((v65 - v80) >> 31);
        if (v81 >= v61) {
          int v81 = v61;
        }
        if (v61 >= v65) {
          int v82 = v65;
        }
        else {
          int v82 = v61;
        }
        int v83 = (v65 - v82) & ~((v65 - v82) >> 31);
        if (v83 >= v62) {
          int v83 = v62;
        }
        if (v61 < v62) {
          int v84 = v82;
        }
        else {
          int v84 = v81;
        }
        if (v61 < v62) {
          int v85 = v83;
        }
        else {
          int v85 = v80;
        }
        int v86 = v229;
        if ((unint64_t)v229 >= v230[0])
        {
          int v179 = v84;
          int v187 = v85;
          uint64_t v88 = (int *)__p;
          unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * (((char *)v229 - (unsigned char *)__p) >> 3);
          unint64_t v90 = v89 + 1;
          if (v89 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v230[0] - (void)__p) >> 3) > v90) {
            unint64_t v90 = 0x5555555555555556 * ((uint64_t)(v230[0] - (void)__p) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v230[0] - (void)__p) >> 3) >= 0x555555555555555) {
            unint64_t v91 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v91 = v90;
          }
          if (v91)
          {
            std::string v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v230, v91);
            int v86 = v229;
            uint64_t v88 = (int *)__p;
          }
          else
          {
            std::string v92 = 0;
          }
          std::string v93 = (int *)&v92[8 * (((char *)v229 - (unsigned char *)__p) >> 3)];
          *std::string v93 = v72;
          v93[1] = v73;
          v93[2] = v78;
          v93[3] = v79;
          v93[4] = v179;
          v93[5] = v187;
          uint64_t v94 = &v92[24 * v89];
          if (v86 != v88)
          {
            do
            {
              long long v95 = *(_OWORD *)(v86 - 6);
              *((void *)v94 - 1) = *((void *)v86 - 1);
              *(_OWORD *)(v94 - 24) = v95;
              v94 -= 24;
              v86 -= 6;
            }
            while (v86 != v88);
            uint64_t v88 = (int *)__p;
          }
          uint64_t v87 = v93 + 6;
          long long __p = v94;
          uint64_t v229 = v93 + 6;
          v230[0] = &v92[24 * v91];
          if (v88) {
            operator delete(v88);
          }
          int v65 = v178;
          int v70 = v176;
          int v67 = v175;
          int v85 = v187;
          int v84 = v179;
        }
        else
        {
          *uint64_t v229 = v72;
          v86[1] = v73;
          v86[2] = v78;
          v86[3] = v79;
          uint64_t v87 = v86 + 6;
          v86[4] = v84;
          v86[5] = v85;
        }
        v54 -= v72;
        uint64_t v229 = v87;
        v56 -= v78;
        v55 -= v79;
        v61 -= v84;
        int v71 = v190 - v73;
        v62 -= v85;
        int v58 = v190 - v73 + v54;
        int v59 = v55 + v56;
        int v63 = v62 + v61;
      }
      uint64_t v96 = v229;
      if ((unint64_t)v229 >= v230[0])
      {
        unint64_t v100 = (int *)__p;
        unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * (((char *)v229 - (unsigned char *)__p) >> 3) + 1;
        int v99 = v174;
        if (v101 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v230[0] - (void)__p) >> 3) > v101) {
          unint64_t v101 = 0x5555555555555556 * ((uint64_t)(v230[0] - (void)__p) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v230[0] - (void)__p) >> 3) >= 0x555555555555555) {
          unint64_t v102 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v102 = v101;
        }
        if (v102)
        {
          uint64_t v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v230, v102);
          uint64_t v96 = v229;
          unint64_t v100 = (int *)__p;
        }
        else
        {
          uint64_t v103 = 0;
        }
        unint64_t v104 = (int *)&v103[8 * (((char *)v229 - (unsigned char *)__p) >> 3)];
        *unint64_t v104 = v71;
        v104[1] = v71;
        v104[2] = v55;
        void v104[3] = v55;
        unint64_t v105 = &v103[24 * v102];
        v104[4] = v62;
        v104[5] = v62;
        uint64_t v97 = v104 + 6;
        if (v96 == v100)
        {
          uint64_t v98 = v167;
        }
        else
        {
          uint64_t v98 = v167;
          do
          {
            long long v106 = *(_OWORD *)(v96 - 6);
            *((void *)v104 - 1) = *((void *)v96 - 1);
            *(_OWORD *)(v104 - 6) = v106;
            v104 -= 6;
            v96 -= 6;
          }
          while (v96 != v100);
          unint64_t v100 = (int *)__p;
        }
        long long __p = v104;
        uint64_t v229 = v97;
        v230[0] = v105;
        if (v100) {
          operator delete(v100);
        }
      }
      else
      {
        *uint64_t v229 = v71;
        v96[1] = v71;
        v96[2] = v55;
        v96[3] = v55;
        uint64_t v97 = v96 + 6;
        v96[4] = v62;
        v96[5] = v62;
        uint64_t v98 = v167;
        int v99 = v174;
      }
      uint64_t v229 = v97;
      operator delete(v98);
      uint64_t v53 = __p;
      unint64_t v169 = (char *)v97;
      if (v97 != __p)
      {
LABEL_207:
        long long v107 = *(_OWORD *)(a1 + 16);
        long long v225 = *(_OWORD *)a1;
        long long v226 = v107;
        uint64_t v227 = *(void *)(a1 + 32);
        int v168 = v53;
        do
        {
          int v108 = *((_DWORD *)v53 + 1);
          int v110 = *((_DWORD *)v53 + 2);
          int v109 = *((_DWORD *)v53 + 3);
          int v112 = *((_DWORD *)v53 + 4);
          int v111 = *((_DWORD *)v53 + 5);
          uint64_t v170 = v53;
          int v113 = v108 + *(_DWORD *)v53;
          int v114 = v109 + v110;
          int v115 = v111 + v112;
          int v172 = v110;
          int v173 = *(_DWORD *)v53;
          BOOL v116 = *(_DWORD *)v53 == v108 && v110 == v109;
          int v171 = *((_DWORD *)v53 + 4);
          char v118 = !v116 || v112 != v111;
          char v188 = v118;
          if (v113) {
            BOOL v119 = 0;
          }
          else {
            BOOL v119 = v114 == 0;
          }
          if (!v119 || v115 != 0)
          {
            int v121 = v111 + v112;
            int v122 = v109 + v110;
            int v123 = v113;
            do
            {
              if (v184 == 3) {
                int v124 = v183[34];
              }
              else {
                int v124 = GetMaxLogicalKernelWidthForLargeKernelMode((uint64_t)v183, v184) - 1;
              }
              if (v124 >= v183[36]) {
                int v124 = v183[36];
              }
              int v125 = v183[28] - 1;
              if (v125 >= v183[38]) {
                int v125 = v183[38];
              }
              int v126 = v183[32] - 1;
              if (v126 >= v183[40]) {
                int v126 = v183[40];
              }
              int v128 = v123 > v124 || v113 > v124;
              int v129 = v124 & ~v128;
              v196[1] = 0;
              v196[2] = 0;
              int v131 = v122 > v125 || v114 > v125;
              int v197 = 0;
              int v132 = v125 & ~v131;
              v196[3] = 0;
              int v134 = v121 > v126 || v115 > v126;
              uint64_t v199 = 0;
              uint64_t v200 = 0;
              int v135 = v126 & ~v134;
              uint64_t v198 = 0;
              int v204 = -1;
              uint64_t v205 = -1;
              int v206 = -1;
              uint64_t v207 = -1;
              long long v208 = 0u;
              long long v209 = 0u;
              long long v210 = 0u;
              uint64_t v211 = 0;
              int v212 = 1;
              char v213 = 0;
              __int16 v214 = 0;
              int v215 = -1;
              uint64_t v216 = -1;
              int v217 = -1;
              uint64_t v218 = -1;
              uint64_t v219 = 0x3F80000000000006;
              int v220 = 0;
              v196[0] = &unk_26C34A9B8;
              BYTE4(v221) = 0;
              LODWORD(v221) = 2;
              uint64_t v201 = *(void *)(v182 + 64);
              *(void *)&long long v136 = 0x100000001;
              *((void *)&v136 + 1) = 0x100000001;
              *(_OWORD *)&v223[8] = v136;
              *(void *)&v223[24] = 0x100000001;
              if (v129 >= v123) {
                int v137 = v123;
              }
              else {
                int v137 = v129;
              }
              if (v129 >= v113) {
                int v129 = v113;
              }
              if (v132 >= v122) {
                int v138 = v122;
              }
              else {
                int v138 = v132;
              }
              if (v132 >= v114) {
                int v132 = v114;
              }
              if (v135 >= v121) {
                int v139 = v121;
              }
              else {
                int v139 = v135;
              }
              if (v135 >= v115) {
                int v135 = v115;
              }
              *(_DWORD *)v224 = v137;
              *(_DWORD *)&v224[4] = v129;
              *(_DWORD *)&v224[8] = v138;
              *(_DWORD *)&v224[12] = v132;
              *(_DWORD *)&v224[16] = v139;
              *(_DWORD *)&v224[20] = v135;
              uint64_t v203 = *(void *)"";
              uint64_t v202 = *(void *)(a1 + 8);
              *((void *)&v221 + 1) = v202;
              *(void *)&long long v222 = v137 + 1;
              *((void *)&v222 + 1) = v138 + 1;
              *(void *)v223 = v139 + 1;
              *(_DWORD *)&v224[24] = v181;
              long long __p = (void *)0x100000001;
              LODWORD(v229) = 1;
              ZinGetOutputTensorDimension((uint64_t)&v225, &v222, (unsigned int *)&v223[20], (unsigned int *)&v223[20], (int *)v224, v202, (int *)&__p, (uint64_t)&v193);
              unint64_t v140 = a5;
              if (v188)
              {
                unint64_t v141 = (*(_DWORD *)v224 - v173) & ~((*(_DWORD *)v224 - v173) >> 31) | ((unint64_t)((*(_DWORD *)&v224[8] - v172) & ~((*(_DWORD *)&v224[8] - v172) >> 31)) << 32);
                LODWORD(v142) = *(_DWORD *)&v224[16] - v171;
              }
              else
              {
                unint64_t v141 = ((*((void *)&v222 + 1) + (v222 < 0)) << 31) & 0xFFFFFFFF00000000 | ((uint64_t)v222 / 2);
                unint64_t v142 = (*(void *)v223 + (unint64_t)(*(uint64_t *)v223 < 0)) >> 1;
              }
              int v191 = v142;
              int v143 = a5[1];
              uint64_t v144 = a5[2];
              if (v143 >= v144)
              {
                unint64_t v148 = 0xCCCCCCCCCCCCCCCDLL * ((v143 - *a5) >> 3);
                unint64_t v149 = v148 + 1;
                if (v148 + 1 > 0x666666666666666) {
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v150 = 0xCCCCCCCCCCCCCCCDLL * ((v144 - *a5) >> 3);
                if (2 * v150 > v149) {
                  unint64_t v149 = 2 * v150;
                }
                if (v150 >= 0x333333333333333) {
                  unint64_t v151 = 0x666666666666666;
                }
                else {
                  unint64_t v151 = v149;
                }
                if (v151) {
                  uint64_t v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v151);
                }
                else {
                  uint64_t v152 = 0;
                }
                unint64_t v153 = &v152[40 * v148];
                long long v154 = v193;
                long long v155 = v194;
                *((void *)v153 + 4) = v195;
                *(_OWORD *)unint64_t v153 = v154;
                *((_OWORD *)v153 + 1) = v155;
                std::string::size_type v157 = *a5;
                uint64_t v156 = a5[1];
                unint64_t v158 = v153;
                if (v156 == *a5)
                {
                  v161 = a5;
                }
                else
                {
                  do
                  {
                    long long v159 = *(_OWORD *)(v156 - 40);
                    long long v160 = *(_OWORD *)(v156 - 24);
                    *((void *)v158 - 1) = *((void *)v156 - 1);
                    *(_OWORD *)(v158 - 24) = v160;
                    *(_OWORD *)(v158 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v159;
                    v158 -= 40;
                    v156 -= 40;
                  }
                  while (v156 != v157);
                  v161 = a5;
                  uint64_t v156 = *a5;
                }
                long long v147 = v153 + 40;
                char *v161 = v158;
                v161[1] = v153 + 40;
                v161[2] = &v152[40 * v151];
                if (v156)
                {
                  operator delete(v156);
                  unint64_t v140 = a5;
                }
                else
                {
                  unint64_t v140 = v161;
                }
              }
              else
              {
                long long v145 = v193;
                long long v146 = v194;
                *((void *)v143 + 4) = v195;
                *(_OWORD *)int v143 = v145;
                *((_OWORD *)v143 + 1) = v146;
                long long v147 = v143 + 40;
              }
              v140[1] = v147;
              long long v236 = xmmword_211EDE800;
              ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&__p, (const ZinIrKernelUnitInfo *)v196);
              long long v233 = *(_OWORD *)v223;
              long long v234 = *(_OWORD *)&v223[16];
              v235[0] = *(_OWORD *)v224;
              *(_OWORD *)((char *)v235 + 12) = *(_OWORD *)&v224[12];
              long long v231 = v221;
              long long v232 = v222;
              long long __p = &unk_26C34A9B8;
              *(void *)&long long v236 = v141;
              DWORD2(v236) = v191;
              unint64_t v162 = v180[1];
              if (v162 >= v180[2])
              {
                uint64_t v163 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(v180, (const ZinPadLayerUtils::PadDecomposedDesc *)&__p);
              }
              else
              {
                ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)v180[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&__p);
                uint64_t v163 = v162 + 352;
                v180[1] = v162 + 352;
              }
              v180[1] = v163;
              ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&__p);
              v123 -= *(_DWORD *)v224;
              v113 -= *(_DWORD *)&v224[4];
              v122 -= *(_DWORD *)&v224[8];
              v114 -= *(_DWORD *)&v224[12];
              v121 -= *(_DWORD *)&v224[16];
              int v164 = *(_DWORD *)&v224[20];
              if (v123 | v113 | v122 | v114 | v121) {
                BOOL v165 = 0;
              }
              else {
                BOOL v165 = v115 == *(_DWORD *)&v224[20];
              }
              char v166 = !v165;
              long long v225 = v193;
              long long v226 = v194;
              uint64_t v227 = v195;
              v196[0] = &unk_26C34CC70;
              if ((void)v210)
              {
                *((void *)&v210 + 1) = v210;
                operator delete((void *)v210);
              }
              if (*((void *)&v208 + 1))
              {
                *(void *)&long long v209 = *((void *)&v208 + 1);
                operator delete(*((void **)&v208 + 1));
              }
              v115 -= v164;
              ZinIrUnitInfo::~ZinIrUnitInfo(v196);
            }
            while ((v166 & 1) != 0);
          }
          uint64_t v53 = v170 + 3;
        }
        while (v170 + 3 != (void *)v169);
        uint64_t v53 = v168;
      }
      else if (!v99)
      {
        ZinAssertImpl("Error: pad decomposition failed for large asymmetric pad");
      }
      if (v53) {
        operator delete(v53);
      }
      return 1;
    }
    v30 += 8;
  }
  if (v36) {
    return 1;
  }

  return ZinPadLayerUtils::DecomposeReflectivePad(a1, (_DWORD *)a2, a4, a5, a6, a3);
}

void sub_2112EE2E4(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void ZinPadLayerUtils::ApplyPadTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = **(void **)(a2 + 88);
  uint64_t v7 = *(void *)(*(void *)(a2 + 120) - 8);
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else
  {
    __n128 v8 = *(__n128 *)(v7 + 24);
    *(__n128 *)&v38.__r_.__value_.__l.__data_ = v8;
    v38.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
  }
  int U32BackgroundValue = ZinPadLayerUtils::GetU32BackgroundValue(*(void *)(a2 + 64) + 16, v8);
  if (*(void *)a3 != *(void *)(a3 + 8))
  {
    int v10 = U32BackgroundValue;
    ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)v40, *(const ZinPadLayerUtils::PadDecomposedDesc **)a3);
    if (v41[3] == 1)
    {
      if (*(char *)(a2 + 47) >= 0) {
        size_t v11 = *(unsigned __int8 *)(a2 + 47);
      }
      else {
        size_t v11 = *(void *)(a2 + 32);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v35, v11 + 2);
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v12 = &v35;
      }
      else {
        int v12 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      if (v11)
      {
        if (*(char *)(a2 + 47) >= 0) {
          unint64_t v13 = (const void *)(a2 + 24);
        }
        else {
          unint64_t v13 = *(const void **)(a2 + 24);
        }
        memmove(v12, v13, v11);
      }
      strcpy((char *)v12 + v11, "__");
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v14 = &v38;
      }
      else {
        unint64_t v14 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v38.__r_.__value_.__l.__size_;
      }
      long long v16 = std::string::append(&v35, (const std::string::value_type *)v14, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v32, "padtoconv");
      unint64_t v18 = std::string::append(&v32, "_xfm", 4uLL);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      int64_t v34 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)unint64_t v33 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (v34 >= 0) {
        unint64_t v20 = v33;
      }
      else {
        unint64_t v20 = (void **)v33[0];
      }
      if (v34 >= 0) {
        std::string::size_type v21 = HIBYTE(v34);
      }
      else {
        std::string::size_type v21 = (std::string::size_type)v33[1];
      }
      uint64_t v22 = std::string::append(&v39, (const std::string::value_type *)v20, v21);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v31, 0);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v24 = &v31;
      }
      else {
        long long v24 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v25 = v31.__r_.__value_.__l.__size_;
      }
      char v26 = std::string::append(&v36, (const std::string::value_type *)v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      std::string::size_type v30 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(&v37, __p);
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34) < 0) {
        operator delete(v33[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      ZinPadLayerUtils::CreateChannelWiseConv(v6, (uint64_t)v40, a4, v41, v10, (uint64_t)&v37);
    }
    ZinAssertImpl("Error: invalid pad decomposition results. The decomposed unit is not convolution unit");
  }
  ZinAssertImpl("Error: failed to create channel-wise conv");
}

void sub_2112EE860(_Unwind_Exception *a1)
{
}

uint64_t ZinPadLayerUtils::GetU32BackgroundValue(uint64_t a1, __n128 a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  switch(v2)
  {
    case 12:
      a2.n128_u16[0] = *(_WORD *)(a1 + 224);
      return ZinF16ToE4M3(1, 0, a2);
    case 2:
      return (int)*(short float *)(a1 + 224);
    case 1:
      return (int)*(short float *)(a1 + 224);
    default:
      return *(unsigned __int16 *)(a1 + 224);
  }
}

void ZinPadLayerUtils::CreateChannelWiseConv(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5, uint64_t a6)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  uint64_t v43 = 0x100000001;
  long long v37 = *(_OWORD *)(a2 + 256);
  uint64_t v38 = *(void *)(a2 + 272);
  long long v41 = *(_OWORD *)(a2 + 304);
  uint64_t v42 = *(void *)(a2 + 320);
  *(void *)&long long v12 = 0x100000001;
  *((void *)&v12 + 1) = 0x100000001;
  long long v39 = v12;
  uint64_t v40 = 0x100000001;
  char v47 = *(unsigned char *)(a2 + 244);
  char v48 = 0;
  uint64_t v46 = *(void *)(a2 + 248);
  int v13 = *(_DWORD *)(a2 + 328);
  int v44 = 1;
  int v45 = v13;
  int v49 = a5;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a6 + 16))(&v26, a6, 2);
  unint64_t v14 = std::string::append(&v26, "_", 1uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v32, "cwise_conv");
  long long v16 = std::string::append(&v32, "_xfm", 4uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  int64_t v34 = v16->__r_.__value_.__r.__words[2];
  long long v33 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (v34 >= 0) {
    unint64_t v18 = (const std::string::value_type *)&v33;
  }
  else {
    unint64_t v18 = (const std::string::value_type *)v33;
  }
  if (v34 >= 0) {
    std::string::size_type v19 = HIBYTE(v34);
  }
  else {
    std::string::size_type v19 = *((void *)&v33 + 1);
  }
  unint64_t v20 = std::string::append(&v27, v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  uint64_t v22 = std::string::append(&v29, "_kernel", 7uLL);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  std::string::size_type v36 = v22->__r_.__value_.__r.__words[2];
  long long v35 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  *(int64x2_t *)&v29.__r_.__value_.__l.__data_ = vdupq_n_s64(1uLL);
  uint64_t v24 = *(void *)(a2 + 256);
  v29.__r_.__value_.__r.__words[2] = *(void *)(a2 + 264);
  uint64_t v30 = v24;
  uint64_t v31 = *(void *)(a2 + 272);
  LODWORD(v27.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::vector(&v33, v24 * v29.__r_.__value_.__r.__words[2] * v31, &v27);
  *(_DWORD *)(v33 + 4 * (a4[2] + (*a4 + v30 * a4[1]) * v31)) = 1065353216;
  ZinIrKernel::CreateDynamicKernel((float **)&v33, *(unsigned int *)(a2 + 84), &v29, 2uLL, a3, 1, &v28);
  uint64_t v25 = *(void *)(v11 + 56);
  v26.__r_.__value_.__r.__words[0] = 0x100000001;
  LODWORD(v26.__r_.__value_.__r.__words[1]) = 1;
  ZinGetOutputTensorDimension(v11 + 48, &v37, (unsigned int *)&v39, (unsigned int *)&v39 + 3, (int *)&v41, v25, (int *)&v26, (uint64_t)&v27);
  operator new();
}

void sub_2112EF040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,ZinIrKernel *a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  MEMORY[0x21667D3C0](v67, 0x10B3C4024B96488);
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a55, 0);
  int v70 = *(void **)(v68 - 256);
  if (v70)
  {
    *(void *)(v68 - 248) = v70;
    operator delete(v70);
  }
  if (*(char *)(v68 - 201) < 0) {
    operator delete(*(void **)(v68 - 224));
  }
  _Unwind_Resume(a1);
}

void ZinPadLayerUtils::GetConvChain(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  std::vector<ZinIrOpLayer *>::reserve(v25, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 5));
  uint64_t v8 = **(void **)(a1 + 88);
  int U32BackgroundValue = ZinPadLayerUtils::GetU32BackgroundValue(*(void *)(a1 + 64) + 16, v9);
  uint64_t v11 = *a2;
  if (*a2 != a2[1])
  {
    int v12 = U32BackgroundValue;
    if (*(char *)(v8 + 47) >= 0) {
      size_t v13 = *(unsigned __int8 *)(v8 + 47);
    }
    else {
      size_t v13 = *(void *)(v8 + 32);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v21, v13 + 2);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v14 = &v21;
    }
    else {
      unint64_t v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      if (*(char *)(v8 + 47) >= 0) {
        long long v15 = (const void *)(v8 + 24);
      }
      else {
        long long v15 = *(const void **)(v8 + 24);
      }
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, "__");
    int v16 = *(char *)(a1 + 47);
    if (v16 >= 0) {
      long long v17 = (const std::string::value_type *)(a1 + 24);
    }
    else {
      long long v17 = *(const std::string::value_type **)(a1 + 24);
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      std::string::size_type v18 = *(void *)(a1 + 32);
    }
    std::string::size_type v19 = std::string::append(&v21, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v24, __p);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    ZinPadLayerUtils::CreateChannelWiseConv(v8, v11, a3, (unsigned int *)(v11 + 336), v12, (uint64_t)&v24);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_2112EF53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t ZinPadLayerUtils::FuseConvWithConsumer@<D0>(ZinPadLayerUtils *this@<X0>, const ZinIrPadding *a2@<X1>, uint64_t a3@<X8>)
{
  *(int32x4_t *)a3 = vsraq_n_s32(*(int32x4_t *)a2, (int32x4_t)vsraq_n_u32(*(uint32x4_t *)this, *(uint32x4_t *)this, 0x1FuLL), 1uLL);
  int32x2_t result = (int32x2_t)vsra_n_u32(*(uint32x2_t *)((char *)this + 16), *(uint32x2_t *)((char *)this + 16), 0x1FuLL);
  *(int32x2_t *)(a3 + 16) = vsra_n_s32(*(int32x2_t *)((char *)a2 + 16), result, 1uLL);
  return result;
}

int32x2_t ZinPadLayerUtils::FusePadWithConsumer@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int *a4@<X3>, uint64_t a5@<X8>, int32x4_t a6@<Q0>)
{
  if (a3)
  {
    if (*a4 >= 2 && *(void *)a2
      || a4[1] >= 2 && *(void *)(a2 + 8)
      || (signed int v6 = a4[2], a6.i64[0] = *(void *)a4, v6 >= 2) && *(void *)(a2 + 16))
    {
      ZinAssertImpl("Unsupported pad to deconv fusion");
    }
  }
  else
  {
    a6.i64[0] = 0x100000001;
    signed int v6 = 1;
  }
  *(int32x4_t *)a5 = vmlaq_s32(*(int32x4_t *)a2, *(int32x4_t *)(a1 + 156), vzip1q_s32(a6, a6));
  int32x2_t result = *(int32x2_t *)(a1 + 172);
  *(int32x2_t *)(a5 + 16) = vmla_s32(*(int32x2_t *)(a2 + 16), result, vdup_n_s32(v6));
  return result;
}

void ZinPadLayerUtils::ApplyReflectivePadTransform(uint64_t a1, uint64_t a2, const ZinPadLayerUtils::PadDecomposedDesc **a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 64);
  if (*(_DWORD *)(v4 + 8) == 58)
  {
    for (uint64_t i = *(void *)(v4 + 216); ; i += 8)
    {
      if (i == *(void *)(v4 + 224))
      {
        uint64_t v8 = *(void *)(*(void *)(a2 + 96) - 8);
        uint64_t v9 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 32))(v8, 0, 0);
        int v21 = *(_DWORD *)(v4 + 180);
        int v20 = *(_DWORD *)(v4 + 184);
        std::string::size_type v23 = (ZinIrTensor *)v9;
        int v22 = *(_DWORD *)(v9 + 88);
        uint64_t v25 = *(void *)(a2 + 16);
        if (*(char *)(a2 + 47) >= 0) {
          size_t v10 = *(unsigned __int8 *)(a2 + 47);
        }
        else {
          size_t v10 = *(void *)(a2 + 32);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 15);
        if (v39 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        if (v10)
        {
          if (*(char *)(a2 + 47) >= 0) {
            int v12 = (const void *)(a2 + 24);
          }
          else {
            int v12 = *(const void **)(a2 + 24);
          }
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, "_reflectivepad_");
        ZinObjectNameFactory::ZinObjectNameFactory(&v31, __p);
        int v13 = v21;
        if (v39 < 0)
        {
          operator delete(__p[0]);
          int v13 = v21;
        }
        uint64_t v19 = a4;
        memset(&v30[3], 0, 48);
        if (v13 >= 1)
        {
          ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p, *a3);
          if (v43 == 17) {
            ZinBuilder::CreateViewFromOffset(v25, (uint64_t)&v31, (uint64_t)v23, v42, v40, v41);
          }
          ZinAssertImpl("Error: invalid decomposition results for reflective padding. An input view unit is expected");
        }
        if (v20 >= 1)
        {
          ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p, *a3);
          if (v43 == 17) {
            ZinBuilder::CreateViewFromOffset(v25, (uint64_t)&v31, (uint64_t)v23, v42, v40, v41);
          }
          ZinAssertImpl("Error: invalid decomposition results for reflective padding. An input view unit is expected");
        }
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p, *a3);
        if (v43 == 21)
        {
          uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 32))(v8, 0, 0);
          long long v15 = *(_OWORD *)(v14 + 48);
          long long v36 = *(_OWORD *)(v14 + 64);
          *(_OWORD *)long long v35 = v15;
          uint64_t v37 = *(void *)(v14 + 80);
          uint64_t v16 = v36;
          uint64_t v17 = *((void *)v23 + 8);
          if ((void)v36 == v20 + (uint64_t)v21 + v17)
          {
            uint64_t v18 = *((void *)v23 + 7);
            v30[0] = 0;
            if (!ZinTensorFormatGetSizeInBytes(v22, v30))
            {
              memset(v29, 0, sizeof(v29));
              uint64_t v26 = 0;
              uint64_t v27 = 0;
              uint64_t v28 = 0;
              if ((float)(ceilf((float)(v30[0] * v18) / (float)*(unint64_t *)(v19 + 528))
                         * (float)*(unint64_t *)(v19 + 528)) >= (float)(ceilf((float)(v30[0] * v16)/ (float)*(unint64_t *)(v19 + 528))* (float)*(unint64_t *)(v19 + 528)))
              {
                uint64_t v33 = 0x400000003;
                *(_OWORD *)__src = xmmword_211F04A40;
                std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v29, (char *)__src, (uint64_t)v34, 3uLL);
                *(_OWORD *)__src = xmmword_211F04A58;
                uint64_t v33 = 0x300000004;
                std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v26, (char *)__src, (uint64_t)v34, 3uLL);
              }
              else
              {
                *(_OWORD *)__src = xmmword_211ED4940;
                std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v26, (char *)__src, (uint64_t)&v33, 2uLL);
                std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v29, (char *)v26, v27, (v27 - (uint64_t)v26) >> 3);
              }
              ZinBuilder::CreateTranspose();
            }
            ZinAssertImpl("Error: Cannot retrieve tensor format during decompose reflecting pad lowering.");
          }
          ZinAssertImpl("Error: invalid decomposition results for reflective padding. The padded height = %zd is not equal to the expected height = %zd with top padding = %d and bot padding = %d", v17, (size_t)v36, v21, v20);
        }
        ZinAssertImpl("Error: invalid decomposition results for reflective padding. A transpose unit is expected");
      }
      if (*(_DWORD *)(i + 4) != 6) {
        break;
      }
    }
  }
  ZinAssertImpl("Error: reflective pad lowering failed. The layer is not a pad layer with reflective padding");
}

void sub_2112F1050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a67) {
    operator delete(a67);
  }
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&STACK[0x4C0]);
  uint64_t v68 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v68;
    operator delete(v68);
  }
  int v69 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v69;
    operator delete(v69);
  }
  STACK[0x230] = (unint64_t)&unk_26C34DA98;
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  _Unwind_Resume(a1);
}

_DWORD *ZinPadLayerUtils::GetPaddingInfoAtDim(int a1, uint64_t a2)
{
  for (int32x2_t result = *(_DWORD **)(a2 + 200); result != *(_DWORD **)(a2 + 208); result += 2)
  {
    if (*result == a1) {
      return result;
    }
  }
  return 0;
}

void ZinPadLayerUtils::LowerChannelPadding(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  signed int v6 = *(_DWORD **)(a5 + 200);
  long long v5 = *(_DWORD **)(a5 + 208);
  if (v6 != v5)
  {
    while (*v6 != 2)
    {
      v6 += 2;
      if (v6 == v5) {
        goto LABEL_4;
      }
    }
    if (*(int *)(a5 + 180) > 0 || *(_DWORD *)(a5 + 184) > 0)
    {
      uint64_t v10 = **(void **)(a2 + 88);
      if (v10)
      {
        if (*(char *)(a2 + 47) >= 0) {
          size_t v11 = *(unsigned __int8 *)(a2 + 47);
        }
        else {
          size_t v11 = *(void *)(a2 + 32);
        }
        int v12 = __p;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 17);
        if (v38 < 0) {
          int v12 = (void **)__p[0];
        }
        if (v11)
        {
          if (*(char *)(a2 + 47) >= 0) {
            int v13 = (const void *)(a2 + 24);
          }
          else {
            int v13 = *(const void **)(a2 + 24);
          }
          memmove(v12, v13, v11);
        }
        strcpy((char *)v12 + v11, "_channel_padding_");
        __n128 v14 = ZinObjectNameFactory::ZinObjectNameFactory(&v55, __p);
        if (SHIBYTE(v38) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v33 = *(void *)(a2 + 16);
        (*(uint64_t (**)(uint64_t, void, void, __n128))(*(void *)a2 + 32))(a2, 0, 0, v14);
        for (uint64_t i = *(_DWORD **)(a5 + 200); i != *(_DWORD **)(a5 + 208); i += 2)
        {
          if (*i == 3)
          {
            __p[1] = 0;
            uint64_t v38 = 0;
            int v40 = 0;
            uint64_t v39 = 0;
            long long v42 = 0u;
            long long v41 = 0u;
            uint64_t v43 = -1;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            memset(v47, 0, sizeof(v47));
            long long v48 = 0u;
            long long v49 = 0u;
            uint64_t v50 = 0;
            __p[0] = &unk_26C3499A0;
            int v51 = 0;
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            *((void *)&v48 + 1) = *(void *)(a5 + 164);
            __int16 v54 = *(_WORD *)(a5 + 224);
            uint64_t v16 = i[1];
            uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, 1uLL);
            uint64_t v19 = &v17[8 * v18];
            *(void *)uint64_t v17 = (v16 << 32) | 3;
            int v20 = v17 + 8;
            int v22 = (char *)v51;
            int v21 = v52;
            if (v52 != v51)
            {
              do
              {
                uint64_t v23 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v17 - 1) = v23;
                v17 -= 8;
              }
              while (v21 != v22);
              int v21 = (char *)v51;
            }
            int v51 = v17;
            uint64_t v52 = v20;
            uint64_t v53 = v19;
            if (v21) {
              operator delete(v21);
            }
            uint64_t v52 = v20;
            uint64_t v24 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v10 + 32))(v10, 0, 0);
            long long v25 = *(_OWORD *)(v24 + 64);
            long long v34 = *(_OWORD *)(v24 + 48);
            long long v35 = v25;
            uint64_t v26 = v25 + *(int *)(a5 + 168) + (uint64_t)*(int *)(a5 + 164);
            uint64_t v36 = *(void *)(v24 + 80);
            *(void *)&long long v35 = v26;
            (*(void (**)(_OWORD *__return_ptr, uint64_t, void, void))(*(void *)v10 + 80))(v56, v10, 0, 0);
            uint64_t v27 = operator new(0x78uLL);
            long long v28 = v56[5];
            v27[4] = v56[4];
            v27[5] = v28;
            v27[6] = v56[6];
            *((_DWORD *)v27 + 28) = v57;
            long long v29 = v56[1];
            *uint64_t v27 = v56[0];
            v27[1] = v29;
            long long v30 = v56[3];
            void v27[2] = v56[2];
            v27[3] = v30;
            ZinBuilder::CreatePadLayer(v33, (uint64_t)&v55);
          }
        }
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v34, 2u, 3u, *a4);
        uint64_t v31 = v10;
        (*(void (**)(uint64_t, void, void))(*(void *)v31 + 32))(v31, 0, 0);
        (*(void (**)(uint64_t, void, void))(*(void *)v31 + 32))(v31, 0, 0);
        ZinBuilder::CreateTranspose();
      }
      ZinAssertImpl("Error: failed to get the incoming layer for the channel padding layer");
    }
  }
LABEL_4:
  ZinAssertImpl("Error: the pad layer does not contain channel padding");
}

void sub_2112F2064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v72 - 224) = &unk_26C359A08;
  int v74 = *(void **)(v72 - 216);
  if (v74)
  {
    *(void *)(v72 - 208) = v74;
    operator delete(v74);
  }
  ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&a40);
  a69 = (uint64_t)&unk_26C34DA98;
  if (a72 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(uint64_t *a1, const ZinPadLayerUtils::PadDecomposedDesc *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xBA2E8BA2E8BA2ELL) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x5D1745D1745D17) {
    unint64_t v9 = 0xBA2E8BA2E8BA2ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPerfUtil::TaskStats>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  __n128 v14 = (ZinPadLayerUtils::PadDecomposedDesc *)&v10[352 * v4];
  uint64_t v16 = &v10[352 * v9];
  ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(v14, a2);
  long long v15 = (char *)v14 + 352;
  std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ZinPadLayerUtils::PadDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2112F2360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinPadLayerUtils::PadDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinPadLayerUtils::PadDecomposedDesc>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinPadLayerUtils::PadDecomposedDesc>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 352;
  while (a3 + v10 != a5)
  {
    int v12 = (ZinPadLayerUtils::PadDecomposedDesc *)(v11 + v10);
    v10 -= 352;
    ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(v12, (const ZinPadLayerUtils::PadDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinPadLayerUtils::PadDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 352;
    ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)(i - 352));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ZinLiveOutLayer::LowerEngine(ZinLiveOutLayer *a1, ZinIrOpLayerGraph *a2)
{
  if (ZinLiveOutLayer::HandleOutputExpansion(a1, a2))
  {
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v5) {
      ZinLiveOutLayer::LowerEngine(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  else if (ZinLiveOutLayer::HandleUserSpecifiedLiveOutProperties(a1, a2, v4))
  {
    BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v13) {
      ZinLiveOutLayer::LowerEngine(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  else if (ZinLiveOutLayer::HandleViewLiveOut(a1, a2))
  {
    BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v21) {
      ZinLiveOutLayer::LowerEngine(v21, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  else if (ZinLiveOutLayer::HandleAnotherLiveOut(a1, a2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinLiveOutLayer::LowerEngine((uint64_t)a1);
    }
  }
  else
  {
    long long v29 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, void, void))(*(void *)a1 + 32))(a1, 0, 0);
    RootTensor = ZinIrTensor::GetRootTensor(v29);
    uint64_t result = ZinIrTensor::SetAllocationHint(RootTensor, 2, 1);
    if (!result) {
      return result;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinLiveOutLayer::LowerEngine((uint64_t)a1);
    }
  }
  return 3;
}

uint64_t ZinLiveOutLayer::HandleOutputExpansion(ZinLiveOutLayer *this, ZinIrOpLayerGraph *a2)
{
  v19[6] = *MEMORY[0x263EF8340];
  uint64_t v3 = **((void **)this + 11);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 208))(v19, v3);
  (*(void (**)(void *__return_ptr, ZinLiveOutLayer *))(*(void *)this + 208))(v18, this);
  if (!ZinTensorDimensionsEqual(v19, v18))
  {
    if (*((char *)this + 47) >= 0) {
      size_t v4 = *((unsigned __int8 *)this + 47);
    }
    else {
      size_t v4 = *((void *)this + 4);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 11);
    if (v14 < 0) {
      p_p = __p;
    }
    if (v4)
    {
      if (*((char *)this + 47) >= 0) {
        uint64_t v6 = (char *)this + 24;
      }
      else {
        uint64_t v6 = (char *)*((void *)this + 3);
      }
      memmove(p_p, v6, v4);
    }
    strcpy((char *)p_p + v4, "_ane_hw_out");
    __n128 v7 = ZinObjectNameFactory::ZinObjectNameFactory(&v17, &__p);
    if (v14 < 0) {
      operator delete(__p);
    }
    uint64_t v8 = (*(uint64_t (**)(ZinLiveOutLayer *, void, void, __n128))(*(void *)this + 32))(this, 0, 0, v7);
    uint64_t v9 = *((void *)this + 2);
    uint64_t v10 = *(unsigned int *)(v8 + 88);
    uint64_t v11 = (*(uint64_t (**)(ZinLiveOutLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v11, &v16);
    v15[0] = 0;
    v15[168] = 0;
    ZinBuilder::CreateNEBypass(v9, (uint64_t)&v17, v3, v10, &v16, 0, (uint64_t)v15, 1.0);
  }
  return 0;
}

void sub_2112F2948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v15 - 184) = &unk_26C34DA98;
  if (*(char *)(v15 - 153) < 0) {
    operator delete(*(void **)(v15 - 176));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinLiveOutLayer::HandleUserSpecifiedLiveOutProperties(ZinLiveOutLayer *this, ZinIrOpLayerGraph *a2, const ZinIrHalParameters *a3)
{
  v37[5] = *MEMORY[0x263EF8340];
  size_t v4 = (void *)**((void **)this + 11);
  BOOL v5 = (ZinIrTensor *)(*(uint64_t (**)(void *, void, void))(*v4 + 32))(v4, 0, 0);
  uint64_t v6 = (*(uint64_t (**)(ZinLiveOutLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  BOOL HasMatchedStrides = ZinIrTensor::HasMatchedStrides(v5, (const ZinIrTensor *)v6, v7);
  int v9 = *(unsigned __int8 *)(v6 + 164);
  if (*((char *)this + 47) >= 0) {
    size_t v10 = *((unsigned __int8 *)this + 47);
  }
  else {
    size_t v10 = *((void *)this + 4);
  }
  uint64_t v11 = buf;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, v10 + 15);
  if (v27 < 0) {
    uint64_t v11 = *(uint8_t **)buf;
  }
  if (v10)
  {
    if (*((char *)this + 47) >= 0) {
      uint64_t v12 = (char *)this + 24;
    }
    else {
      uint64_t v12 = (char *)*((void *)this + 3);
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)&v11[v10], "_liveout_decomp");
  ZinObjectNameFactory::ZinObjectNameFactory(v35, buf);
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v34 = 0;
  if (v9) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = HasMatchedStrides;
  }
  if (!v13)
  {
    if (v9)
    {
      ZinIrTensor::GetInterchangeDescriptor((ZinIrTensor *)v6);
      ZinIrTensor::GetInterchangeDescriptor((ZinIrTensor *)v6);
      ZinIrTensor::GetInterchangeDescriptor((ZinIrTensor *)v6);
      ZinIrTensor::GetInterleave((ZinIrTensor *)v6);
      DimensionOrderHint::DimensionOrderHint(&v31, 0);
      operator new();
    }
    char v14 = *(long long **)(v6 + 104);
    if (v14)
    {
      long long v15 = *v14;
      long long v16 = v14[1];
      uint64_t v33 = *((void *)v14 + 4);
      long long v31 = v15;
      long long v32 = v16;
    }
    else
    {
      v37[3] = 0;
      ZinIrTensor::InferDescriptor((ZinIrTensor *)v6, (uint64_t)v37, (uint64_t)buf);
      long long v31 = v28;
      long long v32 = v29;
      uint64_t v33 = v30;
      std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100](v37);
    }
    uint64_t Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v6);
    if (v18) {
      unint64_t v19 = Interleave;
    }
    else {
      unint64_t v19 = 1;
    }
    FindDimensionOrderFromStrides((const ZinTensorDimensions *)&v31, (const ZinTensorDimensions *)(v6 + 48), v19, 1, (uint64_t)buf);
    ZinIrTensor::GetInterleave((ZinIrTensor *)v6);
    operator new();
  }
  if ((*(_DWORD *)(v4[8] + 8) - 28) <= 2)
  {
    uint64_t v20 = *((void *)this + 2);
    uint64_t v21 = *(unsigned int *)(v6 + 88);
    uint64_t v22 = v34;
    uint64_t v34 = 0;
    uint64_t v25 = v22;
    v24[0] = 0;
    v24[168] = 0;
    ZinBuilder::CreateNEBypass(v20, (uint64_t)v35, (uint64_t)v4, v21, &v25, 0, (uint64_t)v24, 1.0);
  }
  uint64_t v34 = 0;
  v35[0] = &unk_26C34DA98;
  if (v36 < 0) {
    operator delete((void *)v35[1]);
  }
  return 0;
}

void sub_2112F31E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  long long v46 = *(void **)(v43 + 272);
  *(void *)(v43 + 272) = 0;
  if (v46) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100](v44 - 192, v46);
  }
  *(void *)(v43 + 28std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &unk_26C34DA98;
  if (*(char *)(v44 - 153) < 0) {
    operator delete(*(void **)(v43 + 288));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinLiveOutLayer::HandleViewLiveOut(ZinLiveOutLayer *this, ZinIrOpLayerGraph *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  ZinIrTensor::GetAllParentsInTree(v3, (void **)&v20);
  if (v20 == v21)
  {
    char v4 = 0;
    if (v20)
    {
LABEL_5:
      uint64_t v21 = v20;
      operator delete(v20);
    }
  }
  else
  {
    char v4 = 0;
    BOOL v5 = v20;
    do
    {
      uint64_t v6 = *v5++;
      v4 |= *(_DWORD *)(*(void *)(*(void *)(v6 + 96) + 64) + 8) == 36;
    }
    while (v5 != v21);
    if (v20) {
      goto LABEL_5;
    }
  }
  if (v4)
  {
    uint64_t v7 = **((void **)this + 11);
    if (*((char *)this + 47) >= 0) {
      size_t v8 = *((unsigned __int8 *)this + 47);
    }
    else {
      size_t v8 = *((void *)this + 4);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v8 + 17);
    if (v17 < 0) {
      p_p = __p;
    }
    if (v8)
    {
      if (*((char *)this + 47) >= 0) {
        size_t v10 = (char *)this + 24;
      }
      else {
        size_t v10 = (char *)*((void *)this + 3);
      }
      memmove(p_p, v10, v8);
    }
    strcpy((char *)p_p + v8, "_liveout_viewCopy");
    __n128 v11 = ZinObjectNameFactory::ZinObjectNameFactory(&v20, &__p);
    if (v17 < 0) {
      operator delete(__p);
    }
    uint64_t v12 = *((void *)this + 2);
    uint64_t v13 = *(unsigned int *)((*(uint64_t (**)(ZinLiveOutLayer *, void, void, __n128))(*(void *)this + 32))(this, 0, 0, v11)+ 88);
    uint64_t v14 = (*(uint64_t (**)(ZinLiveOutLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v14, &v19);
    v18[0] = 0;
    v18[168] = 0;
    ZinBuilder::CreateNEBypass(v12, (uint64_t)&v20, v7, v13, &v19, 0, (uint64_t)v18, 1.0);
  }
  return 0;
}

void sub_2112F36B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v15 - 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &unk_26C34DA98;
  if (*(char *)(v15 - 89) < 0) {
    operator delete(*(void **)(v15 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinLiveOutLayer::HandleAnotherLiveOut(ZinLiveOutLayer *this, ZinIrOpLayerGraph *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  ZinIrTensor::GetTensorFamily(v3, (uint64_t)&v22);
  if (v22 == v23)
  {
    LOBYTE(v7) = 1;
    if (v22)
    {
LABEL_15:
      uint64_t v23 = v22;
      operator delete(v22);
    }
  }
  else
  {
    char v4 = v22 + 8;
    do
    {
      BOOL v5 = *(ZinLiveOutLayer **)(*((void *)v4 - 1) + 96);
      BOOL v7 = v5 == this || *(_DWORD *)(*((void *)v5 + 8) + 8) != 31;
      BOOL v8 = !v7 || v4 == v23;
      v4 += 8;
    }
    while (!v8);
    if (v22) {
      goto LABEL_15;
    }
  }
  if (!v7)
  {
    uint64_t v9 = **((void **)this + 11);
    if (*((char *)this + 47) >= 0) {
      size_t v10 = *((unsigned __int8 *)this + 47);
    }
    else {
      size_t v10 = *((void *)this + 4);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v10 + 21);
    if (v19 < 0) {
      p_p = __p;
    }
    if (v10)
    {
      if (*((char *)this + 47) >= 0) {
        uint64_t v12 = (char *)this + 24;
      }
      else {
        uint64_t v12 = (char *)*((void *)this + 3);
      }
      memmove(p_p, v12, v10);
    }
    strcpy((char *)p_p + v10, "_another_liveout_copy");
    __n128 v13 = ZinObjectNameFactory::ZinObjectNameFactory(&v22, &__p);
    if (v19 < 0) {
      operator delete(__p);
    }
    uint64_t v14 = *((void *)this + 2);
    uint64_t v15 = *(unsigned int *)((*(uint64_t (**)(ZinLiveOutLayer *, void, void, __n128))(*(void *)this + 32))(this, 0, 0, v13)+ 88);
    uint64_t v16 = (*(uint64_t (**)(ZinLiveOutLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
    ZinIrTensor::CopyTensorMirInfo(v16, &v21);
    v20[0] = 0;
    v20[168] = 0;
    ZinBuilder::CreateNEBypass(v14, (uint64_t)&v22, v9, v15, &v21, 0, (uint64_t)v20, 1.0);
  }
  return 0;
}

void sub_2112F3AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v15 - 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &unk_26C34DA98;
  if (*(char *)(v15 - 89) < 0) {
    operator delete(*(void **)(v15 - 112));
  }
  _Unwind_Resume(exception_object);
}

void ZinLiveOutLayer::Clone()
{
}

void sub_2112F3C5C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  ZinDropoutLayer::Clone(&a12, a1, a2, (uint64_t)&a13);
  char v17 = a13;
  MEMORY[0x21667D3C0](v13, 0x10B3C4024B96488);
  _Unwind_Resume(v17);
}

BOOL ZinLiveOutLayer::NeedsTypeCastToRead(uint64_t a1, int a2)
{
  return *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0) + 88) != a2
      && !IsPrimaryFormat(a2);
}

uint64_t ZinLiveOutLayer::ValidateSemantics_Impl(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  if (a2[1] - *a2 != 120) {
    ZinAssertImpl("Live out layer must have 1 input");
  }
  char v13 = 1;
  std::vector<BOOL>::vector(__p, &v13, 1);
  ZinLayerValidationUtils::ValidateTensorInfos(a2, a3, 0, __p, 0);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  LODWORD(__p[0]) = *((_DWORD *)v6 + 22);
  ZinLayerValidationUtils::ValidateFormat((int *)__p, a3, 0, 1);
  uint64_t result = ZinIrTensor::GetInterleave(v6);
  uint64_t v8 = 0;
  if (v9) {
    uint64_t v10 = result;
  }
  else {
    uint64_t v10 = 1;
  }
  __n128 v11 = a3 + 1648;
  while (*(void *)&v11[v8] != v10)
  {
    v8 += 8;
    if (v8 == 40)
    {
      uint64_t v12 = a3 + 1688;
      goto LABEL_12;
    }
  }
  uint64_t v12 = &v11[v8];
LABEL_12:
  if (v12 == a3 + 1688) {
    ZinAssertImpl("Error: invalid input interleave factor:%zd; The valid interleave factor should be 1, 2, 3, 4, or 8",
  }
      v10);
  return result;
}

void sub_2112F3E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinLiveOutLayer::LowerEngine(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v1 = (void *)*v1;
  }
  int v2 = 136315138;
  uint64_t v3 = v1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "allocation hint set is failed in live-out %s", (uint8_t *)&v2, 0xCu);
}

{
  void *v1;
  int v2;
  void *v3;
  uint64_t v4;

  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v1 = (void *)*v1;
  }
  int v2 = 136315138;
  uint64_t v3 = v1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed in seperating another live-out from tensor family associated with live-out %s\n", (uint8_t *)&v2, 0xCu);
}

void ZinLiveOutLayer::LowerEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "User specified live out property handling failed", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Output expansion handling failed", a5, a6, a7, a8, 0);
}

uint64_t ZinCompilerCoreJIT::ZinCompilerCoreJIT(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, long long *a11, uint64_t a12)
{
  ZinCompilerCore::ZinCompilerCore(a1, a2, a3, a4, a5, a12);
  v16->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C34B7B0;
  char v17 = v16 + 12;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v18 = *a6;
    v17->__r_.__value_.__r.__words[2] = *((void *)a6 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  *(_DWORD *)(a1 + 312) = a7;
  *(void *)(a1 + 32std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a8;
  *(void *)(a1 + 328) = a9;
  *(void *)(a1 + 336) = a10;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 36std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 40std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 384) = 0;
  long long v19 = *a11;
  long long v20 = a11[2];
  *(_OWORD *)(a1 + 424) = a11[1];
  *(_OWORD *)(a1 + 44std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v20;
  *(_OWORD *)(a1 + 408) = v19;
  *(unsigned char *)(a1 + 456) = 0;
  return a1;
}

{
  return ZinCompilerCoreJIT::ZinCompilerCoreJIT(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_2112F412C(_Unwind_Exception *a1)
{
  ZinCompilerCore::~ZinCompilerCore(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCoreJIT::BuildLayerGraph(ZinCompilerCoreJIT *this)
{
  kdebug_trace();
  if (ZinSerial::DeserializeBarUsage(*((ZinSerial **)this + 51), *((const unsigned __int8 **)this + 52), (ZinCompilerCoreJIT *)((char *)this + 64), v2))return 3; {
  kdebug_trace();
  }
  if (ZinBarUsage::HasBarIdForBarIdType((uint64_t)this + 64, 7))
  {
    if (!*((unsigned char *)this + 232))
    {
      *((_WORD *)this + 115) = 0;
      *(_DWORD *)((char *)this + 226) = 0;
      *((unsigned char *)this + 232) = 1;
    }
    *((void *)this + 27) = 0;
    *((_WORD *)this + 112) = 0;
    *((_WORD *)this + 112) = ZinBarUsage::GetBarIdForBarIdType((uint64_t)this + 64, 7);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  uint64_t NumAnesUsed = ZinBondedUtils::GetNumAnesUsed(*(void **)(*((void *)this + 17) + 1000), v4);
  uint64_t inited = ZinIrRegAllocUtil::ZinIrInitAneMemoryConfig(v4, (uint64_t)this + 64, (uint64_t)this + 344, NumAnesUsed);
  if (!inited) {
    ZinIrFactoryJIT::ZinIrFactoryJIT((uint64_t)v8, *((void *)this + 17), (uint64_t)this + 288, *((_DWORD *)this + 78), *((void *)this + 40), *((void *)this + 41), *((void *)this + 42), (uint64_t)this + 344, *(_OWORD *)((char *)this + 424), *((void *)this + 55), *((void *)this + 56), *((ZinIrCompilationStatus **)this + 7));
  }
  uint64_t v3 = inited;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinCompilerCoreJIT::BuildLayerGraph();
  }
  return v3;
}

void sub_2112F4404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)va);
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&STACK[0x348], (void *)STACK[0x350]);
  BOOL v7 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v7;
    operator delete(v7);
  }
  ZinIrFactoryJIT::~ZinIrFactoryJIT((ZinIrFactoryJIT *)&STACK[0x378]);
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCoreJIT::CreateDynamicOffsetCustomBarCmd()
{
  return 0;
}

void ZinCompilerCoreJIT::RunRegisterAllocator(ZinCompilerCoreJIT *this, ZinIrControlFlowGraph **a2)
{
  kdebug_trace();
  if (a2[43])
  {
    uint64_t v4 = *a2;
    if (*a2 != (ZinIrControlFlowGraph *)(a2 + 1))
    {
      do
      {
        uint64_t v8 = *((void *)v4 + 4);
        if (a2 + 42 == std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>>>::find<ZinIrBasicBlock *>((uint64_t)(a2 + 41), &v8))ZinAssertImpl("Missing basic block in the schedule_map."); {
        BOOL v5 = (ZinIrControlFlowGraph *)*((void *)v4 + 1);
        }
        if (v5)
        {
          do
          {
            uint64_t v6 = v5;
            BOOL v5 = *(ZinIrControlFlowGraph **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (ZinIrControlFlowGraph *)*((void *)v4 + 2);
            BOOL v7 = *(void *)v6 == (void)v4;
            uint64_t v4 = v6;
          }
          while (!v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != (ZinIrControlFlowGraph *)(a2 + 1));
    }
    ZinIrMemoryPools::GetPrivatePools((void *)this + 43, 0);
    operator new();
  }
  ZinAssertImpl("Must run scheduler first");
}

void sub_2112F47E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 89) < 0) {
    operator delete(*(void **)(v10 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(ZinObjectGeneration **this)
{
  v48[64] = *MEMORY[0x263EF8340];
  ComputeMutablePrograint m = ZinObjectGeneration::GetComputeMutableProgram(this[30]);
  uint64_t v4 = (ZinIrSymbol **)this[48];
  uint64_t v3 = (ZinIrSymbol **)this[49];
  if (v3 == v4 || !*(void *)(*((void *)*v4 + 1) + 32)) {
    return 0;
  }
  BOOL v5 = (ZinComputeMutableProgramWrapper *)ComputeMutableProgram;
  int v6 = *((unsigned __int8 *)this[17] + 276);
  while (1)
  {
    BOOL v7 = *v4;
    if (!*((void *)*v4 + 23)) {
      ZinAssertImpl("const symbol must have size > 0\n");
    }
    if (ZinIrSymbol::GetMemType(*v4) && ZinIrSymbol::GetMemType(v7) != 1) {
      break;
    }
    uint64_t v8 = *((void *)v7 + 2);
    uint64_t v9 = *(void *)(*((void *)v7 + 1) + 128);
    uint64_t v10 = (char *)v7 + 160;
    if (v6)
    {
      long long v11 = *((_OWORD *)v7 + 24);
      v47[10] = *((_OWORD *)v7 + 23);
      v47[11] = v11;
      v47[12] = *((_OWORD *)v7 + 25);
      long long v12 = *((_OWORD *)v7 + 20);
      v47[6] = *((_OWORD *)v7 + 19);
      v47[7] = v12;
      long long v13 = *((_OWORD *)v7 + 22);
      v47[8] = *((_OWORD *)v7 + 21);
      v47[9] = v13;
      long long v14 = *((_OWORD *)v7 + 16);
      v47[2] = *((_OWORD *)v7 + 15);
      v47[3] = v14;
      long long v15 = *((_OWORD *)v7 + 18);
      v47[4] = *((_OWORD *)v7 + 17);
      v47[5] = v15;
      long long v16 = *((_OWORD *)v7 + 14);
      v47[0] = *((_OWORD *)v7 + 13);
      v47[1] = v16;
      char v17 = (char *)v7 + 160;
      if (*((char *)v7 + 183) < 0) {
        char v17 = *(const char **)v10;
      }
      NextStabTypeno = (unsigned __int16 *)ZinComputeMutableProgramWrapper::GetNextStabTypeno(v5);
      int Stab = ZinTensorDescriptorGetStab((uint64_t)v47, v17, NextStabTypeno, (char *)v48, 0x200uLL);
      if (Stab)
      {
        int v29 = Stab;
        BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v30) {
          ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        if (v29 == 14002 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinIrCodegenHandleKernelTensors(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&,ZinComputeMutableProgramWrapper &,KernelSerializeBuffer const&)::$_0::operator()((char *)v7 + 183, (void *)v7 + 20);
        }
        goto LABEL_26;
      }
      v46[0] = 0x8000000000;
      HIWORD(v46[0]) = *(_WORD *)ZinComputeMutableProgramWrapper::GetNextStabTypeno(v5);
      v46[1] = v8;
      if (ZinComputeMutableProgramWrapper::AddSymbol((uint64_t)v5, 0, (uint64_t)v46, (uint64_t)v48, 0, 0, 0))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinIrCodegenHandleKernelTensors(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&,ZinComputeMutableProgramWrapper &,KernelSerializeBuffer const&)::$_0::operator()((uint64_t)v48);
        }
LABEL_26:
        BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v38) {
          ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(v38, v39, v40, v41, v42, v43, v44, v45);
        }
        return 3;
      }
    }
    v48[0] = 0xF00000000;
    v48[1] = v8;
    if (*((char *)v7 + 183) < 0) {
      uint64_t v10 = *(const char **)v10;
    }
    if (ZinComputeMutableProgramWrapper::AddSymbol((uint64_t)v5, v9, (uint64_t)v48, (uint64_t)v10, 0, *((void *)v7 + 23), 0))goto LABEL_26; {
    if (++v4 == v3)
    }
      return 0;
  }
  BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v21) {
    ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  return 3;
}

uint64_t ZinCompilerCoreJIT::CompileProcedure(ZinCompilerCoreJIT *this)
{
  if (CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 7) + 8)) > 0) {
    return 3;
  }
  uint64_t v3 = (char *)this + 288;
  if (*((char *)this + 311) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  *((void *)this + 32) = ZinIrCompilationStatus::AddNetwork(*((ZinIrCompilationStatus **)this + 7), v4);
  CFRelease(v4);
  uint64_t v5 = (*(uint64_t (**)(ZinCompilerCoreJIT *))(*(void *)this + 24))(this);
  if (v5)
  {
    uint64_t v2 = v5;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinCompilerCoreJIT::CompileProcedure();
    }
  }
  else
  {
    int v6 = *(ZinIrControlFlowGraph **)(*((void *)this + 17) + 1000);
    uint64_t v7 = (*(uint64_t (**)(ZinCompilerCoreJIT *, ZinIrControlFlowGraph *))(*(void *)this + 56))(this, v6);
    if (v7)
    {
      uint64_t v2 = v7;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinCompilerCoreJIT::CompileProcedure();
      }
    }
    else
    {
      uint64_t v8 = ZinCompilerCore::ValidateMirInfo((CFArrayRef **)this, v6);
      if (v8)
      {
        uint64_t v2 = v8;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinCompilerCoreJIT::CompileProcedure();
        }
      }
      else if (*((unsigned char *)this + 456) && (uint64_t v10 = ZinCompilerCore::RunHazardAnalysis(this, v6), v10))
      {
        uint64_t v2 = v10;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinCompilerCoreJIT::CompileProcedure();
        }
      }
      else
      {
        uint64_t v11 = ZinCompilerCore::DumpDebugProfilingInfo(this, v6);
        if (v11)
        {
          uint64_t v2 = v11;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinCompilerCoreJIT::CompileProcedure();
          }
        }
        else
        {
          if (*((unsigned char *)this + 456)) {
            ZinCompilerCoreJIT::RunCachePrefetchLegalization(this, v6);
          }
          uint64_t v12 = ZinCompilerCore::RunContextSwitch(this, v6);
          if (v12)
          {
            uint64_t v2 = v12;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinCompilerCoreJIT::CompileProcedure();
            }
          }
          else
          {
            uint64_t v13 = (*(uint64_t (**)(ZinCompilerCoreJIT *))(*(void *)this + 64))(this);
            if (v13)
            {
              uint64_t v2 = v13;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinCompilerCoreJIT::CompileProcedure();
              }
            }
            else
            {
              uint64_t v14 = ZinCompilerCore::QualifyOnImbalanceRatio((ZinIrHalParameters ***)this, v6);
              if (v14)
              {
                uint64_t v2 = v14;
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinCompilerCoreJIT::CompileProcedure();
                }
              }
              else
              {
                uint64_t v15 = ZinCompilerCore::DumpLayerStats(this, v6);
                if (v15)
                {
                  uint64_t v2 = v15;
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinCompilerCoreJIT::CompileProcedure();
                  }
                }
                else
                {
                  ZinIrContext::SetPrivateMemoryPools(*((void *)this + 17), 0, *((void *)this + 19) + 104);
                  uint64_t v16 = ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram((ZinObjectGeneration **)this);
                  if (v16)
                  {
                    uint64_t v2 = v16;
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                      ZinCompilerCoreJIT::CompileProcedure();
                    }
                  }
                  else
                  {
                    uint64_t v17 = ZinCompilerCore::RunCodeGenObjectGen(this);
                    if (v17)
                    {
                      uint64_t v2 = v17;
                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                        ZinCompilerCoreJIT::CompileProcedure();
                      }
                    }
                    else if (CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 7) + 8)) <= 0)
                    {
                      uint64_t v2 = ZinCompilerCore::SetLiveIOAttributes(this);
                      if (v2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                        ZinCompilerCoreJIT::CompileProcedure();
                      }
                    }
                    else
                    {
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t ZinCompilerCoreJIT::RunCachePrefetchLegalization(ZinCompilerCoreJIT *this, ZinIrControlFlowGraph *a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (*(unsigned char *)(*v2 + 1271) && !*(unsigned char *)(v2[1] + 130))
  {
    uint64_t v3 = *((void *)a2 + 44);
    uint64_t v4 = *((void *)a2 + 45);
    if (v4 == v3) {
      ZinAssertImpl("Must run scheduler first");
    }
    while (v4 != v3)
    {
      uint64_t v5 = *(ZinIrOpLayer **)(v4 - 8);
      v4 -= 8;
      if (ZinIrOpLayer::IsANELayer(v5))
      {
        uint64_t v3 = v4 + 8;
        break;
      }
    }
    uint64_t v6 = *(void *)(*(void *)(v3 - 8) + 264);
    *(unsigned char *)(v6 + 1264) = 1;
    *(void *)(v6 + 1276) = 0;
    *(void *)(v6 + 1268) = 0;
    *(void *)(v6 + 1281) = 0;
    *(void *)(v6 + 1296) = 0;
    *(unsigned char *)(v6 + 1304) = 0;
    *(void *)(v6 + 1312) = 0;
    *(_WORD *)(v6 + 132std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
    *(_DWORD *)(v6 + 1348) = 0;
    *(void *)(v6 + 1352) = 0;
    *(void *)(v6 + 1328) = 0;
    *(_DWORD *)(v6 + 1335) = 0;
    *(_DWORD *)(v6 + 134std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
    *(_DWORD *)(v6 + 1343) = 0;
  }
  return 0;
}

uint64_t ZinCompilerCoreJIT::SetLiveIORankMap(ZinCompilerCoreJIT *this, const ZinIrLiveIORankMaps *a2)
{
  BOOL v2 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v2) {
    ZinCompilerCoreJIT::SetLiveIORankMap(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return 3;
}

uint64_t ZinCompilerCoreJIT::GetLiveIORankMap(ZinCompilerCoreJIT *this)
{
  return 0;
}

void ZinCompilerCoreJIT::~ZinCompilerCoreJIT(ZinCompilerCoreJIT *this)
{
  *(void *)this = &unk_26C34B7B0;
  BOOL v2 = (void *)*((void *)this + 48);
  if (v2)
  {
    *((void *)this + 49) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>>>::~__hash_table((uint64_t)this + 344);
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }

  ZinCompilerCore::~ZinCompilerCore(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C34B7B0;
  BOOL v2 = (void *)*((void *)this + 48);
  if (v2)
  {
    *((void *)this + 49) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>>>::~__hash_table((uint64_t)this + 344);
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }
  ZinCompilerCore::~ZinCompilerCore(this);

  JUMPOUT(0x21667D3C0);
}

void ZinCompilerCoreJIT::BuildLayerGraph()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

void ZinCompilerCoreJIT::RunRegisterAllocator()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

void ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Could not generate debug info string for constant tensor\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Const input tensor should be DRAM resident \n", a5, a6, a7, a8, 0);
}

void ZinCompilerCoreJIT::CompileProcedure()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
}

void ZinCompilerCoreJIT::SetLiveIORankMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

BOOL ZinMemCacheUtil::MemoryAllocationTracker::IntersectOrAdjacent(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  if (*a1 <= v2)
  {
    unint64_t v4 = *a2;
    unint64_t v5 = a2[1];
    if ((v3 >= v5 || v4 > v5 || v4 >= v2) && v3 != v5) {
      return v2 == v4;
    }
    return 1;
  }
  if (v3 == a2[1]) {
    return 1;
  }
  unint64_t v4 = *a2;
  return v2 == v4;
}

void ZinMemCacheUtil::MemoryAllocationTracker::AddChunk(uint64_t a1, long long *a2)
{
  long long v31 = *a2;
  uint64_t v32 = *((void *)a2 + 2);
  long long __p = 0;
  int v29 = 0;
  BOOL v30 = 0;
  unint64_t v3 = (uint64_t *)(a1 + 8);
  unint64_t v4 = *(uint64_t **)a1;
  if (*(void *)a1 == a1 + 8) {
    goto LABEL_46;
  }
  unint64_t v5 = 0;
  do
  {
    unint64_t v6 = *((void *)&v31 + 1);
    unint64_t v7 = v31;
    if ((unint64_t)v31 <= *((void *)&v31 + 1))
    {
      unint64_t v8 = v4[4];
      unint64_t v9 = v4[5];
      BOOL v11 = v8 <= v9;
      if ((unint64_t)v31 >= v9) {
        BOOL v11 = 0;
      }
      BOOL v12 = v8 < *((void *)&v31 + 1) && v11;
      if ((void)v31 == v9)
      {
        unint64_t v10 = v4[5];
      }
      else
      {
        unint64_t v10 = v4[5];
        if (!v12)
        {
LABEL_13:
          unint64_t v10 = v9;
          BOOL v13 = *((void *)&v31 + 1) == v8;
          unint64_t v8 = *((void *)&v31 + 1);
          if (!v13) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      unint64_t v8 = v4[4];
      unint64_t v9 = v4[5];
      unint64_t v10 = v31;
      if ((void)v31 != v9) {
        goto LABEL_13;
      }
    }
    uint64_t v14 = (long long *)(v4 + 4);
    if (v8 < (unint64_t)v31) {
      unint64_t v7 = v8;
    }
    if (*((void *)&v31 + 1) <= v10) {
      unint64_t v6 = v10;
    }
    *(void *)&long long v31 = v7;
    *((void *)&v31 + 1) = v6;
    if (v5 >= v30)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v5 - __p);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (v30 - __p) > v17) {
        unint64_t v17 = 0x5555555555555556 * (v30 - __p);
      }
      if (0xAAAAAAAAAAAAAAABLL * (v30 - __p) >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v30, v18);
      }
      else {
        long long v19 = 0;
      }
      long long v20 = &v19[24 * v16];
      long long v21 = *v14;
      *((void *)v20 + 2) = v4[6];
      *(_OWORD *)long long v20 = v21;
      uint64_t v22 = v29;
      uint64_t v23 = v20;
      if (v29 != __p)
      {
        do
        {
          long long v24 = *(_OWORD *)(v22 - 3);
          *((void *)v23 - 1) = *(v22 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v22 -= 3;
        }
        while (v22 != __p);
        uint64_t v22 = __p;
      }
      unint64_t v5 = (unint64_t *)(v20 + 24);
      long long __p = (unint64_t *)v23;
      BOOL v30 = (unint64_t *)&v19[24 * v18];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      long long v15 = *v14;
      v5[2] = v4[6];
      *(_OWORD *)unint64_t v5 = v15;
      v5 += 3;
    }
    int v29 = v5;
LABEL_37:
    uint64_t v25 = (uint64_t *)v4[1];
    if (v25)
    {
      do
      {
        uint64_t v26 = v25;
        uint64_t v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        uint64_t v26 = (uint64_t *)v4[2];
        BOOL v13 = *v26 == (void)v4;
        unint64_t v4 = v26;
      }
      while (!v13);
    }
    unint64_t v4 = v26;
  }
  while (v26 != v3);
  for (uint64_t i = __p; i != v5; i += 3)
  {
    *(void *)(a1 + 24) += *i - i[1];
    std::__tree<ZinSpaceRange>::__erase_unique<ZinSpaceRange>((uint64_t **)a1, i);
  }
LABEL_46:
  *(void *)(a1 + 24) += *((void *)&v31 + 1) - v31;
  std::__tree<ZinSpaceRange>::__emplace_unique_key_args<ZinSpaceRange,ZinSpaceRange const&>((uint64_t **)a1, (unint64_t *)&v31, (uint64_t)&v31);
  if (__p) {
    operator delete(__p);
  }
}

void sub_2112F5C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *ZinMemCacheUtil::MemoryAllocationTracker::RemoveChunk(_OWORD *result, unint64_t *a2)
{
  unint64_t v2 = a2;
  unint64_t v4 = (void *)result + 1;
  unint64_t v3 = (void *)*((void *)result + 1);
  if (v3)
  {
    unint64_t v5 = a2[1];
    do
    {
      unint64_t v6 = v3[4];
      if (v6 == v5) {
        unint64_t v6 = v3[5];
      }
      BOOL v7 = v5 > v6;
      if (v5 <= v6) {
        unint64_t v8 = v3;
      }
      else {
        unint64_t v8 = v3 + 1;
      }
      if (!v7) {
        unint64_t v4 = v3;
      }
      unint64_t v3 = (void *)*v8;
    }
    while (*v8);
  }
  if (v4 != *(void **)result)
  {
    unint64_t v9 = (void *)*v4;
    if (*v4)
    {
      do
      {
        unint64_t v10 = v9;
        unint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v11 = v4;
      do
      {
        unint64_t v10 = (void *)v11[2];
        BOOL v12 = *v10 == (void)v11;
        BOOL v11 = v10;
      }
      while (v12);
    }
    unint64_t v38 = 0;
    unint64_t v39 = 0;
    unint64_t v14 = v10[4];
    unint64_t v15 = v10[5];
    BOOL v13 = v10 + 4;
    unint64_t v40 = 0;
    unint64_t v35 = 0;
    unint64_t v36 = 0;
    unint64_t v37 = 0;
    if (v14 <= v15)
    {
      unint64_t v16 = 0;
      unint64_t v17 = 0;
      unint64_t v18 = 0;
      unint64_t v19 = 0;
      char v20 = 0;
      char v21 = 0;
      unint64_t v22 = 0;
      unint64_t v23 = 0;
      uint64_t v33 = v2;
      do
      {
        unint64_t v25 = *v2;
        unint64_t v24 = v2[1];
        BOOL v26 = *v2 >= v15 || v25 > v24;
        if (v26 || v14 >= v24) {
          break;
        }
        if (v25 > v14)
        {
          unint64_t v18 = v25 - v14;
          unint64_t v19 = *v2;
          unint64_t v22 = v14;
          char v20 = 1;
        }
        if (v15 > v24)
        {
          unint64_t v16 = v15 - v24;
          unint64_t v17 = v15;
          unint64_t v23 = v2[1];
          char v21 = 1;
        }
        if (v10 == *(void **)result)
        {
          unint64_t v39 = v19;
          unint64_t v40 = v18;
          unint64_t v37 = v16;
          unint64_t v38 = v22;
          unint64_t v35 = v23;
          unint64_t v36 = v17;
          *((void *)result + 3) += v14 - v15;
          uint64_t v32 = result;
          std::__tree<ZinSpaceRange>::__erase_unique<ZinSpaceRange>((uint64_t **)result, v13);
          uint64_t result = v32;
          if ((v20 & 1) == 0)
          {
LABEL_38:
            if (v21)
            {
              *((void *)result + 3) += v17 - v23;
              return std::__tree<ZinSpaceRange>::__emplace_hint_unique_key_args<ZinSpaceRange,ZinSpaceRange const&>((uint64_t **)result, v4, &v35, (uint64_t)&v35);
            }
            return result;
          }
LABEL_37:
          *((void *)result + 3) += v19 - v22;
          long long v31 = result;
          std::__tree<ZinSpaceRange>::__emplace_hint_unique_key_args<ZinSpaceRange,ZinSpaceRange const&>((uint64_t **)result, v4, &v38, (uint64_t)&v38);
          uint64_t result = v31;
          goto LABEL_38;
        }
        unint64_t v34 = v17;
        uint64_t v28 = (void *)*v10;
        if (*v10)
        {
          do
          {
            int v29 = v28;
            uint64_t v28 = (void *)v28[1];
          }
          while (v28);
        }
        else
        {
          do
          {
            int v29 = (void *)v10[2];
            BOOL v12 = *v29 == (void)v10;
            unint64_t v10 = v29;
          }
          while (v12);
        }
        *((void *)result + 3) += v14 - v15;
        BOOL v30 = result;
        std::__tree<ZinSpaceRange>::__erase_unique<ZinSpaceRange>((uint64_t **)result, v13);
        uint64_t result = v30;
        unint64_t v14 = v29[4];
        unint64_t v15 = v29[5];
        BOOL v13 = v29 + 4;
        unint64_t v10 = v29;
        unint64_t v2 = v33;
        unint64_t v17 = v34;
      }
      while (v14 <= v15);
      unint64_t v39 = v19;
      unint64_t v40 = v18;
      unint64_t v37 = v16;
      unint64_t v38 = v22;
      unint64_t v35 = v23;
      unint64_t v36 = v17;
      if ((v20 & 1) == 0) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
  }
  return result;
}

uint64_t ZinMemCacheUtil::MemoryAllocationTracker::SizeOfChunkNotYetAllocated(void *a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  long long __p = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  unint64_t v4 = a1 + 1;
  unint64_t v5 = (void *)*a1;
  if ((void *)*a1 == a1 + 1)
  {
    uint64_t v22 = 0;
    return v3 - v2 - v22;
  }
  BOOL v7 = 0;
  do
  {
    unint64_t v8 = (long long *)(v5 + 4);
    if (ZinMemCacheUtil::MemoryAllocationTracker::IntersectOrAdjacent(a2, v5 + 4))
    {
      if (v5[4] < v2) {
        unint64_t v2 = v5[4];
      }
      if (v3 <= v5[5]) {
        unint64_t v3 = v5[5];
      }
      if (v7 >= v29)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v7 - __p) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v29 - __p) >> 3) > v11) {
          unint64_t v11 = 0x5555555555555556 * ((v29 - __p) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v29 - __p) >> 3) >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v29, v12);
        }
        else {
          BOOL v13 = 0;
        }
        unint64_t v14 = &v13[24 * v10];
        long long v15 = *v8;
        *((void *)v14 + 2) = v5[6];
        *(_OWORD *)unint64_t v14 = v15;
        unint64_t v16 = v28;
        unint64_t v17 = v14;
        if (v28 != __p)
        {
          do
          {
            long long v18 = *(_OWORD *)(v16 - 24);
            *((void *)v17 - 1) = *((void *)v16 - 1);
            *(_OWORD *)(v17 - 24) = v18;
            v17 -= 24;
            v16 -= 24;
          }
          while (v16 != __p);
          unint64_t v16 = __p;
        }
        BOOL v7 = v14 + 24;
        long long __p = v17;
        int v29 = &v13[24 * v12];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        long long v9 = *v8;
        *((void *)v7 + 2) = v5[6];
        *(_OWORD *)BOOL v7 = v9;
        v7 += 24;
      }
      uint64_t v28 = v7;
    }
    unint64_t v19 = (void *)v5[1];
    if (v19)
    {
      do
      {
        char v20 = v19;
        unint64_t v19 = (void *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        char v20 = (void *)v5[2];
        BOOL v21 = *v20 == (void)v5;
        unint64_t v5 = v20;
      }
      while (!v21);
    }
    unint64_t v5 = v20;
  }
  while (v20 != v4);
  if (__p == v7)
  {
    uint64_t v22 = 0;
    if (!__p) {
      return v3 - v2 - v22;
    }
LABEL_38:
    operator delete(__p);
    return v3 - v2 - v22;
  }
  uint64_t v22 = 0;
  unint64_t v23 = __p;
  do
  {
    uint64_t v25 = *(void *)v23;
    uint64_t v24 = *((void *)v23 + 1);
    v23 += 24;
    uint64_t v22 = v24 + v22 - v25;
  }
  while (v23 != v7);
  if (__p) {
    goto LABEL_38;
  }
  return v3 - v2 - v22;
}

void sub_2112F60F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ZinMemCacheUtil::MemCacheAllocationState::GetAllocationsForSymbol@<X0>(const ZinIrSymbol *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = *((void *)a1 + 3);
  uint64_t AlignPower2 = ZinLastAlignPower2(v7, a2);
  uint64_t v9 = ZinAlignPower2(*((void *)a1 + 23) + v7, a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = operator new(0x18uLL);
  a3[1] = result + 3;
  a3[2] = result + 3;
  *uint64_t result = AlignPower2;
  result[1] = v9;
  result[2] = v9 - AlignPower2;
  *a3 = result;
  return result;
}

void ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(ZinMemCacheUtil::MemCacheAllocationState *this, const ZinIrSymbol *a2, uint64_t a3)
{
  unint64_t v19 = *(unsigned __int8 *)(*((void *)a2 + 1) + 56);
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(this, &v19))
  {
    long long v15 = (uint64_t *)&v16;
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    char v20 = &v19;
    unint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this, &v19, (uint64_t)&std::piecewise_construct, (uint64_t **)&v20);
    uint64_t v7 = v6 + 4;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v6 + 3), (void *)v6[4]);
    unint64_t v8 = v16;
    v6[3] = &v16;
    v6[4] = v8;
    uint64_t v9 = v17;
    v6[5] = v17;
    if (v9)
    {
      _OWORD v8[2] = (uint64_t)v7;
      long long v15 = (uint64_t *)&v16;
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      unint64_t v8 = 0;
    }
    else
    {
      v6[3] = v7;
    }
    v6[6] = v18;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v15, v8);
  }
  long long v15 = (uint64_t *)&v19;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this, &v19, (uint64_t)&std::piecewise_construct, &v15);
  ZinMemCacheUtil::MemCacheAllocationState::GetAllocationsForSymbol(a2, a3, &v15);
  unint64_t v11 = v15;
  unint64_t v12 = v16;
  if (v15 != v16)
  {
    BOOL v13 = v10 + 3;
    unint64_t v14 = (unint64_t *)v15;
    do
    {
      ZinMemCacheUtil::MemoryAllocationTracker::RemoveChunk(v13, v14);
      v14 += 3;
    }
    while (v14 != (unint64_t *)v12);
  }
  if (v11) {
    operator delete(v11);
  }
}

void sub_2112F62F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(ZinMemCacheUtil::MemCacheAllocationState *this, const ZinIrSymbol *a2, uint64_t a3)
{
  unint64_t v19 = *(unsigned __int8 *)(*((void *)a2 + 1) + 56);
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(this, &v19))
  {
    long long v15 = (uint64_t *)&v16;
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    char v20 = &v19;
    unint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this, &v19, (uint64_t)&std::piecewise_construct, (uint64_t **)&v20);
    uint64_t v7 = v6 + 4;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v6 + 3), (void *)v6[4]);
    unint64_t v8 = v16;
    v6[3] = &v16;
    v6[4] = v8;
    uint64_t v9 = v17;
    v6[5] = v17;
    if (v9)
    {
      _OWORD v8[2] = (uint64_t)v7;
      long long v15 = (uint64_t *)&v16;
      unint64_t v16 = 0;
      uint64_t v17 = 0;
      unint64_t v8 = 0;
    }
    else
    {
      v6[3] = v7;
    }
    v6[6] = v18;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v15, v8);
  }
  long long v15 = (uint64_t *)&v19;
  unint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this, &v19, (uint64_t)&std::piecewise_construct, &v15);
  ZinMemCacheUtil::MemCacheAllocationState::GetAllocationsForSymbol(a2, a3, &v15);
  unint64_t v11 = v15;
  unint64_t v12 = v16;
  if (v15 != v16)
  {
    uint64_t v13 = (uint64_t)(v10 + 3);
    unint64_t v14 = (long long *)v15;
    do
    {
      ZinMemCacheUtil::MemoryAllocationTracker::AddChunk(v13, v14);
      unint64_t v14 = (long long *)((char *)v14 + 24);
    }
    while (v14 != (long long *)v12);
  }
  if (v11) {
    operator delete(v11);
  }
}

void sub_2112F6474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t ZinMemCacheUtil::MemCacheAllocationState::CalculateSize(ZinMemCacheUtil::MemCacheAllocationState *this)
{
  uint64_t v1 = (void *)*((void *)this + 2);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    result += v1[6];
    uint64_t v1 = (void *)*v1;
  }
  while (v1);
  return result;
}

BOOL ZinMemCacheUtil::IsAllocated(int a1)
{
  return a1 == 0;
}

void ZinMemCacheUtil::AddAllocsToActiveTensors(uint64_t **this, const ZinANELayer *a2, ZinMemCacheUtil::MemCacheAllocationState *a3)
{
  Hal = ZinIrTarget::GetHal(this[2], (ZinIrTarget *)this[2][20]);
  uint64_t v7 = *(void *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal) + 528);
  unint64_t v8 = this[33];
  if (!*((_DWORD *)v8 + 353)) {
    ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(a2, (const ZinIrSymbol *)v8[118], v7);
  }
  uint64_t v9 = this[33];
  unint64_t v10 = v8 + 89;
  uint64_t v16 = 0;
  if (!*((_DWORD *)v9 + 350))
  {
    if (ZinMemSourceIndexTranslator::GetDMASrcIndex((ZinMemSourceIndexTranslator *)this, 0, &v16, v6)) {
      goto LABEL_17;
    }
    ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(a2, (const ZinIrSymbol *)v10[12 * v16 + 5], v7);
    uint64_t v9 = this[33];
  }
  if (*((_DWORD *)v9 + 355)) {
    goto LABEL_9;
  }
  if (ZinMemSourceIndexTranslator::GetDMASrcIndex((ZinMemSourceIndexTranslator *)this, (const ZinANELayer *)1, &v16, v6))LABEL_17:ZinAssertImpl("Invalid source index"); {
  ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(a2, (const ZinIrSymbol *)v10[12 * v16 + 5], v7);
  }
  uint64_t v9 = this[33];
LABEL_9:
  if (!*((_DWORD *)v9 + 354))
  {
    ((void (*)(uint64_t *__return_ptr, uint64_t **))(*this)[16])(&v14, this);
    uint64_t v11 = *(void *)(v14 + 104);
    if (!v11 || (unint64_t v12 = *(const ZinIrSymbol ***)(v11 + 40), v12 == *(const ZinIrSymbol ***)(v11 + 48))) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *v12;
    }
    ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(a2, v13, v7);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_2112F6660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void ZinMemCacheUtil::RemoveDepriAndDropsFromActiveTensors(uint64_t **this, const ZinANELayer *a2, ZinMemCacheUtil::MemCacheAllocationState *a3)
{
  Hal = ZinIrTarget::GetHal(this[2], (ZinIrTarget *)this[2][20]);
  uint64_t v7 = *(void *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal) + 528);
  unint64_t v8 = this[33];
  if ((*((_DWORD *)v8 + 353) & 0xFFFFFFFE) == 2) {
    ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(a2, (const ZinIrSymbol *)v8[118], v7);
  }
  uint64_t v9 = this[33];
  unint64_t v10 = v8 + 89;
  uint64_t v16 = 0;
  if ((v9[175] & 0xFFFFFFFE) == 2)
  {
    if (ZinMemSourceIndexTranslator::GetDMASrcIndex((ZinMemSourceIndexTranslator *)this, 0, &v16, v6)) {
      goto LABEL_18;
    }
    ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(a2, (const ZinIrSymbol *)v10[12 * v16 + 5], v7);
    uint64_t v9 = this[33];
  }
  if ((*((_DWORD *)v9 + 355) & 0xFFFFFFFE) == 2)
  {
    if (!ZinMemSourceIndexTranslator::GetDMASrcIndex((ZinMemSourceIndexTranslator *)this, (const ZinANELayer *)1, &v16, v6))
    {
      ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(a2, (const ZinIrSymbol *)v10[12 * v16 + 5], v7);
      uint64_t v9 = this[33];
      goto LABEL_9;
    }
LABEL_18:
    ZinAssertImpl("Invalid source index");
  }
LABEL_9:
  if (*((_DWORD *)v9 + 340) != 1 && (v9[177] & 0xFFFFFFFE) == 2)
  {
    ((void (*)(uint64_t *__return_ptr, uint64_t **))(*this)[16])(&v14, this);
    uint64_t v11 = *(void *)(v14 + 104);
    if (!v11 || (unint64_t v12 = *(const ZinIrSymbol ***)(v11 + 40), v12 == *(const ZinIrSymbol ***)(v11 + 48))) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *v12;
    }
    ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(a2, v13, v7);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_2112F6830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ZinMemCacheUtil::CalculateExpectedMemCacheSize(ZinIrOpLayer ***a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  int v12 = 1065353216;
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = *v1;
      if (ZinIrOpLayer::IsANELayer(*v1))
      {
        ZinMemCacheUtil::AddAllocsToActiveTensors((uint64_t **)v4, (const ZinANELayer *)&v10, v5);
        ZinMemCacheUtil::RemoveDepriAndDropsFromActiveTensors((uint64_t **)v4, (const ZinANELayer *)&v10, v6);
        uint64_t v7 = (void *)v11;
        if ((void)v11)
        {
          unint64_t v8 = 0;
          do
          {
            v8 += v7[6];
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          unint64_t v8 = 0;
        }
        if (v3 <= v8) {
          unint64_t v3 = v8;
        }
      }
      ++v1;
    }
    while (v1 != v2);
  }
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)&v10);
  return v3;
}

void sub_2112F6908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_OWORD *std::__tree<ZinSpaceRange>::__emplace_unique_key_args<ZinSpaceRange,ZinSpaceRange const&>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v5 = (void **)std::__tree<ZinSpaceRange>::__find_equal<ZinSpaceRange>((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::__tree<ZinSpaceRange>::__erase_unique<ZinSpaceRange>(uint64_t **a1, unint64_t *a2)
{
  unint64_t v3 = std::__tree<ZinSpaceRange>::find<ZinSpaceRange>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  unint64_t v4 = v3;
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(a1, v3);
  operator delete(v4);
  return 1;
}

void *std::__tree<ZinSpaceRange>::find<ZinSpaceRange>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  unint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  uint64_t v7 = v2;
  do
  {
    unint64_t v8 = v3[4];
    BOOL v10 = v8 == v5;
    BOOL v9 = v8 < v5;
    if (v10) {
      BOOL v9 = v3[5] < v6;
    }
    BOOL v10 = !v9;
    if (v9) {
      long long v11 = v3 + 1;
    }
    else {
      long long v11 = v3;
    }
    if (v10) {
      uint64_t v7 = v3;
    }
    unint64_t v3 = (void *)*v11;
  }
  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  unint64_t v12 = v7[4];
  BOOL v13 = v6 < v7[5];
  BOOL v10 = v5 == v12;
  BOOL v14 = v5 < v12;
  if (v10) {
    BOOL v14 = v13;
  }
  if (v14) {
    return v2;
  }
  return v7;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    BOOL v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  BOOL v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *BOOL v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2112F6CB0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrDimension,std::set<long>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void ZinIrPEElementWiseUnit::ZinIrPEElementWiseUnit(ZinIrPEElementWiseUnit *this, const ZinIrPEElementWiseUnitInfo *a2)
{
  ZinIrPEUnit::ZinIrPEUnit(this, a2);
  *unint64_t v4 = &unk_26C34F8B8;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnitInfo *)(v4 + 130), a2);
  *((void *)this + 13std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &unk_26C351AA8;
  std::__optional_copy_base<ZinIrScaledEWUnitInfo,false>::__optional_copy_base[abi:ne180100]((unsigned char *)this + 2008, (uint64_t)a2 + 968);
  std::__optional_copy_base<ZinIrReductionUnitInfo,false>::__optional_copy_base[abi:ne180100]((unsigned char *)this + 2120, (uint64_t)a2 + 1080);
}

void sub_2112F6D64(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 2112)) {
    ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  }
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);
  ZinIrPEUnit::~ZinIrPEUnit((ZinIrKernel **)v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEElementWiseUnit::TensorDimensions(ZinIrPEElementWiseUnit *this, const ZinIrHalParameters *a2, int8x16_t *a3, CFArrayRef *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 2112))
  {
    uint64_t v9 = *((void *)this + 1);
    int8x16_t v10 = *(int8x16_t *)(v9 + 8);
    int8x16_t v11 = *(int8x16_t *)(v9 + 24);
    a3[2].i64[0] = *(void *)(v9 + 40);
    *a3 = v10;
    a3[1] = v11;
LABEL_7:
    if (!*((unsigned char *)this + 2224)) {
      return 0;
    }
    memset(__p, 0, 24);
    ZinIrReductionUnit::ZinIrReductionUnit(v21, (char *)this + 2120, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    int v12 = **((_DWORD **)this + 1);
    int8x16_t v13 = a3[1];
    *(int8x16_t *)((char *)__p + 4) = *a3;
    *(int8x16_t *)((char *)&__p[2] + 4) = v13;
    *(uint64_t *)((char *)&__p[4] + 4) = a3[2].i64[0];
    memset(&v23[3], 0, 20);
    uint64_t v14 = (char *)operator new(0x78uLL);
    long long v15 = *(_OWORD *)&__p[2];
    *(_OWORD *)(v14 + 4) = *(_OWORD *)__p;
    unint64_t v18 = v14 + 120;
    unint64_t v19 = v14 + 120;
    *(_DWORD *)uint64_t v14 = v12;
    *(_OWORD *)(v14 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v15;
    *((_OWORD *)v14 + 2) = *(_OWORD *)((char *)&__p[3] + 4);
    *((_WORD *)v14 + 24) = 0;
    *(int64x2_t *)(v14 + 56) = vdupq_n_s64(1uLL);
    v14[72] = 0;
    v14[92] = 0;
    *(_OWORD *)(v14 + 93) = *(_OWORD *)v23;
    *(void *)(v14 + 108) = *(void *)&v23[15];
    BOOL v17 = v14;
    ZinIrUnit::SetBottomInfo((uint64_t)v21, (uint64_t)&v17);
    uint64_t v8 = ZinIrReductionUnit::TensorDimensions((ZinIrReductionUnit *)v21, a2, (ZinTensorDimensions *)a3, a4);
    if (v17)
    {
      unint64_t v18 = v17;
      operator delete(v17);
    }
    v21[0] = &unk_26C34BFE0;
    ZinIrUnitInfo::~ZinIrUnitInfo(v22);
    ZinIrUnit::~ZinIrUnit((ZinIrUnit *)v21);
    if (!v8) {
      return 0;
    }
    return v8;
  }
  memset(__p, 0, 24);
  ZinIrScaledEWUnit::ZinIrScaledEWUnit(v21, (char *)this + 2008, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  ZinIrUnit::SetBottomInfo((uint64_t)v21, (uint64_t)this + 8);
  uint64_t v8 = ZinIrScaledEWUnit::TensorDimensions((ZinIrScaledEWUnit *)v21, a2, a3, (ZinIrUnitStatus *)a4);
  v21[0] = &unk_26C34AD38;
  ZinIrUnitInfo::~ZinIrUnitInfo(v22);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)v21);
  if (!v8) {
    goto LABEL_7;
  }
  return v8;
}

void sub_2112F6FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

uint64_t ZinIrPEElementWiseUnit::CreateBroadcastLayers(uint64_t this, ZinIrTensor *a2, ZinBroadcastLayer **a3, ZinBroadcastLayer **a4)
{
  uint64_t v4 = *(void *)(this + 8);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(this + 16) - v4) >> 3) > 1)
  {
    uint64_t v6 = this;
    unint64_t v7 = (ZinBroadcastLayerUtils *)(v4 + 8);
    uint64_t v8 = (ZinBroadcastLayerUtils *)(v4 + 128);
    v42[0] = vdupq_n_s64(1uLL);
    v42[1] = v42[0];
    uint64_t v43 = 1;
    if (InferEWOutputDimsWithImplicitBroadcast((const ZinTensorDimensions *)(v4 + 8), (const ZinTensorDimensions *)(v4 + 128), (ZinTensorDimensions *)v42))ZinAssertImpl("Cannot infer ElementWise output dimension"); {
    ZinBroadcastLayerUtils::GetBroadcastDimensionMap(v7, (const ZinTensorDimensions *)v42, v41);
    }
    this = ZinBroadcastLayerUtils::GetBroadcastDimensionMap(v8, (const ZinTensorDimensions *)v42, v40);
    if (v41[40])
    {
      if (*((char *)a2 + 47) >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 + 47);
      }
      else {
        size_t v9 = *((void *)a2 + 4);
      }
      int8x16_t v10 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 7);
      if (SBYTE7(v29) < 0) {
        int8x16_t v10 = (void **)__p[0];
      }
      if (v9)
      {
        if (*((char *)a2 + 47) >= 0) {
          int8x16_t v11 = (char *)a2 + 24;
        }
        else {
          int8x16_t v11 = (char *)*((void *)a2 + 3);
        }
        memmove(v10, v11, v9);
      }
      strcpy((char *)v10 + v9, "_bcast0");
      ZinObjectNameFactory::ZinObjectNameFactory(&v39, __p);
      if (SBYTE7(v29) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = *(void *)(v6 + 8);
      long long v32 = *(_OWORD *)(v12 + 64);
      long long v33 = *(_OWORD *)(v12 + 80);
      long long v34 = *(_OWORD *)(v12 + 96);
      int v35 = *(_DWORD *)(v12 + 112);
      *(_OWORD *)long long __p = *(_OWORD *)v12;
      long long v29 = *(_OWORD *)(v12 + 16);
      long long v30 = *(_OWORD *)(v12 + 32);
      long long v31 = *(_OWORD *)(v12 + 48);
      int8x16_t v13 = operator new(0x78uLL);
      unint64_t v37 = (char *)v13 + 120;
      unint64_t v38 = (char *)v13 + 120;
      long long v14 = v33;
      v13[4] = v32;
      v13[5] = v14;
      v13[6] = v34;
      *((_DWORD *)v13 + 28) = v35;
      long long v15 = v29;
      *int8x16_t v13 = *(_OWORD *)__p;
      v13[1] = v15;
      long long v16 = v31;
      void v13[2] = v30;
      v13[3] = v16;
      unint64_t v36 = v13;
      ZinBuilder::CreateBroadcast();
    }
    if (v40[40])
    {
      if (*((char *)a2 + 47) >= 0) {
        size_t v17 = *((unsigned __int8 *)a2 + 47);
      }
      else {
        size_t v17 = *((void *)a2 + 4);
      }
      unint64_t v18 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v17 + 7);
      if (SBYTE7(v29) < 0) {
        unint64_t v18 = (void **)__p[0];
      }
      if (v17)
      {
        if (*((char *)a2 + 47) >= 0) {
          unint64_t v19 = (char *)a2 + 24;
        }
        else {
          unint64_t v19 = (char *)*((void *)a2 + 3);
        }
        memmove(v18, v19, v17);
      }
      strcpy((char *)v18 + v17, "_bcast1");
      ZinObjectNameFactory::ZinObjectNameFactory(&v39, __p);
      if (SBYTE7(v29) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v20 = *(void *)(v6 + 8);
      long long v21 = *(_OWORD *)(v20 + 200);
      long long v32 = *(_OWORD *)(v20 + 184);
      long long v33 = v21;
      long long v34 = *(_OWORD *)(v20 + 216);
      int v35 = *(_DWORD *)(v20 + 232);
      long long v22 = *(_OWORD *)(v20 + 136);
      *(_OWORD *)long long __p = *(_OWORD *)(v20 + 120);
      long long v29 = v22;
      long long v23 = *(_OWORD *)(v20 + 168);
      long long v30 = *(_OWORD *)(v20 + 152);
      long long v31 = v23;
      uint64_t v24 = operator new(0x78uLL);
      unint64_t v37 = (char *)v24 + 120;
      unint64_t v38 = (char *)v24 + 120;
      long long v25 = v33;
      v24[4] = v32;
      v24[5] = v25;
      v24[6] = v34;
      *((_DWORD *)v24 + 28) = v35;
      long long v26 = v29;
      *uint64_t v24 = *(_OWORD *)__p;
      v24[1] = v26;
      long long v27 = v31;
      void v24[2] = v30;
      v24[3] = v27;
      unint64_t v36 = v24;
      ZinBuilder::CreateBroadcast();
    }
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
  }
  return this;
}

void sub_2112F741C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a44) {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a39);
  }
  if (*(unsigned char *)(v44 - 120)) {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v44 - 160);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrPEElementWiseUnit::CreateReductionLayer(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 2224)) {
    operator new();
  }
  std::__throw_bad_optional_access[abi:ne180100]();
}

void sub_2112F777C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  _Unwind_Resume(a1);
}

void ZinIrPEElementWiseUnit::CreateLayer(unsigned char *a1, uint64_t a2, ZinIrTensor ***a3)
{
  if (a1[2112]) {
    operator new();
  }
  ZinIrPEUnit::CreateCommonSubLayers(a1, (uint64_t)v28);
  v26[1] = 0;
  v26[2] = (ZinBroadcastLayer *)v28[0];
  v26[3] = 0;
  long long v27 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = v28[1];
  uint64_t v25 = 0;
  v26[0] = 0;
  ZinIrPEElementWiseUnit::CreateBroadcastLayers((uint64_t)a1, **a3, &v27, v26);
  uint64_t v16 = v28[3];
  uint64_t v17 = v28[5];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v10 = 0;
  LOBYTE(v11) = 0;
  char v12 = 0;
  int v13 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  long long __p = (void *)v28[2];
  LOBYTE(v9) = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = v28[6];
  if (a1[2224]) {
    ZinIrPEElementWiseUnit::CreateReductionLayer((uint64_t)a1);
  }
  ZinPELayer::GetPostScaleAndBiasFromGOC((ZinGOCLayer *)v28[4], v5);
  operator new();
}

void sub_2112F7AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v16, 0x10B3C40268D61AFLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEElementWiseUnit::CreateKernel(ZinIrPEUnit *a1, const ZinIrHalParameters *a2, ZinIrFileManager *a3, const ZinWeightFileInfo *a4, uint64_t a5, uint64_t a6, ZinIrUnitStatus *a7)
{
  if (a5) {
    ZinAssertImpl("PEElementWise does not support Espresso scale & bias format", a2, a3, a4, a5, a6, a7, v7, v8);
  }
  return ZinIrPEUnit::CreateCommonSubKernels(a1, a2, a3, a4, a7);
}

void ZinIrPEElementWiseUnit::~ZinIrPEElementWiseUnit(ZinIrPEElementWiseUnit *this)
{
  ZinIrPEElementWiseUnit::~ZinIrPEElementWiseUnit(this);

  JUMPOUT(0x21667D3C0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26C34F8B8;
  uint64_t v2 = (void **)((char *)this + 1040);
  *((void *)this + 13std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &unk_26C351AA8;
  if (*((unsigned char *)this + 2224)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 265);
  }
  if (*((unsigned char *)this + 2112)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 251);
  }
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);

  ZinIrPEUnit::~ZinIrPEUnit((ZinIrKernel **)this);
}

uint64_t ZinIrSpaceToBatchUnit::ZinIrSpaceToBatchUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = ZinIrUnit::ZinIrUnit((void *)a1, a3);
  *unint64_t v5 = &unk_26C34E9D0;
  v5[7] = &unk_26C345B80;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(void *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_26C351720;
  uint64_t v8 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 136) = v8;
  return a1;
}

void sub_2112F7D38(_Unwind_Exception *a1)
{
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSpaceToBatchUnit::TensorDimensions(ZinIrSpaceToBatchUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  if (*((void *)this + 2) - (void)v4 == 120)
  {
    uint64_t result = 0;
    *((void *)a3 + 4) = v4[5];
    uint64_t v7 = v4[2];
    uint64_t v9 = *((int *)this + 34);
    uint64_t v8 = *((int *)this + 35);
    *(void *)a3 = v4[1] * v9 * v8;
    *((void *)a3 + 1) = v7;
    uint64_t v10 = v4[3] / v8;
    uint64_t v11 = v4[4] / v9;
    *((void *)a3 + 2) = v10;
    *((void *)a3 + 3) = v11;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, @"InvalidBottomCount");
    return 3;
  }
  return result;
}

void ZinIrSpaceToBatchUnit::CreateOpcode(ZinIrSpaceToBatchUnit *this, const ZinIrHalParameters *a2)
{
}

void sub_2112F7E30(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C40468F112ELL);
  _Unwind_Resume(a1);
}

void ZinIrSpaceToBatchUnit::CreateLayer(ZinIrSpaceToBatchUnit *a1, const ZinIrHalParameters *a2)
{
}

void sub_2112F7FC4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(void *)(v1 - 96) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSpaceToBatchLayerUtils::CanBeDecomposedToReshapeTranspose(ZinSpaceToBatchLayerUtils *this, const ZinIrHalParameters *a2, ZinSpaceToBatchLayer *a3)
{
  if (*((unsigned char *)this + 1880))
  {
    uint64_t v5 = (*(uint64_t (**)(void, void, void))(***((void ***)a2 + 11) + 32))(**((void **)a2 + 11), 0, 0);
    uint64_t v6 = (*(uint64_t (**)(const ZinIrHalParameters *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    if (*(void *)(v5 + 72) <= *((void *)this + 46)
      && *(void *)(v5 + 56) <= *((void *)this + 40)
      && *(void *)(v6 + 48) <= *((void *)this + 48))
    {
      uint64_t v9 = (ZinSpaceToBatchLayerUtils *)*((void *)a2 + 2);
      ZinSpaceToBatchLayerUtils::IsTransposeEfficient(v9, this, (const std::string::value_type **)a2, v7);
    }
  }
  return 0;
}

void ZinSpaceToBatchLayerUtils::IsTransposeEfficient(ZinSpaceToBatchLayerUtils *this, ZinIrContext *a2, const std::string::value_type **a3, ZinIrOpLayer *a4)
{
  uint64_t InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a3, 0);
  ZinIrTensor::GetDimensionOrderHint((ZinIrTensor *)InputTensor, (uint64_t)&v29);
  ZinIrTensor::GetTensorSizeInBytesFromResidency((ZinIrTensor *)InputTensor, 2, (uint64_t)&v29, 0);
  if ((void)v29)
  {
    *((void *)&v29 + 1) = v29;
    operator delete((void *)v29);
  }
  long long v6 = *(_OWORD *)(InputTensor + 64);
  long long v29 = *(_OWORD *)(InputTensor + 48);
  long long v30 = v6;
  uint64_t v7 = *(void *)(InputTensor + 80);
  uint64_t v8 = *(void *)(InputTensor + 56);
  *((void *)&v29 + 1) = *(void *)(InputTensor + 72);
  *((void *)&v30 + 1) = v8;
  uint64_t v31 = v7;
  if (*(char *)(InputTensor + 47) >= 0) {
    size_t v9 = *(unsigned __int8 *)(InputTensor + 47);
  }
  else {
    size_t v9 = *(void *)(InputTensor + 32);
  }
  uint64_t v10 = &v27;
  std::string::basic_string[abi:ne180100]((uint64_t)&v27, v9 + 9);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v10 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if (*(char *)(InputTensor + 47) >= 0) {
      uint64_t v11 = (const void *)(InputTensor + 24);
    }
    else {
      uint64_t v11 = *(const void **)(InputTensor + 24);
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "_c_w_test");
  uint64_t v14 = a3[3];
  int v13 = (char *)(a3 + 3);
  char v12 = v14;
  int v15 = v13[23];
  if (v15 >= 0) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = v13[23];
  }
  else {
    std::string::size_type v17 = *((void *)v13 + 1);
  }
  uint64_t v18 = std::string::append(&v27, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  std::string::size_type v21 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(&v28, __p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  ZinObjectNameFactory::CreateName((uint64_t)&v28, 0, &v27);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  LODWORD(__p[0]) = 0;
  std::string::size_type v21 = 0;
  uint64_t v22 = 0;
  __p[1] = 0;
  int v23 = 0;
  ZinIrTensor::CreateTensor();
}

void sub_2112F8454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrLayerSplitInfo::Part::Constraints::ApplyTo(ZinIrLayerSplitInfo::Part::Constraints *this, uint64_t **a2)
{
  Hal = ZinIrTarget::GetHal(a2[2], (ZinIrTarget *)a2[2][20]);
  (*(void (**)(uint64_t *))(*Hal + 16))(Hal);
  operator new();
}

void sub_2112F886C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLayerSplitInfo::AppendNonCompressed(uint64_t *a1, uint64_t a2, uint64_t a3, const ZinIrLayerSplitInfo::Part::Constraints *a4)
{
  ZinIrLayerSplitInfo::Part::CreateNonCompressed(a3, a4, (uint64_t)&v8);
  if (a2)
  {
    unint64_t v6 = a1[1];
    do
    {
      if (v6 >= a1[2])
      {
        unint64_t v6 = std::vector<ZinIrLayerSplitInfo::Part>::__push_back_slow_path<ZinIrLayerSplitInfo::Part const&>(a1, (uint64_t)&v8);
      }
      else
      {
        *(void *)unint64_t v6 = v8;
        std::__optional_copy_base<ZinIrLayerSplitInfo::Part::Constraints,false>::__optional_copy_base[abi:ne180100]((ZinIrLayerSplitInfo::Part::Constraints *)(v6 + 8), (const ZinIrLayerSplitInfo::Part::Constraints *)v9);
        *(_DWORD *)(v6 + 72std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v9[178];
        v6 += 728;
        a1[1] = v6;
      }
      a1[1] = v6;
      --a2;
    }
    while (a2);
  }
  return std::__optional_destruct_base<ZinIrLayerSplitInfo::Part::Constraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v9);
}

void sub_2112F8964(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<ZinIrLayerSplitInfo::Part::Constraints,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLayerSplitInfo::GetNumOfChannels(ZinIrLayerSplitInfo *this)
{
  uint64_t v1 = *(_DWORD **)this;
  uint64_t v2 = (_DWORD *)*((void *)this + 1);
  if (*(_DWORD **)this == v2) {
    return 0;
  }
  int v3 = 0;
  do
  {
    v3 += *v1;
    v1 += 182;
  }
  while (v1 != v2);
  return v3;
}

void ZinIrLayerBatchSplitInfo::AppendBatchSplit(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  if (v4 == *a3)
  {
    if (a2)
    {
      uint64_t v19 = 0;
      uint64_t v20 = (void *)(a1 + 16);
      std::string::size_type v21 = *(void **)(a1 + 8);
      do
      {
        if ((unint64_t)v21 >= *v20)
        {
          int v23 = *(void **)a1;
          uint64_t v24 = ((uint64_t)v21 - *(void *)a1) >> 3;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61) {
LABEL_41:
          }
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          uint64_t v26 = *v20 - (void)v23;
          if (v26 >> 2 > v25) {
            unint64_t v25 = v26 >> 2;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v27);
            int v23 = *(void **)a1;
            std::string::size_type v21 = *(void **)(a1 + 8);
          }
          else
          {
            uint64_t v28 = 0;
          }
          long long v29 = &v28[8 * v24];
          *(void *)long long v29 = 1;
          uint64_t v22 = v29 + 8;
          while (v21 != v23)
          {
            uint64_t v30 = *--v21;
            *((void *)v29 - 1) = v30;
            v29 -= 8;
          }
          *(void *)a1 = v29;
          *(void *)(a1 + 8) = v22;
          *(void *)(a1 + 16) = &v28[8 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *std::string::size_type v21 = 1;
          uint64_t v22 = v21 + 1;
        }
        *(void *)(a1 + 8) = v22;
        ++v19;
        std::string::size_type v21 = v22;
      }
      while (v19 != a2);
    }
  }
  else
  {
    unint64_t v6 = (void *)(a1 + 16);
    uint64_t v7 = *(void **)(a1 + 8);
    do
    {
      uint64_t v8 = *v5;
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v10 = *(void **)a1;
        uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          goto LABEL_41;
        }
        uint64_t v13 = *v6 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v14);
          uint64_t v10 = *(void **)a1;
          uint64_t v7 = *(void **)(a1 + 8);
        }
        else
        {
          int v15 = 0;
        }
        uint64_t v16 = &v15[8 * v11];
        *(void *)uint64_t v16 = v8;
        size_t v9 = v16 + 8;
        while (v7 != v10)
        {
          uint64_t v17 = *--v7;
          *((void *)v16 - 1) = v17;
          v16 -= 8;
        }
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 16) = &v15[8 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *uint64_t v7 = v8;
        size_t v9 = v7 + 1;
      }
      *(void *)(a1 + 8) = v9;
      ++v5;
      uint64_t v7 = v9;
    }
    while (v5 != v4);
  }
}

BOOL ZinValidateKernelDimension::IsSmallKernelHeightForPool(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 28);
  if (v2 > *(void *)(a1 + 32) && v3 == 2) {
    return 0;
  }
  return v2 <= *(void *)(a1 + 8) || v3 != 1;
}

BOOL ZinValidateKernelDimension::IsSmallKernelWidthForPool(void *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 24);
  if (*(void *)a2 > a1[3] && v2 == 2) {
    return 0;
  }
  return *(void *)a2 <= *a1 || v2 != 1;
}

uint64_t ZinValidateKernelDimension::IsSmallKernelDepthForPool(void *a1, uint64_t a2, int a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  int v4 = *(_DWORD *)(a2 + 32);
  if (a3)
  {
    if ((v3 <= a1[5] || v4 != 2) && (v3 <= a1[2] || v4 != 1)) {
      return 1;
    }
  }
  else if ((v3 <= a1[6] || v4 != 1) && (v3 <= a1[7] || v4 != 2))
  {
    return 1;
  }
  return 0;
}

void **ZinValidateKernelDimension::DecomposeToParts@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, unsigned int a5@<W5>, uint64_t a6@<X8>)
{
  BOOL v12 = IsFullyConnected(a4[3], *(void *)a3, *(int *)(a3 + 48), *(int *)(a3 + 52));
  BOOL v13 = IsFullyConnected(a4[2], *(void *)(a3 + 8), *(int *)(a3 + 56), *(int *)(a3 + 60));
  BOOL v14 = IsFullyConnected(a4[4], *(void *)(a3 + 16), *(int *)(a3 + 64), *(int *)(a3 + 68));
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0;
  unsigned int v42 = a2;
  BOOL v40 = v12;
  ZinMirPoolUtils::GetMaxKernelSize(a1, a2, (_DWORD *)a3, a5, v12, v13, v14, &v54, &v53, &v52);
  uint64_t result = (void **)a6;
  uint64_t v43 = 0;
  int v16 = 0;
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(_DWORD *)(a6 + 24) = 1065353216;
  uint64_t v17 = *(void *)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  uint64_t v19 = *(void *)(a3 + 16);
  BOOL v20 = *(void *)a3 > v54;
  BOOL v21 = v18 > v53;
  BOOL v22 = v19 > v52;
  float v23 = 1.0;
  unint64_t v37 = "Kernel width must be a power of 2.";
  __format = "PadLeft (%d) and PadRight (%d) must be 0.";
  int64x2_t v41 = vdupq_n_s64(1uLL);
  char v39 = !v14;
  do
  {
    int64x2_t v44 = v41;
    uint64_t v45 = 1;
    *(void *)&long long v24 = 0x100000001;
    *((void *)&v24 + 1) = 0x100000001;
    long long v46 = v24;
    uint64_t v47 = 0x100000001;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v48 = 0;
    unsigned int v51 = v42;
    if (v20)
    {
      v44.i64[0] = 2;
      LODWORD(v46) = 2;
      LODWORD(v48) = 0;
      if ((v17 & v40) == 1)
      {
        HIDWORD(v48) = 1;
        float v25 = (float)v17++;
        float v23 = v23 * (float)((float)v17 / v25);
      }
      else if (v17)
      {
        goto LABEL_48;
      }
      uint64_t v26 = *(unsigned int *)(a3 + 48);
      uint64_t v27 = *(unsigned int *)(a3 + 52);
      if (*(void *)(a3 + 48)) {
        goto LABEL_44;
      }
      if (v17 >= 0) {
        uint64_t v29 = v17;
      }
      else {
        uint64_t v29 = v17 + 1;
      }
      uint64_t v17 = v29 >> 1;
      BOOL v20 = v29 >> 1 > v54;
      if (!v21)
      {
LABEL_17:
        BOOL v21 = 0;
        if ((v43 & 0x100000000) == 0)
        {
          v44.i64[1] = v18;
          DWORD1(v46) = *(_DWORD *)(a3 + 28);
          uint64_t v49 = *(void *)(a3 + 56);
        }
        HIDWORD(v43) = 1;
        if (v22)
        {
LABEL_20:
          uint64_t v45 = 2;
          DWORD2(v46) = 2;
          HIDWORD(v47) = 1;
          uint64_t v50 = 0;
          uint64_t v26 = *(unsigned int *)(a3 + 64);
          uint64_t v27 = *(unsigned int *)(a3 + 68);
          if (!*(void *)(a3 + 64))
          {
            char v30 = v39;
            if ((v19 & 1) == 0) {
              char v30 = 1;
            }
            if ((v30 & 1) == 0)
            {
              HIDWORD(v5std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
              float v31 = (float)v19++;
              float v23 = (float)((float)v19 / v31) * v23;
LABEL_34:
              if (v19 >= 0) {
                uint64_t v33 = v19;
              }
              else {
                uint64_t v33 = v19 + 1;
              }
              uint64_t v19 = v33 >> 1;
              BOOL v22 = v33 >> 1 > v52;
              goto LABEL_38;
            }
            if ((v19 & 1) == 0) {
              goto LABEL_34;
            }
            unint64_t v36 = "Kernel depth must be a power of 2.";
LABEL_47:
            unint64_t v37 = (char *)v36;
LABEL_48:
            ZinAssertImpl(v37);
          }
          int v35 = "PadFront (%d) and PadBack (%d) must be 0.";
LABEL_43:
          __format = (char *)v35;
LABEL_44:
          ZinAssertImpl(__format, v26, v27);
        }
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v20 = 0;
      if ((v16 & 1) == 0)
      {
        v44.i64[0] = v17;
        LODWORD(v46) = *(_DWORD *)(a3 + 24);
        uint64_t v48 = *(void *)(a3 + 48);
      }
      int v16 = 1;
      if (!v21) {
        goto LABEL_17;
      }
    }
    v44.i64[1] = 2;
    DWORD1(v46) = 2;
    LODWORD(v47) = 1;
    uint64_t v49 = 0;
    uint64_t v27 = *(unsigned int *)(a3 + 56);
    uint64_t v26 = *(unsigned int *)(a3 + 60);
    if (*(void *)(a3 + 56))
    {
      int v35 = "PadTop (%d) and PadBot (%d) must be 0.";
      goto LABEL_43;
    }
    if ((v18 & v13) == 1)
    {
      HIDWORD(v49) = 1;
      float v28 = (float)v18++;
      float v23 = (float)((float)v18 / v28) * v23;
    }
    else if (v18)
    {
      unint64_t v36 = "Kernel height must be a power of 2.";
      goto LABEL_47;
    }
    if (v18 >= 0) {
      uint64_t v32 = v18;
    }
    else {
      uint64_t v32 = v18 + 1;
    }
    uint64_t v18 = v32 >> 1;
    BOOL v21 = v32 >> 1 > v53;
    if (v22) {
      goto LABEL_20;
    }
LABEL_30:
    BOOL v22 = 0;
    if ((v43 & 1) == 0)
    {
      uint64_t v45 = v19;
      DWORD2(v46) = *(_DWORD *)(a3 + 32);
      uint64_t v50 = *(void *)(a3 + 64);
    }
    LODWORD(v43) = 1;
LABEL_38:
    long long v34 = result;
    ZinIrKernelSizeSplitInfo::Append(result, &v44);
    uint64_t result = v34;
  }
  while ((v16 & HIDWORD(v43) & v43 & 1) == 0);
  *((float *)v34 + 6) = v23;
  return result;
}

void sub_2112F9058(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrKernelSizeSplitInfo::Append(void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (unsigned char *)*a1) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x199999999999999) {
      unint64_t v15 = 0x333333333333333;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v4, v15);
    }
    else {
      int v16 = 0;
    }
    uint64_t v17 = &v16[80 * v12];
    uint64_t v18 = &v16[80 * v15];
    *(_OWORD *)uint64_t v17 = *a2;
    long long v19 = a2[1];
    long long v20 = a2[2];
    long long v21 = a2[4];
    *((_OWORD *)v17 + 3) = a2[3];
    *((_OWORD *)v17 + 4) = v21;
    *((_OWORD *)v17 + 1) = v19;
    *((_OWORD *)v17 + 2) = v20;
    uint64_t v11 = v17 + 80;
    float v23 = (char *)*a1;
    BOOL v22 = (char *)a1[1];
    if (v22 != *a1)
    {
      do
      {
        *((_OWORD *)v17 - 5) = *((_OWORD *)v22 - 5);
        long long v24 = *((_OWORD *)v22 - 4);
        long long v25 = *((_OWORD *)v22 - 3);
        long long v26 = *((_OWORD *)v22 - 2);
        *(_OWORD *)(v17 - 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(v22 - 20);
        *((_OWORD *)v17 - 3) = v25;
        *((_OWORD *)v17 - 2) = v26;
        *((_OWORD *)v17 - 4) = v24;
        v17 -= 80;
        v22 -= 80;
      }
      while (v22 != v23);
      BOOL v22 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v11;
    a1[2] = v18;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    long long v8 = a2[1];
    long long v9 = a2[2];
    long long v10 = a2[4];
    v7[3] = a2[3];
    v7[4] = v10;
    v7[1] = v8;
    void v7[2] = v9;
    uint64_t v11 = v7 + 5;
  }
  a1[1] = v11;
}

uint64_t ZinIrCodegenHandleTds<4u>(uint64_t **a1, unsigned int a2, uint64_t a3, unsigned int *a4, CFArrayRef *a5)
{
  v118[2] = *MEMORY[0x263EF8340];
  uint64_t v115 = (uint64_t)&v115;
  BOOL v116 = &v115;
  uint64_t v117 = 0;
  uint64_t v8 = ZinIrCodegenHandleTdsMakeList<4u>(a1, a2, a3, &v115, (uint64_t)a4, a5);
  if (v8)
  {
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      ZinIrCodegenHandleTds<4u>(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    size_t v17 = *a4;
    if (v17)
    {
      uint64_t v18 = (char *)malloc_type_calloc(v17, 4uLL, 0x100004052888210uLL);
      if (v18)
      {
        uint64_t v8 = ZinIrCodegenValidateTds<4u>(*a1, (uint64_t)a1[3], (uint64_t)&v115);
        if (v8)
        {
          BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v19) {
            ZinIrCodegenHandleTds<4u>(v19, v20, v21, v22, v23, v24, v25, v26);
          }
          free(v18);
        }
        else
        {
          ZinIrMemoryPool::GetSections((uint64_t)a1[3], 1, v105);
          uint64_t v37 = *(void *)(*(void *)&v105[8] + 16);
          std::__list_imp<ZinIrSection *>::clear(v105);
          unint64_t v38 = v116;
          if (v116 != &v115)
          {
            uint64_t v102 = 8 - (void)v18;
            unint64_t v100 = v18;
            uint64_t v101 = 144 - (void)v18;
            do
            {
              char v39 = (uint64_t *)v38[1];
              if (v39 == &v115) {
                uint64_t v40 = 0;
              }
              else {
                uint64_t v40 = v39[2];
              }
              uint64_t v41 = v38[2];
              uint64_t v42 = *(void *)(v41 + 200);
              std::string::basic_string[abi:ne180100]<0>(&v111, "__nid0__tid");
              std::to_string(&v110, *(unsigned __int16 *)(v42 + 8));
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v43 = &v110;
              }
              else {
                uint64_t v43 = (std::string *)v110.__r_.__value_.__r.__words[0];
              }
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v110.__r_.__value_.__l.__size_;
              }
              uint64_t v45 = std::string::append(&v111, (const std::string::value_type *)v43, size);
              long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v112.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&__p, "__");
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v48 = __p.__r_.__value_.__l.__size_;
              }
              uint64_t v49 = std::string::append(&v112, (const std::string::value_type *)p_p, v48);
              long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
              *(void *)&v105[16] = *((void *)&v49->__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v105 = v50;
              v49->__r_.__value_.__l.__size_ = 0;
              v49->__r_.__value_.__r.__words[2] = 0;
              v49->__r_.__value_.__r.__words[0] = 0;
              int v51 = *(char *)(v41 + 183);
              if (v51 >= 0) {
                uint64_t v52 = (const std::string::value_type *)(v41 + 160);
              }
              else {
                uint64_t v52 = *(const std::string::value_type **)(v41 + 160);
              }
              if (v51 >= 0) {
                std::string::size_type v53 = *(unsigned __int8 *)(v41 + 183);
              }
              else {
                std::string::size_type v53 = *(void *)(v41 + 168);
              }
              uint64_t v54 = std::string::append((std::string *)v105, v52, v53);
              long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              std::string::size_type v114 = v54->__r_.__value_.__r.__words[2];
              long long v113 = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              if ((v105[23] & 0x80000000) != 0) {
                operator delete(*(void **)v105);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v112.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v110.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v111.__r_.__value_.__l.__data_);
              }
              memset(&v112, 0, sizeof(v112));
              if (v40)
              {
                uint64_t v56 = *(void *)(v40 + 200);
                std::string::basic_string[abi:ne180100]<0>(&v110, "__nid0__tid");
                std::to_string(&__p, *(unsigned __int16 *)(v56 + 8));
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v57 = &__p;
                }
                else {
                  int v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v58 = __p.__r_.__value_.__l.__size_;
                }
                int v59 = std::string::append(&v110, (const std::string::value_type *)v57, v58);
                long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
                v111.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v60;
                v59->__r_.__value_.__l.__size_ = 0;
                v59->__r_.__value_.__r.__words[2] = 0;
                v59->__r_.__value_.__r.__words[0] = 0;
                std::string::basic_string[abi:ne180100]<0>(v107, "__");
                if ((v108 & 0x80u) == 0) {
                  int v61 = v107;
                }
                else {
                  int v61 = (void **)v107[0];
                }
                if ((v108 & 0x80u) == 0) {
                  std::string::size_type v62 = v108;
                }
                else {
                  std::string::size_type v62 = (std::string::size_type)v107[1];
                }
                int v63 = std::string::append(&v111, (const std::string::value_type *)v61, v62);
                BOOL v64 = v18;
                long long v65 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                *(void *)&v105[16] = *((void *)&v63->__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v105 = v65;
                v63->__r_.__value_.__l.__size_ = 0;
                v63->__r_.__value_.__r.__words[2] = 0;
                v63->__r_.__value_.__r.__words[0] = 0;
                uint64_t v66 = v40;
                int v69 = *(const std::string::value_type **)(v40 + 160);
                uint64_t v68 = v40 + 160;
                uint64_t v67 = v69;
                int v70 = *(char *)(v68 + 23);
                if (v70 >= 0) {
                  int v71 = (const std::string::value_type *)v68;
                }
                else {
                  int v71 = v67;
                }
                if (v70 >= 0) {
                  std::string::size_type v72 = *(unsigned __int8 *)(v68 + 23);
                }
                else {
                  std::string::size_type v72 = *(void *)(v68 + 8);
                }
                int v73 = std::string::append((std::string *)v105, v71, v72);
                std::string::size_type v74 = v73->__r_.__value_.__r.__words[0];
                v118[0] = v73->__r_.__value_.__l.__size_;
                *(void *)((char *)v118 + 7) = *(std::string::size_type *)((char *)&v73->__r_.__value_.__r.__words[1]
                                                                          + 7);
                char v75 = HIBYTE(v73->__r_.__value_.__r.__words[2]);
                v73->__r_.__value_.__l.__size_ = 0;
                v73->__r_.__value_.__r.__words[2] = 0;
                v73->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v112.__r_.__value_.__l.__data_);
                }
                v112.__r_.__value_.__r.__words[0] = v74;
                v112.__r_.__value_.__l.__size_ = v118[0];
                *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v118 + 7);
                *((unsigned char *)&v112.__r_.__value_.__s + 23) = v75;
                if ((v105[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v105);
                }
                uint64_t v40 = v66;
                if ((char)v108 < 0) {
                  operator delete(v107[0]);
                }
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v111.__r_.__value_.__l.__data_);
                }
                uint64_t v18 = v64;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v110.__r_.__value_.__l.__data_);
                }
              }
              int v76 = &v18[*(_DWORD *)(v41 + 184) & 0xFFFFFFFC];
              *(_DWORD *)int v76 = *(_DWORD *)(v42 + 8);
              *((_DWORD *)v76 + 1) = *(_DWORD *)(v42 + 12);
              *((_DWORD *)v76 + 2) = *(_DWORD *)(v42 + 16);
              *((_DWORD *)v76 + 3) = *(_DWORD *)(v42 + 20);
              *((_DWORD *)v76 + 4) = *(_DWORD *)(v42 + 24);
              if (v40) {
                AddRelocation((uint64_t)&v112, v37, v76 + 20 - v18, 0, a1[7]);
              }
              unint64_t v104 = v38;
              *((_DWORD *)v76 + 5) = *(_DWORD *)(v42 + 28);
              *((_DWORD *)v76 + 6) = *(_DWORD *)(v42 + 32);
              if (*(unsigned char *)(v42 + 27))
              {
                int v77 = v76 + 32;
                *((_DWORD *)v76 + 7) = *(_DWORD *)(v42 + 36);
              }
              else
              {
                int v77 = v76 + 28;
              }
              uint64_t v78 = **a1;
              if (*(_DWORD *)(v78 + 8))
              {
                uint64_t v79 = 0;
                unint64_t v80 = 0;
                uint64_t v81 = (uint64_t)v77 + v102;
                do
                {
                  int v82 = (void *)(*(void *)(v42 + 40) + v79);
                  uint64_t v83 = v82[1];
                  *(void *)int v77 = *v82;
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v41 + 8) - *(void *)v41) >> 3) > v80) {
                    AddRelocation(*(void *)v41 + v79, v37, v81, 0, a1[7]);
                  }
                  int v84 = v77 + 4;
                  *((void *)v77 + 1) = v83;
                  ++v80;
                  v79 += 24;
                  v81 += 16;
                  v77 += 4;
                }
                while (v80 < *(unsigned int *)(v78 + 8));
                int v77 = v84;
                uint64_t v18 = v100;
              }
              long long v85 = *(_OWORD *)(v42 + 80);
              long long v86 = *(_OWORD *)(v42 + 96);
              *(_OWORD *)int v77 = *(_OWORD *)(v42 + 64);
              *((_OWORD *)v77 + 1) = v85;
              *((_OWORD *)v77 + 2) = v86;
              long long v87 = *(_OWORD *)(v42 + 136);
              *(_OWORD *)unint64_t v105 = *(_OWORD *)(v42 + 120);
              *(_OWORD *)&v105[16] = v87;
              long long v106 = *(_OWORD *)(v42 + 152);
              uint64_t v88 = (char *)(v77 + 14);
              *((void *)v77 + 6) = *(void *)v105;
              uint64_t v89 = **(void **)(v41 + 128);
              if (v89) {
                AddRelocation(v89 + 160, v37, v88 - v18, 0, a1[7]);
              }
              uint64_t v90 = 0;
              *(_OWORD *)uint64_t v88 = *(_OWORD *)&v105[8];
              do
              {
                v77[v90 + 18] = *(_DWORD *)&v105[v90 * 4 + 24];
                ++v90;
              }
              while (v90 != 4);
              long long v91 = *(_OWORD *)(v42 + 184);
              uint64_t v92 = *(void *)(v42 + 200);
              *(_OWORD *)(v77 + 22) = *(_OWORD *)(v42 + 168);
              *(_OWORD *)(v77 + 26) = v91;
              *((void *)v77 + 15) = v92;
              *(void *)&long long v91 = *(void *)(v42 + 232);
              *((_OWORD *)v77 + 8) = *(_OWORD *)(v42 + 216);
              *((void *)v77 + 18) = v91;
              long long v93 = *(_OWORD *)(v42 + 256);
              *((void *)v77 + 19) = *(void *)(v42 + 248);
              uint64_t v94 = *(void *)(v41 + 152);
              if (v94)
              {
                long long v103 = v93;
                AddRelocation(v94 + 160, v37, (uint64_t)v77 + v101 + 16, 0, a1[7]);
                long long v93 = v103;
              }
              *((_OWORD *)v77 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v93;
              uint64_t v95 = *(unsigned int *)(v41 + 184);
              unsigned int v96 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 16))(v42);
              AddSymbol((uint64_t)&v113, v37, v95, 4 * v96, a1[7]);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v112.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v114) < 0) {
                operator delete((void *)v113);
              }
              unint64_t v38 = (uint64_t *)v104[1];
            }
            while (v38 != &v115);
            for (uint64_t i = v116; i != &v115; uint64_t i = (uint64_t *)i[1])
            {
              uint64_t v98 = (ZinAneInstruction *)i[2];
              if (v98)
              {
                ZinAneInstruction::~ZinAneInstruction(v98);
                MEMORY[0x21667D3C0]();
              }
            }
          }
          uint64_t v8 = 0;
          *(void *)(v37 + 24) = v18;
        }
      }
      else
      {
        BOOL v27 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v27) {
          ZinIrCodegenHandleTds<4u>(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        for (int j = v116; j != &v115; int j = (uint64_t *)j[1])
        {
          unint64_t v36 = (ZinAneInstruction *)j[2];
          if (v36)
          {
            ZinAneInstruction::~ZinAneInstruction(v36);
            MEMORY[0x21667D3C0]();
          }
        }
        ZinIrNetworkStatus::SetError(a5, @"MemoryAllocationFailure");
        uint64_t v8 = 3;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v115);
  return v8;
}

void sub_2112F9954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  std::__list_imp<ZinIrSection *>::clear((void *)(v57 - 160));
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTdsMakeList<4u>(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, CFArrayRef *a6)
{
  v111[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[4];
  if (a4[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Warning: tds list is already populated\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Clearing list contents without explicit deallocation\n", buf, 2u);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(a4);
  BOOL v9 = (ZinIrOpLayer **)*v8;
  uint64_t v10 = (ZinIrOpLayer **)v8[1];
  if ((ZinIrOpLayer **)*v8 == v10)
  {
    uint64_t v11 = (ZinIrOpLayer **)*v8;
  }
  else
  {
    do
    {
      if (ZinIrOpLayer::IsANELayer(*v9)) {
        break;
      }
      ++v9;
    }
    while (v9 != v10);
    BOOL v9 = (ZinIrOpLayer **)*v8;
    uint64_t v11 = (ZinIrOpLayer **)v8[1];
  }
  do
  {
    uint64_t v12 = v11;
    if (v11 == v9) {
      break;
    }
    --v11;
  }
  while (!ZinIrOpLayer::IsANELayer(*(v12 - 1)));
  uint64_t v92 = **a1;
  long long v93 = (ZinIrCompilerParameters *)(*a1)[1];
  memset(v103, 0, sizeof(v103));
  int v104 = 1065353216;
  memset(v101, 0, sizeof(v101));
  int v102 = 1065353216;
  uint64_t v14 = *v8;
  uint64_t v13 = v8[1];
  uint64_t v89 = (uint64_t)v8;
  unint64_t v15 = (v13 - *v8) >> 3;
  std::string __p = 0;
  int v99 = 0;
  uint64_t v100 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>,std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>>((char *)&__p, v13, v13, v14, v14, v15);
  size_t v17 = (ZinIrOpLayer **)__p;
  uint64_t v16 = v99;
  if (__p != v99)
  {
    do
    {
      uint64_t v97 = 0;
      uint64_t v97 = *v17;
      if (ZinIrOpLayer::IsANELayer(v97))
      {
        v96[3] = 0;
        operator new();
      }
      ++v17;
    }
    while (v17 != v16);
  }
  ReassignTaskIDs<17u>((uint64_t)a4);
  if (!ZinIrCompilerParameters::getEnableKernelRewind(v93) && !*(unsigned char *)(v92 + 2088)
    || (uint64_t v18 = ZinCodegenEnableInterKernelReuse(4, a1, (uint64_t)a4), !v18))
  {
    BOOL v19 = *(_DWORD **)(*(void *)(a4[1] + 16) + 200);
    v19[44] |= 0x30u;
    v19[48] |= 0x30u;
    (*(void (**)(_DWORD *, uint64_t, void))(*(void *)v19 + 32))(v19, 24, 0);
    if ((void *)a4[1] != a4)
    {
      uint64_t v20 = 0;
      uint64_t v21 = a4;
      do
      {
        uint64_t v22 = *(void *)(*(void *)(*v21 + 16) + 200);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 368))(v22, v20);
        uint64_t v23 = *(void *)(*(void *)(*v21 + 16) + 200);
        uint64_t v20 = (*(unsigned int (**)(uint64_t))(*(void *)v23 + 16))(v23) - 1;
        uint64_t v21 = (void *)*v21;
      }
      while (v21 != (void *)a4[1]);
    }
    if (SetInstructionMemOffset<6u>((uint64_t)a4, v92))
    {
      BOOL v24 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v24) {
        ZinIrCodegenHandleTdsMakeList<4u>(v24, v25, v26, v27, v28, v29, v30, v31);
      }
LABEL_26:
      uint64_t v18 = 3;
      goto LABEL_27;
    }
    uint64_t v33 = *(void *)(*a4 + 16);
    int v34 = *(_DWORD *)(v33 + 184);
    unsigned int v35 = v34 + 4 * (*(uint64_t (**)(void))(**(void **)(v33 + 200) + 16))(*(void *)(v33 + 200));
    if ((v34 & 3) != 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinIrCodegenHandleTdsMakeList<6u>(v35);
      }
      goto LABEL_26;
    }
    *(_DWORD *)a5 = v35 >> 2;
    memset(buf, 0, sizeof(buf));
    long long v106 = xmmword_211ED50C0;
    char v107 = 0;
    uint64_t v108 = 0;
    std::string v110 = 0;
    v111[0] = 0;
    int v109 = 0;
    *(_DWORD *)uint8_t buf = a4[2];
    *(_DWORD *)&buf[4] = (*(uint64_t (**)(_DWORD *))(*(void *)v19 + 16))(v19) - 1;
    *(_DWORD *)&buf[8] = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v19 + 24))(v19, 8);
    std::vector<ZinIrOpLayer *>::reserve((void **)&v109, a4[2]);
    for (uint64_t i = a4[1]; (void *)i != a4; uint64_t i = *(void *)(i + 8))
    {
      v96[0] = *(ZinIrTensor **)(i + 16);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v101, v96))ZinAssertImpl("Incorrect internal states: codegen"); {
      uint64_t v37 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v101, v96);
      }
      unint64_t v38 = v37;
      if (!v37) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      char v39 = v110;
      if ((unint64_t)v110 >= v111[0])
      {
        uint64_t v41 = (v110 - v109) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v42 = (uint64_t)(v111[0] - (void)v109) >> 2;
        if (v42 <= v41 + 1) {
          unint64_t v42 = v41 + 1;
        }
        if (v111[0] - (void)v109 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v42;
        }
        if (v43) {
          int64x2_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v111, v43);
        }
        else {
          int64x2_t v44 = 0;
        }
        uint64_t v45 = &v44[8 * v41];
        *(void *)uint64_t v45 = v38[3];
        uint64_t v40 = v45 + 8;
        uint64_t v47 = v109;
        long long v46 = v110;
        if (v110 != v109)
        {
          do
          {
            uint64_t v48 = *((void *)v46 - 1);
            v46 -= 8;
            *((void *)v45 - 1) = v48;
            v45 -= 8;
          }
          while (v46 != v47);
          long long v46 = v109;
        }
        int v109 = v45;
        std::string v110 = v40;
        v111[0] = &v44[8 * v43];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *(void *)std::string v110 = v37[3];
        uint64_t v40 = v39 + 8;
      }
      std::string v110 = v40;
    }
    uint64_t v49 = a1[8];
    unint64_t v50 = v49[1];
    if (v50 >= v49[2])
    {
      uint64_t v51 = std::vector<ZinIrCodegenTDPartitionStats>::__push_back_slow_path<ZinIrCodegenTDPartitionStats const&>(a1[8], (long long *)buf);
    }
    else
    {
      std::vector<ZinIrCodegenTDPartitionStats>::__construct_one_at_end[abi:ne180100]<ZinIrCodegenTDPartitionStats const&>((uint64_t)a1[8], (long long *)buf);
      uint64_t v51 = v50 + 80;
    }
    v49[1] = v51;
    if (v109)
    {
      std::string v110 = v109;
      operator delete(v109);
    }
    uint64_t v52 = *a1;
    std::unordered_map<ZinIrOpLayer *,ZinAneInstruction *>::unordered_map((uint64_t)v94, (uint64_t)v103);
    uint64_t v53 = v52[1];
    buf[5] = *(unsigned char *)(v53 + 472);
    *(_WORD *)&buf[3] = *(_WORD *)(v53 + 100);
    uint64_t v54 = *(unsigned __int8 *)(v53 + 95);
    int v55 = (char)v54;
    if ((v54 & 0x80u) != 0) {
      uint64_t v54 = *(void *)(v53 + 80);
    }
    if (v54 == 9)
    {
      if (v55 >= 0) {
        uint64_t v56 = v53 + 72;
      }
      else {
        uint64_t v56 = *(void *)(v53 + 72);
      }
      uint64_t v57 = *(void *)v56;
      int v58 = *(unsigned __int8 *)(v56 + 8);
      BOOL v60 = v57 == 0x30336E2E67343168 && v58 == 49;
    }
    else
    {
      BOOL v60 = 0;
    }
    if (*(unsigned char *)(v53 + 536)) {
      uint8_t v61 = 1;
    }
    else {
      uint8_t v61 = v60;
    }
    buf[6] = v61;
    std::string::size_type v62 = (void *)a4[1];
    if (v62 != a4)
    {
      int v63 = (unsigned char *)v62[2];
      BOOL v64 = &v95;
      do
        BOOL v64 = (uint64_t *)*v64;
      while (v64 && (unsigned char *)v64[3] != v63);
      buf[0] = v63[199];
      buf[2] = v63[196];
      buf[1] = v63[198];
      ZinAneInstruction::HandleEventLogs((uint64_t)v63, v52);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v94);
    long long v65 = (void *)a4[1];
    if (v65 != a4)
    {
      uint64_t v67 = **a1;
      uint64_t v66 = (float *)(*a1)[1];
      uint64_t v68 = &_os_log_internal;
      while (1)
      {
        uint64_t v69 = v65[2];
        int v70 = *(unsigned __int16 **)(v69 + 200);
        unint64_t v71 = 4 * (*(unsigned int (**)(unsigned __int16 *))(*(void *)v70 + 16))(v70);
        if (*(void *)(v67 + 296) > v71 || *(void *)(v67 + 304) < v71) {
          break;
        }
        uint8x8_t v73 = (uint8x8_t)vcnt_s8((int8x8_t)v70[10]);
        v73.i16[0] = vaddlv_u8(v73);
        uint64_t v74 = *(void *)(a5 + 16);
        *(void *)(a5 + 8) += v73.u32[0];
        uint8x8_t v75 = (uint8x8_t)vcnt_s8((int8x8_t)v70[8]);
        v75.i16[0] = vaddlv_u8(v75);
        *(void *)(a5 + 16) = v74 + v75.u32[0];
        unsigned int v76 = v70[6];
        if (*(_DWORD *)(a5 + 32) > v76) {
          unsigned int v76 = *(_DWORD *)(a5 + 32);
        }
        *(_DWORD *)(a5 + 32) = v76;
        float v77 = v66[97];
        if (v77 > 0.0)
        {
          LOWORD(v72) = v70[6];
          if (v77 < (float)v72) {
            ++*(_DWORD *)(a5 + 36);
          }
        }
        LODWORD(v96[0]) = 0;
        if (ZinIrCompilerParameters::getEnforcedTdLatency((ZinIrCompilerParameters *)v66, (float *)v96))
        {
          int v78 = v70[6];
          float v79 = *(float *)v96;
          if (*(float *)v96 < (float)v78 && os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            unint64_t v80 = (void *)(v69 + 160);
            if (*(char *)(v69 + 183) < 0) {
              unint64_t v80 = (void *)*v80;
            }
            *(_DWORD *)uint8_t buf = 136315650;
            *(void *)&buf[4] = v80;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v79;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&long long v106 = (double)v78;
            _os_log_error_impl(&dword_210C72000, v68, OS_LOG_TYPE_ERROR, "Latency for Task %s is too large (>%.0f us) (%.0f)", buf, 0x20u);
          }
        }
        long long v65 = (void *)v65[1];
        if (v65 == a4) {
          goto LABEL_96;
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinIrCodegenHandleTdsMakeList<6u>();
      }
      ZinIrNetworkStatus::SetError(a6, @"InvalidTotalTDSize");
      goto LABEL_26;
    }
LABEL_96:
    uint64_t v18 = ZinIrContextSwitchValidator<4u>((uint64_t)a4);
    if (v18)
    {
      BOOL v81 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v81) {
        ZinIrCodegenHandleTdsMakeList<4u>(v81, v82, v83, v84, v85, v86, v87, v88);
      }
    }
    else
    {
      uint64_t v18 = SetTensorKernelDependency<4u>(v89, v103, a6);
      if (!v18)
      {
        if ((*((unsigned char *)v93 + 97) & 0x20) != 0) {
          ZinIrCodegen::PrintContextSwitchInfo((uint64_t)a4);
        }
        uint64_t v18 = 0;
      }
    }
  }
LABEL_27:
  if (__p)
  {
    int v99 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v101);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v103);
  return v18;
}

void sub_2112FA8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenValidateTds<4u>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4 == a3)
  {
LABEL_10:
    uint64_t v13 = ZinValidateTd<4u>::CheckKernelRewind(a3);
    if (v13)
    {
      BOOL v14 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v14) {
        ZinIrCodegenValidateTds<4u>(v14, v15, v16, v17, v18, v19, v20, v21);
      }
    }
  }
  else
  {
    int v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v9 = *(void *)(v8 + 200);
      int v11 = *(unsigned __int16 *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      if (v11 != v7) {
        break;
      }
      if (!*(unsigned char *)(v8 + 188))
      {
        uint64_t v12 = ZinValidateTd<4u>::Test(a1, a2, v10);
        if (v12)
        {
          uint64_t v13 = v12;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrCodegenValidateTds<6u>();
          }
          return v13;
        }
      }
      if (*(unsigned char *)(v8 + 198)) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a3) {
        goto LABEL_10;
      }
    }
    BOOL v22 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v22) {
      ZinIrCodegenValidateTds<1u>(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    return 3;
  }
  return v13;
}

uint64_t ZinIrContextSwitchValidator<4u>(uint64_t a1)
{
  uint64_t v48 = &v48;
  std::string __p = &v48;
  uint64_t v50 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != a1)
  {
    uint64_t v47 = 0;
    int v46 = 0;
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
    BOOL v6 = 1;
    char v7 = 1;
    while (1)
    {
      uint64_t v8 = *(void *)(v2 + 16);
      uint64_t v9 = *(_DWORD **)(v8 + 200);
      if (!v6)
      {
        if ((v5 & 1) == 0)
        {
          BOOL v29 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v29) {
            ZinIrContextSwitchValidator<4u>(v29, v30, v31, v32, v33, v34, v35, v36);
          }
LABEL_63:
          uint64_t v18 = 3;
LABEL_64:
          std::__list_imp<ZinIrSection *>::clear(&v48);
          return v18;
        }
        if (!*(unsigned char *)(v8 + 188)
          && !(*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 1)
          && (!(*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 17)
           || !(*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 18)
           || !(*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 15)
           || !(*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 16)))
        {
          goto LABEL_49;
        }
      }
      if (!(v7 & 1 | ((v5 & 1) == 0)))
      {
        int v10 = v9[31];
        if ((v10 & 0x3000000) == 0x1000000)
        {
          if ((v10 & 1) == 0 && !(*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 1))
          {
            BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v38) {
              ZinIrContextSwitchValidator<4u>(v38, v39, v40, v41, v42, v43, v44, v45);
            }
            goto LABEL_63;
          }
          char v7 = 1;
        }
        else
        {
          char v7 = 0;
        }
      }
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 2))
      {
        if ((v5 | v4)) {
          goto LABEL_49;
        }
        ++HIDWORD(v47);
        int v4 = 1;
      }
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 3))
      {
        if (v5 & 1 | ((v4 & 1) == 0)) {
          goto LABEL_49;
        }
        uint64_t v11 = *(void *)(v2 + 16);
        if (!*(void *)(v11 + 152)) {
          goto LABEL_49;
        }
        uint64_t v12 = operator new(0x18uLL);
        char v7 = 0;
        uint64_t v13 = *(void *)(v11 + 152);
        v12[1] = &v48;
        _OWORD v12[2] = v13;
        BOOL v14 = v48;
        *uint64_t v12 = v48;
        v14[1] = v12;
        uint64_t v48 = v12;
        ++v50;
        ++v3;
      }
      int v15 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 4);
      BOOL v6 = v15 == 0;
      if (v15)
      {
        if (v5 & 1 | ((v4 & 1) == 0)) {
          goto LABEL_49;
        }
        int v4 = 0;
        LODWORD(v47) = v47 + 1;
        int v5 = 1;
      }
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v9 + 24))(v9, 1))
      {
        uint64_t v16 = *(void **)(*(void *)(v2 + 16) + 128);
        if (*v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = v16[1] != 0;
        }
        uint64_t v18 = 2;
        if (v4 & 1 | ((v5 & 1) == 0) || !v17 || (v7 & 1) == 0 && (v9[31] & 0x3000000) != 0x1000000) {
          goto LABEL_64;
        }
        uint64_t v19 = (uint64_t *)__p;
        while (v19 != (uint64_t *)&v48)
        {
          uint64_t v20 = v19[2];
          uint64_t v21 = *(void **)(*(void *)(v2 + 16) + 128);
          if (v20 == *v21 || v20 == v21[1])
          {
            uint64_t v22 = *v19;
            uint64_t v23 = (uint64_t *)v19[1];
            *(void *)(v22 + 8) = v23;
            *(void *)v19[1] = v22;
            --v50;
            operator delete(v19);
            --v3;
            uint64_t v19 = v23;
          }
          else
          {
            uint64_t v19 = (uint64_t *)v19[1];
          }
        }
        char v7 = 1;
      }
      if ((*(unsigned int (**)(_DWORD *, void))(*(void *)v9 + 24))(v9, 0))
      {
        uint64_t v18 = 2;
        if ((v5 & ~v4 & 1) == 0 || v3 || v50) {
          goto LABEL_64;
        }
        int v5 = 0;
        int v3 = 0;
        ++v46;
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == a1)
      {
        int v25 = v47;
        int v24 = HIDWORD(v47);
        int v26 = v46;
        if (!v3) {
          goto LABEL_51;
        }
LABEL_49:
        uint64_t v18 = 2;
        goto LABEL_64;
      }
    }
  }
  int v25 = 0;
  int v24 = 0;
  int v26 = 0;
LABEL_51:
  uint64_t v18 = 2;
  if (v24 != v25 || v24 != v26) {
    goto LABEL_64;
  }
  for (uint64_t i = *(void *)(a1 + 8); i != a1; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v28 = *(void *)(i + 16);
    if (*(unsigned char *)(v28 + 199)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(v28 + 200) + 32))(*(void *)(v28 + 200), 0, 1);
    }
    if (*(unsigned char *)(v28 + 198))
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v28 + 200) + 32))(*(void *)(v28 + 200), 2, 1);
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v28 + 200) + 32))(*(void *)(v28 + 200), 4, 1);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v48);
  return 0;
}

void sub_2112FB068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SetTensorKernelDependency<4u>(uint64_t a1, void *a2, CFArrayRef *a3)
{
  memset(v43, 0, sizeof(v43));
  int v44 = 1065353216;
  int v3 = *(void ***)a1;
  int v4 = *(void ***)(a1 + 8);
  if (*(void ***)a1 == v4)
  {
LABEL_37:
    uint64_t v23 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v42 = *v3;
      if ((*(uint64_t (**)(void *))(*v42 + 120))(v42))
      {
        uint64_t v41 = 0;
        (*(void (**)(ZinIrTensor **__return_ptr))(*v42 + 128))(&v34);
        RootTensor = ZinIrTensor::GetRootTensor(v34);
        if (__p) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p);
        }
        uint64_t v41 = RootTensor;
        if ((*(_DWORD *)(*(void *)(*((void *)RootTensor + 12) + 64) + 8) & 0xFFFFFFFE) != 0x1C)
        {
          char v7 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v43, &v41);
          if (!v7)
          {
            ZinIrTensor::GetAllChildrenInTree(v41, (uint64_t *)&v34);
            ZinIrTensor::ConvertRawVectorFromPtrVector((uint64_t **)&v34, (char **)&v38);
            uint64_t v45 = &v34;
            std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
            uint64_t v8 = v39;
            if (v39 >= v40)
            {
              uint64_t v10 = (v39 - (unsigned char *)v38) >> 3;
              if ((unint64_t)(v10 + 1) >> 61) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v11 = (v40 - (unsigned char *)v38) >> 2;
              if (v11 <= v10 + 1) {
                unint64_t v11 = v10 + 1;
              }
              if ((unint64_t)(v40 - (unsigned char *)v38) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v12 = v11;
              }
              if (v12) {
                uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v40, v12);
              }
              else {
                uint64_t v13 = 0;
              }
              BOOL v14 = (ZinIrTensor **)&v13[8 * v10];
              *BOOL v14 = v41;
              uint64_t v9 = (uint64_t)(v14 + 1);
              uint64_t v16 = (char *)v38;
              int v15 = v39;
              if (v39 != v38)
              {
                do
                {
                  BOOL v17 = (ZinIrTensor *)*((void *)v15 - 1);
                  v15 -= 8;
                  *--BOOL v14 = v17;
                }
                while (v15 != v16);
                int v15 = (char *)v38;
              }
              BOOL v38 = v14;
              uint64_t v39 = (char *)v9;
              uint64_t v40 = &v13[8 * v12];
              if (v15) {
                operator delete(v15);
              }
            }
            else
            {
              *(void *)uint64_t v39 = v41;
              uint64_t v9 = (uint64_t)(v8 + 8);
            }
            uint64_t v39 = (char *)v9;
            uint64_t v34 = v41;
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            std::string __p = 0;
            std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v38, v9, (v9 - (uint64_t)v38) >> 3);
            char v7 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor * const,std::vector<ZinIrTensor *>>>((uint64_t)v43, &v34, (uint64_t)&v34);
            if (__p)
            {
              uint64_t v36 = __p;
              operator delete(__p);
            }
            if (v38)
            {
              uint64_t v39 = (char *)v38;
              operator delete(v38);
            }
          }
          BOOL v38 = 0;
          uint64_t v18 = v7[3];
          uint64_t v19 = v7[4];
          while (v18 != v19)
          {
            uint64_t v20 = *(void **)(*(void *)v18 + 96);
            if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v20)
              && v20[45] <= v42[45]
              && (!v38 || *((void *)v38 + 6) < v20[6]))
            {
              BOOL v38 = v20;
            }
            v18 += 8;
          }
          uint64_t v21 = *(void *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a2, &v38)[3]+ 200);
          uint64_t v34 = (ZinIrTensor *)&v42;
          uint64_t v22 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)a2, &v42, (uint64_t)&std::piecewise_construct, (void **)&v34)[3];
          (*(void (**)(void, uint64_t, void))(**(void **)(v22 + 200) + 32))(*(void *)(v22 + 200), 8, *(unsigned __int16 *)(v21 + 8));
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v22 + 200) + 24))(*(void *)(v22 + 200), 5) != 1)break; {
        }
          }
      }
      if (++v3 == v4) {
        goto LABEL_37;
      }
    }
    BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v25) {
      SetTensorKernelDependency<4u>(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    ZinIrNetworkStatus::SetError(a3, @"InvalidHWHeader");
    uint64_t v23 = 3;
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)v43);
  return v23;
}

void sub_2112FB42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

uint64_t ZinAneTd<4u>::GetField(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      return (*(_DWORD *)(a1 + 24) >> 11) & 1;
    case 1:
      return (*(_DWORD *)(a1 + 24) >> 13) & 1;
    case 2:
      unsigned int v3 = *(_DWORD *)(a1 + 24);
      return (v3 >> 15) & 1;
    case 3:
      return (*(_DWORD *)(a1 + 24) >> 14) & 1;
    case 4:
      return (*(_DWORD *)(a1 + 24) >> 12) & 1;
    case 5:
      unsigned int v4 = *(_DWORD *)(a1 + 24);
      goto LABEL_26;
    case 6:
      return (*(_DWORD *)(a1 + 24) >> 28) & 1;
    case 7:
      return (*(_DWORD *)(a1 + 24) >> 29) & 1;
    case 8:
      return *(unsigned __int16 *)(a1 + 36);
    case 9:
      return *(unsigned __int16 *)(a1 + 34);
    case 10:
      unsigned int v3 = *(_DWORD *)(a1 + 32);
      return (v3 >> 15) & 1;
    case 11:
      return (*(_DWORD *)(a1 + 32) >> 12) & 7;
    case 12:
      return (*(_DWORD *)(a1 + 176) >> 2) & 1;
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return *(unsigned __int16 *)(a1 + 16);
    case 15:
      unsigned int v5 = *(_DWORD *)(a1 + 176);
      goto LABEL_21;
    case 16:
      unsigned int v6 = *(_DWORD *)(a1 + 176);
      goto LABEL_23;
    case 17:
      unsigned int v5 = *(_DWORD *)(a1 + 192);
LABEL_21:
      uint64_t result = (v5 >> 4) & 1;
      break;
    case 18:
      unsigned int v6 = *(_DWORD *)(a1 + 192);
LABEL_23:
      uint64_t result = (v6 >> 5) & 1;
      break;
    case 23:
      uint64_t result = *(unsigned __int8 *)(a1 + 14);
      break;
    case 24:
      unsigned int v4 = *(_DWORD *)(a1 + 8);
LABEL_26:
      uint64_t result = HIBYTE(v4) & 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinAneTd<4u>::SetField(uint64_t result, int a2, __int16 a3)
{
  switch(a2)
  {
    case 0:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFFF7FF | ((a3 & 1) << 11);
      goto LABEL_12;
    case 1:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFFDFFF | ((a3 & 1) << 13);
      goto LABEL_12;
    case 2:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFF7FFF | ((a3 & 1) << 15);
      goto LABEL_12;
    case 3:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFFBFFF | ((a3 & 1) << 14);
      goto LABEL_12;
    case 4:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFFEFFF | ((a3 & 1) << 12);
      goto LABEL_12;
    case 5:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFEFFFFFF | ((a3 & 1) << 24);
      goto LABEL_12;
    case 6:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xEFFFFFFF | ((a3 & 1) << 28);
      goto LABEL_12;
    case 7:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xDFFFFFFF | ((a3 & 1) << 29);
LABEL_12:
      *(_DWORD *)(result + 24) = v3;
      return result;
    case 8:
      *(_WORD *)(result + 36) = a3;
      return result;
    case 9:
      *(_WORD *)(result + 34) = a3;
      return result;
    case 10:
      unsigned int v4 = *(_DWORD *)(result + 32) & 0xFFFF7FFF | ((a3 & 1) << 15);
      goto LABEL_17;
    case 11:
      unsigned int v4 = *(_DWORD *)(result + 32) & 0xFFFF8FFF | ((a3 & 7) << 12);
LABEL_17:
      *(_DWORD *)(result + 32) = v4;
      return result;
    case 12:
      unsigned int v5 = *(_DWORD *)(result + 176) & 0xFFFFFFFB | (4 * (a3 & 1));
      goto LABEL_21;
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
      return result;
    case 15:
      unsigned int v5 = *(_DWORD *)(result + 176) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_21;
    case 16:
      unsigned int v5 = *(_DWORD *)(result + 176) & 0xFFFFFFDF | (32 * (a3 & 1));
LABEL_21:
      *(_DWORD *)(result + 176) = v5;
      return result;
    case 17:
      unsigned int v6 = *(_DWORD *)(result + 192) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_24;
    case 18:
      unsigned int v6 = *(_DWORD *)(result + 192) & 0xFFFFFFDF | (32 * (a3 & 1));
LABEL_24:
      *(_DWORD *)(result + 192) = v6;
      break;
    case 23:
      *(unsigned char *)(result + 14) = a3;
      break;
    case 24:
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFEFFFFFF | ((a3 & 1) << 24);
      break;
    default:
      if (a2 == 50) {
        *(_WORD *)(result + 16) = a3;
      }
      break;
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleCommonMACBypassMode(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned __int8 *)a2[33];
  if (!v2)
  {
    BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v8) {
      ZinAneTd<4u>::HandleCommonMACBypassMode(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return 0;
  }
  ZinAneTd<4u>::SetUnicastEn(a1, *v2);
  *(_DWORD *)(a1 + 88) &= 0xF00FFFFF;
  ZinAneTd<4u>::SetCommonConvCfgSx(a1, 1uLL);
  ZinAneTd<4u>::SetCommonConvCfgSy(a1, 1uLL);
  ZinAneTd<4u>::SetCommonConvCfgOx(a1, 1uLL);
  ZinAneTd<4u>::SetCommonConvCfgOy(a1, 1uLL);
  uint64_t v5 = (*(uint64_t (**)(void *, void, void))(*a2 + 32))(a2, 0, 0);
  if (!ZinAneTd<4u>::SetOrReturnNumGroups(a1, *(void *)(v5 + 48))
    || !ZinAneTd<4u>::SetCommonConvCfgKw(a1, 1uLL)
    || !ZinAneTd<4u>::SetCommonConvCfgKh(a1, 1uLL))
  {
    return 0;
  }
  unint64_t v6 = *(void *)(a2[33] + 96);

  return ZinAneTd<4u>::SetUnicastCin(a1, v6);
}

BOOL ZinAneTd<4u>::HandleCommonPoolOpcode(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  if (!a2[33])
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<4u>::HandleCommonPoolOpcode(result, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  uint64_t v5 = *((void *)a2[54] + 8);
  BOOL result = ZinAneTd<4u>::SetOrReturnNumGroups(a1, a3);
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<4u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<4u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<4u>::SetCommonConvCfgOx(a1, 1uLL);
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<4u>::SetCommonConvCfgOy(a1, 1uLL);
  if (!result) {
    return result;
  }
  if (*(_DWORD *)(v5 + 104) != 2)
  {
    BOOL result = ZinAneTd<4u>::SetCommonConvCfgKw(a1, *(void *)(v5 + 16));
    if (!result) {
      return result;
    }
    BOOL result = ZinAneTd<4u>::SetCommonConvCfgKh(a1, *(void *)(v5 + 24));
    if (!result) {
      return result;
    }
    BOOL result = ZinAneTd<4u>::SetCommonConvCfgPadLeft(a1, *(int *)(v5 + 64));
    if (!result) {
      return result;
    }
    BOOL result = ZinAneTd<4u>::SetCommonConvCfgPadTop(a1, *(int *)(v5 + 72));
    if (!result) {
      return result;
    }
    goto LABEL_21;
  }
  (*((void (**)(uint64_t *__return_ptr, unsigned __int8 **))*a2 + 44))(&v16, a2);
  (*((void (**)(unint64_t *__return_ptr, unsigned __int8 **))*a2 + 41))(v15, a2);
  if (!ZinAneTd<4u>::SetCommonConvCfgKw(a1, v15[0])
    || !ZinAneTd<4u>::SetCommonConvCfgKh(a1, v15[1])
    || !ZinAneTd<4u>::SetCommonConvCfgPadLeft(a1, (int)v16)
    || !ZinAneTd<4u>::SetCommonConvCfgPadTop(a1, v17))
  {
    return 0;
  }
LABEL_21:
  ZinAneTd<4u>::SetUnicastEn(a1, *a2[33]);
  uint64_t v14 = a2[33];
  if (!*v14) {
    return 1;
  }
  ZinAneTd<4u>::SetUnicastCin(a1, *((void *)v14 + 12));
  LODWORD(v16) = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(*((void *)a2[33] + 10), (unsigned int *)(*(void *)(a1 + 280) + 32), &v16);
  if (result)
  {
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 76) & 0xFFFE0000 | v16 & 0x1FFFF;
    LODWORD(v16) = 0;
    BOOL result = ZinCodegenUtil::ValueToRegister(*((void *)a2[33] + 11), (unsigned int *)(*(void *)(a1 + 280) + 40), &v16);
    if (result)
    {
      *(_DWORD *)(a1 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 80) & 0xFFFE0000 | v16 & 0x1FFFF;
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleCommonConvOpcode(uint64_t a1, void *a2)
{
  (*(void (**)(uint64_t *__return_ptr, void *))(*a2 + 352))(&v18, a2);
  (*(void (**)(unint64_t *__return_ptr, void *))(*a2 + 328))(v17, a2);
  if (a2[33])
  {
    unsigned int v4 = (int *)a2[17];
    unint64_t v5 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 368))(a2, 4);
    BOOL result = ZinAneTd<4u>::SetOrReturnWout(a1, v5);
    if (result)
    {
      BOOL result = ZinAneTd<4u>::SetCommonConvCfgKw(a1, v17[0]);
      if (result)
      {
        BOOL result = ZinAneTd<4u>::SetCommonConvCfgPadLeft(a1, (int)v18);
        if (result)
        {
          unint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 368))(a2, 3);
          BOOL result = ZinAneTd<4u>::SetOrReturnHout(a1, v7);
          if (result)
          {
            BOOL result = ZinAneTd<4u>::SetCommonConvCfgKh(a1, v17[1]);
            if (result)
            {
              BOOL result = ZinAneTd<4u>::SetCommonConvCfgPadTop(a1, v19);
              if (result)
              {
                ZinAneTd<4u>::SetCommonConvCfgSx(a1, v4[82]);
                ZinAneTd<4u>::SetCommonConvCfgSy(a1, v4[83]);
                ZinAneTd<4u>::SetCommonConvCfgOx(a1, v4[85]);
                ZinAneTd<4u>::SetCommonConvCfgOy(a1, v4[86]);
                int v16 = 0;
                BOOL result = ZinCodegenUtil::ValueToRegister(*(void *)(a2[33] + 80), (unsigned int *)(*(void *)(a1 + 280) + 32), &v16);
                if (result)
                {
                  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 76) & 0xFFFE0000 | v16 & 0x1FFFF;
                  int v16 = 0;
                  BOOL result = ZinCodegenUtil::ValueToRegister(*(void *)(a2[33] + 88), (unsigned int *)(*(void *)(a1 + 280) + 40), &v16);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 80) & 0xFFFE0000 | v16 & 0x1FFFF;
                    BOOL result = ZinAneTd<4u>::SetOrReturnNumGroups(a1, *(void *)(a2[33] + 104));
                    if (result)
                    {
                      uint64_t v8 = (unsigned __int8 *)a2[33];
                      if (*((_DWORD *)v8 + 28) == 2)
                      {
                        ZinAneTd<4u>::SetUnicastEn(a1, *v8);
                        ZinAneTd<4u>::SetUnicastCin(a1, *(void *)(a2[33] + 96));
                      }
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<4u>::HandleCommonConvOpcode(result, v9, v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleCommonConfigTileAndTaskInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 96) = 0;
  BOOL v4 = ZinAneTd<4u>::SetTileHeight(a1, *(void *)(a2 + 200));
  BOOL result = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
    ZinAneTd<4u>::SetNESmallSourceMode(a1, *(_DWORD *)(a2 + 144));
    int v19 = 0;
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
    uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
    int Pow2Log2 = ZinRoundUpToNextPow2Log2(NumNeededNEs);
    BOOL result = ZinCodegenUtil::ValueToRegister(Pow2Log2, (unsigned int *)(*(void *)(a1 + 280) + 184), &v19);
    if (result)
    {
      *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 100) & 0xFFC7FFFF | ((v19 & 7) << 19);
      int v19 = 0;
      int v9 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 136));
      int v10 = v9 >= 4 ? 4 : v9;
      BOOL result = ZinCodegenUtil::ValueToRegister(v10, (unsigned int *)(*(void *)(a1 + 280) + 160), &v19);
      if (result)
      {
        *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 100) & 0xFFFFF8FF | ((v19 & 7) << 8);
        int v19 = 0;
        int v11 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 120));
        int v12 = v11 >= 4 ? 4 : v11;
        BOOL result = ZinCodegenUtil::ValueToRegister(v12, (unsigned int *)(*(void *)(a1 + 280) + 168), &v19);
        if (result)
        {
          *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 100) & 0xFFFF8FFF | ((v19 & 7) << 12);
          int v19 = 0;
          int v13 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 128));
          if (v13 >= 4) {
            int v14 = 4;
          }
          else {
            int v14 = v13;
          }
          BOOL result = ZinCodegenUtil::ValueToRegister(v14, (unsigned int *)(*(void *)(a1 + 280) + 176), &v19);
          if (result)
          {
            *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 100) & 0xFFF8FFFF | ((v19 & 7) << 16);
            int v19 = 0;
            uint64_t v15 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
            uint64_t v16 = MirInfoChannelAssignment::GetNumNeededNEs(v15);
            int v17 = ZinRoundUpToNextPow2Log2(v16);
            BOOL result = ZinCodegenUtil::ValueToRegister(v17, (unsigned int *)(*(void *)(a1 + 280) + 184), &v19);
            if (result)
            {
              v18.i32[1] = 0x100000;
              v18.i32[0] = (v19 & 7) << 19;
              *(int8x8_t *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = vorr_s8(vand_s8(*(int8x8_t *)(a1 + 100), (int8x8_t)0xF00FFFFFFFC7FFFFLL), v18);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<4u>::HandleTileDmaSrcConfig(uint64_t a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!ZinIrOpLayer::IsNELayer(this)) {
    ZinAssertImpl("Only NE layers allowed\n");
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
  if (*((void *)this + 12) - *((void *)this + 11) >= 0x18uLL)
  {
    BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v23) {
      ZinAneTd<4u>::HandleTileDmaSrcConfig(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    goto LABEL_9;
  }
  unint64_t v10 = *(void *)(a3 + 528);
  uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
  uint64_t v12 = *((void *)this + 33);
  uint64_t v13 = *(void *)(v12 + 752);
  char v14 = *(unsigned char *)(v12 + 1392);
  if ((v14 & 8) != 0 && (v14 & 7) != 0)
  {
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v15) {
      ZinAneTd<4u>::HandleTileDmaSrcConfig(v15, v16, v17, v18, v19, v20, v21, v22);
    }
LABEL_9:
    unsigned int v31 = 0;
    int v32 = 1;
    goto LABEL_10;
  }
  int v34 = *(_DWORD *)(InputTensor + 88);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFFF7F | ((v13 != 0) << 7);
  if (v13)
  {
    if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v13)
      && ZinIrSymbol::GetMemType((ZinIrSymbol *)v13) != 1)
    {
      BOOL v61 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v61) {
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      goto LABEL_9;
    }
    if (!ZinIrSection::HasValidBarId(*(ZinIrSection **)(v13 + 8)))
    {
      BOOL v53 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v53) {
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFFF8F | (16 * (*(unsigned char *)(*(void *)(v13 + 8) + 56) & 7));
    long long v35 = *(_OWORD *)(v13 + 384);
    v90[10] = *(_OWORD *)(v13 + 368);
    v90[11] = v35;
    v90[12] = *(_OWORD *)(v13 + 400);
    long long v36 = *(_OWORD *)(v13 + 320);
    v90[6] = *(_OWORD *)(v13 + 304);
    v90[7] = v36;
    long long v37 = *(_OWORD *)(v13 + 352);
    v90[8] = *(_OWORD *)(v13 + 336);
    v90[9] = v37;
    long long v38 = *(_OWORD *)(v13 + 256);
    v90[2] = *(_OWORD *)(v13 + 240);
    v90[3] = v38;
    long long v39 = *(_OWORD *)(v13 + 288);
    v90[4] = *(_OWORD *)(v13 + 272);
    v90[5] = v39;
    long long v40 = *(_OWORD *)(v13 + 224);
    v90[0] = *(_OWORD *)(v13 + 208);
    v90[1] = v40;
    if (ZinEngineLayerMirInfo::HasDmaRead(*((void *)this + 33), 0)) {
      *(_DWORD *)(a1 + 124) |= 1u;
    }
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFFFF0FFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 1, *(_DWORD *)(*((void *)this + 33) + 1400)) & 0xF) << 12);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFFF0FFFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 2, *(_DWORD *)(*((void *)this + 33) + 1404)) & 0xF) << 16);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFF0FFFFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 3, *(_DWORD *)(*((void *)this + 33) + 1408)) & 0xF) << 20);
    **(void **)(a5 + 128) = v13;
    uint64_t v41 = *((void *)this + 33);
    unint64_t v42 = *(void *)(v41 + 720);
    if (v42 % v10 || (unint64_t v43 = *(void *)(v41 + 728), v44 = v43 / v10, v43 % v10))
    {
      BOOL v45 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v45) {
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v45, v46, v47, v48, v49, v50, v51, v52);
      }
    }
    else
    {
      int v89 = 0;
      if (ZinCodegenUtil::ValueToRegister(v42 / v10, (unsigned int *)(*(void *)(a1 + 280) + 248), &v89))
      {
        *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 132) & 0xC000003F | ((v89 & 0xFFFFFF) << 6);
        int v89 = 0;
        if (ZinCodegenUtil::ValueToRegister(v44, (unsigned int *)(*(void *)(a1 + 280) + 256), &v89))
        {
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 136) & 0xC000003F | ((v89 & 0xFFFFFF) << 6);
          switch(v34)
          {
            case 1:
              unsigned int v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCFFC | 0x1000;
              goto LABEL_47;
            case 2:
              unsigned int v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCFFC;
              goto LABEL_47;
            case 3:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              int v71 = 8241;
              goto LABEL_46;
            case 4:
              unsigned int v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC | 1;
              goto LABEL_47;
            case 5:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              int v71 = 257;
              goto LABEL_46;
            case 6:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              int v71 = 17;
              goto LABEL_46;
            case 7:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              int v71 = 273;
              goto LABEL_46;
            case 8:
              BOOL v72 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v72) {
                ZinAneTd<4u>::HandleTileDmaSrcConfig(v72, v73, v74, v75, v76, v77, v78, v79);
              }
              goto LABEL_42;
            case 9:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              int v71 = 4145;
              goto LABEL_46;
            case 10:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              int v71 = 49;
LABEL_46:
              unsigned int v69 = v70 | v71;
LABEL_47:
              *(_DWORD *)(a1 + 14std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v69;
              uint64_t v80 = ZinTensorDescriptorDmaInterleave((uint64_t)v90);
              if (v80 >= 1)
              {
                int v32 = 0;
                *(_DWORD *)(a1 + 14std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 140) & 0xF0FFFFFF | ((v80 & 0xF) << 24);
                goto LABEL_24;
              }
              BOOL v81 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v81) {
                ZinAneTd<6u>::HandleTileDmaSrcConfig(v81, v82, v83, v84, v85, v86, v87, v88);
              }
              break;
            default:
LABEL_42:
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinAneTd<6u>::HandleTileDmaSrcConfig();
              }
              break;
          }
        }
      }
    }
    int v32 = 1;
LABEL_24:
    unsigned int v31 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFF000FFF | 0x222000;
    *(_DWORD *)(a1 + 14std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 140) & 0xF0FFFFFF | 0x1000000;
    int v32 = 1;
    unsigned int v31 = 1;
  }
LABEL_10:
  if (v32) {
    return v31;
  }
  else {
    return 1;
  }
}

BOOL ZinAneTd<4u>::HandleL2Config(uint64_t a1, ZinIrOpLayer *a2, void *a3)
{
  v85[4] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = *(_DWORD *)(*((void *)a2 + 8) + 8);
  if (v6 != 85)
  {
    if (v6 != 89) {
      goto LABEL_22;
    }
    uint64_t v7 = *(void *)(*((void *)a2 + 54) + 64);
    int v8 = *(_DWORD *)(v7 + 104);
    if (v8)
    {
      if (v8 != 1)
      {
        int v9 = *(_DWORD *)(v7 + 100);
        goto LABEL_20;
      }
      if (*(_DWORD *)(v7 + 100) == 4)
      {
        int v9 = 4;
LABEL_20:
        uint64_t v21 = a1;
        int v22 = 0;
        goto LABEL_21;
      }
    }
    else if (*(_DWORD *)(v7 + 100) == 2)
    {
      int v9 = 2;
      goto LABEL_20;
    }
    BOOL v54 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v54) {
      ZinAneTd<4u>::HandleL2Config(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    return 0;
  }
  if (!*((void *)a2 + 54)) {
    goto LABEL_22;
  }
  uint64_t v10 = *((void *)a2 + 17);
  int v9 = *(_DWORD *)(v10 + 376);
  int v11 = (_DWORD *)a3[183];
  uint64_t v12 = (_DWORD *)a3[184];
  if (v11 != v12)
  {
    while (*v11 != v9)
    {
      if (++v11 == v12)
      {
        int v11 = (_DWORD *)a3[184];
        break;
      }
    }
  }
  if (v11 == v12 || v9 == 4 || v9 == 2)
  {
    BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v13) {
      ZinAneTd<4u>::HandleL2Config(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    return 0;
  }
  int v22 = *(_DWORD *)(v10 + 380);
  uint64_t v21 = a1;
LABEL_21:
  ZinAneTd<4u>::SetPaddingMode(v21, v9, v22);
LABEL_22:
  int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(*((void *)a2 + 33), 0);
  ZinAneTd<4u>::SetL2Src1SourceType(a1, L2RdMode);
  if (!ZinCodegen::SetPrimaryL2SourceBuffer<4u>((uint64_t)a3, (uint64_t)a2, (ZinIrHalH13g *)a1))
  {
    BOOL v46 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v46) {
      ZinAneTd<1u>::HandleNEControlCommon(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    return 0;
  }
  uint64_t InputTensor = (int *)ZinIrOpLayer::GetInputTensor(a2, 0);
  ZinAneTd<4u>::SetL2Src1DmaFormat(a1, InputTensor[22]);
  v85[3] = 0;
  ZinIrTensor::InferDescriptor((ZinIrTensor *)InputTensor, (uint64_t)v85, (uint64_t)v84);
  uint64_t v25 = ZinTensorDescriptorDmaInterleave((uint64_t)v84);
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100](v85);
  if (v25 <= 0)
  {
    BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v38) {
      return 0;
    }
    goto LABEL_37;
  }
  ZinAneTd<4u>::SetL2Src1Interleave(a1, v25);
  if (*(_DWORD *)(*((void *)a2 + 8) + 8) == 90 && *((void *)a2 + 12) - *((void *)a2 + 11) == 16)
  {
    unint64_t v26 = *(void *)(ZinEngineLayerMirInfo::GetL2RdSymbol(*((void *)a2 + 33), 0) + 16);
    unint64_t v28 = a3[51];
    unint64_t v27 = a3[52];
    uint64_t L2RdSymbol = ZinEngineLayerMirInfo::GetL2RdSymbol(*((void *)a2 + 33), 1);
    unint64_t v30 = v26 % v28 / v27;
    unint64_t v31 = *(void *)(L2RdSymbol + 16) % a3[51] / a3[52];
    if ((int)v30 - (int)v31 >= 0) {
      unsigned int v32 = v30 - v31;
    }
    else {
      unsigned int v32 = v31 - v30;
    }
    if (v31 > v30) {
      LODWORD(v31) = v30;
    }
    ZinAneTd<4u>::SetL2SrcBaseAddress(a1, v31);
    ZinAneTd<4u>::SetL2Src1ChannelStride(a1, v32);
  }
  uint64_t v33 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)a2 + 33));
  uint64_t v35 = (uint64_t)L2WrSymbol;
  if (!L2WrSymbol)
  {
    BOOL v62 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v62) {
      ZinAneTd<4u>::HandleL2Config(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    return 0;
  }
  if (ZinIrSymbol::GetMemType(L2WrSymbol) != 2)
  {
    BOOL v70 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v70) {
      ZinAneTd<17u>::HandleL2Config(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    return 0;
  }
  ZinAneTd<4u>::SetL2ResultType(a1, *(_DWORD *)(*((void *)a2 + 33) + 1632));
  ZinAneTd<4u>::SetL2BfrMode(a1, *(unsigned __int8 *)(*((void *)a2 + 33) + 312));
  ZinAneTd<4u>::SetL2ResultCfgDmaFmt(a1, *(_DWORD *)(v33 + 88));
  ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a1, *(void *)(*((void *)a2 + 33) + 320));
  if ((*(_DWORD *)(*((void *)a2 + 33) + 1632) - 1) > 1)
  {
    unsigned int v37 = 1;
  }
  else
  {
    uint64_t v36 = ZinTensorDescriptorDmaInterleave(*(void *)(*((void *)a2 + 33) + 944) + 208);
    unsigned int v37 = v36;
    if (!v36)
    {
      BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v38) {
        return 0;
      }
LABEL_37:
      ZinAneTd<6u>::HandleL2Config(v38, v39, v40, v41, v42, v43, v44, v45);
      return 0;
    }
  }
  ZinAneTd<4u>::SetL2ResultInterleave(a1, v37);
  ZinAneTd<4u>::SetL2ResultBaseAddr(a1, *(void *)(v35 + 16) % a3[51] / a3[52]);
  ZinAneTd<4u>::SetL2ResultChannelStride(a1, *(_DWORD *)(*((void *)a2 + 33) + 280));
  v84[0] = *(_OWORD *)(v35 + 520);
  unsigned int OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)v84);
  unsigned int NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v84);
  ZinAneTd<4u>::SetL2ResultWrapAddrOffset(a1, OCGSize);
  ZinAneTd<4u>::SetL2ResultWrapAddr(a1, NumNeededNEs);
  if ((ZinCodegen::SetL2ResultWrapInfo<4u>(a1, v35) & 1) == 0) {
    return 0;
  }
  uint64_t v83 = 0;
  BOOL L2RowStride = ZinCodegen::GetL2RowStride((ZinCodegen *)(v33 + 48), *(const ZinTensorDimensions **)(*((void *)a2 + 33) + 272), *(unsigned int *)(*(void *)(a1 + 280) + 236), &v83, v80);
  if (L2RowStride)
  {
    ZinAneTd<4u>::SetL2ResultRowStride(a1, v83);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
    if (*((void *)a2 + 47)) {
      *(_DWORD *)(a1 + 172) |= 1u;
    }
  }
  return L2RowStride;
}

void sub_2112FC940(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100]((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

BOOL ZinAneTd<4u>::HandleNEConfig(ZinIrHalH13g *a1, ZinIrKernel **a2, const ZinIrHalParameters *a3)
{
  (*(void (**)(ZinIrHalH13g *))(*(void *)a1 + 88))(a1);
  int v6 = a2 + 17;
  uint64_t v7 = a2[17];
  if (!v7)
  {
    BOOL v13 = 0;
    int v10 = 0;
    int v64 = 0;
    goto LABEL_7;
  }
  unsigned int v8 = *((unsigned __int8 *)v7 + 448);
  int v9 = (v8 >> 3) & 1;
  int v10 = (v8 >> 4) & 1;
  if ((v8 & 4) == 0)
  {
    int v64 = (v8 >> 3) & 1;
    if (ZinIrKernel::HasPerCoutScale(v7) || ZinIrKernel::HasPerCoutBias(v7))
    {
      int ShouldUseSparseBinaryForCompression = 0;
      BOOL v12 = 0;
      BOOL v13 = *(void *)((*((uint64_t (**)(ZinIrKernel **, void, void))*a2 + 4))(a2, 0, 0) + 48) > 1;
LABEL_8:
      int v14 = 4;
      goto LABEL_9;
    }
    BOOL v13 = 0;
LABEL_7:
    int ShouldUseSparseBinaryForCompression = 0;
    BOOL v12 = 0;
    goto LABEL_8;
  }
  int v23 = *((_DWORD *)a2[8] + 2);
  if (v23 == 90)
  {
    uint64_t InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a2, 0);
    unsigned int v25 = 0;
    LODWORD(v24) = *(void *)(InputTensor + 48) > 1;
    uint64_t v7 = a2[17];
  }
  else if (v23 == 85)
  {
    uint64_t v24 = a2[54];
    if (v24)
    {
      unsigned int v25 = v8 >> 7;
      if (*((_DWORD *)a2[33] + 28) != 1) {
        unsigned int v25 = 0;
      }
      LODWORD(v24) = 0;
    }
    else
    {
      unsigned int v25 = 0;
    }
  }
  else
  {
    unsigned int v25 = 0;
    LODWORD(v24) = 0;
  }
  BOOL v13 = (v25 | v24) != 0;
  int v34 = *(unsigned __int8 **)(*((void *)v7 + 100) + 40);
  if (!v34)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<4u>::HandleNEConfig(result, v36, v37, v38, v39, v40, v41, v42);
    return 0;
  }
  int v64 = v9;
  int v14 = *((_DWORD *)v7 + 44);
  int v35 = *v34;
  BOOL v12 = v35 != 0;
  if (v35)
  {
    int ShouldUseSparseBinaryForCompression = ZinIrKernel::ShouldUseSparseBinaryForCompression(v7);
    uint64_t v7 = *v6;
  }
  else
  {
    int ShouldUseSparseBinaryForCompression = 0;
  }
  if (ZinIrKernel::HasVectorPalettizedWeight(v7))
  {
    int v43 = ZinLog2OfPow2(*((void *)*v6 + 52));
    ZinAneTd<4u>::SetPaletteBlockSize((uint64_t)a1, v43);
  }
LABEL_9:
  ZinAneTd<4u>::SetKernelPalettizedEn((uint64_t)a1, v14);
  ZinAneTd<4u>::SetKernelPalettizedBits((uint64_t)a1, v14);
  ZinAneTd<4u>::SetKernelSparseFmt((uint64_t)a1, v12);
  ZinAneTd<4u>::SetKernelSparseBinary((uint64_t)a1, ShouldUseSparseBinaryForCompression);
  ZinAneTd<4u>::SetGroupKernelReuse((uint64_t)a1, v13);
  int v66 = 0;
  int MacCfgOpMode = GetMacCfgOpMode((ZinIrOpLayer *)a2, (uint64_t)a3, &v66);
  BOOL result = 0;
  if (!MacCfgOpMode)
  {
    ZinAneTd<4u>::SetOpMode((uint64_t)a1, v66);
    int MacCfgKernelMode = GetMacCfgKernelMode((const ZinNELayer *)a2, a3);
    ZinAneTd<4u>::SetKernelMode((uint64_t)a1, MacCfgKernelMode);
    BOOL MacCfgPassthroughEnable = GetMacCfgPassthroughEnable((const ZinNELayer *)a2, a3);
    ZinAneTd<1u>::SetPassthroughEnable((uint64_t)a1, MacCfgPassthroughEnable);
    int v65 = 0;
    int KernelCfgKernelFmt = GetKernelCfgKernelFmt((const ZinNELayer *)a2, a3, v66, &v65);
    BOOL result = 0;
    if (!KernelCfgKernelFmt)
    {
      ZinAneTd<4u>::SetKernelFmt((uint64_t)a1, v65);
      uint64_t v20 = *(uint64_t *)((char *)a2 + 420);
      if ((v20 & 0xFF00000000) == 0) {
        ZinAssertImpl("Binary point is missing from NE layer.");
      }
      ZinAneTd<4u>::SetNEBinaryPoint((uint64_t)a1, v20);
      if (((*(uint64_t (**)(ZinIrHalH13g *, ZinIrKernel **))(*(void *)a1 + 296))(a1, a2) & 1) == 0)
      {
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        ZinAneTd<4u>::HandleNEConfig(result, v27, v28, v29, v30, v31, v32, v33);
        return 0;
      }
      uint64_t v21 = a2[49];
      if (v21) {
        int v22 = *((_DWORD *)v21 + 48);
      }
      else {
        int v22 = 0;
      }
      ZinAneTd<4u>::SetNENonLinearMode((uint64_t)a1, v22, (uint64_t)a3 + 1536);
      uint64_t v44 = a2[51];
      if (v44)
      {
        int ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v44);
        ZinAneTd<4u>::SetQuantizationOutputZeroOffset((uint64_t)a1, 1, ScalarZeroPoint);
      }
      if (v64)
      {
        unint64_t v46 = *(void *)((char *)*v6 + 180);
        char v47 = 1;
      }
      else
      {
        unint64_t v46 = 0;
        char v47 = 0;
      }
      ZinAneTd<4u>::SetNEPostScale((uint64_t)a1, v46, v47);
      if (v10)
      {
        unsigned __int8 v48 = *((unsigned char *)*v6 + 192);
        LOBYTE(ShouldUseSparseBinaryForCompression) = *((unsigned char *)*v6 + 193);
        int v10 = *((_DWORD *)*v6 + 47) >> 8;
        unint64_t v49 = (unint64_t)*((unsigned __int16 *)*v6 + 97) << 48;
        uint64_t v50 = *((_DWORD *)*v6 + 47);
        char v51 = 1;
        LODWORD(v7) = v10;
      }
      else
      {
        unsigned __int8 v48 = 0;
        uint64_t v50 = 0;
        unint64_t v49 = 0;
        char v51 = 0;
      }
      if (*((_DWORD *)a2[8] + 2) == 85)
      {
        uint64_t v52 = a2[48];
        if (v52)
        {
          if (ZinGOCLayer::IsDynamicBias(v52))
          {
            LODWORD(v7) = v10;
            LOBYTE(ShouldUseSparseBinaryForCompression) = 1;
            char v51 = 1;
          }
        }
      }
      ZinAneTd<4u>::SetNEBias((uint64_t)a1, v49 | ((unint64_t)ShouldUseSparseBinaryForCompression << 40) | ((unint64_t)v48 << 32) | v50 & 0xFFFFFFFF000000FFLL | (((unint64_t)v7 & 0xFFFFFF) << 8), v51);
      if (*((_DWORD *)a2[8] + 2) == 85) {
        uint64_t v53 = ZinPEElementWiseLayer::GetSecondOperandBroadcast((ZinPEElementWiseLayer *)a2) & 0xFFFFFFFFFFLL;
      }
      else {
        uint64_t v53 = 0;
      }
      ZinAneTd<4u>::SetNEMatrixVectorBias((uint64_t)a1, a2 + 17, v53);
      if (*v6) {
        int HasZeroPoint = ZinIrKernel::HasZeroPoint(*v6);
      }
      else {
        int HasZeroPoint = 0;
      }
      ZinAneTd<4u>::SetKernelAsymQuantEn((uint64_t)a1, HasZeroPoint);
      v56 = *v6 && (uint64_t v55 = (unsigned __int8 *)*((void *)*v6 + 100)) != 0 && *v55 != 0;
      ZinAneTd<4u>::SetKernelDetectZeros((uint64_t)a1, v56);
      ZinAneTd<4u>::SetDoubleInt8Enable((uint64_t)a1, *((unsigned __int8 *)a2[33] + 1));
      if (*((_DWORD *)a2[8] + 2) == 89)
      {
        ZinIrHalH13g::~ZinIrHalH13g(a1);
        ZinIrHalH13g::~ZinIrHalH13g(a1);
      }
      if ((*(uint64_t (**)(ZinIrHalH13g *, ZinIrKernel **))(*(void *)a1 + 288))(a1, a2)) {
        return 1;
      }
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneTd<4u>::HandleNEConfig(result, v57, v58, v59, v60, v61, v62, v63);
        return 0;
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<4u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(a2 + 64) + 8) == 93)
  {
    uint64_t v2 = *(void *)(*(void *)(a2 + 432) + 64);
    unsigned int v3 = *(void **)(v2 + 48);
    if (v3 != (void *)(v2 + 56))
    {
      uint64_t v4 = 0;
      do
      {
        unint64_t v5 = v3[4];
        if (v5 >= 8) {
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        }
        int v6 = (void *)v3[1];
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            int v6 = (void *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (void *)v3[2];
            BOOL v8 = *v7 == (void)v3;
            unsigned int v3 = v7;
          }
          while (!v8);
        }
        v4 |= 1 << v5;
        unsigned int v3 = v7;
      }
      while (v7 != (void *)(v2 + 56));
    }
    ZinAneTd<1u>::SetRcasKeyMask();
  }
  return 1;
}

BOOL ZinAneTd<4u>::HandleTileDmaDstConfig(uint64_t a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!ZinIrOpLayer::IsNELayer(this) && !ZinIrOpLayer::IsTransposeEngineLayer(this)) {
    ZinAssertImpl("Only NE and TransposeEngineLayer allowed\n");
  }
  uint64_t v10 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  uint64_t v11 = *((void *)this + 32);
  if (v11) {
    BOOL v12 = *(_DWORD *)(*(void *)(v11 + 64) + 8) == 102;
  }
  else {
    BOOL v12 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  BOOL v13 = *(ZinIrSection ***)(*((void *)this + 33) + 944);
  int v14 = *(_DWORD *)(v10 + 88);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFF7FF | ((v13 != 0) << 11);
  if (!v13)
  {
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 252) & 0xFFFF0FFF | 0x3000;
    *(_DWORD *)(a1 + 268) = *(_DWORD *)(a1 + 268) & 0xF0FFFFFF | 0x1000000;
    goto LABEL_24;
  }
  if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v13) == 2)
  {
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v15) {
      ZinCodegen::SetResultDMA<7u>(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    goto LABEL_24;
  }
  if (!ZinIrSection::HasValidBarId(v13[1]))
  {
    BOOL v53 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v53) {
      ZinCodegen::SetResultDMA<7u>(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    goto LABEL_24;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFF8FF | ((*((unsigned char *)v13[1] + 56) & 7) << 8);
  uint64_t v23 = *((void *)this + 33);
  uint64_t v24 = *(_OWORD **)(v23 + 944);
  long long v25 = v24[24];
  v75[10] = v24[23];
  v75[11] = v25;
  v75[12] = v24[25];
  long long v26 = v24[20];
  v75[6] = v24[19];
  v75[7] = v26;
  long long v27 = v24[22];
  v75[8] = v24[21];
  v75[9] = v27;
  long long v28 = v24[16];
  v75[2] = v24[15];
  v75[3] = v28;
  long long v29 = v24[18];
  v75[4] = v24[17];
  v75[5] = v29;
  long long v30 = v24[14];
  v75[0] = v24[13];
  v75[1] = v30;
  if ((*(_DWORD *)(v23 + 1632) - 1) <= 1)
  {
    *(_DWORD *)(a1 + 252) |= 1u;
    uint64_t v23 = *((void *)this + 33);
  }
  int v31 = *(_DWORD *)(a1 + 252) & 0xFFFF0FFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 0, *(_DWORD *)(v23 + 1412)) & 0xF) << 12);
  *(_DWORD *)(a1 + 252) = v31;
  *(_DWORD *)(a1 + 252) = v31 & 0xFBFFFFFF | (*(unsigned __int8 *)(*((void *)this + 33) + 312) << 26);
  *(void *)(a5 + 152) = v13;
  uint64_t v32 = *((void *)this + 33);
  uint64_t v33 = *(void *)(v32 + 912);
  uint64_t v34 = *(void *)(v32 + 920);
  if (v33 < 1 || v34 <= 0)
  {
    BOOL v35 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v35) {
      ZinAneTd<4u>::HandleTileDmaDstConfig(v35, v36, v37, v38, v39, v40, v41, v42);
    }
  }
  unint64_t v43 = *(void *)(a3 + 528);
  if (v33 % v43 || (unint64_t v44 = v34 / v43, v34 % v43))
  {
    BOOL v45 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v45) {
      ZinAneTd<4u>::HandleTileDmaDstConfig(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    goto LABEL_24;
  }
  int v74 = 0;
  if (!ZinCodegenUtil::ValueToRegister(v33 / v43, (unsigned int *)(*(void *)(a1 + 280) + 272), &v74) {
    || (*(_DWORD *)(a1 + 26std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 260) & 0xC000003F | ((v74 & 0xFFFFFF) << 6),
  }
        int v74 = 0,
        !ZinCodegenUtil::ValueToRegister(v44, (unsigned int *)(*(void *)(a1 + 280) + 256), &v74)))
  {
LABEL_24:
    int v61 = 1;
    return !v13 || v61 == 0;
  }
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a1 + 264) & 0xC000003F | ((v74 & 0xFFFFFF) << 6);
  ZinAneTd<4u>::SetTileDmaDstFormat(a1, v14, v12);
  uint64_t v64 = ZinTensorDescriptorDmaInterleave((uint64_t)v75);
  if (v64 < 1)
  {
    BOOL v66 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v66) {
      ZinAneTd<6u>::HandleTileDmaSrcConfig(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    goto LABEL_24;
  }
  int v65 = *(_DWORD *)(a1 + 268) & 0xF0FFFFFF | ((v64 & 0xF) << 24);
  *(_DWORD *)(a1 + 268) = v65;
  *(_DWORD *)(a1 + 268) = v65 & 0xFFF8FFFF | ((*(_DWORD *)(*((void *)this + 33) + 1456) & 7) << 16);
  ZinAneTd<4u>::SetTileDmaDstZeroPad(a1, (_DWORD *)(*((void *)this + 33) + 1488));
  int v61 = 0;
  return !v13 || v61 == 0;
}

uint64_t ZinAneTd<4u>::HandleKernelDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, std::vector<std::string> *a5)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 64))(a1, *(int *)(*a3 + 8));
  char v10 = 0;
  ZinAneTd<4u>::HandleKernelDmaSrcConfigCoeffBuffer(a1, (ZinEngineLayerMirInfo **)a2, a3, (uint64_t)a5, (uint64_t *)(a2 + 136), &v10);
  if (v10)
  {
    ZinAneTd<6u>::AddKernelSymbols(a1, (ZinIrKernel **)a2, a3, a5);
    if (*(unsigned char *)(*a3 + 1271)) {
      ZinAneTd<4u>::SetKernelDmaSrcConfigPrefetch();
    }
  }
  return 1;
}

uint64_t ZinAneTd<4u>::HandleEngineLayer(uint64_t a1, uint64_t a2, unint64_t a3, ZinAneInstruction *a4, uint64_t a5, uint64_t **a6, CFArrayRef *a7)
{
  if (!*(void *)(a2 + 264))
  {
    BOOL v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v16) {
      ZinAneTd<4u>::HandleEngineLayer(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    CFStringRef v24 = @"CodeGenerationFailure";
    goto LABEL_13;
  }
  ZinIrMemoryPool::GetSections((uint64_t)a6[3], 1, v25);
  int v14 = *(ZinIrSection **)(v25[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v25);
  if ((ZinAneInstruction::HandleTdHeader((uint64_t)a4, (ZinEngineLayerMirInfo **)a2, a3, *a6, v14) & 1) == 0)
  {
    CFStringRef v24 = @"InvalidHWHeader";
LABEL_13:
    ZinIrNetworkStatus::SetError(a7, v24);
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 416))(a1);
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a2)) {
    ZinAssertImpl("Error: PE is not supported");
  }
  if (!ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2)) {
    ZinAssertImpl("TransposeEngineLayer based graph should not need DMA buffer\n");
  }
  if (!HandleNELayer<4u>((const ZinIrOpLayer *)a2, a3, a4, (const ZinIrHalParameters **)*a6, (ZinIrMemoryPool *)a6[3], a5, a7))return 0; {
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 328))(a1, **a6, a2);
  }
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 344))(a1, a2);
    if (result)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 352))(a1, a2, a6[2]);
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleKernelDmaSrcConfigCoeffBuffer(BOOL result, ZinEngineLayerMirInfo **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, unsigned char *a6)
{
  uint64_t v9 = result;
  uint64_t v10 = *a3;
  uint64_t v11 = *a5;
  if (*a5 && (uint64_t v12 = *(void *)(v11 + 800)) != 0) {
    uint64_t v13 = *(void *)(v12 + 40);
  }
  else {
    uint64_t v13 = 0;
  }
  if (v11) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  if (*(_DWORD *)(v10 + 8))
  {
    unint64_t v16 = 0;
    unint64_t v17 = *(void *)(v10 + 528);
    uint64_t v18 = 40;
    while (v15)
    {
      ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
      if (MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) <= v16) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v13 + 32) + v18);
      BOOL v21 = v20 != 0;
      *a6 |= v21;
      ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaEn(v9, v21, v16);
      ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
      if (!v20) {
        goto LABEL_22;
      }
      uint64_t v22 = *(void *)(v13 + 32);
      if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v13 + 40) - v22) >> 3) <= v16) {
        ZinAssertImpl("Kernel DMA NE number greater than kernel data prepped\n");
      }
      if (*(unsigned char *)(*a3 + 1255))
      {
        if (*((unsigned char *)a2[33] + 2))
        {
          if ((*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 15))(a2))
          {
            unsigned int v23 = ZinDivRoundUp(*((void *)a2[33] + 6), v17);
            ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v23, v16);
            ZinDivRoundUp(*(void *)(*((void *)a2[33] + 7) + 8 * v16), v17);
            goto LABEL_28;
          }
          uint64_t v22 = *(void *)(v13 + 32);
        }
        unsigned int v26 = ZinDivRoundUp(*(void *)(v22 + v18), v17);
        ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v26, v16);
LABEL_28:
        ZinAneTd<4u>::SetKernelDmaSrcCoeffBaseOffset();
      }
      unsigned int v25 = ZinDivRoundUp(*(void *)(v22 + v18), v17);
      uint64_t v24 = v9;
LABEL_23:
      uint64_t result = ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v24, v25, v16++);
      v18 += 56;
      if (v16 >= *(unsigned int *)(*a3 + 8)) {
        return result;
      }
    }
    ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaEn(v9, 0, v16);
    ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
LABEL_22:
    uint64_t v24 = v9;
    unsigned int v25 = 1;
    goto LABEL_23;
  }
  return result;
}

BOOL HandleNELayer<4u>(const ZinIrOpLayer *a1, int a2, ZinAneInstruction *a3, const ZinIrHalParameters **a4, ZinIrMemoryPool *a5, uint64_t a6, CFArrayRef *a7)
{
  uint64_t v13 = (ZinIrHalH13g *)*((void *)a3 + 25);
  unsigned __int8 v31 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock(a1, a5, &v31)
    || (unsigned __int8 v30 = 0, ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a1, a5, &v30)))
  {
LABEL_3:
    CFStringRef v14 = @"CodeGenerationFailure";
LABEL_4:
    ZinIrNetworkStatus::SetError(a7, v14);
    return 0;
  }
  uint64_t v16 = *((void *)a1 + 17);
  if (v16 && *(void *)(v16 + 800))
  {
    ZinAneTd<4u>::SetKernelBaseHeader((uint64_t)v13, v31);
    unint64_t v17 = *(void **)(*((void *)a1 + 17) + 800);
    if (v17[1]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[2]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[4]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[3]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
  }
  if (ZinAneInstruction::HandleCommonConfig(a3, a1, *a4, a7))
  {
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, const ZinIrHalParameters **, ZinIrMemoryPool *, ZinAneInstruction *))(*(void *)v13 + 312))(v13, a1, a4, a5, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"KernelDMASourceAllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, const ZinIrHalParameters *, uint64_t, ZinAneInstruction *))(*(void *)v13 + 248))(v13, a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"TileDMASourceAllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, const ZinIrHalParameters *))(**((void **)a3 + 25)
                                                                                              + 256))(*((void *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"L2AllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, const ZinIrHalParameters *))(**((void **)a3 + 25)
                                                                                              + 264))(*((void *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"NEConfigFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, const ZinIrHalParameters *, uint64_t, ZinAneInstruction *))(**((void **)a3 + 25) + 304))(*((void *)a3 + 25), a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"TileDMADestinationAllocationFailure";
      goto LABEL_4;
    }
    if (!ZinAneTd<4u>::ValidateOCGSizes(v13, a1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      goto LABEL_3;
    }
    ZinAneTd<4u>::SetDoubleBufferingBasedOnOtherRegisters(v13, *((_DWORD *)*a4 + 4));
    if ((*((_DWORD *)v13 + 18) & 3) == 3
      || (v29 = dword_211F04AD0[*((_DWORD *)v13 + 18) & 3], int v18 = *((_DWORD *)v13 + 55) & 3, v18 == 3))
    {
      ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      return 0;
    }
    int v19 = (char)(*((_DWORD *)v13 + 56) >> 5) >> 3;
    int v20 = ZinMirPrepareBinaryPoint::CalculateBinaryPointAdjustment(v18, &v29);
    unsigned int v21 = *((_DWORD *)v13 + 59);
    if (ZinIrOpLayer::IsNELayer(a1) && v20 + v19 + (HIWORD(v21) & 0x1F) >= 0x20u)
    {
      ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      return 0;
    }
    uint64_t v22 = (ZinIrKernel *)*((void *)a1 + 17);
    if (v22)
    {
      if (ZinIrKernel::HasBias(v22))
      {
        uint64_t v23 = *((void *)a1 + 17);
        if (*(void *)(v23 + 576))
        {
          uint64_t v24 = (ZinDynamicRange **)(v23 + 576);
          double v25 = ldexp(1.0, v20 + v19 + ((int)(*((_DWORD *)v13 + 58) << 11) >> 27));
          if (!ZinIrCodegenValidBiasShift(v24, v25, v26, v27, v28))
          {
            ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              HandleNELayer<17u>();
            }
            return 0;
          }
        }
      }
    }
    if (!*((unsigned char *)*a4 + 1243) || (ZinAneTd<6u>::SetDPE((uint64_t)v13, (uint64_t)a1) & 1) != 0) {
      return 1;
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  return result;
}

BOOL ZinAneTd<4u>::ValidateOCGSizes(_DWORD *a1, void *a2)
{
  int v2 = *(_DWORD *)(a2[8] + 8);
  BOOL v3 = (v2 - 85) > 5 || ((1 << (v2 - 85)) & 0x31) == 0;
  if (v3 && !a2[48]) {
    return 1;
  }
  BOOL v4 = 1;
  if ((v2 - 89) >= 2 && v2 != 92) {
    BOOL v4 = v2 == 85 && a2[54] == 0;
  }
  unsigned int v5 = a1[22];
  unsigned int v6 = (v5 >> 12) & 7;
  if ((a1[25] & 4) != 0)
  {
    if (!v6) {
      return 1;
    }
    BOOL result = 1;
    if ((v5 & 0x6000) == 0x2000) {
      return result;
    }
    if (v6 == 4) {
      return result;
    }
    if (v6 == 5) {
      return result;
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
LABEL_86:
    ZinAneTd<17u>::ValidateOCGSizes(result, v12, v13, v14, v15, v16, v17, v18);
    return 0;
  }
  int v7 = a1[23];
  int v8 = *(_DWORD *)(a2[33] + 112);
  int v9 = (v5 >> 28) & 3;
  unsigned int v10 = v5 >> 30;
  if ((a1[18] & 3u) < 2)
  {
    if ((v7 & 0x4000) == 0)
    {
      if (v9 == 1 && v10 == 1)
      {
        if (v6 >= 4)
        {
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          goto LABEL_86;
        }
        return 1;
      }
      if (v9 == 1 && v10 == 2 || v9 == 2 && v10 == 1)
      {
        if (v6 >= 3)
        {
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          goto LABEL_86;
        }
        return 1;
      }
      if (v9 == 2 && v10 == 2)
      {
        if (v6 >= 2)
        {
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          goto LABEL_86;
        }
        return 1;
      }
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result) {
        goto LABEL_82;
      }
      return result;
    }
    if (v4)
    {
      if (v6)
      {
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        goto LABEL_86;
      }
      return 1;
    }
    if (v8)
    {
      if (v6 >= 4)
      {
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        goto LABEL_86;
      }
      return 1;
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    goto LABEL_68;
  }
  if ((a1[18] & 3) != 2)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<4u>::ValidateOCGSizes(result, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  if ((v7 & 0x4000) != 0)
  {
    if (v4)
    {
      if (v6)
      {
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        goto LABEL_86;
      }
      return 1;
    }
    if (v8)
    {
      if (v6 >= 5)
      {
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        goto LABEL_86;
      }
      return 1;
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
LABEL_68:
    ZinAneTd<6u>::ValidateOCGSizes(result, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  if (v9 == 1 && v10 == 1)
  {
    if (v6 >= 5)
    {
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      goto LABEL_86;
    }
    return 1;
  }
  if (v9 == 1 && v10 == 2 || v9 == 2 && v10 == 1)
  {
    if (v6 >= 4)
    {
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      goto LABEL_86;
    }
    return 1;
  }
  if (v9 == 2 && v10 == 2)
  {
    if (v6 < 3) {
      return 1;
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    goto LABEL_86;
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
LABEL_82:
    ZinAneTd<6u>::ValidateOCGSizes(result, v33, v34, v35, v36, v37, v38, v39);
    return 0;
  }
  return result;
}

uint64_t ZinValidateTd<4u>::Test(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v612[3] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(unsigned int *)(a3 + 92);
  uint64_t v4 = (v3 >> 8) & 7;
  uint64_t v5 = (v3 >> 12) & 7;
  if (v5 > v4)
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ZinValidateTd<4u>::Test(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 3;
  }
  uint64_t v14 = (v3 >> 16) & 7;
  if (v5 > v14)
  {
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v15) {
      ZinValidateTd<4u>::Test(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    return 3;
  }
  if (v4 > v14)
  {
    BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v23) {
      ZinValidateTd<4u>::Test(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    return 3;
  }
  int v32 = *(_DWORD *)(a3 + 64);
  uint64_t v33 = v32 & 3;
  if ((v32 & 3) == 3)
  {
    BOOL v34 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v34) {
      ZinValidateTd<4u>::Test(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    return 3;
  }
  uint64_t v44 = *a1;
  unint64_t v45 = *(unsigned int *)(a3 + 60);
  unint64_t v46 = *(unsigned int *)(a3 + 76);
  unint64_t v47 = *(unsigned int *)(a3 + 80);
  uint64_t v48 = (v46 >> 16) & 0x7FFF;
  unint64_t v49 = v46 & 0x7FFF;
  int v51 = *(_DWORD *)(a3 + 68);
  int v50 = *(_DWORD *)(a3 + 72);
  unint64_t v52 = v47 & 0x1F;
  uint64_t v53 = (v47 >> 28) & 3;
  unint64_t v54 = v47 >> 30;
  int v55 = *(_DWORD *)(a3 + 84);
  unint64_t v56 = *(_DWORD *)(a3 + 88) & 0x7FFFLL;
  int v57 = *(_DWORD *)(a3 + 184);
  unsigned int v58 = *(_DWORD *)(a3 + 260);
  unsigned int v59 = (v3 >> 2) & 1;
  int v61 = *(_DWORD *)(a3 + 212);
  int v60 = *(_DWORD *)(a3 + 216);
  unsigned int v62 = dword_211F04AD0[v33];
  if ((v3 & 4) != 0)
  {
    if ((v55 & 0x4000) != 0
      || v53 != 1
      || v54 != 1
      || v4 != 4
      || v5 != 4
      || v14 != 4)
    {
      BOOL v104 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v104) {
        ZinValidateTd<4u>::Test(v104, v105, v106, v107, v108, v109, v110, v111);
      }
      return 3;
    }
    if (v52 >= 9)
    {
      BOOL v120 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v120) {
        ZinValidateTd<4u>::Test(v120, v121, v122, v123, v124, v125, v126, v127);
      }
      return 3;
    }
    int v607 = v55;
    __int16 v591 = v61;
    __int16 v593 = v60;
    uint64_t v595 = *a1;
    int v597 = v56;
    unint64_t v609 = v45;
    unint64_t v611 = v46 & 0x7FFF;
    unsigned int v599 = v58;
    char v601 = v57;
    int v588 = v51;
    int v589 = v50;
    uint64_t WUCost = NERasterization::GetWUCost(0x10uLL, 0x10uLL, 0x10uLL, v56, (v3 >> 2) & 1, 0, v49, v48, 0, 0, v62, *a1);
    unsigned int v59 = (v3 >> 2) & 1;
    LOWORD(v61) = v591;
    LOWORD(v6std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v593;
    int v51 = v588;
    int v50 = v589;
    int v55 = v607;
    unint64_t v45 = v609;
    uint64_t v53 = (v47 >> 28) & 3;
    unint64_t v52 = v47 & 0x1F;
    unint64_t v49 = v611;
    LODWORD(v33) = v32 & 3;
    unint64_t v54 = v47 >> 30;
    unsigned int v58 = v599;
    LOBYTE(v57) = v601;
    uint64_t v44 = v595;
    LODWORD(v56) = v597;
    if (WUCost != 1)
    {
      BOOL v77 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v77) {
        ZinValidateTd<4u>::Test(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      return 3;
    }
  }
  unint64_t v608 = v45;
  unsigned int v603 = v54;
  uint64_t v604 = v53;
  unsigned int v598 = v58;
  char v600 = v57;
  unsigned int v596 = v56;
  int v63 = v32 & 0x30;
  unsigned int v602 = v33;
  if (v33 == 2 && v63 != 32)
  {
    __int16 v590 = v61;
    __int16 v592 = v60;
    unint64_t v605 = v52;
    int v606 = v55;
    unsigned int v64 = v62;
    uint64_t v594 = v44;
    unint64_t v610 = v49;
    int v65 = v50;
    int v66 = v51;
    int HasWorkUnitWidthOf8 = NERasterization::HasWorkUnitWidthOf8(v44, v64, 1 << (BYTE2(v3) & 7), 1 << v5, 1 << v4, v59, 0, v48, v49, 0, 0);
    LOWORD(v61) = v590;
    LOWORD(v6std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v592;
    int v51 = v66;
    int v50 = v65;
    unint64_t v52 = v605;
    int v55 = v606;
    unint64_t v49 = v610;
    uint64_t v44 = v594;
    if (HasWorkUnitWidthOf8)
    {
      BOOL v68 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v68) {
        ZinValidateTd<4u>::Test(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      return 3;
    }
  }
  unsigned int v85 = (v47 >> 12) & 7;
  uint64_t v86 = *(void *)&v51 & 0x1FFFFLL;
  unint64_t v87 = (v47 >> 6) & 0x1F;
  uint64_t v88 = *(void *)&v50 & 0x1FFFFLL;
  uint64_t v89 = (v47 >> 16) & 3;
  uint64_t v90 = (v47 >> 18) & 3;
  unint64_t v91 = (v47 >> 20) & 0xF;
  unint64_t v92 = (v47 >> 24) & 0xF;
  unsigned int v93 = v55 & 0x1FFF;
  int v94 = v60 & 7;
  unsigned int v95 = HIWORD(v55);
  if ((v61 & 0x400) != 0)
  {
    if (v93 <= 1)
    {
      BOOL v128 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v128) {
        ZinValidateTd<4u>::Test(v128, v129, v130, v131, v132, v133, v134, v135);
      }
      return 3;
    }
    if ((v60 & 7) != 0)
    {
      BOOL v112 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v112) {
        ZinValidateTd<4u>::Test(v112, v113, v114, v115, v116, v117, v118, v119);
      }
      return 3;
    }
    if ((*(_DWORD *)(a3 + 216) & 0x4018) == 8)
    {
      BOOL v136 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v136) {
        ZinValidateTd<4u>::Test(v136, v137, v138, v139, v140, v141, v142, v143);
      }
      return 3;
    }
    goto LABEL_174;
  }
  if (v94 != 1)
  {
    if (v94 != 2) {
      goto LABEL_174;
    }
    if (v86 != 2 * v88)
    {
      BOOL v144 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v144) {
        ZinValidateTd<4u>::Test(v144, v145, v146, v147, v148, v149, v150, v151);
      }
      return 3;
    }
    if (v85)
    {
      BOOL v96 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v96) {
        return 3;
      }
LABEL_37:
      ZinValidateTd<17u>::Test(v96, v97, v98, v99, v100, v101, v102, v103);
      return 3;
    }
    if (v52 == 1)
    {
      if (v87 == 1)
      {
        if (v89 == 1)
        {
          if (v90 == 1)
          {
            if (v91)
            {
              BOOL v160 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v160) {
                return 3;
              }
LABEL_65:
              ZinValidateTd<17u>::Test(v160, v161, v162, v163, v164, v165, v166, v167);
              return 3;
            }
            if (v92)
            {
              BOOL v200 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v200) {
                return 3;
              }
LABEL_91:
              ZinValidateTd<17u>::Test(v200, v201, v202, v203, v204, v205, v206, v207);
              return 3;
            }
            if (v604 == 1)
            {
              if (v603 == 1)
              {
                if ((v55 & 0x4000) == 0)
                {
                  BOOL v208 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v208) {
                    return 3;
                  }
LABEL_99:
                  ZinValidateTd<10u>::Test(v208, v209, v210, v211, v212, v213, v214, v215);
                  return 3;
                }
                if (HIWORD(v55) != 2)
                {
                  BOOL v240 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v240) {
                    ZinValidateTd<4u>::Test(v240, v241, v242, v243, v244, v245, v246, v247);
                  }
                  return 3;
                }
                if ((v3 & 4) == 0)
                {
                  if (((*(_DWORD *)(a3 + 212) ^ *(_DWORD *)(a3 + 64)) & 3) != 0)
                  {
                    BOOL v232 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v232) {
                      return 3;
                    }
LABEL_117:
                    ZinValidateTd<17u>::Test(v232, v233, v234, v235, v236, v237, v238, v239);
                    return 3;
                  }
                  if ((v60 & 8) == 0)
                  {
                    BOOL v264 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v264) {
                      return 3;
                    }
LABEL_133:
                    ZinValidateTd<6u>::Test(v264, v265, v266, v267, v268, v269, v270, v271);
                    return 3;
                  }
                  if ((v60 & 0x10) == 0)
                  {
                    if ((v60 & 0x4000) == 0)
                    {
                      unsigned int v272 = *(_DWORD *)(a3 + 88) & 0x7FFF;
                      if (v272 != 1) {
                        unsigned int v272 = v48 % v272 == 1;
                      }
                      if (!v14) {
                        unsigned int v272 = 1;
                      }
                      if (v5 || !v272) {
                        goto LABEL_174;
                      }
                      if (v602 <= 1)
                      {
                        if (v49 % *(void *)(v44 + 1864) <= *(void *)(v44 + 1856))
                        {
                          BOOL v273 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (!v273) {
                            return 3;
                          }
LABEL_148:
                          ZinValidateTd<6u>::Test(v273, v274, v275, v276, v277, v278, v279, v280);
                          return 3;
                        }
                        goto LABEL_174;
                      }
                      if (v49 % *(void *)(v44 + 1856) > *(void *)(v44 + 1872)) {
                        goto LABEL_174;
                      }
                      BOOL v298 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (!v298) {
                        return 3;
                      }
LABEL_171:
                      ZinValidateTd<10u>::Test(v298, v299, v300, v301, v302, v303, v304, v305);
                      return 3;
                    }
                    BOOL v290 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v290) {
                      return 3;
                    }
LABEL_166:
                    ZinValidateTd<6u>::Test(v290, v291, v292, v293, v294, v295, v296, v297);
                    return 3;
                  }
                  BOOL v282 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v282) {
                    return 3;
                  }
LABEL_162:
                  ZinValidateTd<6u>::Test(v282, v283, v284, v285, v286, v287, v288, v289);
                  return 3;
                }
                BOOL v256 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v256) {
                  return 3;
                }
LABEL_128:
                ZinValidateTd<10u>::Test(v256, v257, v258, v259, v260, v261, v262, v263);
                return 3;
              }
              BOOL v224 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v224) {
                return 3;
              }
LABEL_110:
              ZinValidateTd<17u>::Test(v224, v225, v226, v227, v228, v229, v230, v231);
              return 3;
            }
            BOOL v216 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (!v216) {
              return 3;
            }
LABEL_106:
            ZinValidateTd<17u>::Test(v216, v217, v218, v219, v220, v221, v222, v223);
            return 3;
          }
          BOOL v192 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!v192) {
            return 3;
          }
LABEL_86:
          ZinValidateTd<17u>::Test(v192, v193, v194, v195, v196, v197, v198, v199);
          return 3;
        }
        BOOL v184 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v184) {
          return 3;
        }
LABEL_82:
        ZinValidateTd<17u>::Test(v184, v185, v186, v187, v188, v189, v190, v191);
        return 3;
      }
      BOOL v176 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v176) {
        return 3;
      }
LABEL_78:
      ZinValidateTd<17u>::Test(v176, v177, v178, v179, v180, v181, v182, v183);
      return 3;
    }
    BOOL v168 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v168) {
      return 3;
    }
LABEL_74:
    ZinValidateTd<17u>::Test(v168, v169, v170, v171, v172, v173, v174, v175);
    return 3;
  }
  if (v86 != v88)
  {
    BOOL v152 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v152) {
      ZinValidateTd<10u>::Test(v152, v153, v154, v155, v156, v157, v158, v159);
    }
    return 3;
  }
  if (v85)
  {
    BOOL v96 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v96) {
      return 3;
    }
    goto LABEL_37;
  }
  if (v52 != 1)
  {
    BOOL v168 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v168) {
      return 3;
    }
    goto LABEL_74;
  }
  if (v87 != 1)
  {
    BOOL v176 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v176) {
      return 3;
    }
    goto LABEL_78;
  }
  if (v89 != 1)
  {
    BOOL v184 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v184) {
      return 3;
    }
    goto LABEL_82;
  }
  if (v90 != 1)
  {
    BOOL v192 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v192) {
      return 3;
    }
    goto LABEL_86;
  }
  if (v91)
  {
    BOOL v160 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v160) {
      return 3;
    }
    goto LABEL_65;
  }
  if (v92)
  {
    BOOL v200 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v200) {
      return 3;
    }
    goto LABEL_91;
  }
  if (v604 != 1)
  {
    BOOL v216 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v216) {
      return 3;
    }
    goto LABEL_106;
  }
  if (v603 != 1)
  {
    BOOL v224 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v224) {
      return 3;
    }
    goto LABEL_110;
  }
  if ((v55 & 0x4000) == 0)
  {
    BOOL v208 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v208) {
      return 3;
    }
    goto LABEL_99;
  }
  if (HIWORD(v55) != 1)
  {
    BOOL v248 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v248) {
      ZinValidateTd<4u>::Test(v248, v249, v250, v251, v252, v253, v254, v255);
    }
    return 3;
  }
  if ((v3 & 4) != 0)
  {
    BOOL v256 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v256) {
      return 3;
    }
    goto LABEL_128;
  }
  if (((*(_DWORD *)(a3 + 212) ^ *(_DWORD *)(a3 + 64)) & 3) != 0)
  {
    BOOL v232 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v232) {
      return 3;
    }
    goto LABEL_117;
  }
  if ((v60 & 8) == 0)
  {
    BOOL v264 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v264) {
      return 3;
    }
    goto LABEL_133;
  }
  if ((v60 & 0x10) != 0)
  {
    BOOL v282 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v282) {
      return 3;
    }
    goto LABEL_162;
  }
  if ((v60 & 0x4000) != 0)
  {
    BOOL v290 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v290) {
      return 3;
    }
    goto LABEL_166;
  }
  unsigned int v281 = *(_DWORD *)(a3 + 88) & 0x7FFF;
  if (v281 != 1) {
    unsigned int v281 = v48 % v281 == 1;
  }
  if (!v14) {
    unsigned int v281 = 1;
  }
  if (v5 || !v281) {
    goto LABEL_174;
  }
  if (v602 > 1)
  {
    if (v49 % *(void *)(v44 + 1856) > *(void *)(v44 + 1872)) {
      goto LABEL_174;
    }
    BOOL v298 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v298) {
      return 3;
    }
    goto LABEL_171;
  }
  if (v49 % *(void *)(v44 + 1864) <= *(void *)(v44 + 1856))
  {
    BOOL v273 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v273) {
      return 3;
    }
    goto LABEL_148;
  }
LABEL_174:
  if (v91 >= v52 || *(void *)(v44 + 144) < v91)
  {
    BOOL v306 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v306) {
      ZinValidateTd<4u>::Test(v306, v307, v308, v309, v310, v311, v312, v313);
    }
    return 3;
  }
  if (v92 >= v87 || *(void *)(v44 + 152) < v92)
  {
    BOOL v314 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v314) {
      ZinValidateTd<4u>::Test(v314, v315, v316, v317, v318, v319, v320, v321);
    }
    return 3;
  }
  __int16 v322 = v55;
  uint64_t v323 = ((int)v49 - 1) * (uint64_t)(int)v89 - v91;
  if (v323 >= (int64_t)(v608 & 0x7FFF))
  {
    BOOL v334 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v334) {
      ZinValidateTd<4u>::Test(v334, v335, v336, v337, v338, v339, v340, v341);
    }
    return 3;
  }
  uint64_t v324 = (v608 >> 16) & 0x7FFF;
  uint64_t v325 = ((int)v48 - 1) * (uint64_t)(int)v90 - v92;
  if (v325 >= v324)
  {
    BOOL v342 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v342) {
      ZinValidateTd<4u>::Test(v342, v343, v344, v345, v346, v347, v348, v349);
    }
    return 3;
  }
  if ((uint64_t)(v323 + ((v52 + v89 - 1) & -v89)) < (int64_t)(v608 & 0x7FFF))
  {
    BOOL v326 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v326) {
      ZinValidateTd<6u>::Test(v326, v327, v328, v329, v330, v331, v332, v333);
    }
    return 3;
  }
  if ((uint64_t)(v325 + ((v90 + v87 - 1) & -v90)) < v324)
  {
    BOOL v350 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v350) {
      ZinValidateTd<6u>::Test(v350, v351, v352, v353, v354, v355, v356, v357);
    }
    return 3;
  }
  uint64_t v358 = v44;
  uint64_t v359 = (v3 >> 19) & 7;
  if ((v322 & 0x4000) != 0)
  {
    unsigned int v370 = v86 / v95;
    if (v86 % v95)
    {
      BOOL v371 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v371) {
        ZinValidateTd<4u>::Test(v371, v372, v373, v374, v375, v376, v377, v378);
      }
      return 3;
    }
    uint64_t v387 = v88 / v370;
    if (v88 % v370)
    {
      BOOL v388 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v388) {
        ZinValidateTd<4u>::Test(v388, v389, v390, v391, v392, v393, v394, v395);
      }
      return 3;
    }
    if (v387 > 1 << v85)
    {
      BOOL v396 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v396) {
        ZinValidateTd<4u>::Test(v396, v397, v398, v399, v400, v401, v402, v403);
      }
      return 3;
    }
    if (v387 < 1 << v85 && v387 << v359 < (unint64_t)v88)
    {
      BOOL v476 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v476) {
        ZinValidateTd<4u>::Test(v476, v477, v478, v479, v480, v481, v482, v483);
      }
      return 3;
    }
    if (v85 && (v370 & ((1 << v359) + 0x1FFFF)) != 0)
    {
      BOOL v494 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v494) {
        ZinValidateTd<4u>::Test(v494, v495, v496, v497, v498, v499, v500, v501);
      }
      return 3;
    }
  }
  BOOL v361 = v89 == 2 && v604 == 2;
  if (v602 == 2)
  {
    if (v361)
    {
      if (*(void *)(v44 + 80) >= v52)
      {
        if (*(void *)(v44 + 72) > v52)
        {
          BOOL v412 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v412) {
            ZinValidateTd<4u>::Test(v412, v413, v414, v415, v416, v417, v418, v419);
          }
          return 3;
        }
        goto LABEL_241;
      }
      BOOL v379 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v379) {
        return 3;
      }
    }
    else
    {
      if (v89 != 2 || v604 != 1)
      {
        if (*(void *)(v44 + 88) < v52)
        {
          BOOL v428 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v428) {
            ZinValidateTd<4u>::Test(v428, v429, v430, v431, v432, v433, v434, v435);
          }
          return 3;
        }
        goto LABEL_241;
      }
      if (*(void *)(v44 + 80) >= v52) {
        goto LABEL_241;
      }
      BOOL v379 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v379) {
        return 3;
      }
    }
    ZinValidateTd<6u>::Test(v379, v380, v381, v382, v383, v384, v385, v386);
    return 3;
  }
  if (v361)
  {
    if (*(void *)(v44 + 56) < v52)
    {
      BOOL v362 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v362) {
        return 3;
      }
LABEL_205:
      ZinValidateTd<6u>::Test(v362, v363, v364, v365, v366, v367, v368, v369);
      return 3;
    }
    if (*(void *)(v44 + 48) > v52)
    {
      BOOL v404 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v404) {
        ZinValidateTd<6u>::Test(v404, v405, v406, v407, v408, v409, v410, v411);
      }
      return 3;
    }
  }
  else if (v89 == 2 && v604 == 1)
  {
    if (*(void *)(v44 + 56) < v52)
    {
      BOOL v362 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v362) {
        return 3;
      }
      goto LABEL_205;
    }
  }
  else if (*(void *)(v44 + 64) < v52)
  {
    BOOL v420 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v420) {
      ZinValidateTd<4u>::Test(v420, v421, v422, v423, v424, v425, v426, v427);
    }
    return 3;
  }
LABEL_241:
  if (v90 == 2 && v603 == 2)
  {
    if (*(void *)(v44 + 104) < v87)
    {
      BOOL v436 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v436) {
        return 3;
      }
LABEL_245:
      ZinValidateTd<6u>::Test(v436, v437, v438, v439, v440, v441, v442, v443);
      return 3;
    }
    if (*(void *)(v44 + 96) > v87)
    {
      BOOL v444 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v444) {
        ZinValidateTd<6u>::Test(v444, v445, v446, v447, v448, v449, v450, v451);
      }
      return 3;
    }
  }
  else if (v90 == 2 && v603 == 1)
  {
    if (*(void *)(v44 + 104) < v87)
    {
      BOOL v436 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v436) {
        return 3;
      }
      goto LABEL_245;
    }
  }
  else if (*(void *)(v44 + 112) < v87)
  {
    BOOL v452 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v452) {
      ZinValidateTd<4u>::Test(v452, v453, v454, v455, v456, v457, v458, v459);
    }
    return 3;
  }
  if (v604 * (unint64_t)v49 > *(void *)(v44 + 320))
  {
    BOOL v460 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v460) {
      ZinValidateTd<4u>::Test(v460, v461, v462, v463, v464, v465, v466, v467);
    }
    return 3;
  }
  if (v603 * (unint64_t)v48 > *(void *)(v44 + 336))
  {
    BOOL v468 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v468) {
      ZinValidateTd<4u>::Test(v468, v469, v470, v471, v472, v473, v474, v475);
    }
    return 3;
  }
  unint64_t v484 = (v90 * v86 * v89) * (unint64_t)v93;
  unint64_t v485 = *(void *)(v44 + 368);
  if (v484 > v485)
  {
    BOOL v486 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v486) {
      ZinValidateTd<6u>::Test(v486, v487, v488, v489, v490, v491, v492, v493);
    }
    return 3;
  }
  if (v603 * v88 * v604 * (unint64_t)v93 > v485)
  {
    BOOL v502 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v502) {
      ZinValidateTd<6u>::Test(v502, v503, v504, v505, v506, v507, v508, v509);
    }
    return 3;
  }
  if ((v600 & 8) != 0)
  {
    int v518 = v598 & 3;
    unint64_t v519 = HIBYTE(v598) & 0xF;
    float v520 = 1.0;
    if (v518 == 1) {
      float v520 = 2.0;
    }
    if (v518 == 2) {
      float v520 = 1.25;
    }
    BOOL v521 = v518 == 1 && v63 == 32;
    v612[0] = 0x100u >> v5;
    v612[1] = 0x100u >> (BYTE2(v3) & 7);
    v612[2] = 0x100u >> v4;
    if (v521) {
      float v520 = 2.0;
    }
    if (v602 == 2) {
      uint64_t v522 = 2;
    }
    else {
      uint64_t v522 = 1;
    }
    if (!*(unsigned char *)(v44 + 1313) || v519 != 3)
    {
      uint64_t v531 = 0;
      while ((uint64_t)(((uint64_t)(float)(v520 * (float)(v612[v531] / v522 * v604)) * v519) & 0x800000000000003FLL) < 1)
      {
        if (++v531 == 3)
        {
          uint64_t v532 = (1 << v359 << v85);
          if (v93 == 1
            && ((unint64_t)(v532 - 1) + v88) >> (v359 + v85) == 1)
          {
            goto LABEL_278;
          }
          unint64_t v533 = 0;
          char v534 = 1;
          uint64_t v535 = 4;
          do
          {
            if ((*(void *)&v534 & (v598 >> 28)) != 0) {
              ++v533;
            }
            v534 *= 2;
            --v535;
          }
          while (v535);
          BOOL v536 = v519 >= v533;
          uint64_t v537 = v519 - v533;
          if (v537 != 0 && v536)
          {
            if (v532 % v537)
            {
              BOOL v538 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v538) {
                ZinValidateTd<4u>::Test(v538, v539, v540, v541, v542, v543, v544, v545);
              }
            }
            else
            {
              if (!(v88 % v537)) {
                goto LABEL_278;
              }
              BOOL v580 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v580) {
                ZinValidateTd<4u>::Test(v580, v581, v582, v583, v584, v585, v586, v587);
              }
            }
          }
          else
          {
            BOOL v572 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v572) {
              ZinValidateTd<6u>::Test(v572, v573, v574, v575, v576, v577, v578, v579);
            }
          }
          return 3;
        }
      }
    }
    BOOL v523 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v523) {
      ZinValidateTd<17u>::Test(v523, v524, v525, v526, v527, v528, v529, v530);
    }
    return 3;
  }
LABEL_278:
  if ((*(unsigned char *)(a3 + 262) & 7) != 0)
  {
    BOOL v510 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v510) {
      ZinValidateTd<6u>::Test(v510, v511, v512, v513, v514, v515, v516, v517);
    }
    return 3;
  }
  if (!v596)
  {
    BOOL v554 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v554) {
      ZinValidateTd<6u>::Test(v554, v555, v556, v557, v558, v559, v560, v561);
    }
    return 3;
  }
  if (v596 > v48)
  {
    BOOL v546 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v546) {
      ZinValidateTd<6u>::Test(v546, v547, v548, v549, v550, v551, v552, v553);
    }
    return 3;
  }
  int v562 = *(_DWORD *)(a3 + 212);
  if ((v562 & 3) == 2) {
    char v563 = v562 >> 4;
  }
  else {
    char v563 = (v562 >> 4) + 1;
  }
  if (*(void *)(v44 + 488) < (unint64_t)(1 << v563))
  {
    BOOL v564 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v564) {
      ZinValidateTd<4u>::Test(v564, v565, v566, v567, v568, v569, v570, v571);
    }
    return 3;
  }
  uint64_t result = ZinValidateTd<4u>::CheckKMEMBufferSizes(v44, a3);
  if (!result)
  {
    return ZinValidateTd<6u>::CheckInRangeDmaAccess(v358, a2, a3);
  }
  return result;
}

uint64_t ZinValidateTd<4u>::CheckKernelRewind(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == a1) {
    return 0;
  }
  LOBYTE(v2) = 0;
  while (1)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 200);
    unsigned int v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x4000) != 0) {
      break;
    }
LABEL_8:
    int v2 = (v4 >> 12) & 1;
    uint64_t v1 = *(void *)(v1 + 8);
    if (v1 == a1) {
      return 0;
    }
  }
  if (v2)
  {
    uint64_t v5 = 1 << (((unint64_t)*(unsigned int *)(v3 + 100) >> 19) & 7);
    BOOL v6 = (char *)(*(void *)(v3 + 40) + 4);
    while (1)
    {
      char v7 = *v6;
      v6 += 24;
      if (v7) {
        break;
      }
      if (!--v5) {
        goto LABEL_8;
      }
    }
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      ZinValidateTd<6u>::CheckKernelRewind(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v17) {
      ZinValidateTd<4u>::CheckKernelRewind(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return 3;
}

uint64_t ZinValidateTd<4u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2)
{
  int v4 = (*(_DWORD *)(a2 + 92) >> 19) & 7;
  unint64_t v5 = (1 << ((*(_DWORD *)(a2 + 92) >> 19) & 7));
  int v6 = *(_DWORD *)(a2 + 212);
  unint64_t v7 = *(int *)(a1 + 8);
  uint64_t v42 = 0;
  std::vector<unsigned long>::vector(__p, v7, &v42);
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = (unint64_t *)__p[0];
  uint64_t v11 = (unsigned int *)(v9 + 12);
  do
  {
    unsigned int v12 = *v11;
    v11 += 6;
    v10[v8++] = ((unint64_t)v12 >> 6) & 0x7FF;
  }
  while (v5 != v8);
  uint64_t v13 = *(int *)(a1 + 8);
  if (v5 < v13)
  {
    uint64_t v14 = v13 - v5;
    uint64_t v15 = (char *)(v9 + 24 * v5 + 4);
    while (1)
    {
      char v16 = *v15;
      v15 += 24;
      if (v16) {
        break;
      }
      if (!--v14) {
        goto LABEL_7;
      }
    }
    BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v25) {
      ZinValidateTd<6u>::CheckKernelRewind(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    goto LABEL_19;
  }
LABEL_7:
  uint64_t v17 = 0;
  if ((v6 & 0x100) == 0 && v4)
  {
    uint64_t v18 = 2;
    if (v5 > 2) {
      uint64_t v18 = v5;
    }
    unint64_t v21 = *v10;
    uint64_t v19 = v10 + 1;
    unint64_t v20 = v21;
    uint64_t v22 = v18 - 1;
    while (1)
    {
      unint64_t v24 = *v19++;
      unint64_t v23 = v24;
      if (v24 > v20) {
        break;
      }
      unint64_t v20 = v23;
      if (!--v22)
      {
        uint64_t v17 = 0;
        goto LABEL_20;
      }
    }
    BOOL v33 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v33) {
      ZinValidateTd<4u>::CheckKMEMBufferSizes(v33, v34, v35, v36, v37, v38, v39, v40);
    }
LABEL_19:
    uint64_t v17 = 3;
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v17;
}

void ZinIrCodegenHandleTds<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Invalid TD exists\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Error during network codegen\n", a5, a6, a7, a8, 0);
}

void ZinIrCodegenHandleTdsMakeList<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Instruction offset could not be calculated\n", a5, a6, a7, a8, 0);
}

void ZinIrCodegenValidateTds<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrContextSwitchValidator<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Cannot have a pending L2 alias errata resolution when outside a context switch IN sequence", a5, a6, a7, a8, 0);
}

void SetTensorKernelDependency<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<4u>::HandleCommonMACBypassMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<4u>::HandleCommonPoolOpcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<4u>::HandleCommonConvOpcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<4u>::HandleTileDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Internal Error: kANECNetNetworkStatus_TileDMASourceAllocationFailure - stride not aligned\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Invalid Bar id\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "RDMA Src should be in DRAM\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Invalid context switch mode\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Oplayer shouldn't have more than 2 inputs at codegen\n", a5, a6, a7, a8, 0);
}

void ZinAneTd<4u>::HandleL2Config(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Max/Min Pooling should always be used with negative/positive padding mode.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Invalid Padding mode for Conv\n", a5, a6, a7, a8, 0);
}

void ZinAneTd<4u>::HandleNEConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to set NE Round Cfg registers", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Weight on layer but no kernel data\n", a5, a6, a7, a8, 0);
}

void ZinAneTd<4u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<4u>::HandleTileDmaDstConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Stride should be greater than zero\n", a5, a6, a7, a8, 0);
}

void ZinAneTd<4u>::HandleEngineLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<4u>::ValidateOCGSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinValidateTd<4u>::Test(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<4u>::CheckKernelRewind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinValidateTd<4u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t ZinIrCodegenHandleTds<5u>(uint64_t **a1, unsigned int a2, uint64_t a3, unsigned int *a4, CFArrayRef *a5)
{
  v118[2] = *MEMORY[0x263EF8340];
  uint64_t v115 = (uint64_t)&v115;
  uint64_t v116 = &v115;
  uint64_t v117 = 0;
  uint64_t v8 = ZinIrCodegenHandleTdsMakeList<5u>(a1, a2, a3, &v115, (uint64_t)a4, a5);
  if (v8)
  {
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      ZinIrCodegenHandleTds<4u>(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    size_t v17 = *a4;
    if (v17)
    {
      uint64_t v18 = (char *)malloc_type_calloc(v17, 4uLL, 0x100004052888210uLL);
      if (v18)
      {
        uint64_t v8 = ZinIrCodegenValidateTds<5u>(*a1, (uint64_t)a1[3], (uint64_t)&v115);
        if (v8)
        {
          BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v19) {
            ZinIrCodegenHandleTds<4u>(v19, v20, v21, v22, v23, v24, v25, v26);
          }
          free(v18);
        }
        else
        {
          ZinIrMemoryPool::GetSections((uint64_t)a1[3], 1, v105);
          uint64_t v37 = *(void *)(*(void *)&v105[8] + 16);
          std::__list_imp<ZinIrSection *>::clear(v105);
          uint64_t v38 = v116;
          if (v116 != &v115)
          {
            uint64_t v102 = 8 - (void)v18;
            uint64_t v100 = v18;
            uint64_t v101 = 144 - (void)v18;
            do
            {
              uint64_t v39 = (uint64_t *)v38[1];
              if (v39 == &v115) {
                uint64_t v40 = 0;
              }
              else {
                uint64_t v40 = v39[2];
              }
              uint64_t v41 = v38[2];
              uint64_t v42 = *(void *)(v41 + 200);
              std::string::basic_string[abi:ne180100]<0>(&v111, "__nid0__tid");
              std::to_string(&v110, *(unsigned __int16 *)(v42 + 8));
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v43 = &v110;
              }
              else {
                unint64_t v43 = (std::string *)v110.__r_.__value_.__r.__words[0];
              }
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v110.__r_.__value_.__l.__size_;
              }
              unint64_t v45 = std::string::append(&v111, (const std::string::value_type *)v43, size);
              long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v112.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&__p, "__");
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v48 = __p.__r_.__value_.__l.__size_;
              }
              unint64_t v49 = std::string::append(&v112, (const std::string::value_type *)p_p, v48);
              long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
              *(void *)&v105[16] = *((void *)&v49->__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v105 = v50;
              v49->__r_.__value_.__l.__size_ = 0;
              v49->__r_.__value_.__r.__words[2] = 0;
              v49->__r_.__value_.__r.__words[0] = 0;
              int v51 = *(char *)(v41 + 183);
              if (v51 >= 0) {
                unint64_t v52 = (const std::string::value_type *)(v41 + 160);
              }
              else {
                unint64_t v52 = *(const std::string::value_type **)(v41 + 160);
              }
              if (v51 >= 0) {
                std::string::size_type v53 = *(unsigned __int8 *)(v41 + 183);
              }
              else {
                std::string::size_type v53 = *(void *)(v41 + 168);
              }
              unint64_t v54 = std::string::append((std::string *)v105, v52, v53);
              long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              std::string::size_type v114 = v54->__r_.__value_.__r.__words[2];
              long long v113 = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              if ((v105[23] & 0x80000000) != 0) {
                operator delete(*(void **)v105);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v112.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v110.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v111.__r_.__value_.__l.__data_);
              }
              memset(&v112, 0, sizeof(v112));
              if (v40)
              {
                uint64_t v56 = *(void *)(v40 + 200);
                std::string::basic_string[abi:ne180100]<0>(&v110, "__nid0__tid");
                std::to_string(&__p, *(unsigned __int16 *)(v56 + 8));
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v57 = &__p;
                }
                else {
                  int v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v58 = __p.__r_.__value_.__l.__size_;
                }
                unsigned int v59 = std::string::append(&v110, (const std::string::value_type *)v57, v58);
                long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
                v111.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v60;
                v59->__r_.__value_.__l.__size_ = 0;
                v59->__r_.__value_.__r.__words[2] = 0;
                v59->__r_.__value_.__r.__words[0] = 0;
                std::string::basic_string[abi:ne180100]<0>(v107, "__");
                if ((v108 & 0x80u) == 0) {
                  int v61 = v107;
                }
                else {
                  int v61 = (void **)v107[0];
                }
                if ((v108 & 0x80u) == 0) {
                  std::string::size_type v62 = v108;
                }
                else {
                  std::string::size_type v62 = (std::string::size_type)v107[1];
                }
                int v63 = std::string::append(&v111, (const std::string::value_type *)v61, v62);
                unsigned int v64 = v18;
                long long v65 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                *(void *)&v105[16] = *((void *)&v63->__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v105 = v65;
                v63->__r_.__value_.__l.__size_ = 0;
                v63->__r_.__value_.__r.__words[2] = 0;
                v63->__r_.__value_.__r.__words[0] = 0;
                uint64_t v66 = v40;
                uint64_t v69 = *(const std::string::value_type **)(v40 + 160);
                uint64_t v68 = v40 + 160;
                uint64_t v67 = v69;
                int v70 = *(char *)(v68 + 23);
                if (v70 >= 0) {
                  uint64_t v71 = (const std::string::value_type *)v68;
                }
                else {
                  uint64_t v71 = v67;
                }
                if (v70 >= 0) {
                  std::string::size_type v72 = *(unsigned __int8 *)(v68 + 23);
                }
                else {
                  std::string::size_type v72 = *(void *)(v68 + 8);
                }
                uint64_t v73 = std::string::append((std::string *)v105, v71, v72);
                std::string::size_type v74 = v73->__r_.__value_.__r.__words[0];
                v118[0] = v73->__r_.__value_.__l.__size_;
                *(void *)((char *)v118 + 7) = *(std::string::size_type *)((char *)&v73->__r_.__value_.__r.__words[1]
                                                                          + 7);
                char v75 = HIBYTE(v73->__r_.__value_.__r.__words[2]);
                v73->__r_.__value_.__l.__size_ = 0;
                v73->__r_.__value_.__r.__words[2] = 0;
                v73->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v112.__r_.__value_.__l.__data_);
                }
                v112.__r_.__value_.__r.__words[0] = v74;
                v112.__r_.__value_.__l.__size_ = v118[0];
                *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v118 + 7);
                *((unsigned char *)&v112.__r_.__value_.__s + 23) = v75;
                if ((v105[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v105);
                }
                uint64_t v40 = v66;
                if ((char)v108 < 0) {
                  operator delete(v107[0]);
                }
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v111.__r_.__value_.__l.__data_);
                }
                uint64_t v18 = v64;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v110.__r_.__value_.__l.__data_);
                }
              }
              uint64_t v76 = &v18[*(_DWORD *)(v41 + 184) & 0xFFFFFFFC];
              *(_DWORD *)uint64_t v76 = *(_DWORD *)(v42 + 8);
              *((_DWORD *)v76 + 1) = *(_DWORD *)(v42 + 12);
              *((_DWORD *)v76 + 2) = *(_DWORD *)(v42 + 16);
              *((_DWORD *)v76 + 3) = *(_DWORD *)(v42 + 20);
              *((_DWORD *)v76 + 4) = *(_DWORD *)(v42 + 24);
              if (v40) {
                AddRelocation((uint64_t)&v112, v37, v76 + 20 - v18, 0, a1[7]);
              }
              BOOL v104 = v38;
              *((_DWORD *)v76 + 5) = *(_DWORD *)(v42 + 28);
              *((_DWORD *)v76 + 6) = *(_DWORD *)(v42 + 32);
              if (*(unsigned char *)(v42 + 27))
              {
                BOOL v77 = v76 + 32;
                *((_DWORD *)v76 + 7) = *(_DWORD *)(v42 + 36);
              }
              else
              {
                BOOL v77 = v76 + 28;
              }
              uint64_t v78 = **a1;
              if (*(_DWORD *)(v78 + 8))
              {
                uint64_t v79 = 0;
                unint64_t v80 = 0;
                uint64_t v81 = (uint64_t)v77 + v102;
                do
                {
                  uint64_t v82 = (void *)(*(void *)(v42 + 40) + v79);
                  uint64_t v83 = v82[1];
                  *(void *)BOOL v77 = *v82;
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v41 + 8) - *(void *)v41) >> 3) > v80) {
                    AddRelocation(*(void *)v41 + v79, v37, v81, 0, a1[7]);
                  }
                  uint64_t v84 = v77 + 4;
                  *((void *)v77 + 1) = v83;
                  ++v80;
                  v79 += 24;
                  v81 += 16;
                  v77 += 4;
                }
                while (v80 < *(unsigned int *)(v78 + 8));
                BOOL v77 = v84;
                uint64_t v18 = v100;
              }
              long long v85 = *(_OWORD *)(v42 + 80);
              long long v86 = *(_OWORD *)(v42 + 96);
              *(_OWORD *)BOOL v77 = *(_OWORD *)(v42 + 64);
              *((_OWORD *)v77 + 1) = v85;
              *((_OWORD *)v77 + 2) = v86;
              long long v87 = *(_OWORD *)(v42 + 136);
              *(_OWORD *)uint64_t v105 = *(_OWORD *)(v42 + 120);
              *(_OWORD *)&v105[16] = v87;
              long long v106 = *(_OWORD *)(v42 + 152);
              uint64_t v88 = (char *)(v77 + 14);
              *((void *)v77 + 6) = *(void *)v105;
              uint64_t v89 = **(void **)(v41 + 128);
              if (v89) {
                AddRelocation(v89 + 160, v37, v88 - v18, 0, a1[7]);
              }
              uint64_t v90 = 0;
              *(_OWORD *)uint64_t v88 = *(_OWORD *)&v105[8];
              do
              {
                v77[v90 + 18] = *(_DWORD *)&v105[v90 * 4 + 24];
                ++v90;
              }
              while (v90 != 4);
              long long v91 = *(_OWORD *)(v42 + 184);
              uint64_t v92 = *(void *)(v42 + 200);
              *(_OWORD *)(v77 + 22) = *(_OWORD *)(v42 + 168);
              *(_OWORD *)(v77 + 26) = v91;
              *((void *)v77 + 15) = v92;
              *(void *)&long long v91 = *(void *)(v42 + 232);
              *((_OWORD *)v77 + 8) = *(_OWORD *)(v42 + 216);
              *((void *)v77 + 18) = v91;
              long long v93 = *(_OWORD *)(v42 + 256);
              *((void *)v77 + 19) = *(void *)(v42 + 248);
              uint64_t v94 = *(void *)(v41 + 152);
              if (v94)
              {
                long long v103 = v93;
                AddRelocation(v94 + 160, v37, (uint64_t)v77 + v101 + 16, 0, a1[7]);
                long long v93 = v103;
              }
              *((_OWORD *)v77 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v93;
              uint64_t v95 = *(unsigned int *)(v41 + 184);
              unsigned int v96 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 16))(v42);
              AddSymbol((uint64_t)&v113, v37, v95, 4 * v96, a1[7]);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v112.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v114) < 0) {
                operator delete((void *)v113);
              }
              uint64_t v38 = (uint64_t *)v104[1];
            }
            while (v38 != &v115);
            for (uint64_t i = v116; i != &v115; uint64_t i = (uint64_t *)i[1])
            {
              uint64_t v98 = (ZinAneInstruction *)i[2];
              if (v98)
              {
                ZinAneInstruction::~ZinAneInstruction(v98);
                MEMORY[0x21667D3C0]();
              }
            }
          }
          uint64_t v8 = 0;
          *(void *)(v37 + 24) = v18;
        }
      }
      else
      {
        BOOL v27 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v27) {
          ZinIrCodegenHandleTds<4u>(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        for (int j = v116; j != &v115; int j = (uint64_t *)j[1])
        {
          uint64_t v36 = (ZinAneInstruction *)j[2];
          if (v36)
          {
            ZinAneInstruction::~ZinAneInstruction(v36);
            MEMORY[0x21667D3C0]();
          }
        }
        ZinIrNetworkStatus::SetError(a5, @"MemoryAllocationFailure");
        uint64_t v8 = 3;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v115);
  return v8;
}

void sub_211301520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  std::__list_imp<ZinIrSection *>::clear((void *)(v57 - 160));
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTdsMakeList<5u>(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, CFArrayRef *a6)
{
  v111[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[4];
  if (a4[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Warning: tds list is already populated\n", buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Clearing list contents without explicit deallocation\n", buf, 2u);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(a4);
  BOOL v9 = (ZinIrOpLayer **)*v8;
  uint64_t v10 = (ZinIrOpLayer **)v8[1];
  if ((ZinIrOpLayer **)*v8 == v10)
  {
    uint64_t v11 = (ZinIrOpLayer **)*v8;
  }
  else
  {
    do
    {
      if (ZinIrOpLayer::IsANELayer(*v9)) {
        break;
      }
      ++v9;
    }
    while (v9 != v10);
    BOOL v9 = (ZinIrOpLayer **)*v8;
    uint64_t v11 = (ZinIrOpLayer **)v8[1];
  }
  do
  {
    uint64_t v12 = v11;
    if (v11 == v9) {
      break;
    }
    --v11;
  }
  while (!ZinIrOpLayer::IsANELayer(*(v12 - 1)));
  uint64_t v92 = **a1;
  long long v93 = (ZinIrCompilerParameters *)(*a1)[1];
  memset(v103, 0, sizeof(v103));
  int v104 = 1065353216;
  memset(v101, 0, sizeof(v101));
  int v102 = 1065353216;
  uint64_t v14 = *v8;
  uint64_t v13 = v8[1];
  uint64_t v89 = (uint64_t)v8;
  unint64_t v15 = (v13 - *v8) >> 3;
  std::string __p = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>,std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>>((char *)&__p, v13, v13, v14, v14, v15);
  size_t v17 = (ZinIrOpLayer **)__p;
  uint64_t v16 = v99;
  if (__p != v99)
  {
    do
    {
      uint64_t v97 = 0;
      uint64_t v97 = *v17;
      if (ZinIrOpLayer::IsANELayer(v97))
      {
        v96[3] = 0;
        operator new();
      }
      ++v17;
    }
    while (v17 != v16);
  }
  ReassignTaskIDs<17u>((uint64_t)a4);
  if (!ZinIrCompilerParameters::getEnableKernelRewind(v93) && !*(unsigned char *)(v92 + 2088)
    || (uint64_t v18 = ZinCodegenEnableInterKernelReuse(5, a1, (uint64_t)a4), !v18))
  {
    BOOL v19 = *(_DWORD **)(*(void *)(a4[1] + 16) + 200);
    v19[44] |= 0x30u;
    v19[48] |= 0x30u;
    (*(void (**)(_DWORD *, uint64_t, void))(*(void *)v19 + 32))(v19, 24, 0);
    if ((void *)a4[1] != a4)
    {
      uint64_t v20 = 0;
      uint64_t v21 = a4;
      do
      {
        uint64_t v22 = *(void *)(*(void *)(*v21 + 16) + 200);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 368))(v22, v20);
        uint64_t v23 = *(void *)(*(void *)(*v21 + 16) + 200);
        uint64_t v20 = (*(unsigned int (**)(uint64_t))(*(void *)v23 + 16))(v23) - 1;
        uint64_t v21 = (void *)*v21;
      }
      while (v21 != (void *)a4[1]);
    }
    if (SetInstructionMemOffset<6u>((uint64_t)a4, v92))
    {
      BOOL v24 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v24) {
        ZinIrCodegenHandleTdsMakeList<4u>(v24, v25, v26, v27, v28, v29, v30, v31);
      }
LABEL_26:
      uint64_t v18 = 3;
      goto LABEL_27;
    }
    uint64_t v33 = *(void *)(*a4 + 16);
    int v34 = *(_DWORD *)(v33 + 184);
    unsigned int v35 = v34 + 4 * (*(uint64_t (**)(void))(**(void **)(v33 + 200) + 16))(*(void *)(v33 + 200));
    if ((v34 & 3) != 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinIrCodegenHandleTdsMakeList<6u>(v35);
      }
      goto LABEL_26;
    }
    *(_DWORD *)a5 = v35 >> 2;
    memset(buf, 0, sizeof(buf));
    long long v106 = xmmword_211ED50C0;
    char v107 = 0;
    uint64_t v108 = 0;
    std::string v110 = 0;
    v111[0] = 0;
    uint64_t v109 = 0;
    *(_DWORD *)uint8_t buf = a4[2];
    *(_DWORD *)&buf[4] = (*(uint64_t (**)(_DWORD *))(*(void *)v19 + 16))(v19) - 1;
    *(_DWORD *)&buf[8] = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v19 + 24))(v19, 8);
    std::vector<ZinIrOpLayer *>::reserve((void **)&v109, a4[2]);
    for (uint64_t i = a4[1]; (void *)i != a4; uint64_t i = *(void *)(i + 8))
    {
      v96[0] = *(ZinIrTensor **)(i + 16);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v101, v96))ZinAssertImpl("Incorrect internal states: codegen"); {
      uint64_t v37 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v101, v96);
      }
      uint64_t v38 = v37;
      if (!v37) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v39 = v110;
      if ((unint64_t)v110 >= v111[0])
      {
        uint64_t v41 = (v110 - v109) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v42 = (uint64_t)(v111[0] - (void)v109) >> 2;
        if (v42 <= v41 + 1) {
          unint64_t v42 = v41 + 1;
        }
        if (v111[0] - (void)v109 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v42;
        }
        if (v43) {
          uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v111, v43);
        }
        else {
          uint64_t v44 = 0;
        }
        unint64_t v45 = &v44[8 * v41];
        *(void *)unint64_t v45 = v38[3];
        uint64_t v40 = v45 + 8;
        unint64_t v47 = v109;
        long long v46 = v110;
        if (v110 != v109)
        {
          do
          {
            uint64_t v48 = *((void *)v46 - 1);
            v46 -= 8;
            *((void *)v45 - 1) = v48;
            v45 -= 8;
          }
          while (v46 != v47);
          long long v46 = v109;
        }
        uint64_t v109 = v45;
        std::string v110 = v40;
        v111[0] = &v44[8 * v43];
        if (v46) {
          operator delete(v46);
        }
      }
      else
      {
        *(void *)std::string v110 = v37[3];
        uint64_t v40 = v39 + 8;
      }
      std::string v110 = v40;
    }
    unint64_t v49 = a1[8];
    unint64_t v50 = v49[1];
    if (v50 >= v49[2])
    {
      uint64_t v51 = std::vector<ZinIrCodegenTDPartitionStats>::__push_back_slow_path<ZinIrCodegenTDPartitionStats const&>(a1[8], (long long *)buf);
    }
    else
    {
      std::vector<ZinIrCodegenTDPartitionStats>::__construct_one_at_end[abi:ne180100]<ZinIrCodegenTDPartitionStats const&>((uint64_t)a1[8], (long long *)buf);
      uint64_t v51 = v50 + 80;
    }
    v49[1] = v51;
    if (v109)
    {
      std::string v110 = v109;
      operator delete(v109);
    }
    unint64_t v52 = *a1;
    std::unordered_map<ZinIrOpLayer *,ZinAneInstruction *>::unordered_map((uint64_t)v94, (uint64_t)v103);
    uint64_t v53 = v52[1];
    buf[5] = *(unsigned char *)(v53 + 472);
    *(_WORD *)&buf[3] = *(_WORD *)(v53 + 100);
    uint64_t v54 = *(unsigned __int8 *)(v53 + 95);
    int v55 = (char)v54;
    if ((v54 & 0x80u) != 0) {
      uint64_t v54 = *(void *)(v53 + 80);
    }
    if (v54 == 9)
    {
      if (v55 >= 0) {
        uint64_t v56 = v53 + 72;
      }
      else {
        uint64_t v56 = *(void *)(v53 + 72);
      }
      uint64_t v57 = *(void *)v56;
      int v58 = *(unsigned __int8 *)(v56 + 8);
      BOOL v60 = v57 == 0x30336E2E67343168 && v58 == 49;
    }
    else
    {
      BOOL v60 = 0;
    }
    if (*(unsigned char *)(v53 + 536)) {
      uint8_t v61 = 1;
    }
    else {
      uint8_t v61 = v60;
    }
    buf[6] = v61;
    std::string::size_type v62 = (void *)a4[1];
    if (v62 != a4)
    {
      int v63 = (unsigned char *)v62[2];
      unsigned int v64 = &v95;
      do
        unsigned int v64 = (uint64_t *)*v64;
      while (v64 && (unsigned char *)v64[3] != v63);
      buf[0] = v63[199];
      buf[2] = v63[196];
      buf[1] = v63[198];
      ZinAneInstruction::HandleEventLogs((uint64_t)v63, v52);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v94);
    long long v65 = (void *)a4[1];
    if (v65 != a4)
    {
      uint64_t v67 = **a1;
      uint64_t v66 = (float *)(*a1)[1];
      uint64_t v68 = &_os_log_internal;
      while (1)
      {
        uint64_t v69 = v65[2];
        int v70 = *(unsigned __int16 **)(v69 + 200);
        unint64_t v71 = 4 * (*(unsigned int (**)(unsigned __int16 *))(*(void *)v70 + 16))(v70);
        if (*(void *)(v67 + 296) > v71 || *(void *)(v67 + 304) < v71) {
          break;
        }
        uint8x8_t v73 = (uint8x8_t)vcnt_s8((int8x8_t)v70[10]);
        v73.i16[0] = vaddlv_u8(v73);
        uint64_t v74 = *(void *)(a5 + 16);
        *(void *)(a5 + 8) += v73.u32[0];
        uint8x8_t v75 = (uint8x8_t)vcnt_s8((int8x8_t)v70[8]);
        v75.i16[0] = vaddlv_u8(v75);
        *(void *)(a5 + 16) = v74 + v75.u32[0];
        unsigned int v76 = v70[6];
        if (*(_DWORD *)(a5 + 32) > v76) {
          unsigned int v76 = *(_DWORD *)(a5 + 32);
        }
        *(_DWORD *)(a5 + 32) = v76;
        float v77 = v66[97];
        if (v77 > 0.0)
        {
          LOWORD(v72) = v70[6];
          if (v77 < (float)v72) {
            ++*(_DWORD *)(a5 + 36);
          }
        }
        LODWORD(v96[0]) = 0;
        if (ZinIrCompilerParameters::getEnforcedTdLatency((ZinIrCompilerParameters *)v66, (float *)v96))
        {
          int v78 = v70[6];
          float v79 = *(float *)v96;
          if (*(float *)v96 < (float)v78 && os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            unint64_t v80 = (void *)(v69 + 160);
            if (*(char *)(v69 + 183) < 0) {
              unint64_t v80 = (void *)*v80;
            }
            *(_DWORD *)uint8_t buf = 136315650;
            *(void *)&buf[4] = v80;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v79;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&long long v106 = (double)v78;
            _os_log_error_impl(&dword_210C72000, v68, OS_LOG_TYPE_ERROR, "Latency for Task %s is too large (>%.0f us) (%.0f)", buf, 0x20u);
          }
        }
        long long v65 = (void *)v65[1];
        if (v65 == a4) {
          goto LABEL_96;
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinIrCodegenHandleTdsMakeList<6u>();
      }
      ZinIrNetworkStatus::SetError(a6, @"InvalidTotalTDSize");
      goto LABEL_26;
    }
LABEL_96:
    uint64_t v18 = ZinIrContextSwitchValidator<4u>((uint64_t)a4);
    if (v18)
    {
      BOOL v81 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v81) {
        ZinIrCodegenHandleTdsMakeList<4u>(v81, v82, v83, v84, v85, v86, v87, v88);
      }
    }
    else
    {
      uint64_t v18 = SetTensorKernelDependency<4u>(v89, v103, a6);
      if (!v18)
      {
        if ((*((unsigned char *)v93 + 97) & 0x20) != 0) {
          ZinIrCodegen::PrintContextSwitchInfo((uint64_t)a4);
        }
        uint64_t v18 = 0;
      }
    }
  }
LABEL_27:
  if (__p)
  {
    uint64_t v99 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v101);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v103);
  return v18;
}

void sub_211302470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenValidateTds<5u>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4 == a3)
  {
LABEL_10:
    uint64_t v13 = ZinValidateTd<5u>::CheckKernelRewind(a3);
    if (v13)
    {
      BOOL v14 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v14) {
        ZinIrCodegenValidateTds<4u>(v14, v15, v16, v17, v18, v19, v20, v21);
      }
    }
  }
  else
  {
    int v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v9 = *(void *)(v8 + 200);
      int v11 = *(unsigned __int16 *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      if (v11 != v7) {
        break;
      }
      if (!*(unsigned char *)(v8 + 188))
      {
        uint64_t v12 = ZinValidateTd<5u>::Test(a1, a2, v10);
        if (v12)
        {
          uint64_t v13 = v12;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrCodegenValidateTds<6u>();
          }
          return v13;
        }
      }
      if (*(unsigned char *)(v8 + 198)) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a3) {
        goto LABEL_10;
      }
    }
    BOOL v22 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v22) {
      ZinIrCodegenValidateTds<1u>(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    return 3;
  }
  return v13;
}

uint64_t ZinAneTd<5u>::GetField(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      return (*(_DWORD *)(a1 + 24) >> 11) & 1;
    case 1:
      return (*(_DWORD *)(a1 + 24) >> 13) & 1;
    case 2:
      unsigned int v3 = *(_DWORD *)(a1 + 24);
      return (v3 >> 15) & 1;
    case 3:
      return (*(_DWORD *)(a1 + 24) >> 14) & 1;
    case 4:
      return (*(_DWORD *)(a1 + 24) >> 12) & 1;
    case 5:
      unsigned int v4 = *(_DWORD *)(a1 + 24);
      goto LABEL_26;
    case 6:
      return (*(_DWORD *)(a1 + 24) >> 28) & 1;
    case 7:
      return (*(_DWORD *)(a1 + 24) >> 29) & 1;
    case 8:
      return *(unsigned __int16 *)(a1 + 36);
    case 9:
      return *(unsigned __int8 *)(a1 + 34);
    case 10:
      unsigned int v3 = *(_DWORD *)(a1 + 32);
      return (v3 >> 15) & 1;
    case 11:
      return (*(_DWORD *)(a1 + 32) >> 12) & 7;
    case 12:
      return (*(_DWORD *)(a1 + 176) >> 2) & 1;
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return *(unsigned __int16 *)(a1 + 16);
    case 15:
      unsigned int v5 = *(_DWORD *)(a1 + 176);
      goto LABEL_21;
    case 16:
      unsigned int v6 = *(_DWORD *)(a1 + 176);
      goto LABEL_23;
    case 17:
      unsigned int v5 = *(_DWORD *)(a1 + 192);
LABEL_21:
      uint64_t result = (v5 >> 4) & 1;
      break;
    case 18:
      unsigned int v6 = *(_DWORD *)(a1 + 192);
LABEL_23:
      uint64_t result = (v6 >> 5) & 1;
      break;
    case 23:
      uint64_t result = *(unsigned __int8 *)(a1 + 14);
      break;
    case 24:
      unsigned int v4 = *(_DWORD *)(a1 + 8);
LABEL_26:
      uint64_t result = HIBYTE(v4) & 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinAneTd<5u>::SetField(uint64_t result, int a2, __int16 a3)
{
  switch(a2)
  {
    case 0:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFFF7FF | ((a3 & 1) << 11);
      goto LABEL_12;
    case 1:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFFDFFF | ((a3 & 1) << 13);
      goto LABEL_12;
    case 2:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFF7FFF | ((a3 & 1) << 15);
      goto LABEL_12;
    case 3:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFFBFFF | ((a3 & 1) << 14);
      goto LABEL_12;
    case 4:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFFFFEFFF | ((a3 & 1) << 12);
      goto LABEL_12;
    case 5:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xFEFFFFFF | ((a3 & 1) << 24);
      goto LABEL_12;
    case 6:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xEFFFFFFF | ((a3 & 1) << 28);
      goto LABEL_12;
    case 7:
      unsigned int v3 = *(_DWORD *)(result + 24) & 0xDFFFFFFF | ((a3 & 1) << 29);
LABEL_12:
      *(_DWORD *)(result + 24) = v3;
      return result;
    case 8:
      *(_WORD *)(result + 36) = a3;
      return result;
    case 9:
      *(unsigned char *)(result + 34) = a3;
      return result;
    case 10:
      unsigned int v4 = *(_DWORD *)(result + 32) & 0xFFFF7FFF | ((a3 & 1) << 15);
      goto LABEL_17;
    case 11:
      unsigned int v4 = *(_DWORD *)(result + 32) & 0xFFFF8FFF | ((a3 & 7) << 12);
LABEL_17:
      *(_DWORD *)(result + 32) = v4;
      return result;
    case 12:
      unsigned int v5 = *(_DWORD *)(result + 176) & 0xFFFFFFFB | (4 * (a3 & 1));
      goto LABEL_21;
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
      return result;
    case 15:
      unsigned int v5 = *(_DWORD *)(result + 176) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_21;
    case 16:
      unsigned int v5 = *(_DWORD *)(result + 176) & 0xFFFFFFDF | (32 * (a3 & 1));
LABEL_21:
      *(_DWORD *)(result + 176) = v5;
      return result;
    case 17:
      unsigned int v6 = *(_DWORD *)(result + 192) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_24;
    case 18:
      unsigned int v6 = *(_DWORD *)(result + 192) & 0xFFFFFFDF | (32 * (a3 & 1));
LABEL_24:
      *(_DWORD *)(result + 192) = v6;
      break;
    case 23:
      *(unsigned char *)(result + 14) = a3;
      break;
    case 24:
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFEFFFFFF | ((a3 & 1) << 24);
      break;
    default:
      if (a2 == 50) {
        *(_WORD *)(result + 16) = a3;
      }
      break;
  }
  return result;
}

BOOL ZinAneTd<5u>::HandleCommonConfigTileAndTaskInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 96) = 0;
  BOOL v4 = ZinAneTd<4u>::SetTileHeight(a1, *(void *)(a2 + 200));
  BOOL result = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
    ZinAneTd<5u>::SetNESmallSourceMode(a1, *(_DWORD *)(a2 + 144));
    int v19 = 0;
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
    uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
    int Pow2Log2 = ZinRoundUpToNextPow2Log2(NumNeededNEs);
    BOOL result = ZinCodegenUtil::ValueToRegister(Pow2Log2, (unsigned int *)(*(void *)(a1 + 280) + 184), &v19);
    if (result)
    {
      *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 100) & 0xFFE7FFFF | ((v19 & 3) << 19);
      int v19 = 0;
      int v9 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 136));
      int v10 = v9 >= 4 ? 4 : v9;
      BOOL result = ZinCodegenUtil::ValueToRegister(v10, (unsigned int *)(*(void *)(a1 + 280) + 160), &v19);
      if (result)
      {
        *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 100) & 0xFFFFF8FF | ((v19 & 7) << 8);
        int v19 = 0;
        int v11 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 120));
        int v12 = v11 >= 4 ? 4 : v11;
        BOOL result = ZinCodegenUtil::ValueToRegister(v12, (unsigned int *)(*(void *)(a1 + 280) + 168), &v19);
        if (result)
        {
          *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 100) & 0xFFFF8FFF | ((v19 & 7) << 12);
          int v19 = 0;
          int v13 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 128));
          if (v13 >= 4) {
            int v14 = 4;
          }
          else {
            int v14 = v13;
          }
          BOOL result = ZinCodegenUtil::ValueToRegister(v14, (unsigned int *)(*(void *)(a1 + 280) + 176), &v19);
          if (result)
          {
            *(_DWORD *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 100) & 0xFFF8FFFF | ((v19 & 7) << 16);
            int v19 = 0;
            uint64_t v15 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
            uint64_t v16 = MirInfoChannelAssignment::GetNumNeededNEs(v15);
            int v17 = ZinRoundUpToNextPow2Log2(v16);
            BOOL result = ZinCodegenUtil::ValueToRegister(v17, (unsigned int *)(*(void *)(a1 + 280) + 184), &v19);
            if (result)
            {
              v18.i32[1] = 0x100000;
              v18.i32[0] = (v19 & 3) << 19;
              *(int8x8_t *)(a1 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = vorr_s8(vand_s8(*(int8x8_t *)(a1 + 100), (int8x8_t)0xF00FFFFFFFE7FFFFLL), v18);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<5u>::HandleTileDmaSrcConfig(uint64_t a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!ZinIrOpLayer::IsNELayer(this)) {
    ZinAssertImpl("Only NE layers allowed\n");
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
  if (*((void *)this + 12) - *((void *)this + 11) >= 0x18uLL)
  {
    BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v23) {
      ZinAneTd<4u>::HandleTileDmaSrcConfig(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    goto LABEL_9;
  }
  unint64_t v10 = *(void *)(a3 + 528);
  uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
  uint64_t v12 = *((void *)this + 33);
  uint64_t v13 = *(void *)(v12 + 752);
  char v14 = *(unsigned char *)(v12 + 1392);
  if ((v14 & 8) != 0 && (v14 & 7) != 0)
  {
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v15) {
      ZinAneTd<4u>::HandleTileDmaSrcConfig(v15, v16, v17, v18, v19, v20, v21, v22);
    }
LABEL_9:
    unsigned int v31 = 0;
    int v32 = 1;
    goto LABEL_10;
  }
  int v34 = *(_DWORD *)(InputTensor + 88);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFFF7F | ((v13 != 0) << 7);
  if (v13)
  {
    if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v13)
      && ZinIrSymbol::GetMemType((ZinIrSymbol *)v13) != 1)
    {
      BOOL v61 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v61) {
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      goto LABEL_9;
    }
    if (!ZinIrSection::HasValidBarId(*(ZinIrSection **)(v13 + 8)))
    {
      BOOL v53 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v53) {
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFFF8F | (16 * (*(unsigned char *)(*(void *)(v13 + 8) + 56) & 7));
    long long v35 = *(_OWORD *)(v13 + 384);
    v90[10] = *(_OWORD *)(v13 + 368);
    v90[11] = v35;
    v90[12] = *(_OWORD *)(v13 + 400);
    long long v36 = *(_OWORD *)(v13 + 320);
    v90[6] = *(_OWORD *)(v13 + 304);
    v90[7] = v36;
    long long v37 = *(_OWORD *)(v13 + 352);
    v90[8] = *(_OWORD *)(v13 + 336);
    v90[9] = v37;
    long long v38 = *(_OWORD *)(v13 + 256);
    v90[2] = *(_OWORD *)(v13 + 240);
    v90[3] = v38;
    long long v39 = *(_OWORD *)(v13 + 288);
    v90[4] = *(_OWORD *)(v13 + 272);
    v90[5] = v39;
    long long v40 = *(_OWORD *)(v13 + 224);
    v90[0] = *(_OWORD *)(v13 + 208);
    v90[1] = v40;
    if (ZinEngineLayerMirInfo::HasDmaRead(*((void *)this + 33), 0)) {
      *(_DWORD *)(a1 + 124) |= 1u;
    }
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFFFF0FFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 1, *(_DWORD *)(*((void *)this + 33) + 1400)) & 0xF) << 12);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFFF0FFFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 2, *(_DWORD *)(*((void *)this + 33) + 1404)) & 0xF) << 16);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFF0FFFFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 3, *(_DWORD *)(*((void *)this + 33) + 1408)) & 0xF) << 20);
    **(void **)(a5 + 128) = v13;
    uint64_t v41 = *((void *)this + 33);
    unint64_t v42 = *(void *)(v41 + 720);
    if (v42 % v10 || (unint64_t v43 = *(void *)(v41 + 728), v44 = v43 / v10, v43 % v10))
    {
      BOOL v45 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v45) {
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v45, v46, v47, v48, v49, v50, v51, v52);
      }
    }
    else
    {
      int v89 = 0;
      if (ZinCodegenUtil::ValueToRegister(v42 / v10, (unsigned int *)(*(void *)(a1 + 280) + 248), &v89))
      {
        *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 132) & 0xC000003F | ((v89 & 0xFFFFFF) << 6);
        int v89 = 0;
        if (ZinCodegenUtil::ValueToRegister(v44, (unsigned int *)(*(void *)(a1 + 280) + 256), &v89))
        {
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 136) & 0xC000003F | ((v89 & 0xFFFFFF) << 6);
          switch(v34)
          {
            case 1:
              unsigned int v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCFFC | 0x1000;
              goto LABEL_47;
            case 2:
              unsigned int v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCFFC;
              goto LABEL_47;
            case 3:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              int v71 = 8241;
              goto LABEL_46;
            case 4:
              unsigned int v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC | 1;
              goto LABEL_47;
            case 5:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              int v71 = 257;
              goto LABEL_46;
            case 6:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              int v71 = 17;
              goto LABEL_46;
            case 7:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              int v71 = 273;
              goto LABEL_46;
            case 8:
              BOOL v72 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v72) {
                ZinAneTd<4u>::HandleTileDmaSrcConfig(v72, v73, v74, v75, v76, v77, v78, v79);
              }
              goto LABEL_42;
            case 9:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              int v71 = 4145;
              goto LABEL_46;
            case 10:
              unsigned int v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              int v71 = 49;
LABEL_46:
              unsigned int v69 = v70 | v71;
LABEL_47:
              *(_DWORD *)(a1 + 14std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v69;
              uint64_t v80 = ZinTensorDescriptorDmaInterleave((uint64_t)v90);
              if (v80 >= 1)
              {
                int v32 = 0;
                *(_DWORD *)(a1 + 14std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 140) & 0xF0FFFFFF | ((v80 & 0xF) << 24);
                goto LABEL_24;
              }
              BOOL v81 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v81) {
                ZinAneTd<6u>::HandleTileDmaSrcConfig(v81, v82, v83, v84, v85, v86, v87, v88);
              }
              break;
            default:
LABEL_42:
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinAneTd<6u>::HandleTileDmaSrcConfig();
              }
              break;
          }
        }
      }
    }
    int v32 = 1;
LABEL_24:
    unsigned int v31 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFF000FFF | 0x222000;
    *(_DWORD *)(a1 + 14std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 140) & 0xF0FFFFFF | 0x1000000;
    int v32 = 1;
    unsigned int v31 = 1;
  }
LABEL_10:
  if (v32) {
    return v31;
  }
  else {
    return 1;
  }
}

BOOL ZinAneTd<5u>::HandleL2Config(uint64_t a1, ZinIrOpLayer *a2, void *a3)
{
  v85[4] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = *(_DWORD *)(*((void *)a2 + 8) + 8);
  if (v6 != 85)
  {
    if (v6 != 89) {
      goto LABEL_22;
    }
    uint64_t v7 = *(void *)(*((void *)a2 + 54) + 64);
    int v8 = *(_DWORD *)(v7 + 104);
    if (v8)
    {
      if (v8 != 1)
      {
        int v9 = *(_DWORD *)(v7 + 100);
        goto LABEL_20;
      }
      if (*(_DWORD *)(v7 + 100) == 4)
      {
        int v9 = 4;
LABEL_20:
        uint64_t v21 = a1;
        int v22 = 0;
        goto LABEL_21;
      }
    }
    else if (*(_DWORD *)(v7 + 100) == 2)
    {
      int v9 = 2;
      goto LABEL_20;
    }
    BOOL v54 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v54) {
      ZinAneTd<4u>::HandleL2Config(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    return 0;
  }
  if (!*((void *)a2 + 54)) {
    goto LABEL_22;
  }
  uint64_t v10 = *((void *)a2 + 17);
  int v9 = *(_DWORD *)(v10 + 376);
  int v11 = (_DWORD *)a3[183];
  uint64_t v12 = (_DWORD *)a3[184];
  if (v11 != v12)
  {
    while (*v11 != v9)
    {
      if (++v11 == v12)
      {
        int v11 = (_DWORD *)a3[184];
        break;
      }
    }
  }
  if (v11 == v12 || v9 == 4 || v9 == 2)
  {
    BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v13) {
      ZinAneTd<4u>::HandleL2Config(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    return 0;
  }
  int v22 = *(_DWORD *)(v10 + 380);
  uint64_t v21 = a1;
LABEL_21:
  ZinAneTd<5u>::SetPaddingMode(v21, v9, v22);
LABEL_22:
  int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(*((void *)a2 + 33), 0);
  ZinAneTd<5u>::SetL2Src1SourceType(a1, L2RdMode);
  if (!ZinCodegen::SetPrimaryL2SourceBuffer<4u>((uint64_t)a3, (uint64_t)a2, (ZinIrHalH13g *)a1))
  {
    BOOL v46 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v46) {
      ZinAneTd<1u>::HandleNEControlCommon(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    return 0;
  }
  uint64_t InputTensor = (int *)ZinIrOpLayer::GetInputTensor(a2, 0);
  ZinAneTd<5u>::SetL2Src1DmaFormat(a1, InputTensor[22]);
  v85[3] = 0;
  ZinIrTensor::InferDescriptor((ZinIrTensor *)InputTensor, (uint64_t)v85, (uint64_t)v84);
  uint64_t v25 = ZinTensorDescriptorDmaInterleave((uint64_t)v84);
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100](v85);
  if (v25 <= 0)
  {
    BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v38) {
      return 0;
    }
    goto LABEL_37;
  }
  ZinAneTd<4u>::SetL2Src1Interleave(a1, v25);
  if (*(_DWORD *)(*((void *)a2 + 8) + 8) == 90 && *((void *)a2 + 12) - *((void *)a2 + 11) == 16)
  {
    unint64_t v26 = *(void *)(ZinEngineLayerMirInfo::GetL2RdSymbol(*((void *)a2 + 33), 0) + 16);
    unint64_t v28 = a3[51];
    unint64_t v27 = a3[52];
    uint64_t L2RdSymbol = ZinEngineLayerMirInfo::GetL2RdSymbol(*((void *)a2 + 33), 1);
    unint64_t v30 = v26 % v28 / v27;
    unint64_t v31 = *(void *)(L2RdSymbol + 16) % a3[51] / a3[52];
    if ((int)v30 - (int)v31 >= 0) {
      unsigned int v32 = v30 - v31;
    }
    else {
      unsigned int v32 = v31 - v30;
    }
    if (v31 > v30) {
      LODWORD(v31) = v30;
    }
    ZinAneTd<4u>::SetL2SrcBaseAddress(a1, v31);
    ZinAneTd<4u>::SetL2Src1ChannelStride(a1, v32);
  }
  uint64_t v33 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)a2 + 33));
  uint64_t v35 = (uint64_t)L2WrSymbol;
  if (!L2WrSymbol)
  {
    BOOL v62 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v62) {
      ZinAneTd<4u>::HandleL2Config(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    return 0;
  }
  if (ZinIrSymbol::GetMemType(L2WrSymbol) != 2)
  {
    BOOL v70 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v70) {
      ZinAneTd<17u>::HandleL2Config(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    return 0;
  }
  ZinAneTd<4u>::SetL2ResultType(a1, *(_DWORD *)(*((void *)a2 + 33) + 1632));
  ZinAneTd<4u>::SetL2BfrMode(a1, *(unsigned __int8 *)(*((void *)a2 + 33) + 312));
  ZinAneTd<5u>::SetL2ResultCfgDmaFmt(a1, *(_DWORD *)(v33 + 88));
  ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a1, *(void *)(*((void *)a2 + 33) + 320));
  if ((*(_DWORD *)(*((void *)a2 + 33) + 1632) - 1) > 1)
  {
    unsigned int v37 = 1;
  }
  else
  {
    uint64_t v36 = ZinTensorDescriptorDmaInterleave(*(void *)(*((void *)a2 + 33) + 944) + 208);
    unsigned int v37 = v36;
    if (!v36)
    {
      BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v38) {
        return 0;
      }
LABEL_37:
      ZinAneTd<6u>::HandleL2Config(v38, v39, v40, v41, v42, v43, v44, v45);
      return 0;
    }
  }
  ZinAneTd<4u>::SetL2ResultInterleave(a1, v37);
  ZinAneTd<4u>::SetL2ResultBaseAddr(a1, *(void *)(v35 + 16) % a3[51] / a3[52]);
  ZinAneTd<4u>::SetL2ResultChannelStride(a1, *(_DWORD *)(*((void *)a2 + 33) + 280));
  v84[0] = *(_OWORD *)(v35 + 520);
  unsigned int OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)v84);
  unsigned int NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v84);
  ZinAneTd<4u>::SetL2ResultWrapAddrOffset(a1, OCGSize);
  ZinAneTd<4u>::SetL2ResultWrapAddr(a1, NumNeededNEs);
  if ((ZinCodegen::SetL2ResultWrapInfo<4u>(a1, v35) & 1) == 0) {
    return 0;
  }
  uint64_t v83 = 0;
  BOOL L2RowStride = ZinCodegen::GetL2RowStride((ZinCodegen *)(v33 + 48), *(const ZinTensorDimensions **)(*((void *)a2 + 33) + 272), *(unsigned int *)(*(void *)(a1 + 280) + 236), &v83, v80);
  if (L2RowStride)
  {
    ZinAneTd<4u>::SetL2ResultRowStride(a1, v83);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
    if (*((void *)a2 + 47)) {
      *(_DWORD *)(a1 + 172) |= 1u;
    }
  }
  return L2RowStride;
}

void sub_211303560(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100]((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

BOOL ZinAneTd<5u>::HandleNEConfig(ZinIrHalH13g *a1, ZinIrKernel **a2, const ZinIrHalParameters *a3)
{
  (*(void (**)(ZinIrHalH13g *))(*(void *)a1 + 88))(a1);
  int v6 = a2 + 17;
  uint64_t v7 = a2[17];
  if (!v7)
  {
    BOOL v13 = 0;
    int v10 = 0;
    int v64 = 0;
    goto LABEL_7;
  }
  unsigned int v8 = *((unsigned __int8 *)v7 + 448);
  int v9 = (v8 >> 3) & 1;
  int v10 = (v8 >> 4) & 1;
  if ((v8 & 4) == 0)
  {
    int v64 = (v8 >> 3) & 1;
    if (ZinIrKernel::HasPerCoutScale(v7) || ZinIrKernel::HasPerCoutBias(v7))
    {
      int ShouldUseSparseBinaryForCompression = 0;
      BOOL v12 = 0;
      BOOL v13 = *(void *)((*((uint64_t (**)(ZinIrKernel **, void, void))*a2 + 4))(a2, 0, 0) + 48) > 1;
LABEL_8:
      int v14 = 4;
      goto LABEL_9;
    }
    BOOL v13 = 0;
LABEL_7:
    int ShouldUseSparseBinaryForCompression = 0;
    BOOL v12 = 0;
    goto LABEL_8;
  }
  int v23 = *((_DWORD *)a2[8] + 2);
  if (v23 == 90)
  {
    uint64_t InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a2, 0);
    unsigned int v25 = 0;
    LODWORD(v24) = *(void *)(InputTensor + 48) > 1;
    uint64_t v7 = a2[17];
  }
  else if (v23 == 85)
  {
    uint64_t v24 = a2[54];
    if (v24)
    {
      unsigned int v25 = v8 >> 7;
      if (*((_DWORD *)a2[33] + 28) != 1) {
        unsigned int v25 = 0;
      }
      LODWORD(v24) = 0;
    }
    else
    {
      unsigned int v25 = 0;
    }
  }
  else
  {
    unsigned int v25 = 0;
    LODWORD(v24) = 0;
  }
  BOOL v13 = (v25 | v24) != 0;
  int v34 = *(unsigned __int8 **)(*((void *)v7 + 100) + 40);
  if (!v34)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<4u>::HandleNEConfig(result, v36, v37, v38, v39, v40, v41, v42);
    return 0;
  }
  int v64 = v9;
  int v14 = *((_DWORD *)v7 + 44);
  int v35 = *v34;
  BOOL v12 = v35 != 0;
  if (v35)
  {
    int ShouldUseSparseBinaryForCompression = ZinIrKernel::ShouldUseSparseBinaryForCompression(v7);
    uint64_t v7 = *v6;
  }
  else
  {
    int ShouldUseSparseBinaryForCompression = 0;
  }
  if (ZinIrKernel::HasVectorPalettizedWeight(v7))
  {
    int v43 = ZinLog2OfPow2(*((void *)*v6 + 52));
    ZinAneTd<4u>::SetPaletteBlockSize((uint64_t)a1, v43);
  }
LABEL_9:
  ZinAneTd<5u>::SetKernelPalettizedEn((uint64_t)a1, v14);
  ZinAneTd<5u>::SetKernelPalettizedBits((uint64_t)a1, v14);
  ZinAneTd<4u>::SetKernelSparseFmt((uint64_t)a1, v12);
  ZinAneTd<4u>::SetKernelSparseBinary((uint64_t)a1, ShouldUseSparseBinaryForCompression);
  ZinAneTd<4u>::SetGroupKernelReuse((uint64_t)a1, v13);
  int v66 = 0;
  int MacCfgOpMode = GetMacCfgOpMode((ZinIrOpLayer *)a2, (uint64_t)a3, &v66);
  BOOL result = 0;
  if (!MacCfgOpMode)
  {
    ZinAneTd<5u>::SetOpMode((uint64_t)a1, v66);
    int MacCfgKernelMode = GetMacCfgKernelMode((const ZinNELayer *)a2, a3);
    ZinAneTd<4u>::SetKernelMode((uint64_t)a1, MacCfgKernelMode);
    BOOL MacCfgPassthroughEnable = GetMacCfgPassthroughEnable((const ZinNELayer *)a2, a3);
    ZinAneTd<1u>::SetPassthroughEnable((uint64_t)a1, MacCfgPassthroughEnable);
    int v65 = 0;
    int KernelCfgKernelFmt = GetKernelCfgKernelFmt((const ZinNELayer *)a2, a3, v66, &v65);
    BOOL result = 0;
    if (!KernelCfgKernelFmt)
    {
      ZinAneTd<5u>::SetKernelFmt((uint64_t)a1, v65);
      uint64_t v20 = *(uint64_t *)((char *)a2 + 420);
      if ((v20 & 0xFF00000000) == 0) {
        ZinAssertImpl("Binary point is missing from NE layer.");
      }
      ZinAneTd<4u>::SetNEBinaryPoint((uint64_t)a1, v20);
      if (((*(uint64_t (**)(ZinIrHalH13g *, ZinIrKernel **))(*(void *)a1 + 296))(a1, a2) & 1) == 0)
      {
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        ZinAneTd<4u>::HandleNEConfig(result, v27, v28, v29, v30, v31, v32, v33);
        return 0;
      }
      uint64_t v21 = a2[49];
      if (v21) {
        int v22 = *((_DWORD *)v21 + 48);
      }
      else {
        int v22 = 0;
      }
      ZinAneTd<4u>::SetNENonLinearMode((uint64_t)a1, v22, (uint64_t)a3 + 1536);
      uint64_t v44 = a2[51];
      if (v44)
      {
        int ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v44);
        ZinAneTd<4u>::SetQuantizationOutputZeroOffset((uint64_t)a1, 1, ScalarZeroPoint);
      }
      if (v64)
      {
        unint64_t v46 = *(void *)((char *)*v6 + 180);
        char v47 = 1;
      }
      else
      {
        unint64_t v46 = 0;
        char v47 = 0;
      }
      ZinAneTd<4u>::SetNEPostScale((uint64_t)a1, v46, v47);
      if (v10)
      {
        unsigned __int8 v48 = *((unsigned char *)*v6 + 192);
        LOBYTE(ShouldUseSparseBinaryForCompression) = *((unsigned char *)*v6 + 193);
        int v10 = *((_DWORD *)*v6 + 47) >> 8;
        unint64_t v49 = (unint64_t)*((unsigned __int16 *)*v6 + 97) << 48;
        uint64_t v50 = *((_DWORD *)*v6 + 47);
        char v51 = 1;
        LODWORD(v7) = v10;
      }
      else
      {
        unsigned __int8 v48 = 0;
        uint64_t v50 = 0;
        unint64_t v49 = 0;
        char v51 = 0;
      }
      if (*((_DWORD *)a2[8] + 2) == 85)
      {
        uint64_t v52 = a2[48];
        if (v52)
        {
          if (ZinGOCLayer::IsDynamicBias(v52))
          {
            LODWORD(v7) = v10;
            LOBYTE(ShouldUseSparseBinaryForCompression) = 1;
            char v51 = 1;
          }
        }
      }
      ZinAneTd<4u>::SetNEBias((uint64_t)a1, v49 | ((unint64_t)ShouldUseSparseBinaryForCompression << 40) | ((unint64_t)v48 << 32) | v50 & 0xFFFFFFFF000000FFLL | (((unint64_t)v7 & 0xFFFFFF) << 8), v51);
      if (*((_DWORD *)a2[8] + 2) == 85) {
        uint64_t v53 = ZinPEElementWiseLayer::GetSecondOperandBroadcast((ZinPEElementWiseLayer *)a2) & 0xFFFFFFFFFFLL;
      }
      else {
        uint64_t v53 = 0;
      }
      ZinAneTd<4u>::SetNEMatrixVectorBias((uint64_t)a1, a2 + 17, v53);
      if (*v6) {
        int HasZeroPoint = ZinIrKernel::HasZeroPoint(*v6);
      }
      else {
        int HasZeroPoint = 0;
      }
      ZinAneTd<4u>::SetKernelAsymQuantEn((uint64_t)a1, HasZeroPoint);
      v56 = *v6 && (uint64_t v55 = (unsigned __int8 *)*((void *)*v6 + 100)) != 0 && *v55 != 0;
      ZinAneTd<4u>::SetKernelDetectZeros((uint64_t)a1, v56);
      ZinAneTd<4u>::SetDoubleInt8Enable((uint64_t)a1, *((unsigned __int8 *)a2[33] + 1));
      if (*((_DWORD *)a2[8] + 2) == 89)
      {
        ZinIrHalH13g::~ZinIrHalH13g(a1);
        ZinIrHalH13g::~ZinIrHalH13g(a1);
      }
      if ((*(uint64_t (**)(ZinIrHalH13g *, ZinIrKernel **))(*(void *)a1 + 288))(a1, a2)) {
        return 1;
      }
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneTd<4u>::HandleNEConfig(result, v57, v58, v59, v60, v61, v62, v63);
        return 0;
      }
    }
  }
  return result;
}

BOOL ZinAneTd<5u>::HandleTileDmaDstConfig(uint64_t a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!ZinIrOpLayer::IsNELayer(this) && !ZinIrOpLayer::IsTransposeEngineLayer(this)) {
    ZinAssertImpl("Only NE and TransposeEngineLayer allowed\n");
  }
  uint64_t v10 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  uint64_t v11 = *((void *)this + 32);
  if (v11) {
    BOOL v12 = *(_DWORD *)(*(void *)(v11 + 64) + 8) == 102;
  }
  else {
    BOOL v12 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  BOOL v13 = *(ZinIrSection ***)(*((void *)this + 33) + 944);
  int v14 = *(_DWORD *)(v10 + 88);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFF7FF | ((v13 != 0) << 11);
  if (!v13)
  {
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 252) & 0xFFFF0FFF | 0x3000;
    *(_DWORD *)(a1 + 268) = *(_DWORD *)(a1 + 268) & 0xF0FFFFFF | 0x1000000;
    goto LABEL_24;
  }
  if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v13) == 2)
  {
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v15) {
      ZinCodegen::SetResultDMA<7u>(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    goto LABEL_24;
  }
  if (!ZinIrSection::HasValidBarId(v13[1]))
  {
    BOOL v53 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v53) {
      ZinCodegen::SetResultDMA<7u>(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    goto LABEL_24;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFF8FF | ((*((unsigned char *)v13[1] + 56) & 7) << 8);
  uint64_t v23 = *((void *)this + 33);
  uint64_t v24 = *(_OWORD **)(v23 + 944);
  long long v25 = v24[24];
  v75[10] = v24[23];
  v75[11] = v25;
  v75[12] = v24[25];
  long long v26 = v24[20];
  v75[6] = v24[19];
  v75[7] = v26;
  long long v27 = v24[22];
  v75[8] = v24[21];
  v75[9] = v27;
  long long v28 = v24[16];
  v75[2] = v24[15];
  v75[3] = v28;
  long long v29 = v24[18];
  v75[4] = v24[17];
  v75[5] = v29;
  long long v30 = v24[14];
  v75[0] = v24[13];
  v75[1] = v30;
  if ((*(_DWORD *)(v23 + 1632) - 1) <= 1)
  {
    *(_DWORD *)(a1 + 252) |= 1u;
    uint64_t v23 = *((void *)this + 33);
  }
  int v31 = *(_DWORD *)(a1 + 252) & 0xFFFF0FFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 0, *(_DWORD *)(v23 + 1412)) & 0xF) << 12);
  *(_DWORD *)(a1 + 252) = v31;
  *(_DWORD *)(a1 + 252) = v31 & 0xFBFFFFFF | (*(unsigned __int8 *)(*((void *)this + 33) + 312) << 26);
  *(void *)(a5 + 152) = v13;
  uint64_t v32 = *((void *)this + 33);
  uint64_t v33 = *(void *)(v32 + 912);
  uint64_t v34 = *(void *)(v32 + 920);
  if (v33 < 1 || v34 <= 0)
  {
    BOOL v35 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v35) {
      ZinAneTd<4u>::HandleTileDmaDstConfig(v35, v36, v37, v38, v39, v40, v41, v42);
    }
  }
  unint64_t v43 = *(void *)(a3 + 528);
  if (v33 % v43 || (unint64_t v44 = v34 / v43, v34 % v43))
  {
    BOOL v45 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v45) {
      ZinAneTd<4u>::HandleTileDmaDstConfig(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    goto LABEL_24;
  }
  int v74 = 0;
  if (!ZinCodegenUtil::ValueToRegister(v33 / v43, (unsigned int *)(*(void *)(a1 + 280) + 272), &v74) {
    || (*(_DWORD *)(a1 + 26std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 260) & 0xC000003F | ((v74 & 0xFFFFFF) << 6),
  }
        int v74 = 0,
        !ZinCodegenUtil::ValueToRegister(v44, (unsigned int *)(*(void *)(a1 + 280) + 256), &v74)))
  {
LABEL_24:
    int v61 = 1;
    return !v13 || v61 == 0;
  }
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a1 + 264) & 0xC000003F | ((v74 & 0xFFFFFF) << 6);
  ZinAneTd<5u>::SetTileDmaDstFormat(a1, v14, v12);
  uint64_t v64 = ZinTensorDescriptorDmaInterleave((uint64_t)v75);
  if (v64 < 1)
  {
    BOOL v66 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v66) {
      ZinAneTd<6u>::HandleTileDmaSrcConfig(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    goto LABEL_24;
  }
  int v65 = *(_DWORD *)(a1 + 268) & 0xF0FFFFFF | ((v64 & 0xF) << 24);
  *(_DWORD *)(a1 + 268) = v65;
  *(_DWORD *)(a1 + 268) = v65 & 0xFFF8FFFF | ((*(_DWORD *)(*((void *)this + 33) + 1456) & 7) << 16);
  ZinAneTd<4u>::SetTileDmaDstZeroPad(a1, (_DWORD *)(*((void *)this + 33) + 1488));
  int v61 = 0;
  return !v13 || v61 == 0;
}

uint64_t ZinAneTd<5u>::HandleKernelDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, std::vector<std::string> *a5)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 64))(a1, *(int *)(*a3 + 8));
  char v10 = 0;
  ZinAneTd<5u>::HandleKernelDmaSrcConfigCoeffBuffer(a1, (ZinEngineLayerMirInfo **)a2, a3, (uint64_t)a5, (uint64_t *)(a2 + 136), &v10);
  if (v10)
  {
    ZinAneTd<6u>::AddKernelSymbols(a1, (ZinIrKernel **)a2, a3, a5);
    if (*(unsigned char *)(*a3 + 1271)) {
      ZinAneTd<4u>::SetKernelDmaSrcConfigPrefetch();
    }
  }
  return 1;
}

uint64_t ZinAneTd<5u>::HandleEngineLayer(uint64_t a1, uint64_t a2, unint64_t a3, ZinAneInstruction *a4, uint64_t a5, uint64_t **a6, CFArrayRef *a7)
{
  if (!*(void *)(a2 + 264))
  {
    BOOL v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v16) {
      ZinAneTd<4u>::HandleEngineLayer(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    CFStringRef v24 = @"CodeGenerationFailure";
    goto LABEL_13;
  }
  ZinIrMemoryPool::GetSections((uint64_t)a6[3], 1, v25);
  int v14 = *(ZinIrSection **)(v25[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v25);
  if ((ZinAneInstruction::HandleTdHeader((uint64_t)a4, (ZinEngineLayerMirInfo **)a2, a3, *a6, v14) & 1) == 0)
  {
    CFStringRef v24 = @"InvalidHWHeader";
LABEL_13:
    ZinIrNetworkStatus::SetError(a7, v24);
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 416))(a1);
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a2)) {
    ZinAssertImpl("Error: PE is not supported");
  }
  if (!ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2)) {
    ZinAssertImpl("TransposeEngineLayer based graph should not need DMA buffer\n");
  }
  if (!HandleNELayer<5u>((const ZinIrOpLayer *)a2, a3, a4, (const ZinIrHalParameters **)*a6, (ZinIrMemoryPool *)a6[3], a5, a7))return 0; {
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 328))(a1, **a6, a2);
  }
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 344))(a1, a2);
    if (result)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 352))(a1, a2, a6[2]);
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<5u>::HandleKernelDmaSrcConfigCoeffBuffer(BOOL result, ZinEngineLayerMirInfo **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, unsigned char *a6)
{
  uint64_t v9 = result;
  uint64_t v10 = *a3;
  uint64_t v11 = *a5;
  if (*a5 && (uint64_t v12 = *(void *)(v11 + 800)) != 0) {
    uint64_t v13 = *(void *)(v12 + 40);
  }
  else {
    uint64_t v13 = 0;
  }
  if (v11) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  if (*(_DWORD *)(v10 + 8))
  {
    unint64_t v16 = 0;
    unint64_t v17 = *(void *)(v10 + 528);
    uint64_t v18 = 40;
    while (v15)
    {
      ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
      if (MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) <= v16) {
        break;
      }
      uint64_t v20 = *(void *)(*(void *)(v13 + 32) + v18);
      BOOL v21 = v20 != 0;
      *a6 |= v21;
      ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaEn(v9, v21, v16);
      ZinAneTd<5u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
      if (!v20) {
        goto LABEL_22;
      }
      uint64_t v22 = *(void *)(v13 + 32);
      if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v13 + 40) - v22) >> 3) <= v16) {
        ZinAssertImpl("Kernel DMA NE number greater than kernel data prepped\n");
      }
      if (*(unsigned char *)(*a3 + 1255))
      {
        if (*((unsigned char *)a2[33] + 2))
        {
          if ((*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 15))(a2))
          {
            unsigned int v23 = ZinDivRoundUp(*((void *)a2[33] + 6), v17);
            ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v23, v16);
            ZinDivRoundUp(*(void *)(*((void *)a2[33] + 7) + 8 * v16), v17);
            goto LABEL_28;
          }
          uint64_t v22 = *(void *)(v13 + 32);
        }
        unsigned int v26 = ZinDivRoundUp(*(void *)(v22 + v18), v17);
        ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v26, v16);
LABEL_28:
        ZinAneTd<4u>::SetKernelDmaSrcCoeffBaseOffset();
      }
      unsigned int v25 = ZinDivRoundUp(*(void *)(v22 + v18), v17);
      uint64_t v24 = v9;
LABEL_23:
      uint64_t result = ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v24, v25, v16++);
      v18 += 56;
      if (v16 >= *(unsigned int *)(*a3 + 8)) {
        return result;
      }
    }
    ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaEn(v9, 0, v16);
    ZinAneTd<5u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
LABEL_22:
    uint64_t v24 = v9;
    unsigned int v25 = 1;
    goto LABEL_23;
  }
  return result;
}

BOOL HandleNELayer<5u>(const ZinIrOpLayer *a1, int a2, ZinAneInstruction *a3, const ZinIrHalParameters **a4, ZinIrMemoryPool *a5, uint64_t a6, CFArrayRef *a7)
{
  uint64_t v13 = (ZinIrHalH13g *)*((void *)a3 + 25);
  unsigned __int8 v31 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock(a1, a5, &v31)
    || (unsigned __int8 v30 = 0, ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a1, a5, &v30)))
  {
LABEL_3:
    CFStringRef v14 = @"CodeGenerationFailure";
LABEL_4:
    ZinIrNetworkStatus::SetError(a7, v14);
    return 0;
  }
  uint64_t v16 = *((void *)a1 + 17);
  if (v16 && *(void *)(v16 + 800))
  {
    ZinAneTd<4u>::SetKernelBaseHeader((uint64_t)v13, v31);
    unint64_t v17 = *(void **)(*((void *)a1 + 17) + 800);
    if (v17[1]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[2]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[4]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[3]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
  }
  if (ZinAneInstruction::HandleCommonConfig(a3, a1, *a4, a7))
  {
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, const ZinIrHalParameters **, ZinIrMemoryPool *, ZinAneInstruction *))(*(void *)v13 + 312))(v13, a1, a4, a5, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"KernelDMASourceAllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, const ZinIrHalParameters *, uint64_t, ZinAneInstruction *))(*(void *)v13 + 248))(v13, a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"TileDMASourceAllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, const ZinIrHalParameters *))(**((void **)a3 + 25)
                                                                                              + 256))(*((void *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"L2AllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, const ZinIrHalParameters *))(**((void **)a3 + 25)
                                                                                              + 264))(*((void *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"NEConfigFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, const ZinIrHalParameters *, uint64_t, ZinAneInstruction *))(**((void **)a3 + 25) + 304))(*((void *)a3 + 25), a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"TileDMADestinationAllocationFailure";
      goto LABEL_4;
    }
    if (!ZinAneTd<4u>::ValidateOCGSizes(v13, a1))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      goto LABEL_3;
    }
    ZinAneTd<4u>::SetDoubleBufferingBasedOnOtherRegisters(v13, *((_DWORD *)*a4 + 4));
    if ((*((_DWORD *)v13 + 18) & 3) == 3
      || (v29 = dword_211F04ADC[*((_DWORD *)v13 + 18) & 3], int v18 = *((_DWORD *)v13 + 55) & 3, v18 == 3))
    {
      ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      return 0;
    }
    int v19 = (char)(*((_DWORD *)v13 + 56) >> 5) >> 3;
    int v20 = ZinMirPrepareBinaryPoint::CalculateBinaryPointAdjustment(v18, &v29);
    unsigned int v21 = *((_DWORD *)v13 + 59);
    if (ZinIrOpLayer::IsNELayer(a1) && v20 + v19 + (HIWORD(v21) & 0x1F) >= 0x20u)
    {
      ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      return 0;
    }
    uint64_t v22 = (ZinIrKernel *)*((void *)a1 + 17);
    if (v22)
    {
      if (ZinIrKernel::HasBias(v22))
      {
        uint64_t v23 = *((void *)a1 + 17);
        if (*(void *)(v23 + 576))
        {
          uint64_t v24 = (ZinDynamicRange **)(v23 + 576);
          double v25 = ldexp(1.0, v20 + v19 + ((int)(*((_DWORD *)v13 + 58) << 11) >> 27));
          if (!ZinIrCodegenValidBiasShift(v24, v25, v26, v27, v28))
          {
            ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              HandleNELayer<17u>();
            }
            return 0;
          }
        }
      }
    }
    if (!*((unsigned char *)*a4 + 1243) || (ZinAneTd<6u>::SetDPE((uint64_t)v13, (uint64_t)a1) & 1) != 0) {
      return 1;
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  return result;
}

uint64_t ZinValidateTd<5u>::Test(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v612[3] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(unsigned int *)(a3 + 92);
  uint64_t v4 = (v3 >> 8) & 7;
  uint64_t v5 = (v3 >> 12) & 7;
  if (v5 > v4)
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ZinValidateTd<4u>::Test(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 3;
  }
  uint64_t v14 = (v3 >> 16) & 7;
  if (v5 > v14)
  {
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v15) {
      ZinValidateTd<4u>::Test(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    return 3;
  }
  if (v4 > v14)
  {
    BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v23) {
      ZinValidateTd<4u>::Test(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    return 3;
  }
  int v32 = *(_DWORD *)(a3 + 64);
  uint64_t v33 = v32 & 3;
  if ((v32 & 3) == 3)
  {
    BOOL v34 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v34) {
      ZinValidateTd<4u>::Test(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    return 3;
  }
  uint64_t v44 = *a1;
  unint64_t v45 = *(unsigned int *)(a3 + 60);
  unint64_t v46 = *(unsigned int *)(a3 + 76);
  unint64_t v47 = *(unsigned int *)(a3 + 80);
  uint64_t v48 = (v46 >> 16) & 0x7FFF;
  unint64_t v49 = v46 & 0x7FFF;
  int v51 = *(_DWORD *)(a3 + 68);
  int v50 = *(_DWORD *)(a3 + 72);
  unint64_t v52 = v47 & 0x1F;
  uint64_t v53 = (v47 >> 28) & 3;
  unint64_t v54 = v47 >> 30;
  int v55 = *(_DWORD *)(a3 + 84);
  unint64_t v56 = *(_DWORD *)(a3 + 88) & 0x7FFFLL;
  int v57 = *(_DWORD *)(a3 + 184);
  unsigned int v58 = *(_DWORD *)(a3 + 260);
  unsigned int v59 = (v3 >> 2) & 1;
  int v61 = *(_DWORD *)(a3 + 212);
  int v60 = *(_DWORD *)(a3 + 216);
  unsigned int v62 = dword_211F04ADC[v33];
  if ((v3 & 4) != 0)
  {
    if ((v55 & 0x4000) != 0
      || v53 != 1
      || v54 != 1
      || v4 != 4
      || v5 != 4
      || v14 != 4)
    {
      BOOL v104 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v104) {
        ZinValidateTd<4u>::Test(v104, v105, v106, v107, v108, v109, v110, v111);
      }
      return 3;
    }
    if (v52 >= 9)
    {
      BOOL v120 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v120) {
        ZinValidateTd<4u>::Test(v120, v121, v122, v123, v124, v125, v126, v127);
      }
      return 3;
    }
    int v607 = v55;
    __int16 v591 = v61;
    __int16 v593 = v60;
    uint64_t v595 = *a1;
    int v597 = v56;
    unint64_t v609 = v45;
    unint64_t v611 = v46 & 0x7FFF;
    unsigned int v599 = v58;
    char v601 = v57;
    int v588 = v51;
    int v589 = v50;
    uint64_t WUCost = NERasterization::GetWUCost(0x10uLL, 0x10uLL, 0x10uLL, v56, (v3 >> 2) & 1, 0, v49, v48, 0, 0, v62, *a1);
    unsigned int v59 = (v3 >> 2) & 1;
    LOWORD(v61) = v591;
    LOWORD(v6std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v593;
    int v51 = v588;
    int v50 = v589;
    int v55 = v607;
    unint64_t v45 = v609;
    uint64_t v53 = (v47 >> 28) & 3;
    unint64_t v52 = v47 & 0x1F;
    unint64_t v49 = v611;
    LODWORD(v33) = v32 & 3;
    unint64_t v54 = v47 >> 30;
    unsigned int v58 = v599;
    LOBYTE(v57) = v601;
    uint64_t v44 = v595;
    LODWORD(v56) = v597;
    if (WUCost != 1)
    {
      BOOL v77 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v77) {
        ZinValidateTd<4u>::Test(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      return 3;
    }
  }
  unint64_t v608 = v45;
  unsigned int v603 = v54;
  uint64_t v604 = v53;
  unsigned int v598 = v58;
  char v600 = v57;
  unsigned int v596 = v56;
  int v63 = v32 & 0x30;
  unsigned int v602 = v33;
  if (v33 == 2 && v63 != 32)
  {
    __int16 v590 = v61;
    __int16 v592 = v60;
    unint64_t v605 = v52;
    int v606 = v55;
    unsigned int v64 = v62;
    uint64_t v594 = v44;
    unint64_t v610 = v49;
    int v65 = v50;
    int v66 = v51;
    int HasWorkUnitWidthOf8 = NERasterization::HasWorkUnitWidthOf8(v44, v64, 1 << (BYTE2(v3) & 7), 1 << v5, 1 << v4, v59, 0, v48, v49, 0, 0);
    LOWORD(v61) = v590;
    LOWORD(v6std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v592;
    int v51 = v66;
    int v50 = v65;
    unint64_t v52 = v605;
    int v55 = v606;
    unint64_t v49 = v610;
    uint64_t v44 = v594;
    if (HasWorkUnitWidthOf8)
    {
      BOOL v68 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v68) {
        ZinValidateTd<4u>::Test(v68, v69, v70, v71, v72, v73, v74, v75);
      }
      return 3;
    }
  }
  unsigned int v85 = (v47 >> 12) & 7;
  uint64_t v86 = *(void *)&v51 & 0x1FFFFLL;
  unint64_t v87 = (v47 >> 6) & 0x1F;
  uint64_t v88 = *(void *)&v50 & 0x1FFFFLL;
  uint64_t v89 = (v47 >> 16) & 3;
  uint64_t v90 = (v47 >> 18) & 3;
  unint64_t v91 = (v47 >> 20) & 0xF;
  unint64_t v92 = (v47 >> 24) & 0xF;
  unsigned int v93 = v55 & 0x1FFF;
  int v94 = v60 & 7;
  unsigned int v95 = HIWORD(v55);
  if ((v61 & 0x400) != 0)
  {
    if (v93 <= 1)
    {
      BOOL v128 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v128) {
        ZinValidateTd<4u>::Test(v128, v129, v130, v131, v132, v133, v134, v135);
      }
      return 3;
    }
    if ((v60 & 7) != 0)
    {
      BOOL v112 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v112) {
        ZinValidateTd<4u>::Test(v112, v113, v114, v115, v116, v117, v118, v119);
      }
      return 3;
    }
    if ((*(_DWORD *)(a3 + 216) & 0x4018) == 8)
    {
      BOOL v136 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v136) {
        ZinValidateTd<4u>::Test(v136, v137, v138, v139, v140, v141, v142, v143);
      }
      return 3;
    }
    goto LABEL_174;
  }
  if (v94 != 1)
  {
    if (v94 != 2) {
      goto LABEL_174;
    }
    if (v86 != 2 * v88)
    {
      BOOL v144 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v144) {
        ZinValidateTd<4u>::Test(v144, v145, v146, v147, v148, v149, v150, v151);
      }
      return 3;
    }
    if (v85)
    {
      BOOL v96 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v96) {
        return 3;
      }
LABEL_37:
      ZinValidateTd<17u>::Test(v96, v97, v98, v99, v100, v101, v102, v103);
      return 3;
    }
    if (v52 == 1)
    {
      if (v87 == 1)
      {
        if (v89 == 1)
        {
          if (v90 == 1)
          {
            if (v91)
            {
              BOOL v160 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v160) {
                return 3;
              }
LABEL_65:
              ZinValidateTd<17u>::Test(v160, v161, v162, v163, v164, v165, v166, v167);
              return 3;
            }
            if (v92)
            {
              BOOL v200 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v200) {
                return 3;
              }
LABEL_91:
              ZinValidateTd<17u>::Test(v200, v201, v202, v203, v204, v205, v206, v207);
              return 3;
            }
            if (v604 == 1)
            {
              if (v603 == 1)
              {
                if ((v55 & 0x4000) == 0)
                {
                  BOOL v208 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v208) {
                    return 3;
                  }
LABEL_99:
                  ZinValidateTd<10u>::Test(v208, v209, v210, v211, v212, v213, v214, v215);
                  return 3;
                }
                if (HIWORD(v55) != 2)
                {
                  BOOL v240 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v240) {
                    ZinValidateTd<4u>::Test(v240, v241, v242, v243, v244, v245, v246, v247);
                  }
                  return 3;
                }
                if ((v3 & 4) == 0)
                {
                  if (((*(_DWORD *)(a3 + 212) ^ *(_DWORD *)(a3 + 64)) & 3) != 0)
                  {
                    BOOL v232 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v232) {
                      return 3;
                    }
LABEL_117:
                    ZinValidateTd<17u>::Test(v232, v233, v234, v235, v236, v237, v238, v239);
                    return 3;
                  }
                  if ((v60 & 8) == 0)
                  {
                    BOOL v264 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v264) {
                      return 3;
                    }
LABEL_133:
                    ZinValidateTd<6u>::Test(v264, v265, v266, v267, v268, v269, v270, v271);
                    return 3;
                  }
                  if ((v60 & 0x10) == 0)
                  {
                    if ((v60 & 0x4000) == 0)
                    {
                      unsigned int v272 = *(_DWORD *)(a3 + 88) & 0x7FFF;
                      if (v272 != 1) {
                        unsigned int v272 = v48 % v272 == 1;
                      }
                      if (!v14) {
                        unsigned int v272 = 1;
                      }
                      if (v5 || !v272) {
                        goto LABEL_174;
                      }
                      if (v602 <= 1)
                      {
                        if (v49 % *(void *)(v44 + 1864) <= *(void *)(v44 + 1856))
                        {
                          BOOL v273 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (!v273) {
                            return 3;
                          }
LABEL_148:
                          ZinValidateTd<6u>::Test(v273, v274, v275, v276, v277, v278, v279, v280);
                          return 3;
                        }
                        goto LABEL_174;
                      }
                      if (v49 % *(void *)(v44 + 1856) > *(void *)(v44 + 1872)) {
                        goto LABEL_174;
                      }
                      BOOL v298 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (!v298) {
                        return 3;
                      }
LABEL_171:
                      ZinValidateTd<10u>::Test(v298, v299, v300, v301, v302, v303, v304, v305);
                      return 3;
                    }
                    BOOL v290 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v290) {
                      return 3;
                    }
LABEL_166:
                    ZinValidateTd<6u>::Test(v290, v291, v292, v293, v294, v295, v296, v297);
                    return 3;
                  }
                  BOOL v282 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v282) {
                    return 3;
                  }
LABEL_162:
                  ZinValidateTd<6u>::Test(v282, v283, v284, v285, v286, v287, v288, v289);
                  return 3;
                }
                BOOL v256 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v256) {
                  return 3;
                }
LABEL_128:
                ZinValidateTd<10u>::Test(v256, v257, v258, v259, v260, v261, v262, v263);
                return 3;
              }
              BOOL v224 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v224) {
                return 3;
              }
LABEL_110:
              ZinValidateTd<17u>::Test(v224, v225, v226, v227, v228, v229, v230, v231);
              return 3;
            }
            BOOL v216 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (!v216) {
              return 3;
            }
LABEL_106:
            ZinValidateTd<17u>::Test(v216, v217, v218, v219, v220, v221, v222, v223);
            return 3;
          }
          BOOL v192 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!v192) {
            return 3;
          }
LABEL_86:
          ZinValidateTd<17u>::Test(v192, v193, v194, v195, v196, v197, v198, v199);
          return 3;
        }
        BOOL v184 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v184) {
          return 3;
        }
LABEL_82:
        ZinValidateTd<17u>::Test(v184, v185, v186, v187, v188, v189, v190, v191);
        return 3;
      }
      BOOL v176 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v176) {
        return 3;
      }
LABEL_78:
      ZinValidateTd<17u>::Test(v176, v177, v178, v179, v180, v181, v182, v183);
      return 3;
    }
    BOOL v168 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v168) {
      return 3;
    }
LABEL_74:
    ZinValidateTd<17u>::Test(v168, v169, v170, v171, v172, v173, v174, v175);
    return 3;
  }
  if (v86 != v88)
  {
    BOOL v152 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v152) {
      ZinValidateTd<10u>::Test(v152, v153, v154, v155, v156, v157, v158, v159);
    }
    return 3;
  }
  if (v85)
  {
    BOOL v96 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v96) {
      return 3;
    }
    goto LABEL_37;
  }
  if (v52 != 1)
  {
    BOOL v168 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v168) {
      return 3;
    }
    goto LABEL_74;
  }
  if (v87 != 1)
  {
    BOOL v176 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v176) {
      return 3;
    }
    goto LABEL_78;
  }
  if (v89 != 1)
  {
    BOOL v184 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v184) {
      return 3;
    }
    goto LABEL_82;
  }
  if (v90 != 1)
  {
    BOOL v192 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v192) {
      return 3;
    }
    goto LABEL_86;
  }
  if (v91)
  {
    BOOL v160 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v160) {
      return 3;
    }
    goto LABEL_65;
  }
  if (v92)
  {
    BOOL v200 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v200) {
      return 3;
    }
    goto LABEL_91;
  }
  if (v604 != 1)
  {
    BOOL v216 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v216) {
      return 3;
    }
    goto LABEL_106;
  }
  if (v603 != 1)
  {
    BOOL v224 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v224) {
      return 3;
    }
    goto LABEL_110;
  }
  if ((v55 & 0x4000) == 0)
  {
    BOOL v208 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v208) {
      return 3;
    }
    goto LABEL_99;
  }
  if (HIWORD(v55) != 1)
  {
    BOOL v248 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v248) {
      ZinValidateTd<4u>::Test(v248, v249, v250, v251, v252, v253, v254, v255);
    }
    return 3;
  }
  if ((v3 & 4) != 0)
  {
    BOOL v256 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v256) {
      return 3;
    }
    goto LABEL_128;
  }
  if (((*(_DWORD *)(a3 + 212) ^ *(_DWORD *)(a3 + 64)) & 3) != 0)
  {
    BOOL v232 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v232) {
      return 3;
    }
    goto LABEL_117;
  }
  if ((v60 & 8) == 0)
  {
    BOOL v264 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v264) {
      return 3;
    }
    goto LABEL_133;
  }
  if ((v60 & 0x10) != 0)
  {
    BOOL v282 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v282) {
      return 3;
    }
    goto LABEL_162;
  }
  if ((v60 & 0x4000) != 0)
  {
    BOOL v290 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v290) {
      return 3;
    }
    goto LABEL_166;
  }
  unsigned int v281 = *(_DWORD *)(a3 + 88) & 0x7FFF;
  if (v281 != 1) {
    unsigned int v281 = v48 % v281 == 1;
  }
  if (!v14) {
    unsigned int v281 = 1;
  }
  if (v5 || !v281) {
    goto LABEL_174;
  }
  if (v602 > 1)
  {
    if (v49 % *(void *)(v44 + 1856) > *(void *)(v44 + 1872)) {
      goto LABEL_174;
    }
    BOOL v298 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v298) {
      return 3;
    }
    goto LABEL_171;
  }
  if (v49 % *(void *)(v44 + 1864) <= *(void *)(v44 + 1856))
  {
    BOOL v273 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v273) {
      return 3;
    }
    goto LABEL_148;
  }
LABEL_174:
  if (v91 >= v52 || *(void *)(v44 + 144) < v91)
  {
    BOOL v306 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v306) {
      ZinValidateTd<4u>::Test(v306, v307, v308, v309, v310, v311, v312, v313);
    }
    return 3;
  }
  if (v92 >= v87 || *(void *)(v44 + 152) < v92)
  {
    BOOL v314 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v314) {
      ZinValidateTd<4u>::Test(v314, v315, v316, v317, v318, v319, v320, v321);
    }
    return 3;
  }
  __int16 v322 = v55;
  uint64_t v323 = ((int)v49 - 1) * (uint64_t)(int)v89 - v91;
  if (v323 >= (int64_t)(v608 & 0x7FFF))
  {
    BOOL v334 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v334) {
      ZinValidateTd<4u>::Test(v334, v335, v336, v337, v338, v339, v340, v341);
    }
    return 3;
  }
  uint64_t v324 = (v608 >> 16) & 0x7FFF;
  uint64_t v325 = ((int)v48 - 1) * (uint64_t)(int)v90 - v92;
  if (v325 >= v324)
  {
    BOOL v342 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v342) {
      ZinValidateTd<4u>::Test(v342, v343, v344, v345, v346, v347, v348, v349);
    }
    return 3;
  }
  if ((uint64_t)(v323 + ((v52 + v89 - 1) & -v89)) < (int64_t)(v608 & 0x7FFF))
  {
    BOOL v326 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v326) {
      ZinValidateTd<6u>::Test(v326, v327, v328, v329, v330, v331, v332, v333);
    }
    return 3;
  }
  if ((uint64_t)(v325 + ((v90 + v87 - 1) & -v90)) < v324)
  {
    BOOL v350 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v350) {
      ZinValidateTd<6u>::Test(v350, v351, v352, v353, v354, v355, v356, v357);
    }
    return 3;
  }
  uint64_t v358 = v44;
  uint64_t v359 = (v3 >> 19) & 3;
  if ((v322 & 0x4000) != 0)
  {
    unsigned int v370 = v86 / v95;
    if (v86 % v95)
    {
      BOOL v371 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v371) {
        ZinValidateTd<4u>::Test(v371, v372, v373, v374, v375, v376, v377, v378);
      }
      return 3;
    }
    uint64_t v387 = v88 / v370;
    if (v88 % v370)
    {
      BOOL v388 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v388) {
        ZinValidateTd<4u>::Test(v388, v389, v390, v391, v392, v393, v394, v395);
      }
      return 3;
    }
    if (v387 > 1 << v85)
    {
      BOOL v396 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v396) {
        ZinValidateTd<4u>::Test(v396, v397, v398, v399, v400, v401, v402, v403);
      }
      return 3;
    }
    if (v387 < 1 << v85 && v387 << v359 < (unint64_t)v88)
    {
      BOOL v476 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v476) {
        ZinValidateTd<4u>::Test(v476, v477, v478, v479, v480, v481, v482, v483);
      }
      return 3;
    }
    if (v85 && (v370 & ((1 << v359) + 0x1FFFF)) != 0)
    {
      BOOL v494 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v494) {
        ZinValidateTd<4u>::Test(v494, v495, v496, v497, v498, v499, v500, v501);
      }
      return 3;
    }
  }
  BOOL v361 = v89 == 2 && v604 == 2;
  if (v602 == 2)
  {
    if (v361)
    {
      if (*(void *)(v44 + 80) >= v52)
      {
        if (*(void *)(v44 + 72) > v52)
        {
          BOOL v412 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v412) {
            ZinValidateTd<4u>::Test(v412, v413, v414, v415, v416, v417, v418, v419);
          }
          return 3;
        }
        goto LABEL_241;
      }
      BOOL v379 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v379) {
        return 3;
      }
    }
    else
    {
      if (v89 != 2 || v604 != 1)
      {
        if (*(void *)(v44 + 88) < v52)
        {
          BOOL v428 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v428) {
            ZinValidateTd<4u>::Test(v428, v429, v430, v431, v432, v433, v434, v435);
          }
          return 3;
        }
        goto LABEL_241;
      }
      if (*(void *)(v44 + 80) >= v52) {
        goto LABEL_241;
      }
      BOOL v379 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v379) {
        return 3;
      }
    }
    ZinValidateTd<6u>::Test(v379, v380, v381, v382, v383, v384, v385, v386);
    return 3;
  }
  if (v361)
  {
    if (*(void *)(v44 + 56) < v52)
    {
      BOOL v362 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v362) {
        return 3;
      }
LABEL_205:
      ZinValidateTd<6u>::Test(v362, v363, v364, v365, v366, v367, v368, v369);
      return 3;
    }
    if (*(void *)(v44 + 48) > v52)
    {
      BOOL v404 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v404) {
        ZinValidateTd<6u>::Test(v404, v405, v406, v407, v408, v409, v410, v411);
      }
      return 3;
    }
  }
  else if (v89 == 2 && v604 == 1)
  {
    if (*(void *)(v44 + 56) < v52)
    {
      BOOL v362 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v362) {
        return 3;
      }
      goto LABEL_205;
    }
  }
  else if (*(void *)(v44 + 64) < v52)
  {
    BOOL v420 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v420) {
      ZinValidateTd<4u>::Test(v420, v421, v422, v423, v424, v425, v426, v427);
    }
    return 3;
  }
LABEL_241:
  if (v90 == 2 && v603 == 2)
  {
    if (*(void *)(v44 + 104) < v87)
    {
      BOOL v436 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v436) {
        return 3;
      }
LABEL_245:
      ZinValidateTd<6u>::Test(v436, v437, v438, v439, v440, v441, v442, v443);
      return 3;
    }
    if (*(void *)(v44 + 96) > v87)
    {
      BOOL v444 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v444) {
        ZinValidateTd<6u>::Test(v444, v445, v446, v447, v448, v449, v450, v451);
      }
      return 3;
    }
  }
  else if (v90 == 2 && v603 == 1)
  {
    if (*(void *)(v44 + 104) < v87)
    {
      BOOL v436 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v436) {
        return 3;
      }
      goto LABEL_245;
    }
  }
  else if (*(void *)(v44 + 112) < v87)
  {
    BOOL v452 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v452) {
      ZinValidateTd<4u>::Test(v452, v453, v454, v455, v456, v457, v458, v459);
    }
    return 3;
  }
  if (v604 * (unint64_t)v49 > *(void *)(v44 + 320))
  {
    BOOL v460 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v460) {
      ZinValidateTd<4u>::Test(v460, v461, v462, v463, v464, v465, v466, v467);
    }
    return 3;
  }
  if (v603 * (unint64_t)v48 > *(void *)(v44 + 336))
  {
    BOOL v468 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v468) {
      ZinValidateTd<4u>::Test(v468, v469, v470, v471, v472, v473, v474, v475);
    }
    return 3;
  }
  unint64_t v484 = (v90 * v86 * v89) * (unint64_t)v93;
  unint64_t v485 = *(void *)(v44 + 368);
  if (v484 > v485)
  {
    BOOL v486 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v486) {
      ZinValidateTd<6u>::Test(v486, v487, v488, v489, v490, v491, v492, v493);
    }
    return 3;
  }
  if (v603 * v88 * v604 * (unint64_t)v93 > v485)
  {
    BOOL v502 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v502) {
      ZinValidateTd<6u>::Test(v502, v503, v504, v505, v506, v507, v508, v509);
    }
    return 3;
  }
  if ((v600 & 8) != 0)
  {
    int v518 = v598 & 3;
    unint64_t v519 = HIBYTE(v598) & 0xF;
    float v520 = 1.0;
    if (v518 == 1) {
      float v520 = 2.0;
    }
    if (v518 == 2) {
      float v520 = 1.25;
    }
    BOOL v521 = v518 == 1 && v63 == 32;
    v612[0] = 0x100u >> v5;
    v612[1] = 0x100u >> (BYTE2(v3) & 7);
    v612[2] = 0x100u >> v4;
    if (v521) {
      float v520 = 2.0;
    }
    if (v602 == 2) {
      uint64_t v522 = 2;
    }
    else {
      uint64_t v522 = 1;
    }
    if (!*(unsigned char *)(v44 + 1313) || v519 != 3)
    {
      uint64_t v531 = 0;
      while ((uint64_t)(((uint64_t)(float)(v520 * (float)(v612[v531] / v522 * v604)) * v519) & 0x800000000000003FLL) < 1)
      {
        if (++v531 == 3)
        {
          uint64_t v532 = (1 << v359 << v85);
          if (v93 == 1
            && ((unint64_t)(v532 - 1) + v88) >> (v359 + v85) == 1)
          {
            goto LABEL_278;
          }
          unint64_t v533 = 0;
          char v534 = 1;
          uint64_t v535 = 4;
          do
          {
            if ((*(void *)&v534 & (v598 >> 28)) != 0) {
              ++v533;
            }
            v534 *= 2;
            --v535;
          }
          while (v535);
          BOOL v536 = v519 >= v533;
          uint64_t v537 = v519 - v533;
          if (v537 != 0 && v536)
          {
            if (v532 % v537)
            {
              BOOL v538 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v538) {
                ZinValidateTd<4u>::Test(v538, v539, v540, v541, v542, v543, v544, v545);
              }
            }
            else
            {
              if (!(v88 % v537)) {
                goto LABEL_278;
              }
              BOOL v580 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v580) {
                ZinValidateTd<4u>::Test(v580, v581, v582, v583, v584, v585, v586, v587);
              }
            }
          }
          else
          {
            BOOL v572 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v572) {
              ZinValidateTd<6u>::Test(v572, v573, v574, v575, v576, v577, v578, v579);
            }
          }
          return 3;
        }
      }
    }
    BOOL v523 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v523) {
      ZinValidateTd<17u>::Test(v523, v524, v525, v526, v527, v528, v529, v530);
    }
    return 3;
  }
LABEL_278:
  if ((*(unsigned char *)(a3 + 262) & 7) != 0)
  {
    BOOL v510 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v510) {
      ZinValidateTd<6u>::Test(v510, v511, v512, v513, v514, v515, v516, v517);
    }
    return 3;
  }
  if (!v596)
  {
    BOOL v554 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v554) {
      ZinValidateTd<6u>::Test(v554, v555, v556, v557, v558, v559, v560, v561);
    }
    return 3;
  }
  if (v596 > v48)
  {
    BOOL v546 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v546) {
      ZinValidateTd<6u>::Test(v546, v547, v548, v549, v550, v551, v552, v553);
    }
    return 3;
  }
  int v562 = *(_DWORD *)(a3 + 212);
  if ((v562 & 3) == 2) {
    char v563 = v562 >> 4;
  }
  else {
    char v563 = (v562 >> 4) + 1;
  }
  if (*(void *)(v44 + 488) < (unint64_t)(1 << v563))
  {
    BOOL v564 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v564) {
      ZinValidateTd<4u>::Test(v564, v565, v566, v567, v568, v569, v570, v571);
    }
    return 3;
  }
  uint64_t result = ZinValidateTd<5u>::CheckKMEMBufferSizes(v44, a3);
  if (!result)
  {
    return ZinValidateTd<6u>::CheckInRangeDmaAccess(v358, a2, a3);
  }
  return result;
}

uint64_t ZinValidateTd<5u>::CheckKernelRewind(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == a1) {
    return 0;
  }
  LOBYTE(v2) = 0;
  while (1)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 200);
    unsigned int v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x4000) != 0) {
      break;
    }
LABEL_8:
    int v2 = (v4 >> 12) & 1;
    uint64_t v1 = *(void *)(v1 + 8);
    if (v1 == a1) {
      return 0;
    }
  }
  if (v2)
  {
    uint64_t v5 = 1 << (((unint64_t)*(unsigned int *)(v3 + 100) >> 19) & 3);
    BOOL v6 = (char *)(*(void *)(v3 + 40) + 4);
    while (1)
    {
      char v7 = *v6;
      v6 += 24;
      if (v7) {
        break;
      }
      if (!--v5) {
        goto LABEL_8;
      }
    }
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      ZinValidateTd<6u>::CheckKernelRewind(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v17) {
      ZinValidateTd<4u>::CheckKernelRewind(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return 3;
}

uint64_t ZinValidateTd<5u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2)
{
  int v4 = (*(_DWORD *)(a2 + 92) >> 19) & 3;
  unint64_t v5 = (1 << ((*(_DWORD *)(a2 + 92) >> 19) & 3));
  int v6 = *(_DWORD *)(a2 + 212);
  unint64_t v7 = *(int *)(a1 + 8);
  uint64_t v42 = 0;
  std::vector<unsigned long>::vector(__p, v7, &v42);
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = (unint64_t *)__p[0];
  uint64_t v11 = (unsigned int *)(v9 + 12);
  do
  {
    unsigned int v12 = *v11;
    v11 += 6;
    v10[v8++] = ((unint64_t)v12 >> 6) & 0x7FF;
  }
  while (v5 != v8);
  uint64_t v13 = *(int *)(a1 + 8);
  if (v5 < v13)
  {
    uint64_t v14 = v13 - v5;
    uint64_t v15 = (char *)(v9 + 24 * v5 + 4);
    while (1)
    {
      char v16 = *v15;
      v15 += 24;
      if (v16) {
        break;
      }
      if (!--v14) {
        goto LABEL_7;
      }
    }
    BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v25) {
      ZinValidateTd<6u>::CheckKernelRewind(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    goto LABEL_19;
  }
LABEL_7:
  uint64_t v17 = 0;
  if ((v6 & 0x100) == 0 && v4)
  {
    uint64_t v18 = 2;
    if (v5 > 2) {
      uint64_t v18 = v5;
    }
    unint64_t v21 = *v10;
    uint64_t v19 = v10 + 1;
    unint64_t v20 = v21;
    uint64_t v22 = v18 - 1;
    while (1)
    {
      unint64_t v24 = *v19++;
      unint64_t v23 = v24;
      if (v24 > v20) {
        break;
      }
      unint64_t v20 = v23;
      if (!--v22)
      {
        uint64_t v17 = 0;
        goto LABEL_20;
      }
    }
    BOOL v33 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v33) {
      ZinValidateTd<4u>::CheckKMEMBufferSizes(v33, v34, v35, v36, v37, v38, v39, v40);
    }
LABEL_19:
    uint64_t v17 = 3;
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v17;
}

uint64_t GetPadMode<ZinIrConvUnitInfo>(uint64_t a1)
{
  return *(unsigned int *)(a1 + 328);
}

uint64_t IsCompressed<ZinIrConvUnitInfo>(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 80) < 0xFu) & (0x7604u >> *(_DWORD *)(a1 + 80));
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::GetKernelFormat(uint64_t a1)
{
  return *(unsigned int *)(a1 + 260);
}

BOOL FindValidKMEMDesc@<W0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, void *a7@<X6>, unsigned __int8 a8@<W7>, int8x16_t *a9@<X8>, char a10, uint64_t a11)
{
  *a9 = *a4;
  a9[1].i64[0] = a4[1].i64[0];
  unint64_t v24 = a9 + 1;
  BOOL result = ZinKernelFitsInKMEM(a1, a2, 0, a3, a9, a5, a6, a7, a8, a10, a11);
  if (!result)
  {
    unint64_t v20 = &a9->i64[1];
    do
    {
      uint64_t v21 = a9->i64[0];
      uint64_t v22 = (uint64_t *)a9;
      if (a9->i64[0] == 1)
      {
        uint64_t v21 = *v20;
        uint64_t v22 = &a9->i64[1];
        if (*v20 == 1)
        {
          uint64_t v22 = (uint64_t *)v24;
          uint64_t v21 = v24->i64[0];
          if (v24->i64[0] == 1) {
            break;
          }
        }
      }
      uint64_t v23 = v21 / 2;
      if (v23 <= 1) {
        uint64_t v23 = 1;
      }
      *uint64_t v22 = v23;
      BOOL result = ZinKernelFitsInKMEM(a1, a2, 0, a3, a9, a5, a6, a7, a8, a10, a11);
    }
    while (!result);
  }
  return result;
}

void ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::SetConvType(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 24std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a3;
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::SetValidDescKernelFormat(uint64_t result, int a2)
{
  *(_DWORD *)(result + 26std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a2;
  return result;
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::SetValidDescKernelPerCoutScaleFormat(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a2;
  return result;
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ResetValidDescQuantizationScale(uint64_t result, char a2)
{
  *(_DWORD *)(result + 404) = 1065353216;
  if ((a2 & 1) == 0) {
    *(unsigned char *)(result + 36std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  return result;
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ResetValidDescQuantizationZeroPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 408) = 0;
  if ((a2 & 1) == 0) {
    *(unsigned char *)(result + 361) = 0;
  }
  return result;
}

BOOL IsCompressed<ANECConvLayerDesc>(uint64_t a1)
{
  if (ZinCFStringEquals(*(const __CFString **)(a1 + 8), @"Sparse")
    || ZinCFStringEquals(*(const __CFString **)(a1 + 8), @"Palette2Sparse")
    || ZinCFStringEquals(*(const __CFString **)(a1 + 8), @"Palette4Sparse")
    || ZinCFStringEquals(*(const __CFString **)(a1 + 8), @"Palette16Sparse")
    || ZinCFStringEquals(*(const __CFString **)(a1 + 8), @"Palette64Sparse"))
  {
    return 1;
  }
  CFStringRef v3 = *(const __CFString **)(a1 + 8);

  return ZinCFStringEquals(v3, @"Palette256Sparse");
}

uint64_t GetPadMode<ANECConvLayerDesc>(uint64_t a1)
{
  if (ZinCFStringEquals(*(const __CFString **)(a1 + 24), @"Replication")) {
    return 3;
  }
  ZinCFStringEquals(*(const __CFString **)(a1 + 24), @"Zero");
  return 1;
}

__CFString *ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetValidDescKernelFormat(uint64_t a1, unsigned int a2)
{
  BOOL result = ZinIrKernelFormatToCFString(a2);
  *(void *)(a1 + 136) = result;
  return result;
}

__CFString *ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetValidDescKernelPerCoutScaleFormat(uint64_t a1, unsigned int a2)
{
  BOOL result = ZinIrKernelFormatToCFString(a2);
  *(void *)(a1 + 272) = result;
  return result;
}

uint64_t ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ResetValidDescQuantizationScale(uint64_t result, char a2)
{
  *(_DWORD *)(result + 268) = 1065353216;
  if ((a2 & 1) == 0) {
    *(unsigned char *)(result + 264) = 0;
  }
  return result;
}

uint64_t ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ResetValidDescQuantizationZeroPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 284) = 0;
  if ((a2 & 1) == 0) {
    *(unsigned char *)(result + 28std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  return result;
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::~ZinConvValidator(uint64_t a1)
{
  *(void *)a1 = &unk_26C34A6A8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 8, *(void **)(a1 + 16));

  JUMPOUT(0x21667D3C0);
}

void ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ValidateKernelFormat()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: 1 and 2 bit palettes not supported.\n", v0, 2u);
}

void ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ValidateKernelFootprint()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_8_0();
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Convolution configuration cannot fit in KMEM (Given: %zub, Max: %zub)\n", v0, 0x16u);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> const*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> const*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 296;
  int v4 = (uint64_t (***)(void))(a1 - 296);
  do
  {
    uint64_t result = (**v4)(v4);
    v3 -= 296;
    BOOL v6 = v4 == a2;
    v4 -= 37;
  }
  while (!v6);
  return result;
}

uint64_t ZinPEPatterns::BinaryPool::AnalyzeBinaryPool(int a1, int a2, ZinPattern *this)
{
  uint64_t result = ZinPattern::MatchCount(this);
  if (result)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "dequant1");
    uint64_t SingleMatch = ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)__p);
    BOOL v6 = (ZinDeQuantLayer *)SingleMatch;
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if (!v6) {
        goto LABEL_7;
      }
    }
    else if (!SingleMatch)
    {
      goto LABEL_7;
    }
    if (ZinDeQuantLayer::HasScale(v6)) {
      return 0;
    }
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(__p, "dequant2");
    uint64_t v7 = ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)__p);
    uint64_t v8 = (ZinDeQuantLayer *)v7;
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if (!v8)
      {
LABEL_12:
        std::string::basic_string[abi:ne180100]<0>(__p, "main");
        uint64_t v9 = ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)__p);
        uint64_t v10 = v9;
        if ((v13 & 0x80000000) == 0)
        {
          if (!v9) {
            return 0;
          }
LABEL_16:
          uint64_t v11 = *(void *)(v10 + 64);
          return !*(unsigned char *)(v11 + 116) && *(float *)(v11 + 112) == 1.0;
        }
        operator delete(__p[0]);
        if (v10) {
          goto LABEL_16;
        }
        return 0;
      }
    }
    else if (!v7)
    {
      goto LABEL_12;
    }
    if (ZinDeQuantLayer::HasScale(v8)) {
      return 0;
    }
    goto LABEL_12;
  }
  return result;
}

void sub_211306394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double ZinPEPatterns::BinaryPool::SharedClone@<D0>(ZinPEPatterns::BinaryPool *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinPEPatterns::BinaryPool,std::allocator<ZinPEPatterns::BinaryPool>,ZinPEPatterns::BinaryPool const&,void>(this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void ZinPEPatterns::BinaryPool::Fuse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v57, "texture");
  ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v57, "dequant1");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v57, "irelu1");
  uint64_t v56 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v57, "dequant2");
  uint64_t v52 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v57, "irelu2");
  uint64_t v53 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v57, "itranspose2");
  uint64_t v54 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v57, "main");
  uint64_t v6 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v57, "orelu");
  uint64_t v7 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ogoc");
  ZinPattern::GetMatch(a1, (unsigned __int8 *)__p, &v57);
  ZinPatternUtils::ToGOC((uint64_t **)&v57, &v51);
  if (v57.__r_.__value_.__r.__words[0])
  {
    v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v37) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = ZinMergeGOCSequence(a2, a3, (uint64_t)&v51);
  std::string::basic_string[abi:ne180100]<0>(&v57, "abs_or_zero_compare");
  uint64_t v9 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v57);
  uint64_t AbsFromAbsOrZeroCompare = ZinPatternUtils::GetAbsFromAbsOrZeroCompare(v9, v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "abs_or_zero_compare");
  uint64_t v11 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  uint64_t ZeroCompareFromAbsOrZeroCompare = ZinPatternUtils::GetZeroCompareFromAbsOrZeroCompare(v11, v12);
  uint64_t v48 = v7;
  std::string::basic_string[abi:ne180100]<0>(&v44, "postogocrelu");
  uint64_t v49 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v44);
  std::string::basic_string[abi:ne180100]<0>(&v43, "oquant");
  uint64_t v50 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  if (SBYTE7(v37) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  char v13 = *(_OWORD **)(v6 + 64);
  long long v15 = v13[4];
  long long v14 = v13[5];
  long long v16 = v13[6];
  long long v42 = v13[7];
  long long v17 = v13[1];
  long long v18 = v13[3];
  long long v37 = v13[2];
  long long v38 = v18;
  long long v40 = v14;
  long long v41 = v16;
  long long v39 = v15;
  *(_OWORD *)std::string __p = v17;
  BYTE4(v42) = 1;
  LODWORD(v42) = 1065353216;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a3 + 16))(&v35, a3, 1);
  int v19 = *(char *)(v6 + 47);
  if (v19 >= 0) {
    unint64_t v20 = (const std::string::value_type *)(v6 + 24);
  }
  else {
    unint64_t v20 = *(const std::string::value_type **)(v6 + 24);
  }
  if (v19 >= 0) {
    std::string::size_type v21 = *(unsigned __int8 *)(v6 + 47);
  }
  else {
    std::string::size_type v21 = *(void *)(v6 + 32);
  }
  uint64_t v22 = std::string::insert(&v35, 0, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  unint64_t v24 = std::string::append(&v43, "_", 1uLL);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v32, "pe_bin_pool");
  uint64_t v26 = std::string::append(&v32, "_xfm", 4uLL);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  int64_t v34 = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)BOOL v33 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v34 >= 0) {
    uint64_t v28 = v33;
  }
  else {
    uint64_t v28 = (void **)v33[0];
  }
  if (v34 >= 0) {
    std::string::size_type v29 = HIBYTE(v34);
  }
  else {
    std::string::size_type v29 = (std::string::size_type)v33[1];
  }
  uint64_t v30 = std::string::append(&v57, (const std::string::value_type *)v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  std::string::size_type v45 = v30->__r_.__value_.__r.__words[2];
  long long v44 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  ZinPELayer::GetPostScaleAndBiasFromGOC((ZinGOCLayer *)v8, &v43);
  operator new();
}

void sub_211306AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667D3C0](v59, 0x10B3C40D0B38099);
  if (a59 < 0) {
    operator delete(__p);
  }
  unsigned int v62 = *(void **)(v60 - 256);
  if (v62)
  {
    *(void *)(v60 - 248) = v62;
    operator delete(v62);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinPEPatterns::ElementWiseAdd::AnalyzeEW(uint64_t a1, uint64_t a2, ZinPattern *this)
{
  uint64_t matched = ZinPattern::MatchCount(this);
  if (!matched) {
    return 0;
  }
  uint64_t v7 = matched;
  std::string::basic_string[abi:ne180100]<0>(&v27, "dma_conv_input1");
  v19[0] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)&v27);
  std::string::basic_string[abi:ne180100]<0>(&v25, "irelu1");
  v19[1] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)&v25);
  std::string::basic_string[abi:ne180100]<0>(&v24, "dma_conv_input2");
  v19[2] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)&v24);
  std::string::basic_string[abi:ne180100]<0>(v22, "irelu2");
  v19[3] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)v22);
  std::string::basic_string[abi:ne180100]<0>(v17, "orelu");
  v19[4] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)v17);
  std::string::basic_string[abi:ne180100]<0>(__p, "dma_conv_output");
  v19[5] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)__p);
  std::vector<BOOL>::vector(&v20, v19, 6);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if (v29 < 0) {
    operator delete(v27);
  }
  LOBYTE(v22[0]) = 1;
  long long v27 = v20;
  LODWORD(v28) = 0;
  *(void *)&long long v25 = (char *)v20 + 8 * (v21 >> 6);
  DWORD2(v25) = v21 & 0x3F;
  if (v7 != std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>((uint64_t *)&v27, (uint64_t)&v25, v22))
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "presc_tmp");
    uint64_t v8 = std::string::append(&v24, "_xfm", 4uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v26 = v8->__r_.__value_.__r.__words[2];
    long long v25 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v27, &v25);
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(v22, "prescale2");
    ZinPattern::GetMatch((uint64_t)this, (unsigned __int8 *)v22, &v24);
    ZinPatternUtils::ToGOC((uint64_t **)&v24, (uint64_t **)&v25);
    uint64_t v10 = ZinMergeGOCSequence(a1, (uint64_t)&v27, (uint64_t)&v25);
    if ((void)v25)
    {
      *((void *)&v25 + 1) = v25;
      operator delete((void *)v25);
    }
    if (v24.__r_.__value_.__r.__words[0])
    {
      v24.__r_.__value_.__l.__size_ = v24.__r_.__value_.__r.__words[0];
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    LODWORD(v25) = 0;
    if (!v10
      || !ZinGOCLayer::GetOnlyGlobalScale((ZinGOCLayer *)v10, (float *)&v25)
      || (char v11 = 0, v12 = fabsf(*(float *)&v25), v12 >= 0.1) && v12 <= 10.0)
    {
      char v11 = 1;
    }
    long long v27 = &unk_26C34DA98;
    if (v30 < 0)
    {
      operator delete(v28);
      if (v11) {
        goto LABEL_32;
      }
    }
    else if (v11)
    {
LABEL_32:
      uint64_t CanFoldPreScales = ZinPEPatterns::ElementWise::CanFoldPreScales(a1, (uint64_t)this, a2);
      goto LABEL_36;
    }
  }
  uint64_t CanFoldPreScales = 0;
LABEL_36:
  if (v20) {
    operator delete(v20);
  }
  return CanFoldPreScales;
}

void sub_211306FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 - 72) = &unk_26C34DA98;
  if (*(char *)(v36 - 41) < 0) {
    operator delete(*(void **)(v36 - 64));
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double ZinPEPatterns::ElementWiseAdd::SharedClone@<D0>(ZinPEPatterns::ElementWiseAdd *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWiseAdd,std::allocator<ZinPEPatterns::ElementWiseAdd>,ZinPEPatterns::ElementWiseAdd const&,void>(this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void ZinPEPatterns::ElementWise::ToScaledElementWise(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)(*(void *)(a2 + 64) + 12))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
      operator new();
    default:
      ZinAssertImpl("Unknown ElementWise opcode mapped to ScaledEW");
  }
}

void sub_211307314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinPEPatterns::ElementWise::UpdateScaledElementWise(int a1, uint64_t a2, ZinIrKernel **this, ZinGOCLayer *a4, ZinGOCLayer *a5, BOOL *a6)
{
  uint64_t v8 = 0;
  if (ZinPEPatterns::ElementWise::GenerateUpdatedScaleEWInfo(a2, this, a4, a5, (uint64_t)&v8, a6)) {
    operator new();
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return 0;
}

void sub_2113074E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

void ZinPEPatterns::ElementWise::GetPreScaleEffects(ZinIrKernel **this, const ZinGOCLayer *a2, const ZinGOCLayer *a3, float *a4, BOOL *a5, BOOL *a6)
{
  *(unsigned char *)a4 = 0;
  *a5 = 0;
  *(_DWORD *)a3 = 1065353216;
  if (!this)
  {
LABEL_4:
    if (!a2) {
      return;
    }
    goto LABEL_9;
  }
  if (ZinOpLayerUtils::IsNegateGOC((ZinOpLayerUtils *)this, a2))
  {
    *(unsigned char *)a4 = 1;
    goto LABEL_4;
  }
  int HasScale = ZinIrKernel::HasScale(this[17]);
  float SingularVal = 1.0;
  if (HasScale) {
    float SingularVal = ZinIrVector::GetSingularVal(*((ZinIrVector **)this[17] + 71));
  }
  *(float *)a3 = SingularVal;
  if (a2)
  {
LABEL_9:
    if (ZinOpLayerUtils::IsNegateGOC(a2, a2)) {
      *a5 = 1;
    }
  }
}

uint64_t ZinPEPatterns::ElementWise::GenerateUpdatedScaleEWInfo(uint64_t a1, ZinIrKernel **this, ZinGOCLayer *a3, ZinGOCLayer *a4, uint64_t a5, BOOL *a6)
{
  uint64_t v8 = *(void *)(a1 + 64);
  *(_WORD *)long long v17 = 0;
  float v15 = 1.0;
  float v16 = 1.0;
  if (a4) {
    ZinGOCLayer::UnshiftSingularScale(a4, &v15);
  }
  if (*(_DWORD *)(v8 + 12))
  {
    ZinPEPatterns::ElementWise::GetPreScaleEffects(this, a3, (const ZinGOCLayer *)&v16, (float *)&v17[1], v17, a6);
    float v9 = *(float *)(v8 + 16) * v16;
    float v10 = *(float *)(v8 + 20) * v15;
  }
  else
  {
    float v13 = 1.0;
    float v14 = 1.0;
    if (this) {
      ZinGOCLayer::UnshiftSingularScale((ZinGOCLayer *)this, &v14);
    }
    if (a3)
    {
      ZinGOCLayer::UnshiftSingularScale(a3, &v13);
      float v11 = v13;
    }
    else
    {
      float v11 = 1.0;
    }
    float v9 = (float)(*(float *)(v8 + 16) * v14) / v11;
    float v10 = (float)(v11 * *(float *)(v8 + 20)) * v15;
  }
  if (!ZinF16OutOfBounds(v9) && !ZinF16OutOfBounds(v10)) {
    operator new();
  }
  return 0;
}

void sub_2113077A4(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C40752B76BFLL);
  _Unwind_Resume(a1);
}

double ZinPEPatterns::ElementWiseMirror::SharedClone@<D0>(ZinPEPatterns::ElementWiseMirror *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWiseMirror,std::allocator<ZinPEPatterns::ElementWiseMirror>,ZinPEPatterns::ElementWiseMirror const&,void>(this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void ZinPEPatterns::ElementWiseMirror::Fuse(ZinPEPatterns::ElementWise *a1, const ZinPattern *a2, const ZinIrOpLayerGraph *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "scaled_ew");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (SingleMatch)
  {
    uint64_t v8 = *(void *)(SingleMatch + 64);
    if (*(_DWORD *)(v8 + 8) == 6)
    {
      char v9 = *(unsigned char *)(v8 + 28);
      *(unsigned char *)(v8 + 28) = *(unsigned char *)(v8 + 29);
      *(unsigned char *)(v8 + 29) = v9;
    }
  }
  ZinPEPatterns::ElementWise::CreatePEEW(a1, a2, a3, v6);
}

void sub_2113078A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinPEPatterns::ElementWiseMirror::GetInputEdges(ZinPEPatterns::ElementWiseMirror *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t FirstMatch = ZinPattern::GetFirstMatch((ZinPEPatterns::ElementWiseMirror *)((char *)this + 216));
  uint64_t v5 = *((void *)this + 24);
  uint64_t v6 = v5 - *((void *)this + 23);
  if (v6)
  {
    uint64_t v7 = (ZinMirTensorTransform *)FirstMatch;
    unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * (v6 >> 4);
    do
    {
      uint64_t v9 = *(void *)(v5 - 208);
      v5 -= 208;
      (*(void (**)(void **__return_ptr, uint64_t))(v9 + 24))(&__p, v5);
      --v8;
      if (v25 == __p)
      {
        uint64_t SinglePreviousLayer = ZinMirTensorTransform::GetSinglePreviousLayer(v7, v8);
        uint64_t v11 = SinglePreviousLayer;
        if (SinglePreviousLayer)
        {
          float v13 = (uint64_t *)a2[1];
          unint64_t v12 = (unint64_t)a2[2];
          if ((unint64_t)v13 >= v12)
          {
            uint64_t v15 = ((char *)v13 - *a2) >> 4;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 60) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v17 = v12 - (void)*a2;
            if (v17 >> 3 > v16) {
              unint64_t v16 = v17 >> 3;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18) {
              int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a2 + 2), v18);
            }
            else {
              int v19 = 0;
            }
            unint64_t v20 = (uint64_t *)&v19[16 * v15];
            *unint64_t v20 = v11;
            v20[1] = (uint64_t)v7;
            uint64_t v22 = *a2;
            unint64_t v21 = a2[1];
            char v23 = v20;
            if (v21 != *a2)
            {
              do
              {
                *((_OWORD *)v23 - 1) = *((_OWORD *)v21 - 1);
                v23 -= 2;
                v21 -= 16;
              }
              while (v21 != v22);
              unint64_t v21 = *a2;
            }
            float v14 = (char *)(v20 + 2);
            *a2 = (char *)v23;
            a2[1] = (char *)(v20 + 2);
            a2[2] = &v19[16 * v18];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *float v13 = SinglePreviousLayer;
            v13[1] = (uint64_t)v7;
            float v14 = (char *)(v13 + 2);
          }
          a2[1] = v14;
        }
      }
      else
      {
        std::vector<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>,std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>>(a2, (uint64_t)a2[1], (long long *)__p, v25, ((char *)v25 - (unsigned char *)__p) >> 4);
      }
      if (__p)
      {
        long long v25 = (long long *)__p;
        operator delete(__p);
      }
    }
    while (v5 != *((void *)this + 23));
  }
}

void sub_211307A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  float v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

double ZinPEPatterns::GOC::SharedClone@<D0>(ZinPEPatterns::GOC *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinPEPatterns::GOC,std::allocator<ZinPEPatterns::GOC>,ZinPEPatterns::GOC const&,void>(this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinPEPatterns::GOC::Fuse(uint64_t a1, uint64_t a2, ZinObjectNameFactory *a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "dequant1");
  uint64_t SingleMatch = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "irelu1");
  ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "dequant2");
  ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "irelu2");
  ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "itranspose");
  ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "broadcast");
  ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "dynamic_goc");
  uint64_t v7 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "goc");
  ZinPattern::GetMatch(a1, (unsigned __int8 *)&v48, &__p);
  ZinPatternUtils::ToGOC((uint64_t **)&__p, (uint64_t **)&v51);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "per_channel_quant");
  uint64_t v8 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  uint64_t v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9) {
      goto LABEL_40;
    }
  }
  else if (!v8)
  {
    goto LABEL_40;
  }
  uint64_t v10 = ZinPatternUtils::ConvertQuantToGOC(v9);
  uint64_t v11 = v10;
  unint64_t v12 = v52;
  if ((unint64_t)v52 >= v53)
  {
    uint64_t v14 = ((char *)v52 - (unsigned char *)v51) >> 3;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = (uint64_t)(v53 - (void)v51) >> 2;
    if (v15 <= v14 + 1) {
      unint64_t v15 = v14 + 1;
    }
    if (v53 - (unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v18 = (uint64_t *)&v17[8 * v14];
    int v19 = &v17[8 * v16];
    *unint64_t v18 = v11;
    float v13 = v18 + 1;
    unint64_t v20 = (char *)v52;
    unint64_t v21 = (char *)v51;
    if (v52 != v51)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *--unint64_t v18 = v22;
      }
      while (v20 != v21);
      unint64_t v20 = (char *)v51;
    }
    int v51 = v18;
    uint64_t v52 = v13;
    unint64_t v53 = (unint64_t)v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    uint64_t *v52 = v10;
    float v13 = v12 + 1;
  }
  uint64_t v52 = v13;
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(&__p, "orelu");
  ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "ogoc");
  ZinPattern::GetMatch(a1, (unsigned __int8 *)&v48, &__p);
  ZinPatternUtils::ToGOC((uint64_t **)&__p, (uint64_t **)v50);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  char v23 = ZinMergeGOCSequence(a2, (uint64_t)a3, (uint64_t)v50);
  ZinPELayer::GetPostScaleAndBiasFromGOC((ZinGOCLayer *)v23, v49);
  std::string::basic_string[abi:ne180100]<0>(&__p, "otranspose");
  ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "oquant");
  ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  long long v25 = *(std::__shared_weak_count **)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v24 + 40))(v24, 0, 0)+ 8);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    if (SingleMatch)
    {
      *(float *)(*(void *)(v7 + 64) + 12) = ZinDeQuantLayer::GetScalarScale(SingleMatch)
                                              * *(float *)(*(void *)(v7 + 64) + 12);
      ZinDeQuantLayer::RemoveScale(SingleMatch, a3);
    }
    (*(void (**)(std::string *__return_ptr, ZinObjectNameFactory *, uint64_t))(*(void *)a3 + 16))(&v45, a3, 1);
    int v26 = *(char *)(v7 + 47);
    if (v26 >= 0) {
      long long v27 = (const std::string::value_type *)(v7 + 24);
    }
    else {
      long long v27 = *(const std::string::value_type **)(v7 + 24);
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(v7 + 47);
    }
    else {
      std::string::size_type v28 = *(void *)(v7 + 32);
    }
    char v29 = std::string::append(&v45, v27, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    long long v31 = std::string::append(&v48, "_", 1uLL);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v42, "fuse_pegoc");
    BOOL v33 = std::string::append(&v42, "_xfm", 4uLL);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    int64_t v44 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string v43 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (v44 >= 0) {
      std::string v35 = v43;
    }
    else {
      std::string v35 = (void **)v43[0];
    }
    if (v44 >= 0) {
      std::string::size_type v36 = HIBYTE(v44);
    }
    else {
      std::string::size_type v36 = (std::string::size_type)v43[1];
    }
    long long v37 = std::string::append(&__p, (const std::string::value_type *)v35, v36);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    std::string::size_type v47 = v37->__r_.__value_.__r.__words[2];
    long long v46 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v44) < 0) {
      operator delete(v43[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  long long v40 = ZinMergeGOCSequence(a2, (uint64_t)a3, (uint64_t)&v51);
  if (v52 == v51 || v40) {
    ZinPatternUtils::CreateConstInLayer((ZinPatternUtils *)v40, a3, v41);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  if (v51)
  {
    uint64_t v52 = (uint64_t *)v51;
    operator delete(v51);
  }
  return 0;
}

void sub_21130874C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (__p) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (STACK[0x280]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x280] + 8))(STACK[0x280]);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  std::string v45 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v45;
    operator delete(v45);
  }
  long long v46 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

void ZinPEPatterns::GOC::ToDynamicGOCInfo(ZinPEPatterns::GOC *this, const ZinGOCLayer *a2)
{
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  int v2 = (void *)(*(uint64_t (**)(ZinPEPatterns::GOC *, void, void))(*(void *)this + 32))(this, 0, 0);
  uint64_t v3 = v2[6];
  if (v3 >= 2)
  {
    LODWORD(v7) = 0;
    *((void *)&v7 + 1) = v3;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v8, (int *)&v7, &v7);
  }
  uint64_t v4 = v2[10];
  if (v4 >= 2)
  {
    LODWORD(v7) = 1;
    *((void *)&v7 + 1) = v4;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v8, (int *)&v7, &v7);
  }
  uint64_t v5 = v2[8];
  if (v5 >= 2)
  {
    LODWORD(v7) = 3;
    *((void *)&v7 + 1) = v5;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v8, (int *)&v7, &v7);
  }
  uint64_t v6 = v2[9];
  if (v6 >= 2)
  {
    LODWORD(v7) = 4;
    *((void *)&v7 + 1) = v6;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v8, (int *)&v7, &v7);
  }
  operator new();
}

void sub_211308BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

double ZinPEPatterns::Dequant::SharedClone@<D0>(ZinPEPatterns::Dequant *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinPEPatterns::Dequant,std::allocator<ZinPEPatterns::Dequant>,ZinPEPatterns::Dequant const&,void>((uint64_t *)this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

double ZinPEPatterns::DeQuantVector::SharedClone@<D0>(ZinPEPatterns::DeQuantVector *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinPEPatterns::DeQuantVector,std::allocator<ZinPEPatterns::DeQuantVector>,ZinPEPatterns::DeQuantVector const&,void>((uint64_t *)this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void ZinPEPatterns::DeQuantVector::Fuse(uint64_t a1, uint64_t a2, const ZinGOCLayer *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "vector_dequant");
  uint64_t SingleMatch = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = *((void *)SingleMatch + 14); ; i += 8)
  {
    if (i == *((void *)SingleMatch + 15)) {
      goto LABEL_8;
    }
    if (*(_DWORD *)(*(void *)(*(void *)i + 64) + 8) != 31) {
      break;
    }
  }
  LODWORD(__p[0]) = 0;
  ZinQuantizationLog::Log((uint64_t)SingleMatch, (int *)__p);
LABEL_8:
  ZinDeQuantLayer::GetScale(SingleMatch, &v13);
  memset(v12, 0, sizeof(v12));
  float NegatedZeroPoint = ZinDeQuantLayer::GetNegatedZeroPoint(SingleMatch, (uint64_t)v12);
  uint64_t v8 = *((void *)SingleMatch + 2);
  uint64_t v9 = (*(uint64_t (**)(ZinDeQuantLayer *, void, void, float))(*(void *)SingleMatch + 32))(SingleMatch, 0, 0, NegatedZeroPoint);
  PerCoutGOC = (ZinPatternUtils *)ZinBuilder::CreatePerCoutGOC(v8, (uint64_t)a3, v9, (uint64_t)&v13, (const void **)v12);
  ZinPatternUtils::CreateConstInLayer(PerCoutGOC, a3, v11);
}

void sub_211309450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21667D3C0](v41, 0x10B3C404F75725BLL);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (STACK[0x248]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x248] + 8))(STACK[0x248]);
  }
  std::string v43 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v43;
    operator delete(v43);
  }
  int64_t v44 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void sub_211309660()
{
}

void ZinPEPatterns::Dequant::Fuse(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "dequant");
  uint64_t SingleMatch = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "quant");
  uint64_t v3 = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "quant");
  if (ZinPattern::HasMatched(a1, (unsigned __int8 *)__p))
  {
    unsigned int v4 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "dma_conv_output");
    unsigned int v4 = ZinPattern::HasMatched(a1, (unsigned __int8 *)&v8) ^ 1;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (!v4) {
      goto LABEL_18;
    }
  }
  else if (!v4)
  {
    goto LABEL_18;
  }
  for (uint64_t i = *((void *)SingleMatch + 14); ; i += 8)
  {
    if (i == *((void *)SingleMatch + 15)) {
      goto LABEL_18;
    }
    if (*(_DWORD *)(*(void *)(*(void *)i + 64) + 8) != 31) {
      break;
    }
  }
  LODWORD(__p[0]) = 0;
  ZinQuantizationLog::Log((uint64_t)SingleMatch, (int *)__p);
LABEL_18:
  ZinDeQuantLayer::GetScalarZeroPoint(SingleMatch);
  ZinDeQuantLayer::GetScalarScale(SingleMatch);
  if (v3)
  {
    ZinDeQuantLayer::GetScalarZeroPoint(SingleMatch);
    ZinDeQuantLayer::GetScalarScale(SingleMatch);
    ZinDeQuantLayer::GetScalarZeroPoint(v3);
    ZinDeQuantLayer::GetScalarScale(v3);
  }
  operator new();
}

void sub_211309D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

double ZinPEPatterns::QuantScalar::SharedClone@<D0>(ZinPEPatterns::QuantScalar *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinPEPatterns::QuantScalar,std::allocator<ZinPEPatterns::QuantScalar>,ZinPEPatterns::QuantScalar const&,void>((uint64_t *)this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void ZinPEPatterns::QuantScalar::Fuse(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "scalar_quant");
  uint64_t SingleMatch = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (*(_DWORD *)(*(void *)(**((void **)SingleMatch + 11) + 64) + 8) != 28)
  {
    LODWORD(__p[0]) = 0;
    ZinQuantizationLog::Log((uint64_t)SingleMatch, (int *)__p);
  }
  if ((ZinQuantLayer::HasPerCoutScale(SingleMatch) & 1) == 0
    && !ZinQuantLayer::HasPerCoutZeroPoint(SingleMatch))
  {
    ZinDeQuantLayer::GetScalarScale(SingleMatch);
    ZinDeQuantLayer::GetScalarZeroPoint(SingleMatch);
    ZinDeQuantLayer::GetScalarScale(SingleMatch);
    operator new();
  }
  ZinAssertImpl("Unexpected perCout Scale or ZeroPoint");
}

void sub_21130A5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,uint64_t a44)
{
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  MEMORY[0x21667D3C0](v44, 0x10B3C40E3B78B76);
  if (*(char *)(v45 - 105) < 0) {
    operator delete(*(void **)(v45 - 128));
  }
  uint64_t v47 = *(void *)(v45 - 96);
  *(void *)(v45 - 96) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  _Unwind_Resume(a1);
}

double ZinPEPatterns::QuantVector::SharedClone@<D0>(ZinPEPatterns::QuantVector *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinPEPatterns::QuantVector,std::allocator<ZinPEPatterns::QuantVector>,ZinPEPatterns::QuantVector const&,void>((uint64_t *)this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void ZinPEPatterns::QuantVector::Fuse(uint64_t a1, uint64_t a2, const ZinGOCLayer *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "vector_quant");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (*(_DWORD *)(*(void *)(**(void **)(SingleMatch + 88) + 64) + 8) != 28)
  {
    LODWORD(__p[0]) = 0;
    ZinQuantizationLog::Log(SingleMatch, (int *)__p);
  }
  uint64_t v6 = (ZinPatternUtils *)ZinPatternUtils::ConvertQuantToGOC(SingleMatch);
  ZinPatternUtils::CreateConstInLayer(v6, a3, v7);
}

void sub_21130AED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21667D3C0](v41, 0x10B3C404F75725BLL);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (STACK[0x248]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x248] + 8))(STACK[0x248]);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C383478;
  return result;
}

uint64_t std::__function::__func<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__shared_ptr_emplace<ZinPEPatterns::Pool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::Pool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389D20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

void *std::allocate_shared[abi:ne180100]<ZinPEPatterns::BinaryPool,std::allocator<ZinPEPatterns::BinaryPool>,ZinPEPatterns::BinaryPool const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x2B0uLL);
  double result = std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::BinaryPool const&,std::allocator<ZinPEPatterns::BinaryPool>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21130B218(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::BinaryPool const&,std::allocator<ZinPEPatterns::BinaryPool>,0>(void *a1, const ZinManyToOnePattern *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389B28;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &unk_26C359640;
  return a1;
}

void sub_21130B290(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389B28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void *std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWiseAdd,std::allocator<ZinPEPatterns::ElementWiseAdd>,ZinPEPatterns::ElementWiseAdd const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x2B0uLL);
  double result = std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWiseAdd const&,std::allocator<ZinPEPatterns::ElementWiseAdd>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21130B388(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWiseAdd const&,std::allocator<ZinPEPatterns::ElementWiseAdd>,0>(void *a1, const ZinManyToOnePattern *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389C40;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &unk_26C3597F8;
  return a1;
}

void sub_21130B400(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389C40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389B60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

void *std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWiseMirror,std::allocator<ZinPEPatterns::ElementWiseMirror>,ZinPEPatterns::ElementWiseMirror const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x2B0uLL);
  double result = std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWiseMirror const&,std::allocator<ZinPEPatterns::ElementWiseMirror>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21130B56C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWiseMirror const&,std::allocator<ZinPEPatterns::ElementWiseMirror>,0>(void *a1, const ZinManyToOnePattern *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389CB0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &unk_26C3598A8;
  return a1;
}

void sub_21130B5E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void std::__shared_ptr_emplace<ZinPEPatterns::UnaryElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::UnaryElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389C78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

void std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C383420;
  return result;
}

uint64_t std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, ZinPattern **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a4;
  std::string::basic_string[abi:ne180100]<0>(v25, "goc");
  ZinPattern::GetMatch((uint64_t)v5, (unsigned __int8 *)v25, &__p);
  ZinPatternUtils::ToGOC((uint64_t **)&__p, (uint64_t **)&v27);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "per_channel_quant");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
  uint64_t v7 = SingleMatch;
  if (v23 < 0)
  {
    operator delete(__p);
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (SingleMatch) {
LABEL_9:
  }
    ZinPatternUtils::ConvertQuantScaleToGOC(v7);
LABEL_10:
  if (v28 == v27) {
    goto LABEL_19;
  }
  ZinObjectNameFactory::ZinObjectNameFactory(&__p, *(void *)v27 + 24);
  std::string v8 = ZinMergeGOCSequence(v4, (uint64_t)&__p, (uint64_t)&v27);
  if (v28 != v27 && !v8)
  {
    std::string __p = &unk_26C34DA98;
    if (v24 < 0) {
      operator delete(v22);
    }
    goto LABEL_39;
  }
  BOOL HasShift = ZinGOCLayer::HasShift((ZinIrKernel **)v8);
  BOOL v10 = HasShift;
  std::string __p = &unk_26C34DA98;
  if ((v24 & 0x80000000) == 0)
  {
    if (HasShift) {
      goto LABEL_39;
    }
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(&__p, "irelu2");
    uint64_t v11 = ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
    if (v23 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "irelu3");
    uint64_t v12 = ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
    if (v23 < 0) {
      operator delete(__p);
    }
    BOOL v13 = 0;
    if (v11 && v12) {
      BOOL v13 = ZinIrActivationParams::operator==(v11 + 192, v12 + 192);
    }
    if (v11 | v12) {
      int v14 = v13;
    }
    else {
      int v14 = 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "dequant2");
    char v15 = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
    if (v23 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "dequant3");
    uint64_t v16 = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
    if (v23 < 0) {
      operator delete(__p);
    }
    BOOL v17 = v15 == v16;
    if (v15 != v16 && v15 && v16)
    {
      BOOL v17 = ZinDeQuantLayer::operator==(v15, v16);
    }
    else if (!v15)
    {
      goto LABEL_40;
    }
    if (ZinDeQuantLayer::HasScale(v15)) {
      goto LABEL_39;
    }
LABEL_40:
    if (ZinPattern::MatchCount(v5)) {
      int v19 = v14;
    }
    else {
      int v19 = 0;
    }
    uint64_t v18 = v19 & v17;
    goto LABEL_44;
  }
  operator delete(v22);
  if (!v10) {
    goto LABEL_19;
  }
LABEL_39:
  uint64_t v18 = 0;
LABEL_44:
  if (v27)
  {
    std::string::size_type v28 = v27;
    operator delete(v27);
  }
  return v18;
}

void sub_21130BA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21130BAC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20 < 0) {
    JUMPOUT(0x21130BAB8);
  }
  JUMPOUT(0x21130BABCLL);
}

uint64_t std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<ZinPEPatterns::GOC,std::allocator<ZinPEPatterns::GOC>,ZinPEPatterns::GOC const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x2B0uLL);
  double result = std::__shared_ptr_emplace<ZinPEPatterns::GOC>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::GOC const&,std::allocator<ZinPEPatterns::GOC>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21130BB84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinPEPatterns::GOC>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::GOC const&,std::allocator<ZinPEPatterns::GOC>,0>(void *a1, const ZinManyToOnePattern *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389CE8;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &unk_26C359900;
  return a1;
}

void sub_21130BBFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::GOC>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::GOC>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::GOC>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C3834D0;
  return result;
}

BOOL std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, ZinPattern **a4)
{
  return ZinPattern::MatchCount(*a4) != 0;
}

uint64_t std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<ZinPEPatterns::Dequant,std::allocator<ZinPEPatterns::Dequant>,ZinPEPatterns::Dequant const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xE8uLL);
  double result = std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::Dequant const&,std::allocator<ZinPEPatterns::Dequant>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21130BDB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::Dequant const&,std::allocator<ZinPEPatterns::Dequant>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389D58;
  std::construct_at[abi:ne180100]<ZinPEPatterns::Dequant,ZinPEPatterns::Dequant const&,ZinPEPatterns::Dequant*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_21130BE14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389D58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::Dequant,ZinPEPatterns::Dequant const&,ZinPEPatterns::Dequant*>(ZinPattern *a1, uint64_t *a2)
{
  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *uint64_t v4 = &unk_26C349BA8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem*,ZinLinearPattern::AtomItem*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(void *)a1 = &unk_26C3599B0;
  return a1;
}

void sub_21130BF4C(_Unwind_Exception *a1)
{
  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C3833C8;
  return result;
}

uint64_t std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<ZinPEPatterns::DeQuantVector,std::allocator<ZinPEPatterns::DeQuantVector>,ZinPEPatterns::DeQuantVector const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xE8uLL);
  double result = std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::DeQuantVector const&,std::allocator<ZinPEPatterns::DeQuantVector>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21130C048(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::DeQuantVector const&,std::allocator<ZinPEPatterns::DeQuantVector>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389C08;
  std::construct_at[abi:ne180100]<ZinPEPatterns::DeQuantVector,ZinPEPatterns::DeQuantVector const&,ZinPEPatterns::DeQuantVector*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_21130C0A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389C08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::DeQuantVector,ZinPEPatterns::DeQuantVector const&,ZinPEPatterns::DeQuantVector*>(ZinPattern *a1, uint64_t *a2)
{
  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *uint64_t v4 = &unk_26C349BA8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem*,ZinLinearPattern::AtomItem*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(void *)a1 = &unk_26C3597A0;
  return a1;
}

void sub_21130C1DC(_Unwind_Exception *a1)
{
  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C383318;
  return result;
}

uint64_t std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<ZinPEPatterns::QuantScalar,std::allocator<ZinPEPatterns::QuantScalar>,ZinPEPatterns::QuantScalar const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xE8uLL);
  double result = std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::QuantScalar const&,std::allocator<ZinPEPatterns::QuantScalar>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21130C2D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::QuantScalar const&,std::allocator<ZinPEPatterns::QuantScalar>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389B98;
  std::construct_at[abi:ne180100]<ZinPEPatterns::QuantScalar,ZinPEPatterns::QuantScalar const&,ZinPEPatterns::QuantScalar*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_21130C334(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389B98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::QuantScalar,ZinPEPatterns::QuantScalar const&,ZinPEPatterns::QuantScalar*>(ZinPattern *a1, uint64_t *a2)
{
  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *uint64_t v4 = &unk_26C349BA8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem*,ZinLinearPattern::AtomItem*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(void *)a1 = &unk_26C3596F0;
  return a1;
}

void sub_21130C46C(_Unwind_Exception *a1)
{
  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C383370;
  return result;
}

uint64_t std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<ZinPEPatterns::QuantVector,std::allocator<ZinPEPatterns::QuantVector>,ZinPEPatterns::QuantVector const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xE8uLL);
  double result = std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::QuantVector const&,std::allocator<ZinPEPatterns::QuantVector>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21130C568(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::QuantVector const&,std::allocator<ZinPEPatterns::QuantVector>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C389BD0;
  std::construct_at[abi:ne180100]<ZinPEPatterns::QuantVector,ZinPEPatterns::QuantVector const&,ZinPEPatterns::QuantVector*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_21130C5C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::QuantVector,ZinPEPatterns::QuantVector const&,ZinPEPatterns::QuantVector*>(ZinPattern *a1, uint64_t *a2)
{
  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *uint64_t v4 = &unk_26C349BA8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem*,ZinLinearPattern::AtomItem*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(void *)a1 = &unk_26C359748;
  return a1;
}

void sub_21130C6FC(_Unwind_Exception *a1)
{
  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

__CFDictionary *ZinCreateCrossCorrelationUnit(uint64_t a1)
{
  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  int valuePtr = *(void *)(a1 + 80);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Unit, @"NumGroups", v4);
  CFRelease(v4);
  Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFNumberRef v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (const void *)(a1 + 112));
  CFNumberRef v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (const void *)(a1 + 116));
  CFDictionaryAddValue(Mutable, @"TemplateWidth", v6);
  CFDictionaryAddValue(Mutable, @"TemplateHeight", v7);
  CFRelease(v6);
  CFRelease(v7);
  long long v9 = *(_OWORD *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 104);
  ZinAddPaddingToParamsDict(Mutable, (const ZinIrPadding *)&v9, 1);
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

void *ZinSNELayer::ZinSNELayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v9 = *a3;
  uint64_t v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v8 = 0;
  ZinEngineLayer::ZinEngineLayer(a1, a2, &v9, a4, &v8);
  CFNumberRef v6 = v8;
  std::string v8 = 0;
  if (v6)
  {
    ZinIrKernel::~ZinIrKernel(v6);
    MEMORY[0x21667D3C0]();
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *a1 = &unk_26C32BAD0;
  return a1;
}

void sub_21130C8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ZinIrKernel *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinSNELayer::Lower()
{
  return 0;
}

void ZinSNEConditionLayer::ZinSNEConditionLayer()
{
}

void sub_21130CA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  ZinLayerNormLayer::ZinLayerNormLayer((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ZinSNEConditionLayer::Lower()
{
}

void ZinSNEConditionLayer::Clone()
{
}

void sub_21130CB08(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21667D3C0](v1, 0x10B3C40CDBD2B31);
  _Unwind_Resume(a1);
}

uint64_t ZinSNEConditionLayer::ConvertNonLinearModeToPredicateOp(int a1)
{
  if ((a1 - 25) > 5) {
    return 7;
  }
  else {
    return dword_211F05AA4[a1 - 25];
  }
}

void ZinMirLiveOutUnit::ZinMirLiveOutUnit(ZinMirLiveOutUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  *(void *)ZinMirUnit::ZinMirUnit((uint64_t)this, 31, (long long *)a2) = &unk_26C34B1A0;
}

uint64_t ZinMirLiveOutUnit::DynamicShapeOutputTensorDimensions(uint64_t a1, long long **a2, uint64_t a3)
{
  CFAllocatorRef v3 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 40) {
    return 3;
  }
  uint64_t result = 0;
  long long v5 = *v3;
  long long v6 = v3[1];
  *(void *)(a3 + 32) = *((void *)v3 + 4);
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  return result;
}

void ZinMirLiveOutUnit::CreateLayer(uint64_t a1)
{
  if (!*(void *)(a1 + 104)) {
    operator new();
  }
  ZinAssertImpl("LiveOut layer should not have MIR info");
}

void sub_21130CCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

void ZinMirBankConflictOptimizer::ComputeResidentSymbolStrides(ZinMirBankConflictOptimizer *this@<X0>, const ZinIrTensor *a2@<X1>, uint64_t a3@<X8>)
{
  v13[4] = *MEMORY[0x263EF8340];
  ZinIrTensor::GetDimensionOrderHint(this, (uint64_t)&__p);
  v13[3] = 0;
  ZinIrTensor::InferDescriptor((unsigned __int8 *)this, 1, (uint64_t)&__p, 1, 1, (uint64_t)v13, (uint64_t)v11);
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100](v13);
  if (__p)
  {
    v10[0] = __p;
    operator delete(__p);
  }
  v10[0] = 0;
  v10[1] = 0;
  v8[1] = 0;
  std::string __p = v10;
  CFNumberRef v7 = (uint64_t *)v8;
  v8[0] = 0;
  ZinMirBankConflictOptimizer::GetConsumersProducersForL2StrideOptimization(this, (uint64_t **)&__p, &v7);
  ZinMirBankConflictOptimizer::ComputeOptimizedL2Strides(this, v12, &__p, &v7, a2, a3);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v7, v8[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&__p, v10[0]);
}

void sub_21130CE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100]((void *)(v13 - 72));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ZinMirBankConflictOptimizer::GetConsumersProducersForL2StrideOptimization(ZinIrTensor *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6 = *((void *)a1 + 12);
  CFNumberRef v7 = *(uint64_t **)(v6 + 112);
  std::string v8 = *(uint64_t **)(v6 + 120);
  while (v7 != v8)
  {
    uint64_t v13 = (void *)*v7;
    if (*(_DWORD *)(v13[8] + 8) != 7) {
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(a2, (unint64_t *)&v13, (uint64_t *)&v13);
    }
    ++v7;
  }
  if (!ZinIrTensor::IsLiveInLiveStateOrConstTensor(a1)
    && *(_DWORD *)(*(void *)(*((void *)a1 + 12) + 64) + 8) != 7)
  {
    uint64_t v13 = (void *)*((void *)a1 + 12);
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(a3, (unint64_t *)&v13, (uint64_t *)&v13);
  }
  ZinIrTensor::GetChildren(a1, (uint64_t)&v13);
  uint64_t v9 = v13;
  if (v13 != v14)
  {
    do
    {
      ZinMirBankConflictOptimizer::GetConsumersProducersForL2StrideOptimization(v9[4], a2, a3);
      uint64_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = (void **)v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void **)v9[2];
          BOOL v12 = *v11 == v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != v14);
  }
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_21130CFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void ZinMirBankConflictOptimizer::ComputeOptimizedL2Strides(ZinIrTensor *a1@<X0>, long long *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7 = a5[53];
  *(_DWORD *)__dst = 0;
  std::vector<float>::vector(v88, v7, __dst);
  uint64_t v9 = a3 + 1;
  std::string v8 = (void *)*a3;
  uint64_t v58 = a3 + 1;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      uint64_t v10 = (const ZinANELayer *)v8[4];
      if (ZinIrOpLayer::IsANELayer(v10))
      {
        uint64_t v11 = *((void *)v10 + 33);
        memcpy(__dst, (const void *)(v11 + 120), sizeof(__dst));
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v77, v11 + 576);
        int v80 = *(_DWORD *)(v11 + 616);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v81, v11 + 624);
        int v84 = *(_DWORD *)(v11 + 664);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v85, v11 + 672);
        ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v11 + 120), v10, 1);
        (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(void *)v10 + 512))(&__p, v10);
        BOOL v12 = (ZinIrTensor **)__p;
        if (v63 == __p)
        {
LABEL_7:
          unint64_t v13 = 0;
        }
        else
        {
          unint64_t v13 = 0;
          while (ZinIrTensor::GetRootTensor(v12[v13]) != a1)
          {
            ++v13;
            BOOL v12 = (ZinIrTensor **)__p;
            if (v13 >= (v63 - (unsigned char *)__p) >> 3) {
              goto LABEL_7;
            }
          }
        }
        ZinMirL2Config::ZinMirGetL2BroadcastConflictCost(v11 + 120, (unint64_t)v88, (ZinEngineLayerMirInfo **)v10, v13 != 0);
        uint64_t v9 = a3 + 1;
        memcpy((void *)(v11 + 120), __dst, 0x1C0uLL);
        *(_DWORD *)(v11 + 568) = *(_DWORD *)&__dst[448];
        if ((unsigned char *)(v11 + 120) == __dst)
        {
          *(_DWORD *)(v11 + 616) = v80;
          *(_DWORD *)(v11 + 664) = v84;
        }
        else
        {
          *(_DWORD *)(v11 + 608) = v79;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v11 + 576), v78, 0);
          *(_DWORD *)(v11 + 616) = v80;
          *(_DWORD *)(v11 + 656) = v83;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v11 + 624), v82, 0);
          *(_DWORD *)(v11 + 664) = v84;
          *(_DWORD *)(v11 + 704) = v87;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v11 + 672), v86, 0);
        }
        if (__p)
        {
          int v63 = __p;
          operator delete(__p);
        }
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v85);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v81);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v77);
      }
      int v14 = (void *)v8[1];
      if (v14)
      {
        do
        {
          char v15 = v14;
          int v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          char v15 = (void *)v8[2];
          BOOL v16 = *v15 == (void)v8;
          std::string v8 = v15;
        }
        while (!v16);
      }
      std::string v8 = v15;
    }
    while (v15 != v9);
  }
  BOOL v17 = (void *)*a4;
  uint64_t v60 = a4 + 1;
  if (v17 != v60)
  {
    do
    {
      uint64_t v18 = (ZinIrOpLayer *)v17[4];
      if (ZinIrOpLayer::IsANELayer(v18))
      {
        uint64_t v19 = *((void *)v18 + 33);
        memcpy(__dst, (const void *)(v19 + 120), sizeof(__dst));
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v77, v19 + 576);
        int v80 = *(_DWORD *)(v19 + 616);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v81, v19 + 624);
        int v84 = *(_DWORD *)(v19 + 664);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v85, v19 + 672);
        unint64_t v20 = a3 + 1;
        while (1)
        {
          unint64_t v20 = (void *)*v20;
          if (!v20) {
            break;
          }
          unint64_t v21 = v20[4];
          if ((unint64_t)v18 >= v21)
          {
            if (v21 >= (unint64_t)v18) {
              goto LABEL_28;
            }
            ++v20;
          }
        }
        int IsAllInputsResident = ZinIrOpLayer::IsAllInputsResident(v18);
        ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v19 + 120), v18, IsAllInputsResident);
LABEL_28:
        ZinMirL2Config::ZinMirGetL2WritebackConflictCost(v19 + 120, (uint64_t *)v88, v18);
        memcpy((void *)(v19 + 120), __dst, 0x1C0uLL);
        *(_DWORD *)(v19 + 568) = *(_DWORD *)&__dst[448];
        if ((unsigned char *)(v19 + 120) == __dst)
        {
          *(_DWORD *)(v19 + 616) = v80;
          *(_DWORD *)(v19 + 664) = v84;
        }
        else
        {
          *(_DWORD *)(v19 + 608) = v79;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v19 + 576), v78, 0);
          *(_DWORD *)(v19 + 616) = v80;
          *(_DWORD *)(v19 + 656) = v83;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v19 + 624), v82, 0);
          *(_DWORD *)(v19 + 664) = v84;
          *(_DWORD *)(v19 + 704) = v87;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v19 + 672), v86, 0);
        }
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v85);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v81);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v77);
      }
      char v23 = (void *)v17[1];
      if (v23)
      {
        do
        {
          char v24 = v23;
          char v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          char v24 = (void *)v17[2];
          BOOL v16 = *v24 == (void)v17;
          BOOL v17 = v24;
        }
        while (!v16);
      }
      BOOL v17 = v24;
    }
    while (v24 != v60);
  }
  long long v25 = *a2;
  long long v74 = *(long long *)((char *)a2 + 24);
  long long v75 = v25;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  BOOL v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  char v26 = (void *)*a3;
  *(void *)__dst = &v68;
  if (v26 == v58)
  {
    long long v31 = (ZinIrTensor *)((char *)a1 + 48);
  }
  else
  {
    do
    {
      if (*(_DWORD *)(*(void *)(v26[4] + 64) + 8) == 35) {
        std::back_insert_iterator<std::vector<ZinIrOpLayer *>>::operator=[abi:ne180100]((void ***)__dst, v26 + 4);
      }
      long long v27 = (void *)v26[1];
      if (v27)
      {
        do
        {
          std::string::size_type v28 = v27;
          long long v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          std::string::size_type v28 = (void *)v26[2];
          BOOL v16 = *v28 == (void)v26;
          char v26 = v28;
        }
        while (!v16);
      }
      char v26 = v28;
    }
    while (v28 != v58);
    char v29 = v68;
    long long v30 = v69;
    long long v31 = (ZinIrTensor *)((char *)a1 + 48);
    while (v29 != v30)
    {
      uint64_t v32 = (*(uint64_t (**)(void, void, void))(*(void *)*v29 + 32))(*v29, 0, 0);
      ZinIrTensor::GetDimensionOrderHint(a1, (uint64_t)__dst);
      ZinReshapeLayerUtils::GetReshapedDimensions(v31, (const ZinTensorDimensions *)(v32 + 48), (const ZinTensorDimensions *)__dst, (const DimensionOrderHint *)1, (char **)&__p);
      if (*(void *)__dst)
      {
        *(void *)&__dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      BOOL v33 = __p;
      unint64_t v34 = (v63 - (unsigned char *)__p) >> 2;
      if (v34 > (v72 - (unsigned char *)v71) >> 2)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v71, (char *)__p, (uint64_t)v63, v34);
        BOOL v33 = __p;
      }
      if (v33)
      {
        int v63 = v33;
        operator delete(v33);
      }
      ++v29;
    }
  }
  long long v35 = *((_OWORD *)v31 + 1);
  v66[0] = *(_OWORD *)v31;
  v66[1] = v35;
  uint64_t v67 = *((void *)v31 + 4);
  std::string::size_type v36 = (int *)v71;
  long long v37 = (int *)v72;
  if (v71 == v72)
  {
    int64_t v40 = ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(*((void *)a2 + 2), (uint64_t *)v88, a5, 1uLL);
    goto LABEL_71;
  }
  unint64_t v38 = 1;
  long long v39 = v71;
  while (*v39 != 3)
  {
    if (++v39 == (_DWORD *)v72) {
      goto LABEL_68;
    }
  }
  int v41 = 1;
  do
  {
    if (*v36 != 3) {
      v41 *= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v66, *v36);
    }
    ++v36;
  }
  while (v36 != v37);
  unint64_t v38 = v41;
  std::string::size_type v36 = (int *)v71;
  long long v37 = (int *)v72;
LABEL_68:
  int64_t v40 = ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(*((void *)a2 + 2), (uint64_t *)v88, a5, v38);
  if (v36 == v37)
  {
LABEL_71:
    long long v42 = v74;
    *(_OWORD *)a6 = v75;
    *(void *)(a6 + 16) = v40;
    *(_OWORD *)(a6 + 24) = v42;
    goto LABEL_98;
  }
  ZinIrTensor::GetDimensionOrderHint(a1, (uint64_t)__dst);
  if (DimensionOrderHint::IsSet((DimensionOrderHint *)__dst)) {
    ZinIrTensor::GetDimensionOrderHint(a1, (uint64_t)&__p);
  }
  else {
    DimensionOrderHint::DimensionOrderHint(&__p, 1);
  }
  DimensionOrderHint::GetOrder((DimensionOrderHint *)&__p, &v64);
  if (__p)
  {
    int v63 = __p;
    operator delete(__p);
  }
  if (*(void *)__dst)
  {
    *(void *)&__dst[8] = *(void *)__dst;
    operator delete(*(void **)__dst);
  }
  *(_OWORD *)__dst = v75;
  *(void *)&__dst[16] = v40;
  *(_OWORD *)&__dst[24] = v74;
  for (uint64_t i = (char *)v71; ; i += 4)
  {
    if (i == v72)
    {
      long long v44 = v74;
      *(_OWORD *)a6 = v75;
      *(void *)(a6 + 16) = v40;
      *(_OWORD *)(a6 + 24) = v44;
      goto LABEL_96;
    }
    if (*(_DWORD *)i == 3) {
      break;
    }
  }
  uint64_t v45 = (int *)v64;
  long long v46 = v65;
  if (v64 == v65)
  {
LABEL_94:
    long long v51 = *(_OWORD *)&__dst[16];
    uint64_t v52 = a6;
    *(_OWORD *)a6 = *(_OWORD *)__dst;
    *(_OWORD *)(a6 + 16) = v51;
    uint64_t v53 = *(void *)&__dst[32];
    goto LABEL_95;
  }
  int v47 = 1;
  while (1)
  {
    std::string v48 = v71;
    if (v71 == v72) {
      goto LABEL_93;
    }
    int v49 = *v45;
    while (v49 != *v48)
    {
      if (++v48 == (_DWORD *)v72) {
        goto LABEL_93;
      }
    }
    if (v49 == 3) {
      goto LABEL_93;
    }
    v47 *= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v31, *v45);
    unint64_t v50 = v40 / v47;
    if (v40 % v47 >= 1 || v50 % a5[52]) {
      break;
    }
    SetValueAtDimension<ZinTensorDimensions>(__dst, v49, v50);
LABEL_93:
    if (++v45 == v46) {
      goto LABEL_94;
    }
  }
  long long v54 = a2[1];
  uint64_t v52 = a6;
  *(_OWORD *)a6 = *a2;
  *(_OWORD *)(a6 + 16) = v54;
  uint64_t v53 = *((void *)a2 + 4);
LABEL_95:
  *(void *)(v52 + 32) = v53;
LABEL_96:
  if (v64)
  {
    int v65 = (int *)v64;
    operator delete(v64);
  }
LABEL_98:
  if (v68)
  {
    uint64_t v69 = v68;
    operator delete(v68);
  }
  if (v71)
  {
    uint64_t v72 = (char *)v71;
    operator delete(v71);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
}

void sub_21130D818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (__p) {
    operator delete(__p);
  }
  if (a41) {
    operator delete(a41);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  long long v44 = *(void **)(v42 - 120);
  if (v44)
  {
    *(void *)(v42 - 112) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirBankConflictOptimizer::ComputeChainSymbolRowStride(ZinMirBankConflictOptimizer *this, const ZinIrTensor *a2, const ZinIrHalParameters *a3)
{
  long long v5 = *(void **)(*((void *)this + 12) + 264);
  uint64_t v6 = *((void *)a2 + 52);
  uint64_t v7 = v6 * v5[36];
  uint64_t v21 = v5[37] * v6;
  uint64_t v9 = v5 + 34;
  uint64_t v8 = v5[34];
  uint64_t v10 = v9[1] * v6;
  *(void *)&long long v18 = v7;
  *((void *)&v18 + 1) = v10;
  uint64_t v19 = v8 * v6;
  uint64_t v20 = 1;
  v17[0] = 0;
  v17[1] = 0;
  v15[1] = 0;
  BOOL v16 = (uint64_t *)v17;
  int v14 = (uint64_t *)v15;
  v15[0] = 0;
  ZinMirBankConflictOptimizer::GetConsumersProducersForL2StrideOptimization(this, &v16, &v14);
  ZinMirBankConflictOptimizer::ComputeOptimizedL2Strides(this, &v18, &v16, &v14, a2, (uint64_t)v13);
  uint64_t v11 = v13[2] / *((void *)a2 + 52);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v17[0]);
  return v11;
}

void sub_21130DA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, char a17, void *a18)
{
}

unint64_t ZinMirBankConflictOptimizer::ComputeInputDmaBufferRowStride(ZinEngineLayerMirInfo **a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2) {
    ZinAssertImpl("Invalid Buffer Calculation");
  }
  unint64_t v8 = a4[53];
  int v13 = 0;
  std::vector<float>::vector(__p, v8, &v13);
  ZinMirL2Config::ZinMirGetL2BroadcastConflictCost(a2, (unint64_t)__p, a1, a3);
  uint64_t TileSrc = ZinMirL2Config::GetTileSrc(a2, a3);
  unint64_t v10 = a4[52];
  unint64_t v11 = ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(v10 * *(void *)(TileSrc + 8), (uint64_t *)__p, a4, 1uLL);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11 / v10;
}

void sub_21130DB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(unint64_t a1, uint64_t *a2, void *a3, unint64_t a4)
{
  if (!a4) {
    return a1;
  }
  unint64_t v4 = a3[53];
  if (!v4) {
    return a1;
  }
  unint64_t v5 = a4;
  unint64_t v6 = a3[53];
  do
  {
    unint64_t v7 = v6;
    unint64_t v6 = v5;
    unint64_t v5 = v7 % v5;
  }
  while (v5);
  unint64_t v8 = v4 / v6 * a4;
  if (!v8) {
    return a1;
  }
  unint64_t v9 = 0;
  unint64_t v10 = a3[52];
  uint64_t v11 = *a2;
  uint64_t v12 = v10 * a4;
  float v13 = 3.4028e38;
  unint64_t v14 = a1;
  unint64_t v15 = a1 / v10;
  do
  {
    if (a1 <= a3[59] && *(float *)(v11 + 4 * ((v15 + v9) % v4)) < v13)
    {
      float v13 = *(float *)(v11 + 4 * ((v15 + v9) % v4));
      unint64_t v14 = a1;
    }
    v9 += a4;
    a1 += v12;
  }
  while (v9 < v8);
  return v14;
}

unint64_t ZinMirBankConflictOptimizer::ComputeOutputDmaBufferRowStride(ZinMirBankConflictOptimizer *this, const ZinANELayer *a2, const ZinIrHalParameters *a3)
{
  unint64_t v5 = *((void *)a2 + 53);
  int v10 = 0;
  std::vector<float>::vector(__p, v5, &v10);
  ZinMirL2Config::ZinMirGetL2WritebackConflictCost(*((void *)this + 33) + 120, (uint64_t *)__p, this);
  uint64_t v6 = *(void *)(*((void *)this + 33) + 272);
  unint64_t v7 = *((void *)a2 + 52);
  unint64_t v8 = ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(v7 * v6, (uint64_t *)__p, a2, 1uLL);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v8 / v7;
}

void sub_21130DC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirBankConflictOptimizer::IsQualifiedForBankConflictOpt(ZinIrTensor *this, int a2, ZinTensorFamilyUtil *a3)
{
  uint64_t v6 = (ZinIrTensor::MirInfo *)*((void *)this + 13);
  if (v6 && ZinIrTensor::MirInfo::HasCustomStrides(v6) || *((void *)this + 8) == 1)
  {
    char v7 = 0;
    return v7 & 1;
  }
  if (*((unsigned char *)a3 + 104))
  {
    TensorFamily = (const void **)ZinTensorFamilyUtil::GetTensorFamily(a3, this);
    long long v44 = 0;
    uint64_t v45 = 0;
    std::string v43 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v43, *TensorFamily, (uint64_t)TensorFamily[1], ((unsigned char *)TensorFamily[1] - (unsigned char *)*TensorFamily) >> 3);
  }
  else
  {
    ZinIrTensor::GetTensorFamily(this, (uint64_t)&v43);
  }
  unint64_t v9 = v43;
  int v10 = v44;
  while (v9 != v10)
  {
    if (ZinIrTensor::IsAlias(*v9))
    {
      char v7 = 0;
      goto LABEL_56;
    }
    ++v9;
  }
  ZinIrTensor::GetDimensionOrderHint(this, (uint64_t)&v41);
  if (!DimensionOrderHint::IsSet((DimensionOrderHint *)&v41)) {
    goto LABEL_40;
  }
  uint64_t v12 = operator new(0x14uLL);
  long long v37 = v12 + 5;
  unint64_t v38 = (char *)(v12 + 5);
  void v12[4] = 4;
  *(_OWORD *)uint64_t v12 = xmmword_211F05AD0;
  std::string::size_type v36 = v12;
  DimensionOrderHint::DimensionOrderHint(&v39, &v36);
  float v13 = v39;
  unint64_t v14 = v41;
  if (v40 - (unsigned char *)v39 == v42 - (unsigned char *)v41)
  {
    if (v39 == v40)
    {
      BOOL v15 = 1;
      goto LABEL_35;
    }
    while (*v13 == *v14)
    {
      ++v13;
      ++v14;
      if (v13 == (_DWORD *)v40)
      {
        BOOL v15 = 1;
        goto LABEL_35;
      }
    }
  }
  BOOL v16 = operator new(0x14uLL);
  uint64_t v32 = v16 + 5;
  BOOL v33 = (char *)(v16 + 5);
  v16[4] = 4;
  *(_OWORD *)BOOL v16 = xmmword_211F05AE4;
  std::string __p = v16;
  DimensionOrderHint::DimensionOrderHint(&v34, &__p);
  BOOL v17 = (int *)v41;
  if (v35 - v34 != v42 - (unsigned char *)v41)
  {
    BOOL v15 = 0;
    goto LABEL_29;
  }
  if (v34 != v35)
  {
    long long v18 = v34 + 4;
    do
    {
      int v19 = *v17++;
      BOOL v15 = *((_DWORD *)v18 - 1) == v19;
      BOOL v20 = *((_DWORD *)v18 - 1) != v19 || v18 == v35;
      v18 += 4;
    }
    while (!v20);
LABEL_29:
    if (!v34) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  BOOL v15 = 1;
  if (v34)
  {
LABEL_30:
    long long v35 = v34;
    operator delete(v34);
  }
LABEL_31:
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
LABEL_35:
  if (v39)
  {
    int64_t v40 = v39;
    operator delete(v39);
  }
  if (v36)
  {
    long long v37 = v36;
    operator delete(v36);
  }
  if (!v15)
  {
LABEL_52:
    char v7 = 0;
    goto LABEL_54;
  }
LABEL_40:
  uint64_t v21 = v43;
  uint64_t v22 = v44;
  if (v43 == v44)
  {
    char v26 = 0;
  }
  else
  {
    int v23 = 0;
    int v24 = 0;
    do
    {
      long long v25 = *v21;
      v23 |= ZinIrTensor::IsReshape(*v21);
      v24 |= ZinIrTensor::IsNoOpTranspose(v25);
      ++v21;
    }
    while (v21 != v22);
    char v26 = v23 & v24;
  }
  char v7 = v26 ^ 1;
  if ((v26 & 1) == 0 && a2)
  {
    long long v27 = v43;
    std::string::size_type v28 = v44;
    while (v27 != v28)
    {
      char v29 = (ZinIrOpLayer *)*((void *)*v27 + 12);
      if (*(_DWORD *)(*((void *)v29 + 8) + 8) == 35
        && !ZinReshapeLayerUtils::IsReshapeValidAfterStridePadding(v29, 3, 1))
      {
        goto LABEL_52;
      }
      ++v27;
    }
    char v7 = 1;
  }
LABEL_54:
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
LABEL_56:
  if (v43)
  {
    long long v44 = v43;
    operator delete(v43);
  }
  return v7 & 1;
}

void sub_21130DF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a24) {
    operator delete(a24);
  }
  long long v27 = *(void **)(v25 - 88);
  if (v27)
  {
    *(void *)(v25 - 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ZinMirBankConflictOptimizer::GetL2Requests(ZinMirBankConflictOptimizer *this, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v16[1] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388]();
  unint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  if (!a2) {
    return 0;
  }
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t result = 0;
  do
  {
    unint64_t v13 = v10;
    for (uint64_t i = this; i; uint64_t i = (ZinMirBankConflictOptimizer *)((char *)i - 1))
    {
      uint64_t v15 = *(void *)&v9[8 * (v13 % a4)];
      *(void *)&v9[8 * (v13 % a4)] = v15 + 1;
      if (result <= v15 + 1) {
        unint64_t result = v15 + 1;
      }
      ++v13;
    }
    ++v11;
    v10 += a3;
  }
  while (v11 != a2);
  return result;
}

unint64_t ZinMirBankConflictOptimizer::ComputeCostOfL2Fetch(unint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  int v23 = (uint64_t *)result;
  uint64_t v11 = (void *)*a2;
  char v29 = a2 + 1;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v22 = a6 * a5 * a9 * a10;
    do
    {
      uint64_t v12 = v11[5];
      if (v12)
      {
        unint64_t v13 = *((unsigned __int8 *)v11 + 34);
        v34[0] = a11 / v13;
        v34[1] = v13;
        unint64_t result = std::function<L2Request ()(WorkUnitShape const&,unsigned long,unsigned long,unsigned long,unsigned long,ZinIrHalParameters const&)>::operator()(a3, (uint64_t)v34, a5, a6, a5, a8);
        unint64_t v14 = *(void *)(a4 + 424);
        if (v14)
        {
          unint64_t v15 = 0;
          uint64_t v16 = 0;
          uint64_t v17 = v22 * v12;
          uint64_t v18 = *v23;
          do
          {
            unint64_t result = ZinMirBankConflictOptimizer::GetL2Requests(v30, v31, v15 % v14, v14);
            *(float *)(v18 + 4 * v16) = *(float *)(v18 + 4 * v16) + (float)(v17 * result * v32);
            ++v16;
            v15 += v33;
          }
          while (v14 != v16);
        }
      }
      int v19 = (void *)v11[1];
      if (v19)
      {
        do
        {
          BOOL v20 = v19;
          int v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          BOOL v20 = (void *)v11[2];
          BOOL v21 = *v20 == (void)v11;
          uint64_t v11 = v20;
        }
        while (!v21);
      }
      uint64_t v11 = v20;
    }
    while (v20 != v29);
  }
  return result;
}

uint64_t std::function<L2Request ()(WorkUnitShape const&,unsigned long,unsigned long,unsigned long,unsigned long,ZinIrHalParameters const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a3;
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  uint64_t v8 = a6;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, a2, &v11, &v10, &v9, &v8);
}

unint64_t ZinMirBankConflictOptimizer::ComputeCostOfL2WriteBack(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, unint64_t a10)
{
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  if (ZinTensorFormatGetSizeInBytes(a8, &v30)
    || (unint64_t result = ZinTensorFormatGetSizeInBytes(a9, &v29), result))
  {
    ZinAssertImpl("Error in getting tensor format size in bytes", a1, a5, a3, a6, a7);
  }
  unint64_t v13 = a2 + 1;
  unint64_t v14 = (void *)*a2;
  long long v27 = v13;
  if (v14 != v13)
  {
    do
    {
      if (v14[5])
      {
        unint64_t v15 = *((unsigned __int8 *)v14 + 34);
        v28[0] = a10 / v15;
        v28[1] = v15;
        unint64_t result = std::function<L2Request ()(WorkUnitShape const&,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,ZinIrHalParameters const&)>::operator()(a3, (uint64_t)v28, a6, a7, a10, v30, v29);
        unint64_t v16 = *(void *)(a4 + 424);
        if (v16)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *a1;
          do
          {
            unint64_t result = ZinMirBankConflictOptimizer::GetL2Requests(0, 0, v17, v16);
            *(float *)(v18 + 4 * v17) = *(float *)(v18 + 4 * v17) + (float)0;
            ++v17;
          }
          while (v16 != v17);
        }
      }
      int v19 = (void *)v14[1];
      if (v19)
      {
        do
        {
          BOOL v20 = v19;
          int v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          BOOL v20 = (void *)v14[2];
          BOOL v21 = *v20 == (void)v14;
          unint64_t v14 = v20;
        }
        while (!v21);
      }
      unint64_t v14 = v20;
    }
    while (v20 != v27);
  }
  return result;
}

uint64_t std::function<L2Request ()(WorkUnitShape const&,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,ZinIrHalParameters const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a4;
  uint64_t v13 = a3;
  uint64_t v10 = a6;
  uint64_t v11 = a5;
  uint64_t v9 = a7;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v7 + 48))(v7, a2, &v13, &v12, &v11, &v10, &v9);
}

uint64_t ZinMemoryHeatMap::CreateMemoryHeatFile(ZinMemoryHeatMap *a1, ZinIrContext *a2)
{
  v100[20] = *MEMORY[0x263EF8340];
  uint64_t result = ZinMemoryHeatMap::HasAllocated(a1, a2);
  if (!result) {
    return result;
  }
  memset(v96, 0, sizeof(v96));
  int v97 = 1065353216;
  uint64_t v4 = *((void *)a1 + 125);
  if (*(void *)(v4 + 360) == *(void *)(v4 + 352)) {
    ZinAssertImpl("Must run scheduler first");
  }
  ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges((ZinIrOpLayer ***)(v4 + 352), v96);
  unsigned int v93 = 0;
  int v94 = 0;
  unint64_t v95 = 0;
  uint64_t v5 = *((void *)a1 + 125);
  uint64_t v7 = *(ZinOpLayerUtils ***)(v5 + 352);
  uint64_t v6 = *(ZinOpLayerUtils ***)(v5 + 360);
  if (v6 == v7) {
    ZinAssertImpl("Must run scheduler first");
  }
  do
  {
    uint64_t v8 = *v7;
    __p[0] = 0;
    __p[0] = (void *)(*(uint64_t (**)(ZinOpLayerUtils *, void, void))(*(void *)v8 + 32))(v8, 0, 0);
    if (ZinOpLayerUtils::IsConnectedToLiveOut(v8, v9)) {
      goto LABEL_27;
    }
    uint64_t v10 = *((void *)__p[0] + 13);
    if (v10)
    {
      uint64_t v11 = **(ZinIrSymbol ***)(v10 + 40);
      if (*((void *)v11 + 64)) {
        goto LABEL_27;
      }
    }
    else
    {
      if (MEMORY[0x200]) {
        goto LABEL_27;
      }
      uint64_t v11 = 0;
    }
    int MemType = ZinIrSymbol::GetMemType(v11);
    uint64_t v13 = __p[0];
    uint64_t v14 = **(void **)(*((void *)__p[0] + 13) + 40);
    uint64_t v15 = *(void *)(v14 + 24);
    uint64_t v16 = *(void *)(v14 + 184);
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    uint64_t v17 = v16 + v15;
    v98[0] = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v96, __p, (uint64_t)&std::piecewise_construct, &v92)+ 3);
    uint64_t v18 = v94;
    if ((unint64_t)v94 >= v95)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v94 - (unsigned char *)v93) >> 4);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0x555555555555555) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v95 - (void)v93) >> 4) > v21) {
        unint64_t v21 = 0x5555555555555556 * ((uint64_t)(v95 - (void)v93) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (void)v93) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v22 = 0x555555555555555;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22) {
        int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Group>>((uint64_t)&v95, v22);
      }
      else {
        int v23 = 0;
      }
      int v24 = (long long *)&v23[48 * v20];
      *(void *)int v24 = v13;
      *(long long *)((char *)v24 + 8) = v98[0];
      *((void *)v24 + 3) = v15;
      *((void *)v24 + 4) = v17;
      *((_DWORD *)v24 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = MemType;
      char v26 = (char *)v93;
      uint64_t v25 = v94;
      long long v27 = v24;
      if (v94 != v93)
      {
        do
        {
          long long v28 = *((_OWORD *)v25 - 3);
          long long v29 = *((_OWORD *)v25 - 2);
          *(long long *)((char *)v27 - 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(v25 - 20);
          *(v27 - 3) = v28;
          *(v27 - 2) = v29;
          v27 -= 3;
          v25 -= 48;
        }
        while (v25 != v26);
        uint64_t v25 = v26;
      }
      int v19 = v24 + 3;
      unsigned int v93 = v27;
      int v94 = (char *)(v24 + 3);
      unint64_t v95 = (unint64_t)&v23[48 * v22];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(void *)int v94 = v13;
      *(_OWORD *)(v18 + 8) = v98[0];
      *((void *)v18 + 3) = v15;
      *((void *)v18 + 4) = v17;
      *((_DWORD *)v18 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = MemType;
      int v19 = (long long *)(v18 + 48);
    }
    int v94 = (char *)v19;
LABEL_27:
    ++v7;
  }
  while (v7 != v6);
  uint64_t v30 = (long long *)v94;
  if (v93 != v94)
  {
    uint64_t v31 = MEMORY[0x263F8C310] + 64;
    v100[0] = MEMORY[0x263F8C310] + 64;
    uint64_t v32 = (void *)MEMORY[0x263F8C2B0];
    uint64_t v33 = *(void *)(MEMORY[0x263F8C2B0] + 16);
    *(void *)&v98[0] = *(void *)(MEMORY[0x263F8C2B0] + 8);
    *(void *)((char *)v98 + *(void *)(*(void *)&v98[0] - 24)) = v33;
    unint64_t v34 = (std::ios_base *)((char *)v98 + *(void *)(*(void *)&v98[0] - 24));
    std::ios_base::init(v34, (char *)v98 + 8);
    uint64_t v35 = MEMORY[0x263F8C310] + 24;
    v34[1].__vftable = 0;
    v34[1].__fmtflags_ = -1;
    *(void *)&v98[0] = v35;
    v100[0] = v31;
    MEMORY[0x21667CDD0]((char *)v98 + 8);
    std::ofstream::open();
    if (v99)
    {
      unint64_t v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v94 - (unsigned char *)v93) >> 4));
      if (v94 == v93) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      std::__introsort<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *,false>((unint64_t)v93, (long long *)v94, v37, 1);
      unint64_t v38 = (char *)v93;
      if (v93 != v94)
      {
        uint64_t v39 = 0;
        unint64_t v40 = 0;
        uint64_t v41 = 0;
        unint64_t v42 = 0;
        do
        {
          unint64_t v43 = *((void *)v38 + 4);
          unint64_t v44 = v43 - *((void *)v38 + 3);
          if (v43 <= v40) {
            unint64_t v45 = v40;
          }
          else {
            unint64_t v45 = *((void *)v38 + 4);
          }
          uint64_t v46 = v44 + v39;
          if (v43 <= v42) {
            unint64_t v43 = v42;
          }
          uint64_t v47 = v44 + v41;
          if (*((_DWORD *)v38 + 10))
          {
            unint64_t v40 = v45;
            uint64_t v39 = v46;
          }
          else
          {
            unint64_t v42 = v43;
            uint64_t v41 = v47;
          }
          v38 += 48;
        }
        while (v38 != v94);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"DRAM_PEAK(bss) = ", 17);
      std::string v48 = (void *)std::ostream::operator<<();
      int v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" B", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24)));
      unint64_t v50 = std::locale::use_facet((const std::locale *)&v92, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
      std::locale::~locale((std::locale *)&v92);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"DRAM_sum(no-reuse) = ", 21);
      long long v51 = (void *)std::ostream::operator<<();
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" B", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
      uint64_t v53 = std::locale::use_facet((const std::locale *)&v92, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
      std::locale::~locale((std::locale *)&v92);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"L2_PEAK = ", 10);
      long long v54 = (void *)std::ostream::operator<<();
      uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" B", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
      uint64_t v56 = std::locale::use_facet((const std::locale *)&v92, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
      std::locale::~locale((std::locale *)&v92);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"L2_sum(no-reuse) = ", 19);
      std::string v57 = (void *)std::ostream::operator<<();
      uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" B", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
      uint64_t v59 = std::locale::use_facet((const std::locale *)&v92, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
      std::locale::~locale((std::locale *)&v92);
      std::ostream::put();
      std::ostream::flush();
      std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
      uint64_t v60 = std::locale::use_facet((const std::locale *)&v92, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
      std::locale::~locale((std::locale *)&v92);
      std::ostream::put();
      std::ostream::flush();
      int v61 = (char *)v93;
      unsigned int v62 = v94;
      if (v93 != v94)
      {
        uint64_t v63 = 0;
        do
        {
          uint64_t v64 = *(void *)(*(void *)v61 + 104);
          if (!v64 || (int v65 = *(uint64_t **)(v64 + 40), v65 == *(uint64_t **)(v64 + 48))) {
            uint64_t v66 = 0;
          }
          else {
            uint64_t v66 = *v65;
          }
          if (*(char *)(v66 + 183) < 0) {
            std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(v66 + 160), *(void *)(v66 + 168));
          }
          else {
            std::string v92 = *(std::string *)(v66 + 160);
          }
          uint64_t v67 = *((void *)v61 + 1);
          uint64_t v68 = *((void *)v61 + 2);
          uint64_t v69 = *((void *)v61 + 3);
          uint64_t v70 = *((void *)v61 + 4);
          if (*((_DWORD *)v61 + 10)) {
            uint64_t v71 = "L2";
          }
          else {
            uint64_t v71 = "DRAM";
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v71);
          uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Symbol_Name=", 12);
          if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v73 = &v92;
          }
          else {
            uint64_t v73 = (std::string *)v92.__r_.__value_.__r.__words[0];
          }
          if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v92.__r_.__value_.__l.__size_;
          }
          long long v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)":", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Time_Span=[", 11);
          uint64_t v76 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)", ", 2);
          BOOL v77 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"] (", 3);
          uint64_t v78 = v68 - v67;
          int v79 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"):", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Space_Span=[", 12);
          int v80 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)", ", 2);
          uint64_t v81 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"] (", 3);
          uint64_t v82 = v70 - v69;
          int v83 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"):", 2);
          int v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Mem_Type=[", 10);
          if ((v91 & 0x80u) == 0) {
            unsigned int v85 = __p;
          }
          else {
            unsigned int v85 = (void **)__p[0];
          }
          if ((v91 & 0x80u) == 0) {
            uint64_t v86 = v91;
          }
          else {
            uint64_t v86 = (uint64_t)__p[1];
          }
          int v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"]\n", 2);
          if ((char)v91 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v92.__r_.__value_.__l.__data_);
          }
          v63 += v82 * v78;
          v61 += 48;
        }
        while (v61 != v62);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"TotalCost(sum(t_space * t_time))=", 33);
      uint64_t v32 = (void *)MEMORY[0x263F8C2B0];
      uint64_t v88 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(void *)(*v88 - 24)));
      uint64_t v89 = std::locale::use_facet((const std::locale *)&v92, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
      std::locale::~locale((std::locale *)&v92);
      std::ostream::put();
      std::ostream::flush();
      if (!std::filebuf::close()) {
        std::ios_base::clear((std::ios_base *)((char *)v98 + *(void *)(*(void *)&v98[0] - 24)), *(_DWORD *)((char *)&v98[2] + *(void *)(*(void *)&v98[0] - 24)) | 4);
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinMemoryHeatMap::CreateMemoryHeatFile();
    }
    *(void *)&v98[0] = *v32;
    *(void *)((char *)v98 + *(void *)(*(void *)&v98[0] - 24)) = v32[3];
    MEMORY[0x21667CDE0]((char *)v98 + 8);
    std::ostream::~ostream();
    MEMORY[0x21667D2B0](v100);
    uint64_t v30 = (long long *)v93;
  }
  if (v30)
  {
    int v94 = (char *)v30;
    operator delete(v30);
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v96);
}

void sub_21130F03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t ZinMemoryHeatMap::HasAllocated(ZinMemoryHeatMap *this, ZinIrContext *a2)
{
  uint64_t v2 = *((void *)this + 125);
  if (*(void *)(v2 + 360) == *(void *)(v2 + 352)) {
    ZinAssertImpl("Must run scheduler first", a2);
  }
  std::string __p = 0;
  __src = 0;
  uint64_t v22 = 0;
  ZinIrControlFlowGraph::GetLiveInLayers((ZinIrControlFlowGraph **)v2, (uint64_t)&v18);
  CFAllocatorRef v3 = v18;
  if (v18 != v19)
  {
    do
    {
      uint64_t v17 = v3[4];
      std::vector<ZinIrOpLayer *>::insert((uint64_t)&__p, (char *)__src, (char *)&v17);
      uint64_t v4 = (void *)v3[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = (void **)v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void **)v3[2];
          BOOL v6 = *v5 == v3;
          CFAllocatorRef v3 = v5;
        }
        while (!v6);
      }
      CFAllocatorRef v3 = v5;
    }
    while (v5 != v19);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v18, v19[0]);
  uint64_t v8 = *(void **)(v2 + 352);
  uint64_t v7 = *(void **)(v2 + 360);
  while (v8 != v7)
  {
    uint64_t v9 = *(void *)((*(uint64_t (**)(void, void, void))(*(void *)*v8 + 32))(*v8, 0, 0) + 104);
    if (!v9) {
      goto LABEL_21;
    }
    uint64_t v10 = *(void **)(v9 + 40);
    if (v10 == *(void **)(v9 + 48) || !*v10) {
      goto LABEL_21;
    }
    ++v8;
  }
  uint64_t v11 = __p;
  uint64_t v12 = __src;
  if (__p == __src)
  {
    uint64_t v15 = 1;
    if (__p) {
      goto LABEL_23;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v13 = *(void *)((*(uint64_t (**)(void, void, void))(*(void *)*v11 + 32))(*v11, 0, 0)
                      + 104);
      if (!v13) {
        break;
      }
      uint64_t v14 = *(void **)(v13 + 40);
      if (v14 == *(void **)(v13 + 48) || !*v14) {
        break;
      }
      if (++v11 == v12)
      {
        uint64_t v15 = 1;
        goto LABEL_22;
      }
    }
LABEL_21:
    uint64_t v15 = 0;
LABEL_22:
    uint64_t v11 = __p;
    if (__p)
    {
LABEL_23:
      __src = v11;
      operator delete(v11);
    }
  }
  return v15;
}

void sub_21130F2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinMemoryHeatMap::PrintPerSchedulePressure(uint64_t a1, int a2)
{
  v53[19] = *MEMORY[0x263EF8340];
  v47[1] = 0;
  char v48 = 0;
  v47[0] = 0;
  uint64_t v46 = v47;
  memset(v49, 0, sizeof(v49));
  int v50 = 1065353216;
  memset(v44, 0, sizeof(v44));
  int v45 = 1065353216;
  uint64_t v2 = *(void *)(a1 + 1000);
  if (*(void *)(v2 + 360) == *(void *)(v2 + 352)) {
    ZinAssertImpl("Must run scheduler first");
  }
  memset(v42, 0, sizeof(v42));
  int v43 = 1065353216;
  ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges((ZinIrOpLayer ***)(v2 + 352), v42);
  uint64_t v5 = *(ZinIrOpLayer ***)(v2 + 352);
  BOOL v6 = *(ZinIrOpLayer ***)(v2 + 360);
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v39.__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v7 + 32))(v7, 0, 0);
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)ZinIrTensor::GetRootTensor(v8);
    if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v44, &v39))
    {
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v44, &v39, &v39);
      uint64_t v9 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v42, &v39);
      if (v9)
      {
        if (ZinIrOpLayer::IsANELayer(v7) && (a2 != 0) != (*(_DWORD *)(*((void *)v7 + 33) + 1632) == 3))
        {
          uint64_t v10 = **(void **)(*(void *)(v39.__r_.__value_.__r.__words[0] + 104) + 40);
          v37[0] = *(_OWORD *)(v9 + 3);
          ZinIrMemoryPressureAnalyzer::AddTensorAllocation((ZinIrMemoryPressureAnalyzer *)&v46, *(void *)(v10 + 184), (const ZinLiveRange *)v37, (const ZinIrTensor *)v39.__r_.__value_.__l.__data_);
        }
      }
    }
    ++v5;
  }
  ZinIrCompilerParameters::ZinIrCompilerParameters(&v39, (const ZinIrCompilerParameters *)(a1 + 176));
  Hal = ZinIrTarget::GetHal(v11, *(ZinIrTarget **)(a1 + 160));
  uint64_t v13 = (const ZinIrHalParameters *)(*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  ZinIrHalParameters::ZinIrHalParameters((ZinIrHalParameters *)v37, v13);
  uint64_t v14 = MEMORY[0x263F8C310] + 64;
  v53[0] = MEMORY[0x263F8C310] + 64;
  uint64_t v15 = (uint64_t *)MEMORY[0x263F8C2B0];
  uint64_t v16 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v51 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *(void *)((char *)&v52[-1] + *(void *)(v51 - 24)) = v16;
  uint64_t v17 = (std::ios_base *)((char *)&v52[-1] + *(void *)(v51 - 24));
  std::ios_base::init(v17, v52);
  uint64_t v18 = MEMORY[0x263F8C310] + 24;
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  uint64_t v51 = v18;
  v53[0] = v14;
  MEMORY[0x21667CDD0](v52);
  if (a2 == 1) {
    int v19 = "dram";
  }
  else {
    int v19 = "l2";
  }
  std::string::basic_string[abi:ne180100]<0>(v35, v19);
  if ((v41 & 0x80u) == 0) {
    size_t v20 = v41;
  }
  else {
    size_t v20 = v40[1];
  }
  unint64_t v21 = &v31;
  std::string::basic_string[abi:ne180100]((uint64_t)&v31, v20 + 1);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if (v20)
  {
    if ((v41 & 0x80u) == 0) {
      uint64_t v22 = v40;
    }
    else {
      uint64_t v22 = (void *)v40[0];
    }
    memmove(v21, v22, v20);
  }
  *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 46;
  if ((v36 & 0x80u) == 0) {
    int v23 = v35;
  }
  else {
    int v23 = (void **)v35[0];
  }
  if ((v36 & 0x80u) == 0) {
    std::string::size_type v24 = v36;
  }
  else {
    std::string::size_type v24 = (std::string::size_type)v35[1];
  }
  uint64_t v25 = std::string::append(&v31, (const std::string::value_type *)v23, v24);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  long long v27 = std::string::append(&v32, ".per_sched_pressure.txt", 0x17uLL);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  std::string::size_type v34 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  std::ofstream::open();
  if (v52[15])
  {
    ZinIrMemoryPressureAnalyzer::GetDebugString((ZinIrMemoryPressureAnalyzer *)&v46, v38, &v32);
    long long v29 = (v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v32
        : (std::string *)v32.__r_.__value_.__r.__words[0];
    uint64_t v30 = (v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v32.__r_.__value_.__r.__words[2])
        : v32.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)v29, v30);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)&v52[-1] + *(void *)(v51 - 24)), *(_DWORD *)((char *)&v52[3] + *(void *)(v51 - 24)) | 4);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  if ((char)v36 < 0) {
    operator delete(v35[0]);
  }
  uint64_t v51 = *v15;
  *(void *)((char *)&v52[-1] + *(void *)(v51 - 24)) = v15[3];
  MEMORY[0x21667CDE0](v52);
  std::ostream::~ostream();
  MEMORY[0x21667D2B0](v53);
  ZinIrHalParameters::~ZinIrHalParameters((ZinIrHalParameters *)v37);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v39);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v42);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v44);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v49);
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)&v46, v47[0]);
}

void sub_21130F8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,...)
{
  va_start(va, a24);
  if (a11 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  std::ofstream::~ofstream(&STACK[0xC80]);
  ZinIrHalParameters::~ZinIrHalParameters((ZinIrHalParameters *)va);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&STACK[0x8C8]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0xBD0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0xC00]);
  ZinIrMemoryPressureAnalyzer::~ZinIrMemoryPressureAnalyzer((ZinIrMemoryPressureAnalyzer *)&STACK[0xC30]);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((void *)a2 - 2) - *((void *)a2 - 3) > *(void *)(v10 + 32) - *(void *)(v10 + 24))
                {
                  *(_OWORD *)uint64_t v148 = *(_OWORD *)(v10 + 16);
                  *(_OWORD *)&v148[16] = *(_OWORD *)(v10 + 32);
                  long long v139 = *(_OWORD *)v10;
                  long long v60 = *(a2 - 3);
                  long long v61 = *(a2 - 2);
                  *(_OWORD *)(v10 + 28) = *(long long *)((char *)a2 - 20);
                  *(_OWORD *)unint64_t v10 = v60;
                  *(_OWORD *)(v10 + 16) = v61;
                  *(long long *)((char *)a2 - 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)&v148[12];
                  *(a2 - 3) = v139;
                  *(a2 - 2) = *(_OWORD *)v148;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((long long *)v10, (long long *)(v10 + 48), a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(v10, v10 + 48, v10 + 96, (uint64_t)(a2 - 3));
                break;
              case 5uLL:
                unsigned int v62 = (long long *)(v10 + 48);
                uint64_t v63 = (long long *)(v10 + 96);
                uint64_t v64 = (long long *)(v10 + 144);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(v10, v10 + 48, v10 + 96, v10 + 144);
                if (*((void *)a2 - 2) - *((void *)a2 - 3) > *(void *)(v10 + 176) - *(void *)(v10 + 168))
                {
                  *(_OWORD *)uint64_t v149 = *(_OWORD *)(v10 + 160);
                  *(_OWORD *)&v149[16] = *(_OWORD *)(v10 + 176);
                  long long v65 = *v64;
                  long long v67 = *(a2 - 3);
                  long long v66 = *(a2 - 2);
                  *(_OWORD *)(v10 + 172) = *(long long *)((char *)a2 - 20);
                  *uint64_t v64 = v67;
                  *(_OWORD *)(v10 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v66;
                  *(long long *)((char *)a2 - 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)&v149[12];
                  *(a2 - 3) = v65;
                  *(a2 - 2) = *(_OWORD *)v149;
                  if (*(void *)(v10 + 176) - *(void *)(v10 + 168) > *(void *)(v10 + 128) - *(void *)(v10 + 120))
                  {
                    long long v68 = *v63;
                    *(_OWORD *)uint64_t v150 = *(_OWORD *)(v10 + 112);
                    *(_OWORD *)&v150[16] = *(_OWORD *)(v10 + 128);
                    long long v69 = *(_OWORD *)(v10 + 160);
                    long long *v63 = *v64;
                    *(_OWORD *)(v10 + 112) = v69;
                    *(_OWORD *)(v10 + 124) = *(_OWORD *)(v10 + 172);
                    *uint64_t v64 = v68;
                    *(_OWORD *)(v10 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)v150;
                    *(_OWORD *)(v10 + 172) = *(_OWORD *)&v150[12];
                    if (*(void *)(v10 + 128) - *(void *)(v10 + 120) > *(void *)(v10 + 80) - *(void *)(v10 + 72))
                    {
                      long long v70 = *v62;
                      *(_OWORD *)uint64_t v151 = *(_OWORD *)(v10 + 64);
                      *(_OWORD *)&v151[16] = *(_OWORD *)(v10 + 80);
                      long long v71 = *(_OWORD *)(v10 + 112);
                      long long *v62 = *v63;
                      *(_OWORD *)(v10 + 64) = v71;
                      *(_OWORD *)(v10 + 76) = *(_OWORD *)(v10 + 124);
                      long long *v63 = v70;
                      *(_OWORD *)(v10 + 112) = *(_OWORD *)v151;
                      *(_OWORD *)(v10 + 124) = *(_OWORD *)&v151[12];
                      if (*(void *)(v10 + 80) - *(void *)(v10 + 72) > *(void *)(v10 + 32) - *(void *)(v10 + 24))
                      {
                        *(_OWORD *)BOOL v152 = *(_OWORD *)(v10 + 16);
                        *(_OWORD *)&v152[16] = *(_OWORD *)(v10 + 32);
                        long long v140 = *(_OWORD *)v10;
                        long long v72 = *(_OWORD *)(v10 + 64);
                        *(_OWORD *)unint64_t v10 = *v62;
                        *(_OWORD *)(v10 + 16) = v72;
                        *(_OWORD *)(v10 + 28) = *(_OWORD *)(v10 + 76);
                        long long *v62 = v140;
                        *(_OWORD *)(v10 + 64) = *(_OWORD *)v152;
                        *(_OWORD *)(v10 + 76) = *(_OWORD *)&v152[12];
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            uint64_t v73 = (long long *)(v10 + 48);
            BOOL v75 = (long long *)v10 == a2 || v73 == a2;
            if (a4)
            {
              if (!v75)
              {
                uint64_t v76 = 0;
                unint64_t v77 = v10;
                do
                {
                  uint64_t v78 = v73;
                  uint64_t v80 = *(void *)(v77 + 72);
                  uint64_t v79 = *(void *)(v77 + 80);
                  if ((unint64_t)(v79 - v80) > *(void *)(v77 + 32) - *(void *)(v77 + 24))
                  {
                    uint64_t v153 = *((void *)v78 + 2);
                    long long v141 = *v78;
                    int v81 = *(_DWORD *)(v77 + 88);
                    uint64_t v82 = v76;
                    while (1)
                    {
                      int v83 = (_OWORD *)(v10 + v82);
                      long long v84 = *(_OWORD *)(v10 + v82 + 16);
                      v83[3] = *(_OWORD *)(v10 + v82);
                      v83[4] = v84;
                      *(_OWORD *)((char *)v83 + 76) = *(_OWORD *)(v10 + v82 + 28);
                      if (!v82) {
                        break;
                      }
                      v82 -= 48;
                      if ((unint64_t)(v79 - v80) <= *((void *)v83 - 2) - *((void *)v83 - 3))
                      {
                        uint64_t v85 = v10 + v82 + 48;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v85 = v10;
LABEL_84:
                    *(_OWORD *)uint64_t v85 = v141;
                    *(void *)(v85 + 16) = v153;
                    *(void *)(v85 + 24) = v80;
                    *(void *)(v85 + 32) = v79;
                    *(_DWORD *)(v85 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v81;
                  }
                  uint64_t v73 = v78 + 3;
                  v76 += 48;
                  unint64_t v77 = (unint64_t)v78;
                }
                while (v78 + 3 != a2);
              }
            }
            else if (!v75)
            {
              do
              {
                unint64_t v122 = (unint64_t)v73;
                uint64_t v124 = *(void *)(a1 + 72);
                uint64_t v123 = *(void *)(a1 + 80);
                if ((unint64_t)(v123 - v124) > *(void *)(a1 + 32) - *(void *)(a1 + 24))
                {
                  uint64_t v156 = *(void *)(v122 + 16);
                  long long v144 = *(_OWORD *)v122;
                  uint64_t v125 = *(void *)(a1 + 88);
                  unint64_t v126 = v122;
                  do
                  {
                    long long v127 = *(_OWORD *)(v126 - 32);
                    *(_OWORD *)unint64_t v126 = *(_OWORD *)(v126 - 48);
                    *(_OWORD *)(v126 + 16) = v127;
                    *(_OWORD *)(v126 + 28) = *(_OWORD *)(v126 - 20);
                    uint64_t v129 = *(void *)(v126 - 72);
                    uint64_t v128 = *(void *)(v126 - 64);
                    v126 -= 48;
                  }
                  while (v123 - v124 > (unint64_t)(v128 - v129));
                  *(_OWORD *)unint64_t v126 = v144;
                  *(void *)(v126 + 16) = v156;
                  *(void *)(v126 + 24) = v124;
                  *(void *)(v126 + 32) = v123;
                  *(_DWORD *)(v126 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v125;
                }
                uint64_t v73 = (long long *)(v122 + 48);
                a1 = v122;
              }
              while ((long long *)(v122 + 48) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)v10 != a2)
            {
              int64_t v86 = (v12 - 2) >> 1;
              int64_t v87 = v86;
              do
              {
                int64_t v88 = v87;
                if (v86 >= v87)
                {
                  uint64_t v89 = (2 * v87) | 1;
                  unint64_t v90 = v10 + 48 * v89;
                  if (2 * v88 + 2 < (uint64_t)v12)
                  {
                    BOOL v91 = *(void *)(v10 + 48 * v89 + 32) - *(void *)(v10 + 48 * v89 + 24) > *(void *)(v90 + 80)
                                                                                              - *(void *)(v90 + 72);
                    v90 += 48 * v91;
                    if (v91) {
                      uint64_t v89 = 2 * v88 + 2;
                    }
                  }
                  uint64_t v93 = *(void *)(v10 + 48 * v88 + 24);
                  uint64_t v92 = *(void *)(v10 + 48 * v88 + 32);
                  if (*(void *)(v90 + 32) - *(void *)(v90 + 24) <= (unint64_t)(v92 - v93))
                  {
                    unint64_t v94 = v10 + 48 * v88;
                    uint64_t v154 = *(void *)(v94 + 16);
                    long long v142 = *(_OWORD *)v94;
                    int v95 = *(_DWORD *)(v94 + 40);
                    do
                    {
                      BOOL v96 = (_OWORD *)v94;
                      unint64_t v94 = v90;
                      long long v97 = *(_OWORD *)v90;
                      long long v98 = *(_OWORD *)(v90 + 16);
                      *(_OWORD *)((char *)v96 + 28) = *(_OWORD *)(v90 + 28);
                      *BOOL v96 = v97;
                      v96[1] = v98;
                      if (v86 < v89) {
                        break;
                      }
                      uint64_t v99 = (2 * v89) | 1;
                      unint64_t v90 = v10 + 48 * v99;
                      uint64_t v100 = 2 * v89 + 2;
                      if (v100 < (uint64_t)v12)
                      {
                        BOOL v91 = *(void *)(v10 + 48 * v99 + 32) - *(void *)(v10 + 48 * v99 + 24) > *(void *)(v90 + 80) - *(void *)(v90 + 72);
                        v90 += 48 * v91;
                        if (v91) {
                          uint64_t v99 = v100;
                        }
                      }
                      uint64_t v89 = v99;
                    }
                    while (*(void *)(v90 + 32) - *(void *)(v90 + 24) <= (unint64_t)(v92 - v93));
                    *(_OWORD *)unint64_t v94 = v142;
                    *(void *)(v94 + 16) = v154;
                    *(void *)(v94 + 24) = v93;
                    *(void *)(v94 + 32) = v92;
                    *(_DWORD *)(v94 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v95;
                  }
                }
                int64_t v87 = v88 - 1;
              }
              while (v88);
              int64_t v101 = v11 / 0x30uLL;
              do
              {
                uint64_t v102 = 0;
                *(_OWORD *)uint64_t v155 = *(_OWORD *)(v10 + 16);
                *(_OWORD *)&v155[16] = *(_OWORD *)(v10 + 32);
                long long v143 = *(_OWORD *)v10;
                uint64_t v103 = (_OWORD *)v10;
                do
                {
                  uint64_t v104 = v102 + 1;
                  uint64_t v105 = &v103[3 * v102 + 3];
                  uint64_t v106 = (2 * v102) | 1;
                  uint64_t v107 = 2 * v102 + 2;
                  if (v107 < v101)
                  {
                    unint64_t v108 = *(void *)&v103[3 * v104 + 2] - *((void *)&v103[3 * v104 + 1] + 1);
                    unint64_t v109 = *((void *)v105 + 10) - *((void *)v105 + 9);
                    v105 += 3 * (v108 > v109);
                    if (v108 > v109) {
                      uint64_t v106 = v107;
                    }
                  }
                  long long v110 = *v105;
                  long long v111 = v105[1];
                  *(_OWORD *)((char *)v103 + 28) = *(long long *)((char *)v105 + 28);
                  *uint64_t v103 = v110;
                  v103[1] = v111;
                  uint64_t v103 = v105;
                  uint64_t v102 = v106;
                }
                while (v106 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
                a2 -= 3;
                if (v105 == a2)
                {
                  *(long long *)((char *)v105 + 28) = *(_OWORD *)&v155[12];
                  long long *v105 = v143;
                  v105[1] = *(_OWORD *)v155;
                }
                else
                {
                  long long v112 = *a2;
                  long long v113 = a2[1];
                  *(long long *)((char *)v105 + 28) = *(long long *)((char *)a2 + 28);
                  long long *v105 = v112;
                  v105[1] = v113;
                  *(long long *)((char *)a2 + 28) = *(_OWORD *)&v155[12];
                  *a2 = v143;
                  a2[1] = *(_OWORD *)v155;
                  uint64_t v114 = (uint64_t)v105 - v10 + 48;
                  if (v114 >= 49)
                  {
                    unint64_t v115 = (v114 / 0x30uLL - 2) >> 1;
                    uint64_t v117 = *((void *)v105 + 3);
                    uint64_t v116 = *((void *)v105 + 4);
                    if (*(void *)(v10 + 48 * v115 + 32) - *(void *)(v10 + 48 * v115 + 24) > (unint64_t)(v116 - v117))
                    {
                      uint64_t v135 = *((void *)v105 + 2);
                      long long v132 = *v105;
                      int v118 = *((_DWORD *)v105 + 10);
                      do
                      {
                        uint64_t v119 = v105;
                        uint64_t v105 = (long long *)(v10 + 48 * v115);
                        long long v120 = *v105;
                        long long v121 = v105[1];
                        *(long long *)((char *)v119 + 28) = *(long long *)((char *)v105 + 28);
                        long long *v119 = v120;
                        v119[1] = v121;
                        if (!v115) {
                          break;
                        }
                        unint64_t v115 = (v115 - 1) >> 1;
                      }
                      while (*(void *)(v10 + 48 * v115 + 32) - *(void *)(v10 + 48 * v115 + 24) > (unint64_t)(v116 - v117));
                      long long *v105 = v132;
                      *((void *)v105 + 2) = v135;
                      *((void *)v105 + 3) = v117;
                      *((void *)v105 + 4) = v116;
                      *((_DWORD *)v105 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v118;
                    }
                  }
                }
                BOOL v91 = v101-- <= 2;
              }
              while (!v91);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 48 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((long long *)a1, (long long *)(a1 + 48 * (v12 >> 1)), a2 - 3);
            uint64_t v15 = 3 * v13;
            uint64_t v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((long long *)(a1 + 48), v16, a2 - 6);
            uint64_t v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((long long *)(a1 + 96), v17, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(v16, v14, v17);
            *(_OWORD *)uint64_t v145 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v145[16] = *(_OWORD *)(a1 + 32);
            long long v136 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 28);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 28) = v18;
            *(long long *)((char *)v14 + 28) = *(_OWORD *)&v145[12];
            *uint64_t v14 = v136;
            v14[1] = *(_OWORD *)v145;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((long long *)(a1 + 48 * (v12 >> 1)), (long long *)a1, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          uint64_t v21 = *(void *)(a1 + 24);
          uint64_t v20 = *(void *)(a1 + 32);
          unint64_t v22 = v20 - v21;
          if (*(void *)(a1 - 16) - *(void *)(a1 - 24) > (unint64_t)(v20 - v21)) {
            goto LABEL_12;
          }
          uint64_t v134 = *(void *)(a1 + 16);
          long long v131 = *(_OWORD *)a1;
          if (v22 <= *((void *)a2 - 2) - *((void *)a2 - 3))
          {
            unint64_t v45 = a1 + 48;
            do
            {
              unint64_t v10 = v45;
              if (v45 >= (unint64_t)a2) {
                break;
              }
              unint64_t v46 = *(void *)(v45 + 32) - *(void *)(v45 + 24);
              v45 += 48;
            }
            while (v22 <= v46);
          }
          else
          {
            unint64_t v43 = a1;
            do
            {
              unint64_t v10 = v43 + 48;
              unint64_t v44 = *(void *)(v43 + 80) - *(void *)(v43 + 72);
              v43 += 48;
            }
            while (v22 <= v44);
          }
          uint64_t v47 = a2;
          if (v10 < (unint64_t)a2)
          {
            char v48 = a2;
            do
            {
              uint64_t v47 = v48 - 3;
              unint64_t v49 = *((void *)v48 - 2) - *((void *)v48 - 3);
              v48 -= 3;
            }
            while (v22 > v49);
          }
          uint64_t v50 = *(void *)(a1 + 40);
          while (v10 < (unint64_t)v47)
          {
            *(_OWORD *)uint64_t v147 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v147[16] = *(_OWORD *)(v10 + 32);
            long long v138 = *(_OWORD *)v10;
            long long v51 = *v47;
            long long v52 = v47[1];
            *(_OWORD *)(v10 + 28) = *(long long *)((char *)v47 + 28);
            *(_OWORD *)unint64_t v10 = v51;
            *(_OWORD *)(v10 + 16) = v52;
            *(long long *)((char *)v47 + 28) = *(_OWORD *)&v147[12];
            long long *v47 = v138;
            v47[1] = *(_OWORD *)v147;
            do
            {
              uint64_t v54 = *(void *)(v10 + 72);
              uint64_t v53 = *(void *)(v10 + 80);
              v10 += 48;
            }
            while (v22 <= v53 - v54);
            do
            {
              uint64_t v56 = *((void *)v47 - 3);
              uint64_t v55 = *((void *)v47 - 2);
              v47 -= 3;
            }
            while (v22 > v55 - v56);
          }
          std::string v57 = (long long *)(v10 - 48);
          BOOL v4 = v10 - 48 >= a1;
          BOOL v5 = v10 - 48 == a1;
          if (v10 - 48 != a1)
          {
            long long v58 = *v57;
            long long v59 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(v10 - 20);
            *(_OWORD *)a1 = v58;
            *(_OWORD *)(a1 + 16) = v59;
          }
          a4 = 0;
          *(void *)(v10 - 32) = v134;
          long long *v57 = v131;
          *(void *)(v10 - 24) = v21;
          *(void *)(v10 - 16) = v20;
          *(_DWORD *)(v10 - 8) = v50;
        }
        uint64_t v21 = *(void *)(a1 + 24);
        uint64_t v20 = *(void *)(a1 + 32);
        unint64_t v22 = v20 - v21;
LABEL_12:
        uint64_t v23 = 0;
        uint64_t v133 = *(void *)(a1 + 16);
        long long v130 = *(_OWORD *)a1;
        uint64_t v24 = *(void *)(a1 + 40);
        do
        {
          unint64_t v25 = *(void *)(a1 + v23 + 80) - *(void *)(a1 + v23 + 72);
          v23 += 48;
        }
        while (v25 > v22);
        unint64_t v26 = a1 + v23;
        long long v27 = a2;
        if (v23 == 48)
        {
          uint64_t v30 = a2;
          while (v26 < (unint64_t)v30)
          {
            long long v28 = v30 - 3;
            unint64_t v31 = *((void *)v30 - 2) - *((void *)v30 - 3);
            v30 -= 3;
            if (v31 > v22) {
              goto LABEL_22;
            }
          }
          long long v28 = v30;
        }
        else
        {
          do
          {
            long long v28 = v27 - 3;
            unint64_t v29 = *((void *)v27 - 2) - *((void *)v27 - 3);
            v27 -= 3;
          }
          while (v29 <= v22);
        }
LABEL_22:
        unint64_t v10 = v26;
        if (v26 < (unint64_t)v28)
        {
          std::string v32 = v28;
          do
          {
            *(_OWORD *)uint64_t v146 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)&v146[16] = *(_OWORD *)(v10 + 32);
            long long v137 = *(_OWORD *)v10;
            long long v33 = *v32;
            long long v34 = v32[1];
            *(_OWORD *)(v10 + 28) = *(long long *)((char *)v32 + 28);
            *(_OWORD *)unint64_t v10 = v33;
            *(_OWORD *)(v10 + 16) = v34;
            *(long long *)((char *)v32 + 28) = *(_OWORD *)&v146[12];
            *std::string v32 = v137;
            v32[1] = *(_OWORD *)v146;
            do
            {
              uint64_t v36 = *(void *)(v10 + 72);
              uint64_t v35 = *(void *)(v10 + 80);
              v10 += 48;
            }
            while (v35 - v36 > v22);
            do
            {
              uint64_t v38 = *((void *)v32 - 3);
              uint64_t v37 = *((void *)v32 - 2);
              v32 -= 3;
            }
            while (v37 - v38 <= v22);
          }
          while (v10 < (unint64_t)v32);
        }
        std::string v39 = (long long *)(v10 - 48);
        if (v10 - 48 != a1)
        {
          long long v40 = *v39;
          long long v41 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(v10 - 20);
          *(_OWORD *)a1 = v40;
          *(_OWORD *)(a1 + 16) = v41;
        }
        *(void *)(v10 - 32) = v133;
        long long *v39 = v130;
        *(void *)(v10 - 24) = v21;
        *(void *)(v10 - 16) = v20;
        *(_DWORD *)(v10 - 8) = v24;
        if (v26 >= (unint64_t)v28) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *,false>(a1, v10 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(a1, v10 - 48);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v42) {
        goto LABEL_33;
      }
    }
    a2 = (long long *)(v10 - 48);
    if (!v42) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(long long *a1, long long *a2, long long *a3)
{
  unint64_t v3 = *((void *)a2 + 4) - *((void *)a2 + 3);
  unint64_t v4 = *((void *)a3 + 4) - *((void *)a3 + 3);
  if (v3 <= *((void *)a1 + 4) - *((void *)a1 + 3))
  {
    if (v4 > v3)
    {
      long long v9 = *a2;
      *(_OWORD *)uint64_t v21 = a2[1];
      *(_OWORD *)&v21[16] = a2[2];
      long long v10 = *(long long *)((char *)a3 + 28);
      long long v11 = a3[1];
      *a2 = *a3;
      a2[1] = v11;
      *(long long *)((char *)a2 + 28) = v10;
      *a3 = v9;
      a3[1] = *(_OWORD *)v21;
      __n128 result = *(__n128 *)&v21[12];
      *(long long *)((char *)a3 + 28) = *(_OWORD *)&v21[12];
      if (*((void *)a2 + 4) - *((void *)a2 + 3) > *((void *)a1 + 4) - *((void *)a1 + 3))
      {
        long long v13 = *a1;
        *(_OWORD *)unint64_t v22 = a1[1];
        *(_OWORD *)&v22[16] = a1[2];
        long long v14 = *(long long *)((char *)a2 + 28);
        long long v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        *(long long *)((char *)a1 + 28) = v14;
        *a2 = v13;
        a2[1] = *(_OWORD *)v22;
        __n128 result = *(__n128 *)&v22[12];
        *(long long *)((char *)a2 + 28) = *(_OWORD *)&v22[12];
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      long long v16 = *a1;
      *(_OWORD *)uint64_t v23 = a1[1];
      *(_OWORD *)&v23[16] = a1[2];
      long long v17 = *(long long *)((char *)a2 + 28);
      long long v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      *(long long *)((char *)a1 + 28) = v17;
      *a2 = v16;
      a2[1] = *(_OWORD *)v23;
      __n128 result = *(__n128 *)&v23[12];
      *(long long *)((char *)a2 + 28) = *(_OWORD *)&v23[12];
      if (*((void *)a3 + 4) - *((void *)a3 + 3) <= *((void *)a2 + 4) - *((void *)a2 + 3)) {
        return result;
      }
      long long v5 = a2[1];
      long long v6 = *a2;
      *(_DWORD *)uint64_t v24 = HIDWORD(v5);
      *(_OWORD *)&v24[4] = a2[2];
      long long v19 = *(long long *)((char *)a3 + 28);
      long long v20 = a3[1];
      *a2 = *a3;
      a2[1] = v20;
      *(long long *)((char *)a2 + 28) = v19;
    }
    else
    {
      long long v5 = a1[1];
      long long v6 = *a1;
      *(_DWORD *)uint64_t v24 = HIDWORD(v5);
      *(_OWORD *)&v24[4] = a1[2];
      long long v7 = *(long long *)((char *)a3 + 28);
      long long v8 = a3[1];
      *a1 = *a3;
      a1[1] = v8;
      *(long long *)((char *)a1 + 28) = v7;
    }
    *a3 = v6;
    a3[1] = v5;
    __n128 result = *(__n128 *)v24;
    *(long long *)((char *)a3 + 28) = *(_OWORD *)v24;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 16) - *(void *)(a2 - 24) > *(void *)(a1 + 32) - *(void *)(a1 + 24))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)long long v33 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v33[16] = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a2 - 20);
        long long v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 28) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v33;
        *(_OWORD *)(a2 - 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)&v33[12];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      long long v20 = (long long *)(a1 + 48);
      uint64_t v21 = (long long *)(a1 + 96);
      unint64_t v22 = (long long *)(a1 + 144);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(a1, a1 + 48, a1 + 96, a1 + 144);
      if (*(void *)(a2 - 16) - *(void *)(a2 - 24) > *(void *)(a1 + 176) - *(void *)(a1 + 168))
      {
        long long v23 = *v22;
        *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 160);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 176);
        long long v24 = *(_OWORD *)(a2 - 20);
        long long v25 = *(_OWORD *)(a2 - 32);
        *unint64_t v22 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v25;
        *(_OWORD *)(a1 + 172) = v24;
        *(_OWORD *)(a2 - 48) = v23;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v35;
        *(_OWORD *)(a2 - 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)&v35[12];
        if (*(void *)(a1 + 176) - *(void *)(a1 + 168) > *(void *)(a1 + 128) - *(void *)(a1 + 120))
        {
          long long v26 = *v21;
          *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)&v36[16] = *(_OWORD *)(a1 + 128);
          long long v27 = *(_OWORD *)(a1 + 160);
          *uint64_t v21 = *v22;
          *(_OWORD *)(a1 + 112) = v27;
          *(_OWORD *)(a1 + 124) = *(_OWORD *)(a1 + 172);
          *unint64_t v22 = v26;
          *(_OWORD *)(a1 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)v36;
          *(_OWORD *)(a1 + 172) = *(_OWORD *)&v36[12];
          if (*(void *)(a1 + 128) - *(void *)(a1 + 120) > *(void *)(a1 + 80) - *(void *)(a1 + 72))
          {
            long long v28 = *v20;
            *(_OWORD *)uint64_t v37 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)&v37[16] = *(_OWORD *)(a1 + 80);
            long long v29 = *(_OWORD *)(a1 + 112);
            *long long v20 = *v21;
            *(_OWORD *)(a1 + 64) = v29;
            *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
            *uint64_t v21 = v28;
            *(_OWORD *)(a1 + 112) = *(_OWORD *)v37;
            *(_OWORD *)(a1 + 124) = *(_OWORD *)&v37[12];
            if (*(void *)(a1 + 80) - *(void *)(a1 + 72) > *(void *)(a1 + 32) - *(void *)(a1 + 24))
            {
              long long v30 = *(_OWORD *)a1;
              *(_OWORD *)uint64_t v38 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v38[16] = *(_OWORD *)(a1 + 32);
              long long v31 = *(_OWORD *)(a1 + 64);
              *(_OWORD *)a1 = *v20;
              *(_OWORD *)(a1 + 16) = v31;
              *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
              *long long v20 = v30;
              *(_OWORD *)(a1 + 64) = *(_OWORD *)v38;
              *(_OWORD *)(a1 + 76) = *(_OWORD *)&v38[12];
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96));
      uint64_t v10 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *(void *)(v10 + 24);
    uint64_t v13 = *(void *)(v10 + 32);
    if ((unint64_t)(v13 - v14) > *(void *)(v9 + 32) - *(void *)(v9 + 24))
    {
      long long v32 = *(_OWORD *)v10;
      uint64_t v34 = *(void *)(v10 + 16);
      int v15 = *(_DWORD *)(v10 + 40);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        long long v18 = *(_OWORD *)(a1 + v16 + 112);
        *(_OWORD *)(v17 + 144) = *(_OWORD *)(a1 + v16 + 96);
        *(_OWORD *)(v17 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v18;
        *(_OWORD *)(v17 + 172) = *(_OWORD *)(a1 + v16 + 124);
        if (v16 == -96) {
          break;
        }
        v16 -= 48;
        if ((unint64_t)(v13 - v14) <= *(void *)(v17 + 80) - *(void *)(v17 + 72))
        {
          uint64_t v19 = a1 + v16 + 144;
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v19 = v32;
      *(void *)(v19 + 16) = v34;
      *(void *)(v19 + 24) = v14;
      *(void *)(v19 + 32) = v13;
      *(_DWORD *)(v19 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v15;
      if (++v12 == 8) {
        return v10 + 48 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((long long *)a1, (long long *)a2, (long long *)a3).n128_u64[0];
  if (*(void *)(a4 + 32) - *(void *)(a4 + 24) > *(void *)(a3 + 32) - *(void *)(a3 + 24))
  {
    long long v9 = *(_OWORD *)a3;
    *(_OWORD *)long long v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v18[16] = *(_OWORD *)(a3 + 32);
    long long v10 = *(_OWORD *)(a4 + 28);
    long long v11 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 28) = v10;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v18;
    __n128 result = *(__n128 *)&v18[12];
    *(_OWORD *)(a4 + 28) = *(_OWORD *)&v18[12];
    if (*(void *)(a3 + 32) - *(void *)(a3 + 24) > *(void *)(a2 + 32) - *(void *)(a2 + 24))
    {
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
      long long v13 = *(_OWORD *)(a3 + 28);
      long long v14 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 28) = v13;
      *(_OWORD *)a3 = v12;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v19;
      __n128 result = *(__n128 *)&v19[12];
      *(_OWORD *)(a3 + 28) = *(_OWORD *)&v19[12];
      if (*(void *)(a2 + 32) - *(void *)(a2 + 24) > *(void *)(a1 + 32) - *(void *)(a1 + 24))
      {
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 + 28);
        long long v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 28) = v16;
        *(_OWORD *)a2 = v15;
        *(_OWORD *)(a2 + 16) = *(_OWORD *)v20;
        __n128 result = *(__n128 *)&v20[12];
        *(_OWORD *)(a2 + 28) = *(_OWORD *)&v20[12];
      }
    }
  }
  return result;
}

void ZinMemoryHeatMap::CreateMemoryHeatFile()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "reg-alloc log file creation is failed!\n", v0, 2u);
}

uint64_t ZinParseResampleUnit(const __CFDictionary *a1, void ***a2, CFArrayRef *a3)
{
  CFDictionaryRef v5 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (v5 && (CFDictionaryRef v6 = v5, v7 = CFGetTypeID(v5), v7 == CFDictionaryGetTypeID()))
  {
    uint64_t result = ZinParseTextureCommonUnit(v6, (ZinIrTextureUnitInfo *)a2, a3);
    if (result) {
      return result;
    }
    CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(v6, @"CoordinateTypeInfo");
    if (v9 && (v10 = v9, CFTypeID v11 = CFGetTypeID(v9), v11 == CFArrayGetTypeID()))
    {
      int Count = CFArrayGetCount(v10);
      if (Count < 1)
      {
        BOOL v71 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v71) {
          ZinParseResampleUnit(v71, v72, v73, v74, v75, v76, v77, v78);
        }
      }
      else
      {
        CFIndex v13 = 0;
        long long v14 = (int *)&value + 1;
        long long v15 = a2 + 22;
        uint64_t v103 = Count;
        long long v16 = @"Coordinate";
        CFArrayRef v104 = v10;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v13);
          if (!ValueAtIndex) {
            break;
          }
          CFDictionaryRef v18 = ValueAtIndex;
          CFTypeID v19 = CFGetTypeID(ValueAtIndex);
          if (v19 != CFDictionaryGetTypeID()) {
            break;
          }
          CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(v18, v16);
          CFStringRef v21 = v20;
          if (v20)
          {
            CFIndex v22 = v13;
            long long v23 = v14;
            long long v24 = v15;
            long long v25 = v16;
            CFTypeID v26 = CFGetTypeID(v20);
            BOOL v27 = v26 == CFStringGetTypeID();
            long long v16 = v25;
            long long v15 = v24;
            long long v14 = v23;
            CFIndex v13 = v22;
            CFArrayRef v10 = v104;
            if (!v27) {
              CFStringRef v21 = 0;
            }
          }
          if (ZinCFStringEquals(v21, @"Height"))
          {
            int v28 = 3;
          }
          else
          {
            if (!ZinCFStringEquals(v21, @"Width"))
            {
              BOOL v95 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v95) {
                ZinParseResampleUnit(v95, v96, v97, v98, v99, v100, v101, v102);
              }
              goto LABEL_80;
            }
            int v28 = 4;
          }
          LODWORD(value) = v28;
          CFStringRef v29 = (const __CFString *)CFDictionaryGetValue(v18, @"CoordinateType");
          if (!v29
            || (v30 = v29, CFTypeID v31 = CFGetTypeID(v29), v31 != CFStringGetTypeID())
            || (CFStringToZinIrCoordinateType(v30, v14) & 1) == 0)
          {
            BOOL v87 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v87) {
              ZinParseResampleUnit(v87, v88, v89, v90, v91, v92, v93, v94);
            }
LABEL_80:
            ZinIrUnitStatus::SetError(a3, @"InvalidCoordinateTypeInfo");
            goto LABEL_81;
          }
          long long v32 = a2[20];
          long long v33 = a2[21];
          if (v32 != v33)
          {
            uint64_t v34 = a2[20];
            while (*(_DWORD *)v34 != value)
            {
              if (++v34 == v33) {
                goto LABEL_24;
              }
            }
            BOOL v79 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v79) {
              ZinParseResampleUnit(v79, v80, v81, v82, v83, v84, v85, v86);
            }
            goto LABEL_80;
          }
LABEL_24:
          if ((unint64_t)v33 >= *v15)
          {
            uint64_t v36 = v33 - v32;
            if ((unint64_t)(v36 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v37 = *v15 - (void)v32;
            uint64_t v38 = v37 >> 2;
            if (v37 >> 2 <= (unint64_t)(v36 + 1)) {
              uint64_t v38 = v36 + 1;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v38;
            }
            if (v39) {
              long long v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v15, v39);
            }
            else {
              long long v40 = 0;
            }
            long long v41 = (void **)&v40[8 * v36];
            void *v41 = value;
            uint64_t v35 = v41 + 1;
            unint64_t v43 = a2[20];
            BOOL v42 = a2[21];
            if (v42 != v43)
            {
              do
              {
                unint64_t v44 = *--v42;
                *--long long v41 = v44;
              }
              while (v42 != v43);
              BOOL v42 = a2[20];
            }
            a2[20] = v41;
            a2[21] = v35;
            a2[22] = (void **)&v40[8 * v39];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            char *v33 = value;
            uint64_t v35 = v33 + 1;
          }
          a2[21] = v35;
          if (++v13 == v103) {
            goto LABEL_64;
          }
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinParseResampleUnit(v13);
        }
      }
LABEL_81:
      CFStringRef v45 = @"InvalidCoordinateTypeInfo";
    }
    else
    {
      uint64_t v47 = (unsigned int *)a2[20];
      char v48 = (unsigned int *)a2[21];
      unint64_t v46 = a2 + 20;
      if (v47 != v48)
      {
        unint64_t v49 = a2 + 22;
        uint64_t v50 = (uint64_t *)a2[21];
        do
        {
          uint64_t v51 = *v47;
          if ((unint64_t)v50 >= *v49)
          {
            uint64_t v52 = ((char *)v50 - (char *)*v46) >> 3;
            if ((unint64_t)(v52 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v53 = *v49 - (void)*v46;
            uint64_t v54 = v53 >> 2;
            if (v53 >> 2 <= (unint64_t)(v52 + 1)) {
              uint64_t v54 = v52 + 1;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v54;
            }
            if (v55) {
              uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 22), v55);
            }
            else {
              uint64_t v56 = 0;
            }
            std::string v57 = (uint64_t *)&v56[8 * v52];
            uint64_t *v57 = v51 | 0x100000000;
            uint64_t v50 = v57 + 1;
            long long v59 = a2[20];
            long long v58 = a2[21];
            if (v58 != v59)
            {
              do
              {
                uint64_t v60 = (uint64_t)*--v58;
                *--std::string v57 = v60;
              }
              while (v58 != v59);
              long long v58 = *v46;
            }
            a2[20] = (void **)v57;
            a2[21] = (void **)v50;
            a2[22] = (void **)&v56[8 * v55];
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            *v50++ = v51 | 0x100000000;
          }
          a2[21] = (void **)v50;
          v47 += 2;
        }
        while (v47 != v48);
      }
LABEL_64:
      value = (void *)CFDictionaryGetValue(v6, @"CoordinateMode");
      if (!CFDictionaryGetValueIfPresent(v6, @"CoordinateMode", (const void **)&value)
        || (CFTypeID v61 = CFGetTypeID(value), v61 == CFStringGetTypeID())
        && ZinCFStringEquals((const __CFString *)value, @"XY"))
      {
        uint64_t result = 0;
        *((_DWORD *)a2 + 46) = 0;
        return result;
      }
      CFTypeID v62 = CFGetTypeID(value);
      if (v62 == CFStringGetTypeID() && ZinCFStringEquals((const __CFString *)value, @"YX"))
      {
        uint64_t result = 0;
        *((_DWORD *)a2 + 46) = 1;
        return result;
      }
      BOOL v63 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v63) {
        ZinParseResampleUnit(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      CFStringRef v45 = @"InvalidWarpCoordinateMode";
    }
  }
  else
  {
    CFStringRef v45 = @"InvalidParamSyntax";
  }
  ZinIrUnitStatus::SetError(a3, v45);
  return 3;
}

void ZinParseResampleUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Resample coordinate type info array cannot be empty.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "ZinIrCoordinateTypeInfo dictionary has incorrect sampling information.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Duplicated coordinate type axis.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "ZinIrCoordinateTypeInfo dictionary has incorrect coordinate information.\n", a5, a6, a7, a8, 0);
}

void ZinParseResampleUnit(int a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Unable to parse coordinate type info at index #%d.\n", (uint8_t *)v1, 8u);
}

void ZinAssertImpl(const char *__format, ...)
{
  va_start(va, __format);
  uint64_t v3 = *MEMORY[0x263EF8340];
  vsnprintf(__str, 0x200uLL, __format, va);
  __str[511] = 0;
  exception = (ZinException *)__cxa_allocate_exception(0x98uLL);
  ZinException::ZinException(exception, __str);
}

void sub_211311108(_Unwind_Exception *exception_object)
{
}

void ZinIrTransformHistory::~ZinIrTransformHistory(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = this;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t ZinIrWeightBase::UpdateDescriptorForPartialTransform(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1)
  {
    uint64_t v4 = a1 + 3;
    CFDictionaryRef v5 = a1 + 8;
  }
  else
  {
    if (a4) {
      return 3;
    }
    uint64_t v4 = a1 + 2;
    CFDictionaryRef v5 = a1 + 7;
  }
  if (a3 < 0)
  {
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v15) {
      ZinIrWeightBase::UpdateDescriptorForPartialTransform(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    return 3;
  }
  if ((a3 ^ 0x7FFFFFFFFFFFFFFFLL) <= *v4)
  {
    BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v23) {
      ZinIrWeightBase::UpdateDescriptorForPartialTransform(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    return 3;
  }
  if ((unint64_t)(a3 + a2) > *v5)
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ZinIrWeightBase::UpdateDescriptorForPartialTransform(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 3;
  }
  uint64_t result = 0;
  *v4 += a3;
  *CFDictionaryRef v5 = a2;
  return result;
}

void ZinIrWeightBase::SetupMutableHistory(uint64_t a1, uint64_t a2, long long **a3)
{
  *(unsigned char *)(a2 + 152) = 1;
  BOOL v6 = (ZinIrTransformHistory *)(a1 + 160);
  uint64_t v7 = (uint64_t *)(a2 + 160);
  if (a2 != a1) {
    std::vector<std::shared_ptr<ZinIrTransform>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrTransform> const*,std::shared_ptr<ZinIrTransform> const*>((uint64_t)v7, *(uint64_t **)(a1 + 160), *(uint64_t **)(a1 + 168), (uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 4);
  }
  std::string::operator=((std::string *)(a2 + 184), (const std::string *)(a1 + 184));
  long long v8 = *(_OWORD *)(a1 + 208);
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 208) = v8;
  long long v9 = *(_OWORD *)(a1 + 260);
  long long v10 = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a2 + 248) = v10;
  *(_OWORD *)(a2 + 26std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v9;
  if (ZinIrTransformHistory::Size(v6))
  {
    ZinIrTransformHistory::Append(v7, a3);
  }
  else
  {
    uint64_t SourceFileInfo = ZinIrWeightBase::GetSourceFileInfo((ZinIrWeightBase *)a1);
    uint64_t v12 = SourceFileInfo;
    if (*(char *)(SourceFileInfo + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)SourceFileInfo, *(void *)(SourceFileInfo + 8));
    }
    else
    {
      long long v13 = *(_OWORD *)SourceFileInfo;
      v16.__r_.__value_.__r.__words[2] = *(void *)(SourceFileInfo + 16);
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v13;
    }
    long long v14 = *(_OWORD *)(v12 + 24);
    int v18 = *(_DWORD *)(v12 + 40);
    long long v17 = v14;
    memset(v15, 0, sizeof(v15));
    std::vector<std::shared_ptr<ZinIrTransform>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrTransform>*,std::shared_ptr<ZinIrTransform>*>(v15, *a3, a3[1], a3[1] - *a3);
    ZinIrTransformHistory::Init((uint64_t)v7, (uint64_t)&v16, v15, a1 + 56, *(_DWORD *)(a1 + 8));
    uint64_t v19 = (void **)v15;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v19);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2113113B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v19 - 56) = v18;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 56));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeightBase::GetSourceFileInfo(ZinIrWeightBase *this)
{
  uint64_t v2 = (ZinIrWeightBase *)((char *)this + 160);
  if (!ZinIrTransformHistory::Size((ZinIrWeightBase *)((char *)this + 160))) {
    return *((void *)this + 17) + 8;
  }

  return ZinIrTransformHistory::GetSourceFileInfo(v2);
}

uint64_t ZinIrWeightBase::GetAt<float>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 40))();
}

{
  uint64_t (*v2)(void);
  uint64_t vars8;

  (**(void (***)(uint64_t))a1)(a1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 136) + 40);

  return v2();
}

uint64_t ZinIrWeightBase::GetElemAt<float>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 48))();
}

uint64_t ZinIrWeightBase::GetAt<half>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 56))();
}

{
  uint64_t (*v2)(void);
  uint64_t vars8;

  (**(void (***)(uint64_t))a1)(a1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 136) + 56);

  return v2();
}

uint64_t ZinIrWeightBase::GetElemAt<half>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 64))();
}

uint64_t ZinIrWeightBase::GetAt<e4m3_t>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 88))();
}

{
  uint64_t (*v2)(void);
  uint64_t vars8;

  (**(void (***)(uint64_t))a1)(a1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 136) + 88);

  return v2();
}

uint64_t ZinIrWeightBase::GetElemAt<e4m3_t>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 96))();
}

uint64_t ZinIrWeightBase::GetAt<unsigned char>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 120))();
}

{
  uint64_t (*v2)(void);
  uint64_t vars8;

  (**(void (***)(uint64_t))a1)(a1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 136) + 120);

  return v2();
}

uint64_t ZinIrWeightBase::GetElemAt<unsigned char>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 128))();
}

uint64_t ZinIrWeightBase::GetAt<signed char>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 72))();
}

{
  uint64_t (*v2)(void);
  uint64_t vars8;

  (**(void (***)(uint64_t))a1)(a1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 136) + 72);

  return v2();
}

uint64_t ZinIrWeightBase::GetElemAt<signed char>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 80))();
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint1_at(*(ZinIrConstData **)(a1 + 136), a2) & 1;
}

uint64_t ZinIrConstData::uint1_at(ZinIrConstData *this, unint64_t a2)
{
  if (!(*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this)) {
    return ((*(unsigned int (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, a2 >> 3) >> (a2 & 7)) & 1;
  }
  uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120);

  return v4(this, a2);
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint1>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint1_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 1;
}

uint64_t ZinIrConstData::uint1_elem_at(ZinIrConstData *this, unint64_t a2)
{
  if (!(*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this)) {
    return ((*(unsigned int (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128))(this, a2 >> 3) >> (a2 & 7)) & 1;
  }
  uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128);

  return v4(this, a2);
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint2_at(*(ZinIrConstData **)(a1 + 136), a2) & 3;
}

uint64_t ZinIrConstData::uint2_at(ZinIrConstData *this, unint64_t a2)
{
  if (!(*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this)) {
    return ((*(unsigned int (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, a2 >> 2) >> (2 * (a2 & 3))) & 3;
  }
  uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120);

  return v4(this, a2);
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint2>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint2_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 3;
}

uint64_t ZinIrConstData::uint2_elem_at(ZinIrConstData *this, unint64_t a2)
{
  if (!(*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this)) {
    return ((*(unsigned int (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128))(this, a2 >> 2) >> (2 * (a2 & 3))) & 3;
  }
  uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128);

  return v4(this, a2);
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(uint64_t a1, uint64_t a2)
{
  return ZinIrConstData::uint3_at(*(ZinIrConstData **)(a1 + 136), a2) & 7;
}

uint64_t ZinIrConstData::uint3_at(ZinIrConstData *this, uint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this))
  {
    uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, uint64_t))(*(void *)this + 120);
    return v4(this, a2);
  }
  else
  {
    unint64_t v6 = (unint64_t)(3 * a2) >> 3;
    unsigned int v7 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, v6);
    switch(a2 & 7)
    {
      case 1:
        uint64_t v8 = (v7 >> 3) & 7;
        break;
      case 2:
        uint64_t v8 = (v7 >> 6) & 0xFFFFFFFB | (4
                                     * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, v6 + 1) & 1));
        break;
      case 3:
        uint64_t v8 = (v7 >> 1) & 7;
        break;
      case 4:
        uint64_t v8 = (v7 >> 4) & 7;
        break;
      case 5:
        uint64_t v8 = (v7 >> 7) & 0xFFFFFFF9 | (2
                                     * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, v6 + 1) & 3));
        break;
      case 6:
        uint64_t v8 = (v7 >> 2) & 7;
        break;
      case 7:
        uint64_t v8 = v7 >> 5;
        break;
      default:
        uint64_t v8 = v7 & 7;
        break;
    }
    return v8;
  }
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint3>(uint64_t a1, uint64_t a2)
{
  return ZinIrConstData::uint3_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 7;
}

uint64_t ZinIrConstData::uint3_elem_at(ZinIrConstData *this, uint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this))
  {
    uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, uint64_t))(*(void *)this + 128);
    return v4(this, a2);
  }
  else
  {
    unint64_t v6 = (unint64_t)(3 * a2) >> 3;
    unsigned int v7 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128))(this, v6);
    switch(a2 & 7)
    {
      case 1:
        uint64_t v8 = (v7 >> 3) & 7;
        break;
      case 2:
        uint64_t v8 = (v7 >> 6) & 0xFFFFFFFB | (4
                                     * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128))(this, v6 + 1) & 1));
        break;
      case 3:
        uint64_t v8 = (v7 >> 1) & 7;
        break;
      case 4:
        uint64_t v8 = (v7 >> 4) & 7;
        break;
      case 5:
        uint64_t v8 = (v7 >> 7) & 0xFFFFFFF9 | (2
                                     * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128))(this, v6 + 1) & 3));
        break;
      case 6:
        uint64_t v8 = (v7 >> 2) & 7;
        break;
      case 7:
        uint64_t v8 = v7 >> 5;
        break;
      default:
        uint64_t v8 = v7 & 7;
        break;
    }
    return v8;
  }
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint4_at(*(ZinIrConstData **)(a1 + 136), a2) & 0xF;
}

uint64_t ZinIrConstData::uint4_at(ZinIrConstData *this, unint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this))
  {
    uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120);
    return v4(this, a2);
  }
  else
  {
    unsigned int v6 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, a2 >> 1);
    if (a2) {
      return v6 >> 4;
    }
    else {
      return v6 & 0xF;
    }
  }
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint4>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint4_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 0xF;
}

uint64_t ZinIrConstData::uint4_elem_at(ZinIrConstData *this, unint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this))
  {
    uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128);
    return v4(this, a2);
  }
  else
  {
    unsigned int v6 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128))(this, a2 >> 1);
    if (a2) {
      return v6 >> 4;
    }
    else {
      return v6 & 0xF;
    }
  }
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(uint64_t a1, uint64_t a2)
{
  return ZinIrConstData::uint6_at(*(ZinIrConstData **)(a1 + 136), a2) & 0x3F;
}

uint64_t ZinIrConstData::uint6_at(ZinIrConstData *this, uint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this))
  {
    uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, uint64_t))(*(void *)this + 120);
    return v4(this, a2);
  }
  else
  {
    unint64_t v6 = (unint64_t)(3 * a2) >> 2;
    unsigned int v7 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, v6);
    if ((a2 & 3) == 2) {
      return (v7 >> 4) & 0xFFFFFFCF | (16
    }
                                     * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, v6 + 1) & 3));
    if ((a2 & 3) == 1) {
      return (v7 >> 6) & 0xFFFFFFC3 | (4
    }
                                     * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, v6 + 1) & 0xF));
    if ((a2 & 3) != 0) {
      return v7 >> 2;
    }
    return v7 & 0x3F;
  }
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint6>(uint64_t a1, uint64_t a2)
{
  return ZinIrConstData::uint6_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 0x3F;
}

uint64_t ZinIrConstData::uint6_elem_at(ZinIrConstData *this, uint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(void *)this + 192))(this))
  {
    uint64_t v4 = *(uint64_t (**)(ZinIrConstData *, uint64_t))(*(void *)this + 128);
    return v4(this, a2);
  }
  else
  {
    unint64_t v6 = (unint64_t)(3 * a2) >> 2;
    unsigned int v7 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 128))(this, v6);
    if ((a2 & 3) == 2) {
      return (v7 >> 4) & 0xFFFFFFCF | (16
    }
                                     * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, v6 + 1) & 3));
    if ((a2 & 3) == 1) {
      return (v7 >> 6) & 0xFFFFFFC3 | (4
    }
                                     * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(void *)this + 120))(this, v6 + 1) & 0xF));
    if ((a2 & 3) != 0) {
      return v7 >> 2;
    }
    return v7 & 0x3F;
  }
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(uint64_t a1)
{
  unint64_t v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint1_at(*(ZinIrConstData **)(a1 + 136), v2) & 1;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(uint64_t a1)
{
  unint64_t v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint2_at(*(ZinIrConstData **)(a1 + 136), v2) & 3;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint3_at(*(ZinIrConstData **)(a1 + 136), v2) & 7;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(uint64_t a1)
{
  unint64_t v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint4_at(*(ZinIrConstData **)(a1 + 136), v2) & 0xF;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint6_at(*(ZinIrConstData **)(a1 + 136), v2) & 0x3F;
}

void ZinIrWeightBase::UpdateDescriptorForPartialTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "channel offset should be >= 0.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "The range is beyond the original dimension size.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Overflow from subset offset", a5, a6, a7, a8, 0);
}

uint64_t ZinParseFlattenType(const __CFString *a1, _DWORD *a2)
{
  *a2 = 0;
  if (!ZinCFStringEquals(a1, @"NCHW"))
  {
    if (ZinCFStringEquals(a1, @"NHWC")) {
      return 2;
    }
    *a2 = 3;
  }
  return 1;
}

uint64_t ZinParseFlattenUnit(const __CFDictionary *a1, ZinIrFlattenUnitInfo *a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (!Value || (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    CFStringRef v12 = @"InvalidParamSyntax";
LABEL_13:
    ZinIrUnitStatus::SetError(a3, v12);
    return 3;
  }
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(v6, @"Mode");
  if (!v8 || (CFStringRef v9 = v8, v10 = CFGetTypeID(v8), v10 != CFStringGetTypeID()))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseFlattenUnit();
    }
    CFStringRef v12 = @"InvalidFlattenModeSyntax";
    goto LABEL_13;
  }
  unsigned int v14 = 0;
  *((_DWORD *)a2 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = ZinParseFlattenType(v9, &v14);
  uint64_t v11 = v14;
  if (v14)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseFlattenUnit();
    }
    ZinIrUnitStatus::SetError(a3, @"InvalidFlattenMode");
  }
  return v11;
}

void ZinParseFlattenUnit()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Missing required flatten mode in the parameter dictionary in a flatten layer.\n", v0, 2u);
}

{
  uint8_t v0[16];

  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Unknown flatten mode!\n", v0, 2u);
}

uint64_t ZinSpatialSplitTransform::TransferShapeDependentTransformsToContext(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 16);
  if (*(unsigned char *)(result + 40)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    do
    {
      unint64_t v5 = v2[2];
      uint64_t v6 = v2[3];
      v2[3] = 0;
      uint64_t v7 = v6;
      ZinIrContext::InsertShapeDependentTransform(a2, v5, &v7);
      uint64_t result = v7;
      uint64_t v7 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_211312954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    ZinPixelUnshuffleLayer::DecomposeStandalone(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSpatialSplitTransform::GetOrCreateSpatialSplitTransform(unint64_t a1, void *a2)
{
  unint64_t v4 = a1;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>(a2, &v4);
  if (!v2) {
    operator new();
  }
  return v2[3];
}

void sub_211312A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    ZinPixelUnshuffleLayer::DecomposeStandalone(a11);
  }
  _Unwind_Resume(exception_object);
}

void ZinSpatialSplitTransform::AdjustViewToFit(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      int Dimension = ZinTensorDimensions::GetDimension(a3, *(_DWORD *)(*(void *)v3 + 92));
      int v7 = *(_DWORD *)(*(void *)v3 + 80);
      int v8 = *(_DWORD *)(*(void *)v3 + 88);
      if (v7 + (*(_DWORD *)(*(void *)v3 + 84) - 1) * v8 >= Dimension) {
        *(_DWORD *)(*(void *)v3 + 84) = (Dimension - v7) / v8;
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
}

BOOL ZinSpatialSplitTransform::HasEachViewDimensionOnlyOnce(uint64_t a1, uint64_t **a2)
{
  std::string __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
    uint64_t v4 = 0;
    BOOL v15 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2;
      if (v4 >= v25)
      {
        uint64_t v6 = (int *)__p;
        uint64_t v7 = ((char *)v4 - (unsigned char *)__p) >> 2;
        unint64_t v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = (char *)v25 - (unsigned char *)__p;
        if (((char *)v25 - (unsigned char *)__p) >> 1 > v8) {
          unint64_t v8 = v9 >> 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v8;
        }
        if (v10)
        {
          uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v25, v10);
          uint64_t v6 = (int *)__p;
          uint64_t v4 = v24;
        }
        else
        {
          uint64_t v11 = 0;
        }
        CFStringRef v12 = &v11[4 * v7];
        *(_DWORD *)CFStringRef v12 = *(_DWORD *)(v5 + 92);
        long long v13 = (int *)(v12 + 4);
        while (v4 != v6)
        {
          int v14 = *--v4;
          *((_DWORD *)v12 - 1) = v14;
          v12 -= 4;
        }
        std::string __p = v12;
        uint64_t v24 = v13;
        uint64_t v25 = (int *)&v11[4 * v10];
        if (v6) {
          operator delete(v6);
        }
        uint64_t v4 = v13;
      }
      else
      {
        *v4++ = *(_DWORD *)(v5 + 92);
      }
      uint64_t v24 = v4;
      ++v2;
    }
    while (v2 != v3);
    BOOL v15 = (int *)__p;
  }
  std::set<int>::set[abi:ne180100]<std::__wrap_iter<ZinIrDimension *>>((uint64_t)v20, v15, v4);
  long long v17 = __p;
  std::string v16 = v24;
  uint64_t v18 = v22;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v20, v21);
  if (__p)
  {
    uint64_t v24 = (int *)__p;
    operator delete(__p);
  }
  return v18 == ((char *)v16 - v17) >> 2;
}

void sub_211312C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSpatialSplitTransform::Run(uint64_t a1, uint64_t a2, ZinANELayer **a3, uint64_t **a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3) == 36)
  {
    uint64_t BondedInfo = ZinANELayer::GetBondedInfo(*a3);
    BOOL HasEachViewDimensionOnlyOnce = ZinSpatialSplitTransform::HasEachViewDimensionOnlyOnce(BondedInfo, (uint64_t **)BondedInfo);
    if (!HasEachViewDimensionOnlyOnce) {
      ZinAssertImpl("Each view should only contain each dimension once as part of the view vector");
    }
    ZinSpatialSplitTransform::AdjustViewToFit(HasEachViewDimensionOnlyOnce, (uint64_t *)BondedInfo, *a4);
    for (uint64_t i = *(uint64_t **)BondedInfo; i != *(uint64_t **)(BondedInfo + 8); ++i)
    {
      if (*(int *)(*i + 84) <= 0) {
        goto LABEL_48;
      }
    }
    goto LABEL_45;
  }
  if (*(unsigned char *)(a1 + 60)
    && (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3) == 89
     || *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3) == 85
     || *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3) == 83))
  {
    *(void *)&v31[0] = a3;
    uint64_t v11 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)(a2 + 64), (unint64_t **)v31);
    CFStringRef v12 = (ZinMirUnit ****)(a2 + 104);
    if (v11) {
      CFStringRef v12 = (ZinMirUnit ****)(v11 + 3);
    }
    AotTensorDims = (uint64_t *)ZinMirUnit::GetAotTensorDims(***v12);
    uint64_t v14 = 0;
    *(void *)&v31[0] = 0x400000003;
    DWORD2(v31[0]) = 1;
    while (1)
    {
      int v15 = *(_DWORD *)((char *)v31 + v14);
      int Dimension = ZinTensorDimensions::GetDimension(AotTensorDims, v15);
      uint64_t Padding = GetPadding(a3);
      switch(v15)
      {
        case 1:
          uint64_t v18 = (_DWORD *)(Padding + 20);
          break;
        case 4:
          uint64_t v18 = (_DWORD *)(Padding + 4);
          break;
        case 3:
          uint64_t v18 = (_DWORD *)(Padding + 12);
          break;
        default:
          ZinAssertImpl("Invalid dimension to set padding for", v31[0]);
      }
      int v19 = *v18 + Dimension;
      if (ZinTensorDimensions::GetDimension(*a4, v15) >= v19) {
        goto LABEL_44;
      }
      int v20 = ZinTensorDimensions::GetDimension(*a4, v15);
      if (!*(unsigned char *)(a1 + 60)
        || ((int v21 = v19 - v20, v15 == 1)
          ? (*(_DWORD *)(a1 + 52) >= v21 ? (int v22 = v19 - v20) : (int v22 = *(_DWORD *)(a1 + 52)),
             BOOL v23 = (_DWORD *)(GetPadding(a3) + 20))
          : v15 == 3
          ? (*(_DWORD *)(a1 + 44) >= v21 ? (int v22 = v19 - v20) : (int v22 = *(_DWORD *)(a1 + 44)),
             BOOL v23 = (_DWORD *)(GetPadding(a3) + 12))
          : (*(_DWORD *)(a1 + 36) >= v21 ? (int v22 = v19 - v20) : (int v22 = *(_DWORD *)(a1 + 36)),
             BOOL v23 = (_DWORD *)(GetPadding(a3) + 4)),
            _DWORD *v23 = v22,
            !*(unsigned char *)(a1 + 60)))
      {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      int v24 = *(_DWORD *)(a1 + 56);
      int v25 = *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3);
      uint64_t v26 = *a3;
      if (v25 == 89) {
        break;
      }
      int v28 = *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(v26);
      uint64_t v29 = *a3;
      if (v28 == 85)
      {
        *(_DWORD *)(ZinMirNEUnit::GetKernelDescriptor(v29) + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v24;
      }
      else if (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(v29) == 83)
      {
        uint64_t PoolingInfo = ZinMirPEPoolUnit::GetPoolingInfo(*a3);
        goto LABEL_43;
      }
LABEL_44:
      v14 += 4;
      if (v14 == 12) {
        goto LABEL_45;
      }
    }
    uint64_t PoolingInfo = ZinMirNEPoolUnit::GetPoolingInfo(v26);
LABEL_43:
    *(_DWORD *)(PoolingInfo + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v24;
    goto LABEL_44;
  }
LABEL_45:
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  if ((*(unsigned int (**)(ZinANELayer *, uint64_t **, _OWORD *))(*(void *)*a3 + 16))(*a3, a4, v31)
    || ZinTensorDimensions::IsValid((ZinTensorDimensions *)v31))
  {
    return 0;
  }
LABEL_48:
  if (ZinMirUnitGraph::RemoveNode(a2, a3)) {
    return 0;
  }
  else {
    return 3;
  }
}

uint64_t ZinSpatialSplitTransform::GetPaddingInfo(ZinSpatialSplitTransform *this)
{
  return (uint64_t)this + 32;
}

uint64_t *ZinSpatialSplitTransform::AddViewId(uint64_t **this, uint64_t a2)
{
  uint64_t v3 = a2;
  return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(this + 1, (unint64_t *)&v3, &v3);
}

uint64_t ZinSpatialSplitTransform::GetTransformType(ZinSpatialSplitTransform *this)
{
  return 1;
}

BOOL ZinSpatialSplitTransform::operator==(void *a1, uint64_t a2)
{
  if (a1[3] == *(void *)(a2 + 24))
  {
    uint64_t v2 = (void *)a1[1];
    if (v2 == a1 + 2) {
      return std::operator==[abi:ne180100]<ZinSpatialSplitTransformPadding,ZinSpatialSplitTransformPadding>((uint64_t)(a1 + 4), a2 + 32);
    }
    uint64_t v3 = *(void **)(a2 + 8);
    while (v2[4] == v3[4])
    {
      uint64_t v4 = (void *)v2[1];
      uint64_t v5 = v2;
      if (v4)
      {
        do
        {
          uint64_t v2 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v2 = (void *)v5[2];
          BOOL v6 = *v2 == (void)v5;
          uint64_t v5 = v2;
        }
        while (!v6);
      }
      uint64_t v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v3[2];
          BOOL v6 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v6);
      }
      uint64_t v3 = v8;
      if (v2 == a1 + 2) {
        return std::operator==[abi:ne180100]<ZinSpatialSplitTransformPadding,ZinSpatialSplitTransformPadding>((uint64_t)(a1 + 4), a2 + 32);
      }
    }
  }
  return 0;
}

{
  int v4;
  uint64_t vars8;

  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2)) {
    return 0;
  }

  return ZinSpatialSplitTransform::operator==(a1, a2);
}

BOOL std::operator==[abi:ne180100]<ZinSpatialSplitTransformPadding,ZinSpatialSplitTransformPadding>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28)) {
    BOOL v2 = *(unsigned char *)(a2 + 28) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 28) != 0) == (*(unsigned char *)(a2 + 28) != 0);
  }
  BOOL result = ZinIrPadding::operator==((_DWORD *)a1, (_DWORD *)a2);
  if (result) {
    return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return result;
}

uint64_t ZinSpatialSplitTransform::SetPaddingInfo(uint64_t result, _OWORD *a2)
{
  int v2 = *(unsigned __int8 *)(result + 60);
  long long v3 = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)(result + 32) = *a2;
  *(_OWORD *)(result + 44) = v3;
  if (!v2) {
    *(unsigned char *)(result + 6std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
  }
  return result;
}

void ZinSpatialSplitTransform::~ZinSpatialSplitTransform(ZinSpatialSplitTransform *this)
{
  *(void *)this = &unk_26C351298;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C351298;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 8, *((void **)this + 2));

  JUMPOUT(0x21667D3C0);
}

uint64_t GetPadding(ZinSpatialSplitTransform **a1)
{
  int v2 = *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a1);
  long long v3 = *a1;
  if (v2 == 89)
  {
    uint64_t PoolingInfo = ZinMirNEPoolUnit::GetPoolingInfo(v3);
  }
  else
  {
    int v5 = *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(v3);
    BOOL v6 = *a1;
    if (v5 == 85) {
      return ZinMirNEUnit::GetKernelDescriptor(v6) + 176;
    }
    if (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(v6) != 83) {
      ZinAssertImpl("Invalid unit to get padding for");
    }
    uint64_t PoolingInfo = ZinMirPEPoolUnit::GetPoolingInfo(*a1);
  }
  return PoolingInfo + 64;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::unique_ptr<ZinSpatialSplitTransform>>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  CFStringRef v12 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  a3[1] = 0;
  *uint64_t i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *int v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v12;
  *CFStringRef v12 = i;
  *(void *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7) {
        v23 %= v7;
      }
    }
    else
    {
      v23 &= v7 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_21131355C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[3];
    __p[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::set<int>::set[abi:ne180100]<std::__wrap_iter<ZinIrDimension *>>(uint64_t a1, int *a2, int *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
      std::__tree<int>::__emplace_hint_unique_impl<ZinIrDimension &>((uint64_t **)a1, v4, v6++);
    while (v6 != a3);
  }
  return a1;
}

void sub_211313660(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<int>::__emplace_hint_unique_impl<ZinIrDimension &>(uint64_t **a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = (int *)operator new(0x20uLL);
  v6[7] = *a3;
  unint64_t v7 = (uint64_t **)std::__tree<ZinKernelFormat>::__find_equal<ZinKernelFormat>(a1, a2, &v11, &v10, v6 + 7);
  uint8x8_t v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v11, v7, (uint64_t *)v6);
  }
  return (uint64_t *)v6;
}

void sub_21131370C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double ZinSNEPatterns::Condition::SharedClone@<D0>(ZinSNEPatterns::Condition *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinSNEPatterns::Condition,std::allocator<ZinSNEPatterns::Condition>,ZinSNEPatterns::Condition const&,void>((uint64_t *)this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void ZinSNEPatterns::Condition::Fuse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Activation");
  uint64_t SingleMatch = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  ZinSNEConditionLayer::ConvertNonLinearModeToPredicateOp(*(_DWORD *)(SingleMatch + 192));
  ZinBuilder::CreateSNEConditionLayer(*(void *)(SingleMatch + 16), a3);
}

void sub_2113137D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<ZinSNEPatterns::Condition,std::allocator<ZinSNEPatterns::Condition>,ZinSNEPatterns::Condition const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xE8uLL);
  double result = std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::__shared_ptr_emplace[abi:ne180100]<ZinSNEPatterns::Condition const&,std::allocator<ZinSNEPatterns::Condition>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_211313838(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::__shared_ptr_emplace[abi:ne180100]<ZinSNEPatterns::Condition const&,std::allocator<ZinSNEPatterns::Condition>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C333B78;
  std::construct_at[abi:ne180100]<ZinSNEPatterns::Condition,ZinSNEPatterns::Condition const&,ZinSNEPatterns::Condition*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_211313894(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C333B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C333B78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

ZinPattern *std::construct_at[abi:ne180100]<ZinSNEPatterns::Condition,ZinSNEPatterns::Condition const&,ZinSNEPatterns::Condition*>(ZinPattern *a1, uint64_t *a2)
{
  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *uint64_t v4 = &unk_26C349BA8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem*,ZinLinearPattern::AtomItem*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(void *)a1 = &unk_26C32C518;
  return a1;
}

void sub_2113139CC(_Unwind_Exception *a1)
{
  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void *ZinIrRingBufferUnitInfo::GetWrapAxes(void *a1, uint64_t a2)
{
  ZinIrRingBufferUnitInfo::GetStaticWrapAxes(a1, a2);

  return ZinIrRingBufferUnitInfo::GetDynamicWrapAxes(a1, a2);
}

void *ZinIrRingBufferUnitInfo::GetStaticWrapAxes(void *result, uint64_t a2)
{
  for (uint64_t i = (int *)result[17]; i; uint64_t i = *(int **)i)
  {
    if (*((unsigned char *)i + 32)) {
      double result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>(a2, i + 4, i + 4);
    }
  }
  return result;
}

void *ZinIrRingBufferUnitInfo::GetDynamicWrapAxes(void *result, uint64_t a2)
{
  for (uint64_t i = (int *)result[12]; i; uint64_t i = *(int **)i)
  {
    if (*((unsigned char *)i + 48)) {
      double result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>(a2, i + 4, i + 4);
    }
  }
  return result;
}

void ZinIrCustomNeuronUnit::ZinIrCustomNeuronUnit(ZinIrCustomNeuronUnit *this, const ZinIrCustomNeuronUnitInfo *a2)
{
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  ZinIrUnit::ZinIrUnit(this, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  *(void *)this = &unk_26C34E4C0;
  *((void *)this + 7) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + 3);
    *((_OWORD *)this + 4) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 22) = v5;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 4, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((_OWORD *)a2 + 4);
  *((void *)this + 7) = &unk_26C3513D0;
  long long v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 152) = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)this + 136) = v6;
  long long v7 = *((_OWORD *)a2 + 7);
  long long v8 = *((_OWORD *)a2 + 8);
  long long v9 = *((_OWORD *)a2 + 9);
  *(_OWORD *)((char *)this + 216) = *((_OWORD *)a2 + 10);
  *(_OWORD *)((char *)this + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v9;
  *(_OWORD *)((char *)this + 184) = v8;
  *(_OWORD *)((char *)this + 168) = v7;
  long long v10 = *((_OWORD *)a2 + 11);
  long long v11 = *((_OWORD *)a2 + 12);
  long long v12 = *((_OWORD *)a2 + 13);
  *(_OWORD *)((char *)this + 276) = *(_OWORD *)((char *)a2 + 220);
  *(_OWORD *)((char *)this + 264) = v12;
  *(_OWORD *)((char *)this + 248) = v11;
  *(_OWORD *)((char *)this + 232) = v10;
}

void sub_211313C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ZinIrUnit::~ZinIrUnit(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCustomNeuronUnit::Validate(ZinIrUnit *this, uint64_t a2, int a3, int a4, CFArrayRef *a5)
{
  if (*(unsigned char *)(*(void *)(a2 + 8) + 492)
    && (*(unsigned int (**)(ZinIrUnit *, CFArrayRef *))(*(void *)this + 144))(this, a5))
  {
    ZinIrUnit::GetUnitTypeString(this, v12);
    if (v13 >= 0) {
      long long v11 = (const char *)v12;
    }
    else {
      long long v11 = (const char *)v12[0];
    }
    ZinAssertImpl("Unit %s is not supported for dynamic shapes", v11);
  }
  uint64_t result = ZinIrUnit::ValidateBottomCount(this, 1, a5);
  if (!result)
  {
    uint64_t result = ZinIrUnit::ValidateFormats(this, a5);
    if (!result)
    {
      if (!(*(unsigned int (**)(ZinIrUnit *, uint64_t, CFArrayRef *))(*(void *)this + 120))(this, 1, a5))
      {
        if (ZinIrCustomNeuronUnit::ValidateNeuron(this, *(const ZinIrHalParameters **)a2, v9, v10)) {
          return 0;
        }
        ZinIrUnitStatus::SetError(a5, @"InvalidCustomNeuronLUT");
      }
      return 3;
    }
  }
  return result;
}

void sub_211313D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCustomNeuronUnit::ValidateNeuron(ZinIrCustomNeuronUnit *this, const ZinIrHalParameters *a2, float a3, float a4)
{
  int v4 = *((_DWORD *)this + 72);
  if (v4 != *((_DWORD *)a2 + 422)) {
    return 0;
  }
  if (v4 == 1) {
    return CustomLutV7UpUtil::Validate((_WORD *)this + 68, a3, a4);
  }
  if (v4) {
    return 1;
  }
  return CustomLutV6DownUtil::Validate((uint64_t)this + 136);
}

void ZinIrCustomNeuronUnit::CreateOpcode(ZinIrCustomNeuronUnit *this, const ZinIrHalParameters *a2)
{
}

void sub_211313E24(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

void ZinIrCustomNeuronUnit::CreateLayer(ZinIrCustomNeuronUnit *a1, const ZinIrHalParameters *a2)
{
}

void sub_211313F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C407E37BC9ELL);
  uint64_t v14 = *(void *)(v12 - 56);
  *(void *)(v12 - 56) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  _Unwind_Resume(a1);
}

void ZinIrCustomNeuronUnit::~ZinIrCustomNeuronUnit(void **this)
{
  *this = &unk_26C34E4C0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);

  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  uint64_t vars8;

  *this = &unk_26C34E4C0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);

  JUMPOUT(0x21667D3C0);
}

uint64_t ZinParseGlobalArgMinMaxUnit(CFDictionaryRef *a1, ZinIrGlobalArgMinMaxUnitInfo *a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, @"Params");
  if (!Value || (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    BOOL v12 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v12) {
      ZinParseGlobalArgMinMaxUnit(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    ZinIrUnitStatus::SetError(a3, @"InvalidParamSyntax");
    return 3;
  }
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(v6, @"Type");
  if (!v8 || (CFStringRef v9 = v8, v10 = CFGetTypeID(v8), v10 != CFStringGetTypeID()))
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidGlobalArgType");
    BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v20) {
      ZinParseGlobalArgMinMaxUnit(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    return 3;
  }
  if (ZinCFStringEquals(v9, @"Min"))
  {
    int v11 = 1;
  }
  else
  {
    if (!ZinCFStringEquals(v9, @"Max"))
    {
      ZinIrUnitStatus::SetError(a3, @"InvalidGlobalArgType");
      BOOL v40 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v40) {
        ZinParseGlobalArgMinMaxUnit(v40, v41, v42, v43, v44, v45, v46, v47);
      }
      return 3;
    }
    int v11 = 2;
  }
  *((_DWORD *)a2 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v11;
  uint64_t v29 = CFDictionaryGetValue(v6, @"Dimension");
  if (!v29 || (v30 = v29, CFTypeID v31 = CFGetTypeID(v29), v31 != CFStringGetTypeID()))
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidGlobalArgDimension");
    BOOL v32 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v32) {
      ZinParseGlobalArgMinMaxUnit(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    return 3;
  }
  if ((CFStringToZinIrDimension(v30, (char *)a2 + 84) & 1) == 0)
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidGlobalArgDimension");
    BOOL v48 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v48) {
      ZinParseGlobalArgMinMaxUnit(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    return 3;
  }
  return 0;
}

void ZinParseGlobalArgMinMaxUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Missing global argmin/argmax type\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Missing global argmin/argmax dimension\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unrecognized global argmin/max dimension\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unrecognized global argmin/max type\n", a5, a6, a7, a8, 0);
}

uint64_t ZinGetMaskBit(const unsigned __int8 *a1, unint64_t a2)
{
  return (a1[a2 >> 3] >> (a2 & 7)) & 1;
}

uint64_t ZinAneTd<11u>::HandleDramHazards(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v22 = a3;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, &v22)[3];
  uint64_t v7 = *(void *)(a3 + 264);
  LODWORD(v22) = *(_DWORD *)(v7 + 1000);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v23, *(const void **)(v7 + 1008), *(void *)(v7 + 1016), (uint64_t)(*(void *)(v7 + 1016) - *(void *)(v7 + 1008)) >> 2);
  unsigned int v26 = *(_DWORD *)(v7 + 1032);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v27, v7 + 1040);
  uint64_t v8 = *(void *)(a3 + 264);
  LODWORD(v16) = *(_DWORD *)(v8 + 1080);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, *(const void **)(v8 + 1088), *(void *)(v8 + 1096), (uint64_t)(*(void *)(v8 + 1096) - *(void *)(v8 + 1088)) >> 2);
  unsigned int v20 = *(_DWORD *)(v8 + 1112);
  uint64_t v9 = std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)&v21, v8 + 1120);
  if (v16)
  {
    if (v16 == v22)
    {
      unsigned int v10 = v26;
      if (v26 >= v20) {
        unsigned int v10 = v20;
      }
      unsigned int v26 = v10;
    }
    LODWORD(v22) = 2;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v9);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  uint64_t v11 = (*(uint64_t (**)(void, void, void, void, unsigned char *))(**(void **)(v6 + 200) + 160))(*(void *)(v6 + 200), v22, 0, v26, v27);
  if (v11)
  {
    uint64_t v12 = *(void *)(a3 + 264);
    uint64_t v13 = *(unsigned int *)(v12 + 1160);
    uint64_t v14 = *(unsigned int *)(v12 + 1192);
    uint64_t v16 = 0;
    std::string __p = 0;
    uint64_t v18 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v16, *(const void **)(v12 + 1168), *(void *)(v12 + 1176), (uint64_t)(*(void *)(v12 + 1176) - *(void *)(v12 + 1168)) >> 2);
    (*(void (**)(void, void, uint64_t, uint64_t, void **))(**(void **)(v6 + 200) + 168))(*(void *)(v6 + 200), *a2, v13, v14, &v16);
    if (v16)
    {
      std::string __p = v16;
      operator delete(v16);
    }
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v27);
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  return v11;
}

void sub_2113145AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  ZinDramDependentInfo::~ZinDramDependentInfo((ZinDramDependentInfo *)&a19);
  _Unwind_Resume(a1);
}

void sub_2113145F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x2113145ECLL);
}

void DumpTask<11u>(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int **a7, uint64_t a8, uint64_t a9)
{
  v147[7] = *MEMORY[0x263EF8340];
  uint64_t v15 = *(void *)(a3 + 200);
  std::string::basic_string[abi:ne180100]<0>(&v130, "__nid0__tid");
  uint64_t v16 = (ZinAneTdHw_v11 *)(v15 + 8);
  std::to_string(&v127, *(unsigned __int16 *)(v15 + 8));
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &v127;
  }
  else {
    uint64_t v17 = (std::string *)v127.__r_.__value_.__r.__words[0];
  }
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v127.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = std::string::append(&v130, (const std::string::value_type *)v17, size);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "__");
  if (SHIBYTE(v124) >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (SHIBYTE(v124) >= 0) {
    std::string::size_type v22 = HIBYTE(v124);
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v123;
  }
  uint64_t v23 = std::string::append(&v133, p_p, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)&v141[1] = *((void *)&v23->__r_.__value_.__l + 2);
  v141[0] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = *(char *)(a3 + 183);
  if (v25 >= 0) {
    unsigned int v26 = (const std::string::value_type *)(a3 + 160);
  }
  else {
    unsigned int v26 = *(const std::string::value_type **)(a3 + 160);
  }
  if (v25 >= 0) {
    std::string::size_type v27 = *(unsigned __int8 *)(a3 + 183);
  }
  else {
    std::string::size_type v27 = *(void *)(a3 + 168);
  }
  int v28 = std::string::append((std::string *)v141, v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  std::string::size_type v112 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long v111 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v141[1]) < 0) {
    operator delete(*(void **)&v141[0]);
  }
  if (SHIBYTE(v124) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  int v30 = *(_DWORD *)(a3 + 184);
  CFTypeID v31 = (unsigned int *)(a9 + (v30 & 0xFFFFFFFC));
  *a7 = v31;
  uint64_t v32 = **a2;
  if (*(unsigned char *)(v32 + 2057))
  {
    if ((ZinAlignPower2(((*(_DWORD *)v16 >> 14) & 0x1FFCu) + v30, *(void *)(v32 + 504)) & 0x3F) == 0) {
      ZinAssertImpl("aligned_td_end_addr is divisible by 64");
    }
    CFTypeID v31 = *a7;
  }
  unsigned int v33 = *(_DWORD *)(v15 + 8);
  *a7 = v31 + 1;
  *CFTypeID v31 = v33;
  unsigned int v34 = *(_DWORD *)(v15 + 12);
  *a7 = v31 + 2;
  v31[1] = v34;
  unsigned int v35 = *(_DWORD *)(v15 + 16);
  *a7 = v31 + 3;
  _OWORD v31[2] = v35;
  unsigned int v36 = *(_DWORD *)(v15 + 20);
  *a7 = v31 + 4;
  v31[3] = v36;
  unsigned int v37 = *(_DWORD *)(v15 + 24);
  *a7 = v31 + 5;
  v31[4] = v37;
  unsigned int v38 = *(_DWORD *)(v15 + 28);
  *a7 = v31 + 6;
  v31[5] = v38;
  unsigned int v39 = *(_DWORD *)(v15 + 32);
  *a7 = v31 + 7;
  v31[6] = v39;
  unsigned int v40 = *(_DWORD *)(v15 + 36);
  *a7 = v31 + 8;
  v31[7] = v40;
  if ((*(unsigned char *)(v15 + 36) & 2) != 0)
  {
    unsigned int v41 = *(_DWORD *)(v15 + 40);
    *a7 = v31 + 9;
    v31[8] = v41;
  }
  RelocInfos = (uint64_t *)ZinAneTdHw_v11::GetRelocInfos((ZinAneTdHw_v11 *)(v15 + 8));
  GetRegistersProgrammedAsRelocationCommands(RelocInfos, (uint64_t)v110);
  ZinCodegen::GetDontCareRegisters<11u>((_DWORD *)v15, (uint64_t)v108);
  for (uint64_t i = v109; i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v110, i + 4, i + 4);
  uint64_t v44 = *a7;
  memset(v141, 0, 24);
  uint64_t v105 = v44;
  uint64_t v106 = a3;
  uint64_t v45 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 44, 0x46uLL, 6400, v44, 1, a6, a1, v110, 0, (__int32 **)v141)];
  *a7 = v45;
  if (*(void *)&v141[0])
  {
    *((void *)&v141[0] + 1) = *(void *)&v141[0];
    operator delete(*(void **)&v141[0]);
    uint64_t v45 = *a7;
  }
  uint64_t v46 = operator new(4uLL);
  *(void *)&v141[0] = v46;
  *uint64_t v46 = 60;
  *(void *)&v141[1] = v46 + 1;
  *((void *)&v141[0] + 1) = v46 + 1;
  uint64_t v47 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 492, 0x13uLL, 0, v45, 1, a6, a1, v110, 0, (__int32 **)v141)];
  *a7 = v47;
  if (*(void *)&v141[0])
  {
    *((void *)&v141[0] + 1) = *(void *)&v141[0];
    operator delete(*(void **)&v141[0]);
    uint64_t v47 = *a7;
  }
  memset(v141, 0, 24);
  BOOL v48 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 576, 0x35uLL, 4352, v47, 1, a6, a1, v110, 0, (__int32 **)v141)];
  *a7 = v48;
  if (*(void *)&v141[0])
  {
    *((void *)&v141[0] + 1) = *(void *)&v141[0];
    operator delete(*(void **)&v141[0]);
    BOOL v48 = *a7;
  }
  memset(v141, 0, 24);
  uint64_t v49 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 796, 0x19uLL, 1280, v48, 1, a6, a1, v110, 0, (__int32 **)v141)];
  *a7 = v49;
  if (*(void *)&v141[0])
  {
    *((void *)&v141[0] + 1) = *(void *)&v141[0];
    operator delete(*(void **)&v141[0]);
    uint64_t v49 = *a7;
  }
  memset(v141, 0, 24);
  uint64_t v50 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 904, 5uLL, 2304, v49, 1, a6, a1, v110, 0, (__int32 **)v141)];
  *a7 = v50;
  if (*(void *)&v141[0])
  {
    *((void *)&v141[0] + 1) = *(void *)&v141[0];
    operator delete(*(void **)&v141[0]);
    uint64_t v50 = *a7;
  }
  memset(v141, 0, 24);
  uint64_t v51 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 932, 5uLL, 3328, v50, 1, a6, a1, v110, 0, (__int32 **)v141)];
  *a7 = v51;
  if (*(void *)&v141[0])
  {
    *((void *)&v141[0] + 1) = *(void *)&v141[0];
    operator delete(*(void **)&v141[0]);
    uint64_t v51 = *a7;
  }
  long long v52 = *(_OWORD *)(v15 + 976);
  v141[0] = *(_OWORD *)(v15 + 960);
  v141[1] = v52;
  *(_OWORD *)((char *)&v141[1] + 12) = *(_OWORD *)(v15 + 988);
  memset(&v133, 0, sizeof(v133));
  *a7 += ZinRegisterPacking::ProcessRegisters((uint64_t)v141, 9uLL, 5376, v51, 1, a6, a1, v110, 0, (__int32 **)&v133);
  if (v133.__r_.__value_.__r.__words[0])
  {
    v133.__r_.__value_.__l.__size_ = v133.__r_.__value_.__r.__words[0];
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  unint64_t v53 = *(void *)(v15 + 1056);
  *(_DWORD *)(v15 + 996) = 57005;
  if (v53 >= 8)
  {
    uint64_t v54 = v15 + 996;
    unint64_t v55 = v53 >> 3;
    do
    {
      uint64_t v56 = *a7;
      memset(v141, 0, 24);
      *a7 += ZinRegisterPacking::ProcessRegisters(v54, 1uLL, 5412, v56, 1, a6, a1, v110, 0, (__int32 **)v141);
      if (*(void *)&v141[0])
      {
        *((void *)&v141[0] + 1) = *(void *)&v141[0];
        operator delete(*(void **)&v141[0]);
      }
      --v55;
    }
    while (v55);
  }
  std::string v57 = (uint64_t *)ZinAneTdHw_v11::GetRelocInfos(v16);
  uint64_t v58 = *v57;
  uint64_t v59 = v57[1];
  if (*v57 != v59)
  {
    uint64_t v60 = *a7;
    do
    {
      unsigned int v61 = *(_DWORD *)(v58 + 32);
      *uint64_t v60 = v61;
      *a7 = v60 + 1;
      if (*(unsigned char *)v58)
      {
        uint64_t v62 = (uint64_t)v60 - a9 + 4;
        if (*(unsigned char *)(v58 + 1)) {
          AddBARRelocation(v58 + 8, a8, v62, (v61 & 0x8000) != 0, a2[7], 8 * ((void)v60 - a9) + 22, 7);
        }
        else {
          AddRelocation(v58 + 8, a8, v62, (v61 & 0x8000) != 0, a2[7]);
        }
      }
      unsigned int AddressOfRelocationCommand = GetAddressOfRelocationCommand((_DWORD *)(v58 + 32));
      unsigned int RegisterValueFromAddress = ZinAneTdHw_v11::GetRegisterValueFromAddress(v16, AddressOfRelocationCommand);
      uint64_t v65 = *a7;
      unsigned int *v65 = RegisterValueFromAddress;
      uint64_t v60 = v65 + 1;
      *a7 = v60;
      if ((v61 & 0x8000) != 0)
      {
        int v66 = GetAddressOfRelocationCommand((_DWORD *)(v58 + 32));
        unsigned int v67 = ZinAneTdHw_v11::GetRegisterValueFromAddress(v16, v66 + 4);
        uint64_t v68 = *a7;
        unsigned int *v68 = v67;
        uint64_t v60 = v68 + 1;
        *a7 = v60;
      }
      v58 += 40;
    }
    while (v58 != v59);
  }
  uint64_t v69 = *(unsigned int *)(v106 + 184);
  unsigned int v70 = (*(uint64_t (**)(void))(**(void **)(v106 + 200) + 16))(*(void *)(v106 + 200));
  AddSymbol((uint64_t)v111, a8, v69, 4 * v70, a2[7]);
  BOOL v71 = *a7;
  int v135 = 1;
  uint64_t v72 = operator new(4uLL);
  _DWORD *v72 = 1;
  v133.__r_.__value_.__l.__size_ = (std::string::size_type)(v72 + 1);
  v133.__r_.__value_.__r.__words[2] = (std::string::size_type)(v72 + 1);
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  long long v134 = xmmword_211F05BA0;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)v141, &v135, (uint64_t)&v133);
  int v132 = 0;
  uint64_t v73 = operator new(0x14uLL);
  v130.__r_.__value_.__l.__size_ = (std::string::size_type)(v73 + 5);
  v130.__r_.__value_.__r.__words[2] = (std::string::size_type)(v73 + 5);
  void v73[4] = 5;
  *(_OWORD *)uint64_t v73 = xmmword_211F05C10;
  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
  long long v131 = xmmword_211F05BB0;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v142, &v132, (uint64_t)&v130);
  int v129 = 2;
  uint64_t v74 = operator new(4uLL);
  *uint64_t v74 = 2;
  v127.__r_.__value_.__l.__size_ = (std::string::size_type)(v74 + 1);
  v127.__r_.__value_.__r.__words[2] = (std::string::size_type)(v74 + 1);
  v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
  long long v128 = xmmword_211F05BC0;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v143, &v129, (uint64_t)&v127);
  int v126 = 3;
  uint64_t v75 = operator new(4uLL);
  *uint64_t v75 = 3;
  uint64_t v123 = v75 + 1;
  uint64_t v124 = v75 + 1;
  std::string __p = v75;
  long long v125 = xmmword_211F05BD0;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v144, &v126, (uint64_t)&__p);
  int v121 = 4;
  uint64_t v76 = operator new(4uLL);
  *uint64_t v76 = 4;
  v119[1] = v76 + 1;
  v119[2] = v76 + 1;
  v119[0] = v76;
  long long v120 = xmmword_211F05BE0;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v145, &v121, (uint64_t)v119);
  int v118 = 5;
  uint64_t v77 = operator new(4uLL);
  _DWORD *v77 = 5;
  v116[1] = v77 + 1;
  v116[2] = v77 + 1;
  v116[0] = v77;
  long long v117 = xmmword_211F05BF0;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v146, &v118, (uint64_t)v116);
  int v115 = 6;
  uint64_t v78 = operator new(4uLL);
  unint64_t v107 = (unint64_t)v71;
  *uint64_t v78 = 2;
  v113[1] = v78 + 1;
  v113[2] = v78 + 1;
  v113[0] = v78;
  long long v114 = xmmword_211F05C00;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)v147, &v115, (uint64_t)v113);
  uint64_t v79 = 0;
  long long v137 = 0;
  uint64_t v138 = 0;
  long long v136 = &v137;
  do
  {
    uint64_t v80 = (int *)&v141[3 * v79];
    uint64_t v81 = &v137;
    if (v136 == &v137) {
      goto LABEL_71;
    }
    uint64_t v82 = v137;
    uint64_t v83 = &v137;
    if (v137)
    {
      do
      {
        uint64_t v81 = (uint64_t **)v82;
        uint64_t v82 = (uint64_t *)v82[1];
      }
      while (v82);
    }
    else
    {
      do
      {
        uint64_t v81 = (uint64_t **)v83[2];
        BOOL v103 = *v81 == (uint64_t *)v83;
        uint64_t v83 = v81;
      }
      while (v103);
    }
    int v84 = *v80;
    if (*((_DWORD *)v81 + 8) < *v80)
    {
LABEL_71:
      uint64_t v85 = &v136;
      if (v137)
      {
        uint64_t v85 = (uint64_t ***)v81;
        uint64_t v86 = v81 + 1;
      }
      else
      {
        uint64_t v86 = &v137;
      }
      if (v85[1]) {
        goto LABEL_93;
      }
      if (v137) {
        BOOL v87 = v81;
      }
      else {
        BOOL v87 = &v137;
      }
      int v84 = *v80;
    }
    else if (v137)
    {
      uint64_t v88 = v137;
      do
      {
        while (1)
        {
          BOOL v87 = (uint64_t **)v88;
          int v89 = *((_DWORD *)v88 + 8);
          if (v84 >= v89) {
            break;
          }
          uint64_t v88 = *v87;
          if (!*v87)
          {
            uint64_t v86 = v87;
            goto LABEL_88;
          }
        }
        if (v89 >= v84) {
          goto LABEL_93;
        }
        uint64_t v88 = v87[1];
      }
      while (v88);
      uint64_t v86 = v87 + 1;
    }
    else
    {
      uint64_t v86 = &v137;
      BOOL v87 = &v137;
    }
LABEL_88:
    uint64_t v90 = operator new(0x50uLL);
    uint64_t v91 = v90;
    v139[0] = v90;
    v139[1] = &v137;
    char v140 = 0;
    v90[8] = v84;
    *((void *)v90 + 5) = 0;
    uint64_t v92 = &v141[3 * v79];
    *((void *)v90 + 6) = 0;
    *((void *)v90 + 7) = 0;
    uint64_t v94 = (unsigned char *)*((void *)v92 + 1);
    uint64_t v93 = (unsigned char *)*((void *)v92 + 2);
    BOOL v95 = (uint64_t *)v90;
    int64_t v96 = v93 - v94;
    if (v93 != v94)
    {
      std::vector<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::allocator<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>>::__vallocate[abi:ne180100]((void *)v90 + 5, v96 >> 2);
      uint64_t v97 = (char *)*((void *)v91 + 6);
      memmove(v97, v94, v96);
      *((void *)v91 + 6) = &v97[4 * (v96 >> 2)];
      BOOL v95 = (uint64_t *)v139[0];
    }
    *((_OWORD *)v91 + 4) = v141[3 * v79 + 2];
    char v140 = 1;
    *BOOL v95 = 0;
    v95[1] = 0;
    v95[2] = (uint64_t)v87;
    *uint64_t v86 = v95;
    if (*v136)
    {
      long long v136 = (uint64_t **)*v136;
      BOOL v95 = *v86;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v137, v95);
    ++v138;
    v139[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v139);
LABEL_93:
    ++v79;
  }
  while (v79 != 7);
  uint64_t v98 = 42;
  do
  {
    uint64_t v99 = (&v137)[v98];
    if (v99)
    {
      v139[v98 - 1] = v99;
      operator delete(v99);
    }
    v98 -= 6;
  }
  while (v98 * 8);
  if (v113[0]) {
    operator delete(v113[0]);
  }
  if (v116[0]) {
    operator delete(v116[0]);
  }
  if (v119[0]) {
    operator delete(v119[0]);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v127.__r_.__value_.__r.__words[0]) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (v130.__r_.__value_.__r.__words[0]) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if (v133.__r_.__value_.__r.__words[0]) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  v133.__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long>::vector(v141, 7uLL, &v133);
  if ((unint64_t)v105 < v107)
  {
    unsigned int v100 = *v105 >> 29;
    if (!v100) {
      operator new();
    }
    if (v100 == 1) {
      operator new();
    }
    operator new();
  }
  if (*(void *)&v141[0] == *((void *)&v141[0] + 1))
  {
    BOOL v104 = 0;
    if (*(void *)&v141[0]) {
      goto LABEL_126;
    }
  }
  else
  {
    uint64_t v101 = *(void *)&v141[0] + 8;
    do
    {
      unint64_t v102 = *(void *)(v101 - 8);
      BOOL v103 = v102 > 0x100 || v101 == *((void *)&v141[0] + 1);
      v101 += 8;
    }
    while (!v103);
    BOOL v104 = v102 > 0x100;
    if (*(void *)&v141[0])
    {
LABEL_126:
      *((void *)&v141[0] + 1) = *(void *)&v141[0];
      operator delete(*(void **)&v141[0]);
    }
  }
  std::__tree<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::__map_value_compare<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::less<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>,true>,std::allocator<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>>>::destroy(v137);
  if ((unint64_t)v105 < v107 || v104) {
    ZinAssertImpl("TD Programming can lead to internal buffer overflow\n");
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v108);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v110);
  if (SHIBYTE(v112) < 0) {
    operator delete(v111[0]);
  }
}

void sub_211315468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTds<11u>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4, CFArrayRef *a5)
{
  uint64_t v46 = (uint64_t)&v46;
  uint64_t v47 = &v46;
  uint64_t v48 = 0;
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 8));
  uint64_t v11 = ZinIrCodegenHandleTdsMakeList<11u>((uint64_t **)a1, a2, a3, &v46, (uint64_t)a4, a5);
  if (v11)
  {
    BOOL v12 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v12) {
      ZinIrCodegenHandleTds<4u>(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else
  {
    size_t v21 = *a4;
    if (v21)
    {
      std::string::size_type v22 = malloc_type_calloc(v21, 4uLL, 0x100004052888210uLL);
      if (v22)
      {
        uint64_t v11 = ZinIrCodegenValidateTds<11u>(*(uint64_t **)a1, *(void *)(a1 + 24), (uint64_t)&v46);
        if (v11)
        {
          BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v23) {
            ZinIrCodegenHandleTds<4u>(v23, v24, v25, v26, v27, v28, v29, v30);
          }
          free(v22);
        }
        else
        {
          uint64_t v45 = (uint64_t *)v22;
          ZinIrMemoryPool::GetSections(*(void *)(a1 + 24), 1, v44);
          uint64_t v41 = *(void *)(v44[1] + 16);
          std::__list_imp<ZinIrSection *>::clear(v44);
          DumpSegment<11u>(AddressDefaultValueMapping, (uint64_t **)a1, (uint64_t)a4, (uint64_t)&v46, (uint64_t)a5, &v45, v41, (uint64_t)v22);
          for (uint64_t i = v47; i != &v46; uint64_t i = (uint64_t *)i[1])
          {
            uint64_t v43 = (ZinAneInstruction *)i[2];
            if (v43)
            {
              ZinAneInstruction::~ZinAneInstruction(v43);
              MEMORY[0x21667D3C0]();
            }
          }
          uint64_t v11 = 0;
          *(void *)(v41 + 24) = v22;
        }
      }
      else
      {
        BOOL v31 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v31) {
          ZinIrCodegenHandleTds<4u>(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        for (int j = v47; j != &v46; int j = (uint64_t *)j[1])
        {
          unsigned int v40 = (ZinAneInstruction *)j[2];
          if (v40)
          {
            ZinAneInstruction::~ZinAneInstruction(v40);
            MEMORY[0x21667D3C0]();
          }
        }
        ZinIrNetworkStatus::SetError(a5, @"MemoryAllocationFailure");
        uint64_t v11 = 3;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v46);
  return v11;
}

void sub_211315A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTdsMakeList<11u>(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, CFArrayRef *a6)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[4];
  if (a4[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Warning: tds list is already populated\n", (uint8_t *)buf, 2u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Clearing list contents without explicit deallocation\n", (uint8_t *)buf, 2u);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(a4);
  uint64_t v9 = (ZinIrOpLayer **)*v8;
  unsigned int v10 = (ZinIrOpLayer **)v8[1];
  if ((ZinIrOpLayer **)*v8 == v10)
  {
    uint64_t v11 = (ZinIrOpLayer **)*v8;
  }
  else
  {
    do
    {
      if (ZinIrOpLayer::IsANELayer(*v9)) {
        break;
      }
      ++v9;
    }
    while (v9 != v10);
    uint64_t v9 = (ZinIrOpLayer **)*v8;
    uint64_t v11 = (ZinIrOpLayer **)v8[1];
  }
  do
  {
    BOOL v12 = v11;
    if (v11 == v9) {
      break;
    }
    --v11;
  }
  while (!ZinIrOpLayer::IsANELayer(*(v12 - 1)));
  uint64_t v76 = **a1;
  uint64_t v77 = (ZinIrCompilerParameters *)(*a1)[1];
  memset(buf, 0, sizeof(buf));
  int v88 = 1065353216;
  memset(v85, 0, sizeof(v85));
  int v86 = 1065353216;
  uint64_t v73 = (uint64_t)v8;
  uint64_t v14 = *v8;
  uint64_t v13 = v8[1];
  unint64_t v15 = (v13 - *v8) >> 3;
  std::string __p = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>,std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>>((char *)&__p, v13, v13, v14, v14, v15);
  uint64_t v16 = (ZinIrOpLayer **)__p;
  uint64_t v17 = v83;
  if (__p != v83)
  {
    do
    {
      uint64_t v81 = 0;
      uint64_t v81 = *v16;
      if (ZinIrOpLayer::IsANELayer(v81))
      {
        v80[3] = 0;
        operator new();
      }
      ++v16;
    }
    while (v16 != v17);
  }
  ReassignTaskIDs<17u>((uint64_t)a4);
  if (!ZinIrCompilerParameters::getEnableKernelRewind(v77) && !*(unsigned char *)(v76 + 2088)
    || (uint64_t v18 = ZinCodegenEnableInterKernelReuse(11, a1, (uint64_t)a4), !v18))
  {
    uint64_t v19 = *(void *)(*(void *)(a4[1] + 16) + 200);
    int v20 = *(_DWORD *)(v19 + 844);
    *(_DWORD *)(v19 + 800) |= 0x500030u;
    *(_DWORD *)(v19 + 844) = v20 | 0x500030;
    if ((void *)a4[1] != a4)
    {
      uint64_t v21 = 0;
      std::string::size_type v22 = a4;
      do
      {
        uint64_t v23 = *(void *)(*(void *)(*v22 + 16) + 200);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 368))(v23, v21);
        uint64_t v24 = *(void *)(*(void *)(*v22 + 16) + 200);
        uint64_t v21 = (*(unsigned int (**)(uint64_t))(*(void *)v24 + 16))(v24) - 1;
        std::string::size_type v22 = (void *)*v22;
      }
      while (v22 != (void *)a4[1]);
    }
    unsigned int v25 = ZinAlignPower2(2, *(void *)(v76 + 504));
    if (SetInstructionMemOffset<11u>((uint64_t)a4, v76, (*a1)[1], v25))
    {
      BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v26) {
        ZinIrCodegenHandleTdsMakeList<4u>(v26, v27, v28, v29, v30, v31, v32, v33);
      }
LABEL_70:
      uint64_t v18 = 3;
      goto LABEL_71;
    }
    LegalizeNetworks<11u>(a1, a4, (_DWORD *)a5, (uint64_t)a6, v85);
    uint64_t v34 = *a1;
    std::unordered_map<ZinIrOpLayer *,ZinAneInstruction *>::unordered_map((uint64_t)v78, (uint64_t)buf);
    uint64_t v35 = v34[1];
    v89[5] = *(unsigned char *)(v35 + 472);
    *(_WORD *)&v89[3] = *(_WORD *)(v35 + 100);
    uint64_t v36 = *(unsigned __int8 *)(v35 + 95);
    int v37 = (char)v36;
    if ((v36 & 0x80u) != 0) {
      uint64_t v36 = *(void *)(v35 + 80);
    }
    if (v36 == 9)
    {
      if (v37 >= 0) {
        uint64_t v38 = v35 + 72;
      }
      else {
        uint64_t v38 = *(void *)(v35 + 72);
      }
      uint64_t v39 = *(void *)v38;
      int v40 = *(unsigned __int8 *)(v38 + 8);
      BOOL v42 = v39 == 0x30336E2E67343168 && v40 == 49;
    }
    else
    {
      BOOL v42 = 0;
    }
    if (*(unsigned char *)(v35 + 536)) {
      char v43 = 1;
    }
    else {
      char v43 = v42;
    }
    v89[6] = v43;
    uint64_t v44 = (void *)a4[1];
    if (v44 != a4)
    {
      uint64_t v45 = (unsigned char *)v44[2];
      uint64_t v46 = &v79;
      do
        uint64_t v46 = (uint64_t *)*v46;
      while (v46 && (unsigned char *)v46[3] != v45);
      v89[0] = v45[199];
      v89[2] = v45[196];
      v89[1] = v45[198];
      ZinAneInstruction::HandleEventLogs((uint64_t)v45, v34);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v78);
    uint64_t v47 = (void *)a4[1];
    if (v47 != a4)
    {
      uint64_t v49 = **a1;
      uint64_t v48 = (float *)(*a1)[1];
      uint64_t v50 = &_os_log_internal;
      while (1)
      {
        uint64_t v51 = v47[2];
        uint64_t v52 = *(void *)(v51 + 200);
        unint64_t v53 = 4 * (*(unsigned int (**)(uint64_t))(*(void *)v52 + 16))(v52);
        if (*(void *)(v49 + 296) > v53 || *(void *)(v49 + 304) < v53) {
          break;
        }
        v54.i32[0] = *(_DWORD *)(v52 + 24) & 0xFFFFFF;
        int8x8_t v56 = vcnt_s8(v54);
        v56.i16[0] = vaddlv_u8((uint8x8_t)v56);
        uint64_t v57 = *(void *)(a5 + 16);
        *(void *)(a5 + 8) += v56.u32[0];
        v56.i32[0] = *(_DWORD *)(v52 + 16) & 0xFFFFFF;
        uint8x8_t v58 = (uint8x8_t)vcnt_s8(v56);
        v58.i16[0] = vaddlv_u8(v58);
        *(void *)(a5 + 16) = v57 + v58.u32[0];
        unsigned int v59 = *(unsigned __int16 *)(v52 + 12);
        if (*(_DWORD *)(a5 + 32) > v59) {
          unsigned int v59 = *(_DWORD *)(a5 + 32);
        }
        *(_DWORD *)(a5 + 32) = v59;
        float v60 = v48[97];
        if (v60 > 0.0)
        {
          LOWORD(v55) = *(_WORD *)(v52 + 12);
          if (v60 < (float)v55) {
            ++*(_DWORD *)(a5 + 36);
          }
        }
        LODWORD(v80[0]) = 0;
        if (ZinIrCompilerParameters::getEnforcedTdLatency((ZinIrCompilerParameters *)v48, (float *)v80))
        {
          int v61 = *(unsigned __int16 *)(v52 + 12);
          float v62 = *(float *)v80;
          if (*(float *)v80 < (float)v61 && os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            BOOL v63 = (void *)(v51 + 160);
            if (*(char *)(v51 + 183) < 0) {
              BOOL v63 = (void *)*v63;
            }
            *(_DWORD *)int v89 = 136315650;
            *(void *)&v89[4] = v63;
            __int16 v90 = 2048;
            double v91 = v62;
            __int16 v92 = 2048;
            double v93 = (double)v61;
            _os_log_error_impl(&dword_210C72000, v50, OS_LOG_TYPE_ERROR, "Latency for Task %s is too large (>%.0f us) (%.0f)", v89, 0x20u);
          }
        }
        ++*(void *)(a5 + 8);
        uint64_t v47 = (void *)v47[1];
        if (v47 == a4) {
          goto LABEL_64;
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinIrCodegenHandleTdsMakeList<6u>();
      }
      ZinIrNetworkStatus::SetError(a6, @"InvalidTotalTDSize");
      goto LABEL_70;
    }
LABEL_64:
    uint64_t v18 = ZinIrContextSwitchValidator<11u>(a4);
    if (v18)
    {
      BOOL v64 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v64) {
        ZinIrCodegenHandleTdsMakeList<4u>(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    else
    {
      uint64_t v18 = SetTensorKernelDependency<4u>(v73, buf, a6);
      if (!v18)
      {
        if ((*((unsigned char *)v77 + 97) & 0x20) != 0) {
          ZinIrCodegen::PrintContextSwitchInfo((uint64_t)a4);
        }
        uint64_t v18 = 0;
      }
    }
  }
LABEL_71:
  if (__p)
  {
    uint64_t v83 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v85);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)buf);
  return v18;
}

void sub_2113165B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v33 - 208);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenValidateTds<11u>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(a3 + 8);
  if (v5 == a3)
  {
LABEL_10:
    uint64_t v14 = ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v4, a3);
    if (v14)
    {
      uint64_t v15 = v14;
      BOOL v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v16) {
        ZinIrCodegenValidateTds<11u>(v16, v17, v18, v19, v20, v21, v22, v23);
      }
    }
    else
    {
      uint64_t v15 = ZinValidateTd<11u>::ValidateL2CircularBuffer(a3);
      if (v15)
      {
        BOOL v32 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v32) {
          ZinIrCodegenValidateTds<11u>(v32, v33, v34, v35, v36, v37, v38, v39);
        }
      }
    }
  }
  else
  {
    int v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(v5 + 16);
      uint64_t v10 = *(void *)(v9 + 200);
      int v12 = *(unsigned __int16 *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      if (v12 != v8) {
        break;
      }
      if (!*(unsigned char *)(v9 + 188))
      {
        uint64_t v13 = ZinValidateTd<11u>::Test(a1, a2, v11);
        if (v13)
        {
          uint64_t v15 = v13;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrCodegenValidateTds<6u>();
          }
          return v15;
        }
      }
      if (*(unsigned char *)(v9 + 198)) {
        int v8 = 0;
      }
      else {
        ++v8;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == a3) {
        goto LABEL_10;
      }
    }
    BOOL v24 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v24) {
      ZinIrCodegenValidateTds<1u>(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    return 3;
  }
  return v15;
}

void DumpSegment<11u>(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, uint64_t a7, uint64_t a8)
{
  BOOL v8 = *(unsigned char *)((*a2)[1] + 366) == 0;
  uint64_t v9 = *a2[8];
  if (a2[8][1] != v9)
  {
    unint64_t v15 = 0;
    uint64_t v26 = a4;
    do
    {
      BOOL v16 = (unsigned int *)(v9 + 80 * v15);
      uint64_t v17 = *(void *)(a4 + 8);
      uint64_t v18 = v16[11];
      if (v18)
      {
        unint64_t v19 = v18 + 1;
        do
        {
          uint64_t v17 = *(void *)(v17 + 8);
          --v19;
        }
        while (v19 > 1);
      }
      uint64_t v20 = *v16;
      uint64_t v21 = v17;
      if (v20)
      {
        unint64_t v22 = v20 + 1;
        uint64_t v21 = v17;
        do
        {
          uint64_t v21 = *(void *)(v21 + 8);
          --v22;
        }
        while (v22 > 1);
      }
      *a6 = (uint64_t *)(a8 + (*(_DWORD *)(v9 + 80 * v15 + 36) & 0xFFFFFFFC));
      uint64_t v23 = DumpSegmentHeader<17u,ZinAneSegmentHeader_V2>(v15, (uint64_t)v16, a4, a6);
      std::operator+<char>();
      AddSymbol((uint64_t)&__p, a7, 0, 4 * v23, a2[7]);
      if (v28 < 0) {
        operator delete(__p);
      }
      while (v17 != v21)
      {
        DumpTask<11u>(a1, a2, *(void *)(v17 + 16), v24, v25, v8, (unsigned int **)a6, a7, a8);
        uint64_t v17 = *(void *)(v17 + 8);
      }
      ++v15;
      uint64_t v9 = *a2[8];
      a4 = v26;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[8][1] - v9) >> 4));
  }
}

void sub_2113169A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<11u>::GetSizeInWords(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 5) == 1) {
    int v2 = 9;
  }
  else {
    int v2 = 8;
  }
  uint64_t v3 = (ZinAneTdHw_v11 *)(a1 + 8);
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1008));
  int v5 = *(unsigned __int8 *)(a1 + 1004);
  RelocInfos = (uint64_t *)ZinAneTdHw_v11::GetRelocInfos((ZinAneTdHw_v11 *)(a1 + 8));
  GetRegistersProgrammedAsRelocationCommands(RelocInfos, (uint64_t)v30);
  ZinCodegen::GetDontCareRegisters<11u>((_DWORD *)a1, (uint64_t)v28);
  for (uint64_t i = v29; i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v30, i + 4, i + 4);
  std::string __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v8 = ZinRegisterPacking::ProcessRegisters(a1 + 44, 0x46uLL, 6400, 0, 0, v5, AddressDefaultValueMapping, v30, 0, (__int32 **)&__p);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  uint64_t v9 = operator new(4uLL);
  std::string __p = v9;
  *uint64_t v9 = 60;
  uint64_t v26 = v9 + 1;
  uint64_t v27 = v9 + 1;
  int v10 = ZinRegisterPacking::ProcessRegisters(a1 + 492, 0x13uLL, 0, 0, 0, v5, AddressDefaultValueMapping, v30, 0, (__int32 **)&__p);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v11 = ZinRegisterPacking::ProcessRegisters(a1 + 576, 0x35uLL, 4352, 0, 0, v5, AddressDefaultValueMapping, v30, 0, (__int32 **)&__p);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v24 = ZinRegisterPacking::ProcessRegisters(a1 + 796, 0x19uLL, 1280, 0, 0, v5, AddressDefaultValueMapping, v30, 0, (__int32 **)&__p);
  int v12 = v10;
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  int v13 = v8;
  std::string __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v14 = ZinRegisterPacking::ProcessRegisters(a1 + 932, 5uLL, 3328, 0, 0, v5, AddressDefaultValueMapping, v30, 0, (__int32 **)&__p);
  int v15 = v2;
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v16 = ZinRegisterPacking::ProcessRegisters(a1 + 960, 9uLL, 5376, 0, 0, v5, AddressDefaultValueMapping, v30, 0, (__int32 **)&__p);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v17 = ZinRegisterPacking::ProcessRegisters(a1 + 904, 5uLL, 2304, 0, 0, v5, AddressDefaultValueMapping, v30, 0, (__int32 **)&__p);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  unint64_t v18 = *(void *)(a1 + 1056);
  unint64_t v19 = (uint64_t *)ZinAneTdHw_v11::GetRelocInfos(v3);
  uint64_t v20 = v13 + v15 + v12 + v11 + v24 + v14 + v16 + v17 + (v18 >> 2);
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  while (v21 != v22)
  {
    uint64_t v20 = GetSizeInWordsOfRelocationCommand(v21 + 32) + v20;
    v21 += 40;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v30);
  return v20;
}

void sub_211316D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>(uint64_t a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v5;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  int64_t v8 = v6 - *(void *)a3;
  if (v6 != *(void *)a3)
  {
    std::vector<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::allocator<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>>::__vallocate[abi:ne180100]((void *)(a1 + 8), v8 >> 2);
    uint64_t v9 = *(char **)(a1 + 16);
    memmove(v9, v7, v8);
    *(void *)(a1 + 16) = &v9[4 * (v8 >> 2)];
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 24);
  return a1;
}

void sub_211316E14(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::allocator<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[5];
      if (v3)
      {
        void v2[6] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::__map_value_compare<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::less<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>,true>,std::allocator<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::__map_value_compare<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::less<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>,true>,std::allocator<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::__map_value_compare<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::less<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>,true>,std::allocator<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>>>::destroy(a1[1]);
    int v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t SetInstructionMemOffset<11u>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a1)
  {
    uint64_t v7 = a4;
    do
    {
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v9 = *(void *)(v8 + 200);
      *(_DWORD *)(v8 + 184) = v7;
      if (*(unsigned char *)(a2 + 2057)) {
        AdjustTaskSizeForRdar107730882<11u>(v8, a2);
      }
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, 25);
      uint64_t v7 = ZinAlignPower2(v7 + (4 * v10), *(void *)(a2 + 504));
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != a1);
  }
  return 0;
}

uint64_t LegalizeNetworks<11u>(uint64_t **a1, void *a2, _DWORD *a3, uint64_t a4, void *a5)
{
  uint64_t v7 = **a1;
  unint64_t v8 = *(unsigned int *)((*a1)[1] + 548);
  if ((int)v8 < 1)
  {
    int v10 = (unint64_t *)(v7 + 608);
  }
  else
  {
    *(void *)&long long v30 = *(unsigned int *)((*a1)[1] + 548);
    BOOL v9 = *(void *)(v7 + 608) >= v8;
    int v10 = (unint64_t *)&v30;
    if (!v9) {
      int v10 = (unint64_t *)(v7 + 608);
    }
  }
  unint64_t v11 = *v10;
  unsigned int v12 = ZinAlignPower2(2, *(void *)(v7 + 504));
  int v13 = (void *)a2[1];
  if (v13 != a2)
  {
    unint64_t v14 = v12;
    unint64_t v15 = v12;
    do
    {
      uint64_t v16 = v13[2];
      if (v15 == v14) {
        *(unsigned char *)(v16 + 196) = 1;
      }
      int v17 = *(_WORD **)(v16 + 200);
      if (!v17[4]) {
        *(unsigned char *)(v16 + 199) = 1;
      }
      unsigned int v18 = (*(uint64_t (**)(_WORD *, uint64_t))(*(void *)v17 + 24))(v17, 25);
      v15 += ZinAlignPower2(4 * v18, *(void *)(v7 + 504));
      if (v15 <= v11)
      {
        if (*(unsigned char *)(v16 + 198))
        {
          *(unsigned char *)(v16 + 197) = 1;
          unint64_t v15 = v14;
          if ((*(unsigned int (**)(_WORD *, uint64_t))(*(void *)v17 + 24))(v17, 4) != 1) {
            ZinAssertImpl("Incorrect network boundary", a5);
          }
        }
      }
      else
      {
        __int16 v19 = *(_WORD *)(*(void *)(v13[2] + 200) + 8);
        do
        {
          if (!v19) {
            ZinAssertImpl("Cannot find valid segment boundary", a5);
          }
          int v13 = (void *)*v13;
          uint64_t v20 = v13[2];
          uint64_t v21 = *(_WORD **)(v20 + 200);
          __int16 v19 = v21[4];
        }
        while (!(*(unsigned int (**)(_WORD *, uint64_t))(*(void *)v21 + 24))(v21, 4));
        *(unsigned char *)(v20 + 197) = 1;
        unint64_t v15 = v14;
      }
      int v13 = (void *)v13[1];
    }
    while (v13 != a2);
  }
  *(unsigned char *)(*(void *)(*a2 + 16) + 197) = 1;
  CollectSegmentStats<11u>(**a1, (uint64_t)a2, a5, (uint64_t *)&v30);
  uint64_t v22 = a1[8];
  std::vector<ZinIrCodegenTDPartitionStats>::__vdeallocate(v22);
  *(_OWORD *)uint64_t v22 = v30;
  v22[2] = v31;
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  BOOL v32 = (void **)&v30;
  std::vector<ZinIrCodegenTDPartitionStats>::__destroy_vector::operator()[abi:ne180100](&v32);
  uint64_t v23 = *(void *)(*a2 + 16);
  unsigned int v24 = *(_DWORD *)(v23 + 184);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v23 + 200) + 24))(*(void *)(v23 + 200), 25);
  int v26 = result + (v24 >> 2);
  *a3 = v26;
  uint64_t v27 = *a1[8];
  if (a1[8][1] - v27 == 80 && v26 != *(_DWORD *)(v27 + 12)) {
    ZinAssertImpl("Error");
  }
  return result;
}

uint64_t ZinIrContextSwitchValidator<11u>(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 16);
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v2 + 200) + 24))(*(void *)(v2 + 200), 4))
  {
    BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v11) {
      ZinIrContextSwitchValidator<11u>(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    return 2;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v2 + 200) + 24))(*(void *)(v2 + 200), 49))
  {
    BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v3) {
      ZinIrContextSwitchValidator<11u>(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 2;
  }
  uint64_t v20 = (void *)a1[1];
  if (v20 != a1)
  {
    while (1)
    {
      uint64_t v21 = *(_DWORD **)(v20[2] + 200);
      if ((~v21[211] & 3) == 0)
      {
        if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(void *)v21 + 24))(v21, 4)) {
          break;
        }
      }
      uint64_t v20 = (void *)v20[1];
      if (v20 == a1) {
        return 0;
      }
    }
    BOOL v22 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v22) {
      ZinIrContextSwitchValidator<11u>(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    return 2;
  }
  return 0;
}

uint64_t ZinAneTd<11u>::GetField(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 23:
    case 24:
      return (*(_DWORD *)(a1 + 800) >> 25) & 3;
    case 4:
      return *(_DWORD *)(a1 + 36) & 1;
    case 5:
      return (*(_DWORD *)(a1 + 36) >> 1) & 1;
    case 8:
      return *(unsigned __int16 *)(a1 + 40);
    case 9:
      return *(_WORD *)(a1 + 38) & 7;
    case 12:
      return (*(_DWORD *)(a1 + 800) >> 2) & 3;
    case 14:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
      return *(_DWORD *)(a1 + 16) & 0xFFFFFF;
    case 15:
      unsigned int v3 = *(_DWORD *)(a1 + 800);
      return (v3 >> 4) & 1;
    case 16:
      unsigned int v4 = *(_DWORD *)(a1 + 800);
      return (v4 >> 5) & 1;
    case 17:
      unsigned int v3 = *(_DWORD *)(a1 + 844);
      return (v3 >> 4) & 1;
    case 18:
      unsigned int v4 = *(_DWORD *)(a1 + 844);
      return (v4 >> 5) & 1;
    case 19:
      unsigned int v5 = *(_DWORD *)(a1 + 800);
      return (v5 >> 20) & 1;
    case 20:
      unsigned int v6 = *(_DWORD *)(a1 + 800);
      return (v6 >> 22) & 1;
    case 21:
      unsigned int v5 = *(_DWORD *)(a1 + 844);
      return (v5 >> 20) & 1;
    case 22:
      unsigned int v6 = *(_DWORD *)(a1 + 844);
      return (v6 >> 22) & 1;
    case 25:
      return *(_WORD *)(a1 + 10) & 0x7FF;
    case 26:
      return *(unsigned __int16 *)(a1 + 890);
    case 27:
      return *(unsigned __int16 *)(a1 + 894);
    case 28:
      int v7 = *(_DWORD *)(a1 + 888);
      goto LABEL_27;
    case 29:
      int v7 = *(_DWORD *)(a1 + 892);
LABEL_27:
      uint64_t result = v7 & 3;
      break;
    case 49:
      uint64_t result = *(unsigned int *)(a1 + 32);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetField(uint64_t result, int a2, int a3)
{
  switch(a2)
  {
    case 4:
      unsigned int v3 = *(_DWORD *)(result + 36) & 0xFFFFFFFE | a3 & 1;
      goto LABEL_6;
    case 5:
      unsigned int v3 = *(_DWORD *)(result + 36) & 0xFFFFFFFD | (2 * (a3 & 1));
      goto LABEL_6;
    case 8:
      *(_WORD *)(result + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a3;
      return result;
    case 9:
      unsigned int v3 = *(_DWORD *)(result + 36) & 0xFFF8FFFF | ((a3 & 7) << 16);
LABEL_6:
      *(_DWORD *)(result + 36) = v3;
      return result;
    case 12:
      unsigned int v4 = *(_DWORD *)(result + 800) & 0xFFFFFFF3 | (4 * (a3 & 3));
      goto LABEL_15;
    case 13:
      unsigned int v4 = *(_DWORD *)(result + 800) & 0xF9FFFFFF | ((a3 & 3) << 25);
      goto LABEL_15;
    case 15:
      unsigned int v4 = *(_DWORD *)(result + 800) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_15;
    case 16:
      unsigned int v4 = *(_DWORD *)(result + 800) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_15;
    case 17:
      unsigned int v5 = *(_DWORD *)(result + 844) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_18;
    case 18:
      unsigned int v5 = *(_DWORD *)(result + 844) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_18;
    case 19:
      unsigned int v4 = *(_DWORD *)(result + 800) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_15;
    case 20:
      unsigned int v4 = *(_DWORD *)(result + 800) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_15:
      *(_DWORD *)(result + 80std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v4;
      return result;
    case 21:
      unsigned int v5 = *(_DWORD *)(result + 844) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_18;
    case 22:
      unsigned int v5 = *(_DWORD *)(result + 844) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_18:
      *(_DWORD *)(result + 844) = v5;
      break;
    case 25:
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xF800FFFF | ((a3 & 0x7FF) << 16);
      break;
    case 26:
      *(_WORD *)(result + 89std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a3;
      break;
    case 27:
      *(_WORD *)(result + 894) = a3;
      break;
    case 28:
      *(_DWORD *)(result + 888) = *(_DWORD *)(result + 888) & 0xFFFFFFFC | a3 & 3;
      break;
    case 29:
      *(_DWORD *)(result + 892) = *(_DWORD *)(result + 892) & 0xFFFFFFFC | a3 & 3;
      break;
    case 49:
      *(_DWORD *)(result + 32) = a3;
      break;
    case 50:
      *(_DWORD *)(result + 16) = a3 & 0xFFFFFF | (*(unsigned __int8 *)(result + 19) << 24);
      break;
    default:
      return result;
  }
  return result;
}

void ZinAneTd<11u>::HandleUserTags(ZinIrHalH13g *a1, uint64_t a2)
{
  int v4 = ZinEngineLayerMirInfo::HasDmaRead(*(void *)(a2 + 264), 0);
  int IsCompressed = 0;
  if (v4) {
    int IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(*(void *)(a2 + 264)
  }
                                                                                           + 712));
  int v6 = ZinEngineLayerMirInfo::HasDmaRead(*(void *)(a2 + 264), 1);
  if (!v6)
  {
    int v7 = 0;
    if (!*(void *)(a2 + 200)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v7 = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(*(void *)(a2 + 264) + 808));
  if (!*(void *)(a2 + 200)) {
    goto LABEL_9;
  }
  if (*(void *)(a2 + 192) != 1)
  {
LABEL_8:
    if (!*(void *)(a2 + 192))
    {
      v6 |= (*(uint64_t (**)(uint64_t))(*(void *)a2 + 496))(a2);
      int v8 = *(_DWORD *)(a2 + 360);
      if ((v4 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
LABEL_9:
    int v8 = *(_DWORD *)(a2 + 360);
    if (!v4) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 496))(a2);
  int v8 = *(_DWORD *)(a2 + 360);
LABEL_12:
  ZinAneTd<11u>::SetTileDmaSrcDma1UserTag((uint64_t)a1, v8);
  if (IsCompressed)
  {
    ZinAneTd<11u>::SetTileDmaSrcCompressedMdUserTag((uint64_t)a1, v8);
    if ((v6 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
LABEL_15:
  if (!v6) {
    goto LABEL_18;
  }
LABEL_16:
  ZinAneTd<11u>::SetTileDmaSrcDma2UserTag((uint64_t)a1, v8);
  if (v7) {
    ZinIrHalH13g::~ZinIrHalH13g(a1);
  }
LABEL_18:
  if ((*(_DWORD *)(*(void *)(a2 + 264) + 1632) - 1) <= 1) {
    ZinAneTd<11u>::SetTileDmaDstUserTag((uint64_t)a1, v8);
  }
  uint64_t v9 = *(void *)(a2 + 136);
  if (v9)
  {
    uint64_t v10 = *(void **)(v9 + 800);
    if (v10)
    {
      uint64_t v11 = v10[4];
      uint64_t v12 = v10[2];
      uint64_t v13 = v10[3];
      uint64_t v14 = v10[1];
      if (v10[5]) {
        ZinAneTd<11u>::SetKernelDmaSrcCoeffUserTag((uint64_t)a1, v8);
      }
      if (v13) {
        ZinAneTd<11u>::SetKernelDmaSrcPostScaleUserTag((uint64_t)a1, v8);
      }
      if (v11) {
        ZinAneTd<11u>::SetKernelDmaSrcPostScaleUserTag((uint64_t)a1, v8);
      }
      if (v14) {
        ZinAneTd<11u>::SetKernelDmaSrcPostScaleUserTag((uint64_t)a1, v8);
      }
      if (v12) {
        ZinAneTd<11u>::SetKernelDmaSrcPostScaleUserTag((uint64_t)a1, v8);
      }
    }
  }
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1264))
  {
    ZinIrHalH13g::~ZinIrHalH13g(a1);
  }
}

BOOL ZinAneTd<11u>::HandleEWCommon(uint64_t a1, ZinIrOpLayer *this)
{
  uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
  uint64_t v5 = *(void *)(*((void *)this + 57) + 64);
  int v13 = 0;
  unint64_t v6 = *(void *)(InputTensor + 48);
  BOOL result = ZinCodegenUtil::ValueToRegister(*(void *)(InputTensor + 56), (unsigned int *)(*(void *)(a1 + 1040) + 40), &v13);
  if (result)
  {
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v13 & 0x1FFFF;
    *(_DWORD *)(a1 + 524) &= 0xF801FFFF;
    ZinAneTd<11u>::SetCommonConvCfgSx(a1, 1uLL);
    ZinAneTd<11u>::SetCommonConvCfgSy(a1, 1uLL);
    ZinAneTd<11u>::SetCommonConvCfgOx(a1, 1uLL);
    ZinAneTd<11u>::SetCommonConvCfgOy(a1, 1uLL);
    BOOL result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, v6);
    if (result)
    {
      BOOL result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, 1uLL);
      if (result)
      {
        BOOL result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, 1uLL);
        if (result)
        {
          ZinAneTd<11u>::SetUnicastEn(a1, **((unsigned __int8 **)this + 33));
          if (*((void *)this + 12) - *((void *)this + 11) == 16)
          {
            unint64_t v8 = 2;
            unint64_t v9 = 2;
          }
          else
          {
            uint64_t v10 = *((void *)this + 33);
            unint64_t v8 = *(void *)(v10 + 80);
            unint64_t v9 = *(void *)(v10 + 96);
          }
          int v12 = 0;
          BOOL result = ZinCodegenUtil::ValueToRegister(v8, (unsigned int *)(*(void *)(a1 + 1040) + 40), &v12);
          if (result)
          {
            *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v12 & 0x1FFFF;
            ZinAneTd<11u>::SetUnicastCin(a1, v9);
            *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFF7FFF | ((*(_DWORD *)(v5 + 12) == 2) << 15);
            unsigned int v11 = *(_DWORD *)(v5 + 12);
            if (v11 >= 8) {
              return 0;
            }
            else {
              return (0x9Eu >> v11) & 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonMACBypassMode(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned __int8 *)a2[33];
  if (!v2)
  {
    BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v8) {
      ZinAneTd<4u>::HandleCommonMACBypassMode(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    return 0;
  }
  ZinAneTd<11u>::SetUnicastEn(a1, *v2);
  *(_DWORD *)(a1 + 524) &= 0xF801FFFF;
  ZinAneTd<11u>::SetCommonConvCfgSx(a1, 1uLL);
  ZinAneTd<11u>::SetCommonConvCfgSy(a1, 1uLL);
  ZinAneTd<11u>::SetCommonConvCfgOx(a1, 1uLL);
  ZinAneTd<11u>::SetCommonConvCfgOy(a1, 1uLL);
  uint64_t v5 = (*(uint64_t (**)(void *, void, void))(*a2 + 32))(a2, 0, 0);
  if (!ZinAneTd<11u>::SetOrReturnNumGroups(a1, *(void *)(v5 + 48))
    || !ZinAneTd<11u>::SetCommonConvCfgKw(a1, 1uLL)
    || !ZinAneTd<11u>::SetCommonConvCfgKh(a1, 1uLL))
  {
    return 0;
  }
  unint64_t v6 = *(void *)(a2[33] + 96);

  return ZinAneTd<11u>::SetUnicastCin(a1, v6);
}

BOOL ZinAneTd<11u>::HandleCommonArgMinMax(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 432);
  uint64_t v5 = *(void *)(v4 + 64);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)a2 + 376))(&v19, a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 384))(&v15, a2);
  if (*(void *)(a2 + 264))
  {
    int v14 = 0;
    BOOL result = ZinCodegenUtil::ValueToRegister(*(int *)(v5 + 72), (unsigned int *)(*(void *)(a1 + 1040) + 104), &v14);
    if (result)
    {
      *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFC1FFFF | ((v14 & 0x1F) << 17);
      int v14 = 0;
      BOOL result = ZinCodegenUtil::ValueToRegister(*(int *)(v5 + 64), (unsigned int *)(*(void *)(a1 + 1040) + 96), &v14);
      if (result)
      {
        *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xF83FFFFF | ((v14 & 0x1F) << 22);
        ZinAneTd<11u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
        ZinAneTd<11u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
        BOOL result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, v19);
        if (result)
        {
          switch(*(_DWORD *)(*(void *)(v4 + 64) + 104))
          {
            case 6:
            case 8:
              BOOL result = ZinAneTd<11u>::SetOrReturnWin(a1, v22);
              if (result)
              {
                BOOL result = ZinAneTd<11u>::SetOrReturnHin(a1, v21);
                if (result)
                {
                  BOOL result = ZinAneTd<11u>::SetOrReturnWout(a1, v18);
                  if (result)
                  {
                    BOOL result = ZinAneTd<11u>::SetOrReturnHout(a1, v17);
                    if (result)
                    {
                      BOOL result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, *(void *)(v5 + 16));
                      if (result)
                      {
                        BOOL result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, *(void *)(v5 + 24));
                        if (result)
                        {
                          BOOL result = ZinAneTd<11u>::SetUnicastCin(a1, 1uLL);
                          if (result)
                          {
                            int v14 = 0;
                            BOOL result = ZinCodegenUtil::ValueToRegister(v20, (unsigned int *)(*(void *)(a1 + 1040) + 40), &v14);
                            if (result)
                            {
                              *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v14 & 0x1FFFF;
                              int v14 = 0;
                              BOOL result = ZinCodegenUtil::ValueToRegister(v16, (unsigned int *)(*(void *)(a1 + 1040) + 48), &v14);
                              if (result)
                              {
                                *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v14 & 0x1FFFF;
                                ZinAneTd<11u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
                                goto LABEL_28;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              break;
            case 7:
            case 9:
              BOOL result = ZinAneTd<11u>::SetOrReturnWin(a1, v22);
              if (result)
              {
                BOOL result = ZinAneTd<11u>::SetOrReturnHin(a1, v21);
                if (result)
                {
                  BOOL result = ZinAneTd<11u>::SetOrReturnWout(a1, v18);
                  if (result)
                  {
                    BOOL result = ZinAneTd<11u>::SetOrReturnHout(a1, v17);
                    if (result)
                    {
                      int v14 = 0;
                      BOOL result = ZinCodegenUtil::ValueToRegister(v20, (unsigned int *)(*(void *)(a1 + 1040) + 40), &v14);
                      if (result)
                      {
                        *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v14 & 0x1FFFF;
                        int v14 = 0;
                        BOOL result = ZinCodegenUtil::ValueToRegister(v16, (unsigned int *)(*(void *)(a1 + 1040) + 48), &v14);
                        if (result)
                        {
                          *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v14 & 0x1FFFF;
                          ZinAneTd<11u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
                          BOOL result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, v19);
                          if (result)
                          {
                            BOOL result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, 1uLL);
                            if (result)
                            {
                              BOOL result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, 1uLL);
                              if (result)
                              {
                                if (!ZinAneTd<11u>::SetUnicastCin(a1, v20)) {
                                  return 0;
                                }
                                goto LABEL_28;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              break;
            default:
LABEL_28:
              BOOL result = 1;
              break;
          }
        }
      }
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<11u>::HandleCommonArgMinMax(result, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonPoolOpcode(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  if (!a2[33])
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<4u>::HandleCommonPoolOpcode(result, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  uint64_t v5 = *((void *)a2[54] + 8);
  BOOL result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, a3);
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<11u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<11u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<11u>::SetCommonConvCfgOx(a1, 1uLL);
  if (!result) {
    return result;
  }
  BOOL result = ZinAneTd<11u>::SetCommonConvCfgOy(a1, 1uLL);
  if (!result) {
    return result;
  }
  if (*(_DWORD *)(v5 + 104) != 2)
  {
    BOOL result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, *(void *)(v5 + 16));
    if (!result) {
      return result;
    }
    BOOL result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, *(void *)(v5 + 24));
    if (!result) {
      return result;
    }
    BOOL result = ZinAneTd<11u>::SetCommonConvCfgPadLeft(a1, *(int *)(v5 + 64));
    if (!result) {
      return result;
    }
    BOOL result = ZinAneTd<11u>::SetCommonConvCfgPadTop(a1, *(int *)(v5 + 72));
    if (!result) {
      return result;
    }
    goto LABEL_21;
  }
  (*((void (**)(uint64_t *__return_ptr, unsigned __int8 **))*a2 + 44))(&v16, a2);
  (*((void (**)(unint64_t *__return_ptr, unsigned __int8 **))*a2 + 41))(v15, a2);
  if (!ZinAneTd<11u>::SetCommonConvCfgKw(a1, v15[0])
    || !ZinAneTd<11u>::SetCommonConvCfgKh(a1, v15[1])
    || !ZinAneTd<11u>::SetCommonConvCfgPadLeft(a1, (int)v16)
    || !ZinAneTd<11u>::SetCommonConvCfgPadTop(a1, v17))
  {
    return 0;
  }
LABEL_21:
  ZinAneTd<11u>::SetUnicastEn(a1, *a2[33]);
  int v14 = a2[33];
  if (!*v14) {
    return 1;
  }
  ZinAneTd<11u>::SetUnicastCin(a1, *((void *)v14 + 12));
  LODWORD(v16) = 0;
  BOOL result = ZinCodegenUtil::ValueToRegister(*((void *)a2[33] + 10), (unsigned int *)(*(void *)(a1 + 1040) + 40), &v16);
  if (result)
  {
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v16 & 0x1FFFF;
    LODWORD(v16) = 0;
    BOOL result = ZinCodegenUtil::ValueToRegister(*((void *)a2[33] + 11), (unsigned int *)(*(void *)(a1 + 1040) + 48), &v16);
    if (result)
    {
      *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v16 & 0x1FFFF;
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonConvOpcode(uint64_t a1, void *a2)
{
  (*(void (**)(uint64_t *__return_ptr, void *))(*a2 + 352))(&v18, a2);
  (*(void (**)(unint64_t *__return_ptr, void *))(*a2 + 328))(v17, a2);
  if (a2[33])
  {
    uint64_t v4 = (int *)a2[17];
    unint64_t v5 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 368))(a2, 4);
    BOOL result = ZinAneTd<11u>::SetOrReturnWout(a1, v5);
    if (result)
    {
      BOOL result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, v17[0]);
      if (result)
      {
        BOOL result = ZinAneTd<11u>::SetCommonConvCfgPadLeft(a1, (int)v18);
        if (result)
        {
          unint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 368))(a2, 3);
          BOOL result = ZinAneTd<11u>::SetOrReturnHout(a1, v7);
          if (result)
          {
            BOOL result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, v17[1]);
            if (result)
            {
              BOOL result = ZinAneTd<11u>::SetCommonConvCfgPadTop(a1, v19);
              if (result)
              {
                ZinAneTd<11u>::SetCommonConvCfgSx(a1, v4[82]);
                ZinAneTd<11u>::SetCommonConvCfgSy(a1, v4[83]);
                ZinAneTd<11u>::SetCommonConvCfgOx(a1, v4[85]);
                ZinAneTd<11u>::SetCommonConvCfgOy(a1, v4[86]);
                int v16 = 0;
                BOOL result = ZinCodegenUtil::ValueToRegister(*(void *)(a2[33] + 80), (unsigned int *)(*(void *)(a1 + 1040) + 40), &v16);
                if (result)
                {
                  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v16 & 0x1FFFF;
                  int v16 = 0;
                  BOOL result = ZinCodegenUtil::ValueToRegister(*(void *)(a2[33] + 88), (unsigned int *)(*(void *)(a1 + 1040) + 48), &v16);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v16 & 0x1FFFF;
                    BOOL result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, *(void *)(a2[33] + 104));
                    if (result)
                    {
                      uint64_t v8 = (unsigned __int8 *)a2[33];
                      if (*((_DWORD *)v8 + 28) == 2)
                      {
                        ZinAneTd<11u>::SetUnicastEn(a1, *v8);
                        ZinAneTd<11u>::SetUnicastCin(a1, *(void *)(a2[33] + 96));
                      }
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<4u>::HandleCommonConvOpcode(result, v9, v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::ForceHazardStalls(_DWORD *a1)
{
  a1[144] = a1[144] & 0xCFFFFFFF | 0x10000000;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 15, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 16, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 17, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 18, 1);
  a1[137] |= 0x800000u;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 19, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 20, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 21, 1);
  uint64_t v2 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32);

  return v2(a1, 22, 1);
}

uint64_t ZinAneTd<11u>::SetRAWdmaDependency(ZinIrHalH13g *a1, int a2, uint64_t a3, unsigned int a4)
{
  if (a3 == 1)
  {
    ZinAneTd<11u>::SetRAWdmaDependencySrc2(a1, a2);
    return 1;
  }
  if (!a3)
  {
    ZinAneTd<11u>::SetRAWdmaDependencySrc1(a1, a2, a4);
    return 1;
  }
  return 0;
}

uint64_t ZinAneTd<11u>::HasDmaConfigDependent(uint64_t a1)
{
  return *(_DWORD *)(a1 + 576) & ((*(_DWORD *)(a1 + 576) & 0x30000000) != 0);
}

uint64_t ZinAneTd<11u>::HandleDMADepErrata(_DWORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 24))(a1, 1);
  if (result == 1)
  {
    a1[144] = a1[144] & 0xCFFFFFFF | 0x10000000;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 24))(a1, 0);
    if (result != 1) {
      return (a1[144] & 0x30000000) == 0x10000000;
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::HandleCommonConfigFormatAndConvParams(uint64_t a1, int a2, unint64_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = ZinAneTd<11u>::SetOrReturnWin(a1, a3[3]);
  if (result)
  {
    uint64_t result = ZinAneTd<11u>::SetOrReturnHin(a1, a3[2]);
    if (result)
    {
      int v12 = 0;
      uint64_t result = ZinCodegenUtil::ValueToRegister(a3[1], (unsigned int *)(*(void *)(a1 + 1040) + 40), &v12);
      if (result)
      {
        *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v12 & 0x1FFFF;
        ZinAneTd<11u>::SetCommonInFmt(a1, a2);
        ZinAneTd<11u>::SetCommonOutFmt(a1, a4);
        uint64_t result = ZinAneTd<11u>::SetCommonConvCfgOx(a1, 1uLL);
        if (result)
        {
          uint64_t result = ZinAneTd<11u>::SetCommonConvCfgOy(a1, 1uLL);
          if (result)
          {
            uint64_t result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, 1uLL);
            if (result)
            {
              ZinAneTd<11u>::SetUnicastEn(a1, 0);
              ZinAneTd<11u>::SetUnicastCin(a1, 1uLL);
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, a6);
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonConfigOutputDimension(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 368))(a2, 2);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 368))(a2, 4);
  unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 368))(a2, 3);
  if (!ZinAneTd<11u>::SetOrReturnWout(a1, v5) || !ZinAneTd<11u>::SetOrReturnHout(a1, v6)) {
    return 0;
  }

  return ZinAneTd<11u>::SetOrReturnCout(a1, v4);
}

BOOL ZinAneTd<11u>::HandleCommonConfigTileAndTaskInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 536) = 0;
  BOOL v4 = ZinAneTd<11u>::SetTileHeight(a1, *(void *)(a2 + 200));
  BOOL result = 0;
  if (v4)
  {
    BOOL result = ZinAneTd<11u>::SetTileOverlap(a1, *(void *)(a2 + 216));
    if (result)
    {
      BOOL result = ZinAneTd<11u>::SetTileOverlapPadTop(a1, *(void *)(a2 + 208));
      if (result)
      {
        BOOL result = ZinAneTd<11u>::SetTileOverlapPadBottom(a1, *(void *)(a2 + 224));
        if (result)
        {
          *(_DWORD *)(a1 + 548) = 0;
          ZinAneTd<11u>::SetNESmallSourceMode(a1, *(_DWORD *)(a2 + 144));
          int v18 = 0;
          ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
          uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
          int Pow2Log2 = ZinRoundUpToNextPow2Log2(NumNeededNEs);
          BOOL result = ZinCodegenUtil::ValueToRegister(Pow2Log2, (unsigned int *)(*(void *)(a1 + 1040) + 256), &v18);
          if (result)
          {
            *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFC7FFFF | ((v18 & 7) << 19);
            int v18 = 0;
            int v9 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 136));
            int v10 = v9 >= 4 ? 4 : v9;
            BOOL result = ZinCodegenUtil::ValueToRegister(v10, (unsigned int *)(*(void *)(a1 + 1040) + 232), &v18);
            if (result)
            {
              *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFFF8FF | ((v18 & 7) << 8);
              int v18 = 0;
              int v11 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 120));
              int v12 = v11 >= 4 ? 4 : v11;
              BOOL result = ZinCodegenUtil::ValueToRegister(v12, (unsigned int *)(*(void *)(a1 + 1040) + 240), &v18);
              if (result)
              {
                *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFF8FFF | ((v18 & 7) << 12);
                int v18 = 0;
                int v13 = ZinRoundUpToNextPow2Log2(*(void *)(a2 + 128));
                if (v13 >= 4) {
                  int v14 = 4;
                }
                else {
                  int v14 = v13;
                }
                BOOL result = ZinCodegenUtil::ValueToRegister(v14, (unsigned int *)(*(void *)(a1 + 1040) + 248), &v18);
                if (result)
                {
                  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFF8FFFF | ((v18 & 7) << 16);
                  int v18 = 0;
                  uint64_t v15 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
                  uint64_t v16 = MirInfoChannelAssignment::GetNumNeededNEs(v15);
                  int v17 = ZinRoundUpToNextPow2Log2(v16);
                  BOOL result = ZinCodegenUtil::ValueToRegister(v17, (unsigned int *)(*(void *)(a1 + 1040) + 256), &v18);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFC7FFFF | ((v18 & 7) << 19);
                    *(void *)(a1 + 568) = 0;
                    *(_DWORD *)(a1 + 552) = 0x100000;
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonConfigPerArch(uint64_t a1, ZinEngineLayerMirInfo **a2, unint64_t a3)
{
  ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize(ChannelAssignment);
  char Pow2Log2 = ZinRoundUpToNextPow2Log2(OCGSize);
  ZinAneTd<11u>::SetNEOcgSize(a1, Pow2Log2);
  (*((void (**)(uint64_t *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 44))(&v23, a2);
  (*((void (**)(void *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 41))(v22, a2);
  (*((void (**)(ZinEngineLayerMirInfo **))*a2 + 42))(a2);
  int v10 = v9;
  (*((void (**)(ZinEngineLayerMirInfo **))*a2 + 43))(a2);
  int v12 = v11;
  unint64_t v13 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 45))(a2, 1);
  unint64_t v14 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 46))(a2, 1);
  ZinAneTd<11u>::SetCommonConvCfg3dKd(a1, v22[2]);
  ZinAneTd<11u>::SetCommonConvCfg3dPz(a1, v24);
  ZinAneTd<11u>::SetCommonConvCfg3dSz(a1, v10);
  ZinAneTd<11u>::SetCommonConvCfg3dOz(a1, v12);
  BOOL result = ZinAneTd<11u>::SetOrReturnDin(a1, v13);
  if (result)
  {
    BOOL result = ZinAneTd<11u>::SetOrReturnDout(a1, v14);
    if (result)
    {
      ZinAneTd<11u>::SetCommonSourceRouting(a1, 1);
      int v16 = (*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 51))(a2);
      ZinAneTd<11u>::SetOutputTranspose(a1, v16);
      int v17 = a2[33];
      if (*((unsigned char *)v17 + 8))
      {
        if (!*((unsigned char *)v17 + 40)) {
          ZinAssertImpl("kernel_group_stride should have value when kernel_stride_enable is set");
        }
        unint64_t v18 = ZinAlignPower2(*((void *)v17 + 4), a3);
        int v19 = a2[33];
        if (!*((unsigned char *)v19 + 24)) {
          ZinAssertImpl("kernel_ocg_stride should have value when kernel_stride_enable is set");
        }
        unint64_t v20 = v18 / a3;
        unint64_t v21 = ZinAlignPower2(*((void *)v19 + 2), a3);
        ZinAneTd<11u>::SetKernelStrideRegisters(a1, v20, v21 / a3);
        int v17 = a2[33];
      }
      ZinAneTd<11u>::SetFillLowerNEFirst(a1, *((unsigned __int8 *)v17 + 2));
      ZinAneTd<1u>::Set1DWinogradMode(a1, *((unsigned __int8 *)a2[33] + 148));
      ZinAneTd<1u>::SetNEHalfWUMode(a1, *((unsigned char *)a2[33] + 149));
      return 1;
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::HandleTileDmaSrcConfig(ZinIrHalH13g *a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!ZinIrOpLayer::IsNELayer(this)) {
    ZinAssertImpl("Only NE layers allowed\n");
  }
  if (*((void *)this + 12) - *((void *)this + 11) < 0x20uLL)
  {
    uint64_t InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 0);
    uint64_t v39 = 0;
    int v38 = 0;
    ZinMemSourceIndexTranslator::GetDMASrcIndex(this, 0, &v39, v11);
    if (ZinMemSourceIndexTranslator::GetL2SrcType(this, 0, &v38))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinAneTd<17u>::HandleTileDmaSrcConfig();
      }
LABEL_6:
      unsigned int v12 = 0;
      int v13 = 1;
      goto LABEL_7;
    }
    BOOL v22 = v38 != 0;
    uint64_t v23 = v39;
    uint64_t v24 = *(void *)(*((void *)this + 33) + 96 * v39 + 752);
    if (!v24)
    {
      int v13 = 1;
      unsigned int v12 = 1;
      goto LABEL_7;
    }
    uint64_t v25 = *((void *)this + 25);
    if (v25 && (unint64_t v26 = *((void *)this + 24), v26 <= 1))
    {
      BOOL v27 = v26 == 1;
      BOOL v28 = v26 != 1 || v26 == 0;
      LOBYTE(v36) = v27;
      HIDWORD(v36) = v28;
      LODWORD(v35) = 1;
      BYTE4(v35) = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 304))(v25);
      uint64_t v23 = v39;
    }
    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
    }
    uint64_t v29 = (void *)*((void *)this + (int)v23 + 30);
    if (v29) {
    if (!ZinCodegen::SetPrimarySourceDMA<11u>(InputTensor, a1, *((void *)this + 33), v23, v22, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), SBYTE4(v36), v36, SBYTE4(v35), (uint64_t)v29))goto LABEL_6;
    }
    **(void **)(a5 + 128) = v24;
    uint64_t v37 = 0;
    ZinMemSourceIndexTranslator::GetDMASrcIndex(this, (const ZinANELayer *)1, &v37, v30);
    uint64_t v31 = *(void *)(*((void *)this + 33) + 96 * v37 + 752);
    if (v31)
    {
      if (v35 && *((void *)this + 12) - *((void *)this + 11) >= 9uLL)
      {
        BOOL v32 = (const void *)*((void *)this + (int)v37 + 30);
        if (v32) {
        else
        }
          uint64_t v33 = 0;
        int v13 = 1;
        uint64_t v34 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 1uLL);
        if (!ZinCodegen::SetSecondarySourceDMA<11u>(v34, (uint64_t)a1, *((void *)this + 33), v37, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), HIDWORD(v36), v36, SBYTE4(v35), (uint64_t)v33))goto LABEL_35; {
        uint64_t v31 = *(void *)(*((void *)this + 33) + 96 * v37 + 752);
        }
      }
      int v13 = 0;
      *(void *)(*(void *)(a5 + 128) + 8) = v31;
    }
    else
    {
      int v13 = 0;
    }
LABEL_35:
    unsigned int v12 = 0;
LABEL_7:
    if (v13) {
      return v12;
    }
    else {
      return 1;
    }
  }
  uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinAneTd<11u>::HandleTileDmaSrcConfig(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleL2Config(uint64_t a1, void *a2, void *a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  int v6 = *(_DWORD *)(a2[8] + 8);
  if (v6 == 85)
  {
    if (!a2[54]) {
      goto LABEL_28;
    }
    uint64_t v10 = a2[17];
    int v9 = *(_DWORD *)(v10 + 376);
    int v11 = (_DWORD *)a3[183];
    unsigned int v12 = (_DWORD *)a3[184];
    if (v11 != v12)
    {
      while (*v11 != v9)
      {
        if (++v11 == v12)
        {
          int v11 = (_DWORD *)a3[184];
          break;
        }
      }
    }
    if (v11 == v12 || v9 == 4 || v9 == 2)
    {
      BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v13) {
        ZinAneTd<4u>::HandleL2Config(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      return 0;
    }
    int v23 = *(_DWORD *)(v10 + 380);
    uint64_t v22 = a1;
    goto LABEL_27;
  }
  if (v6 == 90)
  {
    int v21 = *(_DWORD *)(*(void *)(a2[57] + 64) + 12);
    if (v21 == 8)
    {
      uint64_t v22 = a1;
      int v9 = 4;
    }
    else
    {
      if (v21 != 7) {
        goto LABEL_28;
      }
      uint64_t v22 = a1;
      int v9 = 2;
    }
    goto LABEL_26;
  }
  if (v6 != 89) {
    goto LABEL_28;
  }
  uint64_t v7 = *(void *)(a2[54] + 64);
  int v8 = *(_DWORD *)(v7 + 104);
  if (!v8)
  {
    if (*(_DWORD *)(v7 + 100) == 2)
    {
      int v9 = 2;
      goto LABEL_24;
    }
LABEL_41:
    BOOL v63 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v63) {
      ZinAneTd<4u>::HandleL2Config(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    return 0;
  }
  if (v8 != 1)
  {
    int v9 = *(_DWORD *)(v7 + 100);
    goto LABEL_24;
  }
  if (*(_DWORD *)(v7 + 100) != 4) {
    goto LABEL_41;
  }
  int v9 = 4;
LABEL_24:
  uint64_t v22 = a1;
LABEL_26:
  int v23 = 0;
LABEL_27:
  ZinAneTd<11u>::SetPaddingMode(v22, v9, v23);
LABEL_28:
  int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2[33], 0);
  ZinAneTd<11u>::SetL2Src1SourceType(a1, L2RdMode);
  if (!ZinCodegen::SetPrimaryL2SourceBuffer<11u>((uint64_t)a3, (uint64_t)a2, (ZinIrHalH13g *)a1))
  {
    BOOL v39 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v39) {
      ZinAneTd<1u>::HandleNEControlCommon(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    return 0;
  }
  uint64_t v25 = (*(uint64_t (**)(void *, void, void))(*a2 + 32))(a2, 0, 0);
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2[33]);
  if (!L2WrSymbol)
  {
    BOOL v47 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v47) {
      ZinAneTd<4u>::HandleL2Config(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    return 0;
  }
  uint64_t v27 = (uint64_t)L2WrSymbol;
  if (ZinIrSymbol::GetMemType(L2WrSymbol) != 2)
  {
    BOOL v55 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v55) {
      ZinAneTd<17u>::HandleL2Config(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    return 0;
  }
  ZinAneTd<11u>::SetL2ResultType(a1, *(_DWORD *)(a2[33] + 1632));
  ZinAneTd<11u>::SetL2BfrMode(a1, *(unsigned __int8 *)(a2[33] + 312));
  ZinAneTd<11u>::SetL2ResultCfgDmaFmt(a1, *(_DWORD *)(v25 + 88));
  ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a1, *(void *)(a2[33] + 320));
  uint64_t v28 = a2[33];
  if ((*(_DWORD *)(v28 + 1632) - 1) > 1)
  {
    unsigned int v30 = 1;
  }
  else
  {
    uint64_t v29 = ZinTensorDescriptorDmaInterleave(*(void *)(v28 + 944) + 208);
    unsigned int v30 = v29;
    if (!v29)
    {
      BOOL v31 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v31) {
        ZinAneTd<6u>::HandleL2Config(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      return 0;
    }
  }
  ZinAneTd<11u>::SetL2ResultInterleave(a1, v30);
  ZinAneTd<11u>::SetL2ResultBaseAddr(a1, *(void *)(v27 + 16) % a3[51] / a3[52]);
  ZinAneTd<11u>::SetL2ResultChannelStride(a1, *(_DWORD *)(a2[33] + 280));
  long long v77 = *(_OWORD *)(v27 + 520);
  unsigned int OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v77);
  unsigned int NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v77);
  ZinAneTd<4u>::SetL2ResultWrapAddrOffset(a1, OCGSize);
  ZinAneTd<4u>::SetL2ResultWrapAddr(a1, NumNeededNEs);
  if ((ZinCodegen::SetL2ResultWrapInfo<11u>(a1, v27) & 1) == 0) {
    return 0;
  }
  uint64_t v76 = 0;
  BOOL L2RowStride = ZinCodegen::GetL2RowStride((ZinCodegen *)(v25 + 48), *(const ZinTensorDimensions **)(a2[33] + 272), *(unsigned int *)(*(void *)(a1 + 1040) + 404), &v76, v73);
  if (L2RowStride)
  {
    ZinAneTd<11u>::SetL2ResultRowStride(a1, v76);
    ZinAneTd<11u>::SetL2ResultDepthStride(a1, *(_DWORD *)(a2[33] + 296));
    ZinAneTd<11u>::SetL2ResultGroupStride(a1, *(_DWORD *)(a2[33] + 288));
    if (a2[47]) {
      *(_DWORD *)(a1 + 796) |= 1u;
    }
  }
  return L2RowStride;
}

BOOL ZinAneTd<11u>::HandleNEConfig(uint64_t a1, uint64_t a2, const ZinIrHalParameters *a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v7 = (ZinIrKernel **)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 136);
  if (!v6)
  {
    BOOL KernelGroupReuse = GetKernelGroupReuse((const ZinNELayer *)a2);
    int v9 = 0;
    int v10 = 0;
    goto LABEL_7;
  }
  unsigned int v8 = *(unsigned __int8 *)(v6 + 448);
  int v9 = (v8 >> 3) & 1;
  int v10 = (v8 >> 4) & 1;
  BOOL KernelGroupReuse = GetKernelGroupReuse((const ZinNELayer *)a2);
  if ((v8 & 4) == 0)
  {
LABEL_7:
    BOOL ShouldUseSparseBinaryForCompression = 0;
    BOOL v16 = 0;
    int v14 = 4;
    goto LABEL_8;
  }
  unsigned int v12 = *v7;
  BOOL v13 = *(unsigned __int8 **)(*((void *)*v7 + 100) + 40);
  if (!v13)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<4u>::HandleNEConfig(result, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  int v14 = *((_DWORD *)v12 + 44);
  int v15 = *v13;
  BOOL v16 = v15 != 0;
  if (v15)
  {
    BOOL ShouldUseSparseBinaryForCompression = ZinIrKernel::ShouldUseSparseBinaryForCompression(v12);
    unsigned int v12 = *v7;
  }
  else
  {
    BOOL ShouldUseSparseBinaryForCompression = 0;
  }
  if (ZinIrKernel::HasVectorPalettizedWeight(v12))
  {
    int v33 = ZinLog2OfPow2(*((void *)*v7 + 52));
    ZinAneTd<4u>::SetPaletteBlockSize(a1, v33);
  }
LABEL_8:
  ZinAneTd<11u>::SetKernelPalettizedEn(a1, v14);
  ZinAneTd<11u>::SetKernelPalettizedBits(a1, v14);
  ZinAneTd<11u>::SetKernelSparseFmt(a1, v16);
  ZinAneTd<11u>::SetKernelSparseBinary(a1, ShouldUseSparseBinaryForCompression);
  ZinAneTd<11u>::SetGroupKernelReuse(a1, KernelGroupReuse);
  int v65 = 0;
  int MacCfgOpMode = GetMacCfgOpMode((ZinIrOpLayer *)a2, (uint64_t)a3, &v65);
  BOOL result = 0;
  if (!MacCfgOpMode)
  {
    ZinAneTd<11u>::SetOpMode(a1, v65);
    int MacCfgKernelMode = GetMacCfgKernelMode((const ZinNELayer *)a2, a3);
    ZinAneTd<11u>::SetKernelMode(a1, MacCfgKernelMode);
    BOOL MacCfgPassthroughEnable = GetMacCfgPassthroughEnable((const ZinNELayer *)a2, a3);
    ZinAneTd<1u>::SetPassthroughEnable(a1, MacCfgPassthroughEnable);
    int v64 = 0;
    int KernelCfgKernelFmt = GetKernelCfgKernelFmt((const ZinNELayer *)a2, a3, v65, &v64);
    BOOL result = 0;
    if (!KernelCfgKernelFmt)
    {
      ZinAneTd<11u>::SetKernelFmt(a1, v64);
      uint64_t v23 = *(void *)(a2 + 420);
      if ((v23 & 0xFF00000000) == 0) {
        ZinAssertImpl("Binary point is missing from NE layer.");
      }
      ZinAneTd<11u>::SetNEBinaryPoint(a1, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296))(a1, a2) & 1) == 0)
      {
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        ZinAneTd<4u>::HandleNEConfig(result, v34, v35, v36, v37, v38, v39, v40);
        return 0;
      }
      uint64_t v24 = *(void *)(a2 + 392);
      if (v24) {
        int v25 = *(_DWORD *)(v24 + 192);
      }
      else {
        int v25 = 0;
      }
      ZinAneTd<11u>::SetNENonLinearMode(a1, v25, (uint64_t)a3 + 1536);
      uint64_t v41 = *(ZinDeQuantLayer **)(a2 + 408);
      if (v41)
      {
        int ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v41);
        ZinAneTd<4u>::SetQuantizationOutputZeroOffset(a1, 1, ScalarZeroPoint);
      }
      if (v9)
      {
        unint64_t v43 = *(void *)((char *)*v7 + 180);
        char v44 = 1;
      }
      else
      {
        unint64_t v43 = 0;
        char v44 = 0;
      }
      ZinAneTd<11u>::SetNEPostScale(a1, v43, v44);
      if (v10)
      {
        unint64_t v45 = *(void *)((char *)*v7 + 188);
        char v46 = 1;
      }
      else
      {
        char v46 = 0;
        unint64_t v45 = 0;
      }
      ZinAneTd<11u>::SetNEBias(a1, v45, v46);
      if (*(_DWORD *)(*(void *)(a2 + 64) + 8) == 85) {
        uint64_t v47 = ZinPEElementWiseLayer::GetSecondOperandBroadcast((ZinPEElementWiseLayer *)a2) & 0xFFFFFFFFFFLL;
      }
      else {
        uint64_t v47 = 0;
      }
      ZinAneTd<11u>::SetNEMatrixVectorBias(a1, (ZinIrKernel **)(a2 + 136), v47);
      if (*v7) {
        int HasZeroPoint = ZinIrKernel::HasZeroPoint(*v7);
      }
      else {
        int HasZeroPoint = 0;
      }
      ZinAneTd<4u>::SetKernelAsymQuantEn(a1, HasZeroPoint);
      v50 = *v7 && (uint64_t v49 = (unsigned __int8 *)*((void *)*v7 + 100)) != 0 && *v49 != 0;
      ZinAneTd<4u>::SetKernelDetectZeros(a1, v50);
      int v51 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
      uint64_t v52 = *(void *)(a2 + 136);
      if (v51)
      {
        if (*(_DWORD *)(v52 + 408) != 1) {
          ZinAssertImpl("Tensor kernel is not using aligned format!");
        }
        BOOL v53 = 0;
      }
      else if (v52)
      {
        BOOL v53 = *(_DWORD *)(v52 + 408) != 1;
      }
      else
      {
        BOOL v53 = 1;
      }
      ZinAneTd<11u>::SetKernelAlignmentFormat(a1, v53);
      ZinAneTd<4u>::SetDoubleInt8Enable(a1, *(unsigned __int8 *)(*(void *)(a2 + 264) + 1));
      ZinAneTd<11u>::SetKernelSparseBlockSize(a1, 0);
      uint64_t v54 = *(ZinIrKernel **)(a2 + 136);
      if (v54 && ZinIrKernel::HasVectorPalettizedWeight(v54) && **(unsigned char **)(*((void *)*v7 + 100) + 40))
      {
        char v55 = ZinLog2OfPow2(*((void *)*v7 + 52));
        ZinAneTd<11u>::SetKernelSparseBlockSize(a1, v55);
      }
      if (*(_DWORD *)(*(void *)(a2 + 64) + 8) == 89)
      {
        unsigned int v56 = *(_DWORD *)(*(void *)(*(void *)(a2 + 432) + 64) + 104);
        ZinAneTd<11u>::SetArgOutputSelect(a1, v56);
        ZinAneTd<11u>::SetMaxPoolMode(a1, v56);
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 288))(a1, a2)) {
        return 1;
      }
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneTd<4u>::HandleNEConfig(result, v57, v58, v59, v60, v61, v62, v63);
        return 0;
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(a2 + 64) + 8) == 93)
  {
    uint64_t v2 = *(void *)(*(void *)(a2 + 432) + 64);
    unsigned int v3 = *(void **)(v2 + 48);
    if (v3 != (void *)(v2 + 56))
    {
      uint64_t v4 = 0;
      do
      {
        unint64_t v5 = v3[4];
        if (v5 >= 8) {
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        }
        uint64_t v6 = (void *)v3[1];
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = (void *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (void *)v3[2];
            BOOL v8 = *v7 == (void)v3;
            unsigned int v3 = v7;
          }
          while (!v8);
        }
        v4 |= 1 << v5;
        unsigned int v3 = v7;
      }
      while (v7 != (void *)(v2 + 56));
    }
    ZinAneTd<1u>::SetRcasKeyMask();
  }
  return 1;
}

BOOL ZinAneTd<11u>::HandleTileDmaDstConfig(int a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!ZinIrOpLayer::IsNELayer(this) && !ZinIrOpLayer::IsTransposeEngineLayer(this)) {
    ZinAssertImpl("Only NE and TransposeEngineLayer allowed\n");
  }
  int v9 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  uint64_t v10 = *((void *)this + 32);
  if (v10) {
    BOOL v11 = *(_DWORD *)(*(void *)(v10 + 64) + 8) == 102;
  }
  else {
    BOOL v11 = 0;
  }
  uint64_t v12 = *((void *)this + 33);
  if ((*(_DWORD *)(v12 + 1632) - 1) > 1) {
    return 1;
  }
  BOOL v13 = *(ZinIrHalH13g **)(a5 + 200);
  uint64_t v14 = *(void *)(a3 + 528);
  uint64_t v15 = *(void *)(a3 + 560);

  return ZinCodegen::SetResultDMA<11u>(v9, v13, v12, a4, v14, v15, v11);
}

uint64_t ZinAneTd<11u>::HandleKernelDmaSrcConfig(uint64_t a1, uint64_t *a2, uint64_t *a3, ZinIrMemoryPool *a4, uint64_t a5)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 64))(a1, *(int *)(*a3 + 8));
  ZinAneTd<11u>::InitializeKernelDmaSrcConfig(a1);
  ZinAneTd<11u>::HandleKernelDmaSrcConfigAligned((_DWORD *)a1, (ZinIrOpLayer *)a2, a3, a4);
  char v15 = 0;
  ZinAneTd<11u>::HandleKernelDmaSrcConfigCoeffBuffer(a1, (ZinEngineLayerMirInfo **)a2, a3, a5, a2 + 17, &v15);
  if (!v15) {
    return 1;
  }
  ZinAneTd<17u>::AddKernelSymbols(a1, (ZinIrKernel **)a2, (uint64_t)a3, a5);
  unsigned __int8 v14 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock((const ZinIrOpLayer *)a2, a4, &v14)) {
    return 0;
  }
  if (*(unsigned char *)(a3[1] + 378)) {
    BOOL v11 = *(unsigned char *)(a5 + 24) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  uint64_t v12 = *(void *)(a5 + 8) - 24;
  uint64_t v10 = 1;
  ZinAneTdHw_v11::AddRelocInfo((uint64_t *)(a1 + 8), v12, 1602, v14, 1, 1, v11, 0);
  if (*(unsigned char *)(*a3 + 1271)) {
    ZinAneTd<4u>::SetKernelDmaSrcConfigPrefetch();
  }
  return v10;
}

uint64_t ZinAneTd<11u>::HandleEngineLayer(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, CFArrayRef *a7)
{
  if (!*(void *)(a2 + 264))
  {
    BOOL v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v16) {
      ZinAneTd<4u>::HandleEngineLayer(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    CFStringRef v15 = @"CodeGenerationFailure";
    goto LABEL_10;
  }
  ZinIrMemoryPool::GetSections((uint64_t)a6[3], 1, v25);
  unsigned __int8 v14 = *(ZinIrSection **)(v25[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v25);
  if ((ZinAneInstruction::HandleTdHeader(a4, (ZinEngineLayerMirInfo **)a2, a3, *a6, v14) & 1) == 0)
  {
    CFStringRef v15 = @"InvalidHWHeader";
    goto LABEL_10;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 416))(a1);
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a2))
  {
    if (!HandlePELayer<11u>((ZinIrOpLayer *)a2, a3, a4, **a6, a5))
    {
      CFStringRef v15 = @"PEConfigFailure";
LABEL_10:
      ZinIrNetworkStatus::SetError(a7, v15);
      return 0;
    }
  }
  else
  {
    if (!ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2)) {
      ZinAssertImpl("TransposeEngineLayer based graph should not need DMA buffer\n");
    }
    if (!HandleNELayer<11u>((const ZinIrOpLayer *)a2, a3, (ZinAneInstruction *)a4, (int **)*a6, (ZinIrMemoryPool *)a6[3], a5, a7))return 0; {
  }
    }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 328))(a1, **a6, a2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 344))(a1, a2);
    if (result)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 352))(a1, a2, a6[2]);
      if (ZinAneTd<11u>::CodegenIntermediateMCacheDSIDs(a1, a2, *a6, (uint64_t)a6[2]))
      {
        if (*(unsigned char *)(a4 + 198)) {
          *(_DWORD *)(*(void *)(a4 + 200) + 44) |= 0x80u;
        }
        return 1;
      }
      else
      {
        uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result)
        {
          ZinAneTd<17u>::HandleEngineLayer();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::HandleTextureConfig(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a3[25])
  {
    uint64_t v5 = a3[24];
    if (v5)
    {
      if (v5 != 1) {
        return 1;
      }
      uint64_t v6 = a3 + 31;
    }
    else
    {
      uint64_t v6 = a3 + 30;
    }
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (v5)
      {
        (*(void (**)(void **__return_ptr, uint64_t *))(*a3 + 512))(__p, a3);
        BOOL v8 = __p[0];
        uint64_t v9 = *((void *)__p[0] + 1);
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t *))(*a3 + 512))(__p, a3);
        BOOL v8 = __p[0];
        uint64_t v9 = *(void *)__p[0];
      }
      long long v10 = *(_OWORD *)(v9 + 64);
      v24[0] = *(_OWORD *)(v9 + 48);
      v24[1] = v10;
      uint64_t v25 = *(void *)(v9 + 80);
      __p[1] = v8;
      operator delete(v8);
      if (!ZinAneTd<11u>::SetTextureExtMax(a1, v24)) {
        ZinAssertImpl("Codegen Error: Invalid TexExt XY/GZ is given");
      }
      LODWORD(__p[0]) = *(_DWORD *)(v7 + 192);
      ZinAneTd<11u>::SetTextureMode(a1, __p);
      BOOL v11 = *(void **)(v7 + 196);
      uint64_t v21 = *(void *)(v7 + 232);
      __p[0] = v11;
      ZinAneTd<11u>::SetTextureNormalization(a1, (int *)__p, (int *)&v21);
      __p[0] = *(void **)(v7 + 204);
      ZinAneTd<11u>::SetTextureFilter(a1, __p);
      LOWORD(__p[0]) = *(_WORD *)(v7 + 212);
      ZinAneTd<11u>::SetTextureWrap(a1, (unsigned __int8 *)__p);
      ZinAneTd<11u>::SetTextureIndexTensorInterleave(a1, *(void *)(v7 + 224));
      ZinAneTd<11u>::SetTextureBackgroundEn(a1, *(unsigned __int8 *)(v7 + 214));
      if (*(unsigned char *)(v7 + 214)) {
        ZinAneTd<11u>::SetTextureBackgroundVal(a1, *(_WORD *)(v7 + 216));
      }
      *(_DWORD *)(a1 + 80std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 800) & 0xFFFFF0FF | ((HIBYTE(*(unsigned __int16 *)(a1 + 658)) & 0xF) << 8);
      if (*(unsigned char *)(a2 + 1253) && *(unsigned char *)(v7 + 215))
      {
        ZinAneTd<8u>::SetTexturePreserveFraction(a1, 1);
        ZinAneTd<11u>::SetL2Src1DmaFormat(a1, 3);
      }
      else
      {
        ZinAneTd<8u>::SetTexturePreserveFraction(a1, 0);
        *(_DWORD *)(a1 + 80std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 800) & 0xFFFFFF3F | ((*(_DWORD *)(a1 + 656) & 3) << 6);
      }
      int v12 = *(_DWORD *)(v7 + 192);
      if ((v12 - 1) <= 1)
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v7 + 240);
        int v23 = *(_DWORD *)(v7 + 256);
        ZinAneTd<11u>::SetTextureSrcPermute(a1, __p);
        *(_OWORD *)std::string __p = *(_OWORD *)(v7 + 260);
        int v23 = *(_DWORD *)(v7 + 276);
        ZinAneTd<11u>::SetTextureIndPermute(a1, __p);
        *(_OWORD *)std::string __p = *(_OWORD *)(v7 + 280);
        int v23 = *(_DWORD *)(v7 + 296);
        ZinAneTd<11u>::SetTextureIdxPermute(a1, __p);
        int v12 = *(_DWORD *)(v7 + 192);
      }
      if ((v12 - 3) <= 1)
      {
        uint64_t v13 = *(void *)(v7 + 264);
        uint64_t v14 = *(void *)(v7 + 272);
        if (*(void *)(a2 + 2080) < (unint64_t)((v14 - v13) >> 5)) {
          ZinAssertImpl("Codegen Error: Invalid Texture CropCfg");
        }
        if (v14 != v13)
        {
          uint64_t v15 = 0;
          unint64_t v16 = 0;
          do
          {
            ZinAneTd<11u>::SetTextureCropCfg(a1, (_DWORD *)(v13 + v15), v16++);
            uint64_t v13 = *(void *)(v7 + 264);
            v15 += 32;
          }
          while (v16 < (*(void *)(v7 + 272) - v13) >> 5);
        }
        uint64_t v17 = *(void *)(v7 + 240);
        uint64_t v18 = *(void *)(v7 + 248);
        if (*(void *)(a2 + 2072) < (unint64_t)((v18 - v17) >> 2)) {
          ZinAssertImpl("Codegen Error: Invalid Texture CropCoeff");
        }
        if (v18 != v17)
        {
          unint64_t v19 = 0;
          do
          {
            ZinAneTd<11u>::SetTextureCropCoeff(a1, *(_DWORD *)(v17 + 4 * v19), v19);
            ++v19;
            uint64_t v17 = *(void *)(v7 + 240);
          }
          while (v19 < (*(void *)(v7 + 248) - v17) >> 2);
        }
        LODWORD(__p[0]) = *(_DWORD *)(v7 + 288);
        ZinAneTd<11u>::SetTextureGroupValue(a1, __p);
        LODWORD(__p[0]) = *(_DWORD *)(v7 + 292);
        ZinAneTd<11u>::SetTextureDepthValue(a1, __p);
        ZinAneTd<8u>::SetTextureCropBatchSplit(a1, *(unsigned __int8 *)(v7 + 296));
      }
    }
  }
  return 1;
}

uint64_t ZinAneTd<11u>::HandleL2Hazards(uint64_t a1, uint64_t a2, uint64_t a3, ZinIrOpLayer *a4, void *a5)
{
  uint64_t v18 = a4;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a5, &v18)[3];
  uint64_t v7 = (unsigned char *)*((void *)a4 + 33);
  if (*((void *)a4 + 12) != *((void *)a4 + 11))
  {
    for (unint64_t i = 0; i < (uint64_t)(*((void *)a4 + 12) - *((void *)a4 + 11)) >> 3; ++i)
    {
      uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(a4, i);
      if (((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(void *)a4 + 200))(a4, InputTensor) & 1) == 0
        && ZinIrOpLayer::IsANELayer(a4))
      {
        LODWORD(v18) = 0;
        if (!ZinMemSourceIndexTranslator::GetL2SrcType(a4, i, (int *)&v18))
        {
          uint64_t L2SrcDep = ZinMirL2Config::GetL2SrcDep((uint64_t)(v7 + 120), (int)v18);
          (*(void (**)(void))(**(void **)(v6 + 200) + 32))();
          uint64_t v17 = 0;
          if (GetProgrammedDependencyOffsetAndDimension(L2SrcDep + 8, &v17, (_DWORD *)&v17 + 1)) {
            return 0;
          }
          if (i) {
            uint64_t v11 = 27;
          }
          else {
            uint64_t v11 = 26;
          }
          (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), v11, v17);
          (*(void (**)(void))(**(void **)(v6 + 200) + 32))();
        }
      }
    }
  }
  if (!*(unsigned char *)(v6 + 188))
  {
    if (v7[328]) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v7[330];
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 15, v12);
    if (v7[329]) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v7[331];
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 16, v13);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 17, v7[334]);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 18, v7[335]);
    if (v7[336]) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v7[338];
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 19, v14);
    if (v7[337]) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v7[339];
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 20, v15);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 21, v7[342]);
    (*(void (**)(void, uint64_t, void))(**(void **)(v6 + 200) + 32))(*(void *)(v6 + 200), 22, v7[343]);
  }
  return 1;
}

unint64_t ZinAneTd<11u>::SetRAWdmaDependencySrc1(ZinIrHalH13g *a1, int a2, unsigned int a3)
{
  ZinAneTd<11u>::SetTileDmaSrc1DependencyMode((uint64_t)a1, a2);
  if (a2 == 1) {
    ZinIrHalH13g::~ZinIrHalH13g(a1);
  }

  return ZinAneTd<11u>::SetTileDmaSrc1DependencyInterval((uint64_t)a1, a3);
}

void ZinAneTd<11u>::SetRAWdmaDependencySrc2(ZinIrHalH13g *a1, int a2)
{
  ZinAneTd<11u>::SetTileDmaSrc1DependencyMode((uint64_t)a1, a2);
  if (a2 == 1) {
    ZinIrHalH13g::~ZinIrHalH13g(a1);
  }

  ZinIrHalH13g::~ZinIrHalH13g(a1);
}

uint64_t ZinAneTd<11u>::InitializeKernelDmaSrcConfig(uint64_t a1)
{
  for (uint64_t i = 0; i != 16; ++i)
    ZinAneTd<11u>::SetKernelDmaSrcCoeffDmaCacheHint(a1, 1, i);
  ZinAneTd<11u>::SetKernelDmaSrcPostScaleDmaCacheHint(a1, 1);
  ZinAneTd<11u>::SetKernelDmaSrcBiasDmaCacheHint(a1, 1);
  ZinAneTd<11u>::SetKernelDmaSrcPaletteLutDmaCacheHint(a1, 1);

  return ZinAneTd<11u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(a1, 1);
}

void ZinAneTd<11u>::HandleKernelDmaSrcConfigAligned(_DWORD *a1, ZinIrOpLayer *a2, void *a3, ZinIrMemoryPool *a4)
{
  uint64_t v4 = *((void *)a2 + 17);
  if (v4 && *(void *)(v4 + 800))
  {
    unsigned __int8 v41 = 0;
    if (ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a2, a4, &v41)) {
      ZinAssertImpl("Cannot get barid for kernels");
    }
    unint64_t v39 = *(void *)(*a3 + 528);
    BOOL v8 = (long long *)*((void *)a2 + 17);
    if (*(unsigned char *)(a3[1] + 132))
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v40.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
      }
    }
    else
    {
      ZinIrKernel::GetFinalHash((ZinIrKernel *)v8, &v42);
      long long v10 = std::string::insert(&v42, 0, "K", 1uLL);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v12 = *(void **)(v4 + 800);
    uint64_t v13 = v12[1];
    BOOL v14 = v13 != 0;
    if (v13)
    {
      int v15 = ZinDivRoundUp(v13, v39);
      uint64_t v16 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
      }
      uint64_t v18 = &v42;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, size + 7);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v18 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v19 = &v40;
        }
        else {
          unint64_t v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        memmove(v18, v19, size);
      }
      strcpy((char *)v18 + size, "_actlut");
      ZinAneTd<11u>::SetAlignedKernelNonLinearLut((uint64_t)a1, v16, (uint64_t)&v42, v15);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v20 = v12[2];
    if (v20)
    {
      int v21 = ZinDivRoundUp(v20, v39);
      uint64_t v22 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v40.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v23 + 7);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v42;
      }
      else {
        uint64_t v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v23)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v25 = &v40;
        }
        else {
          uint64_t v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "_pallut");
      ZinAneTd<11u>::SetAlignedKernelPaletteLut((uint64_t)a1, v22, (uint64_t)&v42, v21);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      BOOL v14 = 1;
    }
    uint64_t v26 = v12[3];
    if (v26)
    {
      int v27 = ZinDivRoundUp(v26, v39);
      uint64_t v28 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v29 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v29 = v40.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v29 + 6);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v42;
      }
      else {
        uint64_t v30 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v29)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v31 = &v40;
        }
        else {
          uint64_t v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        memmove(v30, v31, v29);
      }
      strcpy((char *)v30 + v29, "_scale");
      ZinAneTd<11u>::SetAlignedKernelPostScale(a1, v28, (uint64_t)&v42, v27);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      uint64_t v32 = v12[4];
      if (!v32) {
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v32 = v12[4];
      if (!v32)
      {
        if (!v14)
        {
LABEL_72:
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_68:
        ZinAneTd<8u>::SetKernelDmaSrcEnable((uint64_t)a1);
        a1[11] = a1[11] & 0xFFFFFFDF | (32 * **(unsigned __int8 **)(*(void *)(v4 + 800) + 40));
        if (*(_DWORD *)(*((void *)a2 + 17) + 176))
        {
          uint64_t v38 = *(void *)(*(void *)(v4 + 800) + 40);
          if (!*(unsigned char *)v38) {
            ZinAneTd<8u>::SetAlignedCoeffSizePerCh((uint64_t)a1, *(void *)(v38 + 8));
          }
        }
        ZinAneTd<11u>::SetAlignedKernelRelocationCommand((uint64_t)a1, v12, v41, (const void **)&v40.__r_.__value_.__l.__data_, *(unsigned __int8 *)(a3[1] + 378));
        goto LABEL_72;
      }
    }
    int v33 = ZinDivRoundUp(v32, v39);
    uint64_t v34 = v41;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v40.__r_.__value_.__l.__size_;
    }
    uint64_t v36 = &v42;
    std::string::basic_string[abi:ne180100]((uint64_t)&v42, v35 + 5);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v36 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if (v35)
    {
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v40;
      }
      else {
        uint64_t v37 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      memmove(v36, v37, v35);
    }
    strcpy((char *)v36 + v35, "_bias");
    ZinAneTd<11u>::SetAlignedKernelBias(a1, v34, (uint64_t)&v42, v33);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    goto LABEL_68;
  }
}

void sub_21131AE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<11u>::HandleKernelDmaSrcConfigCoeffBuffer(uint64_t result, ZinEngineLayerMirInfo **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, unsigned char *a6)
{
  uint64_t v9 = result;
  uint64_t v10 = *a3;
  uint64_t v11 = *a5;
  if (*a5 && (uint64_t v12 = *(void *)(v11 + 800)) != 0)
  {
    char v29 = 0;
    uint64_t v28 = *(void *)(v11 + 800);
    uint64_t v13 = *(void *)(v12 + 40);
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v13 = 0;
    char v29 = 1;
  }
  if (v11) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  if (*(_DWORD *)(v10 + 8))
  {
    unint64_t v16 = 0;
    unint64_t v17 = *(void *)(v10 + 528);
    uint64_t v18 = 40;
    do
    {
      if (v15
        && (ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]),
            MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) > v16))
      {
        uint64_t v20 = *(void *)(*(void *)(v13 + 32) + v18);
        BOOL v21 = v20 != 0;
        *a6 |= v21;
        ZinAneTd<10u>::SetKernelDmaSrcCoeffDmaEn(v9, v21, v16);
        if (v20)
        {
          ZinAneTd<8u>::SetKernelDmaSrcEnable(v9);
          uint64_t v22 = *(void *)(v13 + 32);
          if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v13 + 40) - v22) >> 3) <= v16) {
            ZinAssertImpl("Kernel DMA NE number greater than kernel data prepped\n");
          }
          if (*(unsigned char *)(*a3 + 1255))
          {
            if (*((unsigned char *)a2[33] + 2))
            {
              if ((*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 15))(a2))
              {
                unsigned int v23 = ZinDivRoundUp(*((void *)a2[33] + 6), v17);
                ZinAneTd<11u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v23, v16);
                LODWORD(v24) = ZinDivRoundUp(*(void *)(*((void *)a2[33] + 7) + 8 * v16), v17);
                goto LABEL_32;
              }
              uint64_t v22 = *(void *)(v13 + 32);
            }
            unsigned int v26 = ZinDivRoundUp(*(void *)(v22 + v18), v17);
            ZinAneTd<11u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v26, v16);
            if ((v29 & 1) != 0 || !*(unsigned char *)(v28 + 1)) {
              unint64_t v27 = *(void *)(*(void *)(v13 + 32) + v18 - 40);
            }
            else {
              unint64_t v27 = **(void **)(v13 + 32);
            }
            unint64_t v24 = v27 / v17;
LABEL_32:
            ZinAneTd<11u>::SetKernelDmaSrcCoeffBaseOffset(v9, v24, v16);
          }
          else
          {
            unsigned int v25 = ZinDivRoundUp(*(void *)(v22 + v18), v17);
            ZinAneTd<11u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v25, v16);
          }
          uint64_t result = ZinAneTd<11u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
          goto LABEL_23;
        }
      }
      else
      {
        ZinAneTd<10u>::SetKernelDmaSrcCoeffDmaEn(v9, 0, v16);
      }
      uint64_t result = ZinAneTd<11u>::SetKernelDmaSrcCoeffMemBufferSize(v9, 1u, v16);
LABEL_23:
      ++v16;
      v18 += 56;
    }
    while (v16 < *(unsigned int *)(*a3 + 8));
  }
  return result;
}

BOOL HandlePELayer<11u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(ZinIrHalH13g **)(a3 + 200);
  uint64_t v10 = (void *)*((void *)a1 + 33);
  SetPatchSettings<11u>((uint64_t)v9, (uint64_t)(v10 + 15));
  unint64_t v11 = (*(uint64_t (**)(ZinIrOpLayer *, void))(*(void *)a1 + 368))(a1, 0);
  ZinAneTd<11u>::SetOrReturnNumGroups((uint64_t)v9, v11);
  if ((PECodegenUtils::HandlePrimarySourceTensor<11u>(a1, a4, a5, v9) & 1) == 0)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    HandlePELayer<17u>();
    return 0;
  }
  if (!PECodegenUtils::HandleSecondarySourceTensor<11u>(a1, (uint64_t)v10, a4, a5, v9))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    HandlePELayer<17u>();
    return 0;
  }
  if (!PECodegenUtils::HandleTernarySourceTensor<11u>(a1, (uint64_t)v10, a4, a5, v9))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    HandlePELayer<17u>();
    return 0;
  }
  uint64_t v12 = *((void *)a1 + 32);
  if (v12) {
    BOOL v13 = *(_DWORD *)(*(void *)(v12 + 64) + 8) == 102;
  }
  else {
    BOOL v13 = 0;
  }
  uint64_t v15 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  if (PECodegenUtils::HandleOutputTensor<11u>(v15, (uint64_t)v10, (void *)a4, a5, (uint64_t)v9, v13))
  {
    if (*(unsigned char *)(a4 + 1584))
    {
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a1 + 576))(a1))
      {
        unint64_t v16 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a1 + 584))(a1);
        ZinDeQuantLayer::GetScalarZeroPoint(v16);
        ZinAneTd<7u>::SetQuantizationSrc1InputOffset();
      }
      if (*(unsigned char *)(a4 + 1584) && (*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a1 + 592))(a1))
      {
        unint64_t v17 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a1 + 600))(a1);
        ZinDeQuantLayer::GetScalarZeroPoint(v17);
        ZinAneTd<7u>::SetQuantizationSrc2InputOffset();
      }
    }
    switch(*(_DWORD *)(*((void *)a1 + 8) + 8))
    {
      case 'Q':
        char v18 = PECodegenUtils::HandlePEElementWiseLayer<11u>(a4, a1, v9);
        goto LABEL_29;
      case 'R':
        if (*(unsigned char *)(a3 + 188))
        {
          char v18 = PECodegenUtils::HandlePESecureFlushLayer<11u>((int8x16_t *)v9, *(_DWORD *)(a3 + 192));
LABEL_29:
          char v19 = v18;
LABEL_30:
          if (*(unsigned char *)(a4 + 1584) && (*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a1 + 672))(a1))
          {
            uint64_t v20 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a1 + 768))(a1);
            ZinDeQuantLayer::GetScalarZeroPoint(v20);
            ZinAneTd<7u>::SetPEOutputQuantization();
          }
          if (v19)
          {
            if (!*(unsigned char *)(a4 + 1252))
            {
              if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a1 + 568))(a1))
              {
                int v21 = ZinEngineLayerMirInfo::HasDmaRead((uint64_t)v10, 0);
                int v22 = ZinEngineLayerMirInfo::HasDmaRead((uint64_t)v10, 1);
                if (!v21 || (int v23 = 0, (v22 & 1) == 0))
                {
                  if (v22) {
                    int v24 = 2;
                  }
                  else {
                    int v24 = 1;
                  }
                  if (v21) {
                    int v23 = 1;
                  }
                  else {
                    int v23 = v24;
                  }
                }
              }
              else
              {
                int v23 = 1;
              }
              ZinAneTd<11u>::SetCommonSourceRouting((uint64_t)v9, v23);
            }
            **(void **)(a3 + 128) = v10[94];
            *(void *)(*(void *)(a3 + 128) + 8) = v10[106];
            *(void *)(a3 + 152) = v10[118];
            return 1;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          HandlePELayer<17u>();
        }
        else
        {
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          HandlePELayer<11u>(result, v25, v26, v27, v28, v29, v30, v31);
        }
        break;
      case 'S':
        char v18 = PECodegenUtils::HandlePEPoolLayer<11u>(a4, a1, (uint64_t)v9);
        goto LABEL_29;
      case 'T':
        char v18 = PECodegenUtils::HandlePEGOCLayer<11u>(a4, (uint64_t)a1, (uint64_t)v9);
        goto LABEL_29;
      default:
        char v19 = 0;
        goto LABEL_30;
    }
    return 0;
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    HandlePELayer<17u>();
    return 0;
  }
  return result;
}

BOOL HandleNELayer<11u>(const ZinIrOpLayer *a1, int a2, ZinAneInstruction *a3, int **a4, ZinIrMemoryPool *a5, uint64_t a6, CFArrayRef *a7)
{
  BOOL v13 = (ZinIrHalH13g *)*((void *)a3 + 25);
  unsigned __int8 v32 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock(a1, a5, &v32)
    || (unsigned __int8 v31 = 0, ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a1, a5, &v31)))
  {
LABEL_3:
    CFStringRef v14 = @"CodeGenerationFailure";
LABEL_4:
    ZinIrNetworkStatus::SetError(a7, v14);
    return 0;
  }
  uint64_t v16 = *((void *)a1 + 17);
  if (v16 && *(void *)(v16 + 800))
  {
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    unint64_t v17 = *(void **)(*((void *)a1 + 17) + 800);
    if (v17[1]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[2]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[4]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
    if (v17[3]) {
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    }
  }
  if (ZinAneInstruction::HandleCommonConfig(a3, a1, (const ZinIrHalParameters *)*a4, a7))
  {
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, int **, ZinIrMemoryPool *, ZinAneInstruction *))(*(void *)v13 + 312))(v13, a1, a4, a5, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"KernelDMASourceAllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, int *, uint64_t, ZinAneInstruction *))(*(void *)v13 + 248))(v13, a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"TileDMASourceAllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, int *))(**((void **)a3 + 25) + 256))(*((void *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"L2AllocationFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, int *))(**((void **)a3 + 25) + 264))(*((void *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"NEConfigFailure";
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(void, const ZinIrOpLayer *, int *, uint64_t, ZinAneInstruction *))(**((void **)a3 + 25) + 304))(*((void *)a3 + 25), a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      CFStringRef v14 = @"TileDMADestinationAllocationFailure";
      goto LABEL_4;
    }
    if (!ZinAneTd<11u>::ValidateOCGSizes(v13, (uint64_t)a1, *a4))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      goto LABEL_3;
    }
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    if ((*((_DWORD *)v13 + 125) & 3) == 3
      || (unsigned int v18 = *((_DWORD *)v13 + 234),
          int v30 = dword_211F05C84[*((_DWORD *)v13 + 125) & 3],
          int v19 = *((_DWORD *)v13 + 233) & 3,
          v19 == 3))
    {
      ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      return 0;
    }
    int v20 = (char)(v18 >> 5) >> 3;
    int v21 = ZinMirPrepareBinaryPoint::CalculateBinaryPointAdjustment(v19, &v30);
    unsigned int v22 = *((_DWORD *)v13 + 237);
    if (ZinIrOpLayer::IsNELayer(a1) && v21 + v20 + (HIWORD(v22) & 0x1F) >= 0x20u)
    {
      ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        HandleNELayer<17u>();
      }
      return 0;
    }
    int v23 = (ZinIrKernel *)*((void *)a1 + 17);
    if (v23)
    {
      if (ZinIrKernel::HasBias(v23))
      {
        uint64_t v24 = *((void *)a1 + 17);
        if (*(void *)(v24 + 576))
        {
          uint64_t v25 = (ZinDynamicRange **)(v24 + 576);
          double v26 = ldexp(1.0, v21 + v20 + ((int)(*((_DWORD *)v13 + 236) << 11) >> 27));
          if (!ZinIrCodegenValidBiasShift(v25, v26, v27, v28, v29))
          {
            ZinIrNetworkStatus::SetError(a7, @"NEConfigFailure");
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              HandleNELayer<17u>();
            }
            return 0;
          }
        }
      }
    }
    if (!*((unsigned char *)*a4 + 1243) || (ZinAneTd<11u>::SetDPE((uint64_t)v13, (uint64_t)a1) & 1) != 0) {
      return 1;
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::CodegenIntermediateMCacheDSIDs(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  int v8 = *(unsigned __int8 *)(a3[1] + 130);
  uint64_t v9 = *(_DWORD **)(a2 + 264);
  int v10 = v9[358];
  if (v10 == 2) {
    goto LABEL_16;
  }
  int DSIDFromPriorityHalAndSecureMode = GetDSIDFromPriorityHalAndSecureMode(v10, v7, v8 != 0);
  ZinAneTd<11u>::SetTileDmaSrc1DataSetId(a1, DSIDFromPriorityHalAndSecureMode);
  if (*(unsigned char *)(v7 + 1248))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
    int v12 = *(_DWORD *)(*(void *)(a2 + 264) + 1432);
    if (v12 == 1)
    {
      if (*(unsigned char *)(a4 + 10))
      {
        uint64_t v13 = *(unsigned __int16 *)(a4 + 8);
        goto LABEL_13;
      }
    }
    else
    {
      if (v12)
      {
        uint64_t v13 = 0;
        goto LABEL_13;
      }
      if (*(unsigned char *)(a4 + 6))
      {
        uint64_t v13 = *(unsigned __int16 *)(a4 + 4);
LABEL_13:
        ZinAneTdHw_v11::AddRelocInfo((uint64_t *)(a1 + 8), (uint64_t)__p, 1088, v13, 0, 0, 0, 0);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v9 = *(_DWORD **)(a2 + 264);
        goto LABEL_16;
      }
    }
    ZinAssertImpl("Missing Bar for MCache");
  }
  uint64_t v9 = *(_DWORD **)(a2 + 264);
  if (!DSIDFromPriorityHalAndSecureMode && v9[350] == 2) {
    return 0;
  }
LABEL_16:
  int v14 = v9[359];
  if (v14 != 2)
  {
    int v15 = GetDSIDFromPriorityHalAndSecureMode(v14, v7, v8 != 0);
    ZinAneTd<11u>::SetTileDmaSrc2DataSetId(a1, v15);
    if (*(unsigned char *)(v7 + 1248))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
      int v16 = *(_DWORD *)(*(void *)(a2 + 264) + 1436);
      if (v16 == 1)
      {
        if (*(unsigned char *)(a4 + 10))
        {
          uint64_t v17 = *(unsigned __int16 *)(a4 + 8);
          goto LABEL_28;
        }
      }
      else
      {
        if (v16)
        {
          uint64_t v17 = 0;
          goto LABEL_28;
        }
        if (*(unsigned char *)(a4 + 6))
        {
          uint64_t v17 = *(unsigned __int16 *)(a4 + 4);
LABEL_28:
          ZinAneTdHw_v11::AddRelocInfo((uint64_t *)(a1 + 8), (uint64_t)__p, 1089, v17, 0, 0, 0, 0);
          if (v36 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v9 = *(_DWORD **)(a2 + 264);
          goto LABEL_31;
        }
      }
      ZinAssertImpl("Missing Bar for MCache");
    }
    uint64_t v9 = *(_DWORD **)(a2 + 264);
    if (!v15 && v9[355] == 2) {
      return 0;
    }
  }
LABEL_31:
  int v18 = v9[360];
  if (v18 != 2)
  {
    int v19 = GetDSIDFromPriorityHalAndSecureMode(v18, v7, v8 != 0);
    ZinAneTd<11u>::SetTileDmaDstDataSetId(a1, v19);
    if (*(unsigned char *)(v7 + 1248))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
      int v20 = *(_DWORD *)(*(void *)(a2 + 264) + 1440);
      if (v20 == 1)
      {
        if (*(unsigned char *)(a4 + 10))
        {
          uint64_t v21 = *(unsigned __int16 *)(a4 + 8);
          goto LABEL_43;
        }
      }
      else
      {
        if (v20)
        {
          uint64_t v21 = 0;
          goto LABEL_43;
        }
        if (*(unsigned char *)(a4 + 6))
        {
          uint64_t v21 = *(unsigned __int16 *)(a4 + 4);
LABEL_43:
          ZinAneTdHw_v11::AddRelocInfo((uint64_t *)(a1 + 8), (uint64_t)__p, 1344, v21, 0, 0, 0, 0);
          if (v36 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v9 = *(_DWORD **)(a2 + 264);
          goto LABEL_46;
        }
      }
      ZinAssertImpl("Missing Bar for MCache");
    }
    uint64_t v9 = *(_DWORD **)(a2 + 264);
    if (!v19 && v9[353] == 2) {
      return 0;
    }
  }
LABEL_46:
  int v23 = v9[361];
  if (v23 != 2)
  {
    char v24 = GetDSIDFromPriorityHalAndSecureMode(v23, v7, v8 != 0);
    uint64_t v25 = *(void *)(a2 + 136);
    if (v25 && (uint64_t v26 = *(void *)(v25 + 800)) != 0) {
      uint64_t v27 = *(void *)(v26 + 40);
    }
    else {
      uint64_t v27 = 0;
    }
    BOOL v28 = !v25 || v27 == 0;
    BOOL v29 = !v28;
    if (*(_DWORD *)(v7 + 8))
    {
      unint64_t v30 = 0;
      uint64_t v31 = 40;
      do
      {
        if (v29)
        {
          ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a2 + 264));
          if (MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) > v30)
          {
            if (*(void *)(*(void *)(v27 + 32) + v31))
            {
              ZinAneTd<10u>::SetKernelDmaSrcDataSetId(a1, v24, v30);
              if (*(unsigned char *)(v7 + 1248))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
                int v33 = *(_DWORD *)(*(void *)(a2 + 264) + 1444);
                if (v33 == 1)
                {
                  if (!*(unsigned char *)(a4 + 10)) {
LABEL_75:
                  }
                    ZinAssertImpl("Missing Bar for MCache");
                  uint64_t v34 = *(unsigned __int16 *)(a4 + 8);
                }
                else if (v33)
                {
                  uint64_t v34 = 0;
                }
                else
                {
                  if (!*(unsigned char *)(a4 + 6)) {
                    goto LABEL_75;
                  }
                  uint64_t v34 = *(unsigned __int16 *)(a4 + 4);
                }
                ZinAneTdHw_v11::AddRelocInfo((uint64_t *)(a1 + 8), (uint64_t)__p, (v30 + 1606) & 0x3FFFFFFF, v34, 0, 0, 0, 0);
                if (v36 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
        }
        ++v30;
        v31 += 56;
      }
      while (v30 < *(unsigned int *)(v7 + 8));
    }
  }
  return 1;
}

void sub_21131BF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SetPatchSettings<11u>(uint64_t a1, uint64_t a2)
{
  BOOL v4 = ZinAneTd<11u>::SetPatchHeight(a1, *(void *)(a2 + 128));
  int v5 = v4 & ZinAneTd<11u>::SetPatchWidth(a1, *(void *)(a2 + 120));
  BOOL v6 = ZinAneTd<11u>::SetTileHeight(a1, *(void *)(a2 + 80));
  int v7 = v5 & v6 & ZinAneTd<11u>::SetTileOverlap(a1, *(void *)(a2 + 96));
  BOOL v8 = ZinAneTd<11u>::SetTileOverlapPadBottom(a1, *(void *)(a2 + 104));
  uint64_t v9 = v7 & v8 & ZinAneTd<11u>::SetTileOverlapPadTop(a1, *(void *)(a2 + 88));
  ZinAneTd<7u>::SetTileOverlapPadReflect(a1, *(unsigned __int8 *)(a2 + 112));
  return v9;
}

uint64_t PECodegenUtils::HandlePrimarySourceTensor<11u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, ZinIrHalH13g *a4)
{
  uint64_t v23 = 0;
  uint64_t InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 0);
  (*(void (**)(void *__return_ptr, ZinIrOpLayer *))(*(void *)a1 + 376))(v22, a1);
  int v21 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 0, &v21))
  {
    uint64_t result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePrimarySourceTensor<17u>();
      return 0;
    }
    return result;
  }
  BOOL v11 = v21 != 0;
  ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, 0, &v23, v9);
  ZinAneTd<11u>::SetOrReturnWin((uint64_t)a4, v22[3]);
  ZinAneTd<11u>::SetOrReturnHin((uint64_t)a4, v22[2]);
  ZinAneTd<11u>::SetOrReturnDin((uint64_t)a4, v22[4]);
  ZinAneTd<11u>::SetOrReturnCin((uint64_t)a4, v22[1]);
  uint64_t TileSrc = (int *)ZinMirL2Config::GetTileSrc(*((void *)a1 + 33) + 120, v21);
  ZinAneTd<11u>::SetCommonInFmt((uint64_t)a4, *TileSrc);
  int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(*((void *)a1 + 33), v21);
  ZinAneTd<11u>::SetL2Src1SourceType((uint64_t)a4, L2RdMode);
  if (!*((void *)a1 + 25))
  {
    BOOL v15 = 0;
    goto LABEL_8;
  }
  uint64_t v14 = *((void *)a1 + 24);
  BOOL v15 = v14 == 0;
  if (v14 != 1)
  {
LABEL_8:
    int v16 = 0;
    goto LABEL_9;
  }
  int v16 = 1;
LABEL_9:
  if (!ZinEngineLayerMirInfo::HasDmaRead(*((void *)a1 + 33), v21)) {
    return ZinCodegen::SetPrimaryL2SourceBuffer<11u>(a2, (uint64_t)a1, a4);
  }
  uint64_t v17 = v23;
  int v18 = (const void *)*((void *)a1 + (int)v23 + 30);
  int v19 = v18
  if ((v15 | v16) == 1)
  {
    char v20 = (*(uint64_t (**)(void))(**((void **)a1 + 25) + 304))(*((void *)a1 + 25));
    uint64_t v17 = v23;
  }
  else
  {
    char v20 = 0;
  }
  uint64_t result = ZinCodegen::SetPrimarySourceDMA<11u>(InputTensor, a4, *((void *)a1 + 33), v17, v11, a3, *(void *)(a2 + 528), *(void *)(a2 + 560), v15, v16, v20, (uint64_t)v19);
  if (result) {
    return ZinCodegen::SetPrimaryL2SourceBuffer<11u>(a2, (uint64_t)a1, a4);
  }
  return result;
}

BOOL PECodegenUtils::HandleSecondarySourceTensor<11u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinIrHalH13g *a5)
{
  BOOL v29 = a5;
  if (*((void *)a1 + 12) - *((void *)a1 + 11) < 0x10uLL) {
    return 1;
  }
  uint64_t v28 = 0;
  uint64_t InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 1uLL);
  int v27 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 1uLL, &v27))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    PECodegenUtils::HandlePrimarySourceTensor<17u>();
    return 0;
  }
  BOOL v13 = v27 != 0;
  ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, (const ZinANELayer *)1, &v28, v12);
  int v14 = v27;
  if (v27 == 1)
  {
    uint64_t TileSrc = (int *)ZinMirL2Config::GetTileSrc(a2 + 120, 1);
    ZinAneTd<11u>::SetCommonSrc2InFmt((uint64_t)a5, *TileSrc);
    ZinAneTd<11u>::SetPESecondSource((uint64_t)a5, 2);
    int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2, v27);
    ZinAneTd<11u>::SetL2Src2SourceType((uint64_t)a5, L2RdMode);
    int v14 = v27;
  }
  if (v14 == 2) {
    int v17 = 0;
  }
  else {
    int v17 = ZinEngineLayerMirInfo::HasDmaRead(a2, v14);
  }
  uint64_t v18 = *((void *)a1 + 25);
  if (!v18)
  {
    BOOL v20 = 0;
LABEL_16:
    int v21 = 0;
    if (!v17) {
      goto LABEL_28;
    }
    goto LABEL_17;
  }
  uint64_t v19 = *((void *)a1 + 24);
  BOOL v20 = v19 == 0;
  if (v19 != 1) {
    goto LABEL_16;
  }
  int v21 = 1;
  if (!v17) {
    goto LABEL_28;
  }
LABEL_17:
  uint64_t v26 = v13;
  if (v20 | v21) {
    char v22 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 304))(v18);
  }
  else {
    char v22 = 0;
  }
  uint64_t v23 = v28;
  char v24 = (void *)*((void *)a1 + (int)v28 + 30);
  if (v21)
  {
    if (v24) {
    if ((ZinCodegen::SetPrimarySourceDMA<11u>(InputTensor, a5, a2, v23, v26, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), v20, 1, v22, (uint64_t)v24) & 1) == 0)return 0;
    }
  }
  else
  {
    if (v24) {
    BOOL v25 = ZinCodegen::SetSecondarySourceDMA<11u>(InputTensor, (uint64_t)a5, a2, v23, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), v20, 0, v22, (uint64_t)v24);
    }
    BOOL result = 0;
    if (!v25) {
      return result;
    }
  }
LABEL_28:
  if (v27 != 2) {
    return v27 != 1 || ZinCodegen::SetSecondaryL2SourceBuffer<11u>(a3, a1, a5);
  }
  if (!*(unsigned char *)(a3 + 1130)) {
    ZinAssertImpl("Error: PE indexing is not supported");
  }
  BOOL result = PECodegenUtils::HandlePEIndexingBuffer<11u>((uint64_t)InputTensor, a3, a2, (uint64_t *)&v29);
  if (result) {
    return 1;
  }
  return result;
}

BOOL PECodegenUtils::HandleTernarySourceTensor<11u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinIrHalH13g *a5)
{
  if (*((void *)a1 + 12) - *((void *)a1 + 11) < 0x18uLL) {
    return 1;
  }
  uint64_t v19 = 0;
  uint64_t InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 2uLL);
  int v18 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 2uLL, &v18))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePrimarySourceTensor<17u>();
      return 0;
    }
  }
  else
  {
    ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, (const ZinANELayer *)2, &v19, v12);
    if (v18 == 1)
    {
      uint64_t TileSrc = (int *)ZinMirL2Config::GetTileSrc(a2 + 120, 1);
      ZinAneTd<11u>::SetCommonSrc2InFmt((uint64_t)a5, *TileSrc);
      int L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2, v18);
      ZinAneTd<11u>::SetL2Src2SourceType((uint64_t)a5, L2RdMode);
    }
    if (*((void *)a1 + 25) && *((void *)a1 + 24) == 1)
    {
      uint64_t v15 = v19;
      int v16 = (void *)*((void *)a1 + (int)v19 + 30);
      if (v16) {
      BOOL v17 = ZinCodegen::SetSecondarySourceDMA<11u>(InputTensor, (uint64_t)a5, a2, v15, a4, *(void *)(a3 + 528), *(void *)(a3 + 560), 0, 1, 1, (uint64_t)v16);
      }
      BOOL result = 0;
      if (v17) {
        return 1;
      }
    }
    else
    {
      if (v18 != 1) {
        return 1;
      }
      BOOL result = ZinCodegen::SetSecondaryL2SourceBuffer<11u>(a3, a1, a5);
      if (result) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t PECodegenUtils::HandleOutputTensor<11u>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12 = *(_DWORD *)(a1 + 88);
  ZinAneTd<11u>::SetOrReturnWout(a5, *(void *)(a1 + 72));
  ZinAneTd<11u>::SetOrReturnHout(a5, *(void *)(a1 + 64));
  ZinAneTd<11u>::SetOrReturnDout(a5, *(void *)(a1 + 80));
  ZinAneTd<11u>::SetOrReturnCout(a5, *(void *)(a1 + 56));
  ZinAneTd<11u>::SetCommonOutFmt(a5, v12);
  ZinAneTd<11u>::SetL2ResultType(a5, *(_DWORD *)(a2 + 1632));
  if ((*(_DWORD *)(a2 + 1632) - 1) <= 1
    && !ZinCodegen::SetResultDMA<11u>((ZinIrTensor *)a1, (ZinIrHalH13g *)a5, a2, a4, a3[66], a3[70], a6))
  {
    return 0;
  }
  unint64_t v13 = *(void *)(ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2) + 16) % a3[51] / a3[52];
  *(_DWORD *)(a5 + 848) = *(_DWORD *)(a5 + 848) & 0xFFE0000F | (16 * (v13 & 0x1FFFF));
  if (!CheckRegValueRange(v13, (unsigned int *)(*(void *)(a5 + 1040) + 384))) {
    return 0;
  }
  *(_DWORD *)(a5 + 852) = *(_DWORD *)(a5 + 852) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 280) & 0x1FFFF));
  if (!CheckRegValueRange(*(void *)(a2 + 280), (unsigned int *)(*(void *)(a5 + 1040) + 392))) {
    return 0;
  }
  *(_DWORD *)(a5 + 864) = *(_DWORD *)(a5 + 864) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 288) & 0x1FFFF));
  if (!CheckRegValueRange(*(void *)(a2 + 288), (unsigned int *)(*(void *)(a5 + 1040) + 416))) {
    return 0;
  }
  *(_DWORD *)(a5 + 86std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a5 + 860) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 296) & 0x1FFFF));
  if (!CheckRegValueRange(*(void *)(a2 + 296), (unsigned int *)(*(void *)(a5 + 1040) + 408))) {
    return 0;
  }
  *(_DWORD *)(a5 + 856) = *(_DWORD *)(a5 + 856) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 272) & 0x1FFFF));
  if (!CheckRegValueRange(*(void *)(a2 + 272), (unsigned int *)(*(void *)(a5 + 1040) + 400))) {
    return 0;
  }
  uint64_t L2WrSymbol = ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2);
  long long v19 = *(_OWORD *)(L2WrSymbol + 520);
  uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v19);
  ZinAneTd<4u>::SetL2ResultWrapAddr(a5, NumNeededNEs);
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v19);
  ZinAneTd<4u>::SetL2ResultWrapAddrOffset(a5, OCGSize);
  uint64_t v17 = ZinCodegen::SetL2ResultWrapInfo<11u>(a5, L2WrSymbol);
  if (v17) {
    ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a5, *(void *)(a2 + 320));
  }
  return v17;
}

uint64_t PECodegenUtils::HandlePEElementWiseLayer<11u>(uint64_t a1, ZinCodegen *this, ZinIrHalH13g *a3)
{
  int HWTaskType = ZinCodegen::GetHWTaskType(this, this);
  ZinAneTd<11u>::SetCommonTaskType((uint64_t)a3, HWTaskType);
  int v7 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 608))(this);
  ZinAneTd<11u>::SetPESrc1ReLu((uint64_t)a3, v7);
  int v8 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 616))(this);
  ZinAneTd<11u>::SetPESrc2ReLu((uint64_t)a3, v8);
  int v9 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 640))(this);
  ZinAneTd<11u>::SetPESrc1Transpose((uint64_t)a3, v9);
  int v10 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 648))(this);
  ZinAneTd<11u>::SetPESrc2Transpose((uint64_t)a3, v10);
  if ((*(unsigned int (**)(ZinCodegen *))(*(void *)this + 656))(this)
    && *(void *)((*(uint64_t (**)(ZinCodegen *))(*(void *)this + 696))(this) + 64))
  {
    uint64_t v11 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 696))(this);
    ZinAneTd<11u>::SetPESrc1Broadcast((uint64_t)a3, *(void *)(v11 + 64) + 16);
  }
  if ((*(unsigned int (**)(ZinCodegen *))(*(void *)this + 664))(this)
    && *(void *)((*(uint64_t (**)(ZinCodegen *))(*(void *)this + 704))(this) + 64))
  {
    uint64_t v12 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 704))(this);
    ZinAneTd<11u>::SetPESrc2Broadcast((uint64_t)a3, *(void *)(v12 + 64) + 16, 0);
  }
  if (*((void *)this + 57))
  {
    ZinIrHalH13g::~ZinIrHalH13g(a3);
    ZinIrHalH13g::~ZinIrHalH13g(a3);
    uint64_t v13 = *((void *)this + 59);
    if (v13 && *(void *)(v13 + 64)) {
      ZinIrHalH13g::~ZinIrHalH13g(a3);
    }
    ZinIrHalH13g::~ZinIrHalH13g(a3);
  }
  ZinIrScaledEWInfo::ZinIrScaledEWInfo((uint64_t)&v34, 0, 0, 0, 1.0, 1.0, 0.0);
  uint64_t v14 = *((void *)this + 60);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 64);
    *(_DWORD *)std::string::size_type v35 = *(_DWORD *)(v15 + 8);
    __int16 v16 = *(_WORD *)(v15 + 28);
    *(_OWORD *)&v35[4] = *(_OWORD *)(v15 + 12);
    *(_WORD *)&v35[20] = v16;
    int v17 = (*(uint64_t (**)(ZinCodegen *))(*(void *)this + 568))(this);
  }
  else
  {
    int v17 = 0;
  }
  ZinAneTd<11u>::SetPEBias((uint64_t)a3, *(float *)&v35[16]);
  ZinAneTd<11u>::SetPEScale((uint64_t)a3, *(float *)&v35[12]);
  ZinAneTd<11u>::SetPEPreScale((uint64_t)a3, *(float *)&v35[8]);
  if (!ZinAneTd<11u>::SetPEOperationMode((uint64_t)a3, *(int *)&v35[4]))
  {
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v34);
    return 0;
  }
  ZinAneTd<11u>::SetPEFirstSource((uint64_t)a3, v35[20] == 0);
  if (v35[21]) {
    int v18 = 3;
  }
  else {
    int v18 = 2;
  }
  if (v17) {
    int v19 = v18;
  }
  else {
    int v19 = 0;
  }
  ZinAneTd<11u>::SetPESecondSource((uint64_t)a3, v19);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v34);
  if (!PECodegenUtils::HandlePECommonPostOps<11u>(a1, (uint64_t)a3, this)) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr, ZinCodegen *))(*(void *)this + 384))(&v34, this);
  ZinAneTd<11u>::SetOrReturnHout((uint64_t)a3, *(unint64_t *)&v35[8]);
  ZinAneTd<11u>::SetOrReturnWout((uint64_t)a3, *(unint64_t *)&v35[16]);
  ZinAneTd<11u>::SetOrReturnCout((uint64_t)a3, *(unint64_t *)v35);
  ZinAneTd<11u>::SetOrReturnDout((uint64_t)a3, v36);
  uint64_t v20 = (uint64_t)a3 + 8;
  int Dout = ZinGetRegisterProgramming<7u>::GetDout(v20);
  int Wout = ZinGetRegisterProgramming<11u>::GetWout(v20);
  int Hin = ZinGetRegisterProgramming<11u>::GetHin(v20);
  int Hout = ZinGetRegisterProgramming<11u>::GetHout(v20);
  int Cin = ZinGetRegisterProgramming<11u>::GetCin(v20);
  int Cout = ZinGetRegisterProgramming<11u>::GetCout(v20);
  int Din = ZinGetRegisterProgramming<11u>::GetDin(v20);
  int v28 = ZinGetRegisterProgramming<11u>::GetDout(v20);
  BOOL v31 = Dout == Wout && Hin == Hout && Cin == Cout && Din == v28;
  uint64_t v32 = v31;
  if (!v31 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    PECodegenUtils::HandlePEElementWiseLayer<17u>();
  }
  return v32;
}

void sub_21131CF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)va);
  _Unwind_Resume(a1);
}

uint64_t PECodegenUtils::HandlePEGOCLayer<11u>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p = 0;
  char v46 = 0;
  uint64_t v47 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
  uint64_t v7 = *(void *)(a2 + 440);
  if (v7)
  {
    int HWTaskType = ZinCodegen::GetHWTaskType((ZinCodegen *)a2, v6);
    ZinAneTd<11u>::SetCommonTaskType(a3, HWTaskType);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 608))(a2);
    ZinAneTd<11u>::SetPESrc1ReLu(a3, v9);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 616))(a2);
    ZinAneTd<11u>::SetPESrc2ReLu(a3, v10);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 640))(a2);
    ZinAneTd<11u>::SetPESrc1Transpose(a3, v11);
    uint64_t v12 = *(void *)(v7 + 64);
    ZinAneTd<11u>::SetPESrc2Transpose(a3, *(unsigned __int8 *)(v12 + 80));
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 656))(a2)
      && *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 696))(a2) + 64))
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 696))(a2);
      ZinAneTd<11u>::SetPESrc1Broadcast(a3, *(void *)(v13 + 64) + 16);
    }
    if (*(void *)(v12 + 64)) {
      ZinAneTd<11u>::SetPESrc2Broadcast(a3, v12 + 40, 1);
    }
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a2 + 440);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 64);
      if (v16)
      {
        ZinAneTd<11u>::SetPEPreScale(a3, *(float *)(v16 + 12));
        ZinAneTd<11u>::SetPEFirstSource(a3, *(unsigned char *)(v16 + 16) == 0);
        if (*(unsigned char *)(v16 + 17)) {
          int v17 = 3;
        }
        else {
          int v17 = 2;
        }
        ZinAneTd<11u>::SetPESecondSource(a3, v17);
        if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 792))(a2))
        {
          int v18 = 1;
        }
        else
        {
          if (!(*(unsigned int (**)(uint64_t))(*(void *)a2 + 800))(a2))
          {
LABEL_21:
            if (*(unsigned char *)(a1 + 1129)) {
              PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<11u>(a3, (ZinPELayer *)a2);
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 680))(a2))
            {
              uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 776))(a2);
              v28.n128_u64[0] = ZinAneTd<11u>::SetPEOutputReLU(a3, (_DWORD *)(v29 + 192));
            }
            int v30 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a2 + 408))(a2, v28);
            ZinAneTd<11u>::SetPEOutputCtoW(a3, v30);
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 384))(v44, a2);
            ZinAneTd<11u>::SetOrReturnHout(a3, (unint64_t)v44[2]);
            ZinAneTd<11u>::SetOrReturnWout(a3, (unint64_t)v44[3]);
            ZinAneTd<11u>::SetOrReturnCout(a3, (unint64_t)v44[1]);
            ZinAneTd<11u>::SetOrReturnDout(a3, (unint64_t)v44[4]);
            uint64_t v31 = a3 + 8;
            int Dout = ZinGetRegisterProgramming<7u>::GetDout(a3 + 8);
            int Wout = ZinGetRegisterProgramming<11u>::GetWout(v31);
            int Hin = ZinGetRegisterProgramming<11u>::GetHin(v31);
            int Hout = ZinGetRegisterProgramming<11u>::GetHout(v31);
            int Cin = ZinGetRegisterProgramming<11u>::GetCin(v31);
            int Cout = ZinGetRegisterProgramming<11u>::GetCout(v31);
            int Din = ZinGetRegisterProgramming<11u>::GetDin(v31);
            int v39 = ZinGetRegisterProgramming<11u>::GetDout(v31);
            BOOL v42 = Dout == Wout && Hin == Hout && Cin == Cout && Din == v39;
            uint64_t v14 = v42;
            if (!v42 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              PECodegenUtils::HandlePEElementWiseLayer<17u>();
            }
            goto LABEL_40;
          }
          unsigned int v27 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 816))(a2) + 192) - 25;
          if (v27 >= 6) {
            ZinAssertImpl("Error: Invalid non linear mode");
          }
          int v18 = dword_211F05C6C[v27];
        }
        ZinAneTd<11u>::SetPECondition(a3, v18);
        goto LABEL_21;
      }
    }
  }
  else
  {
    BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v19) {
      PECodegenUtils::HandlePEGOCLayer<11u>(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    uint64_t v14 = 0;
  }
LABEL_40:
  if (__p)
  {
    char v46 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_21131D494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL PECodegenUtils::HandlePEPoolLayer<11u>(uint64_t a1, ZinCodegen *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*((void *)a2 + 54) + 64);
  if (ZinAneTd<11u>::SetCommonConvCfgKw(a3, *(void *)(v6 + 16))
    && ZinAneTd<11u>::SetCommonConvCfgKh(a3, *(void *)(v6 + 24))
    && ZinAneTd<11u>::SetCommonConvCfgSx(a3, *(int *)(v6 + 40))
    && ZinAneTd<11u>::SetCommonConvCfgSy(a3, *(int *)(v6 + 44))
    && ZinAneTd<11u>::SetCommonConvCfgOx(a3, 1uLL)
    && ZinAneTd<11u>::SetCommonConvCfgOy(a3, 1uLL)
    && (*(_DWORD *)(a3 + 524) = *(_DWORD *)(a3 + 524) & 0xFFC1FFFF | ((*(_DWORD *)(v6 + 64) & 0x1F) << 17),
        CheckRegValueRange(*(int *)(v6 + 64), (unsigned int *)(*(void *)(a3 + 1040) + 104)))
    && (*(_DWORD *)(a3 + 524) = *(_DWORD *)(a3 + 524) & 0xF83FFFFF | ((*(_DWORD *)(v6 + 72) & 0x1F) << 22),
        CheckRegValueRange(*(int *)(v6 + 72), (unsigned int *)(*(void *)(a3 + 1040) + 96))))
  {
    if ((*(unsigned int (**)(ZinCodegen *))(*(void *)a2 + 608))(a2))
    {
      int v7 = (*(uint64_t (**)(ZinCodegen *))(*(void *)a2 + 608))(a2);
      ZinAneTd<11u>::SetPESrc1ReLu(a3, v7);
    }
    if ((*(unsigned int (**)(ZinCodegen *))(*(void *)a2 + 568))(a2))
    {
      int v9 = (*(uint64_t (**)(ZinCodegen *))(*(void *)a2 + 616))(a2);
      ZinAneTd<11u>::SetPESrc2ReLu(a3, v9);
      int v10 = (*(uint64_t (**)(ZinCodegen *))(*(void *)a2 + 648))(a2);
      ZinAneTd<11u>::SetPESrc2Transpose(a3, v10);
    }
    uint64_t v11 = *(void *)(*((void *)a2 + 54) + 64);
    int HWTaskType = ZinCodegen::GetHWTaskType(a2, v8);
    ZinAneTd<11u>::SetCommonTaskType(a3, HWTaskType);
    ZinAneTd<11u>::SetPEFirstSource(a3, 1);
    if (*(unsigned char *)(v11 + 116)) {
      ZinAneTd<11u>::SetPESecondSource(a3, 2);
    }
    ZinAneTd<11u>::SetPEPreScale(a3, *(float *)(v11 + 112));
    int v13 = *(_DWORD *)(v11 + 104);
    if (v13 == 2)
    {
      unsigned int v14 = *(_DWORD *)(a3 + 904) & 0xFFFFFFFC | (*(unsigned char *)(v11 + 108) == 0);
      int v15 = 1;
      goto LABEL_27;
    }
    if (v13 == 1)
    {
      if (*(_DWORD *)(v11 + 100) == 4)
      {
        unsigned int v14 = *(_DWORD *)(a3 + 904) | 3;
        int v15 = 4;
        goto LABEL_27;
      }
      BOOL v40 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v40) {
        PECodegenUtils::HandlePEPoolLayer<11u>(v40, v41, v42, v43, v44, v45, v46, v47);
      }
    }
    else if (v13)
    {
      BOOL v24 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v24) {
        PECodegenUtils::HandlePEPoolLayer<11u>(v24, v25, v26, v27, v28, v29, v30, v31);
      }
    }
    else
    {
      if (*(_DWORD *)(v11 + 100) == 2)
      {
        unsigned int v14 = *(_DWORD *)(a3 + 904) & 0xFFFFFFFC | 2;
        int v15 = 2;
LABEL_27:
        *(_DWORD *)(a3 + 904) = v14;
        ZinAneTd<11u>::SetPaddingMode(a3, v15, 0);
        PECodegenUtils::HandlePECommonPostOps<11u>(a1, a3, a2);
        return 1;
      }
      BOOL v32 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v32) {
        PECodegenUtils::HandlePEPoolLayer<11u>(v32, v33, v34, v35, v36, v37, v38, v39);
      }
    }
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePEPoolLayer<11u>(result, v48, v49, v50, v51, v52, v53, v54);
      return 0;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePEPoolLayer<11u>(result, v17, v18, v19, v20, v21, v22, v23);
      return 0;
    }
  }
  return result;
}

uint64_t PECodegenUtils::HandlePESecureFlushLayer<11u>(int8x16_t *a1, int a2)
{
  a1[34].i32[1] = a1[34].i32[1] & 0xFFFFFF8F | 0x20;
  ZinAneTd<11u>::SetCommonSrc2InFmt((uint64_t)a1, 2);
  ZinAneTd<11u>::SetNEOcgSize((uint64_t)a1, 3);
  ZinAneTd<8u>::SetKernelDmaSrcKid((uint64_t)a1, 0);
  ZinAneTd<8u>::SetKernelDmaSrcNoReuseHint((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src1ChannelStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src1DepthStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src1GroupStride((uint64_t)a1, 0);
  a1[50].i32[3] &= 0xFFE0000F;
  ZinAneTd<11u>::SetL2Src2ChannelStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src2DepthStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src2GroupStride((uint64_t)a1, 0);
  a1[52].i32[0] &= 0xFFE0000F;
  ZinAneTd<11u>::SetKernelFmt((uint64_t)a1, 2);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
  ZinAneTd<11u>::SetKernelMode((uint64_t)a1, 0);
  ZinAneTd<11u>::SetOpMode((uint64_t)a1, 0);
  ZinAneTd<11u>::SetNEPostScale((uint64_t)a1, 0, 1);
  a1[56].i32[2] &= 0xFFF3FFFF;
  ZinAneTd<11u>::SetPatchHeight((uint64_t)a1, 1uLL);
  ZinAneTd<11u>::SetTileDmaDstDepthStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaDstGroupStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaDstChannelStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaDstRowStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaSrc1CacheHint((uint64_t)a1, 1, 1, 1);
  ZinAneTd<11u>::SetTileDmaSrc2CacheHint((uint64_t)a1, 1, 1, 1);
  ZinAneTd<11u>::SetTileDmaSrc1DepthStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaSrc1GroupStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaSrc1ChannelStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaSrc1RowStride((uint64_t)a1, 0);
  v4.i64[0] = 0x3F0000003FLL;
  v4.i64[1] = 0x3F0000003FLL;
  a1[39] = vandq_s8(a1[39], v4);
  a1[36].i32[0] |= 1u;
  ZinAneTd<11u>::SetTileDmaSrc1Interleave((uint64_t)a1, 8u);
  a1[41].i32[0] = a1[41].i32[0] & 0xFFFFCFFF | 0x1000;
  a1[60].i32[0] &= ~0x1000000u;
  a1[62].i32[0] = a1[62].i32[0] & 0xF0CFCFFF | 0x8100000;
  ZinAneTd<11u>::SetL2Src1Interleave((uint64_t)a1, 8u);
  ZinAneTd<11u>::SetL2Src1SourceType((uint64_t)a1, 2);
  a1[52].i32[3] = a1[52].i32[3] & 0xFFFFFFFC | 1;
  (*(void (**)(int8x16_t *, uint64_t, void))(a1->i64[0] + 32))(a1, 18, 0);
  (*(void (**)(int8x16_t *, uint64_t, void))(a1->i64[0] + 32))(a1, 17, 0);
  (*(void (**)(int8x16_t *, uint64_t, void))(a1->i64[0] + 32))(a1, 22, 0);
  (*(void (**)(int8x16_t *, uint64_t, void))(a1->i64[0] + 32))(a1, 21, 0);
  (*(void (**)(int8x16_t *, uint64_t, void))(a1->i64[0] + 32))(a1, 16, 0);
  (*(void (**)(int8x16_t *, uint64_t, void))(a1->i64[0] + 32))(a1, 15, 0);
  (*(void (**)(int8x16_t *, uint64_t, void))(a1->i64[0] + 32))(a1, 20, 0);
  (*(void (**)(int8x16_t *, uint64_t, void))(a1->i64[0] + 32))(a1, 19, 0);
  if (a2 == 2)
  {
    ZinAneTd<11u>::SetOrReturnHin((uint64_t)a1, 4uLL);
    ZinAneTd<11u>::SetOrReturnWin((uint64_t)a1, 0x10uLL);
    ZinAneTd<11u>::SetOrReturnHout((uint64_t)a1, 4uLL);
    ZinAneTd<11u>::SetOrReturnWout((uint64_t)a1, 0x10uLL);
    ZinAneTd<11u>::SetPatchHeight((uint64_t)a1, 2uLL);
    ZinAneTd<11u>::SetTileHeight((uint64_t)a1, 4u);
    a1[52].i32[3] = a1[52].i32[3] & 0xFFFFF0F7 | 0x300;
    a1[53].i32[2] = a1[53].i32[2] & 0xFFE0000F | 0x10;
    a1[50].i32[3] = a1[50].i32[3] & 0xFFE0000F | 0x10;
    ZinAneTd<11u>::SetL2Src1Interleave((uint64_t)a1, 3u);
    a1[62].i32[0] = a1[62].i32[0] & 0xF0FFFFFF | 0x3000000;
    int v7 = 64;
    a1[61].i32[0] = a1[61].i32[0] & 0x3F | 0x40;
    ZinAneTd<11u>::SetTileDmaSrc1Interleave((uint64_t)a1, 3u);
    a1[41].i32[0] &= 0xFFFFCFFF;
    uint64_t v6 = (int8x16_t *)((char *)a1 + 600);
    int v8 = 63;
  }
  else if (a2 == 1)
  {
    uint64_t v6 = a1 + 41;
    int v7 = 1;
    ZinAneTd<11u>::SetOrReturnHin((uint64_t)a1, 1uLL);
    ZinAneTd<11u>::SetOrReturnWin((uint64_t)a1, 0x10uLL);
    ZinAneTd<11u>::SetOrReturnHout((uint64_t)a1, 1uLL);
    ZinAneTd<11u>::SetOrReturnWout((uint64_t)a1, 0x10uLL);
    a1[52].i32[3] &= 0xFFFFFFF4;
    ZinAneTd<11u>::SetL2Src1DmaFormat((uint64_t)a1, 3);
    ZinAneTd<11u>::SetL2Src2DmaFormat(a1, 3);
    a1[60].i32[0] &= ~1u;
    a1[62].i32[0] = a1[62].i32[0] & 0xF0EFFFFF | 0x1000000;
    int v8 = -12292;
  }
  else
  {
    uint64_t result = 0;
    if (a2) {
      return result;
    }
    uint64_t v6 = a1 + 62;
    ZinAneTd<11u>::SetCommonInFmt((uint64_t)a1, 3);
    ZinAneTd<11u>::SetCommonSrc2InFmt((uint64_t)a1, 3);
    a1[31].i32[1] = a1[31].i32[1] & 0xFFFFFFCF | 0x20;
    ZinAneTd<11u>::SetOrReturnHin((uint64_t)a1, 1uLL);
    ZinAneTd<11u>::SetOrReturnWin((uint64_t)a1, 0x40uLL);
    ZinAneTd<11u>::SetOrReturnHout((uint64_t)a1, 1uLL);
    ZinAneTd<11u>::SetOrReturnWout((uint64_t)a1, 0x40uLL);
    ZinAneTd<11u>::SetTileDmaDstandL2DstFifoMode((uint64_t)a1, 0);
    ZinAneTd<11u>::SetTileDmaDstandL2DstInterleave((uint64_t)a1, 8u);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 18, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 17, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 22, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 21, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 16, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 15, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 20, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 19, 1);
    ZinAneTd<11u>::SetTileDmaSrc1Format((uint64_t)a1, 1, 0);
    int v7 = 4096;
    int v8 = -12289;
  }
  v6->i32[0] = v6->i32[0] & v8 | v7;
  return 1;
}

BOOL PECodegenUtils::HandlePEIndexingBuffer<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t L2RdSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2RdSymbol(a3, 2);
  if (!L2RdSymbol)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetPrimaryL2SourceBuffer<1u>(result, v20, v21, v22, v23, v24, v25, v26);
    return 0;
  }
  int v9 = L2RdSymbol;
  if (ZinIrSymbol::GetMemType(L2RdSymbol) != 2)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinAneTd<17u>::HandleL2Config(result, v27, v28, v29, v30, v31, v32, v33);
    return 0;
  }
  unint64_t v10 = *((void *)v9 + 2);
  unint64_t v11 = *(void *)(a2 + 416);
  if (v10 % v11)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetPrimaryL2SourceBuffer<1u>(result, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  ZinAneTd<11u>::SetL2Src2BaseAddress(*a4, v10 % *(void *)(a2 + 408) / v11);
  uint64_t v34 = *a4;
  uint64_t v35 = a3 + 120;
  uint64_t TileSrc = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<11u>::SetL2Src2ChannelStride(v34, *(ZinCodegenUtil **)(TileSrc + 16));
  uint64_t v37 = *a4;
  uint64_t v38 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<11u>::SetL2Src2GroupStride(v37, *(ZinCodegenUtil **)(v38 + 32));
  uint64_t v39 = *a4;
  uint64_t v40 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<11u>::SetL2Src2RowStride(v39, (ZinCodegen *)(a1 + 48), *(ZinTensorDimensions **)(v40 + 8), v41, v42);
  uint64_t v43 = *a4;
  uint64_t v44 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<11u>::SetL2Src2DepthStride(v43, *(ZinCodegenUtil **)(v44 + 24));
  return 1;
}

BOOL PECodegenUtils::HandlePECommonPostOps<11u>(uint64_t a1, uint64_t a2, ZinPELayer *a3)
{
  (*(void (**)(void *__return_ptr, ZinPELayer *))(*(void *)a3 + 376))(v12, a3);
  if ((*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 792))(a3))
  {
    int v6 = 1;
LABEL_6:
    ZinAneTd<11u>::SetPECondition(a2, v6);
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 800))(a3))
  {
    int v7 = *(_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 816))(a3) + 192) - 25;
    if (v7 >= 6) {
      ZinAssertImpl("Error: Invalid non linear mode");
    }
    int v6 = dword_211F05C6C[v7];
    goto LABEL_6;
  }
LABEL_7:
  if (*((void *)a3 + 63) && (CodegenReduction<11u>((uint64_t)a3, v12, a2) & 1) == 0)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePECommonPostOps<17u>();
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 1129))
    {
      if (*((void *)a3 + 67) || *((void *)a3 + 68))
      {
        ZinPELayer::GetOutputScale(a3);
        ZinPELayer::GetOutputBias(a3);
        (*(void (**)(ZinPELayer *))(*(void *)a3 + 768))(a3);
        ZinAssertImpl("Error: Invalid access to the piece wise linear LUT");
      }
      PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<11u>(a2, a3);
    }
    if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 680))(a3))
    {
      uint64_t v9 = (*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 776))(a3);
      v8.n128_u64[0] = ZinAneTd<11u>::SetPEOutputReLU(a2, (_DWORD *)(v9 + 192));
    }
    int v10 = (*(uint64_t (**)(ZinPELayer *, __n128))(*(void *)a3 + 408))(a3, v8);
    ZinAneTd<11u>::SetPEOutputCtoW(a2, v10);
    return 1;
  }
  return result;
}

uint64_t CodegenReduction<11u>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 504) + 64) + 12);
  uint64_t v14 = 0;
  signed int v7 = *(_DWORD *)(a1 + 528);
  OutputReductionFinalScaleCFDictionaryRef Value = ZinPEElementWiseLayer::GetOutputReductionFinalScaleValue((ZinPEElementWiseLayer *)a1, (float *)&v14 + 1);
  OutputReductionEpsilonCFDictionaryRef Value = ZinPEElementWiseLayer::GetOutputReductionEpsilonValue((ZinPEElementWiseLayer *)a1, (float *)&v14);
  uint64_t result = 0;
  if (OutputReductionFinalScaleValue)
  {
    if (OutputReductionEpsilonValue)
    {
      unsigned int v11 = a2[6] * a2[4] * a2[8];
      int v12 = CodegenReductionMode<11u>(v6, a3);
      int v13 = v12 & CodegenReductionPostProcess<11u>(v7, a3);
      return v13 & CodegenReductionFinalScaleEpsilon<11u>(v6, v11, a3, *((float *)&v14 + 1), *(float *)&v14);
    }
  }
  return result;
}

void PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<11u>(uint64_t a1, ZinPELayer *a2)
{
  if (((*(uint64_t (**)(ZinPELayer *))(*(void *)a2 + 680))(a2) & 1) != 0
    || ZinPELayer::HasOutputScaleOrBias(a2)
    || (*(unsigned int (**)(ZinPELayer *))(*(void *)a2 + 672))(a2))
  {
    uint64_t v3 = (*(uint64_t (**)(ZinPELayer *))(*(void *)a2 + 776))(a2);
    uint64_t v4 = (*(uint64_t (**)(ZinPELayer *))(*(void *)a2 + 784))(a2);
    uint64_t OutputScale = ZinPELayer::GetOutputScale(a2);
    uint64_t OutputBias = ZinPELayer::GetOutputBias(a2);
    signed int v7 = (PiecewiseLinearFunctionParams *)(*(uint64_t (**)(ZinPELayer *))(*(void *)a2 + 768))(a2);
    PiecewiseLinearFunctionParams::PiecewiseLinearFunctionParams((uint64_t)&v10, v3, OutputScale, OutputBias, v4, v7);
    if (*(unsigned char *)(OutputScale + 8)
      || (!v7 ? (v8 = *(unsigned char *)(OutputBias + 8) == 0) : (v8 = 0), v8 ? (BOOL v9 = v4 == 0) : (BOOL v9 = 0), !v9))
    {
LABEL_16:
      ZinAssertImpl("Error: Invalid access to the piece wise linear LUT");
    }
    if (v3)
    {
      switch(*(_DWORD *)(v3 + 192))
      {
        case 1:
        case 5:
        case 7:
        case 8:
          goto LABEL_16;
        default:
          ZinAssertImpl("Unexpected activation function!!!");
      }
      goto LABEL_16;
    }
  }
}

uint64_t CodegenReductionMode<11u>(int a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v15[0] = xmmword_211F05C24;
  v15[1] = *(_OWORD *)algn_211F05C34;
  v15[2] = xmmword_211F05C44;
  std::map<ZinIrReductionType,BOOL CodegenReductionMode<11u>(ZinIrReductionType,ZinAneTd<11u> *)::ModeInfo,std::less<ZinIrReductionType>,std::allocator<std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<11u>(ZinIrReductionType,ZinAneTd<11u> *)::ModeInfo>>>::map[abi:ne180100]((uint64_t)v13, (int *)v15, 4);
  uint64_t v4 = v14[0];
  if (!v14[0]) {
    goto LABEL_19;
  }
  int v5 = v14;
  do
  {
    int v6 = v4;
    signed int v7 = v5;
    int v8 = *((_DWORD *)v4 + 7);
    if (v8 >= a1) {
      int v5 = (void **)v4;
    }
    else {
      ++v4;
    }
    uint64_t v4 = (void *)*v4;
  }
  while (v4);
  if (v5 != v14 && (v8 >= a1 ? (BOOL v9 = v6) : (BOOL v9 = v7), *((_DWORD *)v9 + 7) <= a1))
  {
    int v12 = *((_DWORD *)v5 + 9);
    *(_DWORD *)(a2 + 904) = *(_DWORD *)(a2 + 904) & 0xFFFFFFFC | v5[4] & 3;
    ZinAneTd<11u>::SetPaddingMode(a2, v12, 0);
    uint64_t v10 = 1;
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      CodegenReductionMode<17u>(a1);
    }
    uint64_t v10 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v13, v14[0]);
  return v10;
}

void sub_21131E7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL CodegenReductionPostProcess<11u>(signed int a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  long long v17 = xmmword_211F05C54;
  uint64_t v18 = 0x200000010;
  std::map<ZinIrNonLinearMode,unsigned int>::map[abi:ne180100]((uint64_t)&v14, (int *)&v17, 3);
  *(void *)&long long v17 = 0x30000000FLL;
  std::__tree<std::__value_type<ZinIrNonLinearMode,unsigned int>,std::__map_value_compare<ZinIrNonLinearMode,std::__value_type<ZinIrNonLinearMode,unsigned int>,std::less<ZinIrNonLinearMode>,true>,std::allocator<std::__value_type<ZinIrNonLinearMode,unsigned int>>>::__emplace_unique_key_args<ZinIrNonLinearMode,std::pair<ZinIrNonLinearMode const,unsigned int>>(&v14, (int *)&v17, (uint64_t *)&v17);
  uint64_t v4 = v15[0];
  if (!v15[0]) {
    goto LABEL_19;
  }
  int v5 = v15;
  do
  {
    int v6 = v4;
    signed int v7 = v5;
    signed int v8 = *((_DWORD *)v4 + 7);
    if (v8 >= a1) {
      int v5 = (void **)v4;
    }
    else {
      ++v4;
    }
    uint64_t v4 = (void *)*v4;
  }
  while (v4);
  if (v5 != v15 && (v8 >= a1 ? (BOOL v9 = v6) : (BOOL v9 = v7), *((_DWORD *)v9 + 7) <= a1))
  {
    unint64_t v13 = *((unsigned int *)v5 + 8);
    *(_DWORD *)(a2 + 904) = *(_DWORD *)(a2 + 904) & 0xFFFFCFFF | ((v5[4] & 3) << 12);
    BOOL v11 = CheckRegValueRange(v13, (unsigned int *)(*(void *)(a2 + 1040) + 616));
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinIrEnumToStringUtil::NonLinearModeToString(a1, &v17);
      CodegenReductionPostProcess<17u>((char *)&v17, (uint64_t)v16, v10);
    }
    BOOL v11 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
  return v11;
}

void sub_21131E950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL CodegenReductionFinalScaleEpsilon<11u>(int a1, unsigned int a2, uint64_t a3, float a4, float a5)
{
  _S8 = a5;
  if (a1 == 3) {
    a4 = (float)(1.0 / (float)a2) * a4;
  }
  if (a4 == 0.0 || (LODWORD(a4) & 0x7F800000) == 0)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (result)
    {
      CodegenReductionFinalScaleEpsilon<11u>(result, v13, v14, v15, v16, v17, v18, v19);
      return 0;
    }
  }
  else
  {
    ZinAneTd<11u>::SetPEFinalScale(a3, a4);
    __asm { FCVT            H0, S8 }
    *(_WORD *)(a3 + 912) = _H0;
    return 1;
  }
  return result;
}

uint64_t std::map<ZinIrReductionType,BOOL CodegenReductionMode<11u>(ZinIrReductionType,ZinAneTd<11u> *)::ModeInfo,std::less<ZinIrReductionType>,std::allocator<std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<11u>(ZinIrReductionType,ZinAneTd<11u> *)::ModeInfo>>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 12 * a3;
    do
    {
      std::__tree<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::__map_value_compare<ZinIrReductionType,std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::less<ZinIrReductionType>,true>,std::allocator<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>>::__emplace_hint_unique_key_args<ZinIrReductionType,std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 12;
    }
    while (v6);
  }
  return a1;
}

void sub_21131EA7C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

double PECodegenUtils::HandlePECommonPostOps<11u>(uint64_t a1, uint64_t a2, ZinPELayer *a3)
{
  if ((*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 792))(a3))
  {
    int v6 = 1;
LABEL_6:
    ZinAneTd<11u>::SetPECondition(a2, v6);
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 800))(a3))
  {
    unsigned int v7 = *(_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 816))(a3) + 192) - 25;
    if (v7 >= 6) {
      ZinAssertImpl("Error: Invalid non linear mode");
    }
    int v6 = dword_211F05C6C[v7];
    goto LABEL_6;
  }
LABEL_7:
  if (!*(unsigned char *)(a1 + 1584))
  {
    if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 672))(a3))
    {
      signed int v8 = (ZinQuantLayer *)(*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 768))(a3);
      if (ZinQuantLayer::HasZeroPoint(v8)) {
        ZinAssertImpl("Unexpected quantization zero_point\n");
      }
    }
  }
  if (*(unsigned char *)(a1 + 1129)) {
    PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<11u>(a2, a3);
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(void *)a3 + 680))(a3))
  {
    uint64_t v10 = (_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(void *)a3 + 776))(a3) + 192);
    *(void *)&double result = ZinAneTd<11u>::SetPEOutputReLU(a2, v10);
  }
  return result;
}

BOOL ZinAneTd<11u>::ValidateOCGSizes(_DWORD *a1, uint64_t a2, int *a3)
{
  unsigned int v5 = *(_DWORD *)(*(void *)(a2 + 64) + 8) - 85;
  BOOL v6 = v5 > 5;
  int v7 = (1 << v5) & 0x31;
  BOOL v8 = v6 || v7 == 0;
  if (v8 && !*(void *)(a2 + 384)) {
    return 1;
  }
  unsigned int v9 = a1[130] & 7;
  unint64_t v10 = a1[131];
  uint64_t v11 = (v10 >> 28) & 3;
  unint64_t v12 = v10 >> 30;
  unint64_t v13 = a1[132];
  uint64_t v14 = (v13 >> 13) & 3;
  if ((a1[137] & 0xC) == 4)
  {
    switch(v11 * v12 * v14)
    {
      case 1:
        if (v9 < 6) {
          goto LABEL_56;
        }
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_62;
        }
        break;
      case 2:
        if (v9 < 5) {
          goto LABEL_56;
        }
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_62;
        }
        break;
      case 4:
        if (v9 < 4) {
          goto LABEL_56;
        }
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_62;
        }
        break;
      case 8:
        if (v9 < 3) {
          goto LABEL_56;
        }
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_62;
        }
        break;
      default:
        BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_51;
        }
        break;
    }
  }
  else
  {
    unsigned int v23 = a1[125] & 3;
    if (v23 > 1)
    {
      if (v23 == 2)
      {
        switch(v11 * v12 * v14)
        {
          case 1:
            if (v9 < 5) {
              goto LABEL_56;
            }
            BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (result) {
              goto LABEL_62;
            }
            break;
          case 2:
            if (v9 < 4) {
              goto LABEL_56;
            }
            BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (result) {
              goto LABEL_62;
            }
            break;
          case 4:
            if (v9 < 3) {
              goto LABEL_56;
            }
            BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (result) {
              goto LABEL_62;
            }
            break;
          case 8:
            if (v9 >= 2)
            {
              BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (result)
              {
LABEL_62:
                ZinAneTd<17u>::ValidateOCGSizes(result, v16, v17, v18, v19, v20, v21, v22);
                return 0;
              }
            }
            else
            {
LABEL_56:
              uint64_t v39 = v13 & 0x1F;
              if ((a1[132] & 0x1Fu) < 2) {
                return 1;
              }
              v41.i64[1] = 1 << v9;
              int NESmallSourceMode = ZinAneTd<11u>::GetNESmallSourceMode((uint64_t)a1);
              __int16 v48 = 0;
              uint64_t v40 = a1[132] >> 6;
              v41.i64[0] = v39;
              uint64_t v43 = v40;
              uint64_t v44 = v11;
              unint64_t v45 = v12;
              uint64_t v46 = v14;
              if ((a1[125] & 3) == 3) {
                ZinAssertImpl("Error: Invalid tensor format", *(_OWORD *)&v41);
              }
              int v42 = dword_211F05C84[a1[125] & 3];
              BOOL result = ZinMirConvUtils::Validate3DConvProgrammingConstraints(&v41, a3) == 0;
            }
            break;
          default:
            BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (result)
            {
LABEL_51:
              ZinAneTd<17u>::ValidateOCGSizes(result, v32, v33, v34, v35, v36, v37, v38);
              return 0;
            }
            break;
        }
      }
      else
      {
        BOOL v24 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v24) {
          ZinAneTd<4u>::ValidateOCGSizes(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        return 0;
      }
    }
    else
    {
      switch(v11 * v12 * v14)
      {
        case 1:
          if (v9 < 4) {
            goto LABEL_56;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_62;
          }
          break;
        case 2:
          if (v9 < 3) {
            goto LABEL_56;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_62;
          }
          break;
        case 4:
          if (v9 < 2) {
            goto LABEL_56;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_62;
          }
          break;
        case 8:
          if (!v9) {
            goto LABEL_56;
          }
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_62;
          }
          break;
        default:
          BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (result) {
            goto LABEL_51;
          }
          break;
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetDPE(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (*(unsigned char *)(a1 + 500) & 0x22) == 0 && (*(unsigned char *)(a1 + 932) & 2) == 0;
  if (*(unsigned char *)(*(void *)(a2 + 264) + 1504))
  {
    int v3 = 7;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 936);
    if ((v4 & 7) != 0)
    {
      if (v2) {
        int v3 = 5;
      }
      else {
        int v3 = 2;
      }
      if ((*(_DWORD *)(a1 + 936) & 7u) >= 3) {
        int v3 = 0;
      }
    }
    else
    {
      BOOL v5 = !v2;
      if (v2) {
        int v3 = 3;
      }
      else {
        int v3 = 0;
      }
      if (v5) {
        int v6 = 1;
      }
      else {
        int v6 = 4;
      }
      if ((v4 & 8) != 0) {
        int v3 = v6;
      }
    }
  }
  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFFFF0 | v3;
  return 1;
}

uint64_t AdjustTaskSizeForRdar107730882<11u>(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 200);
  uint64_t v5 = 4 * (*(unsigned int (**)(void *, uint64_t))(*v4 + 24))(v4, 25);
  uint64_t v6 = *(unsigned int *)(a1 + 184) + v5;
  uint64_t result = ZinAlignPower2(v6, *(void *)(a2 + 504));
  if ((result & 0x3F) == 0)
  {
    if ((unint64_t)(result - v6) >= 8) {
      uint64_t v8 = 16 * ((unint64_t)(result - v6) < 0x10);
    }
    else {
      uint64_t v8 = 8;
    }
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, unint64_t))(*v4 + 32))(v4, 25, (unint64_t)(v8 + v5) >> 2);
    v4[132] = v8;
  }
  return result;
}

void CollectSegmentStats<11u>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  long long v49 = xmmword_211ED50C0;
  char v50 = 0;
  int v53 = 0;
  unsigned int v54 = 0;
  unsigned int v56 = 0;
  uint64_t v57 = 0;
  std::string __p = 0;
  unsigned int v7 = ZinAlignPower2(2, *(void *)(a1 + 504));
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8 != a2)
  {
    uint64_t v44 = 0;
    uint64_t v9 = 0;
    uint64_t v42 = v7;
    unsigned int v43 = v7 >> 2;
    do
    {
      uint64_t v46 = *(void *)(v8 + 16);
      uint64_t v10 = *(void *)(v46 + 200);
      int v11 = *(unsigned __int16 *)(v10 + 8);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v46))ZinAssertImpl("Incorrect internal state: collect segment stats"); {
      unint64_t v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v46);
      }
      unint64_t v13 = v12;
      if (!v12) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = v56;
      if (v56 >= v57)
      {
        uint64_t v16 = (v56 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = (v57 - (unsigned char *)__p) >> 2;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        if ((unint64_t)(v57 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v57, v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v19[8 * v16];
        *(void *)uint64_t v20 = v13[3];
        uint64_t v15 = v20 + 8;
        uint64_t v22 = (char *)__p;
        uint64_t v21 = v56;
        if (v56 != __p)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v20 - 1) = v23;
            v20 -= 8;
          }
          while (v21 != v22);
          uint64_t v21 = (char *)__p;
        }
        std::string __p = v20;
        unsigned int v56 = v15;
        uint64_t v57 = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)unsigned int v56 = v12[3];
        uint64_t v15 = v14 + 8;
      }
      unsigned int v56 = v15;
      if (v47)
      {
        uint64_t v24 = v9;
      }
      else
      {
        HIDWORD(v49) = v9;
        uint64_t v25 = *(void *)(a2 + 8);
        if (v25 == v8)
        {
          int v26 = 0;
        }
        else
        {
          int v26 = 0;
          do
          {
            ++v26;
            uint64_t v25 = *(void *)(v25 + 8);
          }
          while (v25 != v8);
        }
        uint64_t v24 = v9 + v42;
        int v53 = v26;
        uint64_t v44 = v9;
      }
      uint64_t v27 = v46;
      *(_DWORD *)(v46 + 184) = v24;
      if (*(unsigned char *)(a1 + 2057))
      {
        if (a4[1] != *a4)
        {
          *(void *)(v10 + 1056) = 0;
          (*(void (**)(uint64_t, void))(*(void *)v10 + 368))(v10, 0);
          uint64_t v27 = v46;
        }
        AdjustTaskSizeForRdar107730882<11u>(v27, a1);
      }
      unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
      uint64_t v9 = ZinAlignPower2(v24 + 4 * v28, *(void *)(a1 + 504));
      int v29 = v47;
      if (!v47)
      {
        DWORD2(v47) = v11;
        DWORD1(v47) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) - 1;
        int v29 = v47;
      }
      LODWORD(v47) = v29 + 1;
      if (*(unsigned char *)(v46 + 197))
      {
        unsigned int v54 = *(_DWORD *)(v46 + 184);
        uint64_t v30 = v54;
        int v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, 25);
        HIDWORD(v47) += v31 + ((unint64_t)(v30 - v44) >> 2);
        LODWORD(v48) = v43;
        unint64_t v32 = a4[1];
        if (v32 >= a4[2])
        {
          uint64_t v33 = std::vector<ZinIrCodegenTDPartitionStats>::__push_back_slow_path<ZinIrCodegenTDPartitionStats const&>(a4, &v47);
        }
        else
        {
          std::vector<ZinIrCodegenTDPartitionStats>::__construct_one_at_end[abi:ne180100]<ZinIrCodegenTDPartitionStats const&>((uint64_t)a4, &v47);
          uint64_t v33 = v32 + 80;
        }
        a4[1] = v33;
        __int16 v51 = 0;
        char v52 = 0;
        uint64_t v48 = 0;
        long long v47 = 0uLL;
        long long v49 = xmmword_211ED50C0;
        char v50 = 0;
        int v53 = 0;
        unsigned int v54 = 0;
        if (__p)
        {
          unsigned int v56 = (char *)__p;
          operator delete(__p);
        }
        std::string __p = 0;
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        uint64_t v9 = ZinAlignPower2(v9, *(void *)(a1 + 616));
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != a2);
  }
  uint64_t v34 = *a4;
  uint64_t v35 = a4[1];
  uint64_t v36 = v35 - *a4;
  if (v35 != *a4)
  {
    unint64_t v37 = 0;
    LODWORD(v38) = 0;
    unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * (v36 >> 4);
    while (1)
    {
      uint64_t v40 = v34 + 80 * v37;
      *(_DWORD *)(v40 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
      *(_DWORD *)(v40 + 24) = v38;
      int64x2_t v41 = (_DWORD *)(v40 + 20);
      unint64_t v38 = (v38 + 1);
      v41[2] = v38;
      if (v39 - 1 == v37) {
        break;
      }
      if (!*(_DWORD *)(v34 + 80 * v38 + 8)) {
        goto LABEL_48;
      }
LABEL_49:
      unint64_t v37 = v38;
      if (v39 <= v38) {
        goto LABEL_50;
      }
    }
    _DWORD *v41 = 0;
    v41[2] = -1;
LABEL_48:
    *(unsigned char *)(v34 + 80 * v37 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
    goto LABEL_49;
  }
LABEL_50:
  if (__p)
  {
    unsigned int v56 = (char *)__p;
    operator delete(__p);
  }
}

void sub_21131F6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
}

uint64_t ZinValidateTd<11u>::Test(uint64_t *WUCost, uint64_t a2, uint64_t a3)
{
  *(void *)((char *)&v1897[1] + 4) = *MEMORY[0x263EF8340];
  unint64_t v3 = *(unsigned int *)(a3 + 540);
  uint64_t v4 = (v3 >> 8) & 7;
  uint64_t v5 = (v3 >> 12) & 7;
  if (v5 > v4)
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ZinValidateTd<4u>::Test(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 3;
  }
  uint64_t v14 = (v3 >> 16) & 7;
  if (v5 > v14)
  {
    BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v15) {
      ZinValidateTd<4u>::Test(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    return 3;
  }
  if (v4 > v14)
  {
    BOOL v23 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v23) {
      ZinValidateTd<4u>::Test(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    return 3;
  }
  int v32 = (*(_DWORD *)(a3 + 924) >> 10) & 1;
  if (v32 != ((*(_DWORD *)(a3 + 36) >> 4) & 1))
  {
    BOOL v62 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v62) {
      ZinValidateTd<11u>::Test(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    return 3;
  }
  uint64_t v35 = *WUCost;
  uint64_t v34 = WUCost[1];
  unint64_t v36 = *(unsigned int *)(a3 + 484);
  int v37 = *(_DWORD *)(a3 + 488);
  unint64_t v38 = *(unsigned int *)(a3 + 504);
  int v39 = *(_DWORD *)(a3 + 508);
  int v1888 = *(_DWORD *)(a3 + 496);
  int v1890 = *(_DWORD *)(a3 + 500);
  int v40 = *(_DWORD *)(a3 + 512);
  unint64_t v41 = *(unsigned int *)(a3 + 516);
  unint64_t v42 = *(unsigned int *)(a3 + 520);
  uint64_t v43 = (v41 >> 28) & 3;
  unint64_t v44 = v41 >> 30;
  int v45 = *(_DWORD *)(a3 + 524);
  LODWORD(WUCost) = *(_DWORD *)(a3 + 836);
  unint64_t v46 = *(unsigned int *)(a3 + 984);
  unsigned int v47 = *(_DWORD *)(a3 + 492);
  uint64_t v48 = v47 & 3;
  int v49 = *(_DWORD *)(a3 + 928);
  int v50 = *(_DWORD *)(a3 + 532);
  unsigned int v51 = *(_DWORD *)(a3 + 536);
  unsigned int v1892 = *(_DWORD *)(a3 + 788);
  int v52 = *(_DWORD *)(a3 + 896);
  int v53 = *(_DWORD *)(a3 + 792);
  if (v43 == 2
    && v44 == 2
    && v48 <= 1
    && v14 >= 4
    && (v5 != 4 || v4 != 4 || v14 != 4))
  {
    BOOL v112 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v112) {
      ZinValidateTd<11u>::Test(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    return 3;
  }
  if (v48 == 3)
  {
    BOOL v54 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v54) {
      ZinValidateTd<11u>::Test(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    return 3;
  }
  char v1883 = v40;
  unint64_t v1877 = v36;
  uint64_t v1878 = v34;
  __int16 v1875 = v39;
  __int16 v1876 = v37;
  unsigned __int8 v1873 = v50;
  unint64_t v71 = (v38 >> 16) & 0x7FFF;
  unint64_t v72 = v38 & 0x7FFF;
  uint64_t v73 = (v41 >> 6) & 0x3F;
  uint64_t v74 = v41 & 0x3F;
  unint64_t v1885 = v42;
  uint64_t v75 = (v42 >> 13) & 3;
  int v76 = (v1892 >> 2) & 3;
  unint64_t v1874 = *(unsigned int *)(a3 + 528);
  unint64_t v1880 = v1874 & 0x7FFF;
  unsigned int v1887 = dword_211F05C84[v48];
  int v77 = dword_211ED50F0[(v3 >> 2) & 3];
  int v1881 = v3 & 0xC;
  if (v1881 == 4)
  {
    if (v4 != v5 || v4 != v14)
    {
      BOOL v120 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v120) {
        ZinValidateTd<11u>::Test(v120, v121, v122, v123, v124, v125, v126, v127);
      }
      return 3;
    }
    if (v74 >= 9)
    {
      BOOL v145 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v145) {
        ZinValidateTd<4u>::Test(v145, v146, v147, v148, v149, v150, v151, v152);
      }
      return 3;
    }
    if (v4 >= 5)
    {
      BOOL v161 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v161) {
        ZinValidateTd<11u>::Test(v161, v162, v163, v164, v165, v166, v167, v168);
      }
      return 3;
    }
    uint64_t v1867 = (v42 >> 13) & 3;
    if (v4 != 4)
    {
      if (v74 != 1 || v73 != 1)
      {
        BOOL v252 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v252) {
          return 3;
        }
        goto LABEL_114;
      }
      if (v43 != 1 || v44 != 1 || v75 != 1)
      {
        BOOL v293 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v293) {
          return 3;
        }
LABEL_614:
        ZinValidateTd<17u>::Test(v293, v294, v295, v296, v297, v298, v299, v300);
        return 3;
      }
      if (v76 == 2)
      {
        BOOL v194 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v194) {
          return 3;
        }
LABEL_621:
        ZinValidateTd<17u>::Test(v194, v195, v196, v197, v198, v199, v200, v201);
        return 3;
      }
    }
    unsigned int v1850 = v51;
    unint64_t v1848 = v46;
    char v1846 = (char)WUCost;
    int v1842 = v53;
    char v1844 = v52;
    int v1861 = v45;
    __int16 v1857 = v49;
    unint64_t v1869 = v38 & 0x7FFF;
    uint64_t v1854 = v35;
    uint64_t v1838 = (v38 >> 16) & 0x7FFF;
    int v1840 = dword_211ED50F0[(v3 >> 2) & 3];
    uint64_t WUCost = (uint64_t *)NERasterization::GetWUCost(1 << v4, 1 << v4, 1 << v4, v1880, v77, 0, v72, v1838, 0, 0, v1887, v35);
    int v77 = v1840;
    int v53 = v1842;
    int v76 = (v1892 >> 2) & 3;
    int v45 = v1861;
    uint64_t v73 = (v41 >> 6) & 0x3F;
    unint64_t v72 = v1869;
    uint64_t v74 = v41 & 0x3F;
    LOWORD(v49) = v1857;
    LODWORD(v48) = v47 & 3;
    uint64_t v35 = v1854;
    unint64_t v71 = v1838;
    BOOL v1090 = WUCost == (uint64_t *)1;
    LOBYTE(v52) = v1844;
    LOBYTE(WUCost) = v1846;
    unint64_t v46 = v1848;
    unint64_t v44 = v41 >> 30;
    uint64_t v43 = (v41 >> 28) & 3;
    unsigned int v51 = v1850;
    LODWORD(v75) = v1867;
    if (!v1090)
    {
      BOOL v244 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v244) {
        ZinValidateTd<4u>::Test(v244, v245, v246, v247, v248, v249, v250, v251);
      }
      return 3;
    }
  }
  char v1847 = (char)WUCost;
  unint64_t v1849 = v46;
  unint64_t v1866 = v73;
  unsigned int v1868 = v75;
  unint64_t v1872 = v74;
  unsigned int v1852 = v44;
  unsigned int v1853 = v43;
  unsigned int v1851 = v51;
  unsigned int v1841 = (v47 >> 4) & 3;
  BOOL v78 = v1841 != 2;
  if (v48 == 2 && v1841 != 2)
  {
    int v1843 = v53;
    char v1845 = v52;
    int v1862 = v45;
    __int16 v1858 = v49;
    unint64_t v1870 = v72;
    uint64_t v1855 = v35;
    int v79 = v76;
    int HasWorkUnitWidthOf8 = NERasterization::HasWorkUnitWidthOf8(v35, v1887, 1 << (BYTE2(v3) & 7), 1 << v5, (1 << v4), v77, 0, v71, v72, 0, 0);
    BOOL v78 = v1841 != 2;
    int v53 = v1843;
    LOBYTE(v52) = v1845;
    int v76 = v79;
    int v45 = v1862;
    unint64_t v72 = v1870;
    LOWORD(v49) = v1858;
    uint64_t v35 = v1855;
    if (HasWorkUnitWidthOf8)
    {
      BOOL v81 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v81) {
        ZinValidateTd<4u>::Test(v81, v82, v83, v84, v85, v86, v87, v88);
      }
      return 3;
    }
  }
  unsigned int v89 = (v3 >> 4) & 7;
  int v90 = v49 & 7;
  if (!v89)
  {
    if ((v49 & 7) != 0)
    {
      if (v90 == 3)
      {
        int v128 = *(_DWORD *)(a3 + 928);
        if ((v128 & 0x80000) != 0)
        {
          if ((v1892 & 8) == 0)
          {
            BOOL v226 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v226) {
              ZinValidateTd<11u>::Test(v226, v227, v228, v229, v230, v231, v232, v233);
            }
            return 3;
          }
        }
        else if ((v76 - 1) >= 2)
        {
          BOOL v129 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v129) {
            ZinValidateTd<11u>::Test(v129, v130, v131, v132, v133, v134, v135, v136);
          }
          return 3;
        }
        if ((v128 & 0x800000) != 0)
        {
          BOOL v268 = v1866 >= 2 || v1872 >= 2;
          if (v268 && v76 != 2)
          {
            BOOL v269 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v269) {
              ZinValidateTd<11u>::Test(v269, v270, v271, v272, v273, v274, v275, v276);
            }
            return 3;
          }
        }
      }
      else if (v76)
      {
        BOOL v186 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v186) {
          return 3;
        }
        goto LABEL_556;
      }
    }
    else if ((v76 | 2) != 2)
    {
      BOOL v178 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v178) {
        ZinValidateTd<11u>::Test(v178, v179, v180, v181, v182, v183, v184, v185);
      }
      return 3;
    }
    if (((v3 & 8) != 0 || v1881 == 4 && v4 <= 2) && v76 == 2)
    {
      BOOL v194 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v194) {
        return 3;
      }
      goto LABEL_621;
    }
  }
  unsigned int v91 = v45 & 0x1FFF;
  if (v32)
  {
    if (v91 <= 1)
    {
      BOOL v153 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v153) {
        ZinValidateTd<4u>::Test(v153, v154, v155, v156, v157, v158, v159, v160);
      }
      return 3;
    }
    if ((*(_DWORD *)(a3 + 928) & 7) != 0)
    {
      BOOL v137 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v137) {
        ZinValidateTd<4u>::Test(v137, v138, v139, v140, v141, v142, v143, v144);
      }
      return 3;
    }
    if ((*(_DWORD *)(a3 + 928) & 0x4018) == 8)
    {
      BOOL v202 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v202) {
        ZinValidateTd<4u>::Test(v202, v203, v204, v205, v206, v207, v208, v209);
      }
      return 3;
    }
  }
  int v92 = v53;
  char v93 = v52;
  uint64_t v94 = (v41 >> 13) & 3;
  uint64_t v95 = *(void *)&v1888 & 0x1FFFFLL;
  uint64_t v96 = (v41 >> 15) & 3;
  unint64_t v97 = *(void *)&v1890 & 0x1FFFFLL;
  uint64_t v1893 = v1885 >> 6;
  unsigned int v98 = v1883 & 7;
  unint64_t v99 = (v41 >> 17) & 0x1F;
  unint64_t v100 = v1885 & 0x1F;
  unint64_t v101 = (v41 >> 22) & 0x1F;
  unint64_t v102 = (v1885 >> 8) & 0xF;
  unsigned int v103 = HIWORD(v45);
  if (v90 != 1)
  {
    if (v90 != 2)
    {
      int v1891 = v76;
      if ((v90 - 3) <= 1 && v48 != (*(_DWORD *)(a3 + 924) & 3))
      {
        BOOL v260 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v260) {
          ZinValidateTd<11u>::Test(v260, v261, v262, v263, v264, v265, v266, v267);
        }
        return 3;
      }
      goto LABEL_72;
    }
    if (v95 != 2 * v97)
    {
      BOOL v210 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v210) {
        ZinValidateTd<4u>::Test(v210, v211, v212, v213, v214, v215, v216, v217);
      }
      return 3;
    }
    if ((v1883 & 7) != 0)
    {
      BOOL v104 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v104) {
LABEL_45:
      }
        ZinValidateTd<17u>::Test(v104, v105, v106, v107, v108, v109, v110, v111);
      return 3;
    }
    if (v1872 == 1)
    {
      if (v1866 == 1)
      {
        int v1891 = v76;
        __int16 v1864 = v45;
        if (v100 != 1)
        {
          BOOL v362 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!v362) {
            return 3;
          }
          goto LABEL_427;
        }
        if (v94 == 1)
        {
          if (v96 == 1)
          {
            if (v1893 != 1)
            {
              BOOL v409 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v409) {
                return 3;
              }
              goto LABEL_421;
            }
            if (v99)
            {
              BOOL v285 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v285) {
                return 3;
              }
LABEL_136:
              ZinValidateTd<17u>::Test(v285, v286, v287, v288, v289, v290, v291, v292);
              return 3;
            }
            if (v101)
            {
              BOOL v425 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v425) {
                return 3;
              }
LABEL_222:
              ZinValidateTd<17u>::Test(v425, v426, v427, v428, v429, v430, v431, v432);
              return 3;
            }
            if (v102)
            {
              BOOL v441 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v441) {
                return 3;
              }
LABEL_230:
              ZinValidateTd<17u>::Test(v441, v442, v443, v444, v445, v446, v447, v448);
              return 3;
            }
            if (v1853 == 1)
            {
              if (v1852 == 1)
              {
                if (v1868 == 1)
                {
                  if ((v45 & 0x4000) == 0)
                  {
                    BOOL v465 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v465) {
                      return 3;
                    }
LABEL_244:
                    ZinValidateTd<10u>::Test(v465, v466, v467, v468, v469, v470, v471, v472);
                    return 3;
                  }
                  if (HIWORD(v45) != 2)
                  {
                    BOOL v563 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (v563) {
                      ZinValidateTd<4u>::Test(v563, v564, v565, v566, v567, v568, v569, v570);
                    }
                    return 3;
                  }
                  if (v1881 == 4)
                  {
                    BOOL v547 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v547) {
                      return 3;
                    }
LABEL_282:
                    ZinValidateTd<10u>::Test(v547, v548, v549, v550, v551, v552, v553, v554);
                    return 3;
                  }
                  if (((*(_DWORD *)(a3 + 924) ^ *(_DWORD *)(a3 + 492)) & 3) != 0)
                  {
                    BOOL v587 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v587) {
                      return 3;
                    }
LABEL_299:
                    ZinValidateTd<17u>::Test(v587, v588, v589, v590, v591, v592, v593, v594);
                    return 3;
                  }
                  if ((v49 & 8) == 0)
                  {
                    BOOL v604 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v604) {
                      return 3;
                    }
LABEL_310:
                    ZinValidateTd<11u>::Test(v604, v605, v606, v607, v608, v609, v610, v611);
                    return 3;
                  }
                  if ((v49 & 0x10) == 0)
                  {
                    if ((v49 & 0x4000) == 0)
                    {
                      unsigned int v612 = *(_DWORD *)(a3 + 528) & 0x7FFF;
                      if (v612 != 1) {
                        unsigned int v612 = v71 % v612 == 1;
                      }
                      if (!v14) {
                        unsigned int v612 = 1;
                      }
                      if (v5 || !v612) {
                        goto LABEL_357;
                      }
                      if (v48 <= 1)
                      {
                        if (v72 % *(void *)(v35 + 1864) <= *(void *)(v35 + 1856))
                        {
                          BOOL v613 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (!v613) {
                            return 3;
                          }
LABEL_325:
                          ZinValidateTd<6u>::Test(v613, v614, v615, v616, v617, v618, v619, v620);
                          return 3;
                        }
LABEL_357:
                        LOWORD(v45) = v1864;
                        if (!v5 && (*(_DWORD *)(a3 + 528) & 0x7FFF0000) != 0)
                        {
                          BOOL v663 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (!v663) {
                            return 3;
                          }
LABEL_360:
                          ZinValidateTd<10u>::Test(v663, v664, v665, v666, v667, v668, v669, v670);
                          return 3;
                        }
                        goto LABEL_72;
                      }
                      if (v72 % *(void *)(v35 + 1856) > *(void *)(v35 + 1872)) {
                        goto LABEL_357;
                      }
                      BOOL v761 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (!v761) {
                        return 3;
                      }
LABEL_423:
                      ZinValidateTd<10u>::Test(v761, v762, v763, v764, v765, v766, v767, v768);
                      return 3;
                    }
                    BOOL v639 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (!v639) {
                      return 3;
                    }
LABEL_346:
                    ZinValidateTd<11u>::Test(v639, v640, v641, v642, v643, v644, v645, v646);
                    return 3;
                  }
                  BOOL v631 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v631) {
                    return 3;
                  }
LABEL_342:
                  ZinValidateTd<11u>::Test(v631, v632, v633, v634, v635, v636, v637, v638);
                  return 3;
                }
                BOOL v531 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v531) {
                  return 3;
                }
LABEL_713:
                ZinValidateTd<17u>::Test(v531, v532, v533, v534, v535, v536, v537, v538);
                return 3;
              }
              BOOL v515 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v515) {
                return 3;
              }
LABEL_680:
              ZinValidateTd<17u>::Test(v515, v516, v517, v518, v519, v520, v521, v522);
              return 3;
            }
            BOOL v489 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (!v489) {
              return 3;
            }
LABEL_674:
            ZinValidateTd<17u>::Test(v489, v490, v491, v492, v493, v494, v495, v496);
            return 3;
          }
          BOOL v393 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!v393) {
            return 3;
          }
LABEL_209:
          ZinValidateTd<17u>::Test(v393, v394, v395, v396, v397, v398, v399, v400);
          return 3;
        }
        BOOL v370 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v370) {
          return 3;
        }
LABEL_195:
        ZinValidateTd<17u>::Test(v370, v371, v372, v373, v374, v375, v376, v377);
        return 3;
      }
      BOOL v330 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v330) {
        return 3;
      }
LABEL_173:
      ZinValidateTd<17u>::Test(v330, v331, v332, v333, v334, v335, v336, v337);
      return 3;
    }
    BOOL v322 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v322) {
      return 3;
    }
LABEL_169:
    ZinValidateTd<17u>::Test(v322, v323, v324, v325, v326, v327, v328, v329);
    return 3;
  }
  if (v95 != v97)
  {
    BOOL v218 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v218) {
      return 3;
    }
    goto LABEL_97;
  }
  if ((v1883 & 7) != 0)
  {
    BOOL v104 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v104) {
      return 3;
    }
    goto LABEL_45;
  }
  if (v1872 != 1)
  {
    BOOL v322 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v322) {
      return 3;
    }
    goto LABEL_169;
  }
  if (v1866 != 1)
  {
    BOOL v330 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v330) {
      return 3;
    }
    goto LABEL_173;
  }
  int v1891 = v76;
  __int16 v1865 = v45;
  if (v100 != 1)
  {
    BOOL v362 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v362) {
      return 3;
    }
    goto LABEL_427;
  }
  if (v94 != 1)
  {
    BOOL v370 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v370) {
      return 3;
    }
    goto LABEL_195;
  }
  if (v96 != 1)
  {
    BOOL v393 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v393) {
      return 3;
    }
    goto LABEL_209;
  }
  if (v1893 != 1)
  {
    BOOL v409 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v409) {
      return 3;
    }
    goto LABEL_421;
  }
  if (v99)
  {
    BOOL v285 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v285) {
      return 3;
    }
    goto LABEL_136;
  }
  if (v101)
  {
    BOOL v425 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v425) {
      return 3;
    }
    goto LABEL_222;
  }
  if (v102)
  {
    BOOL v441 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v441) {
      return 3;
    }
    goto LABEL_230;
  }
  if (v1853 != 1)
  {
    BOOL v489 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v489) {
      return 3;
    }
    goto LABEL_674;
  }
  if (v1852 != 1)
  {
    BOOL v515 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v515) {
      return 3;
    }
    goto LABEL_680;
  }
  if (v1868 != 1)
  {
    BOOL v531 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v531) {
      return 3;
    }
    goto LABEL_713;
  }
  if ((v45 & 0x4000) == 0)
  {
    BOOL v465 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v465) {
      return 3;
    }
    goto LABEL_244;
  }
  if (HIWORD(v45) != 1)
  {
    BOOL v571 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v571) {
      ZinValidateTd<4u>::Test(v571, v572, v573, v574, v575, v576, v577, v578);
    }
    return 3;
  }
  if (v1881 == 4)
  {
    BOOL v547 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v547) {
      return 3;
    }
    goto LABEL_282;
  }
  if (((*(_DWORD *)(a3 + 924) ^ *(_DWORD *)(a3 + 492)) & 3) != 0)
  {
    BOOL v587 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v587) {
      return 3;
    }
    goto LABEL_299;
  }
  if ((v49 & 8) == 0)
  {
    BOOL v604 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v604) {
      return 3;
    }
    goto LABEL_310;
  }
  if ((v49 & 0x10) != 0)
  {
    BOOL v631 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v631) {
      return 3;
    }
    goto LABEL_342;
  }
  if ((v49 & 0x4000) != 0)
  {
    BOOL v639 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v639) {
      return 3;
    }
    goto LABEL_346;
  }
  unsigned int v621 = *(_DWORD *)(a3 + 528) & 0x7FFF;
  if (v621 != 1) {
    unsigned int v621 = v71 % v621 == 1;
  }
  if (!v14) {
    unsigned int v621 = 1;
  }
  if (!v5 && v621)
  {
    if (v48 > 1)
    {
      if (v72 % *(void *)(v35 + 1856) <= *(void *)(v35 + 1872))
      {
        BOOL v761 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v761) {
          return 3;
        }
        goto LABEL_423;
      }
    }
    else if (v72 % *(void *)(v35 + 1864) <= *(void *)(v35 + 1856))
    {
      BOOL v613 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v613) {
        return 3;
      }
      goto LABEL_325;
    }
  }
  LOWORD(v45) = v1865;
  if (!v5 && (*(_DWORD *)(a3 + 528) & 0x7FFF0000) != 0)
  {
    BOOL v663 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v663) {
      return 3;
    }
    goto LABEL_360;
  }
LABEL_72:
  uint64_t v169 = (v3 >> 19) & 7;
  if ((v3 & 0x10000000) != 0)
  {
    uint64_t v234 = v94;
    __int16 v235 = v45;
    if (*(void *)(v35 + 1088) < v72)
    {
      BOOL v236 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v236) {
        ZinValidateTd<11u>::Test(v236, v237, v238, v239, v240, v241, v242, v243);
      }
      return 3;
    }
    if (*(void *)(v35 + 1080) < v97)
    {
      BOOL v277 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v277) {
        ZinValidateTd<11u>::Test(v277, v278, v279, v280, v281, v282, v283, v284);
      }
      return 3;
    }
    char v1859 = v49;
    unsigned int v309 = 1 << v98 << v169;
    if (*(unsigned char *)(v1878 + 527) || (int v310 = *(unsigned __int8 *)(v35 + 1270), *(unsigned char *)(v35 + 1270)))
    {
      unint64_t v311 = v72;
      int v310 = v309 >= v97;
    }
    else
    {
      unint64_t v311 = v72;
    }
    if (v1841 <= 1)
    {
      char v312 = (v309 & 0xF) != 0 ? v310 : 1;
      if ((v312 & 1) == 0)
      {
        BOOL v354 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v354) {
          ZinValidateTd<11u>::Test(v354, v355, v356, v357, v358, v359, v360, v361);
        }
        return 3;
      }
    }
    int v313 = (v309 & 7) == 0 || v78;
    if (((v313 | v310) & 1) == 0)
    {
      BOOL v338 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v338) {
        ZinValidateTd<11u>::Test(v338, v339, v340, v341, v342, v343, v344, v345);
      }
      return 3;
    }
    if (v1881 == 4 && v98 >= 5)
    {
      BOOL v314 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v314) {
        ZinValidateTd<11u>::Test(v314, v315, v316, v317, v318, v319, v320, v321);
      }
      return 3;
    }
    LOBYTE(v49) = v1859;
    if (v1853 != 1 || (unint64_t v72 = v311, v169 = (v3 >> 19) & 7, v1852 != 1) || (LOWORD(v45) = v235, v94 = v234, v1868 != 1))
    {
      BOOL v293 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v293) {
        return 3;
      }
      goto LABEL_614;
    }
  }
  __int16 v1863 = v45;
  if (v99 >= v1872 || *(void *)(v35 + 144) < v99)
  {
    BOOL v170 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v170) {
      ZinValidateTd<4u>::Test(v170, v171, v172, v173, v174, v175, v176, v177);
    }
    return 3;
  }
  if (v101 >= v1866 || *(void *)(v35 + 152) < v101)
  {
    BOOL v301 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v301) {
      ZinValidateTd<4u>::Test(v301, v302, v303, v304, v305, v306, v307, v308);
    }
    return 3;
  }
  char v1884 = v169;
  unint64_t v1889 = v94;
  unint64_t v1871 = v72;
  char v1860 = v49;
  unint64_t v1839 = v71;
  uint64_t v1856 = v35;
  unint64_t v1886 = v95;
  if (v102 >= v100 || *(void *)(v35 + 160) < v102)
  {
    BOOL v346 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v346) {
      ZinValidateTd<11u>::Test(v346, v347, v348, v349, v350, v351, v352, v353);
    }
    return 3;
  }
  int64_t v378 = v1877 & 0x7FFF;
  uint64_t v379 = ((int)v72 - 1) * (uint64_t)(int)v94;
  unint64_t v380 = v379 - v99;
  if ((uint64_t)(v379 - v99) >= v378)
  {
    BOOL v401 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v401) {
      ZinValidateTd<4u>::Test(v401, v402, v403, v404, v405, v406, v407, v408);
    }
    return 3;
  }
  uint64_t v381 = ((int)v71 - 1) * (uint64_t)(int)v96;
  unint64_t v382 = v381 - v101;
  uint64_t v1882 = (v1877 >> 16) & 0x7FFF;
  if ((uint64_t)(v381 - v101) >= v1882)
  {
    BOOL v417 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v417) {
      ZinValidateTd<4u>::Test(v417, v418, v419, v420, v421, v422, v423, v424);
    }
    return 3;
  }
  int v383 = v1875 & 0x7FFF;
  int64_t v384 = (v383 - 1) * (uint64_t)(int)v1893 - v102;
  int64_t v1879 = v1876 & 0x7FFF;
  if (v384 >= v1879)
  {
    BOOL v433 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v433) {
      ZinValidateTd<11u>::Test(v433, v434, v435, v436, v437, v438, v439, v440);
    }
    return 3;
  }
  if (v89)
  {
    if ((v380 & 0x8000000000000000) != 0)
    {
      BOOL v457 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v457) {
        ZinValidateTd<11u>::Test(v457, v458, v459, v460, v461, v462, v463, v464);
      }
      return 3;
    }
    if ((v382 & 0x8000000000000000) != 0)
    {
      BOOL v473 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v473) {
        ZinValidateTd<11u>::Test(v473, v474, v475, v476, v477, v478, v479, v480);
      }
      return 3;
    }
    if (v384 < 0)
    {
      BOOL v497 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v497) {
        ZinValidateTd<11u>::Test(v497, v498, v499, v500, v501, v502, v503, v504);
      }
      return 3;
    }
  }
  if ((uint64_t)(v380 + ((v1872 - 1 + v94) & -v94)) < v378)
  {
    BOOL v385 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v385) {
      ZinValidateTd<6u>::Test(v385, v386, v387, v388, v389, v390, v391, v392);
    }
    return 3;
  }
  if ((uint64_t)(v382 + ((v96 + v1866 - 1) & -v96)) < v1882)
  {
    BOOL v449 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v449) {
      ZinValidateTd<6u>::Test(v449, v450, v451, v452, v453, v454, v455, v456);
    }
    return 3;
  }
  if ((uint64_t)(v384 + ((v100 + v1893 - 1) & -v1893)) < v1879)
  {
    BOOL v481 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v481) {
      ZinValidateTd<11u>::Test(v481, v482, v483, v484, v485, v486, v487, v488);
    }
    return 3;
  }
  int v505 = v94 * v96;
  unint64_t v506 = *(void *)(v1856 + 368);
  if ((v1893 * v1886) * (unint64_t)(v94 * v96) > v506)
  {
    BOOL v507 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v507) {
      ZinValidateTd<11u>::Test(v507, v508, v509, v510, v511, v512, v513, v514);
    }
    return 3;
  }
  if (v1868 * v97 * (unint64_t)(v1853 * v1852) > v506)
  {
    BOOL v523 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v523) {
      ZinValidateTd<11u>::Test(v523, v524, v525, v526, v527, v528, v529, v530);
    }
    return 3;
  }
  if (v1853 * (unint64_t)v1871 > *(void *)(v1856 + 320))
  {
    BOOL v539 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v539) {
      ZinValidateTd<11u>::Test(v539, v540, v541, v542, v543, v544, v545, v546);
    }
    return 3;
  }
  if (v1852 * (unint64_t)v71 > *(void *)(v1856 + 336))
  {
    BOOL v555 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v555) {
      ZinValidateTd<11u>::Test(v555, v556, v557, v558, v559, v560, v561, v562);
    }
    return 3;
  }
  if (v1868 * (unint64_t)(v1875 & 0x7FFF) > *(void *)(v1856 + 352))
  {
    BOOL v579 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v579) {
      ZinValidateTd<11u>::Test(v579, v580, v581, v582, v583, v584, v585, v586);
    }
    return 3;
  }
  if ((v1863 & 0x4000) != 0 && (v3 & 0x20000000) == 0)
  {
    unsigned int v595 = v1886 / v103;
    if (v1886 % v103)
    {
      BOOL v596 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v596) {
        ZinValidateTd<4u>::Test(v596, v597, v598, v599, v600, v601, v602, v603);
      }
      return 3;
    }
    uint64_t v622 = v97 / v595;
    if (v97 % v595)
    {
      BOOL v623 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v623) {
        ZinValidateTd<4u>::Test(v623, v624, v625, v626, v627, v628, v629, v630);
      }
      return 3;
    }
    if (v622 > 1 << v98)
    {
      BOOL v647 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v647) {
        ZinValidateTd<4u>::Test(v647, v648, v649, v650, v651, v652, v653, v654);
      }
      return 3;
    }
    if (v622 < 1 << v98 && v622 << v1884 < v97)
    {
      BOOL v655 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v655) {
        ZinValidateTd<4u>::Test(v655, v656, v657, v658, v659, v660, v661, v662);
      }
      return 3;
    }
    if (v622 >= 2 && (v595 & ((1 << v1884) + 0x1FFFF)) != 0)
    {
      BOOL v671 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v671) {
        ZinValidateTd<4u>::Test(v671, v672, v673, v674, v675, v676, v677, v678);
      }
      return 3;
    }
  }
  if (v48 == 2)
  {
    if (v94 == 2)
    {
      if (*(void *)(v1856 + 80) < v1872)
      {
        BOOL v679 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v679) {
          ZinValidateTd<6u>::Test(v679, v680, v681, v682, v683, v684, v685, v686);
        }
        return 3;
      }
    }
    else if (*(void *)(v1856 + 88) < v1872)
    {
      BOOL v695 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v695) {
        ZinValidateTd<4u>::Test(v695, v696, v697, v698, v699, v700, v701, v702);
      }
      return 3;
    }
  }
  else if (v94 == 2)
  {
    if (*(void *)(v1856 + 56) < v1872)
    {
      BOOL v687 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v687) {
        ZinValidateTd<6u>::Test(v687, v688, v689, v690, v691, v692, v693, v694);
      }
      return 3;
    }
  }
  else if (*(void *)(v1856 + 64) < v1872)
  {
    BOOL v703 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v703) {
      ZinValidateTd<4u>::Test(v703, v704, v705, v706, v707, v708, v709, v710);
    }
    return 3;
  }
  if (v96 == 2)
  {
    if (*(void *)(v1856 + 104) < v1866)
    {
      BOOL v711 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v711) {
        ZinValidateTd<6u>::Test(v711, v712, v713, v714, v715, v716, v717, v718);
      }
      return 3;
    }
  }
  else if (*(void *)(v1856 + 112) < v1866)
  {
    BOOL v719 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v719) {
      ZinValidateTd<4u>::Test(v719, v720, v721, v722, v723, v724, v725, v726);
    }
    return 3;
  }
  if (v90)
  {
    if (v1893 == 2)
    {
      if (*(void *)(v1856 + 176) < v100)
      {
        BOOL v727 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v727) {
          ZinValidateTd<11u>::Test(v727, v728, v729, v730, v731, v732, v733, v734);
        }
        return 3;
      }
    }
    else if (*(void *)(v1856 + 168) < v100)
    {
      BOOL v743 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v743) {
        ZinValidateTd<11u>::Test(v743, v744, v745, v746, v747, v748, v749, v750);
      }
      return 3;
    }
  }
  else if (v1893 == 2)
  {
    if (*(void *)(v1856 + 120) < v100)
    {
      BOOL v735 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v735) {
        ZinValidateTd<11u>::Test(v735, v736, v737, v738, v739, v740, v741, v742);
      }
      return 3;
    }
  }
  else if (*(void *)(v1856 + 128) < v100)
  {
    BOOL v751 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v751) {
      ZinValidateTd<11u>::Test(v751, v752, v753, v754, v755, v756, v757, v758);
    }
    return 3;
  }
  unint64_t v759 = v1873 & 0xF;
  unsigned int v760 = v89 - 7;
  if (v89)
  {
    if (v1853 != 1 || v1852 != 1 || v1868 != 1)
    {
      BOOL v293 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v293) {
        return 3;
      }
      goto LABEL_614;
    }
    if (v1893 == 1)
    {
      if (v100 == 1)
      {
        if (v1886 == v97)
        {
          if (v1879 != v383)
          {
            BOOL v769 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v769) {
              ZinValidateTd<11u>::Test(v769, v770, v771, v772, v773, v774, v775, v776);
            }
            return 3;
          }
          if (v1891 == 2)
          {
            BOOL v194 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (!v194) {
              return 3;
            }
            goto LABEL_621;
          }
          if (*(void *)(v1856 + 976) > v759)
          {
            BOOL v777 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v777) {
              ZinValidateTd<11u>::Test(v777, v778, v779, v780, v781, v782, v783, v784);
            }
            return 3;
          }
          int v785 = v1873 >> 4;
          if (*(unsigned char *)(v1856 + 1267) && *(void *)(v1856 + 984) < (unint64_t)(v785 + v759))
          {
            BOOL v786 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v786) {
              ZinValidateTd<11u>::Test(v786, v787, v788, v789, v790, v791, v792, v793);
            }
            return 3;
          }
          uint64_t v794 = (v1874 >> 21) & 0x1F;
          uint64_t v795 = (v1874 >> 16) & 0x1F;
          if (v794 > v795)
          {
            BOOL v796 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v796) {
              ZinValidateTd<11u>::Test(v796, v797, v798, v799, v800, v801, v802, v803);
            }
            return 3;
          }
          uint64_t v804 = (v1874 >> 26) & 0x1F;
          if (v804 > v795)
          {
            BOOL v805 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v805) {
              ZinValidateTd<11u>::Test(v805, v806, v807, v808, v809, v810, v811, v812);
            }
            return 3;
          }
          if (v795 > v1880)
          {
            BOOL v813 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v813) {
              ZinValidateTd<11u>::Test(v813, v814, v815, v816, v817, v818, v819, v820);
            }
            return 3;
          }
          if (v1839 - v795 + v794 + v804 > *(void *)(v1856 + 1008) * (v1880 - v795))
          {
            BOOL v821 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v821) {
              ZinValidateTd<11u>::Test(v821, v822, v823, v824, v825, v826, v827, v828);
            }
            return 3;
          }
          if ((v1851 & 2) != 0 && (v92 & 2) != 0)
          {
            BOOL v829 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v829) {
              ZinValidateTd<11u>::Test(v829, v830, v831, v832, v833, v834, v835, v836);
            }
            return 3;
          }
          if ((v1851 & 0x20) != 0 && (v92 & 0x1000000) != 0)
          {
            BOOL v837 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v837) {
              ZinValidateTd<11u>::Test(v837, v838, v839, v840, v841, v842, v843, v844);
            }
            return 3;
          }
          int v845 = v93 & 3;
          if (v89 == 1)
          {
            if (*(void *)(v1856 + 1016) < v1872)
            {
              BOOL v846 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v846) {
                ZinValidateTd<11u>::Test(v846, v847, v848, v849, v850, v851, v852, v853);
              }
              return 3;
            }
            if (*(void *)(v1856 + 1024) < v1866)
            {
              BOOL v862 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v862) {
                ZinValidateTd<11u>::Test(v862, v863, v864, v865, v866, v867, v868, v869);
              }
              return 3;
            }
            if ((uint64_t)(v1872 - v99 + v379) < v378)
            {
              BOOL v878 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v878) {
                ZinValidateTd<11u>::Test(v878, v879, v880, v881, v882, v883, v884, v885);
              }
              return 3;
            }
            if ((uint64_t)(v1866 - v101 + v381) < v1882)
            {
              BOOL v894 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v894) {
                ZinValidateTd<11u>::Test(v894, v895, v896, v897, v898, v899, v900, v901);
              }
              return 3;
            }
            if ((v1851 & 8) != 0)
            {
              BOOL v926 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v926) {
                ZinValidateTd<11u>::Test(v926, v927, v928, v929, v930, v931, v932, v933);
              }
              return 3;
            }
            if ((v1851 & 1) == 0)
            {
              if ((v1851 & 2) == 0)
              {
                if ((v1851 & 4) != 0)
                {
                  BOOL v982 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v982) {
                    ZinValidateTd<11u>::Test(v982, v983, v984, v985, v986, v987, v988, v989);
                  }
                  return 3;
                }
                if ((v1851 & 0x80) != 0)
                {
                  BOOL v998 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v998) {
                    ZinValidateTd<11u>::Test(v998, v999, v1000, v1001, v1002, v1003, v1004, v1005);
                  }
                  return 3;
                }
                if ((v1851 & 0x10) == 0)
                {
                  if ((v1851 & 0x20) == 0)
                  {
                    if ((v1851 & 0x40) != 0)
                    {
                      BOOL v1637 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v1637) {
                        ZinValidateTd<11u>::Test(v1637, v1638, v1639, v1640, v1641, v1642, v1643, v1644);
                      }
                      return 3;
                    }
                    if ((v1851 & 0x100) != 0)
                    {
                      BOOL v1677 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v1677) {
                        ZinValidateTd<11u>::Test(v1677, v1678, v1679, v1680, v1681, v1682, v1683, v1684);
                      }
                      return 3;
                    }
                    if ((v1851 & 0x200) != 0)
                    {
                      BOOL v1702 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v1702) {
                        ZinValidateTd<11u>::Test(v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709);
                      }
                      return 3;
                    }
                    if ((v1851 & 0x400) != 0)
                    {
                      BOOL v910 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v910) {
                        ZinValidateTd<11u>::Test(v910, v911, v912, v913, v914, v915, v916, v917);
                      }
                      return 3;
                    }
LABEL_540:
                    if (v845 == 3)
                    {
                      if (v1891 != 3)
                      {
                        BOOL v1006 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v1006) {
                          ZinValidateTd<11u>::Test(v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013);
                        }
                        return 3;
                      }
                    }
                    else
                    {
                      if (v845 == 2)
                      {
                        if (v1891 != 1)
                        {
                          BOOL v990 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (v990) {
                            ZinValidateTd<11u>::Test(v990, v991, v992, v993, v994, v995, v996, v997);
                          }
                          return 3;
                        }
                        goto LABEL_557;
                      }
                      if (v1891)
                      {
                        BOOL v186 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (!v186) {
                          return 3;
                        }
                        goto LABEL_556;
                      }
                    }
LABEL_557:
                    if (v760 >= 0xFFFFFFFE)
                    {
                      if (v845 == 1)
                      {
                        BOOL v1022 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v1022) {
                          ZinValidateTd<11u>::Test(v1022, v1023, v1024, v1025, v1026, v1027, v1028, v1029);
                        }
                        return 3;
                      }
                      if (v795)
                      {
                        BOOL v1046 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v1046) {
                          ZinValidateTd<11u>::Test(v1046, v1047, v1048, v1049, v1050, v1051, v1052, v1053);
                        }
                        return 3;
                      }
                      if (*(void *)(v1856 + 960) < v97
                        && (v378 > 1 << v759 || v1882 > 1 << v785 || v1879 != 1))
                      {
                        BOOL v1629 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v1629) {
                          ZinValidateTd<11u>::Test(v1629, v1630, v1631, v1632, v1633, v1634, v1635, v1636);
                        }
                        return 3;
                      }
                    }
                    if ((v1851 & 0x100) != 0 && ((v1851 >> 9) & 1) != 0 && *(void *)(v1856 + 1064) < v1886)
                    {
                      BOOL v1014 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v1014) {
                        ZinValidateTd<11u>::Test(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1021);
                      }
                      return 3;
                    }
                    if ((v1851 & 0x400) != 0)
                    {
                      if (*(void *)(v1856 + 1072) < v97)
                      {
                        BOOL v1030 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v1030) {
                          ZinValidateTd<11u>::Test(v1030, v1031, v1032, v1033, v1034, v1035, v1036, v1037);
                        }
                        return 3;
                      }
                      if (v89 - 2 <= 2)
                      {
                        if (v1871 != 1)
                        {
                          BOOL v1710 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (v1710) {
                            ZinValidateTd<11u>::Test(v1710, v1711, v1712, v1713, v1714, v1715, v1716, v1717);
                          }
                          return 3;
                        }
                        if (v1839 != 1)
                        {
                          BOOL v1726 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (v1726) {
                            ZinValidateTd<11u>::Test(v1726, v1727, v1728, v1729, v1730, v1731, v1732, v1733);
                          }
                          return 3;
                        }
                      }
                    }
                    goto LABEL_582;
                  }
                  BOOL v854 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (!v854) {
                    return 3;
                  }
LABEL_477:
                  ZinValidateTd<17u>::Test(v854, v855, v856, v857, v858, v859, v860, v861);
                  return 3;
                }
                BOOL v1038 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v1038) {
                  return 3;
                }
LABEL_571:
                ZinValidateTd<17u>::Test(v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045);
                return 3;
              }
              BOOL v966 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (!v966) {
                return 3;
              }
LABEL_528:
              ZinValidateTd<17u>::Test(v966, v967, v968, v969, v970, v971, v972, v973);
              return 3;
            }
            BOOL v942 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (!v942) {
              return 3;
            }
LABEL_517:
            ZinValidateTd<17u>::Test(v942, v943, v944, v945, v946, v947, v948, v949);
            return 3;
          }
          if (v99 | v101)
          {
            BOOL v870 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v870) {
              ZinValidateTd<11u>::Test(v870, v871, v872, v873, v874, v875, v876, v877);
            }
            return 3;
          }
          if (v1872 == 1 && v1866 == 1)
          {
            if (v1889 != 1)
            {
              BOOL v886 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v886) {
                ZinValidateTd<11u>::Test(v886, v887, v888, v889, v890, v891, v892, v893);
              }
              return 3;
            }
            if (v1882 != v1839)
            {
              BOOL v902 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v902) {
                ZinValidateTd<11u>::Test(v902, v903, v904, v905, v906, v907, v908, v909);
              }
              return 3;
            }
            if (v378 != v1871)
            {
              BOOL v918 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v918) {
                ZinValidateTd<11u>::Test(v918, v919, v920, v921, v922, v923, v924, v925);
              }
              return 3;
            }
            if ((v1851 & 0x100) != 0)
            {
              if ((v1851 & 1) == 0 && v378 != 1)
              {
                BOOL v934 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v934) {
                  ZinValidateTd<11u>::Test(v934, v935, v936, v937, v938, v939, v940, v941);
                }
                return 3;
              }
              if ((v1851 & 2) == 0 && v1882 != 1)
              {
                BOOL v958 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v958) {
                  ZinValidateTd<11u>::Test(v958, v959, v960, v961, v962, v963, v964, v965);
                }
                return 3;
              }
            }
            if ((v1851 & 0x200) != 0)
            {
              if ((v1851 & 0x10) == 0 && v378 != 1 && v89 != 4)
              {
                BOOL v950 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v950) {
                  ZinValidateTd<11u>::Test(v950, v951, v952, v953, v954, v955, v956, v957);
                }
                return 3;
              }
              if ((v1851 & 0x20) == 0 && v1882 != 1 && v89 != 4)
              {
                BOOL v974 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v974) {
                  ZinValidateTd<11u>::Test(v974, v975, v976, v977, v978, v979, v980, v981);
                }
                return 3;
              }
            }
            if (v89 == 4)
            {
              if (v1851)
              {
                BOOL v942 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v942) {
                  return 3;
                }
                goto LABEL_517;
              }
              if ((v1851 & 2) != 0)
              {
                BOOL v966 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v966) {
                  return 3;
                }
                goto LABEL_528;
              }
              if ((v1851 & 0x10) != 0)
              {
                BOOL v1038 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v1038) {
                  return 3;
                }
                goto LABEL_571;
              }
              if ((v1851 & 0x20) != 0)
              {
                BOOL v854 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (!v854) {
                  return 3;
                }
                goto LABEL_477;
              }
            }
            else if (v760 >= 0xFFFFFFFE)
            {
              goto LABEL_540;
            }
            if (!v1891) {
              goto LABEL_557;
            }
            BOOL v186 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (!v186) {
              return 3;
            }
LABEL_556:
            ZinValidateTd<10u>::Test(v186, v187, v188, v189, v190, v191, v192, v193);
            return 3;
          }
          BOOL v252 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!v252) {
            return 3;
          }
LABEL_114:
          ZinValidateTd<19u>::Test(v252, v253, v254, v255, v256, v257, v258, v259);
          return 3;
        }
        BOOL v218 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v218) {
          return 3;
        }
LABEL_97:
        ZinValidateTd<10u>::Test(v218, v219, v220, v221, v222, v223, v224, v225);
        return 3;
      }
      BOOL v362 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v362) {
        return 3;
      }
LABEL_427:
      ZinValidateTd<17u>::Test(v362, v363, v364, v365, v366, v367, v368, v369);
      return 3;
    }
    BOOL v409 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v409) {
      return 3;
    }
LABEL_421:
    ZinValidateTd<17u>::Test(v409, v410, v411, v412, v413, v414, v415, v416);
    return 3;
  }
LABEL_582:
  if (!*(unsigned char *)(v1856 + 1234))
  {
    if ((v505 * v1886) * (unint64_t)v91 > v506)
    {
      BOOL v1063 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1063) {
        ZinValidateTd<6u>::Test(v1063, v1064, v1065, v1066, v1067, v1068, v1069, v1070);
      }
      return 3;
    }
    if (v1853 * v1852 * v97 * (unint64_t)v91 > v506)
    {
      BOOL v1081 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1081) {
        ZinValidateTd<6u>::Test(v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088);
      }
      return 3;
    }
  }
  if ((v1847 & 8) == 0) {
    goto LABEL_584;
  }
  int v1071 = v1849 & 3;
  if (v1071 == 2)
  {
    float v1072 = 1.25;
  }
  else if (v1071 == 3)
  {
    float v1072 = 4.0;
  }
  else
  {
    float v1072 = 1.0;
    if (v1071 == 1) {
      float v1072 = 2.0;
    }
  }
  unint64_t v1089 = (v1849 >> 24) & 0xF;
  BOOL v1090 = v1071 == 1 && v1841 == 2;
  if (v1090) {
    float v1072 = 2.0;
  }
  if (v89)
  {
    if (((v1851 >> 10) & 1) == 0) {
      unint64_t v97 = (1 << v759) >> (v48 == 2);
    }
    if ((((uint64_t)(float)(v1072 * (float)(uint64_t)v97) * v1089) & 0x3FLL) == 0
      || v760 > 0xFFFFFFFD
      || v1871 <= 1 << v759)
    {
      goto LABEL_584;
    }
    BOOL v1091 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v1091) {
      return 3;
    }
LABEL_637:
    ZinValidateTd<17u>::Test(v1091, v1092, v1093, v1094, v1095, v1096, v1097, v1098);
    return 3;
  }
  unsigned int v1099 = 0x100u >> (BYTE2(v3) & 7);
  uint64_t v1100 = (1 << v1884 << v98);
  if ((v3 & 0x10000000) != 0) {
    BOOL v1101 = v97 > v1100;
  }
  else {
    BOOL v1101 = (*(unsigned char *)(a3 + 540) & 0xC) == 0 && v1871 > v1099;
  }
  int v1102 = !v1101;
  unsigned int v1103 = v1099 >> (v48 == 2);
  if ((v3 & 0x10000000) == 0) {
    uint64_t v1100 = v1103 * v1853;
  }
  float v1104 = v1072 * (float)v1100;
  BOOL v1106 = (v1089 != 3 || *(unsigned char *)(v1856 + 1313) == 0)
       && ((((uint64_t)v1104 * v1089) & 0x8000000000000000) != 0
        || (((uint64_t)v1104 * v1089) & 0x800000000000003FLL) == 0);
  if (!v1106 && !v1102)
  {
    BOOL v1091 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v1091) {
      return 3;
    }
    goto LABEL_637;
  }
  unint64_t v1107 = 0;
  unsigned int v1108 = WORD1(v1849) & 7;
  uint64_t v1109 = 1;
  uint64_t v1110 = 4;
  do
  {
    if ((v1109 & (v1849 >> 28)) != 0) {
      ++v1107;
    }
    v1109 *= 2;
    --v1110;
  }
  while (v1110);
  BOOL v1101 = v1089 > v1107;
  int64_t v1111 = v1089 - v1107;
  if (!v1101)
  {
    BOOL v1137 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1137) {
      ZinValidateTd<6u>::Test(v1137, v1138, v1139, v1140, v1141, v1142, v1143, v1144);
    }
    return 3;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if (v1871 > v1103 && (v1103 * v1853 % v1111 || v1108 != 0))
    {
      BOOL v1173 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1173) {
        ZinValidateTd<11u>::Test(v1173, v1174, v1175, v1176, v1177, v1178, v1179, v1180);
      }
      return 3;
    }
  }
  else
  {
    uint64_t v1112 = (1 << (v1884 + v98));
    if (v97 > v1112)
    {
      if (v1112 % v1111)
      {
        BOOL v1113 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1113) {
          ZinValidateTd<11u>::Test(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120);
        }
        return 3;
      }
      if (v1108)
      {
        BOOL v1213 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1213) {
          ZinValidateTd<11u>::Test(v1213, v1214, v1215, v1216, v1217, v1218, v1219, v1220);
        }
        return 3;
      }
    }
  }
LABEL_584:
  if ((*(unsigned char *)(a3 + 928) & 0x40) != 0)
  {
    if (v1853 != 1 || v1852 != 1 || v1868 != 1)
    {
      BOOL v293 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v293) {
        return 3;
      }
      goto LABEL_614;
    }
    if (v1889 != 1 || v96 != 1 || v1893 != 1)
    {
      BOOL v1129 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1129) {
        ZinValidateTd<10u>::Test(v1129, v1130, v1131, v1132, v1133, v1134, v1135, v1136);
      }
      return 3;
    }
    if (v1872 != 1 || v1866 != 1 || v100 != 1)
    {
      BOOL v1145 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1145) {
        ZinValidateTd<10u>::Test(v1145, v1146, v1147, v1148, v1149, v1150, v1151, v1152);
      }
      return 3;
    }
    if (v1886 <= 1)
    {
      BOOL v1181 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1181) {
        ZinValidateTd<11u>::Test(v1181, v1182, v1183, v1184, v1185, v1186, v1187, v1188);
      }
      return 3;
    }
    if ((v1863 & 0x4000) != 0)
    {
      BOOL v1197 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1197) {
        ZinValidateTd<11u>::Test(v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204);
      }
      return 3;
    }
    if ((*(_DWORD *)(a3 + 540) & 0xC) == 4)
    {
      BOOL v1073 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1073) {
        ZinValidateTd<11u>::Test(v1073, v1074, v1075, v1076, v1077, v1078, v1079, v1080);
      }
      return 3;
    }
    if ((v1860 & 8) != 0)
    {
      BOOL v1232 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1232) {
        ZinValidateTd<11u>::Test(v1232, v1233, v1234, v1235, v1236, v1237, v1238, v1239);
      }
      return 3;
    }
    if ((v3 & 8) == 0) {
      goto LABEL_586;
    }
    goto LABEL_618;
  }
  if ((v3 & 8) == 0) {
    goto LABEL_586;
  }
  if (v1853 != 1)
  {
    BOOL v489 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v489) {
      return 3;
    }
    goto LABEL_674;
  }
  if (v1852 != 1)
  {
    BOOL v515 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v515) {
      return 3;
    }
    goto LABEL_680;
  }
  if (v1868 != 1)
  {
    BOOL v531 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v531) {
      return 3;
    }
    goto LABEL_713;
  }
LABEL_618:
  if ((v3 & 0x10000000) != 0)
  {
    BOOL v1189 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1189) {
      ZinValidateTd<17u>::Test(v1189, v1190, v1191, v1192, v1193, v1194, v1195, v1196);
    }
    return 3;
  }
  if (v1891 == 2)
  {
    BOOL v194 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!v194) {
      return 3;
    }
    goto LABEL_621;
  }
  if ((v48 == 2) != (v1841 == 2))
  {
    BOOL v1205 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1205) {
      ZinValidateTd<11u>::Test(v1205, v1206, v1207, v1208, v1209, v1210, v1211, v1212);
    }
    return 3;
  }
  unint64_t v1221 = v1871 << (v48 == 2);
  unint64_t v1222 = ((uint64_t)(double)(uint64_t)((v1872 - 1) / v1889) + v1871) << (v48 == 2);
  int v1223 = (*(_DWORD *)(a3 + 540) >> 2) & 3;
  if (v1223 == 3)
  {
    if (v1221 <= *(void *)(v1856 + 1176))
    {
      BOOL v1306 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1306) {
        ZinValidateTd<11u>::Test(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313);
      }
      return 3;
    }
    if (v1222 > *(void *)(v1856 + 1184))
    {
      BOOL v1240 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1240) {
        ZinValidateTd<11u>::Test(v1240, v1241, v1242, v1243, v1244, v1245, v1246, v1247);
      }
      return 3;
    }
  }
  else if (v1223 == 2)
  {
    if (v1221 <= *(void *)(v1856 + 1160))
    {
      BOOL v1298 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1298) {
        ZinValidateTd<11u>::Test(v1298, v1299, v1300, v1301, v1302, v1303, v1304, v1305);
      }
      return 3;
    }
    if (v1222 > *(void *)(v1856 + 1168))
    {
      BOOL v1224 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v1224) {
        ZinValidateTd<11u>::Test(v1224, v1225, v1226, v1227, v1228, v1229, v1230, v1231);
      }
      return 3;
    }
  }
LABEL_586:
  unsigned int v1054 = *(_DWORD *)(a3 + 792);
  if (ZinExtractLSBs(*(unsigned __int16 *)(a3 + 668), 2) != v1054 >> 30)
  {
    BOOL v1121 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1121) {
      ZinValidateTd<11u>::Test(v1121, v1122, v1123, v1124, v1125, v1126, v1127, v1128);
    }
    return 3;
  }
  if ((*(unsigned char *)(a3 + 986) & 7) != 0)
  {
    BOOL v1055 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v1055) {
      ZinValidateTd<6u>::Test(v1055, v1056, v1057, v1058, v1059, v1060, v1061, v1062);
    }
    return 3;
  }
  uint64_t result = ZinValidateTd<11u>::CheckKMEMBufferSizes(v1856, a3);
  if (!result)
  {
    uint64_t result = ZinValidateTd<11u>::CheckInRangeDmaAccess(v1856, a2, a3);
    if (!result)
    {
      int v1153 = *(_DWORD *)(a3 + 568);
      if ((v1153 & 0xD0) != 0xC0)
      {
        int v1154 = v1153 >> 4;
        if (v1154 != 2 && v1154 != 4)
        {
          BOOL v1256 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1256) {
            ZinValidateTd<11u>::Test(v1256, v1257, v1258, v1259, v1260, v1261, v1262, v1263);
          }
          return 3;
        }
      }
      int v1155 = *(_DWORD *)(a3 + 576);
      if ((v1155 & 0xD0) != 0xC0)
      {
        int v1156 = v1155 >> 4;
        if (v1156 != 2 && v1156 != 4)
        {
          BOOL v1282 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1282) {
            ZinValidateTd<11u>::Test(v1282, v1283, v1284, v1285, v1286, v1287, v1288, v1289);
          }
          return 3;
        }
      }
      if ((v1155 & 0xD) != 0xC)
      {
        int v1157 = v1155 & 0xF;
        if (v1157 != 2 && v1157 != 4)
        {
          BOOL v1290 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1290) {
            ZinValidateTd<11u>::Test(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297);
          }
          return 3;
        }
      }
      int v1158 = *(_DWORD *)(a3 + 572);
      if ((v1158 & 0xD0) != 0xC0)
      {
        int v1159 = v1158 >> 4;
        if (v1159 != 2 && v1159 != 4)
        {
          BOOL v1314 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1314) {
            ZinValidateTd<11u>::Test(v1314, v1315, v1316, v1317, v1318, v1319, v1320, v1321);
          }
          return 3;
        }
      }
      int v1160 = *(_DWORD *)(a3 + 580);
      if ((v1160 & 0xD0) != 0xC0)
      {
        int v1161 = v1160 >> 4;
        if (v1161 != 2 && v1161 != 4)
        {
          BOOL v1322 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1322) {
            ZinValidateTd<11u>::Test(v1322, v1323, v1324, v1325, v1326, v1327, v1328, v1329);
          }
          return 3;
        }
      }
      if ((v1160 & 0xD) != 0xC)
      {
        int v1162 = v1160 & 0xF;
        if (v1162 != 2 && v1162 != 4)
        {
          BOOL v1330 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1330) {
            ZinValidateTd<11u>::Test(v1330, v1331, v1332, v1333, v1334, v1335, v1336, v1337);
          }
          return 3;
        }
      }
      int v1163 = *(_DWORD *)(a3 + 952);
      if ((v1163 & 0xF0) != 0x30 && (v1163 & 0xD0) != 0xD0)
      {
        BOOL v1164 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v1164) {
          ZinValidateTd<11u>::Test(v1164, v1165, v1166, v1167, v1168, v1169, v1170, v1171);
        }
        return 3;
      }
      uint64_t v1248 = 60;
      v1249 = &_os_log_internal;
      do
      {
        int v1250 = *(_DWORD *)(a3 + v1248) >> 4;
        if ((*(_DWORD *)(a3 + v1248) & 0xD0) != 0xC0 && v1250 != 2 && v1250 != 4)
        {
          if (os_log_type_enabled(v1249, OS_LOG_TYPE_ERROR)) {
            ZinValidateTd<11u>::Test(v1896, v1897, v1254);
          }
          if (v1250 != 4 && v1250 != 2) {
            return 3;
          }
        }
        v1248 += 4;
      }
      while (v1248 != 124);
      uint64_t v1264 = 252;
      v1265 = &_os_log_internal;
      do
      {
        int v1266 = *(_DWORD *)(a3 + v1264) >> 4;
        if ((*(_DWORD *)(a3 + v1264) & 0xD0) != 0xC0 && v1266 != 2 && v1266 != 4)
        {
          if (os_log_type_enabled(v1265, OS_LOG_TYPE_ERROR)) {
            ZinValidateTd<11u>::Test(v1894, &v1895, v1270);
          }
          if (v1266 != 4 && v1266 != 2) {
            return 3;
          }
        }
        v1264 += 4;
      }
      while (v1264 != 268);
      int v1272 = *(_DWORD *)(a3 + 540);
      int v1273 = *(_DWORD *)(a3 + 656);
      if ((v1273 & 1) != 0 && (*(_DWORD *)(a3 + 540) & 1 | 2) == 3
        || (*(unsigned char *)(a3 + 704) & 7) != 0
        || ((v3 >> 4) & 5 | 2) != 2
        && (v1882 >= 2 && *(_DWORD *)(a3 + 592) <= 0x3Fu && ((v1851 >> 1) & 1) == 0
         || v1886 >= 2 && *(_DWORD *)(a3 + 596) <= 0x3Fu && ((v1851 >> 3) & 1) == 0
         || v1879 >= 2 && *(_DWORD *)(a3 + 600) <= 0x3Fu && ((v1851 >> 2) & 1) == 0
         || v91 >= 2 && *(_DWORD *)(a3 + 604) <= 0x3Fu))
      {
        if ((*(_DWORD *)(a3 + 568) & 0xF0) == 0x40)
        {
          BOOL v1274 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1274) {
            ZinValidateTd<11u>::Test(v1274, v1275, v1276, v1277, v1278, v1279, v1280, v1281);
          }
          return 3;
        }
        int v1338 = *(_DWORD *)(a3 + 576);
        if ((v1338 & 0xF) == 4)
        {
          BOOL v1339 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1339) {
            ZinValidateTd<11u>::Test(v1339, v1340, v1341, v1342, v1343, v1344, v1345, v1346);
          }
          return 3;
        }
        if ((v1338 & 0xF0) == 0x40)
        {
          BOOL v1347 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1347) {
            ZinValidateTd<11u>::Test(v1347, v1348, v1349, v1350, v1351, v1352, v1353, v1354);
          }
          return 3;
        }
      }
      if ((v1273 & 1) != 0 && (v1272 & 2) != 0 || (*(unsigned char *)(a3 + 704) & 7) != 0) {
        goto LABEL_820;
      }
      if (((v3 >> 4) & 5 | 2) == 2)
      {
LABEL_843:
        if ((*(_DWORD *)(a3 + 492) & 0xC) != 8)
        {
          BOOL v1389 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (!v1389) {
            return 3;
          }
          goto LABEL_850;
        }
        if (!v89)
        {
          int v1406 = *(_DWORD *)(a3 + 532);
          if ((v1406 & 0xF0) != 0x10)
          {
            BOOL v1429 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1429) {
              ZinValidateTd<11u>::Test(v1429, v1430, v1431, v1432, v1433, v1434, v1435, v1436);
            }
            return 3;
          }
          if ((v1406 & 0xF) != 9)
          {
            BOOL v1446 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1446) {
              ZinValidateTd<11u>::Test(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453);
            }
            return 3;
          }
          if (*(_WORD *)(a3 + 902) != 15360)
          {
            BOOL v1462 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1462) {
              ZinValidateTd<11u>::Test(v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469);
            }
            return 3;
          }
          if (*(_WORD *)(a3 + 906) != 15360)
          {
            BOOL v1478 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1478) {
              ZinValidateTd<11u>::Test(v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485);
            }
            return 3;
          }
          if (*(_DWORD *)(a3 + 908) != 1065353216)
          {
            BOOL v1517 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1517) {
              ZinValidateTd<11u>::Test(v1517, v1518, v1519, v1520, v1521, v1522, v1523, v1524);
            }
            return 3;
          }
          if (*(_WORD *)(a3 + 914) != 31744)
          {
            BOOL v1407 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1407) {
              ZinValidateTd<11u>::Test(v1407, v1408, v1409, v1410, v1411, v1412, v1413, v1414);
            }
            return 3;
          }
        }
LABEL_845:
        int v1380 = *(_DWORD *)(a3 + 924);
        if ((v1380 & 4) == 0 && (*(_DWORD *)(a3 + 924) & 0xF0) != 0x80)
        {
          BOOL v1381 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1381) {
            ZinValidateTd<11u>::Test(v1381, v1382, v1383, v1384, v1385, v1386, v1387, v1388);
          }
          return 3;
        }
        int v1397 = *(_DWORD *)(a3 + 928);
        if ((v1397 & 7) != 3 && (v1397 & 0xF00000) != 0x100000)
        {
          BOOL v1398 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1398) {
            ZinValidateTd<11u>::Test(v1398, v1399, v1400, v1401, v1402, v1403, v1404, v1405);
          }
          return 3;
        }
        int v1415 = *(_DWORD *)(a3 + 568);
        if ((v1415 & 1) == 0 || (*(_DWORD *)(a3 + 540) & 1 | 2) != 3)
        {
          if ((*(_DWORD *)(a3 + 568) & 0xF0) != 0x20)
          {
            BOOL v1454 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1454) {
              ZinValidateTd<11u>::Test(v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461);
            }
            return 3;
          }
          int v1437 = *(_DWORD *)(a3 + 576);
          if ((v1437 & 0xF0) != 0x20)
          {
            BOOL v1470 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1470) {
              ZinValidateTd<11u>::Test(v1470, v1471, v1472, v1473, v1474, v1475, v1476, v1477);
            }
            return 3;
          }
          if ((v1437 & 0xF) != 2)
          {
            BOOL v1499 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1499) {
              ZinValidateTd<11u>::Test(v1499, v1500, v1501, v1502, v1503, v1504, v1505, v1506);
            }
            return 3;
          }
          if ((v1415 & 0xFF00) != 0)
          {
            BOOL v1438 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1438) {
              ZinValidateTd<11u>::Test(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445);
            }
            return 3;
          }
        }
        if ((*(_DWORD *)(a3 + 704) & 7) != 2)
        {
          if ((*(_DWORD *)(a3 + 704) & 7) == 0)
          {
            if ((v1415 & 1) != 0 && (v1272 & 2) != 0) {
              goto LABEL_869;
            }
            int v1507 = *(_DWORD *)(a3 + 572);
            if ((v1507 & 0xF0) != 0x20)
            {
              BOOL v1549 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v1549) {
                ZinValidateTd<11u>::Test(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556);
              }
              return 3;
            }
            int v1508 = *(_DWORD *)(a3 + 580);
            if ((v1508 & 0xF0) != 0x20)
            {
              BOOL v1573 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v1573) {
                ZinValidateTd<11u>::Test(v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580);
              }
              return 3;
            }
            if ((v1508 & 0xF) != 2)
            {
              BOOL v1621 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v1621) {
                ZinValidateTd<11u>::Test(v1621, v1622, v1623, v1624, v1625, v1626, v1627, v1628);
              }
              return 3;
            }
            if ((v1507 & 0xFF00) == 0)
            {
LABEL_869:
              int v1416 = *(_DWORD *)(a3 + 708);
              if ((v1416 & 0x7000) == 0x5000)
              {
                if ((v1416 & 0xE00) == 0xA00)
                {
                  if ((v1416 & 0x1C0) == 0x140)
                  {
                    if ((v1416 & 0x38) == 0x28)
                    {
                      if ((v1416 & 7) == 5)
                      {
                        int v1417 = *(_DWORD *)(a3 + 712);
                        if ((v1417 & 0x70000000) == 0x50000000)
                        {
                          if ((v1417 & 0xE000000) == 0xA000000)
                          {
                            if ((v1417 & 0x1C00000) == 0x1400000)
                            {
                              if ((v1417 & 0x380000) == 0x280000)
                              {
                                if ((v1417 & 0x70000) == 0x50000)
                                {
                                  if ((*(_DWORD *)(a3 + 712) & 0x7000) == 0x5000)
                                  {
                                    if ((*(_DWORD *)(a3 + 712) & 0xE00) == 0xA00)
                                    {
                                      if ((*(_DWORD *)(a3 + 712) & 0x1C0) == 0x140)
                                      {
                                        if ((*(_DWORD *)(a3 + 712) & 0x38) == 0x28)
                                        {
                                          if ((*(_DWORD *)(a3 + 712) & 7) == 5)
                                          {
                                            uint64_t v1418 = 0;
                                            while (1)
                                            {
                                              int v1419 = *(_DWORD *)(a3 + 732 + v1418);
                                              if ((~v1419 & 0xF000000) != 0) {
                                                break;
                                              }
                                              if ((~v1419 & 0x70000) != 0)
                                              {
                                                BOOL v1814 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                if (v1814) {
                                                  ZinValidateTd<11u>::Test(v1814, v1815, v1816, v1817, v1818, v1819, v1820, v1821);
                                                }
                                                return 3;
                                              }
                                              if ((~v1419 & 0xF00) != 0)
                                              {
                                                BOOL v1822 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                if (v1822) {
                                                  ZinValidateTd<11u>::Test(v1822, v1823, v1824, v1825, v1826, v1827, v1828, v1829);
                                                }
                                                return 3;
                                              }
                                              if ((~v1419 & 7) != 0)
                                              {
                                                BOOL v1830 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                if (v1830) {
                                                  ZinValidateTd<11u>::Test(v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837);
                                                }
                                                return 3;
                                              }
                                              v1418 += 4;
                                              if (v1418 == 24) {
                                                goto LABEL_893;
                                              }
                                            }
                                            BOOL v1806 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                            if (v1806) {
                                              ZinValidateTd<11u>::Test(v1806, v1807, v1808, v1809, v1810, v1811, v1812, v1813);
                                            }
                                          }
                                          else
                                          {
                                            BOOL v1798 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                            if (v1798) {
                                              ZinValidateTd<11u>::Test(v1798, v1799, v1800, v1801, v1802, v1803, v1804, v1805);
                                            }
                                          }
                                        }
                                        else
                                        {
                                          BOOL v1790 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                          if (v1790) {
                                            ZinValidateTd<11u>::Test(v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797);
                                          }
                                        }
                                      }
                                      else
                                      {
                                        BOOL v1782 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                        if (v1782) {
                                          ZinValidateTd<11u>::Test(v1782, v1783, v1784, v1785, v1786, v1787, v1788, v1789);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      BOOL v1774 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                      if (v1774) {
                                        ZinValidateTd<11u>::Test(v1774, v1775, v1776, v1777, v1778, v1779, v1780, v1781);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    BOOL v1766 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    if (v1766) {
                                      ZinValidateTd<11u>::Test(v1766, v1767, v1768, v1769, v1770, v1771, v1772, v1773);
                                    }
                                  }
                                }
                                else
                                {
                                  BOOL v1758 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                  if (v1758) {
                                    ZinValidateTd<11u>::Test(v1758, v1759, v1760, v1761, v1762, v1763, v1764, v1765);
                                  }
                                }
                              }
                              else
                              {
                                BOOL v1750 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                if (v1750) {
                                  ZinValidateTd<11u>::Test(v1750, v1751, v1752, v1753, v1754, v1755, v1756, v1757);
                                }
                              }
                            }
                            else
                            {
                              BOOL v1742 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              if (v1742) {
                                ZinValidateTd<11u>::Test(v1742, v1743, v1744, v1745, v1746, v1747, v1748, v1749);
                              }
                            }
                          }
                          else
                          {
                            BOOL v1734 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                            if (v1734) {
                              ZinValidateTd<11u>::Test(v1734, v1735, v1736, v1737, v1738, v1739, v1740, v1741);
                            }
                          }
                        }
                        else
                        {
                          BOOL v1718 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (v1718) {
                            ZinValidateTd<11u>::Test(v1718, v1719, v1720, v1721, v1722, v1723, v1724, v1725);
                          }
                        }
                      }
                      else
                      {
                        BOOL v1694 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v1694) {
                          ZinValidateTd<11u>::Test(v1694, v1695, v1696, v1697, v1698, v1699, v1700, v1701);
                        }
                      }
                    }
                    else
                    {
                      BOOL v1653 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v1653) {
                        ZinValidateTd<11u>::Test(v1653, v1654, v1655, v1656, v1657, v1658, v1659, v1660);
                      }
                    }
                  }
                  else
                  {
                    BOOL v1613 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (v1613) {
                      ZinValidateTd<11u>::Test(v1613, v1614, v1615, v1616, v1617, v1618, v1619, v1620);
                    }
                  }
                }
                else
                {
                  BOOL v1565 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v1565) {
                    ZinValidateTd<11u>::Test(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572);
                  }
                }
              }
              else
              {
                BOOL v1533 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v1533) {
                  ZinValidateTd<11u>::Test(v1533, v1534, v1535, v1536, v1537, v1538, v1539, v1540);
                }
              }
              return 3;
            }
            BOOL v1509 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1509) {
              ZinValidateTd<11u>::Test(v1509, v1510, v1511, v1512, v1513, v1514, v1515, v1516);
            }
            return 3;
          }
          goto LABEL_893;
        }
        if ((*(_DWORD *)(a3 + 492) & 0xC) == 8)
        {
          if ((*(_DWORD *)(a3 + 652) & 3) != 1)
          {
            BOOL v1541 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1541) {
              ZinValidateTd<11u>::Test(v1541, v1542, v1543, v1544, v1545, v1546, v1547, v1548);
            }
            return 3;
          }
LABEL_893:
          int v1420 = *(_DWORD *)(a3 + 952);
          if ((v1420 & 1) == 0)
          {
            if ((*(_DWORD *)(a3 + 952) & 0xF0) != 0x30)
            {
              BOOL v1525 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v1525) {
                ZinValidateTd<11u>::Test(v1525, v1526, v1527, v1528, v1529, v1530, v1531, v1532);
              }
              return 3;
            }
            if ((v1420 & 0xFF00) != 0)
            {
              BOOL v1421 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v1421) {
                ZinValidateTd<11u>::Test(v1421, v1422, v1423, v1424, v1425, v1426, v1427, v1428);
              }
              return 3;
            }
          }
          for (uint64_t i = 0; i != 64; i += 4)
          {
            unsigned int v1487 = *(_DWORD *)(a3 + i + 188);
            if (v1487 <= 0x3F)
            {
              BOOL v1557 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v1557) {
                ZinValidateTd<11u>::Test(v1557, v1558, v1559, v1560, v1561, v1562, v1563, v1564);
              }
              return 3;
            }
            int v1488 = *(_DWORD *)(a3 + i + 60);
            if ((v1488 & 1) == 0)
            {
              if ((*(_DWORD *)(a3 + i + 60) & 0xF0) != 0x20)
              {
                BOOL v1581 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v1581) {
                  ZinValidateTd<11u>::Test(v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588);
                }
                return 3;
              }
              if ((v1487 & 0xFFFFFFC0) != 0x40)
              {
                BOOL v1589 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v1589) {
                  ZinValidateTd<11u>::Test(v1589, v1590, v1591, v1592, v1593, v1594, v1595, v1596);
                }
                return 3;
              }
              if ((v1488 & 0xFF00) != 0)
              {
                BOOL v1597 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v1597) {
                  ZinValidateTd<11u>::Test(v1597, v1598, v1599, v1600, v1601, v1602, v1603, v1604);
                }
                return 3;
              }
            }
          }
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v1490 = *(_DWORD *)(a3 + j + 300);
            if (v1490 <= 0x3F)
            {
              BOOL v1605 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v1605) {
                ZinValidateTd<11u>::Test(v1605, v1606, v1607, v1608, v1609, v1610, v1611, v1612);
              }
              return 3;
            }
            if ((*(_DWORD *)(a3 + j + 252) & 1) == 0)
            {
              if ((*(_DWORD *)(a3 + j + 252) & 0xF0) != 0x20)
              {
                BOOL v1645 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v1645) {
                  ZinValidateTd<11u>::Test(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652);
                }
                return 3;
              }
              if ((v1490 & 0xFFFFFFC0) != 0x40)
              {
                BOOL v1661 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v1661) {
                  ZinValidateTd<11u>::Test(v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668);
                }
                return 3;
              }
            }
          }
          if ((v1874 & 0x7FFF) == 0)
          {
            BOOL v1669 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1669) {
              ZinValidateTd<6u>::Test(v1669, v1670, v1671, v1672, v1673, v1674, v1675, v1676);
            }
            return 3;
          }
          if (v1880 > v1839)
          {
            BOOL v1491 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1491) {
              ZinValidateTd<6u>::Test(v1491, v1492, v1493, v1494, v1495, v1496, v1497, v1498);
            }
            return 3;
          }
          if ((*(_DWORD *)(a3 + 924) & 3) == 2) {
            char v1685 = v1380 >> 4;
          }
          else {
            char v1685 = (v1380 >> 4) + 1;
          }
          if (*(void *)(v1856 + 488) < (unint64_t)(1 << v1685))
          {
            BOOL v1686 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v1686) {
              ZinValidateTd<11u>::Test(v1686, v1687, v1688, v1689, v1690, v1691, v1692, v1693);
            }
            return 3;
          }
          uint64_t result = ZinValidateTd<11u>::ValidationForNonZeroFields(a3);
          if (!result)
          {
            uint64_t result = ZinValidateTd<11u>::CheckRedundantKDMARegisters(a3);
            if (!result) {
              return ZinValidateTd<11u>::ValidateFillLowerNEFirst(v1856, a3);
            }
          }
          return result;
        }
        BOOL v1389 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (!v1389) {
          return 3;
        }
LABEL_850:
        ZinValidateTd<11u>::Test(v1389, v1390, v1391, v1392, v1393, v1394, v1395, v1396);
        return 3;
      }
      if (v1882 >= 2 && *(_DWORD *)(a3 + 616) <= 0x3Fu && ((v1851 >> 5) & 1) == 0
        || v1886 >= 2 && *(_DWORD *)(a3 + 620) <= 0x3Fu && ((v1851 >> 7) & 1) == 0
        || v1879 >= 2 && *(_DWORD *)(a3 + 624) <= 0x3Fu && ((v1851 >> 6) & 1) == 0
        || v91 >= 2 && *(_DWORD *)(a3 + 628) <= 0x3Fu)
      {
LABEL_820:
        if ((*(_DWORD *)(a3 + 572) & 0xF0) == 0x40)
        {
          BOOL v1355 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1355) {
            ZinValidateTd<11u>::Test(v1355, v1356, v1357, v1358, v1359, v1360, v1361, v1362);
          }
          return 3;
        }
        int v1363 = *(_DWORD *)(a3 + 580);
        if ((v1363 & 0xF) == 4)
        {
          BOOL v1364 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1364) {
            ZinValidateTd<11u>::Test(v1364, v1365, v1366, v1367, v1368, v1369, v1370, v1371);
          }
          return 3;
        }
        if ((v1363 & 0xF0) == 0x40)
        {
          BOOL v1372 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v1372) {
            ZinValidateTd<11u>::Test(v1372, v1373, v1374, v1375, v1376, v1377, v1378, v1379);
          }
          return 3;
        }
      }
      if (v89 > 5 || ((1 << v89) & 0x25) == 0) {
        goto LABEL_845;
      }
      goto LABEL_843;
    }
  }
  return result;
}

uint64_t ZinValidateTd<11u>::ValidateL2CircularBuffer(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  while (2)
  {
    if (v1 == a1) {
      return 0;
    }
    uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 200);
    unsigned int v3 = *(_DWORD *)(v2 + 872);
    switch(v3 & 7)
    {
      case 1u:
        uint64_t v4 = *(_DWORD *)(v2 + 504) & 0x1FFFF;
        goto LABEL_10;
      case 2u:
        LOWORD(v5) = *(_WORD *)(v2 + 494);
        goto LABEL_8;
      case 3u:
        int v5 = *(_DWORD *)(v2 + 496);
LABEL_8:
        uint64_t v4 = v5 & 0x7FFF;
        goto LABEL_10;
      case 4u:
        uint64_t v4 = *(_DWORD *)(v2 + 532) & 0x1FFF;
LABEL_10:
        if (!(unsigned __int16)*(_DWORD *)(v2 + 876)
          || v4 - (unsigned __int16)*(_DWORD *)(v2 + 876) <= (uint64_t)((unint64_t)*(unsigned int *)(v2 + 876) >> 16))
        {
          break;
        }
        BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v11) {
          ZinValidateTd<11u>::ValidateL2CircularBuffer(v11, v12, v13, v14, v15, v16, v17, v18);
        }
        return 3;
      default:
        uint64_t v4 = 0;
        break;
    }
    int v6 = 0;
    switch((v3 >> 4) & 7)
    {
      case 1u:
        uint64_t v4 = *(_DWORD *)(v2 + 504) & 0x1FFFF;
        goto LABEL_18;
      case 2u:
        LOWORD(v7) = *(_WORD *)(v2 + 494);
        goto LABEL_16;
      case 3u:
        int v7 = *(_DWORD *)(v2 + 496);
LABEL_16:
        uint64_t v4 = v7 & 0x7FFF;
        goto LABEL_18;
      case 4u:
        uint64_t v4 = *(_DWORD *)(v2 + 532) & 0x1FFF;
LABEL_18:
        if (!(unsigned __int16)*(_DWORD *)(v2 + 880)
          || v4 - (unsigned __int16)*(_DWORD *)(v2 + 880) <= (uint64_t)((unint64_t)*(unsigned int *)(v2 + 880) >> 16))
        {
          int v6 = 1;
LABEL_21:
          switch((v3 >> 8) & 7)
          {
            case 0u:
              goto LABEL_31;
            case 1u:
              uint64_t v4 = *(_DWORD *)(v2 + 508) & 0x1FFFFLL;
              goto LABEL_29;
            case 2u:
              LOWORD(v8) = *(_WORD *)(v2 + 514);
              goto LABEL_27;
            case 3u:
              int v8 = *(_DWORD *)(v2 + 516);
LABEL_27:
              uint64_t v4 = v8 & 0x7FFF;
              goto LABEL_29;
            case 4u:
              uint64_t v4 = *(_DWORD *)(v2 + 532) & 0x1FFFLL;
              goto LABEL_29;
            default:
              if (!v6) {
                goto LABEL_31;
              }
LABEL_29:
              unint64_t v9 = *(unsigned int *)(v2 + 884);
              if ((_WORD)v9 && v4 - (unsigned __int16)v9 > (uint64_t)(v9 >> 16))
              {
                BOOL v27 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v27) {
                  ZinValidateTd<11u>::ValidateL2CircularBuffer(v27, v28, v29, v30, v31, v32, v33, v34);
                }
                return 3;
              }
LABEL_31:
              uint64_t v1 = *(void *)(v1 + 8);
              break;
          }
          continue;
        }
        BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v19) {
          ZinValidateTd<11u>::ValidateL2CircularBuffer(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        return 3;
      default:
        goto LABEL_21;
    }
  }
}

uint64_t ZinValidateTd<11u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = ((unint64_t)*(unsigned int *)(a2 + 540) >> 19) & 7;
  unint64_t v5 = 1 << v4;
  int v6 = *(_DWORD *)(a2 + 924);
  uint64_t v38 = 0;
  std::vector<unsigned long>::vector(__p, 1 << v4, &v38);
  uint64_t v7 = 0;
  int v8 = (unint64_t *)__p[0];
  do
  {
    v8[v7] = (unint64_t)*(unsigned int *)(a2 + 188 + 4 * v7) >> 6;
    ++v7;
  }
  while (v5 != v7);
  uint64_t v9 = *(int *)(a1 + 8);
  if (v5 < v9)
  {
    uint64_t v10 = v9 - v5;
    BOOL v11 = (char *)(a2 + 4 * v5 + 60);
    while (1)
    {
      char v12 = *v11;
      v11 += 4;
      if (v12) {
        break;
      }
      if (!--v10) {
        goto LABEL_7;
      }
    }
    BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v21) {
      ZinValidateTd<11u>::CheckKMEMBufferSizes(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    goto LABEL_19;
  }
LABEL_7:
  uint64_t v13 = 0;
  if ((v6 & 0x100) == 0 && v4)
  {
    uint64_t v14 = 2;
    if (v5 > 2) {
      uint64_t v14 = 1 << v4;
    }
    unint64_t v17 = *v8;
    uint64_t v15 = v8 + 1;
    unint64_t v16 = v17;
    uint64_t v18 = v14 - 1;
    while (1)
    {
      unint64_t v20 = *v15++;
      unint64_t v19 = v20;
      if (v20 > v16) {
        break;
      }
      unint64_t v16 = v19;
      if (!--v18)
      {
        uint64_t v13 = 0;
        goto LABEL_20;
      }
    }
    BOOL v29 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v29) {
      ZinValidateTd<4u>::CheckKMEMBufferSizes(v29, v30, v31, v32, v33, v34, v35, v36);
    }
LABEL_19:
    uint64_t v13 = 3;
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v13;
}

uint64_t ZinValidateTd<11u>::CheckInRangeDmaAccess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    ZinIrMemoryPool::GetSections(a2, 4, &v78);
    uint64_t v59 = v79[2];
    std::__list_imp<ZinIrSection *>::clear(&v78);
  }
  else
  {
    uint64_t v59 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 528);
  LOBYTE(v76) = 0;
  LOBYTE(v74) = 0;
  LOBYTE(v72) = 0;
  RelocInfos = (uint64_t *)ZinAneTdHw_v11::GetRelocInfos((ZinAneTdHw_v11 *)a3);
  uint64_t v7 = *RelocInfos;
  uint64_t v8 = RelocInfos[1];
  int v9 = v72;
  int v10 = v74;
  int v11 = v76;
  if (*RelocInfos == v8)
  {
    LOBYTE(v14) = 0;
    LOBYTE(v13) = 0;
    char v12 = 0;
  }
  else
  {
    char v12 = 0;
    int v13 = 0;
    int v14 = 0;
    do
    {
      int v15 = *(_DWORD *)(v7 + 32) & 0x7FFF;
      if (v15 == 1092) {
        int v16 = 1;
      }
      else {
        int v16 = v14;
      }
      if (v15 == 1092) {
        int v17 = (*(_DWORD *)(v7 + 32) >> 22) & 0x7F;
      }
      else {
        int v17 = v11;
      }
      if (v15 == 1098)
      {
        int v16 = v14;
        int v17 = v11;
        int v18 = 1;
      }
      else
      {
        int v18 = v13;
      }
      if (v15 == 1098) {
        int v19 = (*(_DWORD *)(v7 + 32) >> 22) & 0x7F;
      }
      else {
        int v19 = v10;
      }
      if (v15 == 1346)
      {
        char v12 = 1;
      }
      else
      {
        int v14 = v16;
        int v11 = v17;
        int v13 = v18;
        int v10 = v19;
      }
      if (v15 == 1346) {
        int v9 = (*(_DWORD *)(v7 + 32) >> 22) & 0x7F;
      }
      v7 += 40;
    }
    while (v7 != v8);
  }
  int v72 = v9;
  char v73 = v12;
  int v74 = v10;
  char v75 = v13;
  int v76 = v11;
  char v77 = v14;
  int v20 = *(_DWORD *)(a3 + 536);
  unsigned int v21 = *(unsigned char *)(a3 + 651) & 0xF;
  unsigned int v22 = *(_DWORD *)(a3 + 484);
  int v63 = HIWORD(v22) & 0x7FFF;
  if ((v20 & 2) != 0) {
    int v23 = 1;
  }
  else {
    int v23 = HIWORD(v22) & 0x7FFF;
  }
  int v62 = *(_DWORD *)(a3 + 488) & 0x7FFF;
  if ((v20 & 4) != 0) {
    int v24 = 1;
  }
  else {
    int v24 = *(_DWORD *)(a3 + 488) & 0x7FFF;
  }
  double v25 = 1.0;
  if ((v20 & 8) == 0) {
    double v25 = (double)((*(_DWORD *)(a3 + 496) & 0x1FFFFu) / v21);
  }
  int v26 = *(_DWORD *)(a3 + 484) & 0x7FFF;
  if (v20) {
    int v26 = 1;
  }
  if ((v20 & 0x100) != 0) {
    double v27 = (double)v26;
  }
  else {
    double v27 = v25;
  }
  int v28 = *(_DWORD *)(a3 + 524) & 0x1FFF;
  int v64 = *(_DWORD *)(a3 + 704) & 7;
  TextureIndexGroupint Dimension = v28;
  __int16 v58 = *(_DWORD *)(a3 + 484);
  if (v64)
  {
    double v27 = (double)((*(unsigned __int16 *)(a3 + 728) + 1) / v21);
    int v61 = *(unsigned __int16 *)(a3 + 726) + 1;
    int v24 = HIWORD(*(_DWORD *)(a3 + 720)) + 1;
    int v28 = (unsigned __int16)*(_DWORD *)(a3 + 720) + 1;
  }
  else
  {
    int v61 = v23;
  }
  unsigned int v60 = *(_DWORD *)(a3 + 540);
  unsigned int v29 = *(_DWORD *)(a3 + 584);
  unsigned int v30 = *(_DWORD *)(a3 + 592);
  unint64_t v31 = *(unsigned int *)(a3 + 596);
  unsigned int v32 = *(_DWORD *)(a3 + 600);
  unsigned int v33 = *(_DWORD *)(a3 + 604);
  uint64_t v34 = operator new(0x10uLL);
  int v79 = v34 + 4;
  uint64_t v80 = v34 + 4;
  _DWORD *v34 = v61 * v5 * (v30 >> 6) + (v29 >> 6);
  v34[1] = ((double)(v29 >> 6) + (double)(v5 * (v31 >> 6)) * v27);
  void v34[2] = v24 * v5 * (v32 >> 6) + (v29 >> 6);
  v34[3] = v28 * v5 * (v33 >> 6) + (v29 >> 6);
  BOOL v78 = v34;
  if ((v20 & 0x20) != 0) {
    TextureIndexHeightint Dimension = 1;
  }
  else {
    TextureIndexHeightint Dimension = v63;
  }
  if ((v20 & 0x40) != 0) {
    TextureIndexDepthint Dimension = 1;
  }
  else {
    TextureIndexDepthint Dimension = v62;
  }
  TextureIndexPlaneint Dimension = 1.0;
  if ((v20 & 0x80) == 0) {
    TextureIndexPlaneint Dimension = (double)((*(_DWORD *)(a3 + 496) & 0x1FFFFu) / (*(unsigned char *)(a3 + 655) & 0xFu));
  }
  if ((v20 & 0x200) != 0)
  {
    if ((v20 & 0x10) != 0) {
      TextureIndexPlaneint Dimension = 1.0;
    }
    else {
      TextureIndexPlaneint Dimension = (double)(v58 & 0x7FFF);
    }
  }
  if (v64 == 2)
  {
    TextureIndexPlaneint Dimension = 1.0;
    TextureIndexHeightint Dimension = 1;
    TextureIndexDepthint Dimension = 1;
  }
  else if (v64 == 1)
  {
    TextureIndexGroupint Dimension = ZinValidateTd<11u>::GetTextureIndexGroupDimension(a3);
    TextureIndexDepthint Dimension = ZinValidateTd<11u>::GetTextureIndexDepthDimension(a3);
    TextureIndexPlaneint Dimension = (double)ZinValidateTd<11u>::GetTextureIndexPlaneDimension(a3);
    TextureIndexHeightint Dimension = ZinValidateTd<11u>::GetTextureIndexHeightDimension(a3);
  }
  unsigned int v38 = *(_DWORD *)(a3 + 608);
  unsigned int v39 = *(_DWORD *)(a3 + 616);
  unint64_t v40 = *(unsigned int *)(a3 + 620);
  unsigned int v41 = *(_DWORD *)(a3 + 624);
  unsigned int v42 = *(_DWORD *)(a3 + 628);
  uint64_t v43 = operator new(0x10uLL);
  unsigned int v44 = ((v60 >> 4) & 7) - 5;
  uint64_t v70 = v43 + 4;
  unint64_t v71 = v43 + 4;
  *uint64_t v43 = TextureIndexHeightDimension * v5 * (v39 >> 6) + (v38 >> 6);
  v43[1] = ((double)(v38 >> 6) + (double)(v5 * (v40 >> 6)) * TextureIndexPlaneDimension);
  _OWORD v43[2] = TextureIndexDepthDimension * v5 * (v41 >> 6) + (v38 >> 6);
  v43[3] = TextureIndexGroupDimension * v5 * (v42 >> 6) + (v38 >> 6);
  uint64_t v69 = v43;
  if (v44 < 2) {
    int v45 = 1;
  }
  else {
    int v45 = HIWORD(*(_DWORD *)(a3 + 504)) & 0x7FFF;
  }
  if (v44 < 2) {
    int v46 = 1;
  }
  else {
    int v46 = *(_DWORD *)(a3 + 508) & 0x7FFF;
  }
  if (v20 & 0x400 | v60 & 0x10000000)
  {
    if (v44 < 2) {
      unsigned int v47 = 1;
    }
    else {
      unsigned int v47 = *(_DWORD *)(a3 + 504) & 0x7FFF;
    }
  }
  else
  {
    unsigned int v47 = *(_DWORD *)(a3 + 500) & 0x1FFFF;
  }
  unsigned int v48 = v47 / (*(unsigned char *)(a3 + 987) & 0xFu);
  unsigned int v49 = *(_DWORD *)(a3 + 960);
  unsigned int v50 = *(_DWORD *)(a3 + 968);
  unint64_t v51 = *(unsigned int *)(a3 + 972);
  unsigned int v52 = *(_DWORD *)(a3 + 976);
  unsigned int v53 = *(_DWORD *)(a3 + 980);
  int v54 = *(_DWORD *)(a3 + 524);
  uint64_t v55 = operator new(0x10uLL);
  uint64_t v67 = v55 + 4;
  uint64_t v68 = v55 + 4;
  _DWORD *v55 = v45 * v5 * (v50 >> 6) + (v49 >> 6);
  v55[1] = ((double)(v49 >> 6) + (double)(v5 * (v51 >> 6)) * (double)v48);
  v55[2] = v46 * v5 * (v52 >> 6) + (v49 >> 6);
  v55[3] = (v53 >> 6) * v5 * (v54 & 0x1FFF) + (v49 >> 6);
  std::string __p = v55;
  uint64_t v56 = ZinIrTdValidationUtil::VerifyDmaAccess(v59, (unsigned int **)&v78, (uint64_t)&v76, (unsigned int **)&v69, (uint64_t)&v74, (unsigned int **)&__p, (uint64_t)&v72);
  if (__p)
  {
    uint64_t v67 = __p;
    operator delete(__p);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  if (v78)
  {
    int v79 = v78;
    operator delete(v78);
  }
  return v56;
}

void sub_211323580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinValidateTd<11u>::ValidationForNonZeroFields(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 488) & 0x7FFF) != 0)
  {
    if ((*(_WORD *)(a1 + 508) & 0x7FFF) != 0)
    {
      unsigned int v1 = *(_DWORD *)(a1 + 516);
      if ((v1 & 0x30000000) != 0)
      {
        if (v1 >> 30)
        {
          int v34 = *(_DWORD *)(a1 + 520);
          if ((v34 & 0x6000) != 0)
          {
            if ((v1 & 0x6000) != 0)
            {
              if ((v1 & 0x18000) != 0)
              {
                if ((v34 & 0xC0) != 0)
                {
                  if ((v1 & 0x3F) != 0)
                  {
                    if ((v1 & 0xFC0) != 0)
                    {
                      if ((v34 & 0x1F) != 0)
                      {
                        unsigned int v35 = *(_DWORD *)(a1 + 524);
                        if (HIWORD(v35))
                        {
                          if ((v35 & 0x1FFF) != 0)
                          {
                            if ((*(_WORD *)(a1 + 528) & 0x7FFF) != 0)
                            {
                              if ((*(unsigned char *)(a1 + 540) & 3) != 0)
                              {
                                if ((*(unsigned char *)(a1 + 793) & 0xF) != 0)
                                {
                                  if ((*(unsigned char *)(a1 + 837) & 0xF) != 0)
                                  {
                                    if ((*(unsigned char *)(a1 + 651) & 0xF) != 0)
                                    {
                                      if ((*(unsigned char *)(a1 + 655) & 0xF) != 0)
                                      {
                                        if ((*(_WORD *)(a1 + 656) & 0x3F0) != 0)
                                        {
                                          if ((*(_DWORD *)(a1 + 660) & 0x1FFFF) != 0)
                                          {
                                            if ((*(_DWORD *)(a1 + 664) & 0x1FFFF) != 0)
                                            {
                                              if ((*(unsigned char *)(a1 + 987) & 0xF) != 0) {
                                                return 0;
                                              }
                                              BOOL v181 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                              if (v181) {
                                                ZinValidateTd<11u>::ValidationForNonZeroFields(v181, v182, v183, v184, v185, v186, v187, v188);
                                              }
                                            }
                                            else
                                            {
                                              BOOL v173 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                              if (v173) {
                                                ZinValidateTd<11u>::ValidationForNonZeroFields(v173, v174, v175, v176, v177, v178, v179, v180);
                                              }
                                            }
                                          }
                                          else
                                          {
                                            BOOL v165 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                            if (v165) {
                                              ZinValidateTd<11u>::ValidationForNonZeroFields(v165, v166, v167, v168, v169, v170, v171, v172);
                                            }
                                          }
                                        }
                                        else
                                        {
                                          BOOL v157 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                          if (v157) {
                                            ZinValidateTd<11u>::ValidationForNonZeroFields(v157, v158, v159, v160, v161, v162, v163, v164);
                                          }
                                        }
                                      }
                                      else
                                      {
                                        BOOL v149 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                        if (v149) {
                                          ZinValidateTd<11u>::ValidationForNonZeroFields(v149, v150, v151, v152, v153, v154, v155, v156);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      BOOL v141 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                      if (v141) {
                                        ZinValidateTd<11u>::ValidationForNonZeroFields(v141, v142, v143, v144, v145, v146, v147, v148);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    BOOL v133 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    if (v133) {
                                      ZinValidateTd<11u>::ValidationForNonZeroFields(v133, v134, v135, v136, v137, v138, v139, v140);
                                    }
                                  }
                                }
                                else
                                {
                                  BOOL v125 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                  if (v125) {
                                    ZinValidateTd<11u>::ValidationForNonZeroFields(v125, v126, v127, v128, v129, v130, v131, v132);
                                  }
                                }
                              }
                              else
                              {
                                BOOL v117 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                if (v117) {
                                  ZinValidateTd<11u>::ValidationForNonZeroFields(v117, v118, v119, v120, v121, v122, v123, v124);
                                }
                              }
                            }
                            else
                            {
                              BOOL v109 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              if (v109) {
                                ZinValidateTd<11u>::ValidationForNonZeroFields(v109, v110, v111, v112, v113, v114, v115, v116);
                              }
                            }
                          }
                          else
                          {
                            BOOL v101 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                            if (v101) {
                              ZinValidateTd<11u>::ValidationForNonZeroFields(v101, v102, v103, v104, v105, v106, v107, v108);
                            }
                          }
                        }
                        else
                        {
                          BOOL v36 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (v36) {
                            ZinValidateTd<11u>::ValidationForNonZeroFields(v36, v37, v38, v39, v40, v41, v42, v43);
                          }
                        }
                      }
                      else
                      {
                        BOOL v92 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v92) {
                          ZinValidateTd<11u>::ValidationForNonZeroFields(v92, v93, v94, v95, v96, v97, v98, v99);
                        }
                      }
                    }
                    else
                    {
                      BOOL v84 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v84) {
                        ZinValidateTd<11u>::ValidationForNonZeroFields(v84, v85, v86, v87, v88, v89, v90, v91);
                      }
                    }
                  }
                  else
                  {
                    BOOL v76 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    if (v76) {
                      ZinValidateTd<11u>::ValidationForNonZeroFields(v76, v77, v78, v79, v80, v81, v82, v83);
                    }
                  }
                }
                else
                {
                  BOOL v68 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v68) {
                    ZinValidateTd<11u>::ValidationForNonZeroFields(v68, v69, v70, v71, v72, v73, v74, v75);
                  }
                }
              }
              else
              {
                BOOL v60 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v60) {
                  ZinValidateTd<11u>::ValidationForNonZeroFields(v60, v61, v62, v63, v64, v65, v66, v67);
                }
              }
            }
            else
            {
              BOOL v52 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v52) {
                ZinValidateTd<11u>::ValidationForNonZeroFields(v52, v53, v54, v55, v56, v57, v58, v59);
              }
            }
          }
          else
          {
            BOOL v44 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v44) {
              ZinValidateTd<11u>::ValidationForNonZeroFields(v44, v45, v46, v47, v48, v49, v50, v51);
            }
          }
        }
        else
        {
          BOOL v2 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v2) {
            ZinValidateTd<11u>::ValidationForNonZeroFields(v2, v3, v4, v5, v6, v7, v8, v9);
          }
        }
      }
      else
      {
        BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v26) {
          ZinValidateTd<11u>::ValidationForNonZeroFields(v26, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else
    {
      BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v18) {
        ZinValidateTd<11u>::ValidationForNonZeroFields(v18, v19, v20, v21, v22, v23, v24, v25);
      }
    }
  }
  else
  {
    BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v10) {
      ZinValidateTd<11u>::ValidationForNonZeroFields(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  return 3;
}

uint64_t ZinValidateTd<11u>::CheckRedundantKDMARegisters(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 924);
  unsigned int v2 = *(_DWORD *)(a1 + 36);
  if (((v2 ^ (v1 >> 19)) & 3) != 0)
  {
    BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v3) {
      ZinValidateTd<11u>::CheckRedundantKDMARegisters(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  else if ((((v2 >> 2) ^ (v1 >> 17)) & 3) != 0)
  {
    BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v11) {
      ZinValidateTd<11u>::CheckRedundantKDMARegisters(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  else if (((v2 >> 5) ^ (v1 >> 8)))
  {
    BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v20) {
      ZinValidateTd<11u>::CheckRedundantKDMARegisters(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  else
  {
    if ((((v2 >> 4) ^ (v1 >> 10)) & 1) == 0) {
      return 0;
    }
    BOOL v28 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v28) {
      ZinValidateTd<11u>::CheckRedundantKDMARegisters(v28, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return 3;
}

uint64_t ZinValidateTd<11u>::ValidateFillLowerNEFirst(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 543) & 0x20) == 0) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(a2 + 516);
  if ((v3 & 0x30000000) != 0x10000000)
  {
    BOOL v14 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v14) {
      ZinValidateTd<10u>::VerifyL2InplaceAllocation(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    return 3;
  }
  if (v3 >> 30 != 1)
  {
    BOOL v22 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v22) {
      ZinValidateTd<10u>::VerifyL2InplaceAllocation(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    return 3;
  }
  if ((*(_DWORD *)(a2 + 520) & 0x6000) != 0x2000)
  {
    BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v30) {
      ZinValidateTd<8u>::VerifyL2InplaceAllocation(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    return 3;
  }
  unint64_t v4 = *(unsigned int *)(a2 + 524);
  if ((v4 & 0x4000) != 0)
  {
    if ((*(_DWORD *)(a2 + 928) & 7) != 4)
    {
      BOOL v55 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v55) {
        ZinValidateTd<11u>::ValidateFillLowerNEFirst(v55, v56, v57, v58, v59, v60, v61, v62);
      }
      return 3;
    }
    unint64_t v38 = v4 >> 16;
    if (v38 != 1 << (*(_DWORD *)(a2 + 512) & 7))
    {
      BOOL v71 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v71) {
        ZinValidateTd<11u>::ValidateFillLowerNEFirst(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      return 3;
    }
    if (*(void *)(a1 + 880) < v38)
    {
      BOOL v39 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v39) {
        ZinValidateTd<11u>::ValidateFillLowerNEFirst(v39, v40, v41, v42, v43, v44, v45, v46);
      }
      return 3;
    }
    return 0;
  }
  int v5 = *(_DWORD *)(a2 + 924);
  if ((v5 & 0x100) != 0)
  {
    BOOL v47 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v47) {
      ZinValidateTd<11u>::ValidateFillLowerNEFirst(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    return 3;
  }
  if ((v5 & 0x10000) != 0)
  {
    if ((*(unsigned char *)(a2 + 928) & 8) != 0)
    {
      BOOL v63 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v63) {
        ZinValidateTd<11u>::ValidateFillLowerNEFirst(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      return 3;
    }
    return 0;
  }
  BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v6) {
    ZinValidateTd<11u>::ValidateFillLowerNEFirst(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  return 3;
}

uint64_t ZinValidateTd<11u>::GetTextureIndexGroupDimension(uint64_t a1)
{
  switch((*(_DWORD *)(a1 + 708) >> 12) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      int v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      int v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      uint64_t result = v2 & 0x7FFF;
      break;
    case 4:
      uint64_t result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<11u>::GetTextureIndexDepthDimension(uint64_t a1)
{
  switch((*(_DWORD *)(a1 + 708) >> 9) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      int v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      int v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      uint64_t result = v2 & 0x7FFF;
      break;
    case 4:
      uint64_t result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<11u>::GetTextureIndexPlaneDimension(uint64_t a1)
{
  switch((*(_DWORD *)(a1 + 708) >> 6) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      int v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      int v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      uint64_t result = v2 & 0x7FFF;
      break;
    case 4:
      uint64_t result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<11u>::GetTextureIndexHeightDimension(uint64_t a1)
{
  switch((*(_DWORD *)(a1 + 708) >> 3) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      int v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      int v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      uint64_t result = v2 & 0x7FFF;
      break;
    case 4:
      uint64_t result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ZinIrTdValidationUtil::ValidateKernelCaching<11u>(uint64_t a1, uint64_t a2)
{
  *(void *)((char *)&v110[1] + 4) = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 2088)) {
    return 0;
  }
  ZinCodegenUtil::SplitInstructionListByHWNetwork(a2, &v93);
  uint64_t v3 = v93;
  uint64_t v84 = v94;
  if (v93 == v94) {
    goto LABEL_85;
  }
LABEL_3:
  v92[0] = 0;
  v92[1] = 0;
  uint64_t v91 = (uint64_t *)v92;
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 == v3) {
    goto LABEL_84;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    unint64_t v6 = *(unsigned int *)(*(void *)(v5 + 200) + 44);
    LODWORD(v88[0]) = HIWORD(*(_DWORD *)(*(void *)(v5 + 200) + 44));
    if (*(void *)(a1 + 2096) < v6 >> 16) {
      ZinAssertImpl("Invalid KID");
    }
    if (v6 >= 0x10000)
    {
      v85[0] = v88;
      uint64_t v7 = std::__tree<std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v91, (unsigned int *)v88, (uint64_t)&std::piecewise_construct, v85);
      uint64_t v8 = v7[6];
      uint64_t v9 = v7[7];
      if (v8 >= v9)
      {
        uint64_t v11 = v7[5];
        uint64_t v12 = v8 - v11;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = (char *)v9 - (char *)v11;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v7 + 7), v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (uint64_t *)&v16[8 * v12];
        *uint64_t v17 = v5;
        uint64_t v10 = v17 + 1;
        uint64_t v19 = v7[5];
        uint64_t v18 = v7[6];
        if (v18 != v19)
        {
          do
          {
            uint64_t v20 = *--v18;
            *--uint64_t v17 = v20;
          }
          while (v18 != v19);
          uint64_t v18 = v7[5];
        }
        v7[5] = v17;
        v7[6] = v10;
        v7[7] = (uint64_t *)&v16[8 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v8 = v5;
        uint64_t v10 = v8 + 1;
      }
      v7[6] = v10;
      goto LABEL_25;
    }
    if ((v6 & 0x40) != 0) {
      break;
    }
LABEL_25:
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3)
    {
      uint64_t v21 = v91;
      if (v91 == (uint64_t *)v92) {
        goto LABEL_84;
      }
      while (1)
      {
        uint64_t v22 = v21[5];
        unint64_t v23 = v21[6] - v22;
        if (v23 < 9)
        {
          if (v23 != 8 || (*(_DWORD *)(*(void *)(*(void *)v22 + 200) + 44) & 0x240) != 0x40) {
            goto LABEL_73;
          }
          BOOL v76 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v76) {
            ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v76, v77, v78, v79, v80, v81, v82, v83);
          }
          goto LABEL_89;
        }
        uint64_t v24 = *(void *)(*(void *)v22 + 200);
        int v25 = *(_DWORD *)(v24 + 44);
        if ((v25 & 0x40) == 0)
        {
          BOOL v60 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v60) {
            ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v60, v61, v62, v63, v64, v65, v66, v67);
          }
          goto LABEL_89;
        }
        if ((v25 & 0x200) != 0)
        {
          BOOL v68 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v68) {
            ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v68, v69, v70, v71, v72, v73, v74, v75);
          }
          goto LABEL_89;
        }
        RelocInfos = (uint64_t *)ZinAneTdHw_v11::GetRelocInfos((ZinAneTdHw_v11 *)(v24 + 8));
        FindRelocationInfo(RelocInfos, 6408, v88);
        if (!v90)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v109, v110, v43);
            goto LABEL_67;
          }
          goto LABEL_89;
        }
        uint64_t v27 = v21[5];
        uint64_t v28 = v21[6] - v27;
        if ((unint64_t)v28 < 9)
        {
          char v37 = 1;
          goto LABEL_69;
        }
        unint64_t v29 = v28 >> 3;
        uint64_t v30 = v24 + 132;
        unint64_t v31 = 1;
        while (1)
        {
          uint64_t v32 = *(void *)(*(void *)(v27 + 8 * v31) + 200);
          int v33 = *(_DWORD *)(v32 + 44);
          if (v31 != v29 - 1) {
            break;
          }
          if ((v33 & 0x200) == 0)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v107, &v108, v48);
            }
            goto LABEL_67;
          }
LABEL_37:
          uint64_t v34 = (uint64_t *)ZinAneTdHw_v11::GetRelocInfos((ZinAneTdHw_v11 *)(v32 + 8));
          FindRelocationInfo(v34, 6408, v85);
          if (v87)
          {
            if (ZinAneRelocInfo::operator==((unsigned __int8 *)v88, (unsigned __int8 *)v85))
            {
              uint64_t v35 = v32 + 132;
              uint64_t v36 = -64;
              while (((*(_DWORD *)(v35 + v36) ^ *(_DWORD *)(v30 + v36)) & 1) == 0)
              {
                if ((*(_DWORD *)(v35 + v36 + 64) ^ *(_DWORD *)(v30 + v36 + 64)) >= 0x40)
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v97, &v98, v41);
                  }
                  goto LABEL_55;
                }
                if ((*(_DWORD *)(v35 + v36 + 128) ^ *(_DWORD *)(v30 + v36 + 128)) >= 0x40)
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v95, &v96, v42);
                  }
                  goto LABEL_55;
                }
                v36 += 4;
                if (!v36)
                {
                  char v37 = 1;
                  goto LABEL_56;
                }
              }
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v99, &v100, v40);
              }
            }
            else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v101, &v102, v39);
            }
          }
          else
          {
            if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              goto LABEL_67;
            }
            ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v103, &v104, v38);
          }
LABEL_55:
          char v37 = 0;
LABEL_56:
          if (v87 && v86 < 0) {
            operator delete(v85[1]);
          }
          if (v37)
          {
            ++v31;
            uint64_t v27 = v21[5];
            unint64_t v29 = (v21[6] - v27) >> 3;
            if (v31 < v29) {
              continue;
            }
          }
          goto LABEL_69;
        }
        if ((v33 & 0x200) == 0) {
          goto LABEL_37;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v105, &v106, v49);
        }
LABEL_67:
        char v37 = 0;
LABEL_69:
        if (v90 && v89 < 0) {
          operator delete(v88[1]);
        }
        if ((v37 & 1) == 0) {
          goto LABEL_89;
        }
LABEL_73:
        uint64_t v44 = (uint64_t *)v21[1];
        if (v44)
        {
          do
          {
            uint64_t v45 = v44;
            uint64_t v44 = (uint64_t *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            uint64_t v45 = (uint64_t *)v21[2];
            BOOL v46 = *v45 == (void)v21;
            uint64_t v21 = v45;
          }
          while (!v46);
        }
        uint64_t v21 = v45;
        if (v45 == (uint64_t *)v92)
        {
LABEL_84:
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v91, v92[0]);
          v3 += 24;
          if (v3 == v84)
          {
LABEL_85:
            uint64_t v50 = 0;
            goto LABEL_90;
          }
          goto LABEL_3;
        }
      }
    }
  }
  BOOL v51 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v51) {
    ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v51, v52, v53, v54, v55, v56, v57, v58);
  }
LABEL_89:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v91, v92[0]);
  uint64_t v50 = 3;
LABEL_90:
  v88[0] = (void **)&v93;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100](v88);
  return v50;
}

void sub_2113243F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,char *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,char a42)
{
  if (a26 && a24 < 0) {
    operator delete(__p);
  }
  if (a35)
  {
    if (a33 < 0) {
      operator delete(a28);
    }
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a37, a40);
  a27 = &a42;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void DumpTask<11u>(uint8_t *buf, unsigned char *a2)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Checking for Internal Buffer Overflow failed", buf, 2u);
}

void ZinIrCodegenValidateTds<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Validation kernel caching failure.\n", a5, a6, a7, a8, 0);
}

void ZinIrContextSwitchValidator<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Producing chained buffers cannot be context switch points\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Last task of the network should have no live outs set\n", a5, a6, a7, a8, 0);
}

void ZinAneTd<11u>::HandleCommonArgMinMax(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinAneTd<11u>::HandleTileDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void HandlePELayer<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PECodegenUtils::HandlePEGOCLayer<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void PECodegenUtils::HandlePEPoolLayer<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: PE Pooling operation not supported.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: PE Max Pooling padding mode is not Negative\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: PE Min Pooling padding mode is not Positive\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: DoPoolKernel failed", a5, a6, a7, a8, 0);
}

void CodegenReductionFinalScaleEpsilon<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinValidateTd<11u>::Test(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<11u>::Test(uint8_t *a1, void *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "kernel_dma_src_header_cache_hint == ane_kernel_dma_src_header_dma_config_cache_hint_noalloc_v11 || kernel_dma_sr"
        "c_header_cache_hint == ane_kernel_dma_src_header_dma_config_cache_hint_alloc_v11 || kernel_dma_src_header_cache_"
        "hint == ane_kernel_dma_src_header_dma_config_cache_hint_depri_v11 || kernel_dma_src_header_cache_hint == ane_ker"
        "nel_dma_src_header_dma_config_cache_hint_drop_v11";
  OUTLINED_FUNCTION_1(&dword_210C72000, &_os_log_internal, a3, "%s\n", a1);
}

{
  *(_DWORD *)a1 = 136315138;
  *a2 = "kernel_dma_src_coeff_cache_hint == ane_kernel_dma_src_coeff_dma_config_cache_hint_noalloc_v11 || kernel_dma_src_"
        "coeff_cache_hint == ane_kernel_dma_src_coeff_dma_config_cache_hint_alloc_v11 || kernel_dma_src_coeff_cache_hint "
        "== ane_kernel_dma_src_coeff_dma_config_cache_hint_depri_v11 || kernel_dma_src_coeff_cache_hint == ane_kernel_dma"
        "_src_coeff_dma_config_cache_hint_drop_v11";
  OUTLINED_FUNCTION_1(&dword_210C72000, &_os_log_internal, a3, "%s\n", a1);
}

void ZinValidateTd<11u>::ValidateL2CircularBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<11u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinValidateTd<11u>::ValidationForNonZeroFields(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<11u>::CheckRedundantKDMARegisters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinValidateTd<11u>::ValidateFillLowerNEFirst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

void ZinIrTdValidationUtil::ValidateKernelCaching<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s\n", a5, a6, a7, a8, 2u);
}

uint64_t ZinMirBatchLegalizerForHWConstraintsTransform(ZinIrOpLayerGraph *a1, uint64_t **this)
{
  if (*((_DWORD *)this[8] + 2) == 85 && this[54])
  {
    if (((uint64_t (*)(uint64_t **))(*this)[11])(this) != 1) {
      return 0;
    }
  }
  else if (!ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)this))
  {
    return 0;
  }
  BOOL v101 = a1;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  Hal = ZinIrTarget::GetHal(this[2], (ZinIrTarget *)this[2][20]);
  uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  int v6 = *(unsigned __int8 *)(v5 + 1234);
  uint64_t v7 = (*(uint64_t (**)(void, void, void))(*(void *)*this[11] + 32))(*this[11], 0, 0);
  uint64_t v8 = v7;
  if (v6)
  {
    if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)this))
    {
      unint64_t v9 = *(void *)(v8 + 48);
      if (v9 > *(void *)(v5 + 384))
      {
        SplitBatchChunksByMaxNumGroups(v9, v5, (uint64_t)&v102);
        uint64_t v10 = (uint64_t)v103;
        uint64_t v11 = v101;
        goto LABEL_10;
      }
    }
LABEL_44:
    char v38 = 1;
    goto LABEL_81;
  }
  uint64_t v15 = *(void *)(v7 + 56);
  unint64_t v16 = *(void *)(((uint64_t (*)(uint64_t **, void, void))(*this)[4])(this, 0, 0) + 56);
  int v17 = *((_DWORD *)this[8] + 2);
  if (v17 == 89)
  {
    uint64_t v20 = this[54][8];
    uint64_t v19 = *(int *)(v20 + 40);
    uint64_t v18 = *(int *)(v20 + 44);
  }
  else
  {
    if (v17 == 85 && this[54]) {
      operator new();
    }
    uint64_t v18 = 1;
    uint64_t v19 = 1;
  }
  unint64_t v21 = *(void *)(((uint64_t (*)(uint64_t **, void, void))(*this)[4])(this, 0, 0) + 48);
  unint64_t v22 = v18 * v15 * v19;
  unint64_t v23 = v16;
  unint64_t v24 = *(void *)(v5 + 688);
  if (v21 == 1 && (v22 > v24 || v16 > *(void *)(v5 + 696)))
  {
    BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v26) {
      ZinMirBatchLegalizerForHWConstraintsTransform(v26, v27, v28, v29, v30, v31, v32, v33);
    }
LABEL_68:
    uint64_t v8 = 3;
    BOOL v59 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v59) {
      goto LABEL_79;
    }
    goto LABEL_80;
  }
  if (v22 * v21 <= v24 && v16 * v21 <= *(void *)(v5 + 696)) {
    goto LABEL_44;
  }
  if (!v21) {
    goto LABEL_66;
  }
  uint64_t v34 = 1;
  while (1)
  {
    unint64_t v35 = v21 / (v34 + 1);
    unint64_t v36 = v35 <= v35 + v21 - v35 * (v34 + 1) ? v35 + v21 - v35 * (v34 + 1) : v21 / (v34 + 1);
    if (v36 * v22 < v24 && v36 * v23 < *(void *)(v5 + 696)) {
      break;
    }
    ++v34;
    if (!v36) {
      goto LABEL_66;
    }
  }
  if (!v36)
  {
LABEL_66:
    BOOL v51 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v51) {
      ZinMirBatchLegalizerForHWConstraintsTransform(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    goto LABEL_68;
  }
  uint64_t v103 = (unint64_t *)v102;
  std::vector<unsigned long>::reserve(&v102, v34 + 1);
  uint64_t v39 = v103;
  if (v34)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = v103;
    do
    {
      if (v42 >= v104)
      {
        uint64_t v43 = (unint64_t *)v102;
        uint64_t v44 = ((char *)v42 - (unsigned char *)v102) >> 3;
        unint64_t v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61) {
          goto LABEL_107;
        }
        uint64_t v46 = (char *)v104 - (unsigned char *)v102;
        if (((char *)v104 - (unsigned char *)v102) >> 2 > v45) {
          unint64_t v45 = v46 >> 2;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v45;
        }
        if (v47)
        {
          uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v104, v47);
          uint64_t v43 = (unint64_t *)v102;
          uint64_t v42 = v103;
        }
        else
        {
          uint64_t v48 = 0;
        }
        uint64_t v49 = (unint64_t *)&v48[8 * v44];
        unint64_t *v49 = v35;
        uint64_t v39 = v49 + 1;
        while (v42 != v43)
        {
          unint64_t v50 = *--v42;
          *--uint64_t v49 = v50;
        }
        uint64_t v102 = v49;
        uint64_t v103 = v39;
        uint64_t v104 = (unint64_t *)&v48[8 * v47];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *uint64_t v42 = v35;
        uint64_t v39 = v42 + 1;
      }
      uint64_t v103 = v39;
      v41 += v35;
      ++v40;
      uint64_t v42 = v39;
    }
    while (v34 != v40);
  }
  else
  {
    uint64_t v41 = 0;
  }
  if (v39 >= v104)
  {
    uint64_t v84 = (unint64_t *)v102;
    uint64_t v85 = ((char *)v39 - (unsigned char *)v102) >> 3;
    unint64_t v86 = v85 + 1;
    if ((unint64_t)(v85 + 1) >> 61) {
LABEL_107:
    }
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    uint64_t v87 = (char *)v104 - (unsigned char *)v102;
    if (((char *)v104 - (unsigned char *)v102) >> 2 > v86) {
      unint64_t v86 = v87 >> 2;
    }
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v88 = v86;
    }
    if (v88)
    {
      char v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v104, v88);
      uint64_t v84 = (unint64_t *)v102;
      uint64_t v39 = v103;
    }
    else
    {
      char v89 = 0;
    }
    char v90 = (unint64_t *)&v89[8 * v85];
    uint64_t v91 = &v89[8 * v88];
    *char v90 = v36;
    uint64_t v10 = (uint64_t)(v90 + 1);
    while (v39 != v84)
    {
      unint64_t v92 = *--v39;
      *--char v90 = v92;
    }
    uint64_t v102 = v90;
    uint64_t v103 = (unint64_t *)v10;
    uint64_t v104 = (unint64_t *)v91;
    if (v84) {
      operator delete(v84);
    }
  }
  else
  {
    unint64_t *v39 = v36;
    uint64_t v10 = (uint64_t)(v39 + 1);
  }
  uint64_t v11 = v101;
  uint64_t v103 = (unint64_t *)v10;
  if (v41 + v36 != v21)
  {
    BOOL v93 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v93) {
      ZinMirBatchLegalizerForHWConstraintsTransform(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    goto LABEL_68;
  }
LABEL_10:
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v12 = (v10 - (uint64_t)v102) >> 3;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  std::string __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v102, v10, v12);
  ZinIrLayerBatchSplitInfo::AppendBatchSplit((uint64_t)&v113, v12, (uint64_t **)&__p);
  if (__p)
  {
    uint64_t v111 = __p;
    operator delete(__p);
  }
  v108[0] = v108;
  v108[1] = v108;
  uint64_t v109 = 0;
  uint64_t v8 = ZinMirTensorTransform::SplitLayerPerBatch(v11, (const std::string *)this, (uint64_t)&v113);
  if (!v8)
  {
    if (v109)
    {
      uint64_t v13 = *(ZinIrOpLayer **)(v108[0] + 16);
      *(_OWORD *)uint64_t v105 = 0u;
      long long v106 = 0u;
      int v107 = 1065353216;
      char v14 = ZinIrOpLayerGraph::MoveOutgoingEdges(v11, this, v13, v105);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v105);
      if (v14)
      {
        ZinIrOpLayerGraph::RemoveNode(v11, (ZinIrOpLayer *)this, 0);
        uint64_t v8 = 0;
        goto LABEL_75;
      }
      BOOL v75 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v75) {
        std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v75, v76, v77, v78, v79, v80, v81, v82);
      }
    }
    else
    {
      BOOL v67 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v67) {
        ZinMirBatchLegalizerForHWConstraintsTransform(v67, v68, v69, v70, v71, v72, v73, v74);
      }
    }
    uint64_t v8 = 3;
  }
LABEL_75:
  std::__list_imp<ZinIrSection *>::clear(v108);
  if (v113)
  {
    uint64_t v114 = v113;
    operator delete(v113);
  }
  if (v8)
  {
    BOOL v59 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v59) {
LABEL_79:
    }
      ZinMirBatchLegalizerForHWConstraintsTransform(v59, v60, v61, v62, v63, v64, v65, v66);
LABEL_80:
    char v38 = 0;
    goto LABEL_81;
  }
  char v38 = 1;
LABEL_81:
  if (v102)
  {
    uint64_t v103 = (unint64_t *)v102;
    operator delete(v102);
  }
  if (v38) {
    return 0;
  }
  return v8;
}

void sub_21132A8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  std::__list_imp<ZinIrSection *>::clear(&a18);
  unint64_t v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(void *)(v22 - 96) = v24;
    operator delete(v24);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirPrepareForBatchesWithNoHWSupport(ZinIrOpLayerGraph *a1, uint64_t **a2)
{
  Hal = ZinIrTarget::GetHal(a2[2], (ZinIrTarget *)a2[2][20]);
  if (*(unsigned char *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal) + 1234)) {
    return 0;
  }
  if (!ZinIrOpLayer::IsIntermediate((ZinIrOpLayer *)a2)) {
    return 0;
  }
  int v5 = *((_DWORD *)a2[8] + 2);
  if (v5 == 7) {
    return 0;
  }
  unint64_t v47 = a2;
  uint64_t v8 = ((uint64_t (*)(uint64_t **, void, void))(*a2)[4])(a2, 0, 0);
  double v9 = ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()(a1, v8, a2, &v45);
  if (!v45
    && *(uint64_t *)(((uint64_t (*)(uint64_t **, void, void, double))(*a2)[4])(a2, 0, 0, v9) + 48) >= 2)
  {
    uint64_t v43 = &v47;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)a1 + 8, (unint64_t **)&v43);
    uint64_t v11 = (char *)a1 + 104;
    if (v10) {
      uint64_t v11 = (char *)(v10 + 3);
    }
    uint64_t v12 = *(void ***)v11;
    uint64_t v13 = (void **)*((void *)v11 + 1);
    if (*(void ***)v11 != v13)
    {
      while (1)
      {
        uint64_t v14 = (*(uint64_t (**)(void, void, void))(*(void *)**v12 + 32))(**v12, 0, 0);
        ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()(a1, v14, v47, (BOOL *)&v43);
        int v15 = v43;
        std::string::operator=(&v46, &__p);
        if (v15) {
          break;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (++v12 == v13) {
          goto LABEL_18;
        }
      }
      BOOL v45 = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_18:
  BOOL v41 = v45;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v42 = v46;
  }
  if (v41)
  {
    int v17 = a2[14];
    unint64_t v16 = a2[15];
    while (v17 != v16)
    {
      uint64_t v18 = *v17;
      if (*(_DWORD *)(*(void *)(*v17 + 64) + 8) == 7)
      {
        uint64_t v19 = *(unsigned __int8 *)(v18 + 47);
        size_t v20 = *(void *)(v18 + 32);
        if ((v19 & 0x80u) == 0) {
          uint64_t v21 = *(unsigned __int8 *)(v18 + 47);
        }
        else {
          uint64_t v21 = *(void *)(v18 + 32);
        }
        std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v42.__r_.__value_.__l.__size_;
        }
        if (v21 != size) {
          goto LABEL_47;
        }
        unint64_t v23 = (const void **)(v18 + 24);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v24 = &v42;
        }
        else {
          unint64_t v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
        }
        if ((v19 & 0x80) != 0)
        {
          if (memcmp(*v23, v24, v20)) {
            goto LABEL_47;
          }
        }
        else if (v19)
        {
          while (*(unsigned __int8 *)v23 == v24->__r_.__value_.__s.__data_[0])
          {
            unint64_t v23 = (const void **)((char *)v23 + 1);
            unint64_t v24 = (std::string *)((char *)v24 + 1);
            if (!--v19) {
              goto LABEL_43;
            }
          }
LABEL_47:
          BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v25) {
            ZinMirPrepareForBatchesWithNoHWSupport(v25, v26, v27, v28, v29, v30, v31, v32);
          }
          goto LABEL_49;
        }
      }
      else if (ZinMirBatchLegalizer(a1, (uint64_t **)v18, &v45))
      {
        BOOL v33 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v33) {
          ZinMirBatchLegalizerForHWConstraintsTransform(v33, v34, v35, v36, v37, v38, v39, v40);
        }
        goto LABEL_49;
      }
LABEL_43:
      ++v17;
    }
    goto LABEL_46;
  }
  if (v5 != 36 || !ZinMirPrepareViewForBatches(a1, (ZinIrOpLayer *)a2))
  {
LABEL_46:
    uint64_t v6 = 0;
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v6 = 3;
LABEL_50:
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_21132ACB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPrepareViewForBatches(ZinIrOpLayerGraph *a1, ZinIrOpLayer *a2)
{
  uint64_t v2 = *((void *)a2 + 8);
  if (*(_DWORD *)(v2 + 8) != 36) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  uint64_t v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  ZinIrTensor::GetParentTensor(v6, &v18);
  uint64_t v7 = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (*(void *)(v5 + 56) * *(void *)(v2 + 64) == *(void *)(v7 + 56)) {
    return 0;
  }
  uint64_t v8 = ZinMirBatchLegalizer(a1, (uint64_t **)a2, (BOOL *)&v18);
  if (v8)
  {
    BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v10) {
      ZinMirBatchLegalizerForHWConstraintsTransform(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  return v8;
}

uint64_t ZinMirPrepareForBatchesTransform(ZinIrOpLayerGraph *a1, ZinIrOpLayer *this)
{
  if (!ZinIrOpLayer::IsIntermediate(this)) {
    return 0;
  }
  int v5 = *(_DWORD *)(*((void *)this + 8) + 8);
  if (v5 != 85)
  {
    if (v5 == 7 && ZinMirUtils::ZinMirHandleConstTensorBatching(a1, this, v4))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinMirPrepareForBatchesTransform();
      }
      return 3;
    }
    return 0;
  }
  if (!*((void *)this + 54)) {
    return 0;
  }
  if ((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)this + 88))(this) == 1)
  {
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)this + 120))(this))
    {
      (*(void (**)(uint64_t *__return_ptr, ZinIrOpLayer *))(*(void *)this + 128))(&v19, this);
      uint64_t v7 = *(void *)(v19 + 48);
      BOOL v8 = v7 == *(void *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0)+ 48);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
    else
    {
      BOOL v8 = 0;
    }
    uint64_t v6 = 0;
    if (*(uint64_t *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0)+ 48) >= 2&& !v8)
    {
      uint64_t v6 = 0;
      uint64_t v18 = *(void *)(*((void *)this + 54) + 136);
      *(unsigned char *)(v18 + 552) = 1;
      *(unsigned char *)(v18 + 448) |= 0x80u;
    }
  }
  else
  {
    uint64_t v6 = ZinMirBatchLegalizer(a1, (uint64_t **)this, (BOOL *)&v19);
    if (v6)
    {
      BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v10) {
        ZinMirBatchLegalizerForHWConstraintsTransform(v10, v11, v12, v13, v14, v15, v16, v17);
      }
    }
  }
  return v6;
}

void sub_21132B040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirBatchLegalizer(ZinIrOpLayerGraph *a1, uint64_t **a2, BOOL *a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  std::string __p = 0;
  std::string v46 = 0;
  uint64_t v47 = 0;
  Hal = ZinIrTarget::GetHal(a2[2], (ZinIrTarget *)a2[2][20]);
  uint64_t v7 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  unint64_t v44 = 0;
  char HaveSameBatch = ZinIrBatchUtils::LayersHaveSameBatch(a2 + 11, &v44);
  *a3 = 0;
  if ((HaveSameBatch & 1) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = a2 + 3;
      if (*((char *)a2 + 47) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Batch Splitting is skipped for %s because inputs have different batch sizes.\n", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_12;
  }
  if (v44 == 1)
  {
LABEL_12:
    uint64_t v13 = 0;
    goto LABEL_13;
  }
  if (!*(unsigned char *)(v7 + 1234)) {
    goto LABEL_19;
  }
  double v9 = (ZinMirConvUtils *)((uint64_t (*)(uint64_t **))(*a2)[11])(a2);
  if (ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2))
  {
    ((void (*)(long long *__return_ptr, uint64_t **))(*a2)[49])(&buf, a2);
    BOOL v10 = (ZinMirConvUtils *)*((void *)&buf + 1);
    ((void (*)(long long *__return_ptr, uint64_t **))(*a2)[50])(&buf, a2);
    if (ZinMirConvUtils::IsChannelwiseConvolution(v10, *((ZinMirConvUtils **)&buf + 1), v9))
    {
      unint64_t v11 = v44;
      if (v44 > *(void *)(v7 + 384)) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
  }
  if (v9 != (ZinMirConvUtils *)1) {
    goto LABEL_19;
  }
  unint64_t v11 = v44;
  if (v44 <= *(void *)(v7 + 384))
  {
    if (*((_DWORD *)a2[8] + 2) == 85)
    {
      if (((unsigned int (*)(uint64_t **))(*a2)[15])(a2))
      {
        ((void (*)(long long *__return_ptr, uint64_t **))(*a2)[16])(&buf, a2);
        uint64_t v29 = *(void *)(buf + 48);
        BOOL v30 = v29 == *(void *)(((uint64_t (*)(uint64_t **, void, void))(*a2)[4])(a2, 0, 0) + 48);
        if (*((void *)&buf + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
        }
      }
      else
      {
        BOOL v30 = 0;
      }
      uint64_t v31 = a2[48];
      if (v31)
      {
        uint64_t v32 = v31[17];
        if (v32 && !v30)
        {
          *(unsigned char *)(v32 + 552) = 1;
          *(unsigned char *)(v32 + 448) |= 0x80u;
        }
      }
      uint64_t v34 = a2[54];
      if (v34)
      {
        uint64_t v35 = v34[17];
        if (v35 && !v30)
        {
          uint64_t v13 = 0;
          *(unsigned char *)(v35 + 552) = 1;
          *(unsigned char *)(v35 + 448) |= 0x80u;
          goto LABEL_13;
        }
      }
    }
    goto LABEL_12;
  }
LABEL_18:
  *a3 = 1;
  SplitBatchChunksByMaxNumGroups(v11, v7, (uint64_t)&__p);
LABEL_19:
  long long buf = 0uLL;
  uint64_t v49 = 0;
  uint64_t v15 = v44;
  std::string v42 = 0;
  uint64_t v43 = 0;
  BOOL v41 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v41, __p, (uint64_t)v46, (v46 - (unsigned char *)__p) >> 3);
  ZinIrLayerBatchSplitInfo::AppendBatchSplit((uint64_t)&buf, v15, (uint64_t **)&v41);
  if (v41)
  {
    std::string v42 = v41;
    operator delete(v41);
  }
  if (*((void *)&buf + 1) - (void)buf >= 9uLL) {
    *a3 = 1;
  }
  v39[0] = v39;
  v39[1] = v39;
  uint64_t v40 = 0;
  uint64_t v13 = ZinMirTensorTransform::SplitLayerPerBatch(a1, (const std::string *)a2, (uint64_t)&buf);
  if (v13 || !v40)
  {
    BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v20) {
      ZinMirBatchLegalizerForHWConstraintsTransform(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    goto LABEL_42;
  }
  uint64_t v16 = *(ZinIrOpLayer **)(v39[0] + 16);
  memset(v37, 0, sizeof(v37));
  int v38 = 1065353216;
  int v17 = ZinIrOpLayerGraph::MoveOutgoingEdges(a1, a2, v16, v37);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v37);
  uint64_t v18 = a2[11];
  if (a2[12] == v18) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = (ZinIrOpLayer *)*v18;
  }
  int v28 = v17 & ZinIrOpLayerGraph::RemoveNode(a1, (ZinIrOpLayer *)a2, 0);
  if (v19 && *((void *)v19 + 15) == *((void *)v19 + 14))
  {
    if (v28 & ZinIrOpLayerGraph::RemoveNode(a1, v19, 0)) {
      goto LABEL_33;
    }
LABEL_39:
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinMirBatchLegalizer();
    }
    uint64_t v13 = 3;
    goto LABEL_42;
  }
  if ((v28 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v13 = 0;
LABEL_42:
  std::__list_imp<ZinIrSection *>::clear(v39);
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
LABEL_13:
  if (__p)
  {
    std::string v46 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_21132B534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPrepareFrontEndConcats(ZinIrOpLayerGraph *a1, ZinIrOpLayer *a2)
{
  uint64_t v2 = *((void *)a2 + 8);
  if (*(_DWORD *)(v2 + 8) != 7) {
    return 0;
  }
  if (*(void *)(v2 + 24) == *(void *)(v2 + 16))
  {
    *(int64x2_t *)std::string __p = vdupq_n_s64(1uLL);
    long long v54 = *(_OWORD *)__p;
    uint64_t v55 = 1;
    int v5 = *(_DWORD *)(v2 + 12);
    Hal = ZinIrTarget::GetHal(*((uint64_t **)a2 + 2), *(ZinIrTarget **)(*((void *)a2 + 2) + 160));
    (*(void (**)(uint64_t *))(*Hal + 16))(Hal);
    ZinConcatLayerUtils::ComputeConcatViewAndStep(v5, (void **)a2 + 11, (uint64_t)__p, v51);
    uint64_t v7 = *(void **)(v2 + 16);
    if (v7)
    {
      *(void *)(v2 + 24) = v7;
      operator delete(v7);
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + 24) = 0;
      *(void *)(v2 + 32) = 0;
    }
    *(_OWORD *)(v2 + 16) = *(_OWORD *)v51;
    *(void *)(v2 + 32) = v52;
  }
  int v8 = *(_DWORD *)(v2 + 12);
  BOOL HaveBatches = ZinIrBatchUtils::LayersHaveBatches((void *)a2 + 11);
  uint64_t v10 = *((void *)a2 + 11);
  if (*((void *)a2 + 12) != v10)
  {
    unint64_t v11 = 0;
    char v12 = !HaveBatches;
    do
    {
      uint64_t v13 = *(const ZinIrOpLayer **)(v10 + 8 * v11);
      uint64_t v14 = (*(uint64_t (**)(const ZinIrOpLayer *, void, void))(*(void *)v13 + 32))(v13, 0, 0);
      uint64_t v15 = v14;
      if (*(void *)(v14 + 112)) {
        char v16 = v12;
      }
      else {
        char v16 = 1;
      }
      if ((v16 & 1) != 0 || v8 == 5)
      {
        int v17 = *(ZinIrOpLayer **)(v14 + 96);
        int v18 = *(_DWORD *)(*((void *)v17 + 8) + 8);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v54 = 0;
        char IsNoOp = ZinIrOpLayer::IsNoOp(v17, (uint64_t *)__p);
        if (v18 == 7) {
          char v21 = 0;
        }
        else {
          char v21 = IsNoOp;
        }
        if (v21)
        {
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          BOOL IsConnectedToLiveOut = ZinOpLayerUtils::IsConnectedToLiveOut(*(ZinOpLayerUtils **)(v15 + 96), v20);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (!IsConnectedToLiveOut)
          {
            uint64_t v50 = *(void *)(v15 + 96);
            v51[0] = &v50;
            uint64_t v23 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)a1 + 3, (unint64_t **)v51);
            uint64_t v24 = (char *)(v23 + 3);
            if (!v23) {
              uint64_t v24 = (char *)a1 + 104;
            }
            __p[1] = 0;
            *(void *)&long long v54 = 0;
            __p[0] = 0;
            std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(__p, *(const void **)v24, *((void *)v24 + 1), (uint64_t)(*((void *)v24 + 1) - *(void *)v24) >> 3);
            uint64_t v25 = (ZinIrOpLayer ***)__p[0];
            uint64_t v26 = (ZinIrOpLayer ***)__p[1];
            if (__p[0] != __p[1])
            {
              char v27 = 0;
              do
              {
                int v28 = *v25;
                uint64_t v29 = **v25;
                if (*(_DWORD *)(*((void *)v29 + 8) + 8) == 7)
                {
                  if ((v29 != a2) | v27 & 1)
                  {
                    uint64_t IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(a1, v29, v13);
                    ZinMirTensorTransform::CopyAndReplaceInputAtIndex(a1, *v28, IndexOfMatchedIncomingLayer);
                  }
                  else
                  {
                    char v27 = 1;
                  }
                }
                ++v25;
              }
              while (v25 != v26);
            }
            uint64_t v31 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(***((void ***)a2 + 11) + 32))(**((void **)a2 + 11), 0, 0);
            uint64_t Interleave = ZinIrTensor::GetInterleave(v31);
            if (v33) {
              uint64_t v34 = Interleave;
            }
            else {
              uint64_t v34 = 1;
            }
            uint64_t v35 = (void *)*((void *)a2 + 11);
            uint64_t v36 = (void *)*((void *)a2 + 12);
            while (v35 != v36)
            {
              uint64_t v37 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*v35 + 32))(*v35, 0, 0);
              uint64_t v38 = ZinIrTensor::GetInterleave(v37);
              if (v39) {
                uint64_t v40 = v38;
              }
              else {
                uint64_t v40 = 1;
              }
              if (v40 != v34)
              {
                ZinMirTensorTransform::CopyAndReplaceInputAtIndex(a1, a2, v11);
                break;
              }
              ++v35;
            }
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_23;
          }
        }
        ZinMirTensorTransform::CopyAndReplaceInputAtIndex(a1, a2, v11);
      }
LABEL_23:
      ++v11;
      uint64_t v10 = *((void *)a2 + 11);
    }
    while (v11 < (*((void *)a2 + 12) - v10) >> 3);
  }
  uint64_t v41 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  uint64_t v42 = *((void *)a2 + 11);
  if (*((void *)a2 + 12) == v42) {
    return 0;
  }
  unint64_t v43 = 0;
  uint64_t v44 = *(unsigned int *)(v41 + 88);
  while (v44 == *(_DWORD *)((*(uint64_t (**)(void, void, void))(**(void **)(v42 + 8 * v43)
                                                                                       + 32))(*(void *)(v42 + 8 * v43), 0, 0)+ 88))
  {
    ++v43;
    uint64_t v42 = *((void *)a2 + 11);
    if (v43 >= (*((void *)a2 + 12) - v42) >> 3) {
      return 0;
    }
  }
  if (*((char *)a2 + 47) >= 0) {
    size_t v47 = *((unsigned __int8 *)a2 + 47);
  }
  else {
    size_t v47 = *((void *)a2 + 4);
  }
  uint64_t v48 = v51;
  std::string::basic_string[abi:ne180100]((uint64_t)v51, v47 + 21);
  if (v52 < 0) {
    uint64_t v48 = (void **)v51[0];
  }
  if (v47)
  {
    if (*((char *)a2 + 47) >= 0) {
      uint64_t v49 = (char *)a2 + 24;
    }
    else {
      uint64_t v49 = (char *)*((void *)a2 + 3);
    }
    memmove(v48, v49, v47);
  }
  strcpy((char *)v48 + v47, "copy_for_format_match");
  ZinObjectNameFactory::ZinObjectNameFactory(__p, v51);
  if (SHIBYTE(v52) < 0) {
    operator delete(v51[0]);
  }
  uint64_t v45 = ZinMirTensorTransform::ReconcileInputTensorFormat((uint64_t **)a1, a2, (uint64_t)__p, v44);
  __p[0] = &unk_26C34DA98;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[1]);
  }
  return v45;
}

void sub_21132BAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPrepareIr(uint64_t **a1, uint64_t a2, CFArrayRef *a3)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(ZinIrContext **)(*(void *)(*ZinIrTarget::GetHal(*a1, (ZinIrTarget *)(*a1)[4]) + 32) + 16);
  if (ZinMirOpt::FoldBatchForMatmult(a1, a2))
  {
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      ZinMirPrepareIr(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    return 0;
  }
  uint64_t v18 = ZinMirPrepareLayers((uint64_t)a1, a2, (uint64_t)a3, v7, v8);
  if (v18)
  {
    uint64_t v17 = v18;
    ZinIrNetworkStatus::SetError(a3, @"MirPrepareLayersFailure");
    return v17;
  }
  kdebug_trace();
  v93[0] = &unk_26C380F58;
  v93[1] = ZinMirPrepareForBatchesWithNoHWSupport;
  uint64_t v94 = v93;
  uint64_t v17 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v93, 0);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v93);
  if (v17
    || (v96[0] = &unk_26C380F58,
        v96[1] = ZinMirPrepareForBatchesTransform,
        uint64_t v98 = v96,
        uint64_t v17 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v96, 0),
        std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v96),
        v17))
  {
    ZinIrNetworkStatus::SetError(a3, @"BatchOptimizationFailure");
    return v17;
  }
  if (ZinTensorMirInfoPropogator::Run((ZinTensorMirInfoPropogator **)a1, v19))
  {
    BOOL v21 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v21) {
      ZinMirBuilder(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    return 3;
  }
  int inserted = (ZinMirInsertCopyForInputView *)ZinMirInsertCopyForInputView::ZinMirInsertCopyForInputView(v93, a1, a2);
  ZinMirInsertCopyForInputView::Run(inserted);
  kdebug_trace();
  uint64_t v17 = ZinMirValidateInOutLayerHints((ZinIrControlFlowGraph *)a1);
  if (v17)
  {
    BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v30) {
      ZinMirPrepareIr(v30, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "before_batch_split");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v92, *(const ZinIrCompilerParameters **)(a2 + 8));
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v96, (ZinIrCompilerParameters *)&v92, a2 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v92);
    if (v97 < 0) {
      operator delete(v96[0]);
    }
    uint64_t v17 = ZinMirBatchOrChannelSplit::TryBatchSplit((uint64_t)a1, a2, (uint64_t)a3);
    if (!v17)
    {
      std::string::basic_string[abi:ne180100]<0>(v96, "after_batch_split");
      ZinIrCompilerParameters::ZinIrCompilerParameters(&v91, *(const ZinIrCompilerParameters **)(a2 + 8));
      ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v96, (ZinIrCompilerParameters *)&v91, a2 + 16, 256);
      ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v91);
      if (v97 < 0) {
        operator delete(v96[0]);
      }
      if (*(unsigned char *)(*(void *)(a2 + 8) + 531))
      {
        uint64_t v17 = ZinMirBatchOrChannelSplit::TryL2ChannelSplit((uint64_t)a1, a2, (uint64_t)a3);
        if (v17)
        {
          ZinIrNetworkStatus::SetError(a3, @"MirPrepareLayersFailure");
          BOOL v46 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v46) {
            ZinMirPrepareIr(v46, v47, v48, v49, v50, v51, v52, v53);
          }
          goto LABEL_23;
        }
        std::string::basic_string[abi:ne180100]<0>(v96, "after_channel_split");
        ZinIrCompilerParameters::ZinIrCompilerParameters(&v90, *(const ZinIrCompilerParameters **)(a2 + 8));
        ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v96, (ZinIrCompilerParameters *)&v90, a2 + 16, 256);
        ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v90);
        if (v97 < 0) {
          operator delete(v96[0]);
        }
      }
      uint64_t v17 = MirOpt::SplitConvAndHoistActivation(a1, a2);
      if (v17)
      {
        BOOL v54 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v54) {
          ZinMirPrepareIr(v54, v55, v56, v57, v58, v59, v60, v61);
        }
      }
      else
      {
        kdebug_trace();
        uint64_t v17 = ZinMirSplitForKernelSizeEngine(v6);
        if (v17)
        {
          BOOL v62 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v62) {
            ZinMirPrepareIr(v62, v63, v64, v65, v66, v67, v68, v69);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v96, "after_kernel_splitting");
          ZinIrCompilerParameters::ZinIrCompilerParameters(v89, *(const ZinIrCompilerParameters **)(a2 + 8));
          ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v96, (ZinIrCompilerParameters *)v89, a2 + 16, 256);
          ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v89);
          if (v97 < 0) {
            operator delete(v96[0]);
          }
          kdebug_trace();
          uint64_t v17 = ZinMirBatchLegalizerForHWConstraints((ZinIrControlFlowGraph *)a1);
          if (v17)
          {
            ZinIrNetworkStatus::SetError(a3, @"BatchOptimizationFailure");
          }
          else
          {
            uint64_t v70 = *(ZinIrCompilerParameters **)(a2 + 8);
            if (*((unsigned char *)v70 + 492)
              || *((unsigned char *)v70 + 364)
              || (char AggressiveTensorCaching = ZinIrCompilerParameters::getAggressiveTensorCaching(v70),
                  uint64_t v80 = (ZinMirCacheTensors *)ZinMirCacheTensors::ZinMirCacheTensors(v96, (uint64_t)a1, a2),
                  uint64_t v17 = ZinMirCacheTensors::Execute(v80, AggressiveTensorCaching, (ZinIrNetworkStatus *)a3),
                  !v17))
            {
              uint64_t v17 = MirOpt::ChainingCanonicalizer(a1, a2);
              if (v17)
              {
                BOOL v71 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v71) {
                  ZinMirPrepareIr(v71, v72, v73, v74, v75, v76, v77, v78);
                }
              }
            }
            else
            {
              BOOL v81 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v81) {
                ZinMirPrepareIr(v81, v82, v83, v84, v85, v86, v87, v88);
              }
            }
          }
        }
      }
      goto LABEL_23;
    }
    ZinIrNetworkStatus::SetError(a3, @"MirPrepareLayersFailure");
    BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v38) {
      ZinMirPrepareIr(v38, v39, v40, v41, v42, v43, v44, v45);
    }
  }
LABEL_23:
  if (v95 < 0) {
    operator delete(v94);
  }
  return v17;
}

void sub_21132C098(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirPrepareLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = (ZinIrOpt *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v5;
  v314[4] = *MEMORY[0x263EF8340];
  char v308 = 0;
  uint64_t v11 = ZinIrOpt::ReverseCSE(v5, v8, &v308, 4);
  if (v11)
  {
    ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
    BOOL v12 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v12) {
      ZinMirPrepareLayers(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else
  {
    v314[0] = &unk_26C380F58;
    v314[1] = ZinCreateComposites;
    v314[3] = v314;
    uint64_t v11 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v314, 0);
    std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v314);
    if (v11)
    {
      BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v20) {
        ZinMirPrepareLayers(v20, v21, v22, v23, v24, v25, v26, v27);
      }
    }
    else
    {
      uint64_t v28 = *(const ZinIrCompilerParameters **)(v9 + 8);
      std::string::basic_string[abi:ne180100]<0>(&__p, "after_composite_creation");
      ZinIrCompilerParameters::ZinIrCompilerParameters(v307, v28);
      ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v307, v9 + 16, 256);
      ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v307);
      if (v279 < 0) {
        operator delete(__p);
      }
      uint64_t v11 = ZinIrOpt::CollapseQuantDequant(v10, v9);
      if (!v11)
      {
        if (ZinIrCompilerParameters::getSingleChannelEWOpCopyRemoval(v28)
          && (uint64_t v11 = ZinMirRemoveSingleChannelEwOpCopy::Transform(v10, v29), v11))
        {
          BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v30) {
            ZinMirPrepareLayers(v30, v31, v32, v33, v34, v35, v36, v37);
          }
        }
        else
        {
          v305[0] = v9;
          BOOL v38 = (char *)operator new(0x90uLL);
          *((void *)v38 + 1) = 0;
          *((void *)v38 + 2) = 0;
          *(void *)BOOL v38 = &unk_26C3891C0;
          *(_OWORD *)(v38 + 56) = 0u;
          *(_OWORD *)(v38 + 72) = 0u;
          *(_OWORD *)(v38 + 88) = 0u;
          *((void *)v38 + 17) = 0;
          *(_OWORD *)(v38 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
          *(_OWORD *)(v38 + 104) = 0u;
          *(_OWORD *)(v38 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
          *(_OWORD *)(v38 + 24) = 0u;
          *((_DWORD *)v38 + 14) = 1065353216;
          *((_OWORD *)v38 + 4) = 0u;
          *((_OWORD *)v38 + 5) = 0u;
          *((_DWORD *)v38 + 24) = 1065353216;
          *((_DWORD *)v38 + 34) = 1065353216;
          v305[1] = v38 + 24;
          uint64_t v306 = (std::__shared_weak_count *)v38;
          std::string::basic_string[abi:ne180100]<0>(&__p, "before_lower");
          ZinIrCompilerParameters::ZinIrCompilerParameters(v304, v28);
          ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v304, v9 + 16, 256);
          ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v304);
          if (v279 < 0) {
            operator delete(__p);
          }
          kdebug_trace();
          v313[0] = &unk_26C32D2E0;
          v313[1] = v305;
          v313[3] = v313;
          uint64_t v11 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v313, 1);
          std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v313);
          if (!v11)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "after_lower");
            ZinIrCompilerParameters::ZinIrCompilerParameters(v303, v28);
            ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v303, v9 + 16, 256);
            ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v303);
            if (v279 < 0) {
              operator delete(__p);
            }
            kdebug_trace();
            kdebug_trace();
            char v308 = 0;
            uint64_t v11 = ZinIrOpt::ReverseCSE(v10, v9, &v308, 3);
            if (v11)
            {
              ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
              BOOL v40 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v40) {
                ZinMirPrepareLayers(v40, v41, v42, v43, v44, v45, v46, v47);
              }
            }
            else
            {
              v312[0] = &unk_26C380F58;
              v312[1] = ZinIrOptOptimizeQuantizedConcat;
              v312[3] = v312;
              uint64_t v11 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v312, 1);
              std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v312);
              if (v11)
              {
                ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                BOOL v48 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                if (v48) {
                  ZinMirPrepareLayers(v48, v49, v50, v51, v52, v53, v54, v55);
                }
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "before_hoisting");
                ZinIrCompilerParameters::ZinIrCompilerParameters(v302, v28);
                ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v302, v9 + 16, 256);
                ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v302);
                if (v279 < 0) {
                  operator delete(__p);
                }
                v301[0] = v10;
                v301[1] = v9;
                ZinMirLayerHoisting::Execute((ZinMirLayerHoisting *)v301, v56, v57, v58, v59);
                uint64_t v11 = v60;
                if (v60)
                {
                  BOOL v61 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  if (v61) {
                    ZinMirPrepareLayers(v61, v62, v63, v64, v65, v66, v67, v68);
                  }
                }
                else
                {
                  uint64_t v11 = ZinIrOpt::CollapseQuantDequant(v10, v9);
                  if (!v11)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "after_hoisting");
                    ZinIrCompilerParameters::ZinIrCompilerParameters(v300, v28);
                    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v300, v9 + 16, 256);
                    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v300);
                    if (v279 < 0) {
                      operator delete(__p);
                    }
                    uint64_t v11 = ZinIrOpt::ScaledEWOrEWWithConstInToGOCFusion(v10, v9);
                    if (v11)
                    {
                      BOOL v70 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      if (v70) {
                        ZinMirPrepareLayers(v70, v71, v72, v73, v74, v75, v76, v77);
                      }
                    }
                    else
                    {
                      uint64_t v11 = ZinIrOpt::CollapseTranspose(v10, v28, v69);
                      if (v11)
                      {
                        BOOL v78 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        if (v78) {
                          ZinMirPrepareLayers(v78, v79, v80, v81, v82, v83, v84, v85);
                        }
                      }
                      else
                      {
                        std::string::basic_string[abi:ne180100]<0>(&__p, "after_1st_transpose_collapse");
                        ZinIrCompilerParameters::ZinIrCompilerParameters(v299, v28);
                        ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v299, v9 + 16, 256);
                        ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v299);
                        if (v279 < 0) {
                          operator delete(__p);
                        }
                        ZinMirPadOptimization::ZinMirPadOptimization((uint64_t)v298, (uint64_t)v10, v9);
                        uint64_t v11 = ZinMirPadOptimization::Execute((ZinMirPadOptimization *)v298);
                        if (v11)
                        {
                          ZinIrNetworkStatus::SetError(v7, @"PaddingOptimizationFailure");
                          BOOL v86 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          if (v86) {
                            ZinMirPrepareLayers(v86, v87, v88, v89, v90, v91, v92, v93);
                          }
                        }
                        else
                        {
                          uint64_t v11 = ZinIrOpt::InputViewOpt(v10, v9);
                          if (!v11)
                          {
                            uint64_t v11 = MirOpt::MergeDeconvConv(v10, *(ZinIrControlFlowGraph **)v9, v94);
                            if (v11)
                            {
                              ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                              BOOL v96 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              if (v96) {
                                ZinMirPrepareLayers(v96, v97, v98, v99, v100, v101, v102, v103);
                              }
                            }
                            else
                            {
                              uint64_t v11 = MirOpt::PreFusionCSE(v10, *(ZinIrControlFlowGraph **)v9, (const ZinIrHalParameters *)&v308, v95);
                              if (v11)
                              {
                                ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                BOOL v104 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                if (v104) {
                                  ZinMirPrepareLayers(v104, v105, v106, v107, v108, v109, v110, v111);
                                }
                              }
                              else
                              {
                                uint64_t v11 = ZinIrOpt::ReverseCSE(v10, v9, &v308, 1);
                                if (v11)
                                {
                                  ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                  BOOL v112 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                  if (v112) {
                                    ZinMirPrepareLayers(v112, v113, v114, v115, v116, v117, v118, v119);
                                  }
                                }
                                else
                                {
                                  kdebug_trace();
                                  kdebug_trace();
                                  std::string::basic_string[abi:ne180100]<0>(&__p, "before_fusion");
                                  ZinIrCompilerParameters::ZinIrCompilerParameters(v297, v28);
                                  ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v297, v9 + 16, 256);
                                  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v297);
                                  if (v279 < 0) {
                                    operator delete(__p);
                                  }
                                  if ((*((unsigned char *)v28 + 99) & 8) != 0) {
                                    ZinQuantizationLog::Start(v120);
                                  }
                                  ZinMirLayerFusion::ZinMirLayerFusion(v296, v10, v9, 0);
                                  uint64_t v11 = ZinMirLayerFusion::Run((ZinMirLayerFusion *)v296);
                                  ZinQuantizationLog::End((ZinQuantizationLog *)v11);
                                  std::string::basic_string[abi:ne180100]<0>(&__p, "after_fusion");
                                  ZinIrCompilerParameters::ZinIrCompilerParameters(v295, v28);
                                  ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v295, v9 + 16, 256);
                                  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v295);
                                  if (v279 < 0) {
                                    operator delete(__p);
                                  }
                                  if (v11)
                                  {
                                    ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                    BOOL v121 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    if (v121) {
                                      ZinMirPrepareLayers(v121, v122, v123, v124, v125, v126, v127, v128);
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v11 = ZinMirGOCEngineReassignment::Execute((uint64_t)&v294, v10, (uint64_t)v305);
                                    if (v11)
                                    {
                                      ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                      BOOL v129 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                      if (v129) {
                                        ZinMirPrepareLayers(v129, v130, v131, v132, v133, v134, v135, v136);
                                      }
                                    }
                                    else
                                    {
                                      std::string::basic_string[abi:ne180100]<0>(&__p, "after_converting_post_pixel_shuffle_goc");
                                      ZinIrCompilerParameters::ZinIrCompilerParameters(v293, v28);
                                      ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v293, v9 + 16, 256);
                                      ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v293);
                                      if (v279 < 0) {
                                        operator delete(__p);
                                      }
                                      uint64_t v11 = MirOpt::Remove8BitToF16Copy(v10, v9);
                                      if (v11)
                                      {
                                        ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                        BOOL v138 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                        if (v138) {
                                          ZinMirPrepareLayers(v138, v139, v140, v141, v142, v143, v144, v145);
                                        }
                                      }
                                      else
                                      {
                                        if (!*((unsigned char *)v28 + 492)) {
                                          ZinMirOptFullyConnectedLayer(v10, v9);
                                        }
                                        char v292 = 0;
                                        uint64_t v11 = MirOpt::CSE(v10, *(ZinIrControlFlowGraph **)v9, (const ZinIrHalParameters *)&v292, v137);
                                        std::string::basic_string[abi:ne180100]<0>(&__p, "after_1st_cse");
                                        ZinIrCompilerParameters::ZinIrCompilerParameters(v291, v28);
                                        ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v291, v9 + 16, 256);
                                        ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v291);
                                        if (v279 < 0) {
                                          operator delete(__p);
                                        }
                                        if (v11)
                                        {
                                          ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                          BOOL v147 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                          if (v147) {
                                            ZinMirPrepareLayers(v147, v148, v149, v150, v151, v152, v153, v154);
                                          }
                                        }
                                        else if (MirOpt::InsertTransposePEReduction(v10, v146))
                                        {
                                          BOOL v155 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                          if (v155) {
                                            ZinMirPrepareLayers(v155, v156, v157, v158, v159, v160, v161, v162);
                                          }
                                          uint64_t v11 = 3;
                                        }
                                        else
                                        {
                                          v311[0] = &unk_26C380F58;
                                          v311[1] = ZinMirPrepareFrontEndConcats;
                                          v311[3] = v311;
                                          uint64_t v11 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v311, 1);
                                          std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v311);
                                          if (v11)
                                          {
                                            ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                            BOOL v163 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                            if (v163) {
                                              ZinMirPrepareLayers(v163, v164, v165, v166, v167, v168, v169, v170);
                                            }
                                          }
                                          else
                                          {
                                            uint64_t v11 = ZinMirOptReshapeTensorToEnableSSM(v10, (void *)v9);
                                            if (v11)
                                            {
                                              BOOL v171 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                              if (v171) {
                                                ZinMirPrepareLayers(v171, v172, v173, v174, v175, v176, v177, v178);
                                              }
                                            }
                                            else
                                            {
                                              uint64_t v11 = MirOpt::CollapseSymmetricReshape(v10);
                                              if (v11)
                                              {
                                                BOOL v179 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                if (v179) {
                                                  ZinMirPrepareLayers(v179, v180, v181, v182, v183, v184, v185, v186);
                                                }
                                              }
                                              else
                                              {
                                                uint64_t v11 = MirOpt::TransposeReshapeOptimization(v10, v9, 0);
                                                if (v11)
                                                {
                                                  BOOL v187 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                  if (v187) {
                                                    ZinMirPrepareLayers(v187, v188, v189, v190, v191, v192, v193, v194);
                                                  }
                                                }
                                                else
                                                {
                                                  std::string::basic_string[abi:ne180100]<0>(&__p, "after_transpose_reshape_opt");
                                                  ZinIrCompilerParameters::ZinIrCompilerParameters(v290, v28);
                                                  ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v290, v9 + 16, 256);
                                                  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v290);
                                                  if (v279 < 0) {
                                                    operator delete(__p);
                                                  }
                                                  uint64_t v11 = MirOpt::DilatedConvOpt(v10, v9);
                                                  if (v11)
                                                  {
                                                    ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                                    BOOL v195 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                    if (v195) {
                                                      ZinMirPrepareLayers(v195, v196, v197, v198, v199, v200, v201, v202);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    uint64_t v11 = MirOpt::DynamicConvLowering(v10, v9);
                                                    if (v11)
                                                    {
                                                      ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                                      BOOL v203 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                      if (v203) {
                                                        ZinMirPrepareLayers(v203, v204, v205, v206, v207, v208, v209, v210);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v310[0] = &unk_26C32D338;
                                                      v310[1] = v305;
                                                      v310[3] = v310;
                                                      uint64_t v11 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v310, 1);
                                                      std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v310);
                                                      if (v11)
                                                      {
                                                        ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                                        BOOL v211 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                        if (v211) {
                                                          ZinMirPrepareLayers(v211, v212, v213, v214, v215, v216, v217, v218);
                                                        }
                                                      }
                                                      else
                                                      {
                                                        std::string::basic_string[abi:ne180100]<0>(&__p, "after_engine_lowering");
                                                        ZinIrCompilerParameters::ZinIrCompilerParameters(v289, v28);
                                                        ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v289, v9 + 16, 256);
                                                        ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v289);
                                                        if (v279 < 0) {
                                                          operator delete(__p);
                                                        }
                                                        uint64_t v11 = ZinMirValidateWrapAxis(v10);
                                                        if (v11)
                                                        {
                                                          ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                                          BOOL v219 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                          if (v219) {
                                                            ZinMirPrepareLayers(v219, v220, v221, v222, v223, v224, v225, v226);
                                                          }
                                                        }
                                                        else
                                                        {
                                                          ZinMirLayerFusion::ZinMirLayerFusion(v288, v10, v9, 1);
                                                          uint64_t v11 = ZinMirLayerFusion::Run((ZinMirLayerFusion *)v288);
                                                          std::string::basic_string[abi:ne180100]<0>(&__p, "after_fusion2");
                                                          ZinIrCompilerParameters::ZinIrCompilerParameters(v287, v28);
                                                          ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v287, v9 + 16, 256);
                                                          ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v287);
                                                          if (v279 < 0) {
                                                            operator delete(__p);
                                                          }
                                                          if (v11)
                                                          {
                                                            ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                                            BOOL v228 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                            if (v228) {
                                                              ZinMirPrepareLayers(v228, v229, v230, v231, v232, v233, v234, v235);
                                                            }
                                                          }
                                                          else if (MirOpt::DeadCodeEliminator(v10, v28, v227))
                                                          {
                                                            BOOL v236 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                            if (v236) {
                                                              ZinMirPrepareLayers(v236, v237, v238, v239, v240, v241, v242, v243);
                                                            }
                                                            uint64_t v11 = 3;
                                                          }
                                                          else
                                                          {
                                                            std::string::basic_string[abi:ne180100]<0>(&__p, "before_post_fusion_hoist");
                                                            ZinIrCompilerParameters::ZinIrCompilerParameters(v286, v28);
                                                            ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v286, v9 + 16, 256);
                                                            ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v286);
                                                            if (v279 < 0) {
                                                              operator delete(__p);
                                                            }
                                                            uint64_t v11 = MirOpt::PostFusionTransposeHoisting(v10, v9, 0);
                                                            if (v11)
                                                            {
                                                              ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                                              BOOL v244 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                              if (v244) {
                                                                ZinMirPrepareLayers(v244, v245, v246, v247, v248, v249, v250, v251);
                                                              }
                                                            }
                                                            else
                                                            {
                                                              std::string::basic_string[abi:ne180100]<0>(&__p, "after_post_fusion_hoist");
                                                              ZinIrCompilerParameters::ZinIrCompilerParameters(v285, v28);
                                                              ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v285, v9 + 16, 256);
                                                              ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v285);
                                                              if (v279 < 0) {
                                                                operator delete(__p);
                                                              }
                                                              uint64_t v11 = ZinIrOpt::CollapseTranspose(v10, v28, v252);
                                                              if (v11)
                                                              {
                                                                BOOL v253 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                                if (v253) {
                                                                  ZinMirPrepareLayers(v253, v254, v255, v256, v257, v258, v259, v260);
                                                                }
                                                              }
                                                              else
                                                              {
                                                                std::string::basic_string[abi:ne180100]<0>(&__p, "after_2nd_transpose_collapse");
                                                                ZinIrCompilerParameters::ZinIrCompilerParameters(v284, v28);
                                                                ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v284, v9 + 16, 256);
                                                                ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v284);
                                                                if (v279 < 0) {
                                                                  operator delete(__p);
                                                                }
                                                                v309[0] = &unk_26C32D390;
                                                                v309[1] = v305;
                                                                v309[3] = v309;
                                                                uint64_t v11 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v309, 1);
                                                                std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v309);
                                                                if (!v11)
                                                                {
                                                                  char v308 = 0;
                                                                  uint64_t v11 = MirOpt::CSE(v10, *(ZinIrControlFlowGraph **)v9, (const ZinIrHalParameters *)&v308, v261);
                                                                  if (v11)
                                                                  {
                                                                    ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                                                    BOOL v262 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                                    if (v262) {
                                                                      ZinMirPrepareLayers(v262, v263, v264, v265, v266, v267, v268, v269);
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    std::string::basic_string[abi:ne180100]<0>(&__p, "after_2nd_cse");
                                                                    ZinIrCompilerParameters::ZinIrCompilerParameters(v283, v28);
                                                                    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v283, v9 + 16, 256);
                                                                    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v283);
                                                                    if (v279 < 0) {
                                                                      operator delete(__p);
                                                                    }
                                                                    if (!*(unsigned char *)(*(void *)v9 + 1113)
                                                                      || (uint64_t v11 = ZinMirPETransposeFusion::Execute((uint64_t)&__p, v10, (uint64_t)v305), !v11))
                                                                    {
                                                                      std::string::basic_string[abi:ne180100]<0>(&__p, "before_collapse_symmetric_transposes");
                                                                      ZinIrCompilerParameters::ZinIrCompilerParameters(v282, v28);
                                                                      ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v282, v9 + 16, 256);
                                                                      ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v282);
                                                                      if (v279 < 0) {
                                                                        operator delete(__p);
                                                                      }
                                                                      uint64_t v11 = MirOpt::CollapseSymmetricTranspose(v10, (ZinIrControlFlowGraph **)v9, 0);
                                                                      if (!v11)
                                                                      {
                                                                        std::string::basic_string[abi:ne180100]<0>(&__p, "after_collapse_symmetric_transposes");
                                                                        ZinIrCompilerParameters::ZinIrCompilerParameters(v281, v28);
                                                                        ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v281, v9 + 16, 256);
                                                                        ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v281);
                                                                        if (v279 < 0) {
                                                                          operator delete(__p);
                                                                        }
                                                                        ZinMirLayerSplitterBase::ZinMirLayerSplitterBase((uint64_t)v280, (uint64_t)v10, v9, 2);
                                                                      }
                                                                      ZinIrNetworkStatus::SetError(v7, @"MirPrepareLayersFailure");
                                                                      BOOL v270 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                                                      if (v270) {
                                                                        ZinMirPrepareLayers(v270, v271, v272, v273, v274, v275, v276, v277);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          ZinMirLayerFusion::~ZinMirLayerFusion((ZinMirLayerFusion *)v288);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  ZinMirLayerFusion::~ZinMirLayerFusion((ZinMirLayerFusion *)v296);
                                }
                              }
                            }
                          }
                        }
                        ZinMirPadOptimization::~ZinMirPadOptimization((ZinMirPadOptimization *)v298);
                      }
                    }
                  }
                }
              }
            }
          }
          if (v306) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v306);
          }
        }
      }
    }
  }
  return v11;
}

void sub_21132DA50(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  ZinMirLayerSplitterBase::~ZinMirLayerSplitterBase((ZinMirLayerSplitterBase *)&STACK[0x1068]);
  ZinMirLayerFusion::~ZinMirLayerFusion((ZinMirLayerFusion *)&STACK[0x2608]);
  ZinMirLayerFusion::~ZinMirLayerFusion((ZinMirLayerFusion *)&STACK[0x35E0]);
  ZinMirPadOptimization::~ZinMirPadOptimization((ZinMirPadOptimization *)&STACK[0x3988]);
  if (STACK[0x4910]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4910]);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *a1)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C32D440;
  v3[3] = v3;
  uint64_t v1 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v3, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_21132DF90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchLegalizerForHWConstraints(ZinIrControlFlowGraph *a1)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C380F58;
  v5[1] = ZinMirPrepareForBatchesWithNoHWSupport;
  void v5[3] = v5;
  uint64_t v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v5, 0);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v5);
  if (!v2)
  {
    v4[0] = &unk_26C380F58;
    v4[1] = ZinMirBatchLegalizerForHWConstraintsTransform;
    double v4[3] = v4;
    uint64_t v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v4, 0);
    std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v4);
  }
  return v2;
}

void sub_21132E09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void SplitBatchChunksByMaxNumGroups(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = a1;
  LODWORD(v3) = vcvtps_u32_f32((float)a1 / (float)*(unint64_t *)(a2 + 384));
  std::vector<unsigned long>::reserve((void **)a3, v3);
  if (v3)
  {
    int v7 = 0;
    uint64_t v8 = (void *)(a3 + 16);
    unint64_t v9 = *(void *)(a2 + 384);
    uint64_t v10 = *(unint64_t **)(a3 + 8);
    do
    {
      if (v9 >= v6) {
        unint64_t v11 = v6;
      }
      else {
        unint64_t v11 = v9;
      }
      if ((unint64_t)v10 >= *v8)
      {
        uint64_t v13 = *(unint64_t **)a3;
        uint64_t v14 = ((uint64_t)v10 - *(void *)a3) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = *v8 - (void)v13;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v17);
          uint64_t v13 = *(unint64_t **)a3;
          uint64_t v10 = *(unint64_t **)(a3 + 8);
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[8 * v14];
        *(void *)uint64_t v19 = v11;
        BOOL v12 = (unint64_t *)(v19 + 8);
        while (v10 != v13)
        {
          uint64_t v20 = *--v10;
          *((void *)v19 - 1) = v20;
          v19 -= 8;
        }
        *(void *)a3 = v19;
        *(void *)(a3 + 8) = v12;
        *(void *)(a3 + 16) = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v10 = v11;
        BOOL v12 = v10 + 1;
      }
      *(void *)(a3 + 8) = v12;
      unint64_t v9 = *(void *)(a2 + 384);
      v6 -= v9;
      ++v7;
      uint64_t v10 = v12;
    }
    while (v7 != v3);
  }
}

double ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()@<D0>(ZinIrOpLayerGraph *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, BOOL *a4@<X8>)
{
  BOOL v22 = 0;
  memset(&v21, 0, sizeof(v21));
  uint64_t v5 = *(void *)(a2 + 96);
  unint64_t v6 = *(const std::string ***)(v5 + 112);
  int v7 = *(const std::string ***)(v5 + 120);
  if (v6 == v7)
  {
    *a4 = 0;
    unint64_t v17 = (std::string *)(a4 + 8);
LABEL_22:
    double result = *(double *)&v21.__r_.__value_.__l.__data_;
    *unint64_t v17 = v21;
    return result;
  }
  uint64_t v10 = &_os_log_internal;
  do
  {
    while (1)
    {
      unint64_t v11 = *v6;
      if (*(_DWORD *)((*v6)[2].__r_.__value_.__r.__words[2] + 8) != 7) {
        goto LABEL_10;
      }
      std::string::operator=(&v21, v11 + 1);
      int v12 = *(_DWORD *)(v11[2].__r_.__value_.__r.__words[2] + 12);
      if ((v12 & 0xFFFFFFFE) == 2) {
        break;
      }
      if ((v12 & 0xFFFFFFFB) == 1) {
        goto LABEL_10;
      }
LABEL_13:
      if (ZinMirBatchLegalizer(a1, a3, &v22) && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()(&v19, v20);
      }
      BOOL v15 = v22;
      if (!v22 && ++v6 != v7) {
        continue;
      }
      goto LABEL_18;
    }
    uint64_t v13 = (char *)v11[4].__r_.__value_.__r.__words[2];
    std::string::pointer data = v11[5].__r_.__value_.__l.__data_;
    if (v13 != data)
    {
      while (*(_DWORD *)(*(void *)(*(void *)v13 + 64) + 8) != 7)
      {
        v13 += 8;
        if (v13 == data) {
          goto LABEL_10;
        }
      }
    }
    if (v13 != data) {
      goto LABEL_13;
    }
LABEL_10:
    ++v6;
  }
  while (v6 != v7);
  BOOL v15 = 0;
LABEL_18:
  int v16 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
  *a4 = v15;
  unint64_t v17 = (std::string *)(a4 + 8);
  if ((v16 & 0x80000000) == 0) {
    goto LABEL_22;
  }
  std::string::__init_copy_ctor_external(v17, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_21132E390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPrepareFoldWeightsWithScale(ZinIrOpLayerGraph *a1, ZinIrOpLayer *a2)
{
  if (!*(_DWORD *)(*((void *)a2 + 2) + 300)) {
    return 0;
  }
  if (*(_DWORD *)(*((void *)a2 + 8) + 8) != 85) {
    return 0;
  }
  uint64_t v3 = *((void *)a2 + 54);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)a2 + 48);
  if (!v4) {
    return v4;
  }
  uint64_t v5 = *(ZinIrKernel **)(v3 + 136);
  if (!*((void *)v5 + 73)
    || (ZinIrKernel::IsMutable(v5) & 1) != 0
    || (ZinIrKernel::IsMutable(*(ZinIrKernel **)(v4 + 136)) & 1) != 0
    || !*(unsigned char *)(*(void *)(v4 + 136) + 185)
    || ZinIrKernel::GetWeightFormat(*(ZinIrKernel **)(v3 + 136)) != 6
    || ZinIrKernel::GetScaleFormat(*(ZinIrKernel **)(v4 + 136)) != 6)
  {
    return 0;
  }
  ZinIrKernel::FoldWeightsWithScale(*(void **)(*((void *)a2 + 54) + 136), *(ZinIrKernel **)(*((void *)a2 + 48) + 136), (uint64_t)&v13);
  uint64_t v4 = v13;
  if (!v13)
  {
    unint64_t v6 = (ZinIrKernel **)(*((void *)a2 + 54) + 136);
    int v7 = v14;
    uint64_t v14 = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v6, v7);
    uint64_t v8 = (ZinIrKernel **)(*((void *)a2 + 48) + 136);
    unint64_t v9 = v15;
    BOOL v15 = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v8, v9);
  }
  uint64_t v10 = v15;
  BOOL v15 = 0;
  if (v10)
  {
    ZinIrKernel::~ZinIrKernel(v10);
    MEMORY[0x21667D3C0]();
  }
  unint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    ZinIrKernel::~ZinIrKernel(v11);
    MEMORY[0x21667D3C0]();
  }
  return v4;
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26C32D2E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32D2E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (*(uint64_t (**)(void, void, void))(*(void *)*a3 + 160))(*a3, *a2, *(void *)(a1 + 8));
  if (v3 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
  }
  return v3;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26C32D338;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32D338;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)*a3 + 168))(*a3, *a2, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26C32D390;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32D390;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  unsigned int v3 = *(_DWORD *)(*(void *)(*a3 + 64) + 8);
  BOOL v4 = v3 > 0x25;
  uint64_t v5 = (1 << v3) & 0x2800000280;
  if (v4 || v5 == 0) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void, void, void))(*(void *)*a3 + 168))(*a3, *a2, *(void *)(a1 + 8));
  if (v7 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
  }
  return v7;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_26C32D440;
  return result;
}

void std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C32D440;
}

uint64_t std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  if ((*(_DWORD *)(*(void *)(*a3 + 64) + 8) & 0xFFFFFFFC) != 0x1C) {
    return 0;
  }
  unsigned int v3 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*a3 + 32))(*a3, 0, 0);
  uint64_t v4 = *((void *)ZinIrTensor::GetRootTensor(v3) + 13);
  if (v4 && *(_DWORD *)(v4 + 96) == 2) {
    return 0;
  }
  else {
    return 3;
  }
}

uint64_t std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinMirBatchLegalizerForHWConstraintsTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Can't satisfy the Cebu TRM (4.1.8) hw constaint\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Batch splitting can't split the layer\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Batch splitting to sub-batches is not correct\n", a5, a6, a7, a8, 0);
}

void ZinMirPrepareForBatchesWithNoHWSupport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinMirPrepareForBatchesTransform()
{
  OUTLINED_FUNCTION_3_0(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Error: Concat broadcast failed on layer \"%s\".\n", v1, v2, v3, v4, v5);
}

void ZinMirBatchLegalizer()
{
  OUTLINED_FUNCTION_3_0(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Error: Graph manipulation error during ZinMirBatchLegalizer of layer \"%s\".", v1, v2, v3, v4, v5);
}

void ZinMirPrepareIr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Builder: Tensor Caching failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Kernel Size Splitting failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: SplitConvAndHoistActivation!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Could not split channel.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Could not split batch.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: LiveIn and LiveOut are not allocated to DRAM", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "[MirOpt] Error: Fold height to batch Matrix multiplication.\n", a5, a6, a7, a8, 0);
}

void ZinMirPrepareLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: ZinMirPrepareFoldWeightsWithScale", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Spatial Splitting failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Mir Opt failed\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Mir Opt MergeNEArgMinMax failed\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Tensor Dimension Legalization failure.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Collapse Symmetric Transpose failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MirOpt: CSE failed", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Transpose collapse failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Post-Fusion transpose hoisting failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Could not finish DCE before transpose collapse.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Layer fusion failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Could not validate wrap axis.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Could not finish engine lowering.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Dynamic conv lowering failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: DilatedConv->Conv failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Transpose reshape optimization failed!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Failed to collapse symmetric reshape!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Failed to reshape the NEConv's tensor for enabling SSM!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Failed to add copy layers for inputs to concats!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Could not finish transpose insertion for PE reduce.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Could not apply CSE.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: remove default GOC failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed converting post-PixelShuffle GOC.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Pre-fusion Reverse CSE failed!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MirOpt: PreFusionCSE failed", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Merging Deconv-Conv failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Pad layer optimization failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: ScaledEW to GOC after Layer Hoisting failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Layer Hoisting failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: OptimizeQuantizedConcat failed!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Pre-hoisting Reverse CSE failed!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Removal of Single Channel Elementwise Copy failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Composite Creation failed!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "MIR Prepare Layers: Pre-lowering Reverse CSE failed!", a5, a6, a7, a8, 0);
}

void ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()(uint8_t *buf, unsigned char *a2)
{
  *long long buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Split oplayer per batch went wrong", buf, 2u);
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  OUTLINED_FUNCTION_3_0(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Error: Lowering of layer %s failed.", v1, v2, v3, v4, v5);
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  OUTLINED_FUNCTION_3_0(*MEMORY[0x263EF8340]);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Error: Lowering of transpose/reshape/concat/copy layer %s failed.", v1, v2, v3, v4, v5);
}

void ZinMirAneKernel::ZinMirAneKernel(ZinMirAneKernel *this)
{
  *(_WORD *)this = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  operator new();
}

void sub_21132F85C(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v2, 0x1020C4012B38EE3);
  std::unique_ptr<ZinMirAneKernelCoeff>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinMirAneKernel::ZinMirAneKernel(uint64_t a1, long long *a2, uint64_t *a3)
{
  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = *a3;
  *a3 = 0;
  std::unique_ptr<ZinMirAneKernelCoeff>::reset[abi:ne180100]((uint64_t *)(a1 + 40), v6);
  return a1;
}

BOOL ZinMirAneKernel::HasAlignedKDMAData(ZinMirAneKernel *this)
{
  return *((void *)this + 1) || *((void *)this + 2) || *((void *)this + 3) || *((void *)this + 4) != 0;
}

void ZinMirAneKernelCoeff::ZinMirBuildNEKernelData(ZinMirAneKernelCoeff *this, int a2, int a3, int a4, int a5, int a6, char a7)
{
  int v13 = *((_DWORD *)this + 1);
  *((unsigned char *)this + 1) = a7;
  unint64_t v77 = a3;
  ZinMirNECoreAssignment::ZinMirNECoreAssignment((ZinMirNECoreAssignment *)v92, a3, a2);
  std::map<unsigned long,std::vector<unsigned long>>::map[abi:ne180100](v90, (uint64_t)v93);
  *(void *)&long long v87 = 0;
  uint64_t v14 = std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v90, (unint64_t *)&v87);
  uint64_t v15 = ((a2 + a3 - 1) / a3);
  uint64_t v79 = (void *)v14[1];
  if ((void *)*v14 != v79)
  {
    int v80 = 0;
    int v82 = 0;
    int v16 = v13 * v15;
    int v78 = (a4 - v16 * a6) & ~((a4 - v16 * a6) >> 31);
    unint64_t v17 = (void *)*v14;
    uint64_t v81 = ((a2 + a3 - 1) / a3);
    do
    {
      uint64_t v83 = v17;
      uint64_t v84 = *((void *)this + 4);
      unint64_t v85 = *v17;
      int v86 = a5;
      int v18 = a5;
      if (a6 >= 1)
      {
        int v19 = 0;
        uint64_t v20 = v84 + 56 * v85;
        uint64_t v23 = *(char **)(v20 + 24);
        std::string v21 = (void **)(v20 + 24);
        BOOL v22 = v23;
        uint64_t v24 = v21 - 1;
        uint64_t v25 = v21 + 1;
        int v18 = v86;
        do
        {
          int v26 = *((_DWORD *)this + 1);
          *(void *)&long long v27 = -1;
          *((void *)&v27 + 1) = -1;
          long long v87 = v27;
          long long v88 = v27;
          uint64_t v89 = -1;
          if ((unint64_t)v22 >= *v25)
          {
            uint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((v22 - (unsigned char *)*v24) >> 3);
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) > 0x492492492492492) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v25 - (void)*v24) >> 3) > v31) {
              unint64_t v31 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v25 - (void)*v24) >> 3);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v25 - (void)*v24) >> 3)) >= 0x249249249249249) {
              unint64_t v32 = 0x492492492492492;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32) {
              uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)(v21 + 1), v32);
            }
            else {
              uint64_t v33 = 0;
            }
            uint64_t v34 = &v33[56 * v30];
            *(_DWORD *)uint64_t v34 = v18;
            *((_DWORD *)v34 + 1) = v26;
            *(void *)&long long v35 = -1;
            *((void *)&v35 + 1) = -1;
            *(_OWORD *)(v34 + 8) = v35;
            *(_OWORD *)(v34 + 24) = v35;
            *((void *)v34 + 5) = -1;
            *((void *)v34 + 6) = 0;
            uint64_t v36 = (char *)*v21;
            uint64_t v37 = (char *)*v24;
            BOOL v38 = v34;
            if (*v21 != *v24)
            {
              do
              {
                long long v39 = *(_OWORD *)(v36 - 56);
                long long v40 = *(_OWORD *)(v36 - 40);
                long long v41 = *(_OWORD *)(v36 - 24);
                *((void *)v38 - 1) = *((void *)v36 - 1);
                *(_OWORD *)(v38 - 24) = v41;
                *(_OWORD *)(v38 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v40;
                *(_OWORD *)(v38 - 56) = v39;
                v38 -= 56;
                v36 -= 56;
              }
              while (v36 != v37);
              uint64_t v36 = (char *)*v24;
            }
            *uint64_t v24 = v38;
            BOOL v22 = v34 + 56;
            *std::string v21 = v34 + 56;
            *uint64_t v25 = &v33[56 * v32];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *(_DWORD *)BOOL v22 = v18;
            *((_DWORD *)v22 + 1) = v26;
            long long v28 = v87;
            uint64_t v29 = v89;
            *(_OWORD *)(v22 + 24) = v88;
            *(_OWORD *)(v22 + 8) = v28;
            *((void *)v22 + 5) = v29;
            *((void *)v22 + 6) = 0;
            v22 += 56;
          }
          *std::string v21 = v22;
          v18 += v16;
          ++v19;
        }
        while (v19 != a6);
      }
      if (*((unsigned char *)this + 1))
      {
        int v42 = *((_DWORD *)this + 1);
        if (v78 <= v82) {
          goto LABEL_36;
        }
        if (v78 - v82 >= v42) {
          int v43 = *((_DWORD *)this + 1);
        }
        else {
          int v43 = v78 - v82;
        }
        int v44 = v43 + v82;
      }
      else
      {
        if (v85 / v77 >= (v78 % (int)v81)) {
          int v43 = v78 / (int)v81;
        }
        else {
          int v43 = v78 / (int)v81 + 1;
        }
        int v44 = v82;
      }
      int v82 = v44;
      if (v43)
      {
        int v45 = v18 - v80;
        uint64_t v46 = v84 + 56 * v85;
        unint64_t v49 = *(void *)(v46 + 32);
        BOOL v48 = (void *)(v46 + 32);
        unint64_t v47 = v49;
        uint64_t v51 = (void **)(v48 - 1);
        unint64_t v50 = *(v48 - 1);
        if (v50 >= v49)
        {
          uint64_t v54 = (void **)(v48 - 2);
          uint64_t v55 = *(v48 - 2);
          uint64_t v56 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v50 - v55) >> 3);
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) > 0x492492492492492) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v58 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v47 - v55) >> 3);
          if (2 * v58 > v57) {
            unint64_t v57 = 2 * v58;
          }
          if (v58 >= 0x249249249249249) {
            unint64_t v59 = 0x492492492492492;
          }
          else {
            unint64_t v59 = v57;
          }
          uint64_t v15 = v81;
          if (v59) {
            uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)v48, v59);
          }
          else {
            uint64_t v60 = 0;
          }
          BOOL v61 = &v60[56 * v56];
          *(_DWORD *)BOOL v61 = v45;
          *((_DWORD *)v61 + 1) = v43;
          *(void *)&long long v62 = -1;
          *((void *)&v62 + 1) = -1;
          *(_OWORD *)(v61 + 8) = v62;
          *(_OWORD *)(v61 + 24) = v62;
          *((void *)v61 + 5) = -1;
          *((void *)v61 + 6) = 0;
          uint64_t v63 = (char *)*v51;
          uint64_t v64 = (char *)*v54;
          uint64_t v65 = v61;
          if (*v51 != *v54)
          {
            do
            {
              long long v66 = *(_OWORD *)(v63 - 56);
              long long v67 = *(_OWORD *)(v63 - 40);
              long long v68 = *(_OWORD *)(v63 - 24);
              *((void *)v65 - 1) = *((void *)v63 - 1);
              *(_OWORD *)(v65 - 24) = v68;
              *(_OWORD *)(v65 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v67;
              *(_OWORD *)(v65 - 56) = v66;
              v65 -= 56;
              v63 -= 56;
            }
            while (v63 != v64);
            uint64_t v63 = (char *)*v54;
          }
          ZinIrKernel *v54 = v65;
          uint64_t v53 = v61 + 56;
          unsigned int *v51 = v61 + 56;
          void *v48 = &v60[56 * v59];
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v50 = v45;
          *(_DWORD *)(v50 + 4) = v43;
          *(void *)&long long v52 = -1;
          *((void *)&v52 + 1) = -1;
          *(_OWORD *)(v50 + 8) = v52;
          *(_OWORD *)(v50 + 24) = v52;
          uint64_t v53 = (void *)(v50 + 56);
          *(void *)(v50 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = -1;
          *(void *)(v50 + 48) = 0;
          uint64_t v15 = v81;
        }
        unsigned int *v51 = v53;
        int v42 = *((_DWORD *)this + 1);
        int v80 = v80 - v43 + v42;
        goto LABEL_52;
      }
      int v42 = *((_DWORD *)this + 1);
LABEL_36:
      uint64_t v15 = v81;
LABEL_52:
      a5 = v42 + v86;
      unint64_t v17 = v83 + 1;
    }
    while (v83 + 1 != v79);
  }
  unint64_t v69 = v91;
  if (v91)
  {
    unint64_t v70 = 0;
    do
    {
      if ((int)v15 >= 1)
      {
        for (unint64_t i = 0; i != v15; ++i)
        {
          *(void *)&long long v87 = 0;
          uint64_t v72 = std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v90, (unint64_t *)&v87);
          if (i >= (uint64_t)(v72[1] - *v72) >> 3) {
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v73 = *(void *)(*v72 + 8 * i);
          *(void *)&long long v87 = v70;
          uint64_t v74 = std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v90, (unint64_t *)&v87);
          if (i >= (uint64_t)(v74[1] - *v74) >> 3) {
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v75 = *(void *)(*v74 + 8 * i);
          uint64_t v76 = *((void *)this + 4);
          *(_OWORD *)(v76 + 56 * v75) = *(_OWORD *)(v76 + 56 * v73);
          if (v75 != v73) {
            std::vector<ZinOcgKernelData>::__assign_with_size[abi:ne180100]<ZinOcgKernelData*,ZinOcgKernelData*>((char *)(v76 + 56 * v75 + 16), *(char **)(v76 + 56 * v73 + 16), *(void *)(v76 + 56 * v73 + 24), 0x6DB6DB6DB6DB6DB7* ((uint64_t)(*(void *)(v76 + 56 * v73 + 24) - *(void *)(v76 + 56 * v73 + 16)) >> 3));
          }
          *(_OWORD *)(v76 + 56 * v75 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(v76 + 56 * v73 + 40);
        }
        unint64_t v69 = v91;
      }
      ++v70;
    }
    while (v69 > v70);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v90, (void *)v90[1]);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v93, v93[1]);
}

void sub_21132FF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a26, a27);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(a10, *(void **)(v27 - 104));
  _Unwind_Resume(a1);
}

void ZinMirAneKernelCoeff::ZinMirAneKernelCoeff(ZinMirAneKernelCoeff *this, int a2, int a3, int a4, int a5, int a6, int a7, char a8)
{
  *(_WORD *)this = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  int v13 = (char *)this + 32;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)this + 1) = a6;
  *((void *)this + 3) = a5;
  if (a7)
  {
    std::vector<ZinNeKernelData>::resize((uint64_t *)this + 4, 1uLL);
    unint64_t v14 = ZinDivRoundUp(a2, a6);
    std::vector<ZinOcgKernelData>::reserve((void **)(*(void *)v13 + 16), v14);
    if (a3 >= 1)
    {
      int v15 = 0;
      do
      {
        ZinMirAneKernelCoeff::ZinMirBuildNEKernelDataSharedKmem(this, a2, v15, a6);
        v15 += a2;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    std::vector<ZinNeKernelData>::resize((uint64_t *)this + 4, a4);
    uint64_t v19 = *((void *)this + 4);
    uint64_t v18 = *((void *)this + 5);
    for (int i = a2 / ((a4 + a5 - 1) / a5 * a6); v19 != v18; v19 += 56)
      std::vector<ZinOcgKernelData>::reserve((void **)(v19 + 16), a3 + a3 * i);
    if (a3 >= 1)
    {
      int v21 = 0;
      do
      {
        ZinMirAneKernelCoeff::ZinMirBuildNEKernelData(this, a4, a5, a2, v21, i, a8);
        v21 += a2;
        --a3;
      }
      while (a3);
    }
  }
}

void sub_2113300D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  a10 = a9;
  std::vector<ZinNeKernelData>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<ZinNeKernelData>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<ZinNeKernelData>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      uint64_t v8 = *(void **)(v3 - 40);
      if (v8)
      {
        *(void *)(v3 - 32) = v8;
        operator delete(v8);
      }
      v3 -= 56;
    }
    a1[1] = v7;
  }
}

__n128 ZinMirAneKernelCoeff::ZinMirAneKernelCoeff(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 *a7)
{
  *(unsigned char *)a1 = a2;
  *(unsigned char *)(a1 + 1) = 0;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = a6;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  __n128 result = *a7;
  *(__n128 *)(a1 + 32) = *a7;
  *(void *)(a1 + 48) = a7[1].n128_u64[0];
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a7[1].n128_u64[0] = 0;
  return result;
}

char *std::vector<ZinOcgKernelData>::__assign_with_size[abi:ne180100]<ZinOcgKernelData*,ZinOcgKernelData*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v11;
    }
    __n128 result = std::vector<ZinNeKernelData>::__vallocate[abi:ne180100](v7, v12);
    unint64_t v14 = (char *)v7[1];
    int v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v13 = (void **)(result + 8);
  int v15 = (unsigned char *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v13 = &v9[v17];
  return result;
}

uint64_t std::vector<ZinNeKernelData>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 56 * a2;
      uint64_t v14 = 56 * a2;
      do
      {
        *(void *)(v7 + 48) = 0;
        *(void *)uint64_t v7 = -1;
        *(void *)(v7 + 8) = -1;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        v7 += 56;
        v14 -= 56;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    v18[4] = result;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>(result, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int v15 = &v12[56 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[56 * v11];
    uint64_t v16 = 56 * a2;
    size_t v17 = &v15[56 * a2];
    do
    {
      *((void *)v15 + 6) = 0;
      *(void *)int v15 = -1;
      *((void *)v15 + 1) = -1;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      v15 += 56;
      v16 -= 56;
    }
    while (v16);
    void v18[2] = v17;
    std::vector<ZinNeKernelData>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_2113304AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFDictionary *ZinCreateQuantUnit(const ZinIrQuantUnitInfo *a1)
{
  Unit = ZinCreateUnit(a1);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v5 = Mutable;
  if (*((int *)a1 + 22) < 1)
  {
    CFNumberRef v6 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 128);
    CFDictionaryAddValue(v5, @"QuantScale", v6);
    CFRelease(v6);
  }
  else
  {
    ZinAddWeightInfoToParamsDict(Mutable, 0, @"ScaleCount", @"ScaleIndex", @"ScaleOffset", (unsigned char *)a1 + 80);
  }
  int v7 = *((_DWORD *)a1 + 28);
  if (v7 > 0 || *((_DWORD *)a1 + 33) != 0)
  {
    if (v7 < 1)
    {
      CFNumberRef v9 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 132);
      CFDictionaryAddValue(v5, @"QuantZeroPoint", v9);
      CFRelease(v9);
    }
    else
    {
      ZinAddWeightInfoToParamsDict(v5, 0, @"ZeroPointCount", @"ZeroPointIndex", @"ZeroPointOffset", (unsigned char *)a1 + 104);
    }
  }
  ZinSetFormat(@"QuantScaleType", (_DWORD *)a1 + 34, v5);
  CFDictionaryAddValue(Unit, @"Params", v5);
  CFRelease(v5);
  return Unit;
}

void *ZinIrGatherUnit::ZinIrGatherUnit(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = ZinIrUnit::ZinIrUnit(a1, a3);
  *uint64_t v5 = &unk_26C348670;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v5 + 7), (const ZinIrTextureUnitInfo *)a2);
  a1[27] = 0;
  a1[7] = &unk_26C34CC48;
  a1[28] = 0;
  a1[29] = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(a1 + 27, *(const void **)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 2);
  return a1;
}

void sub_2113306D4(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrGatherUnit::GetOutputDimensions(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  CFNumberRef v9 = *(_DWORD **)a4;
  uint64_t v8 = *(_DWORD **)(a4 + 8);
  unint64_t v10 = *(void *)(a1 + 2 * ((void)v8 - *(void *)a4) + 1640);
  unint64_t v11 = 0;
  if (v8 != *(_DWORD **)a4)
  {
    do
    {
      switch(*v9)
      {
        case 0:
          v11 |= 1uLL;
          *a5 = *a3;
          break;
        case 1:
          v11 |= 2uLL;
          a5[4] = a3[4];
          break;
        case 2:
          v11 |= 4uLL;
          a5[1] = a3[1] / v10;
          break;
        case 3:
          v11 |= 8uLL;
          a5[2] = a3[2];
          break;
        case 4:
          v11 |= 0x10uLL;
          a5[3] = a3[3];
          break;
        default:
          break;
      }
      ++v9;
    }
    while (v9 != v8);
  }
  uint64_t v12 = 0;
  uint64_t v19 = a3 + 3;
  uint64_t v20 = a2 + 3;
  uint64_t v18 = a5 + 3;
  uint64_t v23 = a3 + 2;
  uint64_t v24 = a2 + 2;
  int v21 = a2 + 1;
  BOOL v22 = a5 + 2;
  do
  {
    if (((v11 >> v12) & 1) == 0)
    {
      switch(v12)
      {
        case 0:
          LODWORD(v26) = 0;
          uint64_t v13 = (int *)&v26;
          uint64_t v14 = a2;
          int v15 = a3;
          uint64_t v16 = a5;
          goto LABEL_16;
        case 1:
          LODWORD(v26) = 1;
          uint64_t v13 = (int *)&v26;
          uint64_t v14 = a2 + 4;
          int v15 = a3 + 4;
          uint64_t v16 = a5 + 4;
          goto LABEL_16;
        case 2:
          unint64_t v26 = a3[1] / v10;
          int v25 = 2;
          int v15 = (uint64_t *)&v26;
          uint64_t v13 = &v25;
          uint64_t v14 = v21;
          uint64_t v16 = a5 + 1;
          goto LABEL_16;
        case 3:
          LODWORD(v26) = 3;
          uint64_t v13 = (int *)&v26;
          int v15 = v23;
          uint64_t v14 = v24;
          uint64_t v16 = v22;
LABEL_16:
          ComputeOutDim(v14, v15, v16, v13);
          break;
        case 4:
          LODWORD(v26) = 4;
          ComputeOutDim(v20, v19, v18, &v26);
          return 1;
        default:
          break;
      }
    }
    ++v12;
  }
  while (v12 != 5);
  return 1;
}

uint64_t *ComputeOutDim(uint64_t *result, uint64_t *a2, void *a3, _DWORD *a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = *a2;
  if (*result > *a2 && v5 != 1)
  {
    ZinGetZinIrDimensionString(a4, v10);
    if (v11 >= 0) {
      uint64_t v8 = (const char *)v10;
    }
    else {
      uint64_t v8 = (const char *)v10[0];
    }
    ZinAssertImpl("Index tensor dimension %s should be equal to 1", v8);
  }
  if (v4 != 1 && v4 < v5)
  {
    ZinGetZinIrDimensionString(a4, v10);
    if (v11 >= 0) {
      CFNumberRef v9 = (const char *)v10;
    }
    else {
      CFNumberRef v9 = (const char *)v10[0];
    }
    ZinAssertImpl("Data tensor dimension %s should be equal to 1", v9);
  }
  if (v4 <= v5) {
    uint64_t v4 = *a2;
  }
  *a3 = v4;
  return result;
}

void sub_2113309E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrGatherUnit::TensorDimensions(ZinIrGatherUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  return 0;
}

void ZinIrGatherUnit::CreateOpcode(ZinIrGatherUnit *this)
{
}

void sub_211330AAC(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40B25E14ADLL);
  _Unwind_Resume(a1);
}

void ZinIrGatherUnit::CreateLayer(ZinIrGatherUnit *a1)
{
}

void sub_211330BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrElementWiseInfo::ZinIrElementWiseInfo(uint64_t a1, int a2)
{
  uint64_t result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 5);
  *(void *)uint64_t result = &unk_26C34D960;
  *(_DWORD *)(result + 12) = a2;
  return result;
}

void ZinIrElementWiseInfo::Clone(ZinIrElementWiseInfo *this)
{
}

void sub_211330D44(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  uint64_t result = IsEWTypeUnary(*(_DWORD *)(*((void *)a1 + 8) + 12));
  uint64_t v6 = a2[1] - *a2;
  if (result)
  {
    if (v6 != 120) {
      ZinAssertImpl("Unary Elementwise must have 1 input.");
    }
  }
  else
  {
    if (0xEEEEEEEEEEEEEEEFLL * (v6 >> 3) <= 1) {
      ZinAssertImpl("Binary Elementwise must have at least 2 inputs.");
    }
    return ZinElementWiseLayerUtils::CheckAllDimensionsBroadcastable((uint64_t **)a2);
  }
  return result;
}

void *ZinElementWiseLayer::ZinElementWiseLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4, ZinIrKernel **a5)
{
  uint64_t v6 = *a2;
  *a2 = 0;
  int v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v10 = *a3;
  char v11 = v7;
  uint64_t v12 = v6;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v12, &v10, a4, a5);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *a1 = &unk_26C34C860;
  return a1;
}

void sub_211330EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ZinLayerNormLayer::ZinLayerNormLayer((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ZinElementWiseLayer::LowerEwAbsH11H12(ZinElementWiseLayer *this, ZinIrOpLayerGraph *a2)
{
  v7[39] = *(void **)MEMORY[0x263EF8340];
  if (*((void *)this + 12) - *((void *)this + 11) == 8)
  {
    __n128 v3 = ZinObjectNameFactory::ZinObjectNameFactory(v7, (char *)this + 24);
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void, __n128))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0, v3);
    uint64_t v6 = (*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0);
    ZinBuilder::CreateConstScaleAndBiasGOC(v4, (uint64_t)v7, v5, *(unsigned int *)(v6 + 88), 0, 0, 1);
  }
  ZinAssertImpl("Elementwise Abs must have 1 input", a2);
}

void sub_2113313FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  a14 = &unk_26C34DA98;
  if (a20 < 0) {
    operator delete(__p);
  }
  a22 = &unk_26C34DA98;
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void ZinElementWiseLayer::LowerEWCompare(ZinElementWiseLayer *this, ZinIrOpLayerGraph *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  memset(v12, 0, sizeof(v12));
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v12, *((const void **)this + 11), *((void *)this + 12), (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 3);
  uint64_t v3 = (*(uint64_t (**)(ZinElementWiseLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  ZinIrActivationParams::ZinIrActivationParams((uint64_t)v10, 0);
  unsigned int v4 = *(_DWORD *)(*((void *)this + 8) + 12);
  switch(v4)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v14 = 0;
      uint64_t v8 = ZinIrEWTypeToCFString(v4);
      ZinGetString(v8, (uint64_t)__p);
      if ((SBYTE7(v14) & 0x80u) == 0) {
        CFNumberRef v9 = __p;
      }
      else {
        CFNumberRef v9 = (void **)__p[0];
      }
      ZinAssertImpl("Unsupported elementwise compare op %s", (const char *)v9);
    case 0xAu:
    case 0x10u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 25);
      goto LABEL_8;
    case 0xBu:
    case 0x11u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 26);
      goto LABEL_8;
    case 0xCu:
    case 0x12u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 27);
      goto LABEL_8;
    case 0xDu:
    case 0x13u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 28);
      goto LABEL_8;
    case 0xEu:
    case 0x14u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 29);
      goto LABEL_8;
    case 0xFu:
    case 0x15u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 30);
LABEL_8:
      v10[8] = v21;
      v10[9] = v22;
      uint64_t v11 = v23;
      v10[4] = v17;
      v10[5] = v18;
      v10[6] = v19;
      v10[7] = v20;
      v10[0] = *(_OWORD *)__p;
      v10[1] = v14;
      void v10[2] = v15;
      v10[3] = v16;
      break;
    default:
      break;
  }
  if (*(char *)(v3 + 47) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v3 + 47);
  }
  else {
    size_t v5 = *(void *)(v3 + 32);
  }
  uint64_t v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 15);
  if (SBYTE7(v14) < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  if (v5)
  {
    if (*(char *)(v3 + 47) >= 0) {
      int v7 = (const void *)(v3 + 24);
    }
    else {
      int v7 = *(const void **)(v3 + 24);
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_comparison_lut");
  ZinIrTensor::CreateTensor();
}

void sub_211331DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,void *__p,uint64_t a58)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  if (a27) {
    (*(void (**)(uint64_t))(*(void *)a27 + 8))(a27);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (a52) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void ZinElementWiseLayer::LowerEWPower(ZinElementWiseLayer *this, ZinIrOpLayerGraph *a2, ZinElementWiseLayer *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)a3 + 24;
  uint64_t v4 = (*(uint64_t (**)(ZinElementWiseLayer *, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  ZinObjectNameFactory::ZinObjectNameFactory(&v10, v3);
  uint64_t v5 = *(void *)(v4 + 16);
  long long v6 = *(_OWORD *)(v4 + 64);
  long long v7 = *(_OWORD *)(v4 + 48);
  long long v8 = v6;
  uint64_t v9 = *(void *)(v4 + 80);
  ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 20);
  ZinBuilder::CreateActivation(v5, (uint64_t)&v10);
}

void sub_211332554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  a33 = &unk_26C34DA98;
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::LowerEWDivide(ZinElementWiseLayer *this, ZinIrOpLayerGraph *a2, ZinElementWiseLayer *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a3 + 2);
  (*(void (**)(ZinElementWiseLayer *, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  __n128 v5 = ZinObjectNameFactory::ZinObjectNameFactory(v38, (char *)a3 + 24);
  uint64_t v6 = *(void *)(*((void *)a3 + 11) + 8);
  int v7 = *(_DWORD *)(*(void *)(v6 + 64) + 8);
  if (*(unsigned char *)(v4 + 1056)) {
    _ZF = 0;
  }
  else {
    _ZF = v7 == 29;
  }
  if (!_ZF)
  {
    if (v7 == 18)
    {
      (*(void (**)(void, void, void, __n128))(***(void ***)(v6 + 88) + 32))(**(void **)(v6 + 88), 0, 0, v5);
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)&v40, 18);
      ZinBuilder::CreateActivation(v4, (uint64_t)v38);
    }
    ZinIrActivationParams::ZinIrActivationParams((uint64_t)&v40, 18);
    ZinBuilder::CreateActivation(v4, (uint64_t)v38);
  }
  uint64_t v10 = *(void *)(v6 + 112);
  uint64_t v9 = *(void *)(v6 + 120);
  uint64_t v11 = (*(uint64_t (**)(void, void, void, __n128))(*(void *)v6 + 32))(*(void *)(*((void *)a3 + 11) + 8), 0, 0, v5);
  if (v9 - v10 == 8)
  {
    Elementint Count = ZinTensorDimensions::GetElementCount((ZinTensorDimensions *)(v11 + 48));
    long long v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    if (ElementCount)
    {
      for (uint64_t i = 0; i != ElementCount; ++i)
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v6 + 32))(v6, 0, 0);
        uint64_t v15 = *(void *)(v14 + 112);
        long long v16 = *(std::__shared_weak_count **)(v14 + 120);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        ZinIrConstData::GetDataAt<float>(v15);
        float v18 = v17;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (v18 == 0.0) {
          ZinAssertImpl("Cannot divide by zero");
        }
        _S0 = 1.0 / v18;
        __asm { FCVT            H8, S0 }
        uint64_t v24 = v36;
        if (v36 >= v37)
        {
          unint64_t v26 = (char *)v35;
          uint64_t v27 = v36 - (unsigned char *)v35;
          if (v36 - (unsigned char *)v35 <= -3) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v27 >> 1;
          if (v37 - (unsigned char *)v35 <= (unint64_t)((v27 >> 1) + 1)) {
            uint64_t v29 = v28 + 1;
          }
          else {
            uint64_t v29 = v37 - (unsigned char *)v35;
          }
          if ((unint64_t)(v37 - (unsigned char *)v35) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v30 = v29;
          }
          if (v30)
          {
            unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v37, v30);
            unint64_t v26 = (char *)v35;
            uint64_t v24 = v36;
          }
          else
          {
            unint64_t v31 = 0;
          }
          unint64_t v32 = &v31[2 * v28];
          *(_WORD *)unint64_t v32 = _H8;
          int v25 = v32 + 2;
          while (v24 != v26)
          {
            __int16 v33 = *((_WORD *)v24 - 1);
            v24 -= 2;
            *((_WORD *)v32 - 1) = v33;
            v32 -= 2;
          }
          long long v35 = v32;
          uint64_t v36 = v25;
          uint64_t v37 = &v31[2 * v30];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(_WORD *)uint64_t v36 = _H8;
          int v25 = v24 + 2;
        }
        uint64_t v36 = v25;
      }
    }
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&v35, &v41);
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    ZinBuilder::CreateConstLayer();
  }
  v38[0] = &unk_26C34DA98;
  if (v39 < 0) {
    operator delete((void *)v38[1]);
  }
  return 3;
}

void sub_211332DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v49 = *(std::__shared_weak_count **)(v47 - 128);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

void ZinElementWiseLayer::LowerEWSquare(ZinElementWiseLayer *this, ZinIrOpLayerGraph *a2, ZinElementWiseLayer *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*((void *)a3 + 8) + 12) == 3)
  {
    if (*((char *)this + 47) >= 0) {
      size_t v4 = *((unsigned __int8 *)this + 47);
    }
    else {
      size_t v4 = *((void *)this + 4);
    }
    __n128 v5 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
    if (SBYTE7(v24) < 0) {
      __n128 v5 = (void **)__p[0];
    }
    if (v4)
    {
      if (*((char *)this + 47) >= 0) {
        uint64_t v6 = (char *)this + 24;
      }
      else {
        uint64_t v6 = (char *)*((void *)this + 3);
      }
      memmove(v5, v6, v4);
    }
    strcpy((char *)v5 + v4, "_to_mul");
    __n128 v7 = ZinObjectNameFactory::ZinObjectNameFactory(&v22, __p);
    if (SBYTE7(v24) < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(void **__return_ptr, __n128))(***((void ***)this + 11) + 80))(__p, v7);
    (*(void (**)(void *__return_ptr))(***((void ***)this + 11) + 80))((void *)v30 + 1);
    long long v8 = operator new(0xF0uLL);
    long long v9 = v30[4];
    long long v10 = v31[0];
    v8[12] = v30[5];
    v8[13] = v10;
    *(_OWORD *)((char *)v8 + 22std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)((char *)v31 + 12);
    long long v11 = v30[0];
    long long v12 = v30[2];
    long long v13 = v30[3];
    v8[8] = v30[1];
    v8[9] = v12;
    v8[10] = v13;
    v8[11] = v9;
    long long v14 = v26;
    long long v15 = v28;
    long long v16 = v29;
    v8[4] = v27;
    v8[5] = v15;
    v8[6] = v16;
    v8[7] = v11;
    long long v17 = v24;
    long long v18 = v25;
    *long long v8 = *(_OWORD *)__p;
    v8[1] = v17;
    long long v20 = v8 + 15;
    long long v21 = v8 + 15;
    _OWORD v8[2] = v18;
    v8[3] = v14;
    long long v19 = v8;
    (*(void (**)(ZinElementWiseLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
    (*(void (**)(ZinElementWiseLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
    ZinBuilder::CreateElementWiseLayer();
  }
  ZinAssertImpl("Expected EwSquare!!", a2);
}

void sub_21133331C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29)
{
  a18 = &unk_26C34DA98;
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::Lower(char **a1, ZinIrOpLayerGraph *a2, const ZinTensorDimensions ***a3)
{
  if (*((_DWORD *)a1[8] + 3) == 6)
  {
    if (ZinElementWiseLayer::LowerEWDivide((ZinElementWiseLayer *)a1, a2, (ZinElementWiseLayer *)a1)) {
      ZinAssertImpl("ANECompiler internal failure: Elementwise Div error");
    }
  }
  else
  {
    __n128 v7 = a1[11];
    uint64_t v6 = a1[12];
    int64_t v8 = v6 - v7;
    if ((unint64_t)(v6 - v7) >= 9)
    {
      memset(v20, 0, 24);
      if (v7 == v6)
      {
        char v9 = 0;
      }
      else
      {
        char v9 = 0;
        do
        {
          uint64_t v10 = *(void *)v7;
          v7 += 8;
          v9 |= *(_DWORD *)(*(void *)(v10 + 64) + 8) == 29;
        }
        while (v7 != v6);
      }
      ZinIrOpLayer::GetInputTensorDimensions((ZinIrOpLayer *)a1, __p);
      if (v8 != 16 || (v9 & 1) == 0)
      {
        int v14 = 0;
      }
      else
      {
        unsigned int v11 = *((_DWORD *)a1[8] + 3);
        BOOL v12 = v11 > 4;
        unsigned int v13 = (0x16u >> v11) & 1;
        if (v12) {
          int v14 = 0;
        }
        else {
          int v14 = v13;
        }
      }
      ZinElementWiseLayerUtils::DecomposeElementWiseLayer((int64x2_t **)__p, v20, **a3, v14);
      ZinElementWiseLayerUtils::HandleInputDimensionsMismatch((uint64_t **)a2, (ZinIrOpLayerGraph *)a1, v20);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = v20;
      std::vector<ZinElementWiseLayerUtils::ElementWiseDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    if (!*((unsigned char *)**a3 + 1212) && *((_DWORD *)a1[8] + 3) == 9) {
      ZinElementWiseLayer::LowerEwAbsH11H12((ZinElementWiseLayer *)a1, a2);
    }
    BOOL IsEwCompare = ZinElementWiseLayer::IsEwCompare((ZinElementWiseLayer *)a1);
    if (IsEwCompare) {
      ZinElementWiseLayer::LowerEWCompare((ZinElementWiseLayer *)a1, a2);
    }
    int v16 = *((_DWORD *)a1[8] + 3);
    if (v16 == 5) {
      ZinElementWiseLayer::LowerEWPower((ZinElementWiseLayer *)IsEwCompare, a2, (ZinElementWiseLayer *)a1);
    }
    if (v16 == 3 && *((unsigned char *)**a3 + 1213) == 0) {
      ZinElementWiseLayer::LowerEWSquare((ZinElementWiseLayer *)a1, a2, (ZinElementWiseLayer *)a1);
    }
  }
  return 0;
}

void sub_2113335D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  a16 = &a13;
  std::vector<ZinElementWiseLayerUtils::ElementWiseDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

BOOL ZinElementWiseLayer::IsEwCompare(ZinElementWiseLayer *this)
{
  if (IsEWTypeCompareBinary(*(_DWORD *)(*((void *)this + 8) + 12))) {
    return 1;
  }
  int v3 = *(_DWORD *)(*((void *)this + 8) + 12);

  return IsEWTypeCompareUnary(v3);
}

void ZinElementWiseLayer::Clone(uint64_t a1, uint64_t a2, const void **a3)
{
  if (*(void *)(a1 + 136))
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v4 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v4 = (size_t)a3[1];
    }
    __n128 v5 = &v16;
    std::string::basic_string[abi:ne180100]((uint64_t)&v16, v4 + 1);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __n128 v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if (v4)
    {
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v6 = a3;
      }
      else {
        uint64_t v6 = *a3;
      }
      memmove(v5, v6, v4);
    }
    *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v13, "ew_clone_kernel");
    __n128 v7 = std::string::append(&v13, "_xfm", 4uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    int64_t v15 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (v15 >= 0) {
      char v9 = __p;
    }
    else {
      char v9 = (void **)__p[0];
    }
    if (v15 >= 0) {
      std::string::size_type v10 = HIBYTE(v15);
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    unsigned int v11 = std::string::append(&v16, (const std::string::value_type *)v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v11->__r_.__value_.__r.__words[2];
    long long v17 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> const&,std::string>();
  }
  uint64_t v19 = 0;
  operator new();
}

void sub_2113338F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinElementWiseLayer::ComputeOutputDimensions(uint64_t a1, int64_t **a2, int64x2_t *a3)
{
  int64x2_t v3 = vdupq_n_s64(0x8000000000000000);
  *a3 = v3;
  a3[1] = v3;
  a3[2].i64[0] = 0x8000000000000000;
  size_t v4 = *a2;
  __n128 v5 = a2[1];
  if (*a2 != v5)
  {
    int64_t v6 = 0x8000000000000000;
    int64_t v7 = 0x8000000000000000;
    int64_t v8 = 0x8000000000000000;
    int64_t v9 = 0x8000000000000000;
    int64_t v10 = 0x8000000000000000;
    do
    {
      if (v10 <= *v4) {
        int64_t v10 = *v4;
      }
      a3->i64[0] = v10;
      if (v9 <= v4[4]) {
        int64_t v9 = v4[4];
      }
      a3[2].i64[0] = v9;
      if (v8 <= v4[1]) {
        int64_t v8 = v4[1];
      }
      a3->i64[1] = v8;
      if (v7 <= v4[2]) {
        int64_t v7 = v4[2];
      }
      a3[1].i64[0] = v7;
      if (v6 <= v4[3]) {
        int64_t v6 = v4[3];
      }
      a3[1].i64[1] = v6;
      v4 += 5;
    }
    while (v4 != v5);
  }
  return 0;
}

void *ZinElementWiseLayer::OpCodeKindToString@<X0>(ZinElementWiseLayer *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, (&off_26418C7C8)[*(int *)(*((void *)this + 8) + 12)]);
}

uint64_t ZinElementWiseLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_211333BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ZinElementWiseLayer::Hash(ZinElementWiseLayer *this, int *a2)
{
  *a2 = ZinHash((const void *)(*((void *)this + 8) + 12), 4u);
  return 1;
}

uint64_t ZinElementWiseLayer::CanMergeWithFollowingGOC(ZinElementWiseLayer *this, ZinIrKernel **a2)
{
  uint64_t result = ZinIrOpLayer::CanMergeWithFollowingGOC(this, (const ZinGOCLayer *)a2);
  if (result)
  {
    unsigned int v5 = *(_DWORD *)(*((void *)this + 8) + 12);
    if (v5 <= 8 && ((1 << v5) & 0x18C) != 0)
    {
      char v7 = a2[17];
      if (ZinIrKernel::HasPerCoutScale(v7) || ZinIrKernel::HasPerCoutBias(v7)) {
        return 0;
      }
      unsigned int v5 = *(_DWORD *)(*((void *)this + 8) + 12);
    }
    return v5 - 7 > 1 || (ZinIrKernel::HasBias(a2[17]) & 1) == 0;
  }
  return result;
}

uint64_t ZinElementWiseLayer::IsRedundant(ZinElementWiseLayer *this)
{
  int v2 = *(_DWORD *)(*((void *)this + 8) + 12);
  if (v2 != 3)
  {
    if (v2 == 2 || v2 == 1)
    {
      uint64_t v3 = (void *)*((void *)this + 11);
      if (*(_DWORD *)(*(void *)(*v3 + 64) + 8) == 29)
      {
        size_t v4 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*v3 + 32))(*v3, 0, 0);
        int IsZero = ZinIrTensor::IsZero(v4);
        uint64_t v3 = (void *)*((void *)this + 11);
      }
      else
      {
        int IsZero = 0;
      }
      int64_t v6 = (void *)v3[1];
      if (*(_DWORD *)(v6[8] + 8) == 29)
      {
        char v7 = (ZinIrTensor *)(*(uint64_t (**)(void *, void, void))(*v6 + 32))(v6, 0, 0);
        unsigned int v8 = ZinIrTensor::IsZero(v7);
      }
      else
      {
        unsigned int v8 = 0;
      }
      return IsZero | v8;
    }
    return 0;
  }
  int64_t v10 = (void *)**((void **)this + 11);
  if (*(_DWORD *)(v10[8] + 8) != 29) {
    return 0;
  }
  unsigned int v11 = (ZinIrTensor *)(*(uint64_t (**)(void *, void, void))(*v10 + 32))(v10, 0, 0);

  return ZinIrTensor::IsZero(v11);
}

uint64_t ZinParseGatherUnit(const __CFDictionary *a1, ZinIrGatherUnitInfo *a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (!Value || (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    CFStringRef v12 = @"InvalidParamSyntax";
LABEL_12:
    ZinIrUnitStatus::SetError(a3, v12);
    return 3;
  }
  CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(v6, @"GatherNDAxes");
  if (!v8 || (CFArrayRef v9 = v8, v10 = CFGetTypeID(v8), v10 != CFArrayGetTypeID()))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseGatherUnit();
    }
    CFStringRef v12 = @"InvalidParams";
    goto LABEL_12;
  }

  return ZinParseDimsArray(v9, (uint64_t)a2 + 160, a3);
}

void ZinParseGatherUnit()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Axes information must be an array of strings (dimensions)\n", v0, 2u);
}

void ZinIrNEConvUnit::ZinIrNEConvUnit(ZinIrNEConvUnit *this, const ZinIrNEConvUnitInfo *a2)
{
  ZinIrNEUnit::ZinIrNEUnit(this, a2);
  *size_t v4 = &unk_26C348900;
  ZinIrNEUnitInfo::ZinIrNEUnitInfo((ZinIrNEUnitInfo *)(v4 + 55), a2);
  *((void *)this + 55) = &unk_26C34CE88;
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrNEConvUnit *)((char *)this + 808), (const ZinIrNEConvUnitInfo *)((char *)a2 + 368));
  *((void *)this + 101) = &unk_26C34A9B8;
  long long v5 = *((_OWORD *)a2 + 39);
  *(_OWORD *)((char *)this + 1048) = *((_OWORD *)a2 + 38);
  *(_OWORD *)((char *)this + 1064) = v5;
  long long v6 = *((_OWORD *)a2 + 40);
  long long v7 = *((_OWORD *)a2 + 41);
  long long v8 = *((_OWORD *)a2 + 42);
  *(_OWORD *)((char *)this + 1124) = *(_OWORD *)((char *)a2 + 684);
  *(_OWORD *)((char *)this + 1096) = v7;
  *(_OWORD *)((char *)this + 1112) = v8;
  *(_OWORD *)((char *)this + 108std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v6;
}

void sub_211334030(_Unwind_Exception *a1)
{
  *(void *)(v1 + 44std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &unk_26C348A60;
  if (*(unsigned char *)(v1 + 792)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)(v1 + 680));
  }
  ZinIrNEConvUnit::ZinIrNEConvUnit(v1, v2);
  ZinIrNEUnit::~ZinIrNEUnit((ZinIrNEUnit *)v1);
  _Unwind_Resume(a1);
}

void ZinIrNEConvUnit::CreateLayer()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_211334304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  MEMORY[0x21667D3C0](v20, 0x10B3C4001E18234);
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

void ZinIrNEConvUnit::CreateKernel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a5) {
    operator new();
  }
  ZinAssertImpl("NEConv does not support Espresso weight format");
}

void sub_21133451C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNEConvUnit::TensorDimensions(ZinIrNEConvUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (*((void *)this + 2) - v4 == 120)
  {
    long long v7 = *(_OWORD *)(v4 + 8);
    long long v8 = *(_OWORD *)(v4 + 24);
    uint64_t v16 = *(void *)(v4 + 40);
    v15[0] = v7;
    v15[1] = v8;
    GetLogicalInputAndOutputSteps((uint64_t)this + 808, (uint64_t)v13);
    ZinGetOutputTensorDimension((uint64_t)v15, (void *)this + 133, v13, v14, (int *)this + 278, *((void *)this + 64), (int *)this + 272, (uint64_t)v11);
    uint64_t result = 0;
    long long v10 = v11[1];
    *(_OWORD *)a3 = v11[0];
    *((_OWORD *)a3 + 1) = v10;
    *((void *)a3 + 4) = v12;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, @"InvalidBottomCount");
    return 3;
  }
  return result;
}

void ZinIrNEConvUnit::CreateDummyKernel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 808;
  ZinIrKernelCreationUtils::CreateKernelDescriptor(a1 + 808, a1 + 8, (uint64_t)v14);
  std::string::basic_string[abi:ne180100]<0>(&v10, "ne_conv_kernel");
  long long v6 = std::string::append(&v10, "_xfm", 4uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  long long v8 = std::string::append(&v11, "_dummy", 6uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v13 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  ZinIrKernelCreationUtils::CreateDummyKernel(v5, (uint64_t)v14, a2, a3, (uint64_t)__p);
}

void sub_211334738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrNEConvUnit::~ZinIrNEConvUnit(ZinIrNEConvUnit *this)
{
  ZinIrNEConvUnit::~ZinIrNEConvUnit(this);

  JUMPOUT(0x21667D3C0);
}

{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_26C348900;
  int v2 = (void **)((char *)this + 440);
  *((void *)this + 55) = &unk_26C34CE88;
  uint64_t v3 = (void **)((char *)this + 808);
  *((void *)this + 101) = &unk_26C34CC70;
  uint64_t v4 = (void *)*((void *)this + 120);
  if (v4)
  {
    *((void *)this + 121) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 117);
  if (v5)
  {
    *((void *)this + 118) = v5;
    operator delete(v5);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  *((void *)this + 55) = &unk_26C348A60;
  if (*((unsigned char *)this + 792)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 85);
  }
  if (*((unsigned char *)this + 672)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 65);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);

  ZinIrNEUnit::~ZinIrNEUnit(this);
}

void ZinIrNEConvUnit::ZinIrNEConvUnit(uint64_t a1, ZinIrNEConvUnit *this)
{
  if (*(unsigned char *)(a1 + 672)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)(a1 + 520));
  }

  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this);
}

uint64_t DimensionOrderHint::DimensionOrderHint(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = DimensionOrderHint::DimensionOrderHint(a1, a2);
  *(_DWORD *)(result + 24) = a3;
  return result;
}

uint64_t DimensionOrderHint::DimensionOrderHint(uint64_t a1, int a2, int a3)
{
  uint64_t result = DimensionOrderHint::DimensionOrderHint(a1, a2);
  *(_DWORD *)(result + 24) = a3;
  return result;
}

void DimensionOrderHint::TransposeDimensionOrder(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = *a1;
  uint64_t v7 = (uint64_t)a1[1];
  uint64_t v8 = v7 - (void)*a1;
  if ((const void *)v7 == *a1)
  {
    DimensionOrderHint::DimensionOrderHint(a3, (uint64_t)a1);
  }
  else
  {
    uint64_t v23 = a3;
    long long v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v35, v6, v7, v8 >> 2);
    TransposeLayerUtils::DecomposeThreePlusWayTranspose(a2, &v33);
    uint64_t v9 = v33;
    for (uint64_t i = v34; v9 != i; v9 += 24)
    {
      std::string __p = 0;
      unint64_t v31 = 0;
      uint64_t v32 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
      memset(v28, 0, sizeof(v28));
      int v29 = 1065353216;
      std::string v11 = v35;
      uint64_t v12 = v36;
      if (v35 != (_DWORD *)v36)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        do
        {
          v38[0] = 0;
          v38[0] = v11[v14];
          v26[0] = v38;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v28, v38, (uint64_t)&std::piecewise_construct, v26)[3] = v14++;
          ++v13;
        }
        while (&v11[v13] != v12);
      }
      std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)v26, (uint64_t)v28);
      int64_t v15 = (int *)__p;
      uint64_t v16 = v31;
      while (v15 != v16)
      {
        int v17 = *v15;
        int v24 = v15[1];
        int v25 = v17;
        *(void *)BOOL v38 = &v24;
        uint64_t v18 = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v28, &v24, (uint64_t)&std::piecewise_construct, (_DWORD **)v38)[3];
        *(void *)BOOL v38 = &v25;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v26, &v25, (uint64_t)&std::piecewise_construct, (_DWORD **)v38)[3] = v18;
        v15 += 2;
      }
      uint64_t v19 = v27;
      if (v27)
      {
        uint64_t v20 = v35;
        unint64_t v21 = (v36 - (unsigned char *)v35) >> 2;
        do
        {
          unint64_t v22 = v19[3];
          if (v21 <= v22) {
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          }
          v20[v22] = *((_DWORD *)v19 + 4);
          uint64_t v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v26);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28);
      if (__p)
      {
        unint64_t v31 = (int *)__p;
        operator delete(__p);
      }
    }
    DimensionOrderHint::DimensionOrderHint(v23, (uint64_t)&v35);
    *(void *)&v28[0] = &v33;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
    if (v35)
    {
      uint64_t v36 = v35;
      operator delete(v35);
    }
  }
}

void sub_211334BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  a17 = &a26;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  long long v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(void *)(v26 - 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

uint64_t DimensionOrderHint::DebugPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_211334D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DimensionOrderHint::GetCompatibleDimOrders()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Dimension order should be set before quering for compatible orders\n", v0, 2u);
}

void sub_211334E9C(_Unwind_Exception *a1)
{
}

void l2a::alloc_buffer(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  long long v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v40, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  std::string __p = 0;
  BOOL v38 = 0;
  char v39 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v40, (uint64_t)v41, (v41 - (unsigned char *)v40) >> 2);
  uint64_t v4 = __p;
  uint64_t v5 = v38;
  if (__p != v38)
  {
    while (*v4 != 4)
    {
      if (++v4 == v38)
      {
        uint64_t v4 = v38;
        break;
      }
    }
  }
  if (v4 != v38) {
    uint64_t v5 = --v38;
  }
  uint64_t v6 = 0;
  char v7 = (int *)(a1 + 112);
  long long v43 = xmmword_211F06300;
  long long v35 = (int *)(a1 + 104);
  uint64_t v36 = (int *)(a1 + 108);
  uint64_t v8 = (int *)(a1 + 100);
  do
  {
    uint64_t v9 = __p;
    std::string v10 = v5;
    if (__p != v5)
    {
      std::string v10 = __p;
      while (*v10 != *((_DWORD *)&v43 + v6))
      {
        if (++v10 == v5)
        {
          std::string v10 = v5;
          break;
        }
      }
    }
    if (v10 == v5)
    {
      int v11 = *((_DWORD *)&v43 + v6);
      uint64_t v12 = (_DWORD *)(a1 + 96);
      switch(v11)
      {
        case 0:
          uint64_t v12 = (_DWORD *)(a1 + 100);
          goto LABEL_21;
        case 1:
          uint64_t v12 = (_DWORD *)(a1 + 108);
          goto LABEL_21;
        case 2:
          uint64_t v12 = (_DWORD *)(a1 + 104);
          goto LABEL_21;
        case 3:
          uint64_t v12 = (_DWORD *)(a1 + 112);
          goto LABEL_21;
        case 4:
LABEL_21:
          if (*v12 == 1)
          {
            if (v5 >= (_DWORD *)v39)
            {
              uint64_t v14 = ((char *)v5 - (unsigned char *)__p) >> 2;
              unint64_t v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 62) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v16 = v39 - (unsigned char *)__p;
              if ((v39 - (unsigned char *)__p) >> 1 > v15) {
                unint64_t v15 = v16 >> 1;
              }
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v17 = v15;
              }
              if (v17)
              {
                uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v39, v17);
                uint64_t v9 = __p;
                uint64_t v5 = v38;
                int v11 = *((_DWORD *)&v43 + v6);
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v19 = &v18[4 * v14];
              *(_DWORD *)uint64_t v19 = v11;
              uint64_t v13 = v19 + 4;
              while (v5 != v9)
              {
                int v20 = *--v5;
                *((_DWORD *)v19 - 1) = v20;
                v19 -= 4;
              }
              std::string __p = v19;
              BOOL v38 = v13;
              char v39 = &v18[4 * v17];
              if (v9) {
                operator delete(v9);
              }
            }
            else
            {
              *uint64_t v5 = v11;
              uint64_t v13 = v5 + 1;
            }
            BOOL v38 = v13;
            uint64_t v5 = v13;
          }
          break;
        default:
          break;
      }
    }
    ++v6;
  }
  while (v6 != 4);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  char v21 = (*(_DWORD *)(a1 + 28) & 0xFFFFFFFE) == 2;
  int v33 = 1 << v21;
  int v34 = *(_DWORD *)(a1 + 96);
  int v22 = v34 << v21;
  int v24 = v22 + 15;
  BOOL v23 = v22 < -15;
  int v25 = v22 + 30;
  if (!v23) {
    int v25 = v24;
  }
  int v26 = v25 >> 4;
  long long v27 = __p;
  if (v5 != __p)
  {
    do
    {
      int v28 = *--v5;
      switch(v28)
      {
        case 0:
          int v29 = *v8;
          if (*v8 >= 2)
          {
            int pad = l2a::get_pad(a1 + 64);
            *(_DWORD *)(a2 + 4) = pad + v26;
            int v26 = (pad + v26) * v29;
          }
          break;
        case 1:
          int v31 = *v36;
          if (*v36 >= 2)
          {
            *(_DWORD *)(a2 + 12) = v26;
            goto LABEL_52;
          }
          break;
        case 2:
          int v31 = *v35;
          if (*v35 >= 2)
          {
            *(_DWORD *)(a2 + 8) = v26;
LABEL_52:
            v26 *= v31;
          }
          break;
        case 3:
          if (*(unsigned char *)(a1 + 24) || *v7 >= 2)
          {
            int v32 = l2a::get_pad(a1 + 32);
            *(_DWORD *)a2 = v32 + v26;
            int v26 = *v7 * (v32 + v26);
          }
          break;
        default:
          break;
      }
    }
    while (v5 != v27);
  }
  *(_DWORD *)(a2 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v26;
  *(_DWORD *)(a2 + 24) = v33;
  *(_DWORD *)(a2 + 28) = v34;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v8;
  if (v27)
  {
    BOOL v38 = v27;
    operator delete(v27);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
}

void sub_211335274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void l2a::Sizes::~Sizes(l2a::Sizes *this)
{
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 40);
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

_DWORD *l2a::pe_modify_src(_DWORD *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (a4 == 1) {
    result[24] = 1;
  }
  if (a5 == 1) {
    result[25] = 1;
  }
  if (a6 == 1) {
    result[26] = 1;
  }
  if (a7 == 1) {
    result[28] = 1;
  }
  if (a10 == 3)
  {
    uint64_t v10 = 0x100000001;
LABEL_14:
    *((void *)result + 12) = v10;
    goto LABEL_15;
  }
  if (a2 == 4 && a10 == 2)
  {
    uint64_t v10 = 0x200000001;
    goto LABEL_14;
  }
  if (a2 == 8 && a10 == 2)
  {
    *((void *)result + 12) = 0x100000001;
    result[26] = 1;
  }
LABEL_15:
  if (a8 == 1)
  {
    int v11 = result[28];
    result[28] = result[24];
  }
  else
  {
    int v11 = result[24];
  }
  result[24] = a9 % (int)(0x10u >> ((a3 & 0xFFFFFFFE) == 2)) + v11;
  return result;
}

uint64_t l2a::dma_logical_interleave(uint64_t this, int a2)
{
  if (a2 >= 1)
  {
    do
    {
      this = this - (a2 & 1);
      BOOL v2 = a2 > 1;
      a2 = a2 >> 1;
    }
    while (v2);
  }
  return this;
}

void l2a::ne_alloc_nonresident_src(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14, int a15, char a16, _WORD a17, char a18, _WORD a19, char a20,int a21,uint64_t a22,int a23,unsigned int a24,l2a *a25,int a26,int a27,uint64_t a28,uint64_t a29,int a30,int a31)
{
  int v29 = a7;
  uint64_t v31 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
  if ((int)a29 <= 17) {
    int v29 = a7 % a10 + a7;
  }
  unint64_t v32 = a24;
  if (a26 == 1)
  {
    if (a27) {
      int v33 = 16;
    }
    else {
      int v33 = 32;
    }
  }
  else
  {
    if (a25)
    {
      if (a25 == 1)
      {
        int v33 = 32;
      }
      else
      {
        if (a25 == 2)
        {
          int v33 = 16;
          goto LABEL_16;
        }
        int v33 = 16 * (a25 == 3);
      }
    }
    else
    {
      int v33 = 64;
    }
    if (HIDWORD(a25) != 3) {
      v33 /= SHIDWORD(a25);
    }
  }
LABEL_16:
  int v34 = a12;
  long long v35 = (l2a *)((16 * a10 * (int)v31 / (1 << (a20 + a16))) << a18);
  double v36 = (double)v31;
  int v37 = (int)(ceil((double)((int)a24 % (int)v31 + a1) / (double)v31) * (double)v31);
  if ((int)a29 > 17)
  {
    if (!a15)
    {
      if (v33 <= (int)v31) {
        signed int v39 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
      }
      else {
        signed int v39 = v33;
      }
      int v40 = (int)a24 % v39;
      uint64_t v73 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
      if (HIDWORD(a29))
      {
        int v41 = a1;
        int v42 = v33;
        printf("x=%d w=%d px=%d kw=%d sx=%d l2g=%d dmag=%d compressed=%d win=%d\n", v40, v35, a12, v29, a10, v31, v33, a26, a1);
        int v34 = a12;
        int v33 = v42;
        a1 = v41;
        uint64_t v31 = v73;
      }
      int v43 = 0;
      int v44 = 0;
      int v37 = 0;
      int v72 = v29 - (v34 + a10) + v40;
      double v45 = (double)v33;
      int v46 = v40 + a1;
      int v70 = v34 + a10 - v29 - v40;
      int v71 = v40 - v34;
      do
      {
        int v47 = ((v70 + v44) / (int)v35) & ~(((v70 + v44) / (int)v35) >> 31);
        int v48 = v72 + v35 + v47 * v35;
        unint64_t v32 = l2a::dma_push_round((l2a *)(int)(ceil((double)(v48 - v44) / v45) * v45), v31, a26);
        v44 += v32;
        if (v46 >= v44) {
          int v49 = v44;
        }
        else {
          int v49 = v46;
        }
        double v50 = (double)v49;
        int v51 = v47 * v35 + v71;
        int v52 = (int)(ceil(v50 / v36) * v36);
        if (v40 <= v51) {
          int v53 = v47 * v35 + v71;
        }
        else {
          int v53 = v40;
        }
        int v54 = v52 - (int)(floor((double)v53 / v36) * v36);
        if (v37 <= v54) {
          int v37 = v54;
        }
        if (HIDWORD(a29)) {
          unint64_t v32 = printf("%d: n=%d right=%d fetch=%d left=%d nr_width = %d fetched = %d max_nr_width = %d\n", v43, v47, v48, v32, v51, v54, v44, v37);
        }
        if (v48 >= v46) {
          break;
        }
        BOOL v58 = v43++ == 2;
        uint64_t v31 = v73;
      }
      while (!v58);
    }
  }
  else
  {
    if ((int)a29 > 15) {
      unint64_t v32 = l2a::dma_projection_v2((l2a *)a24, (int)v35, a12, v29, a10, v31, v33, a26, SHIDWORD(a29), v62);
    }
    else {
      unint64_t v32 = l2a::dma_projection_v1(v35, a12, v29, v31, v33, a6, v33, a8, v61);
    }
    int v55 = v38 + v37 - (HIDWORD(v32) + v32);
    if (v55 <= (int)v32) {
      int v55 = v32;
    }
    if ((int)v32 <= v38) {
      int v56 = v38;
    }
    else {
      int v56 = v32;
    }
    if (HIDWORD(v32) + (int)v32 < v37) {
      int v57 = v56;
    }
    else {
      int v57 = v55;
    }
    if ((int)v32 >= v37) {
      int v57 = v37;
    }
    BOOL v58 = (int)a29 <= 13 || a15 == 0;
    if (v58) {
      int v59 = v57;
    }
    else {
      int v59 = v37;
    }
    if (HIDWORD(a29)) {
      unint64_t v32 = printf("ne_alloc_nonresident_src() first_fetch=%0d inner_fetch=%0d nr_width=%0d res_width=%0d nr_width=%0d\n", v32, HIDWORD(v32), v38, v37, v59);
    }
    int v37 = v59;
  }
  l2a::GetHGDCW((l2a *)v32);
  int v82 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v82, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_267775B38, (unk_267775B38 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v85[0] = 0;
  v85[8] = 1;
  memset(&v85[12], 0, 24);
  int v86 = 0;
  v87[0] = 1;
  memset(&v87[4], 0, 24);
  *(void *)&long long v60 = 0x100000001;
  *((void *)&v60 + 1) = 0x100000001;
  *(_OWORD *)&v89[4] = v60;
  *(_DWORD *)&v85[4] = a6;
  int v88 = 0;
  *(_DWORD *)uint64_t v89 = v37;
  *(_DWORD *)&v89[4] = l2a::src_slice_height(0, a2, a5, a8, a11, a13, a14, a21, a22, SHIDWORD(a22), a23, 0, a29);
  *(_DWORD *)&v89[8] = a3;
  *(_DWORD *)&unsigned char v89[12] = 1;
  *(_DWORD *)&v89[16] = a4;
  if (&v82 != (void **)a28) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v82, *(char **)a28, *(void *)(a28 + 8), (uint64_t)(*(void *)(a28 + 8) - *(void *)a28) >> 2);
  }
  v85[0] = 1;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  std::string __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v82, (uint64_t)v83, (v83 - (unsigned char *)v82) >> 2);
  long long v77 = *(_OWORD *)v85;
  memset(v78, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v78, *(uint64_t *)&v85[16], *(uint64_t *)&v85[24], (uint64_t)(*(void *)&v85[24] - *(void *)&v85[16]) >> 5);
  v78[3] = *(void *)v87;
  memset(v79, 0, sizeof(v79));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v79, *(uint64_t *)&v87[8], *(uint64_t *)&v87[16], (uint64_t)(*(void *)&v87[16] - *(void *)&v87[8]) >> 5);
  long long v80 = *(_OWORD *)v89;
  int v81 = *(_DWORD *)&v89[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v90[0] = (void **)v79;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v90);
  v90[0] = (void **)v78;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v90);
  if (__p)
  {
    uint64_t v75 = __p;
    operator delete(__p);
  }
  v90[0] = (void **)&v87[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v90);
  v90[0] = (void **)&v85[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v90);
  if (v82)
  {
    uint64_t v83 = v82;
    operator delete(v82);
  }
}

void sub_21133598C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  l2a::Sizes::~Sizes((l2a::Sizes *)&__p);
  l2a::Sizes::~Sizes((l2a::Sizes *)(v32 - 232));
  _Unwind_Resume(a1);
}

unint64_t l2a::dma_projection_v1(l2a *this, int a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  int v9 = (int)(ceil((double)(~a2 + a3 + (int)this) / (double)a5) * (double)a5);
  if (v9)
  {
    unsigned int v10 = a4;
    if (v9 > (int)a4)
    {
      unsigned int v10 = 2 * a4;
      if (2 * (int)a4 < v9) {
        unsigned int v10 = (int)(ceil((double)v9 / (double)(4 * (int)a4)) * (double)(4 * (int)a4));
      }
    }
  }
  else
  {
    unsigned int v10 = 0;
  }
  int v11 = (int)(ceil((double)(int)this / (double)a5) * (double)a5);
  if (v11)
  {
    uint64_t v12 = a4;
    if (v11 > (int)a4)
    {
      uint64_t v12 = (2 * a4);
      if ((int)v12 < v11) {
        uint64_t v12 = (int)(ceil((double)v11 / (double)(4 * (int)a4)) * (double)(4 * (int)a4));
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  return v10 | (unint64_t)(v12 << 32);
}

unint64_t l2a::dma_projection_v2(l2a *this, int a2, int a3, int a4, int a5, uint64_t a6, int a7, int a8, int a9, int a10)
{
  if (a7 <= (int)a6) {
    int v15 = a6;
  }
  else {
    int v15 = a7;
  }
  int v16 = (int)this % v15;
  int v17 = a5 + a3;
  int v18 = (int)this % v15 + a4;
  double v19 = (double)a7;
  int v20 = l2a::dma_push_round((l2a *)(int)(ceil((double)(v18 + a2 - (a5 + a3)) / (double)a7) * (double)a7), a6, a8);
  int v27 = (int)(floor((double)v16 / (double)(int)a6) * (double)(int)a6);
  int v21 = (v17 - v18 + v20) / a2;
  int v22 = (int)(floor((double)(v16 - a3 + v21 * a2) / (double)(int)a6) * (double)(int)a6);
  uint64_t v23 = l2a::dma_push_round((l2a *)(int)(ceil((double)a2 / v19) * v19), a6, a8);
  if (a9)
  {
    printf("dma_projection_v2() x=%0d w=%0d px=%0d kw=%0d sx=%0d l2g=%0d dmag=%0d comp=%0d\n", v16, a2, a3, a4, a5, a6, a7, a8);
    printf("dma_projection_v2() fetch1=%0d fetch2=%0d left1=%0d n=%0d left2=%0d\n", v20, v23, v27, v21, v22);
  }
  return (v20 - v27) | (unint64_t)(v23 << 32);
}

uint64_t l2a::src_slice_height(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13)
{
  if (a1 || a13 > 17)
  {
    if (a4 <= a5) {
      int v17 = a5;
    }
    else {
      int v17 = a4;
    }
  }
  else
  {
    int v17 = a4 % a5 + a4;
  }
  v31[0] = a3;
  v31[1] = a8;
  int v18 = v17 + (a8 - 1) * a5;
  _OWORD v31[2] = a9;
  v31[3] = a10;
  v31[4] = a11;
  v31[5] = a12;
  v31[6] = -a10;
  if (v18 < 1) {
    return 0;
  }
  uint64_t v19 = 0;
  int v20 = v17 - a6;
  do
  {
    if (!l2a::SliceGen::next(v31, v30)) {
      break;
    }
    int v21 = v30[0] * a5 - a6;
    int v22 = v20 + (v30[1] - 1) * a5;
    if (a7)
    {
      int v23 = v22 - a2;
      int v24 = ~(v23 & ~(v23 >> 31)) + a2;
      if (v24 >= v21) {
        int v24 = v30[0] * a5 - a6;
      }
      if (v23 >= 1) {
        int v25 = v24;
      }
      else {
        int v25 = v30[0] * a5 - a6;
      }
      if (v21 < 0)
      {
        int v26 = 1 - v21;
        if (v22 <= v26) {
          int v22 = v26;
        }
      }
    }
    else
    {
      int v25 = v30[0] * a5 - a6;
    }
    int v27 = v25 & ~(v25 >> 31);
    if (v22 >= a2) {
      int v22 = a2;
    }
    int v28 = v22 - v27;
    uint64_t v19 = v28 <= (int)v19 ? v19 : v28;
  }
  while ((int)v19 < v18);
  return v19;
}

uint64_t l2a::ne_alloc_fifo_src@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14, int a15, int a16, char a17, _WORD a18, char a19, _WORD a20,char a21,int a22,int a23,int a24,int a25,l2a *a26,int a27,int a28,int a29,int a30)
{
  int v31 = HIDWORD(a26);
  unsigned int v32 = a27;
  int v33 = a22;
  int v34 = a14;
  int v35 = a12;
  int v36 = a10;
  signed int v37 = 0x10u >> ((a7 & 0xFFFFFFFE) == 2);
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  signed int v38 = (16 * v37) >> (a21 + a17) << a19;
  *(_OWORD *)a9 = 0u;
  unsigned int v57 = a7 & 0xFFFFFFFE;
  if (a16 || v38 >= a5)
  {
    double v43 = ceil((double)((int)a26 % v37 + a1) / (double)v37) * (double)v37;
    int v54 = (int)v43;
    if (a30)
    {
      int v44 = a2;
      printf("ne_alloc_fifo_src() single_tile unretained_width=%0d l2_retain=%0d\n", (int)v43, 0);
      int v35 = a12;
      a2 = v44;
      int v33 = a22;
      int v34 = a14;
      int v36 = a10;
    }
    int v42 = 0;
  }
  else
  {
    int v39 = a2;
    if (a29 <= 17) {
      a8 += a8 % a11;
    }
    int v40 = v38 * a11;
    int v41 = l2a::calc_l2_retain((l2a *)a26, v38 * a11, a13, a8, a11, v37, a1, a5, a15, a30, v53);
    int v42 = v41;
    if (a30) {
      printf("ne_alloc_fifo_src() multi_tile unretained_width=%0d l2_retain=%0d\n", v40, v41);
    }
    int v54 = v40;
    a2 = v39;
    int v34 = a14;
    int v33 = a22;
    int v35 = a12;
    int v36 = a10;
  }
  if (a27 >= 1)
  {
    do
    {
      v31 -= v32 & 1;
      BOOL v45 = v32 > 1;
      v32 >>= 1;
    }
    while (v45);
  }
  uint64_t result = l2a::src_slice_height(0, a2, a6, v36, v35, v34, a15, v33, a23, a24, a25, 0, a29);
  int v47 = result;
  int v48 = 2 * v31;
  int v49 = (int)(ceil((double)(a28 + a4) / (double)v48) * (double)v48);
  *(_DWORD *)(a9 + 16) = v42 / v37;
  if (v49 >= 0) {
    int v50 = v49;
  }
  else {
    int v50 = v49 + 1;
  }
  int v51 = (v54 + v42 * a3 * ((v50 >> 1) / v31)) / v37;
  *(_DWORD *)(a9 + 4) = v51;
  if (v31 > 1) {
    *(_DWORD *)a9 = v51 * result;
  }
  unsigned int v52 = vcvtd_n_s64_f64(ceil((double)(v48 * (int)result * v51) * 0.015625), 6uLL);
  *(_DWORD *)(a9 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v52;
  if (a30) {
    uint64_t result = printf("ne_alloc_fifo_src() tile_width=%0d log_ileave=%0d height=%0d cin_pad=%0d row=%0d size=%0d\n", (16 * v37) >> (a21 + a17) << a19, v31, result, v49, v51, v52);
  }
  *(_DWORD *)(a9 + 24) = 1 << (v57 == 2);
  *(_DWORD *)(a9 + 28) = v54 + v42;
  *(_DWORD *)(a9 + 32) = v47;
  return result;
}

uint64_t l2a::calc_l2_retain(l2a *this, int a2, int a3, int a4, int a5, unsigned int a6, int a7, int a8, int a9, int a10, int a11)
{
  int v17 = (int)this;
  if (a10) {
    printf("x=%d w=%d px=%d kw=%d sx=%d l2g=%d win=%d wout=%d reflectPadding=%d\n", this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  unsigned int v18 = (((v17 + a4 - (a3 + a5) + a6 + 31) & -a6) - ((v17 - a3 + 32) & -a6)) / a6;
  if (a9)
  {
    if (a7 >= 2)
    {
      int v20 = 2 * a7 - 2;
      int v21 = (~a3 + a4 + (a8 - 1) * a5) % v20;
      int v19 = (v20 & (v21 >> 31)) + v21;
      int v22 = v20 - v19;
      if (v19 >= a7) {
        int v19 = v22;
      }
    }
    else
    {
      int v19 = 0;
    }
    unsigned int v23 = (v17 + a7 - 1) / a6 - (v19 + v17) / a6;
    if (v18 <= v23 + 1) {
      unsigned int v18 = v23 + 1;
    }
  }
  return v18 * a6;
}

void l2a::ne_alloc_nonresident_dst(uint64_t a1@<X0>, l2a *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, char a12, _WORD a13, char a14, _WORD a15, char a16, int a17, int a18, unsigned int a19, l2a *a20,int a21,int a22,uint64_t a23,uint64_t a24,int a25,int a26)
{
  int v26 = a4;
  uint64_t v29 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
  int v30 = a7 * a1;
  double v31 = (double)v29;
  if (a18 == 1)
  {
    int v32 = (int)(ceil((double)a4 / v31) * v31);
    int v26 = a7 * a1;
    goto LABEL_21;
  }
  if (a11 && (int)a24 > 13)
  {
    int v32 = (int)(ceil((double)v30 / v31) * v31);
    goto LABEL_21;
  }
  if (a21 == 1)
  {
    if (a22) {
      int v33 = 16;
    }
    else {
      int v33 = 32;
    }
    goto LABEL_20;
  }
  if (!a20)
  {
    int v34 = 64;
    goto LABEL_17;
  }
  if (a20 == 1)
  {
    int v34 = 32;
    goto LABEL_17;
  }
  if (a20 != 2)
  {
    int v34 = 16 * (a20 == 3);
LABEL_17:
    if (HIDWORD(a20) == 3) {
      int v33 = v34;
    }
    else {
      int v33 = v34 / SHIDWORD(a20);
    }
    goto LABEL_20;
  }
  int v33 = 16;
LABEL_20:
  a1 = l2a::calc_nr_width_dst((l2a *)a19, ((int)(16 * a7 * (0x10u >> ((a5 & 0xFFFFFFFE) == 2))) / (1 << (a16 + a12))) << a14, v29, v33, a21, v30, a24, SHIDWORD(a24), v36);
  int v32 = a1;
LABEL_21:
  l2a::GetHGDCW((l2a *)a1);
  int v46 = 0;
  int v47 = 0;
  uint64_t v48 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v46, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_267775B38, (unk_267775B38 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v49[0] = 0;
  v49[8] = 1;
  memset(&v49[12], 0, 24);
  int v50 = 0;
  v51[0] = 1;
  memset(&v51[4], 0, 24);
  *(void *)&long long v35 = 0x100000001;
  *((void *)&v35 + 1) = 0x100000001;
  *(_OWORD *)&v53[4] = v35;
  *(_DWORD *)&v49[4] = a6;
  int v52 = 0;
  *(_DWORD *)int v53 = v32;
  *(_DWORD *)&v53[4] = l2a::dst_slice_height(a2, a8, a17, 0, 0, 0, 0);
  *(_DWORD *)&v53[8] = a10 * a3;
  *(_DWORD *)&v53[12] = 1;
  *(_DWORD *)&v53[16] = v26;
  if (&v46 != (void **)a23) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v46, *(char **)a23, *(void *)(a23 + 8), (uint64_t)(*(void *)(a23 + 8) - *(void *)a23) >> 2);
  }
  v49[0] = 1;
  int v39 = 0;
  uint64_t v40 = 0;
  std::string __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v46, (uint64_t)v47, (v47 - (unsigned char *)v46) >> 2);
  long long v41 = *(_OWORD *)v49;
  memset(v42, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v42, *(uint64_t *)&v49[16], *(uint64_t *)&v49[24], (uint64_t)(*(void *)&v49[24] - *(void *)&v49[16]) >> 5);
  void v42[3] = *(void *)v51;
  memset(v43, 0, sizeof(v43));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v43, *(uint64_t *)&v51[8], *(uint64_t *)&v51[16], (uint64_t)(*(void *)&v51[16] - *(void *)&v51[8]) >> 5);
  long long v44 = *(_OWORD *)v53;
  int v45 = *(_DWORD *)&v53[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v54[0] = (void **)v43;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v54);
  v54[0] = (void **)v42;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v54);
  if (__p)
  {
    int v39 = __p;
    operator delete(__p);
  }
  v54[0] = (void **)&v51[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v54);
  v54[0] = (void **)&v49[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v54);
  if (v46)
  {
    int v47 = v46;
    operator delete(v46);
  }
}

void sub_21133652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t l2a::calc_nr_width_dst(l2a *this, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  int v15 = (int)this % a4;
  if (a8) {
    printf("x=%d w=%d l2g=%d dmagran=%d compressionEn=%d wout=%d arch_ver=%d\n", this, a2, a3, a4, a5, a6, a7);
  }
  int v16 = v15 + a6;
  if (v15 + a6 < 1) {
    return 0;
  }
  int v32 = a5;
  int v33 = a7;
  int v17 = 0;
  int v18 = 0;
  LODWORD(v19) = 0;
  double v20 = (double)a4;
  uint64_t v31 = a3;
  int v30 = (int)(ceil((double)a6 / (double)(int)a3) * (double)(int)a3);
  char v21 = 1;
  do
  {
    int v22 = ((v18 - v15) & ~((v18 - v15) >> 31)) / a2;
    int v23 = v22 * a2;
    if (v16 >= a2 + v15 + v22 * a2) {
      int v24 = a2 + v15 + v22 * a2;
    }
    else {
      int v24 = v16;
    }
    int v25 = l2a::dma_push_round((l2a *)(int)(ceil((double)(v24 - v18) / v20) * v20), v31, v32);
    v18 += v25;
    int v26 = (int)(ceil((double)(v18 - v15) / (double)a2) * (double)a2);
    int v27 = v30;
    if (v30 >= v26) {
      int v27 = v26;
    }
    if (v33 > 13) {
      int v26 = v27;
    }
    if ((int)v19 <= v26 - v23) {
      uint64_t v19 = (v26 - v23);
    }
    else {
      uint64_t v19 = v19;
    }
    if (a8) {
      printf("i=%d n=%d right_tile=%d width_dma=%d left_l2=%d right_l2=%d nr_width=%d\n", v17, v22, v24, v25, v22 * a2, v26, v26 - v23);
    }
    char v28 = (v18 < v16) & v21;
    int v17 = 1;
    char v21 = 0;
  }
  while ((v28 & 1) != 0);
  return v19;
}

uint64_t l2a::dst_slice_height(l2a *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  v13[0] = (int)this;
  v13[1] = a3;
  void v13[2] = a4;
  unsigned int v13[3] = a5;
  v13[4] = a6;
  void v13[5] = a7;
  v13[6] = -a5;
  if (a3 < 1)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    do
    {
      if (!l2a::SliceGen::next(v13, &v11)) {
        break;
      }
      if (v12 - v11 > v9) {
        int v9 = v12 - v11;
      }
    }
    while (v9 < a3);
  }
  return (v9 * a2);
}

uint64_t l2a::ne_alloc_fifo_dst@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, char a10, int a11, char a12, int a13, int a14, int a15)
{
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)a9 = 0u;
  char v15 = a8 + a7 + a10 + a12;
  int v16 = result & 0xFFFFFFFE;
  unsigned int v17 = a2 & 0xFFFFFFFE;
  char v18 = (a2 & 0xFFFFFFFE) == 2;
  if (a13 == 1)
  {
    int v19 = 1 << v18 << v15;
    if (v19 <= 16) {
      int v19 = 16;
    }
    if (a11) {
      unsigned int v20 = 128;
    }
    else {
      unsigned int v20 = 0x100u >> ((result & 0xFFFFFFFE) == 2);
    }
    if (a5 == 1) {
      unsigned int v20 = 64;
    }
    int v21 = 2 * a3 * a4 * v19 * v20;
    if (((a3 * a4 * v19 * v20) & 0x40000000) != 0) {
      v21 += 15;
    }
    *(_DWORD *)(a9 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v21 >> 4;
    if (a15) {
      return printf("stride=%d comp_per_chan=%d\n");
    }
    return result;
  }
  if (!a5)
  {
    if (v16 != 2 || v17 == 2)
    {
      if (v16 != 2 && v17 == 2) {
        char v25 = 9;
      }
      else {
        char v25 = 8;
      }
      int v22 = a3 << v25;
    }
    else
    {
      int v22 = a3 << 7;
      if (a14 < 16) {
        int v22 = 256;
      }
    }
    BOOL v23 = v22 == 128 && a8 == 0;
    goto LABEL_38;
  }
  if (a5 == 1)
  {
    if (a6 <= 2 && a14 > 13)
    {
      int v22 = a3 << 6 << v18;
      goto LABEL_40;
    }
    BOOL v23 = v17 == 2 && a3 == 2;
    int v22 = 128;
LABEL_38:
    if (v23) {
      int v22 = 256;
    }
    goto LABEL_40;
  }
  int v22 = a3 << 9;
LABEL_40:
  if (a11) {
    int v26 = 2;
  }
  else {
    int v26 = 1;
  }
  *(_DWORD *)(a9 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = ((2 * a4 * v22) << v15) / v26 / 16;
  if (a15) {
    return printf("cstride=%d oy=%d total_ocg=%d\n");
  }
  return result;
}

void l2a::pe_alloc_nonresident_src(l2a *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, char a14, int a15, int a16, int a17, int a18, int a19, int a20,int a21,unsigned int a22,int a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,uint64_t a32,int a33,int a34)
{
  int v34 = (int)a1;
  l2a::GetHGDCW(a1);
  int v52 = 0;
  int v53 = 0;
  uint64_t v54 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v52, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_267775B38, (unk_267775B38 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v55[0] = 0;
  v55[8] = 1;
  memset(&v55[12], 0, 24);
  int v56 = 0;
  v57[0] = 1;
  memset(&v57[4], 0, 24);
  *(void *)&long long v35 = 0x100000001;
  *((void *)&v35 + 1) = 0x100000001;
  *(_OWORD *)&v59[4] = v35;
  *(_DWORD *)&v55[4] = a20;
  int v58 = 0;
  *(_DWORD *)int v59 = a2;
  *(_DWORD *)&v59[4] = l2a::src_slice_height(v34, a3, a6, a8, a11, a13, 0, a15, a16, a17, a18, a19, a33);
  *(_DWORD *)&v59[8] = a4;
  *(_DWORD *)&v59[16] = a5;
  *(_DWORD *)&v59[12] = 1;
  if (&v52 != (void **)a32) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v52, *(char **)a32, *(void *)(a32 + 8), (uint64_t)(*(void *)(a32 + 8) - *(void *)a32) >> 2);
  }
  v55[0] = 1;
  if (a33 <= 14) {
    l2a::reduce_pe_src_width((uint64_t)&v52, a7, a10, a12, a14, a20, (l2a *)a22, a27, a28, a29, a30, a33, a34);
  }
  l2a::pe_modify_src(&v52, v34, a20, a23, a24, a25, a26, a21, a22, a31);
  if (!a21 && a33 >= 15 && (a17 + a6 + a18 <= a15 || a24 != 1 && (a31 != 2 || v34 != 4 && v34 != 8))) {
    l2a::reduce_pe_src_width((uint64_t)&v52, a7, a10, a12, a14, a20, (l2a *)a22, a27, a28, a29, a30, a33, a34);
  }
  std::string __p = 0;
  int v45 = 0;
  uint64_t v46 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v52, (uint64_t)v53, (v53 - (unsigned char *)v52) >> 2);
  long long v47 = *(_OWORD *)v55;
  memset(v48, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v48, *(uint64_t *)&v55[16], *(uint64_t *)&v55[24], (uint64_t)(*(void *)&v55[24] - *(void *)&v55[16]) >> 5);
  v48[3] = *(void *)v57;
  memset(v49, 0, sizeof(v49));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v49, *(uint64_t *)&v57[8], *(uint64_t *)&v57[16], (uint64_t)(*(void *)&v57[16] - *(void *)&v57[8]) >> 5);
  long long v50 = *(_OWORD *)v59;
  int v51 = *(_DWORD *)&v59[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v60[0] = (void **)v49;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v60);
  v60[0] = (void **)v48;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v60);
  if (__p)
  {
    int v45 = __p;
    operator delete(__p);
  }
  v60[0] = (void **)&v57[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v60);
  v60[0] = (void **)&v55[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v60);
  if (v52)
  {
    int v53 = v52;
    operator delete(v52);
  }
}

void sub_211336CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

unint64_t l2a::reduce_pe_src_width(uint64_t a1, int a2, int a3, int a4, char a5, int a6, l2a *this, int a8, int a9, int a10, int a11, int a12, int a13)
{
  if (a10 == 1)
  {
    if (a11) {
      int v14 = 16;
    }
    else {
      int v14 = 32;
    }
    goto LABEL_14;
  }
  if (a8)
  {
    if (a8 == 1)
    {
      int v14 = 32;
    }
    else
    {
      if (a8 == 2)
      {
        int v14 = 16;
        goto LABEL_14;
      }
      int v14 = 16 * (a8 == 3);
    }
  }
  else
  {
    int v14 = 64;
  }
  if (a9 != 3) {
    v14 /= a9;
  }
LABEL_14:
  char v15 = (a6 & 0xFFFFFFFE) == 2;
  unsigned int v16 = 0x10u >> v15;
  if (a12 > 15) {
    unint64_t result = l2a::dma_projection_v2(this, a3 << a5, a4, a2, a3, 0x10u >> v15, v14, a10, a13, v24);
  }
  else {
    unint64_t result = l2a::dma_projection_v1((l2a *)(a3 << a5), a4, a2, 0x10u >> v15, v14, a6, (int)this, a10, v23);
  }
  int v19 = (int)(ceil((double)*(int *)(a1 + 96) / (double)v16) * (double)v16);
  int v20 = v18 - (HIDWORD(result) + result) + v19;
  if (v20 <= (int)result) {
    int v20 = result;
  }
  if ((int)result <= v18) {
    int v21 = v18;
  }
  else {
    int v21 = result;
  }
  if (HIDWORD(result) + (int)result < v19) {
    int v22 = v21;
  }
  else {
    int v22 = v20;
  }
  if ((int)result < v19) {
    int v19 = v22;
  }
  *(_DWORD *)(a1 + 96) = v19;
  return result;
}

void l2a::pe_alloc_fifo_src(l2a *a1@<X0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14, char a15, int a16, int a17, int a18, int a19, int a20,int a21,int a22,unsigned int a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,int a32,int a33)
{
  int v53 = (int)a1;
  l2a::GetHGDCW(a1);
  std::string __p = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_267775B38, (unk_267775B38 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  char v60 = 0;
  char v62 = 1;
  memset(v63, 0, sizeof(v63));
  int v64 = 0;
  char v65 = 1;
  memset(v66, 0, sizeof(v66));
  *(void *)&long long v36 = 0x100000001;
  *((void *)&v36 + 1) = 0x100000001;
  long long v69 = v36;
  int v61 = a21;
  int v67 = 0;
  int v68 = a2;
  int v37 = a3;
  int v55 = a7;
  unsigned int v38 = l2a::src_slice_height(v53, v37, a7, a10, a12, a14, 0, a16, a17, a18, a19, a20, a32);
  unsigned int v40 = a29;
  *(void *)&long long v69 = __PAIR64__(a4, v38);
  DWORD2(v69) = 1;
  HIDWORD(v69) = a5;
  char v60 = 1;
  l2a::pe_modify_src(&__p, v53, a21, a24, a25, a26, a27, a22, a23, a31);
  unsigned int v41 = 0x10u >> ((a21 & 0xFFFFFFFE) == 2);
  if (a22 || 1 << a15 >= a6 || a18 + v55 + a19 > a16 && (a25 == 1 || a31 == 2 && (v53 == 4 || v53 == 8)))
  {
    int v42 = 0;
    int v43 = (int)(ceil((double)v68 / (double)v41) * (double)v41);
  }
  else
  {
    int v43 = a11 << a15;
    int v42 = l2a::calc_l2_retain((l2a *)a23, a11 << a15, a13, a8, a11, v41, a2, a6, 0, a33, v49);
  }
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)a9 = 0u;
  if (a29 >= 1)
  {
    do
    {
      a28 -= v40 & 1;
      BOOL v44 = v40 > 1;
      v40 >>= 1;
    }
    while (v44);
  }
  int v45 = 2 * a28;
  int v46 = (int)(ceil((double)(HIDWORD(v69) + a30) / (double)v45) * (double)v45);
  int v47 = v69;
  *(_DWORD *)(a9 + 16) = v42 / (int)v41;
  int v48 = (int)(v43 + v42 * a4 * (v46 / 2 / a28)) / (int)(0x10u >> ((a21 & 0xFFFFFFFE) == 2));
  *(_DWORD *)(a9 + 4) = v48;
  if (a28 > 1) {
    *(_DWORD *)a9 = v48 * v47;
  }
  *(_DWORD *)(a9 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = vcvtd_n_s64_f64(ceil((double)(v45 * v47 * v48) * 0.015625), 6uLL);
  *(_DWORD *)(a9 + 24) = 1 << ((a21 & 0xFFFFFFFE) == 2);
  *(_DWORD *)(a9 + 28) = v43 + v42;
  *(_DWORD *)(a9 + 32) = v47;
  v70[0] = (void **)((char *)v66 + 4);
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v70);
  v70[0] = (void **)((char *)v63 + 4);
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v70);
  if (__p)
  {
    int v58 = __p;
    operator delete(__p);
  }
}

void sub_2113371C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  l2a::Sizes::~Sizes((l2a::Sizes *)va);
  _Unwind_Resume(a1);
}

void l2a::pe_alloc_nonresident_dst(l2a *a1@<X0>, int a2@<W1>, l2a *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, unsigned int a11, l2a *a12, int a13, int a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v25 = (int)a1;
  l2a::GetHGDCW(a1);
  int v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v42, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_267775B38, (unk_267775B38 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v45[0] = 0;
  v45[8] = 1;
  memset(&v45[12], 0, 24);
  int v46 = 0;
  v47[0] = 1;
  memset(&v47[4], 0, 24);
  *(void *)&long long v26 = 0x100000001;
  *((void *)&v26 + 1) = 0x100000001;
  *(_OWORD *)&v49[4] = v26;
  *(_DWORD *)&v45[4] = a6;
  int v48 = 0;
  *(_DWORD *)int v49 = a2;
  *(_DWORD *)&v49[4] = l2a::dst_slice_height(a3, 1, a8, 0, 0, 0, 0);
  *(_DWORD *)&v49[8] = a4;
  *(_DWORD *)&v49[12] = 1;
  *(_DWORD *)&v49[16] = a5;
  if (&v42 != (void **)a15) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v42, *(char **)a15, *(void *)(a15 + 8), (uint64_t)(*(void *)(a15 + 8) - *(void *)a15) >> 2);
  }
  int v27 = 1;
  v45[0] = 1;
  if ((v25 - 5) >= 2)
  {
    int v27 = *(_DWORD *)v49;
  }
  else
  {
    *(void *)int v49 = 0x100000001;
    *(_DWORD *)&v49[8] = 1;
  }
  if (a10 == 1)
  {
    int v28 = *(_DWORD *)&v49[16];
    *(_DWORD *)int v49 = *(_DWORD *)&v49[16];
    *(_DWORD *)&v49[16] = v27;
    int v27 = v28;
  }
  uint64_t v29 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
  int v30 = (int)(ceil((double)v27 / (double)v29) * (double)v29);
  if ((v25 - 5) >= 2 && !a10)
  {
    if (a13 == 1)
    {
      if (a14) {
        int v31 = 16;
      }
      else {
        int v31 = 32;
      }
      goto LABEL_23;
    }
    if (a12)
    {
      if (a12 == 1)
      {
        int v31 = 32;
      }
      else
      {
        if (a12 == 2)
        {
          int v31 = 16;
LABEL_23:
          int v30 = l2a::calc_nr_width_dst((l2a *)a11, 1 << a7, v29, v31, a13, v27, a16, SHIDWORD(a16), v32);
          goto LABEL_24;
        }
        int v31 = 16 * (a12 == 3);
      }
    }
    else
    {
      int v31 = 64;
    }
    if (HIDWORD(a12) != 3) {
      v31 /= SHIDWORD(a12);
    }
    goto LABEL_23;
  }
LABEL_24:
  *(_DWORD *)int v49 = v30;
  long long v35 = 0;
  uint64_t v36 = 0;
  std::string __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v42, (uint64_t)v43, (v43 - (unsigned char *)v42) >> 2);
  long long v37 = *(_OWORD *)v45;
  memset(v38, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v38, *(uint64_t *)&v45[16], *(uint64_t *)&v45[24], (uint64_t)(*(void *)&v45[24] - *(void *)&v45[16]) >> 5);
  void v38[3] = *(void *)v47;
  memset(v39, 0, sizeof(v39));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v39, *(uint64_t *)&v47[8], *(uint64_t *)&v47[16], (uint64_t)(*(void *)&v47[16] - *(void *)&v47[8]) >> 5);
  long long v40 = *(_OWORD *)v49;
  int v41 = *(_DWORD *)&v49[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v50[0] = (void **)v39;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v50);
  v50[0] = (void **)v38;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v50);
  if (__p)
  {
    long long v35 = __p;
    operator delete(__p);
  }
  v50[0] = (void **)&v47[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v50);
  v50[0] = (void **)&v45[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v50);
  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }
}

void sub_2113374D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t l2a::pe_alloc_fifo_dst@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)a8 = 0u;
  if (a6 >= 1)
  {
    do
    {
      a5 -= a6 & 1;
      BOOL v8 = a6 > 1;
      a6 = a6 >> 1;
    }
    while (v8);
  }
  if ((result - 5) > 1 || a7 < 15)
  {
    char v10 = a3 + a4;
    if ((a2 & 0xFFFFFFFE) == 2) {
      ++v10;
    }
    int v9 = (2 * a5) << (v10 - 4);
  }
  else
  {
    int v9 = 2 * a5;
  }
  *(_DWORD *)(a8 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v9;
  return result;
}

void l2a::np_alloc_chained(uint64_t a1@<X0>, l2a *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, char a12, __int16 a13, char a14, __int16 a15, char a16, int a17, int a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,int a26,char a27,int a28,int a29,int a30,int a31,uint64_t a32,int a33)
{
  if (a21 == 1) {
    int v33 = a4;
  }
  else {
    int v33 = a7 * a1;
  }
  BOOL v34 = 1;
  if (a29 != 1) {
    BOOL v34 = (a30 == 1 || a31 == 2 && (a22 == 8 || a22 == 4)) && a28 < a23;
  }
  if (a11 && a33 > 13)
  {
    char v35 = 1;
  }
  else
  {
    char v35 = a21 == 1 || v34;
    if (a33 <= 14) {
      char v35 = 0;
    }
  }
  unsigned int v36 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
  int v49 = a7 * a1;
  if (v35)
  {
    int v40 = (int)(ceil((double)v33 / (double)v36) * (double)v36);
  }
  else
  {
    int v41 = a24 << a27;
    uint64_t v42 = (((int)(16 * a7 * (0x10u >> ((a5 & 0xFFFFFFFE) == 2))) / (1 << (a16 + a12))) << a14);
    if (a33 > 17) {
      a1 = l2a::calc_cbuf_width_v2(v42, v41, a25, a24, a26, v33, v36, a8, v45, SHIDWORD(v45));
    }
    else {
      a1 = l2a::calc_cbuf_width_v1((l2a *)v42, v41, a25, a26, v33, v36, a7, a8, v45);
    }
    int v40 = a1;
  }
  l2a::GetHGDCW((l2a *)a1);
  int v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v58, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_267775B38, (unk_267775B38 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v61[0] = 0;
  v61[8] = 1;
  memset(&v61[12], 0, 24);
  int v62 = 0;
  v63[0] = 1;
  memset(&v63[4], 0, 24);
  *(void *)&long long v43 = 0x100000001;
  *((void *)&v43 + 1) = 0x100000001;
  *(_OWORD *)&v65[4] = v43;
  *(_DWORD *)&v61[4] = a6;
  int v64 = 0;
  *(_DWORD *)char v65 = v40;
  *(_DWORD *)&v65[4] = l2a::dst_slice_height(a2, a8, a17, a18, a19, a20, 0);
  *(_DWORD *)&v65[8] = a10 * a3;
  int v44 = v49;
  if (a21 != 1) {
    int v44 = a4;
  }
  *(_DWORD *)&v65[16] = v44;
  *(_DWORD *)&v65[12] = 1;
  if (&v58 != (void **)a32) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v58, *(char **)a32, *(void *)(a32 + 8), (uint64_t)(*(void *)(a32 + 8) - *(void *)a32) >> 2);
  }
  v61[0] = 1;
  int v51 = 0;
  uint64_t v52 = 0;
  std::string __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v58, (uint64_t)v59, (v59 - (unsigned char *)v58) >> 2);
  long long v53 = *(_OWORD *)v61;
  memset(v54, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v54, *(uint64_t *)&v61[16], *(uint64_t *)&v61[24], (uint64_t)(*(void *)&v61[24] - *(void *)&v61[16]) >> 5);
  v54[3] = *(void *)v63;
  memset(v55, 0, sizeof(v55));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v55, *(uint64_t *)&v63[8], *(uint64_t *)&v63[16], (uint64_t)(*(void *)&v63[16] - *(void *)&v63[8]) >> 5);
  long long v56 = *(_OWORD *)v65;
  int v57 = *(_DWORD *)&v65[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v66[0] = (void **)v55;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v66);
  v66[0] = (void **)v54;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v66);
  if (__p)
  {
    int v51 = __p;
    operator delete(__p);
  }
  v66[0] = (void **)&v63[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v66);
  v66[0] = (void **)&v61[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v66);
  if (v58)
  {
    uint64_t v59 = v58;
    operator delete(v58);
  }
}

void sub_2113378F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t l2a::calc_cbuf_width_v1(l2a *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  int v9 = ~a4 + a3;
  double v10 = (double)(int)this;
  int v11 = (int)(ceil((double)(v9 + a2) / (double)(int)this) * (double)(int)this);
  int v12 = (int)(ceil((double)a4 / (double)a6) * (double)a6) + v11;
  int v13 = (int)(ceil((double)(a4 + a2) / (double)a6) * (double)a6)
      + (int)(ceil((double)v9 / (double)(int)this) * (double)(int)this);
  if (v12 > v13) {
    int v13 = v12;
  }
  uint64_t result = (int)(ceil((double)a5 / (double)a6) * (double)a6);
  if (v11 < (int)result)
  {
    int v15 = v11 + (int)(ceil((double)a2 / v10) * v10);
    BOOL v16 = __OFSUB__(result, v15);
    int v17 = result - v15;
    if ((v17 < 0) ^ v16 | (v17 == 0))
    {
      int v18 = v17 + v13;
      if (v18 <= v11) {
        return v11;
      }
      else {
        return v18;
      }
    }
    else if (v11 <= v13)
    {
      return v13;
    }
    else
    {
      return v11;
    }
  }
  return result;
}

uint64_t l2a::calc_cbuf_width_v2(uint64_t this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (a6 < 1) {
    return 0;
  }
  int v10 = this;
  int v11 = 0;
  LODWORD(this) = 0;
  double v12 = (double)v10;
  char v13 = 1;
  int v14 = a3 - (a5 + a4) + a2;
  do
  {
    int v15 = (((a5 + a4 - a3 + v11) / a2) & ~(((a5 + a4 - a3 + v11) / a2) >> 31)) * a2;
    int v16 = v14 + v15;
    if (v14 + v15 >= a6) {
      int v16 = a6;
    }
    int v17 = (v15 - a5) & ~((v15 - a5) >> 31);
    v11 += (int)(ceil((double)(v16 - v11) / v12) * v12);
    if (v11 >= a6) {
      int v18 = a6;
    }
    else {
      int v18 = v11;
    }
    int v19 = (int)(ceil((double)v18 / (double)a7) * (double)a7) - (int)(floor((double)v17 / (double)a7) * (double)a7);
    if ((int)this <= v19) {
      this = v19;
    }
    else {
      this = this;
    }
    if ((v13 & 1) == 0) {
      break;
    }
    char v13 = 0;
  }
  while (v11 < a6);
  return this;
}

void l2a::pn_alloc_chained(l2a *a1@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, char a20,__int16 a21,char a22,__int16 a23,char a24,uint64_t a25,int a26)
{
  char v30 = (a14 & 0xFFFFFFFE) == 2;
  if (a26 <= 17) {
    int v31 = a15 % a16 + a15;
  }
  else {
    int v31 = a15;
  }
  if (!a19 || (BOOL v32 = 1, a26 <= 13)) {
    BOOL v32 = a10 == 1 && a26 > 14;
  }
  unsigned int v34 = 0x10u >> v30;
  unsigned int v36 = a1;
  if (v32)
  {
    int v39 = (int)(ceil((double)a11 / (double)v34) * (double)v34);
  }
  else
  {
    int v40 = ((int)(16 * a16 * v34) / (1 << (a24 + a20))) << a22;
    uint64_t v41 = (1 << a3);
    if (a26 > 17) {
      a1 = (l2a *)l2a::calc_cbuf_width_v2(v41, v40, v31, a16, a17, a11, v34, a8, v43, SHIDWORD(v43));
    }
    else {
      a1 = (l2a *)l2a::calc_cbuf_width_v1((l2a *)v41, v40, v31, a17, a11, 0x10u >> v30, v34, a8, v43);
    }
    int v39 = (int)a1;
  }
  l2a::GetHGDCW(a1);
  long long v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v53, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_267775B38, (unk_267775B38 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v56[0] = 0;
  v56[8] = 1;
  memset(&v56[12], 0, 24);
  int v57 = 0;
  v58[0] = 1;
  memset(&v58[4], 0, 24);
  *(void *)&long long v42 = 0x100000001;
  *((void *)&v42 + 1) = 0x100000001;
  *(_OWORD *)&v60[4] = v42;
  *(_DWORD *)&v56[4] = a2;
  int v59 = 0;
  *(_DWORD *)uint64_t v60 = v39;
  *(_DWORD *)&v60[4] = l2a::dst_slice_height(v36, 1, a4, a5, a6, a7, a8);
  *(_DWORD *)&v60[8] = a12;
  *(_DWORD *)&v60[12] = 1;
  *(_DWORD *)&v60[16] = a13;
  if (&v53 != (void **)a25) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v53, *(char **)a25, *(void *)(a25 + 8), (uint64_t)(*(void *)(a25 + 8) - *(void *)a25) >> 2);
  }
  v56[0] = 1;
  int v46 = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v53, (uint64_t)v54, (v54 - (unsigned char *)v53) >> 2);
  long long v48 = *(_OWORD *)v56;
  memset(v49, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v49, *(uint64_t *)&v56[16], *(uint64_t *)&v56[24], (uint64_t)(*(void *)&v56[24] - *(void *)&v56[16]) >> 5);
  void v49[3] = *(void *)v58;
  memset(v50, 0, sizeof(v50));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v50, *(uint64_t *)&v58[8], *(uint64_t *)&v58[16], (uint64_t)(*(void *)&v58[16] - *(void *)&v58[8]) >> 5);
  long long v51 = *(_OWORD *)v60;
  int v52 = *(_DWORD *)&v60[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v61[0] = (void **)v50;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v61);
  v61[0] = (void **)v49;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v61);
  if (__p)
  {
    int v46 = __p;
    operator delete(__p);
  }
  v61[0] = (void **)&v58[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v61);
  v61[0] = (void **)&v56[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v61);
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
}

void sub_211337DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<l2a::AccessPattern>,l2a::AccessPattern*,l2a::AccessPattern*,l2a::AccessPattern*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  int v10 = a4;
  int v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = *(void *)v6;
      v4[2] = 0;
      double v4[3] = 0;
      v4[1] = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v4 + 1, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      uint64_t v4 = v11 + 4;
      v11 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<l2a::AccessPattern>,l2a::AccessPattern*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_211337EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<l2a::AccessPattern>,l2a::AccessPattern*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<LayerSourcePair>,LayerSourcePair*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t l2a::get_pad(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    return *(unsigned int *)(a1 + 4);
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v4 != v3)
  {
    uint64_t v5 = v4;
    while (1)
    {
      uint64_t v6 = *(int **)(v5 + 8);
      char v7 = *(int **)(v5 + 16);
      if (v6 != v7) {
        break;
      }
LABEL_24:
      v5 += 32;
      if (v5 == v3) {
        return result;
      }
    }
    int v8 = *(_DWORD *)v5;
    int v9 = *(_DWORD *)(v5 + 4) * result;
    while (1)
    {
      int v10 = *v6;
      int v11 = v6[1];
      memset(v25, 0, sizeof(v25));
      if (v11 < 1)
      {
        int v14 = 1;
      }
      else
      {
        int v12 = 0;
        int v13 = 0;
        int v14 = 1;
        do
        {
          int v15 = v10;
          int v16 = v13;
          if (v10 >= 1)
          {
            do
            {
              int v17 = *((_DWORD *)v25 + v16);
              *((_DWORD *)v25 + v16) = v17 + 1;
              if (v17 + 1 > v14) {
                int v14 = v17 + 1;
              }
              int v18 = v16 + 1;
              BOOL v19 = -v18 < 0;
              int v20 = -v18 & 0x3F;
              int v16 = v18 & 0x3F;
              if (!v19) {
                int v16 = -v20;
              }
              --v15;
            }
            while (v15);
          }
          int v21 = v13 + v9;
          int v22 = v21 & 0x3F;
          int v23 = -v21;
          BOOL v19 = v23 < 0;
          int v24 = v23 & 0x3F;
          if (v19) {
            int v13 = v22;
          }
          else {
            int v13 = -v24;
          }
          ++v12;
        }
        while (v12 != v11);
      }
      if (v14 > v8) {
        break;
      }
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_24;
      }
    }
    uint64_t result = (result + 1);
    if (result == 64) {
      return 0xFFFFFFFFLL;
    }
  }
  return 0;
}

void *std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<ControlEdgeInfo>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<l2a::AccessPattern>,l2a::AccessPattern*,l2a::AccessPattern*,l2a::AccessPattern*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_211338094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t l2a::dma_push_round(l2a *this, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    double v3 = (double)(int)this;
    double v4 = (double)(int)a2;
    return (int)(ceil(v3 / v4) * v4);
  }
  if (!this) {
    return 0;
  }
  if ((int)this <= (int)a2) {
    return a2;
  }
  uint64_t v5 = (2 * a2);
  if ((int)v5 < (int)this)
  {
    double v3 = (double)(int)this;
    double v4 = (double)(4 * (int)a2);
    return (int)(ceil(v3 / v4) * v4);
  }
  return v5;
}

BOOL l2a::SliceGen::next(int *a1, int *a2)
{
  int v2 = a1[6];
  int v3 = a1[4] + *a1;
  if (v2 < v3)
  {
    int v4 = v2 & ~(v2 >> 31);
    *a2 = v4;
    int v5 = *a1;
    int v6 = a1[1] + v2;
    if (*a1 >= v6) {
      int v7 = a1[1] + v2;
    }
    else {
      int v7 = *a1;
    }
    a2[1] = v7;
    if (a1[5])
    {
      int v8 = v6 - v5;
      if (a1[4] < v6 - v5) {
        int v8 = a1[4];
      }
      if (v2 < 0)
      {
        if (v7 <= 1 - v2) {
          int v7 = 1 - v2;
        }
        a2[1] = v7;
      }
      if (v8 >= 1)
      {
        int v9 = v5 + ~(v8 & ~(v8 >> 31));
        if (v9 < v4) {
          int v4 = v9;
        }
        *a2 = v4;
      }
    }
    a1[6] = v6 - a1[2];
  }
  return v2 < v3;
}

uint64_t *ZinComputeMutableProgramFindSectionSymbol(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t ***)(a1 + 192);
  uint64_t v3 = *(void *)(a1 + 200) - (void)v2;
  if (!v3) {
    return 0;
  }
  int v5 = 0;
  unint64_t v6 = v3 >> 3;
  if (v6 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v6;
  }
  do
  {
    int v8 = *v2;
    if ((*v2)[4] == a2)
    {
      uint64_t v9 = *v8;
      if (*(void *)(*v8 + 8) == *(void *)(*(void *)a2 + 32)
        && (!v5 || (uint64_t v10 = (const char *)v5[1]) != 0 && strncmp(v10, "SectionSymbol_", 0xFuLL)))
      {
        int v5 = v8;
        if ((~*(unsigned __int8 *)(v9 + 4) & 0xE) != 0) {
          ZinAssertImpl("Non-section symbol pointing to a section.");
        }
      }
    }
    ++v2;
    --v7;
  }
  while (v7);
  return v5;
}

uint64_t ZinComputeMutableProgramDestroy(ZinComputeMutableProgram *a1)
{
  if (!a1) {
    return 3;
  }
  ZinComputeMutableProgramDestroyProcedures((uint64_t)a1);
  ZinComputeMutableProgramDestroyBindings((uint64_t)a1);
  ZinComputeMutableProgramDestroyFvmlibs((uint64_t)a1);
  ZinComputeMutableProgramDestroyOperations(a1);
  ZinComputeMutableProgramDestroyMutableJitOperations((uint64_t)a1);
  ZinComputeMutableProgramDestroySegments<ZinComputeMutableProgram>((uint64_t)a1);
  ZinComputeMutableProgramDestroySymbols<ZinComputeMutableProgram>((uint64_t)a1);
  ZinComputeMutableProgramDestroySymbolTable<ZinComputeMutableProgram>((uint64_t)a1);
  ZinComputeMutableProgramDestroySymbolCommon<ZinComputeMutableProgram>((uint64_t)a1);
  ZinComputeMutableProgram::~ZinComputeMutableProgram(a1);
  MEMORY[0x21667D3C0]();
  return 0;
}

void ZinComputeMutableProgramDestroyProcedures(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  uint64_t v1 = *(void *)(a1 + 168);
  if (v1 != v2)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (v5)
      {
        if (!*(void *)v5
          || (free(*(void **)v5), *(void *)v5 = 0, uint64_t v6 = *(void *)(a1 + 160), (v5 = *(void *)(v6 + 8 * v4)) != 0))
        {
          uint64_t v7 = *(void **)(v5 + 80);
          if (v7)
          {
            *(void *)(v5 + 88) = v7;
            operator delete(v7);
          }
          int v8 = *(void **)(v5 + 56);
          if (v8)
          {
            *(void *)(v5 + 64) = v8;
            operator delete(v8);
          }
          uint64_t v9 = *(void **)(v5 + 32);
          if (v9)
          {
            *(void *)(v5 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v9;
            operator delete(v9);
          }
          uint64_t v10 = *(void **)(v5 + 8);
          if (v10)
          {
            *(void *)(v5 + 16) = v10;
            operator delete(v10);
          }
          MEMORY[0x21667D3C0](v5, 0xD0C4058488F0BLL);
          uint64_t v6 = *(void *)(a1 + 160);
        }
        *(void *)(v6 + 8 * v4) = 0;
        uint64_t v2 = *(void *)(a1 + 160);
        uint64_t v1 = *(void *)(a1 + 168);
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
}

void ZinComputeMutableProgramDestroyBindings(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  if (*(void *)(a1 + 144) != v1)
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = *(void ***)(v1 + 8 * v3);
      if (v4)
      {
        free(*v4);
        *unint64_t v4 = 0;
        uint64_t v5 = *(void **)(*(void *)(a1 + 136) + 8 * v3);
      }
      else
      {
        uint64_t v5 = 0;
      }
      free(v5);
      *(void *)(*(void *)(a1 + 136) + 8 * v3++) = 0;
      uint64_t v1 = *(void *)(a1 + 136);
    }
    while (v3 < (*(void *)(a1 + 144) - v1) >> 3);
  }
}

void ZinComputeMutableProgramDestroyFvmlibs(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1 != v2)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void ***)(v2 + 8 * v4);
      if (v5)
      {
        if (*v5)
        {
          free(*v5);
          *uint64_t v5 = 0;
          uint64_t v5 = *(void ***)(*(void *)(a1 + 64) + 8 * v4);
        }
        free(v5);
        *(void *)(*(void *)(a1 + 64) + 8 * v4) = 0;
        uint64_t v2 = *(void *)(a1 + 64);
        uint64_t v1 = *(void *)(a1 + 72);
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
}

void *ZinComputeMutableProgramDestroyOperations(void *result)
{
  uint64_t v1 = result[11];
  if (result[12] != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = *(void **)(v1 + 8 * v3);
      if (result)
      {
        ZinComputeProcedureMutableOperation::~ZinComputeProcedureMutableOperation((ZinComputeProcedureMutableOperation *)result);
        uint64_t result = (void *)MEMORY[0x21667D3C0]();
        uint64_t v1 = v2[11];
      }
      *(void *)(v1 + 8 * v3++) = 0;
      uint64_t v1 = v2[11];
    }
    while (v3 < (v2[12] - v1) >> 3);
  }
  return result;
}

void ZinComputeMutableProgramDestroyMutableJitOperations(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if (*(void *)(a1 + 120) != v1)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v1 + 8 * v3);
      if (!*(void *)v4
        || (free(*(void **)v4),
            uint64_t v5 = *(void *)(a1 + 112),
            **(void **)(v5 + 8 * v3) = 0,
            (uint64_t v4 = *(void *)(v5 + 8 * v3)) != 0))
      {
        uint64_t v6 = *(void **)(v4 + 48);
        if (v6)
        {
          *(void *)(v4 + 56) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v4 + 24);
        if (v7)
        {
          *(void *)(v4 + 32) = v7;
          operator delete(v7);
        }
        MEMORY[0x21667D3C0](v4, 0xE0C40B0317CB6);
        uint64_t v5 = *(void *)(a1 + 112);
      }
      *(void *)(v5 + 8 * v3++) = 0;
      uint64_t v1 = *(void *)(a1 + 112);
    }
    while (v3 < (*(void *)(a1 + 120) - v1) >> 3);
  }
}

uint64_t ZinComputeMutableProgramAddAneTDOperation(uint64_t a1, const char **a2, uint64_t a3, ZinComputeProcedureMutableOperation **a4)
{
  if (!a3) {
    return 3;
  }
  int v23 = 0;
  uint64_t v8 = ZinComputeMutableProgramAddOperation(a1);
  if (!v8)
  {
    size_t __n = 0;
    uint64_t ANETDThreadStateSize = ZinComputeProgramGetANETDThreadStateSize(*(const ident_command **)(a1 + 16), 0, a3, 0, 0, (_DWORD *)&__n + 1);
    if (ANETDThreadStateSize
      || (uint64_t ANETDThreadStateSize = ZinComputeProgramGetANETDThreadStateArgumentSize(*(const ident_command **)(a1 + 16), 0, a3, 0, 0, (unsigned int *)&__n), ANETDThreadStateSize))
    {
      uint64_t v8 = ANETDThreadStateSize;
      if (v23)
      {
        ZinComputeProcedureMutableOperation::~ZinComputeProcedureMutableOperation(v23);
        MEMORY[0x21667D3C0](v10);
      }
    }
    else
    {
      int v12 = HIDWORD(__n);
      if (*a2) {
        unsigned int v13 = v12 + (SymStrlen(*a2) & 0xFFFFFFF8) + 24;
      }
      else {
        unsigned int v13 = HIDWORD(__n) + 16;
      }
      int v14 = malloc_type_calloc(1uLL, v13, 0xE9A94980uLL);
      if (v14)
      {
        int v15 = v14;
        int v16 = v14 + 4;
        *int v14 = 4;
        v14[1] = v13;
        int v17 = HIDWORD(__n);
        int v18 = HIDWORD(__n) >> 2;
        void v14[2] = 1;
        unsigned int v14[3] = v18;
        memcpy(v14 + 4, (const void *)a3, 0x800uLL);
        *((void *)v15 + 258) = *(void *)(a3 + 2048);
        v15[518] = *(_DWORD *)(a3 + 2056);
        v15[519] = *(_DWORD *)(a3 + 2060);
        v15[520] = *(_DWORD *)(a3 + 2064);
        v15[521] = *(_DWORD *)(a3 + 2068);
        *((void *)v15 + 261) = *(void *)(a3 + 2072);
        *((void *)v15 + 262) = *(void *)(a3 + 2080);
        v15[526] = *(_DWORD *)(a3 + 2088);
        *((void *)v15 + 264) = *(void *)(a3 + 2096);
        *((void *)v15 + 265) = *(void *)(a3 + 2104);
        *((void *)v15 + 266) = *(void *)(a3 + 2112);
        *((void *)v15 + 267) = *(void *)(a3 + 2120);
        v15[536] = *(_DWORD *)(a3 + 2128);
        memcpy(v15 + 538, (const void *)(a3 + 2136), __n);
        BOOL v19 = v23;
        *(void *)int v23 = v15;
        *((void *)v19 + 1) = v16;
        if (*a2)
        {
          uint64_t v20 = (v17 + 16);
          v15[527] = v20;
          strcpy((char *)v15 + v20, *a2);
        }
        else
        {
          v15[527] = 0;
        }
        ZinComputeMutableProgramUpdateWithOperation((void *)a1, a2, (uint64_t)v19, v13);
        uint64_t v8 = 0;
        if (a4) {
          *a4 = v19;
        }
      }
      else
      {
        if (v23)
        {
          ZinComputeProcedureMutableOperation::~ZinComputeProcedureMutableOperation(v23);
          MEMORY[0x21667D3C0](v21);
        }
        return 1;
      }
    }
  }
  return v8;
}

uint64_t ZinComputeMutableProgramAddOperation(uint64_t a1)
{
  if (a1) {
    operator new();
  }
  return 3;
}

void ZinComputeMutableProgramUpdateWithOperation(void *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (uint64_t)(a2 + 6);
  unint64_t v9 = a2[6];
  uint64_t v10 = (void *)a2[5];
  if ((unint64_t)v10 >= v9)
  {
    int v12 = (void **)(a2 + 4);
    uint64_t v13 = a2[4];
    uint64_t v14 = ((uint64_t)v10 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v9 - v13;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v17);
    }
    else {
      int v18 = 0;
    }
    BOOL v19 = &v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    *(void *)BOOL v19 = a3;
    int v11 = v19 + 8;
    int v22 = (char *)a2[4];
    uint64_t v21 = (char *)a2[5];
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)*v12;
    }
    a2[4] = v19;
    a2[5] = v11;
    a2[6] = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *uint64_t v10 = a3;
    int v11 = v10 + 1;
  }
  a2[5] = v11;
  unint64_t v24 = a1[13];
  int v25 = (void *)a1[12];
  if ((unint64_t)v25 >= v24)
  {
    uint64_t v27 = a1[11];
    uint64_t v28 = ((uint64_t)v25 - v27) >> 3;
    if ((unint64_t)(v28 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = v24 - v27;
    uint64_t v30 = v29 >> 2;
    if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
      uint64_t v30 = v28 + 1;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v31) {
      BOOL v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 13), v31);
    }
    else {
      BOOL v32 = 0;
    }
    int v33 = &v32[8 * v28];
    unsigned int v34 = &v32[8 * v31];
    *(void *)int v33 = a3;
    long long v26 = v33 + 8;
    unsigned int v36 = (char *)a1[11];
    char v35 = (char *)a1[12];
    if (v35 != v36)
    {
      do
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        *((void *)v33 - 1) = v37;
        v33 -= 8;
      }
      while (v35 != v36);
      char v35 = (char *)a1[11];
    }
    a1[11] = v33;
    a1[12] = v26;
    a1[13] = v34;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *int v25 = a3;
    long long v26 = v25 + 1;
  }
  a1[12] = v26;
  uint64_t v38 = *a1;
  int v39 = *(_DWORD *)(*a1 + 20) + a4;
  *(_DWORD *)(v38 + 16) = *(_DWORD *)(*a1 + 16) + 1;
  *(_DWORD *)(v38 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v39;
}

uint64_t ZinComputeMutableProgramAddAneSegmentOperation(uint64_t a1, const char **a2, uint64_t a3, ZinComputeProcedureMutableOperation **a4)
{
  if (!a3) {
    return 3;
  }
  uint64_t v23 = 0;
  uint64_t v8 = ZinComputeMutableProgramAddOperation(a1);
  if (!v8)
  {
    size_t __n = 0;
    uint64_t ANESegThreadStateSize = ZinComputeProgramGetANESegThreadStateSize(*(const ident_command **)(a1 + 16), 0, a3, 0, 0, (_DWORD *)&__n + 1);
    if (ANESegThreadStateSize
      || (uint64_t ANESegThreadStateSize = ZinComputeProgramGetANESegThreadStateArgumentSize(*(const ident_command **)(a1 + 16), 0, a3, 0, 0, (unsigned int *)&__n), ANESegThreadStateSize))
    {
      uint64_t v8 = ANESegThreadStateSize;
      if (v23)
      {
        ZinComputeProcedureMutableOperation::~ZinComputeProcedureMutableOperation(v23);
        MEMORY[0x21667D3C0](v10);
      }
    }
    else
    {
      int v12 = HIDWORD(__n);
      if (*a2) {
        unsigned int v13 = v12 + (SymStrlen(*a2) & 0xFFFFFFF8) + 24;
      }
      else {
        unsigned int v13 = HIDWORD(__n) + 16;
      }
      uint64_t v14 = malloc_type_calloc(1uLL, v13, 0x4E0FB8CBuLL);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 + 4;
        *uint64_t v14 = 4;
        v14[1] = v13;
        int v17 = HIDWORD(__n);
        int v18 = HIDWORD(__n) >> 2;
        void v14[2] = 4;
        unsigned int v14[3] = v18;
        memcpy(v14 + 4, (const void *)a3, 0x800uLL);
        *((void *)v15 + 258) = *(void *)(a3 + 2048);
        *((void *)v15 + 258) = *(void *)(a3 + 2048);
        *((void *)v15 + 259) = *(void *)(a3 + 2056);
        v15[520] = *(_DWORD *)(a3 + 2064);
        v15[521] = *(_DWORD *)(a3 + 2068);
        v15[522] = *(_DWORD *)(a3 + 2072);
        v15[523] = *(_DWORD *)(a3 + 2076);
        v15[524] = *(_DWORD *)(a3 + 2080);
        v15[525] = *(_DWORD *)(a3 + 2084);
        v15[526] = *(_DWORD *)(a3 + 2088);
        v15[527] = *(_DWORD *)(a3 + 2092);
        v15[528] = *(_DWORD *)(a3 + 2096);
        v15[529] = *(_DWORD *)(a3 + 2100);
        *((void *)v15 + 266) = *(void *)(a3 + 2112);
        *((void *)v15 + 267) = *(void *)(a3 + 2120);
        *((void *)v15 + 268) = *(void *)(a3 + 2128);
        *((void *)v15 + 269) = *(void *)(a3 + 2136);
        v15[540] = *(_DWORD *)(a3 + 2144);
        memcpy(v15 + 542, (const void *)(a3 + 2152), __n);
        BOOL v19 = v23;
        *(void *)uint64_t v23 = v15;
        *((void *)v19 + 1) = v16;
        if (*a2)
        {
          uint64_t v20 = (v17 + 16);
          v15[530] = v20;
          strcpy((char *)v15 + v20, *a2);
        }
        else
        {
          v15[530] = 0;
        }
        ZinComputeMutableProgramUpdateWithOperation((void *)a1, a2, (uint64_t)v19, v13);
        uint64_t v8 = 0;
        if (a4) {
          *a4 = v19;
        }
      }
      else
      {
        if (v23)
        {
          ZinComputeProcedureMutableOperation::~ZinComputeProcedureMutableOperation(v23);
          MEMORY[0x21667D3C0](v21);
        }
        return 1;
      }
    }
  }
  return v8;
}

uint64_t ZinComputeMutableProgramAddSneOperation(uint64_t a1, const char **a2, _DWORD *a3, uint64_t *a4, ZinComputeProcedureMutableOperation **a5)
{
  if (!a3) {
    return 3;
  }
  long long v50 = 0;
  uint64_t v10 = ZinComputeMutableProgramAddOperation(a1);
  if (!v10)
  {
    uint64_t v45 = a5;
    int v46 = (void *)a1;
    if (*a2) {
      unsigned int v11 = SymStrlen(*a2) + 1;
    }
    else {
      unsigned int v11 = 0;
    }
    std::string __p = 0;
    long long v48 = 0;
    int v49 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = a4[1];
    if (*a4 == v13) {
      goto LABEL_32;
    }
    unsigned int v43 = v11;
    do
    {
      uint64_t v14 = (const char *)v12;
      if (*(char *)(v12 + 23) < 0) {
        uint64_t v14 = *(const char **)v12;
      }
      int v15 = SymStrlen(v14) + 1;
      uint64_t v16 = v48;
      if (v48 >= v49)
      {
        int v18 = __p;
        uint64_t v19 = (v48 - __p) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v49 - __p;
        if ((v49 - __p) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v49, v22);
          int v18 = __p;
          uint64_t v16 = v48;
        }
        else
        {
          uint64_t v23 = 0;
        }
        unint64_t v24 = &v23[4 * v19];
        *(_DWORD *)unint64_t v24 = v15;
        int v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        std::string __p = v24;
        int v49 = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)long long v48 = v15;
        int v17 = v48 + 4;
      }
      long long v48 = v17;
      v12 += 24;
    }
    while (v12 != v13);
    long long v26 = __p;
    unsigned int v11 = v43;
    if (__p == v17)
    {
LABEL_32:
      int v27 = 0;
    }
    else
    {
      int v27 = 0;
      do
      {
        int v28 = *(_DWORD *)v26;
        v26 += 4;
        v27 += v28;
      }
      while (v26 != v17);
    }
    unsigned int v29 = ((v11 + v27 + 7) & 0xFFFFFFF8) + 296;
    uint64_t v30 = malloc_type_calloc(1uLL, v29, 0xECC5A0A1uLL);
    unint64_t v31 = v30;
    if (!v30)
    {
      if (v50)
      {
        ZinComputeProcedureMutableOperation::~ZinComputeProcedureMutableOperation(v50);
        MEMORY[0x21667D3C0]();
      }
      uint64_t v10 = 1;
      goto LABEL_52;
    }
    *uint64_t v30 = 4;
    v30[1] = v29;
    int v42 = v29;
    *((void *)v30 + 1) = 0x4600000006;
    v30[4] = *a3;
    memcpy(v30 + 6, a3 + 2, 0x110uLL);
    BOOL v32 = v50;
    *(void *)long long v50 = v31;
    *((void *)v32 + 1) = v31 + 4;
    int v44 = v32;
    if (*a2)
    {
      v31[5] = 296;
      strncpy((char *)v31 + 296, *a2, v11);
      unsigned int v33 = v11 + 296;
    }
    else
    {
      v31[5] = 0;
      unsigned int v33 = 296;
    }
    unint64_t v34 = v31[9];
    if (v34)
    {
      unint64_t v35 = 0;
      int v36 = 0;
      uint64_t v37 = v31 + 12;
      do
      {
        if (*(v37 - 2) <= 2)
        {
          if (v36 >= (unint64_t)((v48 - __p) >> 2))
          {
            ZinComputeProcedureMutableOperation::~ZinComputeProcedureMutableOperation(v44);
            MEMORY[0x21667D3C0](v40);
LABEL_51:
            uint64_t v10 = 0;
            goto LABEL_52;
          }
          unsigned int *v37 = v33;
          uint64_t v38 = *a4 + 24 * v36;
          if (*(char *)(v38 + 23) < 0) {
            uint64_t v38 = *(void *)v38;
          }
          unsigned int v39 = *(_DWORD *)&__p[4 * v36];
          strncpy((char *)v31 + v33, (const char *)v38, v39);
          v33 += v39;
          ++v36;
          unint64_t v34 = v31[9];
        }
        v37 += 4;
        ++v35;
      }
      while (v35 < v34);
    }
    ZinComputeMutableProgramUpdateWithOperation(v46, a2, (uint64_t)v44, v42);
    if (!v45) {
      goto LABEL_51;
    }
    uint64_t v10 = 0;
    void *v45 = v44;
LABEL_52:
    if (__p) {
      operator delete(__p);
    }
  }
  return v10;
}

void sub_211339040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinComputeProgramGetSymbolVariableNamesFromSNEThread(uint64_t a1, _DWORD *a2, std::vector<std::string> *a3)
{
  if (!a1) {
    return 3;
  }
  uint64_t result = 3;
  if (a2 && *(_DWORD *)(a1 + 8) == 6 && *a2 == 1)
  {
    unint64_t v6 = a2[5];
    if (v6)
    {
      unint64_t v8 = 0;
      p_end_cap = (std::allocator<std::string> *)&a3->__end_cap_;
      uint64_t v10 = a2 + 8;
      do
      {
        if (*(v10 - 2) <= 2)
        {
          uint64_t v11 = *v10;
          if (v11)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)(a1 + v11));
            std::vector<std::string>::pointer end = a3->__end_;
            value = a3->__end_cap_.__value_;
            if (end >= value)
            {
              unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a3->__begin_) >> 3);
              unint64_t v16 = v15 + 1;
              if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a3->__begin_) >> 3);
              if (2 * v17 > v16) {
                unint64_t v16 = 2 * v17;
              }
              if (v17 >= 0x555555555555555) {
                unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v18 = v16;
              }
              __v.__end_cap_.__value_ = p_end_cap;
              if (v18) {
                uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v18);
              }
              else {
                uint64_t v19 = 0;
              }
              unint64_t v20 = v19 + v15;
              __v.__first_ = v19;
              __v.__begin_ = v20;
              __v.__end_cap_.__value_ = &v19[v18];
              long long v21 = *(_OWORD *)__p;
              v20->__r_.__value_.__r.__words[2] = v25;
              *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
              __p[1] = 0;
              std::string::size_type v25 = 0;
              __p[0] = 0;
              __v.__end_ = v20 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(a3, &__v);
              unint64_t v22 = a3->__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              int v23 = SHIBYTE(v25);
              a3->__end_ = v22;
              if (v23 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v14 = *(_OWORD *)__p;
              end->__r_.__value_.__r.__words[2] = v25;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v14;
              a3->__end_ = end + 1;
            }
            unint64_t v6 = a2[5];
          }
        }
        v10 += 4;
        ++v8;
      }
      while (v8 < v6);
    }
    return 0;
  }
  return result;
}

void sub_21133922C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinComputeMutableProgramAddAneAotMetadataOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a3) {
    operator new();
  }
  return 3;
}

void ZinComputeProcedureMutableJitOperation::~ZinComputeProcedureMutableJitOperation(ZinComputeProcedureMutableJitOperation *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

uint64_t ZinComputeMutableProgramAddFvmlib(char **a1, uint64_t a2, uint64_t a3, const char *a4, void *a5)
{
  if (!a1) {
    return 3;
  }
  if (a2)
  {
    char v10 = ZinComputeMutableProgramContainsSection<ZinComputeMutableProgram>((uint64_t)a1, a2);
    uint64_t v11 = 3;
    if (!a4 || (v10 & 1) == 0) {
      return v11;
    }
  }
  else if (!a4)
  {
    return 3;
  }
  if (strnlen(a4, 0x400uLL) > 0x3FF) {
    return 3;
  }
  uint64_t v13 = a1 + 8;
  if ((unint64_t)(a1[9] - a1[8]) >= 0x7F1)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinComputeMutableProgramAddFvmlib();
    }
    return 1;
  }
  uint64_t v11 = 1;
  long long v14 = malloc_type_calloc(1uLL, 0x18uLL, 0x70040305B5C43uLL);
  if (!v14) {
    return v11;
  }
  unint64_t v15 = v14;
  size_t v16 = strnlen(a4, 0x400uLL);
  unint64_t v17 = malloc_type_calloc(1uLL, (v16 & 0xFFFFFFFFFFFFFFF8) + 32, 0xB90CDA20uLL);
  *unint64_t v15 = v17;
  if (!v17)
  {
    free(v15);
    return 1;
  }
  unint64_t v18 = v17;
  if (a2) {
    int v19 = 64;
  }
  else {
    int v19 = 65;
  }
  *unint64_t v17 = v19;
  int v20 = strnlen(a4, 0x400uLL);
  int v21 = *(_DWORD *)(a3 + 4);
  v18[1] = (v20 & 0xFFFFFFF8) + 32;
  void v18[2] = 24;
  v18[3] = v21;
  strcpy((char *)(*v15 + 24), a4);
  v15[1] = *v15 + 24;
  _OWORD v15[2] = a2;
  unint64_t v22 = (unint64_t)a1[10];
  int v23 = a1[9];
  if ((unint64_t)v23 >= v22)
  {
    uint64_t v25 = (v23 - *v13) >> 3;
    if ((unint64_t)(v25 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v22 - (void)*v13;
    uint64_t v27 = v26 >> 2;
    if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
      uint64_t v27 = v25 + 1;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28) {
      unsigned int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 10), v28);
    }
    else {
      unsigned int v29 = 0;
    }
    uint64_t v30 = &v29[8 * v25];
    unint64_t v31 = &v29[8 * v28];
    *(void *)uint64_t v30 = v15;
    unint64_t v24 = v30 + 8;
    unsigned int v33 = a1[8];
    BOOL v32 = a1[9];
    if (v32 != v33)
    {
      do
      {
        uint64_t v34 = *((void *)v32 - 1);
        v32 -= 8;
        *((void *)v30 - 1) = v34;
        v30 -= 8;
      }
      while (v32 != v33);
      BOOL v32 = *v13;
    }
    a1[8] = v30;
    a1[9] = v24;
    a1[10] = v31;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    *(void *)int v23 = v15;
    unint64_t v24 = v23 + 8;
  }
  a1[9] = v24;
  unint64_t v35 = *a1;
  int v36 = *((_DWORD *)*a1 + 5) + *(_DWORD *)(*v15 + 4);
  *((_DWORD *)v35 + 4) = *((_DWORD *)*a1 + 4) + 1;
  *((_DWORD *)v35 + 5) = v36;
  uint64_t v11 = 0;
  if (a5) {
    *a5 = v15;
  }
  return v11;
}

uint64_t ZinComputeMutableProgramAddProcedure(uint64_t a1, char *__s1, const char ***a3)
{
  if (!a1 || __s1 && strnlen(__s1, 0x200uLL) > 0x1FF) {
    return 3;
  }
  uint64_t v7 = *(const char ****)(a1 + 160);
  unint64_t v8 = *(const char ****)(a1 + 168);
  while (1)
  {
    if (v7 == v8) {
      operator new();
    }
    unint64_t v9 = *v7;
    char v10 = **v7;
    if (__s1) {
      break;
    }
    if (!v10) {
      goto LABEL_14;
    }
LABEL_12:
    ++v7;
  }
  if (!v10 || strncmp(__s1, v10, 0x200uLL)) {
    goto LABEL_12;
  }
LABEL_14:
  uint64_t result = 0;
  if (a3) {
    *a3 = v9;
  }
  return result;
}

uint64_t ZinComputeMutableProgramAddAneSinglePlaneCompressedBinding(void *a1, _DWORD *a2, const char *a3, const char *a4, const char *a5, const char *a6, int a7, const char ***a8)
{
  size_t v16 = (char *)operator new(0x20uLL);
  v32[1] = (const char **)(v16 + 32);
  v32[2] = (const char **)(v16 + 32);
  *(void *)size_t v16 = a4;
  *((void *)v16 + 1) = a3;
  *((void *)v16 + 2) = a5;
  *((void *)v16 + 3) = a6;
  v32[0] = (const char **)v16;
  unsigned int v17 = StringsAreValid(v32);
  operator delete(v16);
  uint64_t result = 3;
  if (a2 && v17)
  {
    int v19 = a7 ? 6 : 1;
    if (a1 && *a2 == v19)
    {
      unint64_t v31 = a8;
      int v20 = SymStrlen(a3);
      int v21 = SymStrlen(a4) + 1;
      int v22 = SymStrlen(a5) + 1;
      int v23 = SymStrlen(a6);
      v32[0] = 0;
      if (AddBindingAllocateBindingAndThread(a2, (v20 + v21 + v22 + v23 + 9) & 0xFFFFFFF8, a3, v32))
      {
        return 1;
      }
      else
      {
        unint64_t v24 = v32[0];
        uint64_t v25 = v32[0][2];
        int v26 = v20 + *((_DWORD *)v25 + 2);
        uint64_t v27 = (uint64_t)*v32[0];
        uint64_t v28 = (v26 + 1);
        *((_DWORD *)v25 + 4) = v28;
        int v29 = v28 + v21;
        if (a7)
        {
          *((_DWORD *)v25 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v29;
          uint64_t v30 = (unsigned int *)(v25 + 40);
        }
        else
        {
          *((_DWORD *)v25 + 8) = v29;
          uint64_t v30 = (unsigned int *)(v25 + 32);
        }
        _OWORD v30[6] = v28 + v21 + v22;
        strcpy((char *)(v27 + v28), a4);
        strcpy((char *)(v27 + *v30), a5);
        strcpy((char *)(v27 + v30[6]), a6);
        v24[1] = (const char *)(v27 + *((unsigned int *)v25 + 4));
        AddBindingToProgram(a1, (uint64_t)v24);
        uint64_t result = 0;
        if (v31) {
          *unint64_t v31 = v24;
        }
      }
    }
  }
  return result;
}

const char *StringsAreValid(const char ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  while (1)
  {
    if (v1 == v2) {
      return (const char *)1;
    }
    uint64_t result = *v1;
    if (!*v1) {
      return result;
    }
    if (strnlen(result, 0x200uLL) == 512) {
      break;
    }
    ++v1;
  }
  return 0;
}

uint64_t AddBindingAllocateBindingAndThread(const void *a1, int a2, const char *a3, void *a4)
{
  unint64_t v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x70040305B5C43uLL);
  if (v8)
  {
    unint64_t v9 = v8;
    int v10 = a2 + 3384;
    uint64_t v11 = (char *)malloc_type_calloc(1uLL, (a2 + 3384), 0xFE10AA5AuLL);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = v11 + 16;
      *(_DWORD *)uint64_t v12 = 4;
      *((_DWORD *)v12 + 1) = v10;
      *((void *)v12 + 1) = 0x34A00000003;
      v9[2] = v13;
      *unint64_t v9 = v12;
      memcpy(v13, a1, 0xD28uLL);
      *((_DWORD *)v12 + 6) = 3384;
      strcpy(v12 + 3384, a3);
      uint64_t result = 0;
      *a4 = v9;
      return result;
    }
    free(v9);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v17 = 0;
      unint64_t v15 = &_os_log_internal;
      size_t v16 = (uint8_t *)&v17;
      goto LABEL_8;
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v18 = 0;
    unint64_t v15 = &_os_log_internal;
    size_t v16 = (uint8_t *)&v18;
LABEL_8:
    _os_log_impl(&dword_210C72000, v15, OS_LOG_TYPE_DEFAULT, "calloc failed in AddBindingCreateNewThread", v16, 2u);
  }
  return 1;
}

void AddBindingToProgram(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[19];
  uint64_t v4 = (uint64_t)(a1 + 19);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    size_t v16 = &v15[8 * v11];
    __int16 v17 = &v15[8 * v14];
    *(void *)size_t v16 = a2;
    unint64_t v8 = v16 + 8;
    int v19 = (char *)a1[17];
    __int16 v18 = (char *)a1[18];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      __int16 v18 = (char *)*v9;
    }
    a1[17] = v16;
    a1[18] = v8;
    a1[19] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    unint64_t v8 = v7 + 1;
  }
  a1[18] = v8;
  uint64_t v21 = *a1;
  int v22 = *(_DWORD *)(*a1 + 20) + *(_DWORD *)(*(void *)a2 + 4);
  *(_DWORD *)(v21 + 16) = *(_DWORD *)(*a1 + 16) + 1;
  *(_DWORD *)(v21 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v22;
}

uint64_t ZinComputeMutableProgramAddAneMultiPlaneCompressedBinding(void *a1, unsigned int *a2, char *a3, char *a4, const char **a5, const char **a6, const char ***a7)
{
  unint64_t v14 = operator new(0x10uLL);
  uint64_t v55 = (char *)(v14 + 2);
  long long v56 = (char *)(v14 + 2);
  *unint64_t v14 = a4;
  v14[1] = a3;
  uint64_t v54 = (const char **)v14;
  unsigned int v15 = StringsAreValid(&v54);
  operator delete(v14);
  uint64_t result = 3;
  if (a2 && v15 && a1 && *a2 == 5)
  {
    uint64_t v17 = a2[8];
    if (v17 > 4)
    {
      BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v18) {
        ZinComputeProgramValidateNamesFromMultiPlaneLinear_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      return 3;
    }
    __src = a4;
    long long v53 = a3;
    int v49 = a1;
    long long v50 = a7;
    if (v17)
    {
      uint64_t v26 = a2[8];
      uint64_t v27 = a6;
      uint64_t v28 = a5;
      do
      {
        int v29 = *v28;
        uint64_t v30 = *v27;
        unint64_t v31 = operator new(0x10uLL);
        uint64_t v55 = (char *)(v31 + 2);
        long long v56 = (char *)(v31 + 2);
        *unint64_t v31 = v29;
        v31[1] = v30;
        uint64_t v54 = (const char **)v31;
        LOBYTE(v29) = StringsAreValid(&v54);
        operator delete(v31);
        if ((v29 & 1) == 0) {
          return 3;
        }
        ++v28;
        ++v27;
      }
      while (--v26);
    }
    int v51 = SymStrlen(v53);
    int v32 = SymStrlen(__src) + 1;
    int v33 = 0;
    if (v17)
    {
      uint64_t v34 = v17;
      unint64_t v35 = a6;
      int v36 = a5;
      do
      {
        uint64_t v37 = *v36++;
        int v38 = SymStrlen(v37);
        unsigned int v39 = *v35++;
        v33 += v38 + SymStrlen(v39) + 2;
        --v34;
      }
      while (v34);
    }
    uint64_t v54 = 0;
    if (AddBindingAllocateBindingAndThread(a2, (v51 + v32 + v33 + 8) & 0xFFFFFFF8, v53, &v54))
    {
      return 1;
    }
    else
    {
      uint64_t v40 = v54;
      uint64_t v41 = *v54;
      int v42 = v54[2];
      uint64_t v43 = (*((_DWORD *)v42 + 2) + v51 + 1);
      *((_DWORD *)v42 + 4) = v43;
      strcpy((char *)&v41[v43], __src);
      if (v17)
      {
        int v44 = *((_DWORD *)v42 + 4) + v32;
        uint64_t v45 = v42 + 40;
        do
        {
          _DWORD *v45 = v44;
          strcpy((char *)&v41[v44], *a5);
          int v46 = *a5++;
          uint64_t v47 = v44 + SymStrlen(v46) + 1;
          v45[6] = v47;
          strcpy((char *)&v41[v47], *a6);
          long long v48 = *a6++;
          int v44 = v47 + SymStrlen(v48) + 1;
          v45 += 12;
          --v17;
        }
        while (v17);
      }
      v40[1] = &v41[*((unsigned int *)v42 + 4)];
      AddBindingToProgram(v49, (uint64_t)v40);
      uint64_t result = 0;
      if (v50) {
        ZinComputeProcedureMutableOperation *v50 = v40;
      }
    }
  }
  return result;
}

uint64_t ZinComputeMutableProgramAddAneSinglePlaneUncompressedBinding(void *a1, _DWORD *a2, const char *a3, const char *a4, const char *a5, const char ***a6)
{
  uint64_t v12 = (char *)operator new(0x18uLL);
  v23[1] = (const char **)(v12 + 24);
  void v23[2] = (const char **)(v12 + 24);
  *(void *)uint64_t v12 = a4;
  *((void *)v12 + 1) = a3;
  *((void *)v12 + 2) = a5;
  v23[0] = (const char **)v12;
  unsigned int v13 = StringsAreValid(v23);
  operator delete(v12);
  uint64_t result = 3;
  if (v13 && a1 && (*a2 & 0xFFFFFFFE) == 2)
  {
    int v15 = SymStrlen(a3);
    int v16 = SymStrlen(a4) + 1;
    int v17 = SymStrlen(a5);
    v23[0] = 0;
    if (AddBindingAllocateBindingAndThread(a2, (v15 + v17 + v16 + 9) & 0xFFFFFFF8, a3, v23))
    {
      return 1;
    }
    else
    {
      BOOL v18 = v23[0];
      uint64_t v19 = v23[0][2];
      int v20 = v15 + *((_DWORD *)v19 + 2);
      uint64_t v21 = (uint64_t)*v23[0];
      uint64_t v22 = (v20 + 1);
      *((_DWORD *)v19 + 4) = v22;
      *((_DWORD *)v19 + 27) = v22 + v16;
      strcpy((char *)(v21 + v22), a4);
      strcpy((char *)(v21 + *((unsigned int *)v19 + 27)), a5);
      v18[1] = (const char *)(v21 + *((unsigned int *)v19 + 4));
      AddBindingToProgram(a1, (uint64_t)v18);
      uint64_t result = 0;
      if (a6) {
        *a6 = v18;
      }
    }
  }
  return result;
}

uint64_t ZinComputeMutableProgramAddAneMultiPlaneUncompressedBinding(void *a1, unsigned int *a2, const char *a3, const char *a4, const char **a5, const char ***a6)
{
  uint64_t v12 = (const char **)operator new(0x10uLL);
  int v49 = v12 + 2;
  long long v50 = v12 + 2;
  *uint64_t v12 = a4;
  v12[1] = a3;
  long long v48 = v12;
  unsigned int v13 = StringsAreValid(&v48);
  operator delete(v12);
  uint64_t result = 3;
  if (a2 && v13 && a1 && *a2 == 4)
  {
    uint64_t v15 = a2[8];
    if (v15 > 4)
    {
      BOOL v16 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v16) {
        ZinComputeProgramValidateNamesFromMultiPlaneLinear_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      return 3;
    }
    int v46 = a1;
    uint64_t v47 = a6;
    if (v15)
    {
      uint64_t v24 = a2[8];
      uint64_t v25 = a5;
      do
      {
        uint64_t v26 = *v25;
        uint64_t v27 = (const char **)operator new(8uLL);
        *uint64_t v27 = v26;
        int v49 = v27 + 1;
        long long v50 = v27 + 1;
        long long v48 = v27;
        unsigned __int8 v28 = StringsAreValid(&v48);
        operator delete(v27);
        if ((v28 & 1) == 0) {
          return 3;
        }
        ++v25;
      }
      while (--v24);
    }
    int v29 = SymStrlen(a3);
    int v30 = SymStrlen(a4) + 1;
    int v31 = 0;
    if (v15)
    {
      uint64_t v32 = v15;
      int v33 = a5;
      do
      {
        uint64_t v34 = *v33++;
        v31 += SymStrlen(v34) + 1;
        --v32;
      }
      while (v32);
    }
    long long v48 = 0;
    if (AddBindingAllocateBindingAndThread(a2, (v29 + v30 + v31 + 8) & 0xFFFFFFF8, a3, &v48))
    {
      return 1;
    }
    else
    {
      int v35 = v29 + 1;
      int v36 = v48;
      uint64_t v37 = *v48;
      int v38 = v48[2];
      uint64_t v39 = (*((_DWORD *)v38 + 2) + v35);
      *((_DWORD *)v38 + 4) = v39;
      strcpy((char *)&v37[v39], a4);
      int v40 = *((_DWORD *)v38 + 4);
      if (v15)
      {
        int v41 = v40 + v30;
        int v42 = v38 + 124;
        int v44 = v46;
        uint64_t v43 = v47;
        do
        {
          *int v42 = v41;
          v42 += 26;
          strcpy((char *)&v37[v41], *a5);
          uint64_t v45 = *a5++;
          v41 += SymStrlen(v45) + 1;
          --v15;
        }
        while (v15);
        int v40 = *((_DWORD *)v38 + 4);
      }
      else
      {
        int v44 = v46;
        uint64_t v43 = v47;
      }
      v36[1] = &v37[v40];
      AddBindingToProgram(v44, (uint64_t)v36);
      uint64_t result = 0;
      if (v43) {
        *uint64_t v43 = v36;
      }
    }
  }
  return result;
}

uint64_t ZinComputeMutableProgramAddAneLiveInParamBinding(void *a1, _DWORD *a2, const char *a3, const char *a4, const char ***a5)
{
  uint64_t v10 = (char *)operator new(0x10uLL);
  v19[1] = (const char **)(v10 + 16);
  v19[2] = (const char **)(v10 + 16);
  *(void *)uint64_t v10 = a4;
  *((void *)v10 + 1) = a3;
  v19[0] = (const char **)v10;
  unsigned int v11 = StringsAreValid(v19);
  operator delete(v10);
  uint64_t result = 3;
  if (a2 && v11 && a1 && *a2 == 7)
  {
    int v13 = SymStrlen(a3) + 1;
    int v14 = SymStrlen(a4);
    v19[0] = 0;
    if (AddBindingAllocateBindingAndThread(a2, (v14 + v13 + 8) & 0xFFFFFFF8, a3, v19))
    {
      return 1;
    }
    else
    {
      uint64_t v15 = v19[0];
      uint64_t v16 = (uint64_t)*v19[0];
      uint64_t v17 = v19[0][2];
      uint64_t v18 = (*((_DWORD *)v17 + 2) + v13);
      *((_DWORD *)v17 + 4) = v18;
      strcpy((char *)(v16 + v18), a4);
      v15[1] = (const char *)(v16 + *((unsigned int *)v17 + 4));
      AddBindingToProgram(a1, (uint64_t)v15);
      uint64_t result = 0;
      if (a5) {
        *a5 = v15;
      }
    }
  }
  return result;
}

uint64_t ZinComputeProcedureMutableAneOperation::SetBarSymbol(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(result + 8 * a2 + 16) = a3;
  return result;
}

uint64_t ZinComputeProcedureMutableAneOperation::GetBarSymbol(ZinComputeProcedureMutableAneOperation *this, unsigned int a2)
{
  return *((void *)this + a2 + 2);
}

void ZinComputeProcedureMutableOperation::~ZinComputeProcedureMutableOperation(ZinComputeProcedureMutableOperation *this)
{
  uint64_t v2 = *(_DWORD **)this;
  if (v2)
  {
    if (v2[2] == 2)
    {
      unint64_t v3 = (void *)*((void *)this + 2);
      if (v3)
      {
        *((void *)this + 3) = v3;
        operator delete(v3);
        uint64_t v2 = *(_DWORD **)this;
      }
    }
    free(v2);
    *(void *)this = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 262);
  if (v4)
  {
    *((void *)this + 263) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 259);
  if (v5)
  {
    *((void *)this + 26std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
    operator delete(v5);
  }
}

uint64_t ZinComputeMutableProgramCoalesceProcedure(void *a1, uint64_t a2)
{
  uint64_t v4 = *(char **)a2;
  if (a1 && v4)
  {
    unint64_t v5 = (const char ***)a1[20];
    unint64_t v6 = (const char ***)a1[21];
    while (v5 != v6)
    {
      uint64_t v7 = *v5;
      unint64_t v8 = **v5;
      if (v8 && !strncmp(v8, v4, 0x200uLL))
      {
        uint64_t v22 = v7;
        goto LABEL_11;
      }
      ++v5;
    }
  }
  uint64_t v22 = 0;
  uint64_t SymbolVariableNamesFromSNEThread = ZinComputeMutableProgramAddProcedure((uint64_t)a1, v4, &v22);
  if (!SymbolVariableNamesFromSNEThread)
  {
LABEL_11:
    uint64_t v10 = *(uint64_t ***)(a2 + 32);
    for (uint64_t i = *(uint64_t ***)(a2 + 40); v10 != i; ++v10)
    {
      uint64_t v12 = *v10;
      uint64_t v21 = 0;
      if (*(_DWORD *)(*a1 + 4) != 128) {
        return 3;
      }
      int v13 = *(_DWORD *)(*v12 + 8);
      if (v13 == 6)
      {
        memset(&v20, 0, sizeof(v20));
        uint64_t SymbolVariableNamesFromSNEThread = ZinComputeProgramGetSymbolVariableNamesFromSNEThread(*v12, (_DWORD *)v12[1], &v20);
        if (SymbolVariableNamesFromSNEThread)
        {
          uint64_t v23 = &v20;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
          return SymbolVariableNamesFromSNEThread;
        }
        uint64_t SymbolVariableNamesFromSNEThread = ZinComputeMutableProgramAddSneOperation((uint64_t)a1, v22, (_DWORD *)v12[1], (uint64_t *)&v20, &v21);
        uint64_t v23 = &v20;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      }
      else
      {
        if (v13 == 4)
        {
          uint64_t v14 = ZinComputeMutableProgramAddAneSegmentOperation((uint64_t)a1, v22, v12[1], &v21);
        }
        else
        {
          if (v13 != 1) {
            return 3;
          }
          uint64_t v14 = ZinComputeMutableProgramAddAneTDOperation((uint64_t)a1, v22, v12[1], &v21);
        }
        uint64_t SymbolVariableNamesFromSNEThread = v14;
      }
      if (SymbolVariableNamesFromSNEThread) {
        return SymbolVariableNamesFromSNEThread;
      }
    }
    uint64_t v16 = *(uint64_t ***)(a2 + 56);
    uint64_t v15 = *(uint64_t ***)(a2 + 64);
    while (1)
    {
      if (v16 == v15) {
        return 0;
      }
      uint64_t v17 = *v16;
      v20.__begin_ = 0;
      if (*(_DWORD *)(*a1 + 4) != 128 || *(_DWORD *)(*v17 + 8) != 5) {
        return 3;
      }
      uint64_t v18 = ZinComputeMutableProgramAddAneAotMetadataOperation((uint64_t)a1, (uint64_t)v22, v17[1]);
      if (v18) {
        break;
      }
      ++v16;
    }
    return v18;
  }
  return SymbolVariableNamesFromSNEThread;
}

void sub_21133A7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t ZinComputeMutableProgramCoalesceBinding(void *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  if (*(_DWORD *)(*a1 + 4) != 128) {
    return 3;
  }
  uint64_t result = ZinComputeProgramGetProcedureNameFromLCThread(*(void *)a2, *(_DWORD **)(a2 + 16), &v15);
  if (!result)
  {
    unint64_t v5 = *(_DWORD **)(a2 + 16);
    switch(*v5)
    {
      case 1:
        *(void *)&long long v17 = 0;
        *(void *)&v16[0] = 0;
        uint64_t v14 = 0;
        if (ZinComputeProgramGetNamesFromSinglePlaneTiledCompressed(*(void *)a2, v5 + 4, &v17, v16, &v14))ZinAssertImpl("ZinComputeProgramGetNamesFromSinglePlaneTiledCompressed failed"); {
        unint64_t v6 = *(_DWORD **)(a2 + 16);
        }
        uint64_t v7 = v15;
        unint64_t v8 = *(const char **)&v16[0];
        unint64_t v9 = (const char *)v17;
        uint64_t v10 = v14;
        unsigned int v11 = a1;
        int v12 = 0;
        return ZinComputeMutableProgramAddAneSinglePlaneCompressedBinding(v11, v6, v7, v9, v8, v10, v12, 0);
      case 2:
      case 3:
        *(void *)&long long v17 = 0;
        *(void *)&v16[0] = 0;
        if (ZinComputeProgramGetNamesFromSinglePlaneUncompressed(*(void *)a2, v5, &v17, v16)) {
          ZinAssertImpl("ZinComputeProgramGetNamesFromSinglePlaneUncompressed failed");
        }
        return ZinComputeMutableProgramAddAneSinglePlaneUncompressedBinding(a1, *(_DWORD **)(a2 + 16), v15, (const char *)v17, *(const char **)&v16[0], 0);
      case 4:
        *(void *)&v16[0] = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        LODWORD(v14) = 0;
        if (ZinComputeProgramGetNamesFromMultiPlaneLinear(*(void *)a2, v5 + 4, v16, (unsigned int *)&v14, &v17))ZinAssertImpl("ZinComputeProgramGetNamesFromMultiPlaneLinear failed"); {
        return ZinComputeMutableProgramAddAneMultiPlaneUncompressedBinding(a1, *(unsigned int **)(a2 + 16), v15, *(const char **)&v16[0], (const char **)&v17, 0);
        }
      case 5:
        uint64_t v14 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        memset(v16, 0, sizeof(v16));
        int v13 = 0;
        if (ZinComputeProgramGetNamesFromMultiPlaneTiledCompressed(*(void *)a2, v5 + 4, &v14, &v13, &v17, v16))ZinAssertImpl("ZinComputeProgramGetNamesFromMultiPlaneTiledCompressed failed"); {
        return ZinComputeMutableProgramAddAneMultiPlaneCompressedBinding(a1, *(unsigned int **)(a2 + 16), v15, v14, (const char **)&v17, (const char **)v16, 0);
        }
      case 6:
        *(void *)&long long v17 = 0;
        *(void *)&v16[0] = 0;
        uint64_t v14 = 0;
        if (ZinComputeProgramGetNamesFromSinglePlaneTiledCompressedMultislice(*(void *)a2, v5 + 4, &v17, v16, &v14))goto LABEL_22; {
        unint64_t v6 = *(_DWORD **)(a2 + 16);
        }
        uint64_t v7 = v15;
        unint64_t v8 = *(const char **)&v16[0];
        unint64_t v9 = (const char *)v17;
        uint64_t v10 = v14;
        unsigned int v11 = a1;
        int v12 = 1;
        return ZinComputeMutableProgramAddAneSinglePlaneCompressedBinding(v11, v6, v7, v9, v8, v10, v12, 0);
      case 7:
        *(void *)&long long v17 = 0;
        if (ZinComputeProgramGetParamNameFromBinding(*(void *)a2, v5, &v17)) {
LABEL_22:
        }
          ZinAssertImpl("ZinComputeProgramGetNamesFromSinglePlaneTiledCompressedMultislice failed");
        return ZinComputeMutableProgramAddAneLiveInParamBinding(a1, *(_DWORD **)(a2 + 16), v15, (const char *)v17, 0);
      default:
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinComputeMutableProgramCoalesceBinding((int)v16);
        }
        return 3;
    }
  }
  return result;
}

uint64_t ZinComputeProgramSetOperationBarInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 5;
  if (a2 && a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2 + 24;
    unint64_t v8 = &_os_log_internal;
    do
    {
      unint64_t v9 = *(uint64_t **)(v7 + v6);
      if (v9)
      {
        uint64_t v10 = v9[4];
        if (*(_DWORD *)(*(void *)a1 + 12) == 1)
        {
          *(void *)(a3 + v6) = ZinComputeMutableProgramGetSectionIndex<ZinComputeMutableProgram>(a1, v9[4]);
        }
        else
        {
          uint64_t v11 = *v9;
          *(void *)(a3 + v6) = *(void *)(v11 + 8);
          uint64_t v12 = *(void *)(*(void *)v10 + 32);
          if (*(void *)(v11 + 8) != v12)
          {
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)int v13 = 0;
              _os_log_debug_impl(&dword_210C72000, v8, OS_LOG_TYPE_DEBUG, "ZinComputeProgramSetOperationBarInfo: symbol address not at start of section.\n", v13, 2u);
              uint64_t v12 = *(void *)(*(void *)v10 + 32);
            }
            *(void *)(a3 + v6) = v12;
          }
        }
      }
      else
      {
        *(void *)(a3 + v6) = 0;
      }
      v6 += 8;
    }
    while (v6 != 2048);
    return 0;
  }
  return result;
}

uint64_t ZinComputeMutableProgramCollectOperationScheduleInfo(uint64_t a1)
{
  v57[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(const void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 - (void)v1 == 8) {
    return 0;
  }
  long long v50 = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v50, v1, v2, (v2 - (uint64_t)v1) >> 3);
  uint64_t v6 = v50;
  unint64_t v5 = v51;
  if (v51 == v50)
  {
    uint64_t AneTDPartitionScheduleInfo = 0;
    if (v51)
    {
LABEL_67:
      int v51 = v5;
      operator delete(v5);
    }
    return AneTDPartitionScheduleInfo;
  }
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = v6[v7];
    int v9 = *(_DWORD *)(*(void *)v8 + 8);
    if (v9 != 4 && v9 != 1) {
      goto LABEL_63;
    }
    *(void *)int v49 = 0;
    uint64_t AneTDPartitionScheduleInfo = ZinComputeProgramGetAneTDPartitionScheduleInfo(0, 0, *(_DWORD **)(v8 + 8), v9, 0, &v49[1], v49, (int (*)[2])v54);
    if (AneTDPartitionScheduleInfo) {
      goto LABEL_72;
    }
    uint64_t v11 = v49[0];
    if (v49[0] != -1) {
      break;
    }
LABEL_62:
    uint64_t v6 = v50;
    unint64_t v5 = v51;
LABEL_63:
    if (++v7 >= (unint64_t)(v5 - v6))
    {
      uint64_t AneTDPartitionScheduleInfo = 0;
      unint64_t v5 = v6;
      if (v6) {
        goto LABEL_67;
      }
      return AneTDPartitionScheduleInfo;
    }
  }
  if (v49[0] < 3u)
  {
    uint64_t v12 = (void **)(v8 + 2072);
    int v13 = *(void **)(v8 + 2072);
    if (v49[0] && (uint64_t)(*(void *)(v8 + 2080) - (void)v13) >> 3 == v49[0])
    {
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = *(void *)(a1 + 32);
        if (*(void *)(a1 + 40) != v15)
        {
          unint64_t v16 = 0;
          int v17 = v54[v14];
          do
          {
            long long v18 = *(uint64_t **)(v15 + 8 * v16);
            uint64_t v20 = *v18;
            long long v19 = (_DWORD *)v18[1];
            v55[0] = 0;
            v53[1] = 0;
            if (ZinComputeProgramGetAneTDPartitionScheduleInfo(0, 0, v19, *(_DWORD *)(v20 + 8), 0, v55, &v53[1], (int (*)[2])__p))BOOL v21 = 1; {
            else
            }
              BOOL v21 = v53[1] == -1;
            if (v21) {
              break;
            }
            if (v55[0] == v17) {
              break;
            }
            ++v16;
            uint64_t v15 = *(void *)(a1 + 32);
          }
          while (v16 < (*(void *)(a1 + 40) - v15) >> 3);
        }
        ++v14;
      }
      while (v14 != v11);
      int v13 = *v12;
    }
    if (v13)
    {
      *(void *)(v8 + 208std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v13;
      operator delete(v13);
      *uint64_t v12 = 0;
      *(void *)(v8 + 208std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v8 + 2088) = 0;
    }
    *(void *)(v8 + 2088) = 0;
    *(_OWORD *)uint64_t v12 = 0u;
    int v22 = v49[1];
    v57[0] = 0;
    long long v48 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v23 = *(void *)(a1 + 32);
    if (*(void *)(a1 + 40) != v23)
    {
      unint64_t v24 = 0;
      while (1)
      {
        long long v25 = *(_DWORD ***)(v23 + 8 * v24);
        *(void *)long long v53 = 0;
        if (ZinComputeProgramGetAneTDPartitionScheduleInfo(0, 0, v25[1], (*v25)[2], 0, &v53[1], v53, (int (*)[2])v55))break; {
        if (v53[0] != -1 && (v55[0] == v22 || v55[1] == v22))
        }
        {
          long long v27 = (char *)__p[1];
          if (__p[1] >= (void *)v57[0])
          {
            int64_t v29 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v29 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v30 = (uint64_t)(v57[0] - (unint64_t)__p[0]) >> 2;
            if (v30 <= v29 + 1) {
              unint64_t v30 = v29 + 1;
            }
            if (v57[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v30;
            }
            if (v31) {
              long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v57, v31);
            }
            else {
              long long v32 = 0;
            }
            uint64_t v33 = &v32[8 * v29];
            *(void *)uint64_t v33 = v25;
            long long v28 = v33 + 8;
            int v35 = (char *)__p[0];
            uint64_t v34 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                uint64_t v36 = *((void *)v34 - 1);
                v34 -= 8;
                *((void *)v33 - 1) = v36;
                v33 -= 8;
              }
              while (v34 != v35);
              uint64_t v34 = (char *)__p[0];
            }
            __p[0] = v33;
            __p[1] = v28;
            v57[0] = &v32[8 * v31];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *(void *)__p[1] = v25;
            long long v28 = v27 + 8;
          }
          __p[1] = v28;
        }
        ++v24;
        uint64_t v23 = *(void *)(a1 + 32);
        if (v24 >= (*(void *)(a1 + 40) - v23) >> 3)
        {
          long long v48 = *(_OWORD *)__p;
          uint64_t v37 = v57[0];
          goto LABEL_59;
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    uint64_t v37 = 0;
LABEL_59:
    int v38 = *(void **)(v8 + 2096);
    if (v38)
    {
      *(void *)(v8 + 2104) = v38;
      operator delete(v38);
      *(void *)(v8 + 2096) = 0;
      *(void *)(v8 + 2104) = 0;
      *(void *)(v8 + 2112) = 0;
    }
    *(_OWORD *)(v8 + 2096) = v48;
    *(void *)(v8 + 2112) = v37;
    goto LABEL_62;
  }
  BOOL v40 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v40) {
    ZinComputeMutableProgramCollectOperationScheduleInfo(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  uint64_t AneTDPartitionScheduleInfo = 5;
LABEL_72:
  unint64_t v5 = v50;
  if (v50) {
    goto LABEL_67;
  }
  return AneTDPartitionScheduleInfo;
}

void sub_21133B018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
}

uint64_t ZinComputeMutableProgramFvmlibsToFile(const ZinComputeMutableProgram *a1, __sFILE *__stream)
{
  uint64_t v2 = *((void *)a1 + 8);
  if (*((void *)a1 + 9) == v2) {
    return 0;
  }
  unint64_t v5 = 0;
  while (1)
  {
    size_t v6 = fwrite(**(const void ***)(v2 + 8 * v5), *(unsigned int *)(**(void **)(v2 + 8 * v5) + 4), 1uLL, __stream);
    if (v6 != 1) {
      break;
    }
    ++v5;
    uint64_t v2 = *((void *)a1 + 8);
    if (v5 >= (*((void *)a1 + 9) - v2) >> 3) {
      return 0;
    }
  }
  uint64_t v8 = v6;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinComputeMutableProgramFvmlibsToFile(v5, v8);
  }
  return 5;
}

uint64_t ZinComputeMutableProgramOperationsToFile(const ZinComputeMutableProgram *a1, __sFILE *__stream)
{
  uint64_t v2 = (const void ***)*((void *)a1 + 11);
  unint64_t v3 = (const void ***)*((void *)a1 + 12);
  if (v2 == v3) {
    return 0;
  }
  while (fwrite(**v2, *((unsigned int *)**v2 + 1), 1uLL, __stream) == 1)
  {
    if (++v2 == v3) {
      return 0;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinComputeMutableProgramOperationsToFile();
  }
  return 5;
}

uint64_t ZinComputeMutableProgramJitOperationsToFile(const ZinComputeMutableProgram *a1, __sFILE *__stream)
{
  uint64_t v2 = *((void *)a1 + 14);
  if (*((void *)a1 + 15) == v2) {
    return 0;
  }
  unint64_t v5 = 0;
  while (fwrite(**(const void ***)(v2 + 8 * v5), *(unsigned int *)(**(void **)(v2 + 8 * v5) + 4), 1uLL, __stream) == 1)
  {
    ++v5;
    uint64_t v2 = *((void *)a1 + 14);
    if (v5 >= (*((void *)a1 + 15) - v2) >> 3) {
      return 0;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinComputeMutableProgramOperationsToFile();
  }
  return 5;
}

uint64_t ZinComputeMutableProgramBindingsToFile(const ZinComputeMutableProgram *a1, __sFILE *__stream)
{
  uint64_t v2 = *((void *)a1 + 17);
  if (*((void *)a1 + 18) == v2) {
    return 0;
  }
  unint64_t v5 = 0;
  while (fwrite(**(const void ***)(v2 + 8 * v5), *(unsigned int *)(**(void **)(v2 + 8 * v5) + 4), 1uLL, __stream) == 1)
  {
    ++v5;
    uint64_t v2 = *((void *)a1 + 17);
    if (v5 >= (*((void *)a1 + 18) - v2) >> 3) {
      return 0;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinComputeMutableProgramBindingsToFile();
  }
  return 5;
}

void ZinComputeMutableProgramAddFvmlib()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  v0[0] = 67109120;
  v0[1] = 255;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Too many fvmlibs (more than %d).", (uint8_t *)v0, 8u);
}

void ZinComputeMutableProgramCoalesceBinding(int a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "ZinComputeMutableProgramCoalesceBinding: invalid binding type %d", (uint8_t *)v1, 8u);
}

void ZinComputeMutableProgramCollectOperationScheduleInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinComputeMutableProgramFvmlibsToFile(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v2 = 134218496;
  uint64_t v3 = a1;
  __int16 v4 = 2048;
  uint64_t v5 = a2;
  __int16 v6 = 2048;
  uint64_t v7 = 1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "ZinComputeMutableProgramToFile: fvmlib[%zu] - wrote %zd items, expected %zd items", (uint8_t *)&v2, 0x20u);
}

void ZinComputeMutableProgramOperationsToFile()
{
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "ZinComputeMutableProgramToFile: operations commands - wrote %zd items, expected %zd items", v1, v2, v3, v4, v5);
}

void ZinComputeMutableProgramBindingsToFile()
{
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "ZinComputeMutableProgramToFile: binding commands - wrote %zd items, expected %zd items", v1, v2, v3, v4, v5);
}

BOOL IsIntegerFormat<ZinTensorFormat>(int a1)
{
  return (a1 - 1) < 2;
}

uint64_t GetZinTensorFormat<__CFString const*>(uint64_t *a1)
{
  return ANECFormatToZinTensorFormat(*a1);
}

uint64_t FormatValidForMutableLayer(unsigned int a1)
{
  return (a1 < 0x1C) & (0xA222216u >> a1);
}

float ANECTensorValueDescToValues(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1[1] * *a1 * a1[2] * a1[3] * a1[4] != 5) {
    ZinAssertImpl("Tensor dimension exceeds max number of elements ANECTensorValueDesc can hold\n");
  }
  for (uint64_t i = 0; i != 20; i += 4)
  {
    float result = *(float *)((char *)a1 + i + 40);
    *(_DWORD *)(a3 + i) = result;
  }
  return result;
}

void *ZinValidator::AssignAlternate<ANECSpaceToChannelLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 20632), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECPoolLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 2640), a2, 0x2A8uLL);
}

void *ZinValidator::AssignAlternate<ANECChannelToSpaceLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 21240), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECInputViewLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 4672), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECPixelShuffleLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 5928), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECInstanceNormLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 3320), a2, 0x280uLL);
}

void *ZinValidator::AssignAlternate<ANECElementWiseLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 17016), a2, 0x228uLL);
}

void *ZinValidator::AssignAlternate<ANECScaledElementWiseLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 17568), a2, 0x208uLL);
}

void *ZinValidator::AssignAlternate<ANECSoftmaxLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 21848), a2, 0x278uLL);
}

void *ZinValidator::AssignAlternate<ANECNeuronLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 13304), a2, 0x270uLL);
}

void *ZinValidator::AssignAlternate<ANECCropResizeLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 3960), a2, 0x2C8uLL);
}

void *ZinValidator::AssignAlternate<ANECDynamicSliceLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 30296), a2, 0x368uLL);
}

void *ZinValidator::AssignAlternate<ANECGatherLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 7160), a2, 0x248uLL);
}

void *ZinValidator::AssignAlternate<ANECDynamicGOCLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 9560), a2, 0x220uLL);
}

void *ZinValidator::AssignAlternate<ANECBroadcastLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 5280), a2, 0x288uLL);
}

void *ZinValidator::AssignAlternate<ANECReshapeLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 6536), a2, 0x270uLL);
}

void *ZinValidator::AssignAlternate<ANECTransposeLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 8888), a2, 0x2A0uLL);
}

char *ZinValidator::AssignAlternate<ANECGOCLayerDescAlternate>(uint64_t a1, void *__src)
{
  unint64_t v4 = *(void *)(a1 + 24888);
  unint64_t v5 = *(void *)(a1 + 24896);
  if (v4 >= v5)
  {
    uint64_t v7 = (void **)(a1 + 24880);
    uint64_t v8 = *(void *)(a1 + 24880);
    uint64_t v9 = 0x14C1BACF914C1BADLL * ((uint64_t)(v4 - v8) >> 4);
    if ((unint64_t)(v9 + 1) > 0x6EB3E45306EB3ELL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x14C1BACF914C1BADLL * ((uint64_t)(v5 - v8) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x3759F22983759FLL) {
      unint64_t v12 = 0x6EB3E45306EB3ELL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANECGOCLayerDescAlternate>>(a1 + 24896, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[592 * v9];
    uint64_t v15 = &v13[592 * v12];
    memcpy(v14, __src, 0x250uLL);
    __int16 v6 = v14 + 592;
    unint64_t v16 = *(char **)(a1 + 24888);
    int v17 = *(char **)(a1 + 24880);
    if (v16 != v17)
    {
      do
      {
        v16 -= 592;
        v14 -= 592;
        memcpy(v14, v16, 0x250uLL);
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*v7;
    }
    *(void *)(a1 + 2488std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v14;
    *(void *)(a1 + 24888) = v6;
    *(void *)(a1 + 24896) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    memcpy(*(void **)(a1 + 24888), __src, 0x250uLL);
    __int16 v6 = (char *)(v4 + 592);
  }
  *(void *)(a1 + 24888) = v6;
  return v6 - 592;
}

void *ZinValidator::AssignAlternate<ANECLRNLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 12664), a2, 0x280uLL);
}

void *ZinValidator::AssignAlternate<ANECNMSLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 29160), a2, 0x230uLL);
}

void *ZinValidator::AssignAlternate<ANECPadLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 18088), a2, 0x2D0uLL);
}

void *ZinValidator::AssignAlternate<ANECSortLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 28024), a2, 0x470uLL);
}

void *ZinValidator::AssignAlternate<ANECTileLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 24256), a2, 0x270uLL);
}

void *ZinValidator::AssignAlternate<ANECTopKLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 7744), a2, 0x478uLL);
}

void *ZinValidator::AssignAlternate<ANECL2NormLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 11400), a2, 0x278uLL);
}

void *ZinValidator::AssignAlternate<ANECResizeLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 24904), a2, 0x298uLL);
}

void *ZinValidator::AssignAlternate<ANECResampleLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 27336), a2, 0x2B0uLL);
}

char *ZinValidator::AssignAlternate<ANECDropoutLayerDescAlternate>(uint64_t a1, void *__src)
{
  unint64_t v4 = *(void *)(a1 + 29728);
  unint64_t v5 = *(void *)(a1 + 29736);
  if (v4 >= v5)
  {
    uint64_t v7 = (void **)(a1 + 29720);
    uint64_t v8 = *(void *)(a1 + 29720);
    unint64_t v9 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - v8) >> 5);
    if (v9 + 1 > 0x6BCA1AF286BCA1) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - v8) >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x35E50D79435E50) {
      unint64_t v12 = 0x6BCA1AF286BCA1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANECDropoutLayerDescAlternate>>(a1 + 29736, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[608 * v9];
    uint64_t v15 = &v13[608 * v12];
    memcpy(v14, __src, 0x260uLL);
    __int16 v6 = v14 + 608;
    unint64_t v16 = *(char **)(a1 + 29728);
    int v17 = *(char **)(a1 + 29720);
    if (v16 != v17)
    {
      do
      {
        v16 -= 608;
        v14 -= 608;
        memcpy(v14, v16, 0x260uLL);
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*v7;
    }
    *(void *)(a1 + 2972std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v14;
    *(void *)(a1 + 29728) = v6;
    *(void *)(a1 + 29736) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    memcpy(*(void **)(a1 + 29728), __src, 0x260uLL);
    __int16 v6 = (char *)(v4 + 608);
  }
  *(void *)(a1 + 29728) = v6;
  return v6 - 608;
}

void *ZinValidator::AssignAlternate<ANECFlattenLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 23032), a2, 0x268uLL);
}

void *ZinValidator::AssignAlternate<ANECUnflattenLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 23648), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECArgMinMaxLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 10744), a2, 0x290uLL);
}

void *ZinValidator::AssignAlternate<ANECLayerNormLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 10104), a2, 0x280uLL);
}

void *ZinValidator::AssignAlternate<ANECRingBufferWriterLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 14504), a2, 0x2F0uLL);
}

void *ZinValidator::AssignAlternate<ANECReductionLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 15800), a2, 0x290uLL);
}

void *ZinValidator::AssignAlternate<ANECMinMaxNormLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 12032), a2, 0x278uLL);
}

void *ZinValidator::AssignAlternate<ANECBatchToSpaceLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 20024), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECSpaceToBatchLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 19416), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECPixelUnshuffleLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 18808), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECGlobalArgMinMaxLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 40), a2, 0x258uLL);
}

void *ZinValidator::AssignAlternate<ANECLinearLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 2096), a2, 0x208uLL);
}

void *ZinValidator::AssignAlternate<ANECMatrixMultLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 22480), a2, 0x228uLL);
}

void *ZinValidator::AssignAlternate<ANECAffineTransformLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 26608), a2, 0x2D8uLL);
}

void *ZinValidator::AssignAlternate<ANECRandomLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 29744), a2, 0x228uLL);
}

void *ZinValidator::AssignAlternate<ANECCrossCorrelationLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 640), a2, 0x2B8uLL);
}

void *ZinValidator::AssignAlternate<ANECCrossProductLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 16456), a2, 0x218uLL);
}

void ANECTextureInfoToZin(uint64_t a1, uint64_t a2, void **a3)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v25 = 0;
      uint64_t v8 = (BOOL *)(a1 + 16 * v6);
      BOOL v9 = CFStringToZinIrCoordinate(*v8, (int *)&v25 + 1);
      BOOL v10 = CFStringToZinIrSamplingGridMode(v8[1], (int *)&v25);
      if (!v9 || !v10) {
        ZinAssertImpl("Invalid sampling grid mode");
      }
      uint64_t v12 = v25;
      uint64_t v11 = HIDWORD(v25);
      uint64_t v14 = (unint64_t *)a3[1];
      unint64_t v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((char *)v14 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - (void)*a3;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v19);
        }
        else {
          uint64_t v20 = 0;
        }
        BOOL v21 = &v20[8 * v16];
        *(void *)BOOL v21 = v11 | (v12 << 32);
        uint64_t v15 = v21 + 8;
        uint64_t v23 = (char *)*a3;
        int v22 = (char *)a3[1];
        if (v22 != *a3)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          int v22 = (char *)*a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *uint64_t v14 = HIDWORD(v25) | ((unint64_t)v25 << 32);
        uint64_t v15 = v14 + 1;
      }
      a3[1] = v15;
      ++v6;
    }
    while (v6 != a2);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  BOOL *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v25 = 0;
      uint64_t v8 = (BOOL *)(a1 + 16 * v6);
      BOOL v9 = CFStringToZinIrCoordinate(*v8, (int *)&v25 + 1);
      BOOL v10 = CFStringToZinIrSamplingMethod(v8[1], (int *)&v25);
      if (!v9 || !v10) {
        ZinAssertImpl("Invalid sampling method information");
      }
      uint64_t v12 = v25;
      uint64_t v11 = HIDWORD(v25);
      uint64_t v14 = (unint64_t *)a3[1];
      unint64_t v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((char *)v14 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - (void)*a3;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v19);
        }
        else {
          uint64_t v20 = 0;
        }
        BOOL v21 = &v20[8 * v16];
        *(void *)BOOL v21 = v11 | (v12 << 32);
        uint64_t v15 = v21 + 8;
        uint64_t v23 = (char *)*a3;
        int v22 = (char *)a3[1];
        if (v22 != *a3)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          int v22 = (char *)*a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *uint64_t v14 = HIDWORD(v25) | ((unint64_t)v25 << 32);
        uint64_t v15 = v14 + 1;
      }
      a3[1] = v15;
      ++v6;
    }
    while (v6 != a2);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  BOOL *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v25 = 0;
      uint64_t v8 = (BOOL *)(a1 + 16 * v6);
      BOOL v9 = CFStringToZinIrCoordinate(*v8, (int *)&v25 + 1);
      BOOL v10 = CFStringToZinIrTEPaddingMode(v8[1], (int *)&v25);
      if (!v9 || !v10) {
        ZinAssertImpl("Invalid padding information");
      }
      uint64_t v12 = v25;
      uint64_t v11 = HIDWORD(v25);
      uint64_t v14 = (unint64_t *)a3[1];
      unint64_t v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((char *)v14 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - (void)*a3;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v19);
        }
        else {
          uint64_t v20 = 0;
        }
        BOOL v21 = &v20[8 * v16];
        *(void *)BOOL v21 = v11 | (v12 << 32);
        uint64_t v15 = v21 + 8;
        uint64_t v23 = (char *)*a3;
        int v22 = (char *)a3[1];
        if (v22 != *a3)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          int v22 = (char *)*a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *uint64_t v14 = HIDWORD(v25) | ((unint64_t)v25 << 32);
        uint64_t v15 = v14 + 1;
      }
      a3[1] = v15;
      ++v6;
    }
    while (v6 != a2);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v25 = 0;
      uint64_t v8 = a1 + 16 * v6;
      BOOL v9 = CFStringToZinIrCoordinate(*(void *)v8, (int *)&v25 + 1);
      BOOL v10 = CFStringToZinIrCoordinateType(*(const __CFString **)(v8 + 8), (int *)&v25);
      if (!v9 || (v10 & 1) == 0) {
        ZinAssertImpl("Invalid coordinate type information");
      }
      uint64_t v12 = v25;
      uint64_t v11 = HIDWORD(v25);
      uint64_t v14 = (unint64_t *)a3[1];
      unint64_t v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((char *)v14 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - (void)*a3;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v19);
        }
        else {
          uint64_t v20 = 0;
        }
        BOOL v21 = &v20[8 * v16];
        *(void *)BOOL v21 = v11 | (v12 << 32);
        uint64_t v15 = v21 + 8;
        uint64_t v23 = (char *)*a3;
        int v22 = (char *)a3[1];
        if (v22 != *a3)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          int v22 = (char *)*a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *uint64_t v14 = HIDWORD(v25) | ((unint64_t)v25 << 32);
        uint64_t v15 = v14 + 1;
      }
      a3[1] = v15;
      ++v6;
    }
    while (v6 != a2);
  }
}

void ANECTextureInfoToZin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v28 = a3 + 16;
    do
    {
      uint64_t v30 = 0;
      int v29 = 0;
      uint64_t v7 = a1 + 24 * v6;
      BOOL v8 = CFStringToZinIrCoordinate(*(void *)v7, (int *)&v30 + 1);
      BOOL v9 = CFStringToZinIrNormalizedCoordinateRange(*(void *)(v7 + 8), (int *)&v30);
      unsigned __int8 v10 = CFStringToZinIrCoordinateMode(*(const __CFString **)(v7 + 16), &v29);
      BOOL v11 = !v8 || !v9;
      if (v11 || (v10 & 1) == 0) {
        ZinAssertImpl("Invalid coordinate type information");
      }
      int v12 = v30;
      int v13 = HIDWORD(v30);
      int v14 = v29;
      uint64_t v16 = *(_DWORD **)(a3 + 8);
      unint64_t v15 = *(void *)(a3 + 16);
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = *(_DWORD **)a3;
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - *(void *)a3) >> 2);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0x1555555555555555) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v18) >> 2);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v22 = 0x1555555555555555;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>(v28, v22);
          uint64_t v18 = *(_DWORD **)a3;
          uint64_t v16 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v24 = &v23[12 * v19];
        *(_DWORD *)uint64_t v24 = v13;
        *((_DWORD *)v24 + 1) = v12;
        *((_DWORD *)v24 + 2) = v14;
        uint64_t v25 = v24;
        if (v16 != v18)
        {
          do
          {
            uint64_t v26 = *(void *)(v16 - 3);
            v16 -= 3;
            int v27 = v16[2];
            *(void *)(v25 - 12) = v26;
            v25 -= 12;
            *((_DWORD *)v25 + 2) = v27;
          }
          while (v16 != v18);
          uint64_t v18 = *(_DWORD **)a3;
        }
        uint64_t v17 = v24 + 12;
        *(void *)a3 = v25;
        *(void *)(a3 + 8) = v24 + 12;
        *(void *)(a3 + 16) = &v23[12 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v16 = HIDWORD(v30);
        v16[1] = v12;
        uint64_t v17 = v16 + 3;
        void v16[2] = v14;
      }
      *(void *)(a3 + 8) = v17;
      ++v6;
    }
    while (v6 != a2);
  }
}

void ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>::~ZinConcatValidator(uint64_t a1)
{
  ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>::~ZinConcatValidator(a1);

  JUMPOUT(0x21667D3C0);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ANECDropoutLayerDescAlternate>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x6BCA1AF286BCA2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(608 * a2);
}

void std::vector<ANECConcatLayerDescAlternate>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xF128CFC4A33F128DLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x76B981DAE6076CLL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 552;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANECConcatLayerDescAlternate>>(v3, a2);
    uint64_t v7 = &v6[552 * v5];
    BOOL v9 = &v6[552 * v8];
    BOOL v11 = (char *)*a1;
    unsigned __int8 v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v10 -= 552;
        v12 -= 552;
        memcpy(v12, v10, 0x228uLL);
      }
      while (v10 != v11);
      unsigned __int8 v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t std::vector<std::vector<ANECTensorDesc>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    void v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<ANECTensorDesc>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_21133C4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<ANECTensorDesc>>::emplace_back<std::vector<ANECTensorDesc>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v12);
    int v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    unint64_t v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)int v14 = 0;
    *(_OWORD *)int v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<ANECTensorDesc>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v8 = (void *)a1[1];
    std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    void v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_21133C638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<ANECTensorDesc>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ANECTensorDesc>>,std::reverse_iterator<std::vector<ANECTensorDesc>*>,std::reverse_iterator<std::vector<ANECTensorDesc>*>,std::reverse_iterator<std::vector<ANECTensorDesc>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ANECTensorDesc>>,std::reverse_iterator<std::vector<ANECTensorDesc>*>,std::reverse_iterator<std::vector<ANECTensorDesc>*>,std::reverse_iterator<std::vector<ANECTensorDesc>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  _OWORD v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ANECTensorDesc>>,std::reverse_iterator<std::vector<ANECTensorDesc>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ANECTensorDesc>>,std::reverse_iterator<std::vector<ANECTensorDesc>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrOpLayer *>>,std::reverse_iterator<std::vector<ZinIrOpLayer *>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateUnitWithLargeKernelSize(uint64_t a1)
{
  uint64_t v198 = &unk_26C34A6A8;
  uint64_t v2 = (uint64_t **)(a1 + 8);
  std::set<__CFString const*>::set[abi:ne180100](v199, a1 + 8);
  uint64_t v200 = *(uint64_t **)(a1 + 32);
  uint64_t v198 = &unk_26C3495D0;
  long long v3 = *(_OWORD *)(a1 + 280);
  long long v215 = *(_OWORD *)(a1 + 264);
  long long v216 = v3;
  long long v213 = *(_OWORD *)(a1 + 232);
  long long v214 = *(_OWORD *)(a1 + 248);
  long long v209 = *(_OWORD *)(a1 + 168);
  long long v210 = *(_OWORD *)(a1 + 184);
  long long v211 = *(_OWORD *)(a1 + 200);
  long long v212 = *(_OWORD *)(a1 + 216);
  long long v205 = *(_OWORD *)(a1 + 104);
  long long v206 = *(_OWORD *)(a1 + 120);
  long long v207 = *(_OWORD *)(a1 + 136);
  long long v208 = *(_OWORD *)(a1 + 152);
  long long v201 = *(_OWORD *)(a1 + 40);
  long long v202 = *(_OWORD *)(a1 + 56);
  long long v203 = *(_OWORD *)(a1 + 72);
  long long v204 = *(_OWORD *)(a1 + 88);
  uint64_t v4 = *v200;
  if (ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::IsLargeKernelSize(a1))
  {
    memset(&v164[1], 0, 24);
    int v165 = 0;
    long long v166 = 0u;
    long long v167 = 0u;
    uint64_t v168 = -1;
    uint64_t v169 = 0;
    int v170 = -1;
    uint64_t v171 = -1;
    int v172 = -1;
    long long v174 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    uint64_t v173 = -1;
    uint64_t v177 = 0;
    int v178 = 1;
    char v179 = 0;
    __int16 v180 = 0;
    int v181 = -1;
    uint64_t v182 = -1;
    int v183 = -1;
    uint64_t v184 = -1;
    uint64_t v185 = 0x3F80000000000006;
    int v186 = 0;
    v164[0] = &unk_26C34A9B8;
    int v187 = 0;
    char v188 = 0;
    int64x2_t v189 = vdupq_n_s64(1uLL);
    uint64_t v190 = 1;
    uint64_t v191 = 1;
    *(void *)&long long v5 = 0x100000001;
    *((void *)&v5 + 1) = 0x100000001;
    long long v192 = v5;
    uint64_t v193 = 0x100000001;
    uint64_t v196 = 0;
    uint64_t v194 = 0;
    uint64_t v195 = 0;
    int v197 = 1;
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Desc2UnitInfo(a1, a1 + 120, (uint64_t)v164);
    uint64_t v6 = ANECFormatToZinTensorFormat(*(void *)(a1 + 56));
    DWORD2(v167) = v6;
    int64x2_t v155 = vdupq_n_s64(1uLL);
    uint64_t v156 = 1;
    *(void *)&long long v7 = 0x100000001;
    *((void *)&v7 + 1) = 0x100000001;
    long long v157 = v7;
    uint64_t v158 = 0x100000001;
    memset(v159, 0, sizeof(v159));
    long long v160 = v7;
    uint64_t v161 = 1;
    __int16 v162 = 0;
    int v163 = 0;
    ZinIrConvUnit::CreateConvInfo((uint64_t)v164, (uint64_t)&v155);
    long long v8 = *(_OWORD *)(a1 + 80);
    v153[0] = *(_OWORD *)(a1 + 64);
    v153[1] = v8;
    uint64_t v154 = *(void *)(a1 + 96);
    uint64_t v151 = 0x100000001;
    int v152 = 1;
    int64x2_t v140 = vdupq_n_s64(1uLL);
    uint64_t v141 = 1;
    *(void *)&long long v9 = 0x100000001;
    *((void *)&v9 + 1) = 0x100000001;
    long long v142 = v9;
    uint64_t v143 = 0x100000001;
    uint64_t v144 = 0;
    uint64_t v145 = 0;
    long long v147 = v9;
    uint64_t v146 = 0;
    uint64_t v148 = 1;
    __int16 v149 = 0;
    int v150 = 0;
    v139[1] = 0;
    v139[0] = 0;
    BOOL v138 = (uint64_t *)v139;
    v137[1] = 0;
    v137[0] = 0;
    uint64_t v136 = v137;
    ZinGetOutputTensorDimension((uint64_t)v153, &v155, (unsigned int *)&v157, (unsigned int *)&v157 + 3, (int *)v159, *(void *)(a1 + 152), (int *)&v160, (uint64_t)v135);
    unint64_t v10 = v2;
    if (!ZinLargeKernelSizeUtils::DecomposeLargeKernelConvDesc((uint64_t *)v153, v135, &v155, v6, v4, (int *)&v151, &v140, &v138, (uint64_t **)&v136))goto LABEL_42; {
    std::string::basic_string[abi:ne180100]<0>(&__p, "unshuffle");
    }
    unint64_t v11 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "shuffle");
    uint64_t v43 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0) {
      operator delete(__p);
    }
    char v128 = 0;
    char v129 = 0;
    char v130 = 0;
    char v131 = 0;
    long long v126 = 0u;
    memset(v127, 0, 26);
    uint64_t v133 = 0;
    uint64_t v132 = 0;
    int v134 = 0;
    char v118 = 0;
    char v119 = 0;
    char v120 = 0;
    char v121 = 0;
    __int16 v117 = 0;
    uint64_t v123 = 0;
    uint64_t v122 = 0;
    int v124 = 0;
    char v106 = 0;
    char v107 = 0;
    char v108 = 0;
    char v109 = 0;
    long long v104 = 0u;
    memset(v105, 0, 26);
    uint64_t v111 = 0;
    uint64_t v110 = 0;
    int v112 = 0;
    char v96 = 0;
    char v97 = 0;
    char v98 = 0;
    char v99 = 0;
    long long v94 = 0u;
    memset(v95, 0, 26);
    uint64_t v101 = 0;
    uint64_t v100 = 0;
    int v102 = 0;
    char v86 = 0;
    char v87 = 0;
    char v88 = 0;
    char v89 = 0;
    long long v84 = 0u;
    memset(v85, 0, 26);
    uint64_t v91 = 0;
    uint64_t v90 = 0;
    int v92 = 0;
    LODWORD(p_p) = v6;
    int v113 = v6;
    int v103 = v6;
    int v93 = v6;
    int v83 = v6;
    uint64_t v12 = *(void *)(a1 + 96);
    long long v13 = *(_OWORD *)(a1 + 80);
    long long v114 = *(_OWORD *)(a1 + 64);
    long long v115 = v13;
    uint64_t v116 = v12;
    std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
    long long v14 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0) {
      operator delete(__p);
    }
    if (v139 == (void **)v14)
    {
      BOOL v20 = 1;
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 96);
      long long v16 = *(_OWORD *)(a1 + 80);
      long long v126 = *(_OWORD *)(a1 + 64);
      v127[0] = v16;
      *(void *)&v127[1] = v15;
      std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
      *(void *)&long long v49 = &__p;
      uint64_t v17 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v49);
      if (SHIBYTE(v63) < 0) {
        operator delete(__p);
      }
      uint64_t v18 = *((void *)v17 + 11);
      long long v19 = *(_OWORD *)(v17 + 72);
      long long v114 = *(_OWORD *)(v17 + 56);
      long long v115 = v19;
      uint64_t v116 = v18;
      ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&__p, *(void *)(a1 + 32), v14 + 8, &p_p);
      ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&__p);
      BOOL v20 = v64 == 0;
      ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
    *(void *)&long long v49 = &__p;
    unint64_t v21 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v49);
    uint64_t v22 = (uint64_t)(v11 + 8);
    if (SHIBYTE(v63) < 0) {
      operator delete(__p);
    }
    uint64_t v23 = *((void *)v21 + 11);
    long long v104 = *(_OWORD *)(v21 + 56);
    v105[0] = *(_OWORD *)(v21 + 72);
    *(void *)&v105[1] = v23;
    ZinPixelUnshuffleValidator<ZinIrPixelUnshuffleUnitInfo,ZinIrTensorInfo>::ZinPixelUnshuffleValidator((uint64_t)&v49, *(void *)(a1 + 32), v22, (long long *)&v113);
    ZinPixelShuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::ZinPixelShuffleValidator((uint64_t)v46, *(void *)(a1 + 32), (uint64_t)(v43 + 8), (long long *)&v103);
    ZinPixelUnshuffleValidator<ZinIrPixelUnshuffleUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v49);
    ZinPixelShuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)v46);
    if (*(void *)&v46[24] | *((void *)&v50 + 1)) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v20;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "shuffle");
    v217[0] = &__p;
    uint64_t v25 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, v217);
    if (SHIBYTE(v63) < 0) {
      operator delete(__p);
    }
    uint64_t v26 = *((void *)v25 + 11);
    long long v84 = *(_OWORD *)(v25 + 56);
    v85[0] = *(_OWORD *)(v25 + 72);
    *(void *)&v85[1] = v26;
    std::string::basic_string[abi:ne180100]<0>(&__p, "view_h");
    int v27 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0) {
      operator delete(__p);
    }
    if (v139 != (void **)v27)
    {
      uint64_t v28 = *((void *)v25 + 11);
      long long v29 = *(_OWORD *)(v25 + 72);
      long long v94 = *(_OWORD *)(v25 + 56);
      v95[0] = v29;
      *(void *)&v95[1] = v28;
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&__p, *(void *)(a1 + 32), v27 + 8, &v93);
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&__p);
      if (v64) {
        BOOL v24 = 0;
      }
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "view_w");
    uint64_t v30 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0) {
      operator delete(__p);
    }
    if (v139 != (void **)v30)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "view_h");
      v217[0] = &__p;
      unint64_t v31 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, v217);
      if (SHIBYTE(v63) < 0) {
        operator delete(__p);
      }
      uint64_t v32 = *((void *)v31 + 11);
      long long v84 = *(_OWORD *)(v31 + 56);
      v85[0] = *(_OWORD *)(v31 + 72);
      *(void *)&v85[1] = v32;
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&__p, *(void *)(a1 + 32), v30 + 8, &v83);
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&__p);
      if (v64) {
        BOOL v24 = 0;
      }
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&__p);
    }
    *(void *)uint64_t v46 = &unk_26C350FE8;
    ZinIrUnitInfo::~ZinIrUnitInfo(&v48);
    *(void *)uint64_t v46 = &unk_26C34A6A8;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v46[8], *(void **)&v46[16]);
    *(void *)&long long v49 = &unk_26C352108;
    ZinIrUnitInfo::~ZinIrUnitInfo(&v60);
    *(void *)&long long v49 = &unk_26C34A6A8;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v49 + 8, (void *)v50);
    unint64_t v10 = v2;
    if (v24)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
      uint64_t v33 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
      if (SHIBYTE(v63) < 0) {
        operator delete(__p);
      }
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvDesc(a1, (uint64_t)&v140, v6, (uint64_t)&v49, *((_DWORD *)v33 + 76));
      long long v34 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)uint64_t v46 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)&v46[16] = v34;
      long long v35 = *(_OWORD *)(a1 + 104);
      *(_OWORD *)&v46[32] = *(_OWORD *)(a1 + 88);
      long long v47 = v35;
      std::string::basic_string[abi:ne180100]<0>(&__p, "unshuffle");
      p_p = &__p;
      uint64_t v36 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      long long v37 = *(_OWORD *)(v36 + 56);
      long long v38 = *(_OWORD *)(v36 + 72);
      uint64_t v39 = *((void *)v36 + 11);
      if (SHIBYTE(v63) < 0)
      {
        long long v44 = *(_OWORD *)(v36 + 72);
        long long v45 = *(_OWORD *)(v36 + 56);
        operator delete(__p);
        long long v38 = v44;
        long long v37 = v45;
      }
      *(_OWORD *)&v46[8] = v37;
      *(_OWORD *)&v46[24] = v38;
      *(void *)&v46[40] = v39;
      uint64_t v65 = *(void *)(a1 + 32);
      long long v66 = v46;
      int v67 = &v49;
      long long v68 = *(_OWORD *)v46;
      long long v69 = *(_OWORD *)&v46[16];
      long long v70 = *(_OWORD *)&v46[32];
      long long v71 = v47;
      long long v81 = v58;
      long long v82 = v59;
      long long v72 = v49;
      long long v73 = v50;
      long long v74 = v51;
      long long v78 = v55;
      long long v77 = v54;
      long long v76 = v53;
      long long v75 = v52;
      long long v80 = v57;
      long long v79 = v56;
      std::string __p = &unk_26C3495D0;
      int v62 = &v63;
      uint64_t v64 = 0;
      uint64_t v63 = 0;
      ZinUnitValidator::AddErrors((uint64_t *)&__p, v2);
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&__p);
      std::string __p = &unk_26C34A6A8;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v62, v63);
    }
    else
    {
LABEL_42:
      int v40 = ANECFormatToZinTensorFormat(**(void **)(a1 + 40));
      int64_t MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(v4, v40);
      int64_t MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode(v4);
      if (*(void *)(a1 + 176) > MaxLogicalKernelWidthForLargeKernelMode)
      {
        std::string __p = @"InvalidKernelWidth";
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v10, (unint64_t *)&__p, (uint64_t *)&__p);
      }
      if (*(void *)(a1 + 184) > MaxLogicalKernelHeightForLargeKernelMode)
      {
        std::string __p = @"InvalidKernelHeight";
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v10, (unint64_t *)&__p, (uint64_t *)&__p);
      }
      if (!*(void *)(a1 + 24))
      {
        std::string __p = @"InvalidKernelDimensions";
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v10, (unint64_t *)&__p, (uint64_t *)&__p);
      }
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(a1);
    }
    std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v136, v137[0]);
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::destroy((uint64_t)&v138, v139[0]);
    v164[0] = &unk_26C34CC70;
    if ((void)v176)
    {
      *((void *)&v176 + 1) = v176;
      operator delete((void *)v176);
    }
    if (*((void *)&v174 + 1))
    {
      *(void *)&long long v175 = *((void *)&v174 + 1);
      operator delete(*((void **)&v174 + 1));
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(v164);
  }
  else
  {
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v198);
  }
  uint64_t v198 = &unk_26C34A6A8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v199, (void *)v199[1]);
}

void sub_21133D338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17)
{
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&STACK[0x7E0], (char *)STACK[0x7E8]);
  std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::destroy((uint64_t)&STACK[0x7F8], (void *)STACK[0x800]);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x928]);
  STACK[0xA78] = a16;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a17, (void *)STACK[0xA88]);
  _Unwind_Resume(a1);
}

void sub_21133D4A4()
{
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateDilatedConv(uint64_t a1)
{
  uint64_t v198 = *MEMORY[0x263EF8340];
  uint64_t v2 = **(void **)(a1 + 32);
  if (*(unsigned char *)(*(void *)(a1 + 48) + 116))
  {
    *(unsigned char *)(a1 + 236) = 0;
    v73.i64[0] = @"InvalidKernelMode";
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v73, v73.i64);
  }
  ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(a1);
  long long v72 = (_OWORD *)(a1 + 56);
  uint64_t v3 = ANECFormatToZinTensorFormat(*(void *)(a1 + 56));
  int64x2_t v186 = vdupq_n_s64(1uLL);
  uint64_t v187 = 1;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v188 = v4;
  uint64_t v189 = 0x100000001;
  memset(v190, 0, sizeof(v190));
  long long v191 = v4;
  uint64_t v192 = 1;
  __int16 v193 = 0;
  int v194 = 0;
  memset(&v152[1], 0, 24);
  int v153 = 0;
  long long v154 = 0u;
  long long v155 = 0u;
  uint64_t v156 = -1;
  uint64_t v157 = 0;
  int v158 = -1;
  uint64_t v159 = -1;
  int v160 = -1;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  uint64_t v161 = -1;
  uint64_t v165 = 0;
  int v166 = 1;
  char v167 = 0;
  __int16 v168 = 0;
  int v169 = -1;
  uint64_t v170 = -1;
  int v171 = -1;
  uint64_t v172 = -1;
  uint64_t v173 = 0x3F80000000000006;
  int v174 = 0;
  v152[0] = &unk_26C34A9B8;
  int v175 = 0;
  char v176 = 0;
  int64x2_t v177 = v186;
  uint64_t v178 = 1;
  uint64_t v179 = 1;
  long long v180 = v4;
  uint64_t v181 = 0x100000001;
  uint64_t v184 = 0;
  uint64_t v182 = 0;
  uint64_t v183 = 0;
  int v185 = 1;
  ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Desc2UnitInfo(a1, a1 + 120, (uint64_t)v152);
  DWORD2(v155) = v3;
  ZinIrConvUnit::CreateConvInfo((uint64_t)v152, (uint64_t)&v186);
  long long v5 = *(_OWORD *)(a1 + 80);
  v150[0] = *(_OWORD *)(a1 + 64);
  v150[1] = v5;
  uint64_t v151 = *(void *)(a1 + 96);
  ZinGetOutputTensorDimension((uint64_t)v150, &v186, (unsigned int *)&v188, (unsigned int *)&v188 + 3, (int *)v190, *(void *)(a1 + 152), (int *)&v191, (uint64_t)v149);
  uint64_t v147 = 0;
  uint64_t v146 = 0;
  uint64_t v148 = 0;
  uint64_t v144 = 0;
  uint64_t v143 = 0;
  uint64_t v145 = 0;
  ANECFormatToZinTensorFormat(**(void **)(a1 + 40));
  ZinMirDilatedConv::DecomposeDilationFactorX(v2, *(_DWORD *)(*(void *)(a1 + 48) + 120), (uint64_t)&v138);
  if (v140 == v139
    || (uint64_t v6 = (char **)(v139 + 8 * (v141 >> 10)),
        long long v7 = *v6,
        long long v8 = &(*v6)[4 * (v141 & 0x3FF)],
        uint64_t v9 = *(void *)(v139 + (((v142 + v141) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v142 + v141) & 0x3FF),
        v8 == (char *)v9))
  {
    int v10 = 1;
  }
  else
  {
    int v10 = 1;
    do
    {
      int v12 = *(_DWORD *)v8;
      v8 += 4;
      int v11 = v12;
      if (v8 - v7 == 4096)
      {
        long long v13 = v6[1];
        ++v6;
        long long v7 = v13;
        long long v8 = v13;
      }
      v10 *= v11;
    }
    while (v8 != (char *)v9);
  }
  int v14 = DWORD1(v191);
  uint64_t v15 = operator new(0xCuLL);
  long long v71 = (_OWORD *)(a1 + 120);
  uint64_t v137 = v15 + 3;
  *uint64_t v15 = v10;
  v15[1] = v14;
  _OWORD v15[2] = 1;
  std::string __p = v15;
  uint64_t v136 = v15 + 3;
  int KernelFormat = ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::GetKernelFormat(a1);
  if (!ZinMirDilatedConv::DecomposeDilatedConv((uint64_t)v150, (uint64_t)v149, v3, &v186, KernelFormat, *(void *)(a1 + 32), (uint64_t)&__p, (char *)&v143, &v146))
  {
    uint64_t v25 = v146;
    if (v147 != v146)
    {
      unint64_t v26 = 0;
      int v27 = &v73.i8[8];
      unint64_t v70 = 0;
      long long v69 = (uint64_t **)(a1 + 8);
      char v28 = 1;
      while (1)
      {
        ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)v195, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v25 + 344 * v26));
        if (*(int *)v195 <= 33)
        {
          if (*(_DWORD *)v195 == 1)
          {
            LOBYTE(v128) = 0;
            char v129 = 0;
            char v130 = 0;
            char v131 = 0;
            long long v126 = 0u;
            memset(v127, 0, 26);
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            int v134 = 0;
            int v125 = v3;
            long long v45 = (char *)v143 + 40 * v26;
            uint64_t v46 = *((void *)v45 + 4);
            long long v47 = *((_OWORD *)v45 + 1);
            long long v126 = *(_OWORD *)v45;
            v127[0] = v47;
            *(void *)&v127[1] = v46;
            if (v26)
            {
              BYTE9(v127[1]) = 0;
              uint64_t v48 = 1;
            }
            else
            {
              WORD4(v127[1]) = *(_WORD *)(a1 + 112);
              uint64_t v48 = *(void *)(a1 + 104);
            }
            uint64_t v50 = (uint64_t)v27;
            char v129 = 1;
            uint64_t v128 = v48;
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)v118, *(void *)(a1 + 32), (uint64_t)&v195[8], (long long *)&v125);
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)v118, v117);
            uint64_t v51 = v117[0];
            uint64_t v52 = v117[1];
            while (1)
            {
              if (v51 == v52)
              {
                char v54 = 0;
                unint64_t v70 = v26;
                int v27 = (__int8 *)v50;
                goto LABEL_60;
              }
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v73, v51);
              uint64_t v53 = v75;
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&v73);
              if (v53) {
                break;
              }
              v51 += 512;
            }
            long long v55 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)long long v115 = *v72;
            *(_OWORD *)&v115[16] = v55;
            long long v116 = *(_OWORD *)(a1 + 104);
            *(_OWORD *)&v115[8] = v126;
            *(_OWORD *)&v115[24] = v127[0];
            *(void *)&v115[40] = *(void *)&v127[1];
            int64x2_t v93 = vdupq_n_s64(1uLL);
            uint64_t v94 = 1;
            *(void *)&long long v56 = 0x100000001;
            *((void *)&v56 + 1) = 0x100000001;
            long long v95 = v56;
            uint64_t v96 = 0x100000001;
            uint64_t v98 = 0;
            uint64_t v99 = 0;
            uint64_t v97 = 0;
            long long v100 = v56;
            uint64_t v101 = 1;
            __int16 v102 = 0;
            int v103 = 0;
            ZinIrConvUnit::CreateConvInfo((uint64_t)&v195[8], (uint64_t)&v93);
            ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvDesc(a1, (uint64_t)&v93, v3, (uint64_t)&v104, v197);
            v73.i64[0] = @"InvalidDilationFactor";
            std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v69, (unint64_t *)&v73, v73.i64);
            *((void *)&v75 + 1) = *(void *)(a1 + 32);
            uint64_t v76 = (uint64_t)v115;
            long long v77 = &v104;
            long long v78 = *(_OWORD *)v115;
            long long v79 = *(_OWORD *)&v115[16];
            long long v80 = *(_OWORD *)&v115[32];
            long long v81 = v116;
            long long v82 = v104;
            long long v83 = v105;
            long long v86 = v108;
            long long v87 = v109;
            long long v84 = v106;
            long long v85 = v107;
            long long v91 = v113;
            long long v92 = v114;
            long long v89 = v111;
            long long v90 = v112;
            long long v88 = v110;
            v73.i64[0] = (uint64_t)&unk_26C3495D0;
            v73.i64[1] = (uint64_t)&v74;
            uint64_t v74 = 0;
            *(void *)&long long v75 = 0;
            int v27 = (__int8 *)v50;
            ZinUnitValidator::AddErrors(v73.i64, v69);
            ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v73);
            v73.i64[0] = (uint64_t)&unk_26C34A6A8;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v50, (void *)v74);
            char v28 = 0;
            char v54 = 1;
LABEL_60:
            v73.i64[0] = (uint64_t)v117;
            std::vector<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)v118);
            if (v54)
            {
              ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)v195);
              goto LABEL_68;
            }
          }
          else if (*(_DWORD *)v195 == 17)
          {
            v118[56] = 0;
            LOBYTE(v119) = 0;
            BYTE8(v119) = 0;
            BYTE12(v12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
            memset(&v118[8], 0, 42);
            long long v121 = 0uLL;
            *(_DWORD *)uint64_t v122 = 0;
            *(_DWORD *)char v118 = v3;
            uint64_t v33 = (char *)v143 + 40 * v26;
            uint64_t v34 = *((void *)v33 + 4);
            long long v35 = *((_OWORD *)v33 + 1);
            *(_OWORD *)&v118[8] = *(_OWORD *)v33;
            *(_OWORD *)&v118[24] = v35;
            *(void *)&v118[40] = v34;
            if (v26)
            {
              v118[49] = 0;
              uint64_t v36 = 1;
            }
            else
            {
              *(_WORD *)&v118[48] = *(_WORD *)(a1 + 112);
              uint64_t v36 = *(void *)(a1 + 104);
            }
            LOBYTE(v119) = 1;
            *(void *)&v118[56] = v36;
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&v73, *(void *)(a1 + 32), &v195[8], v118);
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v73);
            if ((void)v75) {
              char v28 = 0;
            }
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&v73);
          }
          goto LABEL_61;
        }
        if (*(_DWORD *)v195 == 34)
        {
          v118[56] = 0;
          LOBYTE(v119) = 0;
          BYTE8(v119) = 0;
          BYTE12(v12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
          memset(&v118[8], 0, 42);
          long long v121 = 0uLL;
          *(_DWORD *)uint64_t v122 = 0;
          *(_DWORD *)char v118 = v3;
          long long v37 = (char *)v143 + 40 * v26;
          uint64_t v38 = *((void *)v37 + 4);
          long long v39 = *((_OWORD *)v37 + 1);
          *(_OWORD *)&v118[8] = *(_OWORD *)v37;
          *(_OWORD *)&v118[24] = v39;
          *(void *)&v118[40] = v38;
          if (v26)
          {
            v118[49] = 0;
            uint64_t v40 = 1;
          }
          else
          {
            *(_WORD *)&v118[48] = *(_WORD *)(a1 + 112);
            uint64_t v40 = *(void *)(a1 + 104);
          }
          LOBYTE(v119) = 1;
          *(void *)&v118[56] = v40;
          ZinSpaceToBatchValidator<ZinIrSpaceToBatchUnitInfo,ZinIrTensorInfo>::ZinSpaceToBatchValidator((uint64_t)&v73, *(void *)(a1 + 32), (uint64_t)&v195[8], (long long *)v118);
          ZinSpaceToBatchValidator<ZinIrSpaceToBatchUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v73);
          if ((void)v75) {
            char v28 = 0;
          }
          long long v49 = &unk_26C351278;
        }
        else
        {
          if (*(_DWORD *)v195 != 35)
          {
            if (*(_DWORD *)v195 == 44)
            {
              v118[56] = 0;
              LOBYTE(v119) = 0;
              BYTE8(v119) = 0;
              BYTE12(v12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
              memset(&v118[8], 0, 42);
              long long v121 = 0uLL;
              *(_DWORD *)uint64_t v122 = 0;
              *(_DWORD *)char v118 = v3;
              long long v29 = (char *)v143 + 40 * v26;
              uint64_t v30 = *((void *)v29 + 4);
              long long v31 = *((_OWORD *)v29 + 1);
              *(_OWORD *)&v118[8] = *(_OWORD *)v29;
              *(_OWORD *)&v118[24] = v31;
              *(void *)&v118[40] = v30;
              if (v26)
              {
                v118[49] = 0;
                uint64_t v32 = 1;
              }
              else
              {
                *(_WORD *)&v118[48] = *(_WORD *)(a1 + 112);
                uint64_t v32 = *(void *)(a1 + 104);
              }
              LOBYTE(v119) = 1;
              *(void *)&v118[56] = v32;
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v73, *(void *)(a1 + 32), &v195[8], v118);
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v73);
              if ((void)v75) {
                char v28 = 0;
              }
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v73);
            }
            goto LABEL_61;
          }
          v118[56] = 0;
          LOBYTE(v119) = 0;
          BYTE8(v119) = 0;
          BYTE12(v12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
          memset(&v118[8], 0, 42);
          long long v121 = 0uLL;
          *(_DWORD *)uint64_t v122 = 0;
          *(_DWORD *)char v118 = v3;
          uint64_t v41 = (char *)v143 + 40 * v26;
          uint64_t v42 = *((void *)v41 + 4);
          long long v43 = *((_OWORD *)v41 + 1);
          *(_OWORD *)&v118[8] = *(_OWORD *)v41;
          *(_OWORD *)&v118[24] = v43;
          *(void *)&v118[40] = v42;
          if (v26)
          {
            v118[49] = 0;
            uint64_t v44 = 1;
          }
          else
          {
            *(_WORD *)&v118[48] = *(_WORD *)(a1 + 112);
            uint64_t v44 = *(void *)(a1 + 104);
          }
          LOBYTE(v119) = 1;
          *(void *)&v118[56] = v44;
          ZinBatchToSpaceValidator<ZinIrBatchToSpaceUnitInfo,ZinIrTensorInfo>::ZinBatchToSpaceValidator((uint64_t)&v73, *(void *)(a1 + 32), (uint64_t)&v195[8], (long long *)v118);
          ZinBatchToSpaceValidator<ZinIrBatchToSpaceUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v73);
          if ((void)v75) {
            char v28 = 0;
          }
          long long v49 = &unk_26C3509F0;
        }
        v73.i64[0] = (uint64_t)v49;
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v85 + 1);
        v73.i64[0] = (uint64_t)&unk_26C34A6A8;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v27, (void *)v74);
LABEL_61:
        ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)v195);
        ++v26;
        uint64_t v25 = v146;
        if (0x82FA0BE82FA0BE83 * ((v147 - v146) >> 3) <= v26)
        {
          if (v28) {
            goto LABEL_13;
          }
          goto LABEL_14;
        }
      }
    }
  }
  unint64_t v70 = 0;
LABEL_13:
  if (*(void *)(a1 + 24))
  {
LABEL_14:
    long long v17 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)uint64_t v195 = *v72;
    *(_OWORD *)&v195[16] = v17;
    long long v18 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)&v195[32] = *(_OWORD *)(a1 + 88);
    long long v196 = v18;
    long long v19 = *(_OWORD *)(a1 + 264);
    *(_OWORD *)&v122[16] = *(_OWORD *)(a1 + 248);
    long long v123 = v19;
    long long v124 = *(_OWORD *)(a1 + 280);
    long long v20 = *(_OWORD *)(a1 + 200);
    long long v119 = *(_OWORD *)(a1 + 184);
    long long v120 = v20;
    long long v21 = *(_OWORD *)(a1 + 216);
    *(_OWORD *)uint64_t v122 = *(_OWORD *)(a1 + 232);
    long long v121 = v21;
    long long v22 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)char v118 = *v71;
    *(_OWORD *)&v118[16] = v22;
    long long v23 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)&v118[48] = *(_OWORD *)(a1 + 168);
    *(_OWORD *)&v118[32] = v23;
    *(int64x2_t *)&v122[8] = vdupq_n_s64(1uLL);
    *(void *)&v122[24] = 1;
    if (IsChannelWise<ANECConvLayerDesc>(*(const __CFString ***)(a1 + 48))) {
      int v24 = 2;
    }
    else {
      int v24 = 1;
    }
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvType(a1, v118, v24);
    *((void *)&v75 + 1) = *(void *)(a1 + 32);
    uint64_t v76 = (uint64_t)v195;
    long long v77 = (long long *)v118;
    long long v78 = *(_OWORD *)v195;
    long long v79 = *(_OWORD *)&v195[16];
    long long v80 = *(_OWORD *)&v195[32];
    long long v81 = v196;
    long long v91 = v123;
    long long v92 = v124;
    long long v82 = *(_OWORD *)v118;
    long long v83 = *(_OWORD *)&v118[16];
    long long v84 = *(_OWORD *)&v118[32];
    long long v88 = v121;
    long long v87 = v120;
    long long v86 = v119;
    long long v85 = *(_OWORD *)&v118[48];
    long long v90 = *(_OWORD *)&v122[16];
    long long v89 = *(_OWORD *)v122;
    v73.i64[0] = (uint64_t)&unk_26C3495D0;
    v73.i64[1] = (uint64_t)&v74;
    uint64_t v74 = 0;
    *(void *)&long long v75 = 0;
    ZinUnitValidator::AddErrors(v73.i64, (void *)(a1 + 8));
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v73);
  }
  else
  {
    long long v57 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)uint64_t v195 = *v72;
    *(_OWORD *)&v195[16] = v57;
    long long v58 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)&v195[32] = *(_OWORD *)(a1 + 88);
    long long v196 = v58;
    long long v59 = *(_OWORD *)(a1 + 264);
    *(_OWORD *)&v122[16] = *(_OWORD *)(a1 + 248);
    long long v123 = v59;
    long long v124 = *(_OWORD *)(a1 + 280);
    long long v60 = *(_OWORD *)(a1 + 200);
    long long v119 = *(_OWORD *)(a1 + 184);
    long long v120 = v60;
    long long v61 = *(_OWORD *)(a1 + 216);
    *(_OWORD *)uint64_t v122 = *(_OWORD *)(a1 + 232);
    long long v121 = v61;
    long long v62 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)char v118 = *v71;
    *(_OWORD *)&v118[16] = v62;
    long long v63 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)&v118[48] = *(_OWORD *)(a1 + 168);
    *(_OWORD *)&v118[32] = v63;
    uint64_t v64 = v146;
    if (v147 != v146)
    {
      long long v104 = 0uLL;
      *(void *)&long long v105 = 0;
      int64x2_t v73 = vdupq_n_s64(1uLL);
      uint64_t v74 = 1;
      *(void *)&long long v65 = 0x100000001;
      *((void *)&v65 + 1) = 0x100000001;
      long long v75 = v65;
      uint64_t v76 = 0x100000001;
      long long v78 = 0uLL;
      long long v77 = 0;
      long long v79 = v65;
      *(void *)&long long v80 = 1;
      WORD4(v8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
      HIDWORD(v8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
      ZinIrConvUnit::CreateConvInfo(v146 + 344 * v70 + 8, (uint64_t)&v73);
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvDesc(a1, (uint64_t)&v73, v3, (uint64_t)v118, *(_DWORD *)(v64 + 344 * v70 + 248));
      long long v66 = (char *)v143 + 40 * v70;
      uint64_t v67 = *((void *)v66 + 4);
      long long v68 = *((_OWORD *)v66 + 1);
      *(_OWORD *)&v195[8] = *(_OWORD *)v66;
      *(_OWORD *)&v195[24] = v68;
      *(void *)&v195[40] = v67;
      v73.i64[0] = (uint64_t)&v104;
      std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    }
    *((void *)&v75 + 1) = *(void *)(a1 + 32);
    uint64_t v76 = (uint64_t)v195;
    long long v77 = (long long *)v118;
    long long v78 = *(_OWORD *)v195;
    long long v79 = *(_OWORD *)&v195[16];
    long long v80 = *(_OWORD *)&v195[32];
    long long v81 = v196;
    long long v91 = v123;
    long long v92 = v124;
    long long v82 = *(_OWORD *)v118;
    long long v83 = *(_OWORD *)&v118[16];
    long long v84 = *(_OWORD *)&v118[32];
    long long v88 = v121;
    long long v87 = v120;
    long long v86 = v119;
    long long v85 = *(_OWORD *)&v118[48];
    long long v90 = *(_OWORD *)&v122[16];
    long long v89 = *(_OWORD *)v122;
    v73.i64[0] = (uint64_t)&unk_26C3495D0;
    v73.i64[1] = (uint64_t)&v74;
    uint64_t v74 = 0;
    *(void *)&long long v75 = 0;
    ZinUnitValidator::AddErrors(v73.i64, (void *)(a1 + 8));
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v73);
  }
  v73.i64[0] = (uint64_t)&unk_26C34A6A8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v73.i64[1], (void *)v74);
LABEL_68:
  if (__p)
  {
    uint64_t v136 = __p;
    operator delete(__p);
  }
  std::deque<int>::~deque[abi:ne180100](&v138);
  if (v143)
  {
    uint64_t v144 = v143;
    operator delete(v143);
  }
  v73.i64[0] = (uint64_t)&v146;
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  v152[0] = &unk_26C34CC70;
  if ((void)v164)
  {
    *((void *)&v164 + 1) = v164;
    operator delete((void *)v164);
  }
  if (*((void *)&v162 + 1))
  {
    *(void *)&long long v163 = *((void *)&v162 + 1);
    operator delete(*((void **)&v162 + 1));
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v152);
}

void sub_21133E2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&STACK[0x3D0];
  std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__destroy_vector::operator()[abi:ne180100](&a23);
  int v24 = (void *)STACK[0x758];
  if (STACK[0x758])
  {
    STACK[0x760] = (unint64_t)v24;
    operator delete(v24);
  }
  std::deque<int>::~deque[abi:ne180100](&STACK[0x770]);
  uint64_t v25 = (void *)STACK[0x7A8];
  if (STACK[0x7A8])
  {
    STACK[0x7B0] = (unint64_t)v25;
    operator delete(v25);
  }
  STACK[0x4E0] = (unint64_t)&STACK[0x7C0];
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4E0]);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x830]);
  _Unwind_Resume(a1);
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateUnitWithLargeKernelStrides(void)::{lambda(ZinIrHalParameters const&)#1}::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v2 = *(_OWORD *)(*a1 + 56);
  long long v3 = *(_OWORD *)(*a1 + 88);
  long long v40 = *(_OWORD *)(*a1 + 72);
  long long v41 = v3;
  long long v42 = *(_OWORD *)(v1 + 104);
  long long v4 = *(_OWORD *)(v1 + 168);
  long long v5 = *(_OWORD *)(v1 + 216);
  long long v6 = *(_OWORD *)(v1 + 200);
  long long v32 = *(_OWORD *)(v1 + 184);
  long long v33 = v6;
  long long v7 = *(_OWORD *)(v1 + 264);
  long long v38 = *(_OWORD *)(v1 + 280);
  long long v39 = v2;
  long long v36 = *(_OWORD *)(v1 + 248);
  long long v37 = v7;
  long long v8 = *(_OWORD *)(v1 + 232);
  long long v34 = v5;
  long long v35 = v8;
  long long v9 = *(_OWORD *)(v1 + 136);
  long long v28 = *(_OWORD *)(v1 + 120);
  long long v29 = v9;
  long long v30 = *(_OWORD *)(v1 + 152);
  long long v31 = v4;
  ZinUnitValidator::limits<int>((uint64_t *)v1, 1, 2, *(_DWORD *)(*(void *)(v1 + 48) + 80), &v33, @"InvalidStepX");
  ZinUnitValidator::limits<int>((uint64_t *)v1, 1, 2, *(_DWORD *)(*(void *)(v1 + 48) + 84), (_DWORD *)&v33 + 1, @"InvalidStepY");
  ZinUnitValidator::limits<int>((uint64_t *)v1, 1, 2, *(_DWORD *)(*(void *)(v1 + 48) + 88), (_DWORD *)&v33 + 2, @"InvalidStepZ");
  void v12[2] = *(void **)(v1 + 32);
  long long v13 = v39;
  long long v14 = v40;
  long long v15 = v41;
  long long v16 = v42;
  long long v26 = v37;
  long long v27 = v38;
  long long v24 = v35;
  long long v25 = v36;
  long long v20 = v31;
  long long v21 = v32;
  long long v22 = v33;
  long long v23 = v34;
  long long v17 = v28;
  long long v18 = v29;
  v12[3] = &v39;
  void v12[4] = &v28;
  long long v19 = v30;
  int v10 = &unk_26C3495D0;
  int v11 = v12;
  v12[0] = 0;
  v12[1] = 0;
  ZinUnitValidator::AddErrors((uint64_t *)&v10, (void *)(v1 + 8));
  ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v10);
  int v10 = &unk_26C34A6A8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v11, v12[0]);
}

void sub_21133E60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v12, a12);
  _Unwind_Resume(a1);
}

uint64_t ValidateLargeKernelStridesForConv(ZinConvLayerUtils *a1, uint64_t a2, int *a3, int64x2_t *a4, uint64_t a5, uint64_t *a6, int a7, char a8, char a9, uint64_t a10, char a11, uint64_t a12)
{
  int8x16_t v206 = vextq_s8(*(int8x16_t *)(a2 + 88), *(int8x16_t *)(a2 + 88), 8uLL);
  uint64_t v207 = *(void *)(a2 + 104);
  ZinGetOutputTensorDimension((uint64_t)a4, &v206, (unsigned int *)(a2 + 152), (unsigned int *)(a2 + 164), (int *)(a2 + 176), a5, (int *)(a2 + 208), (uint64_t)v203);
  uint64_t v200 = 0;
  uint64_t v201 = 0;
  uint64_t v202 = 0;
  uint64_t v197 = 0;
  uint64_t v198 = 0;
  uint64_t v199 = 0;
  int v194 = 0;
  uint64_t v195 = 0;
  uint64_t v196 = 0;
  uint64_t v142 = (uint64_t)a6;
  if (ZinConvLargeStrides::DecomposeConvWithLargeStride((uint64_t)a4, (uint64_t)v203, *a3, a2, a7, (void *)*a6, (uint64_t)&v194, &v200))
  {
    if (!ZinConvPoolLargeStride::DecomposeLargeStrideConv(*a3, a1, *a6, a4, a5, &v194, (uint64_t)&v197))
    {
      uint64_t v18 = v197;
      if (v198 != v197)
      {
        if ((int)(799063683 * ((unint64_t)(v198 - v197) >> 3)) < 1)
        {
          uint64_t v24 = 1;
          goto LABEL_132;
        }
        unint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        long long v22 = 0uLL;
        uint64_t v136 = (_OWORD *)(a12 + 240);
        LOBYTE(v23) = 1;
        while (1)
        {
          uint64_t v24 = 0;
          int v25 = *(_DWORD *)(v18 + v20);
          if (v25 > 16)
          {
            if (v25 != 17)
            {
              if (v25 != 44) {
                goto LABEL_132;
              }
              long long v179 = 0uLL;
              *(_DWORD *)&v180[8] = 0;
              *(void *)long long v180 = 0;
              *(_OWORD *)&v180[16] = v22;
              *(_OWORD *)uint64_t v181 = v22;
              *(void *)&v181[16] = -1;
              long long v182 = v22;
              long long v183 = v22;
              long long v184 = v22;
              *(_OWORD *)int v185 = v22;
              *(_OWORD *)&v185[10] = v22;
              uint64_t v178 = &unk_26C3499A0;
              long long v186 = v22;
              long long v187 = v22;
              uint64_t v188 = 0;
              uint64_t v189 = 0;
              uint64_t v190 = 0;
              __int16 v192 = 0;
              uint64_t v191 = 0;
              ZinIrPadUnitInfo::operator=((uint64_t)&v178, v18 + v20 + 8);
              LOBYTE(v171) = 0;
              char v172 = 0;
              char v173 = 0;
              char v174 = 0;
              long long v169 = 0u;
              memset(v170, 0, 26);
              uint64_t v175 = 0;
              uint64_t v176 = 0;
              int v177 = 0;
              LODWORD(__p) = *a3;
              long long v37 = *(long long *)((char *)v194 + v19);
              long long v36 = *(long long *)((char *)&v194[1] + v19);
              *(void *)&v170[1] = v194[2].i64[v19 / 8];
              long long v169 = v37;
              v170[0] = v36;
              char v38 = a8;
              if (v20) {
                char v38 = 0;
              }
              BYTE8(v170[1]) = v38;
              char v39 = a9;
              if (v20) {
                char v39 = 0;
              }
              BYTE9(v170[1]) = v39;
              uint64_t v40 = a10;
              if (v20) {
                char v41 = 1;
              }
              else {
                char v41 = a11;
              }
              if (v20) {
                uint64_t v40 = 1;
              }
              uint64_t v171 = v40;
              char v172 = v41;
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v159, v142, &v178, &__p);
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
              std::string::size_type v42 = v160.__r_.__value_.__r.__words[2];
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v144, v142, &v178, &__p);
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v144);
              uint64_t v43 = *(void *)&v145[16];
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v144);
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v159);
              uint64_t v178 = &unk_26C3499A0;
              if (v189)
              {
                uint64_t v190 = v189;
                operator delete(v189);
              }
              uint64_t v35 = v43 | v42;
              ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v178);
              goto LABEL_71;
            }
            long long v179 = 0uLL;
            *(_DWORD *)&v180[8] = 0;
            *(void *)long long v180 = 0;
            *(_OWORD *)&v180[16] = v22;
            *(_OWORD *)uint64_t v181 = v22;
            *(void *)&v181[16] = -1;
            uint64_t v178 = &unk_26C34F860;
            long long v182 = xmmword_211EDF380;
            std::string::operator=((std::string *)&v179, (const std::string *)(v18 + v20 + 16));
            *(_DWORD *)&v180[8] = *(_DWORD *)(v18 + v20 + 40);
            if ((void **)(v18 + v20 + 8) != &v178) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v180[16], *(std::string **)(v18 + v20 + 48), *(long long **)(v18 + v20 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v18 + v20 + 56) - *(void *)(v18 + v20 + 48)) >> 3));
            }
            *(_OWORD *)&v181[8] = *(_OWORD *)(v18 + v20 + 72);
            long long v182 = *(_OWORD *)(v18 + v20 + 88);
            v146[0] = 0;
            v146[8] = 0;
            v146[16] = 0;
            BYTE12(v147) = 0;
            *(_OWORD *)&v145[26] = 0u;
            memset(v145, 0, 32);
            *(_DWORD *)__int16 v149 = 0;
            long long v148 = 0uLL;
            LODWORD(v144) = *a3;
            uint64_t v65 = v194[2].i64[v19 / 8];
            long long v66 = *(long long *)((char *)&v194[1] + v19);
            *(int64x2_t *)uint64_t v145 = *(int64x2_t *)((char *)v194 + v19);
            *(_OWORD *)&v145[16] = v66;
            *(void *)&unsigned char v145[32] = v65;
            char v67 = a8;
            if (v20) {
              char v67 = 0;
            }
            v145[40] = v67;
            char v68 = a9;
            if (v20) {
              char v68 = 0;
            }
            v145[41] = v68;
            uint64_t v69 = a10;
            if (v20) {
              char v70 = 1;
            }
            else {
              char v70 = a11;
            }
            if (v20) {
              uint64_t v69 = 1;
            }
            *(void *)uint64_t v146 = v69;
            v146[8] = v70;
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&v159, v142, &v178, &v144);
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
            uint64_t v35 = v160.__r_.__value_.__r.__words[2];
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&v159);
          }
          else
          {
            if (v25 == 1)
            {
              memset(v145, 0, 28);
              *(_OWORD *)&unsigned char v145[32] = v22;
              *(_OWORD *)uint64_t v146 = v22;
              *(void *)&v146[16] = -1;
              *(void *)&long long v147 = 0;
              DWORD2(v147) = -1;
              *(void *)&long long v148 = -1;
              DWORD2(v148) = -1;
              *(void *)__int16 v149 = -1;
              *(_OWORD *)&v149[8] = v22;
              long long v150 = v22;
              long long __src = v22;
              uint64_t v152 = 0;
              LODWORD(v153) = 1;
              BYTE4(v153) = 0;
              WORD4(v153) = 0;
              LODWORD(v154) = -1;
              *((void *)&v154 + 1) = -1;
              *(_DWORD *)long long v155 = -1;
              *(void *)&v155[8] = -1;
              *(void *)&v155[16] = 0x3F80000000000006;
              *(_DWORD *)&v155[24] = 0;
              uint64_t v144 = &unk_26C34A9B8;
              *(_DWORD *)uint64_t v156 = 0;
              v156[4] = 0;
              *(int64x2_t *)&v156[8] = vdupq_n_s64(1uLL);
              *(void *)&v156[24] = 1;
              *(void *)uint64_t v157 = 1;
              *(void *)&long long v44 = 0x100000001;
              *((void *)&v44 + 1) = 0x100000001;
              *(_OWORD *)&v157[8] = v44;
              *(void *)&v157[24] = 0x100000001;
              memset(v158, 0, 24);
              *(_DWORD *)&v158[24] = 1;
              std::string::operator=((std::string *)v145, (const std::string *)(v18 + v20 + 16));
              *(_DWORD *)&v145[24] = *(_DWORD *)(v18 + v20 + 40);
              if ((void **)(v18 + v20 + 8) != &v144)
              {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v145[32], *(std::string **)(v18 + v20 + 48), *(long long **)(v18 + v20 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v18 + v20 + 56) - *(void *)(v18 + v20 + 48)) >> 3));
                *(_OWORD *)&v146[8] = *(_OWORD *)(v18 + v20 + 72);
                long long v45 = *(_OWORD *)(v18 + v20 + 88);
                long long v46 = *(_OWORD *)(v18 + v20 + 120);
                long long v148 = *(_OWORD *)(v18 + v20 + 104);
                *(_OWORD *)__int16 v149 = v46;
                long long v147 = v45;
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v149[16], *(char **)(v18 + v20 + 136), *(void *)(v18 + v20 + 144), (uint64_t)(*(void *)(v18 + v20 + 144) - *(void *)(v18 + v20 + 136)) >> 2);
                std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__src, *(char **)(v18 + v20 + 160), *(void *)(v18 + v20 + 168), (uint64_t)(*(void *)(v18 + v20 + 168) - *(void *)(v18 + v20 + 160)) >> 3);
              }
              long long v47 = *(_OWORD *)(v18 + v20 + 184);
              long long v48 = *(_OWORD *)(v18 + v20 + 200);
              long long v49 = *(_OWORD *)(v18 + v20 + 216);
              *(_OWORD *)&v155[12] = *(_OWORD *)(v18 + v20 + 228);
              long long v154 = v48;
              *(_OWORD *)long long v155 = v49;
              long long v153 = v47;
              long long v51 = *(_OWORD *)(v18 + v20 + 296);
              long long v50 = *(_OWORD *)(v18 + v20 + 312);
              long long v52 = *(_OWORD *)(v18 + v20 + 280);
              *(_OWORD *)&v158[12] = *(_OWORD *)(v18 + v20 + 324);
              *(_OWORD *)&v157[16] = v51;
              *(_OWORD *)int v158 = v50;
              *(_OWORD *)uint64_t v157 = v52;
              long long v53 = *(_OWORD *)(v18 + v20 + 264);
              *(_OWORD *)uint64_t v156 = *(_OWORD *)(v18 + v20 + 248);
              *(_OWORD *)&v156[16] = v53;
              v181[0] = 0;
              v181[8] = 0;
              v181[16] = 0;
              BYTE12(v182) = 0;
              *(_OWORD *)&v180[10] = 0u;
              long long v179 = 0u;
              *(_OWORD *)long long v180 = 0u;
              LODWORD(v184) = 0;
              long long v183 = 0uLL;
              LODWORD(v178) = *a3;
              uint64_t v54 = v194[2].i64[v19 / 8];
              long long v55 = *(long long *)((char *)&v194[1] + v19);
              long long v179 = *(long long *)((char *)v194 + v19);
              *(_OWORD *)long long v180 = v55;
              *(void *)&v180[16] = v54;
              char v56 = a8;
              if (v20) {
                char v56 = 0;
              }
              v180[24] = v56;
              char v57 = a9;
              if (v20) {
                char v57 = 0;
              }
              v180[25] = v57;
              uint64_t v58 = a10;
              if (v20) {
                char v59 = 1;
              }
              else {
                char v59 = a11;
              }
              if (v20) {
                uint64_t v58 = 1;
              }
              *(void *)uint64_t v181 = v58;
              v181[8] = v59;
              std::string::operator=((std::string *)(a12 + 8), (const std::string *)v145);
              *(_DWORD *)(a12 + 32) = *(_DWORD *)&v145[24];
              if (&v144 != (void **)a12)
              {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a12 + 40), *(std::string **)&v145[32], *(long long **)&v145[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v145[40] - *(void *)&v145[32]) >> 3));
                *(_OWORD *)(a12 + 64) = *(_OWORD *)&v146[8];
                long long v60 = v148;
                *(_OWORD *)(a12 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v147;
                *(_OWORD *)(a12 + 96) = v60;
                *(_OWORD *)(a12 + 112) = *(_OWORD *)v149;
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a12 + 128), *(char **)&v149[16], v150, (uint64_t)(v150 - *(void *)&v149[16]) >> 2);
                std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a12 + 152), (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 3);
              }
              long long v61 = v154;
              *(_OWORD *)(a12 + 176) = v153;
              *(_OWORD *)(a12 + 192) = v61;
              *(_OWORD *)(a12 + 208) = *(_OWORD *)v155;
              *(_OWORD *)(a12 + 22std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)&v155[12];
              long long v62 = *(_OWORD *)&v157[16];
              *(_OWORD *)(a12 + 272) = *(_OWORD *)v157;
              *(_OWORD *)(a12 + 288) = v62;
              *(_OWORD *)(a12 + 304) = *(_OWORD *)v158;
              *(_OWORD *)(a12 + 316) = *(_OWORD *)&v158[12];
              long long v63 = *(_OWORD *)&v156[16];
              *uint64_t v136 = *(_OWORD *)v156;
              *(_OWORD *)(a12 + 256) = v63;
              *(_DWORD *)uint64_t v136 = *((_DWORD *)a1 + 60);
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v159, v142, (uint64_t)&v144, (long long *)&v178);
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159, v143);
              std::string __p = v143;
              std::vector<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              uint64_t v35 = v160.__r_.__value_.__r.__words[2];
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&v159);
              uint64_t v144 = &unk_26C34CC70;
              if ((void)__src)
              {
                *((void *)&__src + 1) = __src;
                operator delete((void *)__src);
              }
              if (*(void *)&v149[16])
              {
                *(void *)&long long v150 = *(void *)&v149[16];
                operator delete(*(void **)&v149[16]);
              }
              uint64_t v64 = &v144;
              goto LABEL_70;
            }
            if (v25 != 3) {
              goto LABEL_132;
            }
            long long v179 = 0uLL;
            *(void *)long long v180 = 0;
            *(_OWORD *)&v180[16] = v22;
            *(_OWORD *)uint64_t v181 = v22;
            *(void *)&v181[16] = -1;
            uint64_t v178 = &unk_26C34C998;
            BYTE4(v182) = 0;
            LODWORD(v182) = 2;
            *(_DWORD *)&v180[8] = 3;
            std::string::operator=((std::string *)&v179, (const std::string *)(v18 + v20 + 16));
            *(_DWORD *)&v180[8] = *(_DWORD *)(v18 + v20 + 40);
            if ((void **)(v18 + v20 + 8) != &v178) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v180[16], *(std::string **)(v18 + v20 + 48), *(long long **)(v18 + v20 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v18 + v20 + 56) - *(void *)(v18 + v20 + 48)) >> 3));
            }
            *(_OWORD *)&v181[8] = *(_OWORD *)(v18 + v20 + 72);
            int v26 = *(_DWORD *)(v18 + v20 + 88);
            BYTE4(v182) = *(unsigned char *)(v18 + v20 + 92);
            LODWORD(v182) = v26;
            if (v26 == 3) {
              long long v27 = (unint64_t *)&v204;
            }
            else {
              long long v27 = (unint64_t *)&v205;
            }
            unint64_t v28 = *v27;
            v146[0] = 0;
            v146[8] = 0;
            v146[16] = 0;
            BYTE12(v147) = 0;
            *(_OWORD *)&v145[26] = 0u;
            memset(v145, 0, 32);
            *(_DWORD *)__int16 v149 = 0;
            long long v148 = 0uLL;
            LODWORD(v144) = *a3;
            uint64_t v29 = v194[2].i64[v19 / 8];
            long long v30 = *(long long *)((char *)&v194[1] + v19);
            *(int64x2_t *)uint64_t v145 = *(int64x2_t *)((char *)v194 + v19);
            *(_OWORD *)&v145[16] = v30;
            *(void *)&unsigned char v145[32] = v29;
            char v31 = a8;
            if (v20) {
              char v31 = 0;
            }
            v145[40] = v31;
            char v32 = a9;
            if (v20) {
              char v32 = 0;
            }
            v145[41] = v32;
            uint64_t v33 = a10;
            if (v20) {
              char v34 = 1;
            }
            else {
              char v34 = a11;
            }
            if (v20) {
              uint64_t v33 = 1;
            }
            *(void *)uint64_t v146 = v33;
            v146[8] = v34;
            std::vector<ZinIrTensorInfo>::vector(&__p, v28, (long long *)&v144);
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)&v159, v142, (uint64_t)&v178, __p, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v169 - (void)__p) >> 3));
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
            uint64_t v35 = v160.__r_.__value_.__r.__words[2];
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)&v159);
            if (__p)
            {
              *(void *)&long long v169 = __p;
              operator delete(__p);
            }
          }
          uint64_t v64 = &v178;
LABEL_70:
          ZinIrUnitInfo::~ZinIrUnitInfo(v64);
LABEL_71:
          uint64_t v23 = v23 & (v35 == 0);
          ++v21;
          uint64_t v18 = v197;
          v20 += 344;
          v19 += 40;
          uint64_t v24 = v23;
          long long v22 = 0uLL;
          if (v21 >= (int)(799063683 * ((unint64_t)(v198 - v197) >> 3))) {
            goto LABEL_132;
          }
        }
      }
    }
LABEL_131:
    uint64_t v24 = 0;
    goto LABEL_132;
  }
  uint64_t v71 = v200;
  if (v201 == v200) {
    goto LABEL_131;
  }
  unint64_t v72 = 0;
  unint64_t v73 = 0;
  long long v74 = 0uLL;
  uint64_t v132 = (_OWORD *)(a12 + 64);
  uint64_t v133 = (_OWORD *)(a12 + 80);
  int v134 = (char *)(a12 + 128);
  uint64_t v135 = (std::vector<std::string> *)(a12 + 40);
  char v131 = (char *)(a12 + 152);
  uint64_t v137 = (_OWORD *)(a12 + 176);
  uint64_t v138 = (_OWORD *)(a12 + 240);
  uint64_t v139 = (std::string *)(a12 + 8);
  uint64_t v75 = 248;
  int v76 = 1;
  do
  {
    int v77 = *(_DWORD *)(v71 + v75 - 248);
    if (v77 <= 31)
    {
      if (v77 == 1)
      {
        memset(v145, 0, 28);
        *(_OWORD *)&unsigned char v145[32] = v74;
        *(_OWORD *)uint64_t v146 = v74;
        *(void *)&v146[16] = -1;
        *(void *)&long long v147 = 0;
        DWORD2(v147) = -1;
        *(void *)&long long v148 = -1;
        DWORD2(v148) = -1;
        *(void *)__int16 v149 = -1;
        *(_OWORD *)&v149[8] = v74;
        long long v150 = v74;
        long long __src = v74;
        uint64_t v152 = 0;
        LODWORD(v153) = 1;
        BYTE4(v153) = 0;
        WORD4(v153) = 0;
        LODWORD(v154) = -1;
        *((void *)&v154 + 1) = -1;
        *(_DWORD *)long long v155 = -1;
        *(void *)&v155[8] = -1;
        *(void *)&v155[16] = 0x3F80000000000006;
        *(_DWORD *)&v155[24] = 0;
        uint64_t v144 = &unk_26C34A9B8;
        *(_DWORD *)uint64_t v156 = 0;
        v156[4] = 0;
        *(int64x2_t *)&v156[8] = vdupq_n_s64(1uLL);
        *(void *)&v156[24] = 1;
        *(void *)uint64_t v157 = 1;
        *(void *)&long long v92 = 0x100000001;
        *((void *)&v92 + 1) = 0x100000001;
        *(_OWORD *)&v157[8] = v92;
        *(void *)&v157[24] = 0x100000001;
        memset(v158, 0, 24);
        *(_DWORD *)&v158[24] = 1;
        std::string::operator=((std::string *)v145, (const std::string *)(v71 + v75 - 232));
        *(_DWORD *)&v145[24] = *(_DWORD *)(v71 + v75 - 208);
        if ((void **)(v71 + v75 - 240) != &v144)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v145[32], *(std::string **)(v71 + v75 - 200), *(long long **)(v71 + v75 - 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v71 + v75 - 192) - *(void *)(v71 + v75 - 200)) >> 3));
          *(_OWORD *)&v146[8] = *(_OWORD *)(v71 + v75 - 176);
          long long v93 = *(_OWORD *)(v71 + v75 - 160);
          long long v94 = *(_OWORD *)(v71 + v75 - 128);
          long long v148 = *(_OWORD *)(v71 + v75 - 144);
          *(_OWORD *)__int16 v149 = v94;
          long long v147 = v93;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v149[16], *(char **)(v71 + v75 - 112), *(void *)(v71 + v75 - 104), (uint64_t)(*(void *)(v71 + v75 - 104) - *(void *)(v71 + v75 - 112)) >> 2);
          std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__src, *(char **)(v71 + v75 - 88), *(void *)(v71 + v75 - 80), (uint64_t)(*(void *)(v71 + v75 - 80) - *(void *)(v71 + v75 - 88)) >> 3);
        }
        long long v95 = *(_OWORD *)(v71 + v75 - 64);
        long long v96 = *(_OWORD *)(v71 + v75 - 48);
        long long v97 = *(_OWORD *)(v71 + v75 - 32);
        *(_OWORD *)&v155[12] = *(_OWORD *)(v71 + v75 - 20);
        long long v154 = v96;
        *(_OWORD *)long long v155 = v97;
        long long v153 = v95;
        long long v99 = *(_OWORD *)(v71 + v75 + 48);
        long long v98 = *(_OWORD *)(v71 + v75 + 64);
        long long v100 = *(_OWORD *)(v71 + v75 + 32);
        *(_OWORD *)&v158[12] = *(_OWORD *)(v71 + v75 + 76);
        *(_OWORD *)&v157[16] = v99;
        *(_OWORD *)int v158 = v98;
        *(_OWORD *)uint64_t v157 = v100;
        long long v101 = *(_OWORD *)(v71 + v75 + 16);
        *(_OWORD *)uint64_t v156 = *(_OWORD *)(v71 + v75);
        *(_OWORD *)&v156[16] = v101;
        v181[0] = 0;
        v181[8] = 0;
        v181[16] = 0;
        BYTE12(v182) = 0;
        *(_OWORD *)&v180[10] = 0u;
        long long v179 = 0u;
        *(_OWORD *)long long v180 = 0u;
        LODWORD(v184) = 0;
        long long v183 = 0uLL;
        LODWORD(v178) = *a3;
        uint64_t v102 = v194[2].i64[v72 / 8];
        long long v103 = *(long long *)((char *)&v194[1] + v72);
        long long v179 = *(long long *)((char *)v194 + v72);
        *(_OWORD *)long long v180 = v103;
        *(void *)&v180[16] = v102;
        char v104 = a8;
        if (v73) {
          char v104 = 0;
        }
        v180[24] = v104;
        char v105 = a9;
        if (v73) {
          char v105 = 0;
        }
        v180[25] = v105;
        uint64_t v106 = a10;
        if (v73)
        {
          uint64_t v106 = 1;
          char v107 = 1;
        }
        else
        {
          char v107 = a11;
        }
        *(void *)uint64_t v181 = v106;
        v181[8] = v107;
        std::string::operator=(v139, (const std::string *)v145);
        *(_DWORD *)(a12 + 32) = *(_DWORD *)&v145[24];
        if (&v144 != (void **)a12)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v135, *(std::string **)&v145[32], *(long long **)&v145[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v145[40] - *(void *)&v145[32]) >> 3));
          _OWORD *v132 = *(_OWORD *)&v146[8];
          long long v108 = v148;
          *uint64_t v133 = v147;
          *(_OWORD *)(a12 + 96) = v108;
          *(_OWORD *)(a12 + 112) = *(_OWORD *)v149;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v134, *(char **)&v149[16], v150, (uint64_t)(v150 - *(void *)&v149[16]) >> 2);
          std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v131, (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 3);
        }
        long long v109 = v154;
        _OWORD *v137 = v153;
        *(_OWORD *)(a12 + 192) = v109;
        *(_OWORD *)(a12 + 208) = *(_OWORD *)v155;
        *(_OWORD *)(a12 + 22std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)&v155[12];
        long long v110 = *(_OWORD *)&v157[16];
        *(_OWORD *)(a12 + 272) = *(_OWORD *)v157;
        *(_OWORD *)(a12 + 288) = v110;
        *(_OWORD *)(a12 + 304) = *(_OWORD *)v158;
        *(_OWORD *)(a12 + 316) = *(_OWORD *)&v158[12];
        long long v111 = *(_OWORD *)&v156[16];
        *uint64_t v138 = *(_OWORD *)v156;
        *(_OWORD *)(a12 + 256) = v111;
        *(_DWORD *)uint64_t v138 = *((_DWORD *)a1 + 60);
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v159, v142, (uint64_t)&v144, (long long *)&v178);
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159, v193);
        std::string __p = v193;
        std::vector<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        BOOL v112 = v160.__r_.__value_.__r.__words[2] == 0;
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&v159);
        uint64_t v144 = &unk_26C34CC70;
        if ((void)__src)
        {
          *((void *)&__src + 1) = __src;
          operator delete((void *)__src);
        }
        if (*(void *)&v149[16])
        {
          *(void *)&long long v150 = *(void *)&v149[16];
          operator delete(*(void **)&v149[16]);
        }
        v76 &= v112;
        long long v113 = &v144;
        goto LABEL_125;
      }
      if (v77 != 17) {
        goto LABEL_127;
      }
      long long v179 = 0uLL;
      *(_DWORD *)&v180[8] = 0;
      *(void *)long long v180 = 0;
      *(_OWORD *)&v180[16] = v74;
      *(_OWORD *)uint64_t v181 = v74;
      *(void *)&v181[16] = -1;
      uint64_t v178 = &unk_26C34F860;
      long long v182 = xmmword_211EDF380;
      std::string::operator=((std::string *)&v179, (const std::string *)(v71 + v75 - 232));
      *(_DWORD *)&v180[8] = *(_DWORD *)(v71 + v75 - 208);
      if ((void **)(v71 + v75 - 240) != &v178) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v180[16], *(std::string **)(v71 + v75 - 200), *(long long **)(v71 + v75 - 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v71 + v75 - 192) - *(void *)(v71 + v75 - 200)) >> 3));
      }
      *(_OWORD *)&v181[8] = *(_OWORD *)(v71 + v75 - 176);
      long long v182 = *(_OWORD *)(v71 + v75 - 160);
      v146[0] = 0;
      v146[8] = 0;
      v146[16] = 0;
      BYTE12(v147) = 0;
      *(_OWORD *)&v145[26] = 0u;
      memset(v145, 0, 32);
      *(_DWORD *)__int16 v149 = 0;
      long long v148 = 0uLL;
      LODWORD(v144) = *a3;
      uint64_t v78 = v194[2].i64[v72 / 8];
      long long v79 = *(long long *)((char *)&v194[1] + v72);
      *(int64x2_t *)uint64_t v145 = *(int64x2_t *)((char *)v194 + v72);
      *(_OWORD *)&v145[16] = v79;
      *(void *)&unsigned char v145[32] = v78;
      char v80 = a8;
      if (v73) {
        char v80 = 0;
      }
      v145[40] = v80;
      char v81 = a9;
      if (v73) {
        char v81 = 0;
      }
      v145[41] = v81;
      uint64_t v82 = a10;
      if (v73)
      {
        uint64_t v82 = 1;
        char v83 = 1;
      }
      else
      {
        char v83 = a11;
      }
      *(void *)uint64_t v146 = v82;
      v146[8] = v83;
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&v159, v142, &v178, &v144);
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
      int v76 = v76 & (v160.__r_.__value_.__r.__words[2] == 0);
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&v159);
LABEL_124:
      long long v113 = &v178;
LABEL_125:
      ZinIrUnitInfo::~ZinIrUnitInfo(v113);
      goto LABEL_126;
    }
    if (v77 == 32)
    {
      long long v179 = 0uLL;
      *(void *)long long v180 = 0;
      *(_OWORD *)&v180[16] = v74;
      *(_OWORD *)uint64_t v181 = v74;
      *(void *)&v181[16] = -1;
      uint64_t v178 = &unk_26C351540;
      *(void *)&long long v182 = 0x100000001;
      DWORD2(v182) = 1;
      *(_DWORD *)&v180[8] = 31;
      ZinIrPixelShuffleUnitInfo::ZinIrPixelShuffleUnitInfo((ZinIrPixelShuffleUnitInfo *)&v159, (const ZinIrUnitInfo *)(v71 + v75 - 240));
      std::string::operator=((std::string *)&v179, &v160);
      *(_DWORD *)&v180[8] = v161;
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v180[16], v162, *(long long **)v163, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v163 - (void)v162) >> 3));
      *(_OWORD *)&v181[8] = v164;
      *(void *)&long long v182 = v165;
      DWORD2(v182) = v166;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v159);
      v146[0] = 0;
      v146[8] = 0;
      v146[16] = 0;
      BYTE12(v147) = 0;
      memset(v145, 0, 42);
      long long v148 = 0uLL;
      *(_DWORD *)__int16 v149 = 0;
      LODWORD(v144) = *a3;
      long long v114 = *(long long *)((char *)v194 + v72);
      long long v115 = *(long long *)((char *)&v194[1] + v72);
      *(void *)&unsigned char v145[32] = v194[2].i64[v72 / 8];
      *(_OWORD *)uint64_t v145 = v114;
      *(_OWORD *)&v145[16] = v115;
      char v116 = a8;
      if (v73) {
        char v116 = 0;
      }
      v145[40] = v116;
      char v117 = a9;
      if (v73) {
        char v117 = 0;
      }
      v145[41] = v117;
      uint64_t v118 = a10;
      if (v73)
      {
        uint64_t v118 = 1;
        char v119 = 1;
      }
      else
      {
        char v119 = a11;
      }
      *(void *)uint64_t v146 = v118;
      v146[8] = v119;
      ZinPixelUnshuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::ZinPixelUnshuffleValidator((uint64_t)&v159, v142, (uint64_t)&v178, (long long *)&v144);
      ZinPixelUnshuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
      int v76 = v76 & (v160.__r_.__value_.__r.__words[2] == 0);
      uint64_t v159 = (uint64_t *)&unk_26C3520E8;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v167);
      uint64_t v159 = (uint64_t *)&unk_26C34A6A8;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v160, (void *)v160.__r_.__value_.__l.__size_);
      goto LABEL_124;
    }
    if (v77 != 44) {
      goto LABEL_127;
    }
    long long v179 = 0uLL;
    *(_DWORD *)&v180[8] = 0;
    *(void *)long long v180 = 0;
    *(_OWORD *)&v180[16] = v74;
    *(_OWORD *)uint64_t v181 = v74;
    *(void *)&v181[16] = -1;
    long long v182 = v74;
    long long v183 = v74;
    long long v184 = v74;
    *(_OWORD *)int v185 = v74;
    *(_OWORD *)&v185[10] = v74;
    uint64_t v178 = &unk_26C3499A0;
    long long v186 = v74;
    long long v187 = v74;
    uint64_t v188 = 0;
    uint64_t v189 = 0;
    uint64_t v190 = 0;
    __int16 v192 = 0;
    uint64_t v191 = 0;
    ZinIrPadUnitInfo::operator=((uint64_t)&v178, v71 + v75 - 240);
    LOBYTE(v171) = 0;
    char v172 = 0;
    char v173 = 0;
    char v174 = 0;
    long long v169 = 0u;
    memset(v170, 0, 26);
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    int v177 = 0;
    LODWORD(__p) = *a3;
    long long v85 = *(long long *)((char *)v194 + v72);
    long long v84 = *(long long *)((char *)&v194[1] + v72);
    *(void *)&v170[1] = v194[2].i64[v72 / 8];
    long long v169 = v85;
    v170[0] = v84;
    char v86 = a8;
    if (v73) {
      char v86 = 0;
    }
    BYTE8(v170[1]) = v86;
    char v87 = a9;
    if (v73) {
      char v87 = 0;
    }
    BYTE9(v170[1]) = v87;
    uint64_t v88 = a10;
    if (v73)
    {
      uint64_t v88 = 1;
      char v89 = 1;
    }
    else
    {
      char v89 = a11;
    }
    uint64_t v171 = v88;
    char v172 = v89;
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v159, v142, &v178, &__p);
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
    std::string::size_type v90 = v160.__r_.__value_.__r.__words[2];
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v144, v142, &v178, &__p);
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v144);
    BOOL v91 = (*(void *)&v145[16] | v90) == 0;
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v144);
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v159);
    uint64_t v178 = &unk_26C3499A0;
    if (v189)
    {
      uint64_t v190 = v189;
      operator delete(v189);
    }
    v76 &= v91;
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v178);
LABEL_126:
    long long v74 = 0uLL;
LABEL_127:
    ++v73;
    uint64_t v71 = v200;
    uint64_t v120 = v201;
    v75 += 344;
    v72 += 40;
  }
  while (0x82FA0BE82FA0BE83 * ((v201 - v200) >> 3) > v73);
  std::string::operator=(v139, (const std::string *)(v201 - 328));
  *(_DWORD *)(a12 + 32) = *(_DWORD *)(v120 - 304);
  if (v120 - 336 != a12)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v135, *(std::string **)(v120 - 296), *(long long **)(v120 - 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v120 - 288) - *(void *)(v120 - 296)) >> 3));
    _OWORD *v132 = *(_OWORD *)(v120 - 272);
    long long v121 = *(_OWORD *)(v120 - 256);
    long long v122 = *(_OWORD *)(v120 - 224);
    *(_OWORD *)(a12 + 96) = *(_OWORD *)(v120 - 240);
    *(_OWORD *)(a12 + 112) = v122;
    *uint64_t v133 = v121;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v134, *(char **)(v120 - 208), *(void *)(v120 - 200), (uint64_t)(*(void *)(v120 - 200) - *(void *)(v120 - 208)) >> 2);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v131, *(char **)(v120 - 184), *(void *)(v120 - 176), (uint64_t)(*(void *)(v120 - 176) - *(void *)(v120 - 184)) >> 3);
  }
  uint64_t v24 = v76 & 1;
  long long v123 = *(_OWORD *)(v120 - 160);
  long long v124 = *(_OWORD *)(v120 - 144);
  long long v125 = *(_OWORD *)(v120 - 128);
  *(_OWORD *)(a12 + 22std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(v120 - 116);
  *(_OWORD *)(a12 + 192) = v124;
  *(_OWORD *)(a12 + 208) = v125;
  _OWORD *v137 = v123;
  long long v127 = *(_OWORD *)(v120 - 48);
  long long v126 = *(_OWORD *)(v120 - 32);
  long long v128 = *(_OWORD *)(v120 - 64);
  *(_OWORD *)(a12 + 316) = *(_OWORD *)(v120 - 20);
  *(_OWORD *)(a12 + 288) = v127;
  *(_OWORD *)(a12 + 304) = v126;
  *(_OWORD *)(a12 + 272) = v128;
  long long v129 = *(_OWORD *)(v120 - 80);
  *uint64_t v138 = *(_OWORD *)(v120 - 96);
  *(_OWORD *)(a12 + 256) = v129;
LABEL_132:
  if (v194)
  {
    uint64_t v195 = v194;
    operator delete(v194);
  }
  uint64_t v159 = &v197;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
  uint64_t v159 = &v200;
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
  return v24;
}

void sub_21133FBB4(_Unwind_Exception *a1)
{
  ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&STACK[0x450]);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&STACK[0x7B0]);
  long long v3 = *(void **)(v1 - 256);
  if (v3)
  {
    *(void *)(v1 - 248) = v3;
    operator delete(v3);
  }
  STACK[0x450] = v1 - 232;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  STACK[0x450] = v1 - 208;
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x450]);
  _Unwind_Resume(a1);
}

uint64_t ValidateParts(uint64_t a1, uint64_t a2, int *a3, int *a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9 = a8;
  if (ValidateParts(Zin3DDeConvUtils::DeconvSplit &,ZinTensorDimensions const&,ZinKernelFormat const&,ZinTensorFormat const&,BOOL,BOOL,std::optional<unsigned long>,ZinIrParameters const&)::$_0::operator()(a1 + 112, a1 + 16, a2, a3, a4, a5, a6, a8, a7, a8, a9)|| (uint64_t result = ValidateParts(Zin3DDeConvUtils::DeconvSplit &,ZinTensorDimensions const&,ZinKernelFormat const&,ZinTensorFormat const&,BOOL,BOOL,std::optional<unsigned long>,ZinIrParameters const&)::$_0::operator()(a1 + 392, a1 + 72, a2, a3, a4, a5, a6,
                   v17,
                   a7,
                   v9,
                   a9),
        result))
  {
    BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v19) {
      ValidateParts(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    return 3;
  }
  return result;
}

void sub_21134006C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)va);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x2A8]);
  _Unwind_Resume(a1);
}

uint64_t ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 32);
  if (*(uint64_t *)(*(void *)(a1 + 48) + 136) >= 2)
  {
    BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v3) {
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    *(void *)(a1 + 256) = 1;
    long long v30 = @"InvalidDilationFactor";
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v30, (uint64_t *)&v30);
    long long v30 = @"PartiallyImplementedUnit";
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v30, (uint64_t *)&v30);
  }
  ANECFormatToZinTensorFormat(**(void **)(a1 + 40));
  ZinMirDilatedConv::DecomposeDilationFactorX(v2, *(_DWORD *)(*(void *)(a1 + 48) + 120), (uint64_t)&v30);
  if (v35 != 1)
  {
    int v11 = ANECFormatToZinTensorFormat(**(void **)(a1 + 40));
    unint64_t MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(v2, v11);
    if ((*(void *)(*(void *)(a1 + 48) + 56) - 1) * v35 + 1 > MaxLogicalKernelWidthForLargeKernelMode)
    {
      BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v13) {
        ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      *(void *)(a1 + 24std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
      if (v32 != v31)
      {
        uint64_t v21 = (int **)(v31 + 8 * (v33 >> 10));
        uint64_t v22 = *v21;
        uint64_t v23 = &(*v21)[v33 & 0x3FF];
        uint64_t v24 = *(void *)(v31 + (((v34 + v33) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v34 + v33) & 0x3FF);
        if (v23 != (int *)v24)
        {
          uint64_t v25 = 1;
          do
          {
            uint64_t v27 = *v23++;
            uint64_t v26 = v27;
            if ((char *)v23 - (char *)v22 == 4096)
            {
              unint64_t v28 = v21[1];
              ++v21;
              uint64_t v22 = v28;
              uint64_t v23 = v28;
            }
            v25 *= v26;
          }
          while (v23 != (int *)v24);
          *(void *)(a1 + 24std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v25;
        }
      }
      long long v36 = @"InvalidDilationFactor";
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v36, (uint64_t *)&v36);
    }
  }
  return std::deque<int>::~deque[abi:ne180100](&v30);
}

void sub_211340258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__push_back_slow_path<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x14C1BACF914C1BADLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xDD67C8A60DD67CLL) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x14C1BACF914C1BADLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x6EB3E45306EB3ELL) {
    unint64_t v9 = 0xDD67C8A60DD67CLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v29 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<Subgraph,SplitInfo>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = &v10[296 * v4];
  v26[0] = v10;
  v26[1] = v11;
  uint64_t v27 = v11;
  unint64_t v28 = &v10[296 * v9];
  *(void *)int v11 = &unk_26C34A6A8;
  std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)v11 + 1, a2 + 8);
  *((void *)v11 + 4) = *(void *)(a2 + 32);
  *(void *)int v11 = &unk_26C3495D0;
  long long v12 = *(_OWORD *)(a2 + 40);
  long long v13 = *(_OWORD *)(a2 + 56);
  long long v14 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v11 + 72) = v14;
  *(_OWORD *)(v11 + 56) = v13;
  *(_OWORD *)(v11 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v12;
  long long v15 = *(_OWORD *)(a2 + 104);
  long long v16 = *(_OWORD *)(a2 + 120);
  long long v17 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v11 + 136) = v17;
  *(_OWORD *)(v11 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v16;
  *(_OWORD *)(v11 + 104) = v15;
  long long v18 = *(_OWORD *)(a2 + 168);
  long long v19 = *(_OWORD *)(a2 + 184);
  long long v20 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v11 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v11 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v20;
  *(_OWORD *)(v11 + 184) = v19;
  *(_OWORD *)(v11 + 168) = v18;
  long long v21 = *(_OWORD *)(a2 + 264);
  long long v22 = *(_OWORD *)(a2 + 280);
  long long v23 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v11 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v11 + 232) = v23;
  *(_OWORD *)(v11 + 264) = v21;
  *(_OWORD *)(v11 + 28std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v22;
  v27 += 296;
  std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__swap_out_circular_buffer(a1, v26);
  uint64_t v24 = a1[1];
  std::__split_buffer<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::~__split_buffer((uint64_t)v26);
  return v24;
}

void sub_211340450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v6 + v10;
      *(void *)(v6 + v1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &unk_26C34A6A8;
      std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(v6 + v10 + 8), v7 + v10 + 8);
      *(void *)(v11 + 32) = *(void *)(v7 + v10 + 32);
      *(void *)uint64_t v11 = &unk_26C3495D0;
      long long v12 = *(_OWORD *)(v7 + v10 + 40);
      long long v13 = *(_OWORD *)(v7 + v10 + 56);
      long long v14 = *(_OWORD *)(v7 + v10 + 72);
      *(_OWORD *)(v11 + 88) = *(_OWORD *)(v7 + v10 + 88);
      *(_OWORD *)(v11 + 72) = v14;
      *(_OWORD *)(v11 + 56) = v13;
      *(_OWORD *)(v11 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v12;
      long long v15 = *(_OWORD *)(v7 + v10 + 104);
      long long v16 = *(_OWORD *)(v7 + v10 + 120);
      long long v17 = *(_OWORD *)(v7 + v10 + 136);
      *(_OWORD *)(v11 + 152) = *(_OWORD *)(v7 + v10 + 152);
      *(_OWORD *)(v11 + 136) = v17;
      *(_OWORD *)(v11 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v16;
      *(_OWORD *)(v11 + 104) = v15;
      long long v18 = *(_OWORD *)(v7 + v10 + 168);
      long long v19 = *(_OWORD *)(v7 + v10 + 184);
      long long v20 = *(_OWORD *)(v7 + v10 + 200);
      *(_OWORD *)(v11 + 216) = *(_OWORD *)(v7 + v10 + 216);
      *(_OWORD *)(v11 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v20;
      *(_OWORD *)(v11 + 184) = v19;
      *(_OWORD *)(v11 + 168) = v18;
      long long v21 = *(_OWORD *)(v7 + v10 + 232);
      long long v22 = *(_OWORD *)(v7 + v10 + 248);
      long long v23 = *(_OWORD *)(v7 + v10 + 280);
      *(_OWORD *)(v11 + 264) = *(_OWORD *)(v7 + v10 + 264);
      *(_OWORD *)(v11 + 28std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v23;
      *(_OWORD *)(v11 + 248) = v22;
      *(_OWORD *)(v11 + 232) = v21;
      v10 += 296;
    }
    while (v7 + v10 < a3);
    uint64_t v8 = v6 + v10;
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *>((uint64_t)&v25, a2, v7, v6);
}

void sub_2113405D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__split_buffer<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__construct_at_end_with_size<std::__wrap_iter<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v4 + 296 * a3;
    uint64_t v8 = 296 * a3;
    do
    {
      uint64_t v9 = v4 + v6;
      *(void *)(v4 + v6) = &unk_26C34A6A8;
      uint64_t result = std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(v4 + v6 + 8), a2 + v6 + 8);
      *(void *)(v9 + 32) = *(void *)(a2 + v6 + 32);
      *(void *)uint64_t v9 = &unk_26C3495D0;
      long long v10 = *(_OWORD *)(a2 + v6 + 40);
      long long v11 = *(_OWORD *)(a2 + v6 + 56);
      long long v12 = *(_OWORD *)(a2 + v6 + 72);
      *(_OWORD *)(v9 + 88) = *(_OWORD *)(a2 + v6 + 88);
      *(_OWORD *)(v9 + 72) = v12;
      *(_OWORD *)(v9 + 56) = v11;
      *(_OWORD *)(v9 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v10;
      long long v13 = *(_OWORD *)(a2 + v6 + 104);
      long long v14 = *(_OWORD *)(a2 + v6 + 120);
      long long v15 = *(_OWORD *)(a2 + v6 + 136);
      *(_OWORD *)(v9 + 152) = *(_OWORD *)(a2 + v6 + 152);
      *(_OWORD *)(v9 + 136) = v15;
      *(_OWORD *)(v9 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v14;
      *(_OWORD *)(v9 + 104) = v13;
      long long v16 = *(_OWORD *)(a2 + v6 + 168);
      long long v17 = *(_OWORD *)(a2 + v6 + 184);
      long long v18 = *(_OWORD *)(a2 + v6 + 200);
      *(_OWORD *)(v9 + 216) = *(_OWORD *)(a2 + v6 + 216);
      *(_OWORD *)(v9 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v18;
      *(_OWORD *)(v9 + 184) = v17;
      *(_OWORD *)(v9 + 168) = v16;
      long long v19 = *(_OWORD *)(a2 + v6 + 232);
      long long v20 = *(_OWORD *)(a2 + v6 + 248);
      long long v21 = *(_OWORD *)(a2 + v6 + 280);
      *(_OWORD *)(v9 + 264) = *(_OWORD *)(a2 + v6 + 264);
      *(_OWORD *)(v9 + 28std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v21;
      *(_OWORD *)(v9 + 248) = v20;
      *(_OWORD *)(v9 + 232) = v19;
      v6 += 296;
    }
    while (v8 != v6);
  }
  else
  {
    uint64_t v7 = result[2];
  }
  v3[2] = v7;
  return result;
}

void sub_211340734(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = (void *)(a3 - 280);
    uint64_t v8 = a3;
    do
    {
      if (v8 != a4) {
        std::__tree<__CFString const*>::__assign_multi<std::__tree_const_iterator<__CFString const*,std::__tree_node<__CFString const*,void *> *,long>>((uint64_t **)(a4 - 288), *(void **)(v8 - 288), v7);
      }
      *(void *)(a4 - 264) = *(void *)(v8 - 264);
      long long v9 = *(_OWORD *)(v8 - 256);
      long long v10 = *(_OWORD *)(v8 - 240);
      long long v11 = *(_OWORD *)(v8 - 208);
      *(_OWORD *)(a4 - 224) = *(_OWORD *)(v8 - 224);
      *(_OWORD *)(a4 - 208) = v11;
      *(_OWORD *)(a4 - 256) = v9;
      *(_OWORD *)(a4 - 24std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v10;
      long long v12 = *(_OWORD *)(v8 - 192);
      long long v13 = *(_OWORD *)(v8 - 176);
      long long v14 = *(_OWORD *)(v8 - 144);
      *(_OWORD *)(a4 - 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(v8 - 160);
      *(_OWORD *)(a4 - 144) = v14;
      *(_OWORD *)(a4 - 192) = v12;
      *(_OWORD *)(a4 - 176) = v13;
      long long v15 = *(_OWORD *)(v8 - 128);
      long long v16 = *(_OWORD *)(v8 - 112);
      long long v17 = *(_OWORD *)(v8 - 80);
      *(_OWORD *)(a4 - 96) = *(_OWORD *)(v8 - 96);
      *(_OWORD *)(a4 - 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
      *(_OWORD *)(a4 - 128) = v15;
      *(_OWORD *)(a4 - 112) = v16;
      long long v18 = *(_OWORD *)(v8 - 64);
      long long v19 = *(_OWORD *)(v8 - 48);
      long long v20 = *(_OWORD *)(v8 - 16);
      *(_OWORD *)(a4 - 32) = *(_OWORD *)(v8 - 32);
      *(_OWORD *)(a4 - 16) = v20;
      *(_OWORD *)(a4 - 64) = v18;
      *(_OWORD *)(a4 - 48) = v19;
      v7 -= 37;
      v8 -= 296;
      a4 -= 296;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = (void *)(a2 + 16);
  do
  {
    if (v5 != a4) {
      std::__tree<__CFString const*>::__assign_multi<std::__tree_const_iterator<__CFString const*,std::__tree_node<__CFString const*,void *> *,long>>((uint64_t **)(a4 + 8), *(void **)(v5 + 8), v7);
    }
    *(void *)(a4 + 32) = *(void *)(v5 + 32);
    long long v8 = *(_OWORD *)(v5 + 40);
    long long v9 = *(_OWORD *)(v5 + 56);
    long long v10 = *(_OWORD *)(v5 + 72);
    *(_OWORD *)(a4 + 88) = *(_OWORD *)(v5 + 88);
    *(_OWORD *)(a4 + 72) = v10;
    *(_OWORD *)(a4 + 56) = v9;
    *(_OWORD *)(a4 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v8;
    long long v11 = *(_OWORD *)(v5 + 104);
    long long v12 = *(_OWORD *)(v5 + 120);
    long long v13 = *(_OWORD *)(v5 + 136);
    *(_OWORD *)(a4 + 152) = *(_OWORD *)(v5 + 152);
    *(_OWORD *)(a4 + 136) = v13;
    *(_OWORD *)(a4 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v12;
    *(_OWORD *)(a4 + 104) = v11;
    long long v14 = *(_OWORD *)(v5 + 168);
    long long v15 = *(_OWORD *)(v5 + 184);
    long long v16 = *(_OWORD *)(v5 + 200);
    *(_OWORD *)(a4 + 216) = *(_OWORD *)(v5 + 216);
    *(_OWORD *)(a4 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v16;
    *(_OWORD *)(a4 + 184) = v15;
    *(_OWORD *)(a4 + 168) = v14;
    long long v17 = *(_OWORD *)(v5 + 232);
    long long v18 = *(_OWORD *)(v5 + 248);
    long long v19 = *(_OWORD *)(v5 + 280);
    *(_OWORD *)(a4 + 264) = *(_OWORD *)(v5 + 264);
    *(_OWORD *)(a4 + 28std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v19;
    *(_OWORD *)(a4 + 248) = v18;
    *(_OWORD *)(a4 + 232) = v17;
    a4 += 296;
    v7 += 37;
    v5 += 296;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      *(void *)(a4 + v7) = &unk_26C34A6A8;
      std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(a4 + v7 + 8), a2 + v7 + 8);
      *(void *)(v8 + 32) = *(void *)(a2 + v7 + 32);
      *(void *)uint64_t v8 = &unk_26C3495D0;
      long long v9 = *(_OWORD *)(a2 + v7 + 40);
      long long v10 = *(_OWORD *)(a2 + v7 + 56);
      long long v11 = *(_OWORD *)(a2 + v7 + 72);
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + v7 + 88);
      *(_OWORD *)(v8 + 72) = v11;
      *(_OWORD *)(v8 + 56) = v10;
      *(_OWORD *)(v8 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v9;
      long long v12 = *(_OWORD *)(a2 + v7 + 104);
      long long v13 = *(_OWORD *)(a2 + v7 + 120);
      long long v14 = *(_OWORD *)(a2 + v7 + 136);
      *(_OWORD *)(v8 + 152) = *(_OWORD *)(a2 + v7 + 152);
      *(_OWORD *)(v8 + 136) = v14;
      *(_OWORD *)(v8 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v13;
      *(_OWORD *)(v8 + 104) = v12;
      long long v15 = *(_OWORD *)(a2 + v7 + 168);
      long long v16 = *(_OWORD *)(a2 + v7 + 184);
      long long v17 = *(_OWORD *)(a2 + v7 + 200);
      *(_OWORD *)(v8 + 216) = *(_OWORD *)(a2 + v7 + 216);
      *(_OWORD *)(v8 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
      *(_OWORD *)(v8 + 184) = v16;
      *(_OWORD *)(v8 + 168) = v15;
      long long v18 = *(_OWORD *)(a2 + v7 + 232);
      long long v19 = *(_OWORD *)(a2 + v7 + 248);
      long long v20 = *(_OWORD *)(a2 + v7 + 280);
      *(_OWORD *)(v8 + 264) = *(_OWORD *)(a2 + v7 + 264);
      *(_OWORD *)(v8 + 28std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v20;
      *(_OWORD *)(v8 + 248) = v19;
      *(_OWORD *)(v8 + 232) = v18;
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_211340B08(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>();
  }
  _Unwind_Resume(exception_object);
}

void std::vector<ANECConvLayerDescAlternate>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x4E25B9EFD4E25B9FLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x563B48C20563B5) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANECConvLayerDescAlternate>>(v3, a2);
    uint64_t v7 = &v6[760 * (v5 / 760)];
    long long v9 = &v6[760 * v8];
    long long v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v10 -= 760;
        v12 -= 760;
        memcpy(v12, v10, 0x2F8uLL);
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t ZinGetUnitAlternate<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>,ANECConvLayerDescAlternate>(uint64_t result, uint64_t a2)
{
  long long v2 = *(_OWORD *)(result + 120);
  long long v3 = *(_OWORD *)(result + 152);
  *(_OWORD *)(a2 + 536) = *(_OWORD *)(result + 136);
  *(_OWORD *)(a2 + 552) = v3;
  *(_OWORD *)(a2 + 52std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v2;
  long long v4 = *(_OWORD *)(result + 168);
  long long v5 = *(_OWORD *)(result + 184);
  long long v6 = *(_OWORD *)(result + 216);
  *(_OWORD *)(a2 + 60std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(result + 200);
  *(_OWORD *)(a2 + 616) = v6;
  *(_OWORD *)(a2 + 568) = v4;
  *(_OWORD *)(a2 + 584) = v5;
  long long v7 = *(_OWORD *)(result + 232);
  long long v8 = *(_OWORD *)(result + 248);
  long long v9 = *(_OWORD *)(result + 280);
  *(_OWORD *)(a2 + 664) = *(_OWORD *)(result + 264);
  *(_OWORD *)(a2 + 68std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v9;
  *(_OWORD *)(a2 + 632) = v7;
  *(_OWORD *)(a2 + 648) = v8;
  long long v10 = *(_OWORD *)(result + 56);
  long long v11 = *(_OWORD *)(result + 72);
  long long v12 = *(_OWORD *)(result + 104);
  *(_OWORD *)(a2 + 728) = *(_OWORD *)(result + 88);
  *(_OWORD *)(a2 + 744) = v12;
  *(_OWORD *)(a2 + 696) = v10;
  *(_OWORD *)(a2 + 712) = v11;
  long long v13 = *(void **)(result + 8);
  if (v13 == (void *)(result + 16))
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    while (1)
    {
      *(void *)(a2 + 8 * v14 + 8) = v13[4];
      if (v14 == 63) {
        break;
      }
      long long v15 = (void *)v13[1];
      if (v15)
      {
        do
        {
          long long v16 = v15;
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (void *)v13[2];
          BOOL v17 = *v16 == (void)v13;
          long long v13 = v16;
        }
        while (!v17);
      }
      ++v14;
      long long v13 = v16;
      if (v16 == (void *)(result + 16)) {
        goto LABEL_13;
      }
    }
    uint64_t v14 = 64;
  }
LABEL_13:
  *(void *)a2 = v14;
  return result;
}

void ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>::Validate(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_0_3(a1, a2);
  _os_log_debug_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "The input tensors dimension should match for interleaved concat.\n", v2, 2u);
}

void ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>::Validate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>>,ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc> const*,ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc> const*,ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 104;
  uint64_t v4 = a1 - 104;
  uint64_t v5 = a1 - 104;
  do
  {
    v5 -= 104;
    uint64_t v6 = OUTLINED_FUNCTION_4_0();
    uint64_t result = v7(v6);
    v3 -= 104;
    BOOL v9 = v4 == a2;
    uint64_t v4 = v5;
  }
  while (!v9);
  return result;
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateMinTensorSize()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_8_0();
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Conv padded input tensor width %ld is smaller than the kernel width %ld\n", v0, 0x16u);
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelQuantizationParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Only int8 and uint8 kernel formats are supported with kernel quantization.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Mutable kernels are not supported with kernel quantization.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Per-cout zero point and scalar zero point cannot be defined simultaneously.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Per-cout scale and scalar scale cannot be defined simultaneously.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Per-cout scale format is invalid.\n", a5, a6, a7, a8, 0);
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidatePaletteVectorSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Invalid kernel format.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Invalid kernel palette vector size.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Mutable kernels are not supported with vector palettization.\n", a5, a6, a7, a8, 0);
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateOCGSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ValidateParts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "dilation in z dimension is not supported.", a5, a6, a7, a8, 0);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>>(uint64_t (***a1)(void), uint64_t (***a2)(void))
{
  uint64_t v3 = a1;
  uint64_t v4 = a1;
  do
  {
    uint64_t result = (**v4)(v4);
    v4 += 37;
    v3 += 37;
  }
  while (v4 != a2);
  return result;
}

void std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>()
{
  OUTLINED_FUNCTION_6_4();
  do
  {
    OUTLINED_FUNCTION_4_2();
    uint64_t v0 = OUTLINED_FUNCTION_4_0();
    v1(v0);
    OUTLINED_FUNCTION_5_6();
  }
  while (!v2);
}

float ZinF32ToNearestF19(float a1)
{
  int v9 = 0;
  _S0 = frexpf(a1, &v9);
  __asm
  {
    FCVT            H0, S0
    FCVT            S0, H0; float
  }
  int v7 = v9;

  return ldexpf(_S0, v7);
}

BOOL ZinF16OutOfBounds(float a1)
{
  return a1 < -65504.0 || a1 > 65504.0;
}

void ZinAneTdHw_v10::ZinAneTdHw_v10(ZinAneTdHw_v10 *this, unsigned int a2, char a3, int a4)
{
  *((void *)this + 122) = 0;
  *((_OWORD *)this + 6std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  bzero(this, 0x3B5uLL);
  *((unsigned char *)this + 948) = a3;
  *((_DWORD *)this + 238) = a4;
}

uint64_t ZinAneTdHw_v10::GetRegisterValueFromAddress(ZinAneTdHw_v10 *this, unsigned int a2)
{
  if (a2 <= 0x4B)
  {
    char v2 = (char *)this + 244;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  unsigned int v3 = a2 - 16640;
  if (a2 - 16640 <= 0x77)
  {
    char v2 = (char *)this + 612;
LABEL_13:
    a2 = v3;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  unsigned int v3 = a2 - 17664;
  if (a2 - 17664 <= 0x37)
  {
    char v2 = (char *)this + 740;
    goto LABEL_13;
  }
  unsigned int v3 = a2 - 18688;
  if (a2 - 18688 <= 0x2B)
  {
    char v2 = (char *)this + 804;
    goto LABEL_13;
  }
  unsigned int v3 = a2 - 19712;
  if (a2 - 19712 <= 0x113)
  {
    char v2 = (char *)this + 328;
    goto LABEL_13;
  }
  unsigned int v3 = a2 - 20736;
  if (a2 - 20736 <= 0x53)
  {
    char v2 = (char *)this + 856;
    goto LABEL_13;
  }
  a2 -= 21760;
  if (a2 <= 0x87)
  {
    char v2 = (char *)this + 36;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  return 0;
}

uint64_t ZinAneTdHw_v10::AddRelocInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v15 = a4;
  unsigned int v16 = a3;
  unsigned int v14 = a5;
  unsigned __int8 v13 = a6;
  unsigned __int8 v12 = a7;
  unsigned __int8 v11 = a8;
  unint64_t v9 = a1[121];
  if (v9 >= a1[122])
  {
    uint64_t result = std::vector<ZinAneRelocInfo>::__emplace_back_slow_path<std::string const&,unsigned int &,unsigned int &,ane_relocation_command_size_v11_t &,BOOL &,BOOL &,BOOL &>(a1 + 120, a2, &v16, &v15, &v14, &v13, &v12, &v11);
  }
  else
  {
    ZinAneRelocInfo::ZinAneRelocInfo(a1[121], a2, a3, a4, a5, a6, a7, a8);
    uint64_t result = v9 + 40;
    a1[121] = v9 + 40;
  }
  a1[121] = result;
  return result;
}

void sub_211341490(_Unwind_Exception *a1)
{
  *(void *)(v1 + 968) = v2;
  _Unwind_Resume(a1);
}

uint64_t ZinAneTdHw_v10::GetRelocInfos(ZinAneTdHw_v10 *this)
{
  return (uint64_t)this + 960;
}

void ZinAneTdHw_v19::ZinAneTdHw_v19(ZinAneTdHw_v19 *this, unsigned int a2, char a3, int a4)
{
  *((void *)this + 181) = 0;
  *(_OWORD *)((char *)this + 1432) = 0u;
  bzero(this, 0x58DuLL);
  *((unsigned char *)this + 142std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a3;
  *((_DWORD *)this + 356) = a4;
}

uint64_t ZinAneTdHw_v19::GetRegisterValueFromAddress(ZinAneTdHw_v19 *this, unsigned int a2)
{
  if (a2 <= 0x5B)
  {
    uint64_t v2 = (char *)this + 508;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  unsigned int v3 = a2 - 16640;
  if (a2 - 16640 <= 0xA7)
  {
    uint64_t v2 = (char *)this + 948;
LABEL_15:
    a2 = v3;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  if (a2 >> 6 == 276)
  {
    uint64_t v2 = (char *)this + 1124;
    a2 -= 17664;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  unsigned int v3 = a2 - 18688;
  if (a2 - 18688 <= 0x33)
  {
    uint64_t v2 = (char *)this + 1196;
    goto LABEL_15;
  }
  unsigned int v3 = a2 - 19712;
  if (a2 - 19712 <= 0x14B)
  {
    uint64_t v2 = (char *)this + 608;
    goto LABEL_15;
  }
  unsigned int v3 = a2 - 20736;
  if (a2 - 20736 <= 0x5B)
  {
    uint64_t v2 = (char *)this + 1256;
    goto LABEL_15;
  }
  unsigned int v3 = a2 - 21760;
  if (a2 - 21760 <= 0x127)
  {
    uint64_t v2 = (char *)this + 44;
    goto LABEL_15;
  }
  a2 -= 22784;
  if (a2 <= 0x37)
  {
    uint64_t v2 = (char *)this + 1356;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  return 0;
}

uint64_t ZinAneTdHw_v19::AddRelocInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v15 = a4;
  unsigned int v16 = a3;
  unsigned int v14 = a5;
  unsigned __int8 v13 = a6;
  unsigned __int8 v12 = a7;
  unsigned __int8 v11 = a8;
  unint64_t v9 = a1[180];
  if (v9 >= a1[181])
  {
    uint64_t result = std::vector<ZinAneRelocInfo>::__emplace_back_slow_path<std::string const&,unsigned int &,unsigned int &,ane_relocation_command_size_v11_t &,BOOL &,BOOL &,BOOL &>(a1 + 179, a2, &v16, &v15, &v14, &v13, &v12, &v11);
  }
  else
  {
    ZinAneRelocInfo::ZinAneRelocInfo(a1[180], a2, a3, a4, a5, a6, a7, a8);
    uint64_t result = v9 + 40;
    a1[180] = v9 + 40;
  }
  a1[180] = result;
  return result;
}

void sub_211341648(_Unwind_Exception *a1)
{
  *(void *)(v1 + 144std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v2;
  _Unwind_Resume(a1);
}

uint64_t ZinAneTdHw_v19::GetRelocInfos(ZinAneTdHw_v19 *this)
{
  return (uint64_t)this + 1432;
}

__CFDictionary *ZinCreateRingBufferWriterUnit(const ZinIrUnitInfo *a1)
{
  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  ZinAddOffsetsToParamsDict(Mutable, (uint64_t)a1 + 120, (uint64_t)a1 + 80, @"RingBufferWriterInfo");
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

void *ZinManyToOnePattern::ZinManyToOnePattern(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v16[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__value_func[abi:ne180100]((uint64_t)v16, a5);
  ZinPattern::ZinPattern((uint64_t)a1, a3, a4, (uint64_t)v16, a6);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v16);
  *a1 = &unk_26C34CFE8;
  a1[23] = 0;
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  _OWORD v15[3] = 0;
  ZinLinearPattern::ZinLinearPattern(a1 + 27, v11, a3, a4, v15, a1 + 13);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v15);
  uint64_t v12 = *(void *)(a2 + 24);
  unsigned int v14[3] = 0;
  ZinLinearPattern::ZinLinearPattern(a1 + 53, v12, a3, a4, v14, a1 + 13);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__value_func[abi:ne180100]((uint64_t)(a1 + 79), a2 + 32);
  ZinManyToOnePattern::InitializeInputs<ZinManyToOnePattern::ParamsT<std::vector<ZinLinearPattern::AtomItemDesc>>>(a1, (uint64_t **)a2);
  return a1;
}

{
  uint64_t v11;
  uint64_t v12;
  void v14[4];
  void v15[4];
  void v16[5];

  v16[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__value_func[abi:ne180100]((uint64_t)v16, a5);
  ZinPattern::ZinPattern((uint64_t)a1, a3, a4, (uint64_t)v16, a6);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v16);
  *a1 = &unk_26C34CFE8;
  a1[23] = 0;
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  _OWORD v15[3] = 0;
  ZinLinearPattern::ZinLinearPattern(a1 + 27, v11, a3, a4, v15, a1 + 13);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v15);
  uint64_t v12 = *(void *)(a2 + 24);
  unsigned int v14[3] = 0;
  ZinLinearPattern::ZinLinearPattern(a1 + 53, v12, a3, a4, v14, a1 + 13);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__value_func[abi:ne180100]((uint64_t)(a1 + 79), a2 + 32);
  ZinManyToOnePattern::InitializeInputs<ZinManyToOnePattern::ParamsT<std::vector<ZinLinearPattern::AtomItem>>>(a1, (uint64_t **)a2);
  return a1;
}

void sub_211341838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v11);
  ZinLinearPattern::~ZinLinearPattern(v12);
  ZinLinearPattern::~ZinLinearPattern(v10);
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100](&a9);
  ZinPattern::~ZinPattern(v9);
  _Unwind_Resume(a1);
}

void *ZinManyToOnePattern::InitializeInputs<ZinManyToOnePattern::ParamsT<std::vector<ZinLinearPattern::AtomItemDesc>>>(void *result, uint64_t **a2)
{
  unint64_t v17[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = **a2;
  if ((*a2)[1] != v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    int v7 = result + 2;
    long long v8 = result + 13;
    unint64_t v9 = result + 23;
    do
    {
      unsigned int v10 = *((_DWORD *)v4 + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v6 != (void)a2[1];
      }
      _OWORD v15[3] = 0;
      ZinLinearPattern::ZinLinearPattern(v16, v2 + v5, v7, v11, v15, v8);
      unint64_t v12 = v4[24];
      if (v12 >= v4[25])
      {
        uint64_t v13 = std::vector<ZinLinearPattern>::__push_back_slow_path<ZinLinearPattern>(v9, (uint64_t)v16);
      }
      else
      {
        std::vector<ZinLinearPattern>::__construct_one_at_end[abi:ne180100]<ZinLinearPattern>((uint64_t)v9, (uint64_t)v16);
        uint64_t v13 = v12 + 208;
      }
      v4[24] = v13;
      v16[0] = &unk_26C349BA8;
      unsigned int v14 = (void **)v17;
      std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v14);
      ZinPattern::~ZinPattern((ZinPattern *)v16);
      uint64_t result = std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v15);
      ++v6;
      uint64_t v2 = **a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * (((*a2)[1] - v2) >> 3));
  }
  return result;
}

void sub_211341A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)va1);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_211341B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v11);
  ZinLinearPattern::~ZinLinearPattern(v12);
  ZinLinearPattern::~ZinLinearPattern(v10);
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100](&a9);
  ZinPattern::~ZinPattern(v9);
  _Unwind_Resume(a1);
}

void *ZinManyToOnePattern::InitializeInputs<ZinManyToOnePattern::ParamsT<std::vector<ZinLinearPattern::AtomItem>>>(void *result, uint64_t **a2)
{
  unint64_t v17[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = **a2;
  if ((*a2)[1] != v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = result + 2;
    uint64_t v8 = result + 13;
    unint64_t v9 = result + 23;
    do
    {
      unsigned int v10 = *((_DWORD *)v4 + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v6 != (void)a2[1];
      }
      _OWORD v15[3] = 0;
      ZinLinearPattern::ZinLinearPattern(v16, v2 + v5, v7, v11, v15, v8);
      unint64_t v12 = v4[24];
      if (v12 >= v4[25])
      {
        uint64_t v13 = std::vector<ZinLinearPattern>::__push_back_slow_path<ZinLinearPattern>(v9, (uint64_t)v16);
      }
      else
      {
        std::vector<ZinLinearPattern>::__construct_one_at_end[abi:ne180100]<ZinLinearPattern>((uint64_t)v9, (uint64_t)v16);
        uint64_t v13 = v12 + 208;
      }
      v4[24] = v13;
      v16[0] = &unk_26C349BA8;
      unsigned int v14 = (void **)v17;
      std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v14);
      ZinPattern::~ZinPattern((ZinPattern *)v16);
      uint64_t result = std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v15);
      ++v6;
      uint64_t v2 = **a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * (((*a2)[1] - v2) >> 3));
  }
  return result;
}

void sub_211341D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)va1);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

double ZinManyToOnePattern::SharedClone@<D0>(ZinManyToOnePattern *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<ZinManyToOnePattern,std::allocator<ZinManyToOnePattern>,ZinManyToOnePattern const&,void>(this, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void ZinManyToOnePattern::GetOutputEdges(ZinManyToOnePattern *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  ZinLinearPattern::GetOutputEdges((ZinManyToOnePattern *)((char *)this + 424), (char **)&__p);
  std::vector<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>,std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>>((char **)a2, 0, (long long *)__p, v5, ((char *)v5 - (unsigned char *)__p) >> 4);
  if (__p)
  {
    uint64_t v5 = (long long *)__p;
    operator delete(__p);
  }
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    ZinLinearPattern::GetOutputEdges((ZinManyToOnePattern *)((char *)this + 216), (char **)&__p);
    std::vector<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>,std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>>((char **)a2, *(void *)(a2 + 8), (long long *)__p, v5, ((char *)v5 - (unsigned char *)__p) >> 4);
    if (__p)
    {
      uint64_t v5 = (long long *)__p;
      operator delete(__p);
    }
  }
}

void sub_211341E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void ZinManyToOnePattern::~ZinManyToOnePattern(ZinManyToOnePattern *this)
{
  *(void *)this = &unk_26C34CFE8;
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100]((void *)this + 79);
  *((void *)this + 53) = &unk_26C349BA8;
  uint64_t v2 = (void **)((char *)this + 608);
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v2);
  ZinPattern::~ZinPattern((ZinManyToOnePattern *)((char *)this + 424));
  *((void *)this + 27) = &unk_26C349BA8;
  uint64_t v2 = (void **)((char *)this + 400);
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v2);
  ZinPattern::~ZinPattern((ZinManyToOnePattern *)((char *)this + 216));
  uint64_t v2 = (void **)((char *)this + 184);
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100](&v2);
  ZinPattern::~ZinPattern(this);
  MEMORY[0x21667D3C0]();
}

void *std::allocate_shared[abi:ne180100]<ZinManyToOnePattern,std::allocator<ZinManyToOnePattern>,ZinManyToOnePattern const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x2B0uLL);
  double result = std::__shared_ptr_emplace<ZinManyToOnePattern>::__shared_ptr_emplace[abi:ne180100]<ZinManyToOnePattern const&,std::allocator<ZinManyToOnePattern>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_211342004(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ZinManyToOnePattern>::__shared_ptr_emplace[abi:ne180100]<ZinManyToOnePattern const&,std::allocator<ZinManyToOnePattern>,0>(void *a1, const ZinManyToOnePattern *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C388EB0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  return a1;
}

void sub_211342060(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

__CFDictionary *ZinCreateSpaceToChannelUnit(const ZinIrSpaceToChannelUnitInfo *a1)
{
  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int v5 = 36;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

void ZinReshapeLayerUtils::TraceReshapeDimension(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = *(_OWORD *)(a1 + 64);
  v52[0] = *(_OWORD *)(a1 + 48);
  v52[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 64);
  v50[0] = *(_OWORD *)(a2 + 48);
  uint64_t v53 = *(void *)(a1 + 80);
  v50[1] = v8;
  uint64_t v51 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v9) {
    int v10 = *(_DWORD *)(v9 + 96);
  }
  else {
    int v10 = 0;
  }
  int v11 = *(_DWORD *)(a1 + 88);
  DimensionOrderHint::DimensionOrderHint(__p, a3);
  uint64_t Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)a1);
  ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)(a1 + 48), v11, v10, (uint64_t)__p, 1, Interleave, v13, v49);
  if (__p[0].i64[0])
  {
    __p[0].i64[1] = __p[0].i64[0];
    operator delete((void *)__p[0].i64[0]);
  }
  uint64_t v14 = *(void *)(a2 + 104);
  if (v14) {
    int v15 = *(_DWORD *)(v14 + 96);
  }
  else {
    int v15 = 0;
  }
  int v16 = *(_DWORD *)(a2 + 88);
  DimensionOrderHint::DimensionOrderHint(&v45, a3);
  uint64_t v17 = ZinIrTensor::GetInterleave((ZinIrTensor *)a2);
  ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)(a2 + 48), v16, v15, (uint64_t)&v45, 1, v17, v18, __p);
  if (v45)
  {
    long long v46 = (char *)v45;
    operator delete(v45);
  }
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)a4 = a4 + 8;
  long long v19 = (_DWORD *)a3[1];
  if (v19 != (_DWORD *)*a3)
  {
    uint64_t v20 = a3[1];
    do
    {
      int v21 = *(_DWORD *)(v20 - 4);
      v20 -= 4;
      int v44 = v21;
      uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>(__p[0].i64, v21);
      uint64_t v23 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v50, v44);
      uint64_t v24 = v19;
      do
      {
        long long v19 = v24;
        if (v24 == (_DWORD *)*a3) {
          break;
        }
        --v24;
        uint64_t v25 = GetValueAtDimension<ZinTensorDimensions>(v49[0].i64, *(v19 - 1));
      }
      while (!(ValueAt % (GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v52, *(v19 - 1)) * v25)));
      uint64_t v26 = 0;
      uint64_t v27 = v23 * ValueAt;
      do
      {
        uint64_t v28 = v26;
        uint64_t v29 = (_DWORD *)((char *)v19 + v26);
        if ((_DWORD *)((char *)v19 + v26) == (_DWORD *)*a3) {
          break;
        }
        uint64_t v30 = GetValueAtDimension<ZinTensorDimensions>(v49[0].i64, *(v29 - 1));
        uint64_t v26 = v28 - 4;
      }
      while (v30 % v27);
      long long v45 = 0;
      long long v46 = 0;
      long long v47 = 0;
      if (v28)
      {
        uint64_t v31 = 0;
        uint64_t v32 = v19;
        do
        {
          --v32;
          if (v31 >= v47)
          {
            uint64_t v34 = (char *)v45;
            uint64_t v35 = (v31 - (unsigned char *)v45) >> 2;
            unint64_t v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 62) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v37 = v47 - (unsigned char *)v45;
            if ((v47 - (unsigned char *)v45) >> 1 > v36) {
              unint64_t v36 = v37 >> 1;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38)
            {
              char v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v47, v38);
              uint64_t v34 = (char *)v45;
              uint64_t v31 = v46;
            }
            else
            {
              char v39 = 0;
            }
            uint64_t v40 = &v39[4 * v35];
            *(_DWORD *)uint64_t v40 = *v32;
            unint64_t v33 = v40 + 4;
            while (v31 != v34)
            {
              int v41 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v40 - 1) = v41;
              v40 -= 4;
            }
            long long v45 = v40;
            long long v46 = v33;
            long long v47 = &v39[4 * v38];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v31 = *v32;
            unint64_t v33 = v31 + 4;
          }
          long long v46 = v33;
          uint64_t v31 = v33;
        }
        while (v29 != v32);
      }
      uint64_t v54 = &v44;
      std::string::size_type v42 = (char *)(std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)a4, &v44, (uint64_t)&std::piecewise_construct, &v54)+ 5);
      if (v42 != (char *)&v45) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v42, (char *)v45, (uint64_t)v46, (v46 - (unsigned char *)v45) >> 2);
      }
      if (v45)
      {
        long long v46 = (char *)v45;
        operator delete(v45);
      }
    }
    while (v20 != *a3);
  }
}

void sub_211342450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DimensionOrderHint::~DimensionOrderHint(DimensionOrderHint *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void ZinReshapeLayerUtils::ConvertTransposeMappingToDims(uint64_t *a1, char **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    int v5 = a2 + 2;
    do
    {
      long long v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v19, *(const void **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3);
      uint64_t v6 = v19;
      long long v7 = v20;
      if (v19 != v20)
      {
        long long v8 = a2[1];
        do
        {
          uint64_t v9 = *v6;
          if ((unint64_t)v8 >= *v5)
          {
            uint64_t v10 = (v8 - *a2) >> 3;
            if ((unint64_t)(v10 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v11 = *v5 - (void)*a2;
            uint64_t v12 = v11 >> 2;
            if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
              uint64_t v12 = v10 + 1;
            }
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v12;
            }
            if (v13) {
              uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v13);
            }
            else {
              uint64_t v14 = 0;
            }
            int v15 = &v14[8 * v10];
            *(void *)int v15 = v9;
            long long v8 = v15 + 8;
            uint64_t v17 = *a2;
            int v16 = a2[1];
            if (v16 != *a2)
            {
              do
              {
                uint64_t v18 = *((void *)v16 - 1);
                v16 -= 8;
                *((void *)v15 - 1) = v18;
                v15 -= 8;
              }
              while (v16 != v17);
              int v16 = *a2;
            }
            *a2 = v15;
            a2[1] = v8;
            a2[2] = &v14[8 * v13];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(void *)long long v8 = v9;
            v8 += 8;
          }
          a2[1] = v8;
          ++v6;
        }
        while (v6 != v7);
        uint64_t v6 = v19;
      }
      if (v6)
      {
        uint64_t v20 = v6;
        operator delete(v6);
      }
      v2 += 24;
    }
    while (v2 != v3);
  }
}

void sub_211342660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayerUtils::IsValidDecomposition(long long *a1, int a2, uint64_t a3, uint64_t *a4)
{
  std::vector<ZinTensorDimensions>::vector(&v53, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 6) + 1);
  long long v8 = v53;
  long long v9 = *a1;
  long long v10 = a1[1];
  v53[4] = *((void *)a1 + 4);
  *long long v8 = v9;
  v8[1] = v10;
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(_DWORD *)(v11 + 192 * v12) == 21)
      {
        unint64_t v13 = &v53[5 * v12];
        uint64_t v14 = v11 + 192 * v12++ + 128;
        ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(v13, v14, v13 + 5);
      }
      else
      {
        uint64_t v15 = v11 + 192 * v12++;
        uint64_t v16 = *(void *)(v15 + 160);
        long long v17 = *(_OWORD *)(v15 + 128);
        long long v18 = *(_OWORD *)(v15 + 144);
        long long v19 = (char *)&v53[5 * v12];
        *((void *)v19 + 4) = v16;
        *(_OWORD *)long long v19 = v17;
        *((_OWORD *)v19 + 1) = v18;
      }
      uint64_t v11 = *a4;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 6) > v12);
    long long v8 = v53;
  }
  long long v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  std::vector<ZinTensorDimensions>::__init_with_size[abi:ne180100]<std::__wrap_iter<ZinTensorDimensions const*>,std::__wrap_iter<ZinTensorDimensions const*>>(&v50, v8, (uint64_t)v54, 0xCCCCCCCCCCCCCCCDLL * ((v54 - (unsigned char *)v8) >> 3));
  uint64_t v21 = *a4;
  uint64_t v20 = a4[1];
  if (v20 == *a4)
  {
LABEL_18:
    uint64_t v28 = 1;
    goto LABEL_20;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  int64x2_t v30 = vdupq_n_s64(1uLL);
  while (*(_DWORD *)(v21 + v23) != 21)
  {
LABEL_17:
    ++v24;
    v23 += 192;
    v22 += 5;
    if (0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 6) <= v24) {
      goto LABEL_18;
    }
  }
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)v47, (const ZinIrTransposeUnitInfo *)(v21 + v23 + 48));
  int v36 = a2;
  long long v26 = *(_OWORD *)&v53[v22];
  long long v25 = *(_OWORD *)&v53[v22 + 2];
  uint64_t v39 = v53[v22 + 4];
  long long v37 = v26;
  long long v38 = v25;
  __int16 v40 = 0;
  int64x2_t v41 = v30;
  char v42 = 0;
  char v43 = 0;
  int v46 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::ZinTransposeValidator(v34, a3, v47, &v36);
  ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)v34);
  ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::GetValidAlternateLayerDesc((uint64_t)v34, (ZinIrTransposeUnitInfo *)v31);
  uint64_t v27 = v35;
  v31[0] = &unk_26C34F988;
  if (__p)
  {
    unint64_t v33 = __p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v31);
  ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::~ZinTransposeValidator((uint64_t)v34);
  v47[0] = &unk_26C34F988;
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v47);
  if (!v27)
  {
    uint64_t v21 = *a4;
    uint64_t v20 = a4[1];
    goto LABEL_17;
  }
  uint64_t v28 = 0;
LABEL_20:
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  return v28;
}

void sub_211342944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v27 = *(void **)(v25 - 112);
  if (v27)
  {
    *(void *)(v25 - 104) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayerUtils::DecomposeMisAlignedReshape(int64x2_t *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  if (IsVector((const ZinTensorDimensions *)a1) && IsVector((const ZinTensorDimensions *)a2))
  {
    Vectorint Dimension = GetVectorDimension((const ZinTensorDimensions *)a1);
    unsigned int v12 = GetVectorDimension((const ZinTensorDimensions *)a2);
    unint64_t v13 = operator new(8uLL);
    *unint64_t v13 = VectorDimension | ((unint64_t)v12 << 32);
    uint64_t v501 = v13 + 1;
    std::string __p = v13;
    uint64_t v500 = (char *)(v13 + 1);
    uint64_t v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v501, 2uLL);
    v14[1] = v12 | ((unint64_t)VectorDimension << 32);
    uint64_t v15 = (char *)(v14 + 1);
    long long v17 = (char *)&v14[v16];
    long long v18 = (char *)(v14 + 2);
    long long v19 = (char *)__p;
    uint64_t v20 = v500;
    if (v500 != __p)
    {
      do
      {
        uint64_t v21 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v15 - 1) = v21;
        v15 -= 8;
      }
      while (v20 != v19);
      long long v19 = (char *)__p;
    }
    std::string __p = v15;
    uint64_t v500 = v18;
    uint64_t v501 = v17;
    if (v19) {
      operator delete(v19);
    }
    uint64_t v500 = v18;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v534, (uint64_t)&__p, a3);
    DimensionOrderHint::DimensionOrderHint(&v515, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrTransposeUnitInfo *)v534, (uint64_t)&v515, 1);
    if (v515)
    {
      uint64_t v516 = (char *)v515;
      operator delete(v515);
    }
    unint64_t v22 = a6[1];
    if (v22 >= a6[2])
    {
      uint64_t v23 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
      uint64_t v23 = v22 + 192;
      a6[1] = v22 + 192;
    }
    a6[1] = v23;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
    v534[0] = &unk_26C34F988;
    if (v535)
    {
      uint64_t v536 = v535;
      operator delete(v535);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(v534);
    long long v49 = __p;
    if (!__p) {
      goto LABEL_274;
    }
    uint64_t v500 = (char *)__p;
    goto LABEL_144;
  }
  if (IsVector((const ZinTensorDimensions *)a1))
  {
    if (GetVectorDimension((const ZinTensorDimensions *)a1) == 4)
    {
      unint64_t v24 = (char *)operator new(8uLL);
      *(void *)unint64_t v24 = 0x200000004;
      v517[0] = v24 + 8;
      BOOL v515 = v24;
      uint64_t v516 = v24 + 8;
      uint64_t v25 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v517, 2uLL);
      v25[1] = 0x400000002;
      long long v26 = (char *)(v25 + 1);
      uint64_t v28 = (char *)&v25[v27];
      uint64_t v29 = (char *)(v25 + 2);
      int64x2_t v30 = (char *)v515;
      uint64_t v31 = v516;
      if (v516 != v515)
      {
        do
        {
          uint64_t v32 = *((void *)v31 - 1);
          v31 -= 8;
          *((void *)v26 - 1) = v32;
          v26 -= 8;
        }
        while (v31 != v30);
        int64x2_t v30 = (char *)v515;
      }
      BOOL v515 = v26;
      uint64_t v516 = v29;
      v517[0] = v28;
      if (v30) {
        operator delete(v30);
      }
      uint64_t v516 = v29;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v534, (uint64_t)&v515, a3);
      DimensionOrderHint::DimensionOrderHint(&v527, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrTransposeUnitInfo *)v534, (uint64_t)&v527, 1);
      if (v527.i64[0])
      {
        v527.i64[1] = v527.i64[0];
        operator delete((void *)v527.i64[0]);
      }
      unint64_t v33 = a6[1];
      if (v33 >= a6[2])
      {
        uint64_t v34 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
        uint64_t v34 = v33 + 192;
        a6[1] = v33 + 192;
      }
      a6[1] = v34;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
      v534[0] = &unk_26C34F988;
      if (v535)
      {
        uint64_t v536 = v535;
        operator delete(v535);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(v534);
      if (v515)
      {
        uint64_t v516 = (char *)v515;
        operator delete(v515);
      }
    }
    uint64_t v68 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0] * a1[1].i64[1];
    uint64_t v69 = *(void *)(a2 + 24);
    v537.i64[0] = 1;
    v537.i64[1] = v69;
    int64x2_t v538 = vdupq_n_s64(1uLL);
    uint64_t v539 = v68 / v69;
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v480, (uint64_t)&v537);
    v470[1] = 0;
    *(void *)&long long v471 = 0;
    v470[0] = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v470, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
    DWORD2(v471) = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrReshapeUnitInfo *)&v480, (uint64_t)v470, 1);
    if (v470[0])
    {
      v470[1] = v470[0];
      operator delete(v470[0]);
    }
    unint64_t v70 = a6[1];
    if (v70 >= a6[2])
    {
      uint64_t v71 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
      uint64_t v71 = v70 + 192;
      a6[1] = v70 + 192;
    }
    a6[1] = v71;
    unint64_t v72 = (char *)operator new(8uLL);
    *(void *)unint64_t v72 = 0x200000004;
    uint64_t v477 = v72 + 8;
    uint64_t v478 = v72 + 8;
    uint64_t v476 = v72;
    unint64_t v73 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v478, 2uLL);
    v73[1] = 0x400000002;
    long long v74 = (char *)(v73 + 1);
    int v76 = (char *)&v73[v75];
    int v77 = (char *)(v73 + 2);
    uint64_t v78 = (char *)v476;
    long long v79 = v477;
    if (v477 != v476)
    {
      do
      {
        uint64_t v80 = *((void *)v79 - 1);
        v79 -= 8;
        *((void *)v74 - 1) = v80;
        v74 -= 8;
      }
      while (v79 != v78);
      uint64_t v78 = (char *)v476;
    }
    uint64_t v476 = v74;
    uint64_t v477 = v77;
    uint64_t v478 = v76;
    if (v78) {
      operator delete(v78);
    }
    uint64_t v477 = v77;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v520, (uint64_t)&v476, a3);
    DimensionOrderHint::DimensionOrderHint(&v530, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v534, (const ZinIrTransposeUnitInfo *)&v520, (uint64_t)&v530, 1);
    if (v530)
    {
      BOOL v531 = v530;
      operator delete(v530);
    }
    unint64_t v81 = a6[1];
    if (v81 >= a6[2])
    {
      uint64_t v82 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v534);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v534);
      uint64_t v82 = v81 + 192;
      a6[1] = v81 + 192;
    }
    a6[1] = v82;
    int64x2_t v83 = *(int64x2_t *)(a2 + 16);
    int64x2_t v506 = *(int64x2_t *)a2;
    int64x2_t v507 = v83;
    uint64_t v508 = *(void *)(a2 + 32);
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v543, (uint64_t)&v506);
    uint64_t v513 = 0;
    uint64_t v511 = 0;
    uint64_t v512 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v511, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
    int v514 = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v515, (const ZinIrReshapeUnitInfo *)&v543, (uint64_t)&v511, 1);
    if (v511)
    {
      uint64_t v512 = v511;
      operator delete(v511);
    }
    unint64_t v84 = a6[1];
    if (v84 >= a6[2])
    {
      uint64_t v85 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v515);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v515);
      uint64_t v85 = v84 + 192;
      a6[1] = v84 + 192;
    }
    a6[1] = v85;
    *(void **)uint64_t v550 = v542[16];
    *(void **)&v550[16] = v542[18];
    *(void **)&v550[8] = v542[19];
    *(void **)&v550[24] = v542[17];
    uint64_t v551 = (uint64_t)v542[20];
    uint64_t v466 = 0;
    uint64_t v467 = 0;
    uint64_t v468 = 0;
    if (ZinReshapeLayerUtils::IsConvertibleToTranspose((uint64_t *)v550, v506.i64, (DimensionOrderHint *)a5, (uint64_t *)&v466)&& v467 - (unsigned char *)v466 == 24&& (ZinIrTransposeUnit::IsXYTranspose((int **)v466, 1, 3) || ZinIrTransposeUnit::IsXYTranspose((int **)v466, 0, 3))&& v507.i64[0] > *(uint64_t *)&v550[16])
    {
      char v86 = (char *)operator new(8uLL);
      *(void *)char v86 = 0x300000001;
      uint64_t v474 = v86 + 8;
      uint64_t v475 = v86 + 8;
      BOOL v473 = v86;
      char v87 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v475, 2uLL);
      v87[1] = 0x100000003;
      uint64_t v88 = (char *)(v87 + 1);
      std::string::size_type v90 = (char *)&v87[v89];
      BOOL v91 = (char *)(v87 + 2);
      long long v92 = (char *)v473;
      long long v93 = v474;
      if (v474 != v473)
      {
        do
        {
          uint64_t v94 = *((void *)v93 - 1);
          v93 -= 8;
          *((void *)v88 - 1) = v94;
          v88 -= 8;
        }
        while (v93 != v92);
        long long v92 = (char *)v473;
      }
      BOOL v473 = v88;
      uint64_t v474 = v91;
      uint64_t v475 = v90;
      if (v92) {
        operator delete(v92);
      }
      uint64_t v474 = v91;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v487, (uint64_t)&v473, a3);
      DimensionOrderHint::DimensionOrderHint(&v495, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (const ZinIrTransposeUnitInfo *)&v487, (uint64_t)&v495, 1);
      if (v495)
      {
        uint64_t v496 = (char *)v495;
        operator delete(v495);
      }
      uint64_t v95 = a6[1];
      long long v96 = (int *)(v95 - 192);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)(v95 - 192));
      a6[1] = v95 - 192;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)(v95 - 384));
      a6[1] = v95 - 384;
      if (v95 - 384 >= (unint64_t)a6[2])
      {
        long long v96 = (int *)std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)(v95 - 384), (int *)&__p);
        a6[1] = (uint64_t)v96;
      }
      a6[1] = (uint64_t)v96;
      if ((unint64_t)v96 >= a6[2])
      {
        uint64_t v196 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v534);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>(v96, (int *)v534);
        uint64_t v196 = (uint64_t)(v96 + 48);
        a6[1] = (uint64_t)(v96 + 48);
      }
      a6[1] = v196;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
      uint64_t v487 = &unk_26C34F988;
      if (v491)
      {
        uint64_t v492 = v491;
        operator delete(v491);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(&v487);
      if (v473)
      {
        uint64_t v474 = (char *)v473;
        operator delete(v473);
      }
    }
    std::string __p = &v466;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v515);
    uint64_t v543 = &unk_26C34D9A0;
    if (v548)
    {
      uint64_t v549 = v548;
      operator delete(v548);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(&v543);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v534);
    v520.i64[0] = (uint64_t)&unk_26C34F988;
    if (v523)
    {
      uint64_t v524 = v523;
      operator delete(v523);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v520);
    if (v476)
    {
      uint64_t v477 = (char *)v476;
      operator delete(v476);
    }
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
    v480.i64[0] = (uint64_t)&unk_26C34D9A0;
    if (v485)
    {
      uint64_t v486 = v485;
      operator delete(v485);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v480);
    goto LABEL_274;
  }
  if (IsVector((const ZinTensorDimensions *)a2))
  {
    uint64_t v35 = a5;
    int v36 = (void *)*a4;
    uint64_t v37 = a2;
    LODWORD(v453) = GetVectorDimension((const ZinTensorDimensions *)a2);
    uint64_t v38 = a1->i64[0];
    uint64_t v39 = a1->i64[1];
    uint64_t v40 = a1[1].i64[0];
    int v41 = a3;
    uint64_t v43 = a1[1].i64[1];
    uint64_t v42 = a1[2].i64[0];
    uint64_t v476 = 0;
    int v454 = v41;
    if (ZinTensorFormatGetSizeInBytes(v41, (uint64_t *)&v476)) {
      goto LABEL_732;
    }
    unint64_t v44 = v42 * v38 * v39 * v40 * v43;
    uint64_t v45 = a1[1].i64[1];
    if ((unint64_t)((void)v476 * v45) % v36[66]) {
      BOOL v46 = 1;
    }
    else {
      BOOL v46 = v44 > v36[40];
    }
    if (v46)
    {
      if (v45 != 1)
      {
        uint64_t v124 = a1[2].i64[0];
        uint64_t v125 = a1->i64[0];
        uint64_t v126 = a1->i64[1];
        uint64_t v127 = a1[1].i64[0];
        long long v128 = operator new(0x28uLL);
        uint64_t v129 = 0;
        *long long v128 = v125;
        v128[1] = v124;
        v128[2] = v126;
        v128[3] = v127;
        v128[4] = v45;
        uint64_t v130 = v35;
        char v131 = v128;
        do
        {
          if (v128[v129] == 1) {
            goto LABEL_153;
          }
          ++v129;
        }
        while (v129 != 5);
        LODWORD(v129) = 0;
LABEL_153:
        uint64_t v132 = (char *)operator new(8uLL);
        uint64_t v133 = v129;
        *(void *)uint64_t v132 = v129 | 0x400000000;
        int v134 = v132 + 8;
        uint64_t v513 = v132 + 8;
        uint64_t v511 = v132;
        uint64_t v512 = v132 + 8;
        if (v129 <= 3)
        {
          do
          {
            uint64_t v135 = v133 + 1;
            if (v134 >= v513)
            {
              uint64_t v136 = (v134 - (unsigned char *)v511) >> 3;
              if ((unint64_t)(v136 + 1) >> 61) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v137 = (v513 - (unsigned char *)v511) >> 2;
              if (v137 <= v136 + 1) {
                unint64_t v137 = v136 + 1;
              }
              if ((unint64_t)(v513 - (unsigned char *)v511) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v138 = v137;
              }
              if (v138) {
                uint64_t v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v513, v138);
              }
              else {
                uint64_t v139 = 0;
              }
              uint64_t v140 = &v139[8 * v136];
              *(void *)uint64_t v140 = v135 | (v133 << 32);
              int v134 = v140 + 8;
              unint64_t v141 = (char *)v512;
              uint64_t v142 = (char *)v511;
              if (v512 != v511)
              {
                do
                {
                  uint64_t v143 = *((void *)v141 - 1);
                  v141 -= 8;
                  *((void *)v140 - 1) = v143;
                  v140 -= 8;
                }
                while (v141 != v142);
                unint64_t v141 = (char *)v511;
              }
              uint64_t v511 = v140;
              uint64_t v512 = v134;
              uint64_t v513 = &v139[8 * v138];
              if (v141) {
                operator delete(v141);
              }
            }
            else
            {
              *(void *)int v134 = v135 | (v133 << 32);
              v134 += 8;
            }
            uint64_t v512 = v134;
            ++v133;
          }
          while (v135 != 4);
        }
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v480, (uint64_t)&v511, v454);
        DimensionOrderHint::DimensionOrderHint(&v527, 2);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrTransposeUnitInfo *)&v480, (uint64_t)&v527, 1);
        if (v527.i64[0])
        {
          v527.i64[1] = v527.i64[0];
          operator delete((void *)v527.i64[0]);
        }
        unint64_t v144 = a6[1];
        if (v144 >= a6[2])
        {
          uint64_t v145 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
          uint64_t v145 = v144 + 192;
          a6[1] = v144 + 192;
        }
        a6[1] = v145;
        int64x2_t v520 = vdupq_n_s64(1uLL);
        unint64_t v521 = v44;
        int64x2_t v522 = v520;
        ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&__p, (uint64_t)&v520);
        v470[1] = 0;
        *(void *)&long long v471 = 0;
        v470[0] = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v470, *(const void **)v130, *(void *)(v130 + 8), (uint64_t)(*(void *)(v130 + 8) - *(void *)v130) >> 2);
        DWORD2(v471) = *(_DWORD *)(v130 + 24);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v534, (const ZinIrReshapeUnitInfo *)&__p, (uint64_t)v470, 1);
        if (v470[0])
        {
          v470[1] = v470[0];
          operator delete(v470[0]);
        }
        unint64_t v183 = a6[1];
        if (v183 >= a6[2])
        {
          uint64_t v184 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v534);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v534);
          uint64_t v184 = v183 + 192;
          a6[1] = v183 + 192;
        }
        a6[1] = v184;
        int v185 = operator new(8uLL);
        *int v185 = ((unint64_t)v453 << 32) | 3;
        BOOL v497 = v185 + 1;
        uint64_t v495 = v185;
        uint64_t v496 = (char *)(v185 + 1);
        long long v186 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v497, 2uLL);
        v186[1] = v453 | 0x300000000;
        long long v187 = (char *)(v186 + 1);
        uint64_t v189 = (char *)&v186[v188];
        uint64_t v190 = (char *)(v186 + 2);
        uint64_t v191 = (char *)v495;
        __int16 v192 = v496;
        if (v496 != v495)
        {
          do
          {
            uint64_t v193 = *((void *)v192 - 1);
            v192 -= 8;
            *((void *)v187 - 1) = v193;
            v187 -= 8;
          }
          while (v192 != v191);
          uint64_t v191 = (char *)v495;
        }
        uint64_t v495 = v187;
        uint64_t v496 = v190;
        BOOL v497 = v189;
        if (v191) {
          operator delete(v191);
        }
        uint64_t v496 = v190;
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v543, (uint64_t)&v495, v454);
        DimensionOrderHint::DimensionOrderHint(&v530, 2);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v515, (const ZinIrTransposeUnitInfo *)&v543, (uint64_t)&v530, 1);
        if (v530)
        {
          BOOL v531 = v530;
          operator delete(v530);
        }
        unint64_t v194 = a6[1];
        if (v194 >= a6[2])
        {
          uint64_t v195 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v515);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v515);
          uint64_t v195 = v194 + 192;
          a6[1] = v194 + 192;
        }
        a6[1] = v195;
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v515);
        uint64_t v543 = &unk_26C34F988;
        if (v546)
        {
          BOOL v547 = v546;
          operator delete(v546);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(&v543);
        if (v495)
        {
          uint64_t v496 = (char *)v495;
          operator delete(v495);
        }
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v534);
        std::string __p = &unk_26C34D9A0;
        if (v504)
        {
          int v505 = v504;
          operator delete(v504);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(&__p);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
        v480.i64[0] = (uint64_t)&unk_26C34F988;
        if (v483)
        {
          uint64_t v484 = v483;
          operator delete(v483);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v480);
        if (v511)
        {
          uint64_t v512 = v511;
          operator delete(v511);
        }
        operator delete(v131);
        return 1;
      }
      v480.i64[0] = 1;
      v480.i64[1] = v44;
      int64x2_t v481 = vdupq_n_s64(1uLL);
      uint64_t v482 = 1;
      ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v515, (uint64_t)&v480);
      v507.i64[0] = 0;
      int64x2_t v506 = 0uLL;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v506, *(const void **)v35, *(void *)(v35 + 8), (uint64_t)(*(void *)(v35 + 8) - *(void *)v35) >> 2);
      v507.i32[2] = *(_DWORD *)(v35 + 24);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrReshapeUnitInfo *)&v515, (uint64_t)&v506, 1);
      if (v506.i64[0])
      {
        v506.i64[1] = v506.i64[0];
        operator delete((void *)v506.i64[0]);
      }
      unint64_t v47 = a6[1];
      if (v47 >= a6[2])
      {
        uint64_t v48 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
        uint64_t v48 = v47 + 192;
        a6[1] = v47 + 192;
      }
      a6[1] = v48;
      char v172 = (char *)operator new(8uLL);
      *(void *)char v172 = ((unint64_t)v453 << 32) | 2;
      v545[0] = v172 + 8;
      uint64_t v543 = v172;
      uint64_t v544 = v172 + 8;
      char v173 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v545, 2uLL);
      v173[1] = v453 | 0x200000000;
      char v174 = (char *)(v173 + 1);
      uint64_t v176 = (char *)&v173[v175];
      int v177 = (char *)(v173 + 2);
      uint64_t v178 = (char *)v543;
      long long v179 = v544;
      if (v544 != v543)
      {
        do
        {
          uint64_t v180 = *((void *)v179 - 1);
          v179 -= 8;
          *((void *)v174 - 1) = v180;
          v174 -= 8;
        }
        while (v179 != v178);
        uint64_t v178 = (char *)v543;
      }
      uint64_t v543 = v174;
      uint64_t v544 = v177;
      v545[0] = v176;
      if (v178) {
        operator delete(v178);
      }
      uint64_t v544 = v177;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&__p, (uint64_t)&v543, v454);
      DimensionOrderHint::DimensionOrderHint(v550, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v534, (const ZinIrTransposeUnitInfo *)&__p, (uint64_t)v550, 1);
      if (*(void *)v550)
      {
        *(void *)&v550[8] = *(void *)v550;
        operator delete(*(void **)v550);
      }
      unint64_t v171 = a6[1];
      if (v171 < a6[2])
      {
LABEL_220:
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v534);
        uint64_t v181 = v171 + 192;
        a6[1] = v171 + 192;
LABEL_222:
        a6[1] = v181;
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v534);
        std::string __p = &unk_26C34F988;
        if (v502)
        {
          uint64_t v503 = v502;
          operator delete(v502);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(&__p);
        if (v543)
        {
          uint64_t v544 = (char *)v543;
          operator delete(v543);
        }
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
        BOOL v515 = &unk_26C34D9A0;
        if (v518)
        {
          uint64_t v519 = v518;
          operator delete(v518);
        }
        long long v182 = &v515;
        goto LABEL_229;
      }
    }
    else
    {
      a3 = v454;
      if (!v453 && v44 > v36[48])
      {
        a2 = v37;
        a5 = v35;
        goto LABEL_43;
      }
      int64x2_t v480 = vdupq_n_s64(1uLL);
      v481.i64[0] = 1;
      v481.i64[1] = v44;
      uint64_t v482 = 1;
      ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v515, (uint64_t)&v480);
      uint64_t v488 = 0;
      uint64_t v489 = 0;
      uint64_t v487 = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v487, *(const void **)v35, *(void *)(v35 + 8), (uint64_t)(*(void *)(v35 + 8) - *(void *)v35) >> 2);
      int v490 = *(_DWORD *)(v35 + 24);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrReshapeUnitInfo *)&v515, (uint64_t)&v487, 1);
      if (v487)
      {
        uint64_t v488 = v487;
        operator delete(v487);
      }
      unint64_t v122 = a6[1];
      if (v122 >= a6[2])
      {
        uint64_t v123 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
        uint64_t v123 = v122 + 192;
        a6[1] = v122 + 192;
      }
      a6[1] = v123;
      long long v162 = (char *)operator new(8uLL);
      *(void *)long long v162 = ((unint64_t)v453 << 32) | 4;
      v545[0] = v162 + 8;
      uint64_t v543 = v162;
      uint64_t v544 = v162 + 8;
      long long v163 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v545, 2uLL);
      v163[1] = v453 | 0x400000000;
      long long v164 = (char *)(v163 + 1);
      int v166 = (char *)&v163[v165];
      char v167 = (char *)(v163 + 2);
      __int16 v168 = (char *)v543;
      long long v169 = v544;
      if (v544 != v543)
      {
        do
        {
          uint64_t v170 = *((void *)v169 - 1);
          v169 -= 8;
          *((void *)v164 - 1) = v170;
          v164 -= 8;
        }
        while (v169 != v168);
        __int16 v168 = (char *)v543;
      }
      uint64_t v543 = v164;
      uint64_t v544 = v167;
      v545[0] = v166;
      if (v168) {
        operator delete(v168);
      }
      uint64_t v544 = v167;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&__p, (uint64_t)&v543, v454);
      DimensionOrderHint::DimensionOrderHint(&v537, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v534, (const ZinIrTransposeUnitInfo *)&__p, (uint64_t)&v537, 1);
      if (v537.i64[0])
      {
        v537.i64[1] = v537.i64[0];
        operator delete((void *)v537.i64[0]);
      }
      unint64_t v171 = a6[1];
      if (v171 < a6[2]) {
        goto LABEL_220;
      }
    }
    uint64_t v181 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v534);
    goto LABEL_222;
  }
LABEL_43:
  uint64_t v50 = *a4;
  if (*(void *)(a2 + 24) == 1)
  {
    unint64_t v51 = *(void *)(v50 + 352);
    unint64_t v52 = *(void *)(v50 + 336);
    GetAllIntegerFactors(a1->i32[2], (int **)&v511);
    uint64_t v53 = (int *)v511;
    if (v511 == v512) {
LABEL_49:
    }
      ZinAssertImpl("Failed in distributing the channel to depath and height dimensions", v453);
    uint64_t v54 = a1[2].i64[0];
    while (1)
    {
      uint64_t v55 = *v53;
      uint64_t v56 = v54 * v55;
      if (v54 * v55 <= v51)
      {
        unint64_t v57 = a1->i64[1] / v55 * a1[1].i64[0];
        if (v57 <= v52) {
          break;
        }
      }
      if (++v53 == v512) {
        goto LABEL_49;
      }
    }
    v537.i64[0] = a1->i64[0];
    v537.i64[1] = 1;
    uint64_t v63 = a1[1].i64[1];
    v538.i64[0] = v57;
    v538.i64[1] = v63;
    uint64_t v539 = v56;
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v480, (uint64_t)&v537);
    memset(v550, 0, 24);
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v550, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
    *(_DWORD *)&v550[24] = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrReshapeUnitInfo *)&v480, (uint64_t)v550, 1);
    if (*(void *)v550)
    {
      *(void *)&v550[8] = *(void *)v550;
      operator delete(*(void **)v550);
    }
    unint64_t v64 = a6[1];
    if (v64 >= a6[2])
    {
      uint64_t v65 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
      uint64_t v65 = v64 + 192;
      a6[1] = v64 + 192;
    }
    a6[1] = v65;
    long long v97 = operator new(8uLL);
    void *v97 = 0x400000002;
    BOOL v497 = v97 + 1;
    uint64_t v495 = v97;
    uint64_t v496 = (char *)(v97 + 1);
    long long v98 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v497, 2uLL);
    v98[1] = 0x200000004;
    long long v99 = (char *)(v98 + 1);
    long long v101 = (char *)&v98[v100];
    uint64_t v102 = (char *)(v98 + 2);
    long long v103 = (char *)v495;
    char v104 = v496;
    if (v496 != v495)
    {
      do
      {
        uint64_t v105 = *((void *)v104 - 1);
        v104 -= 8;
        *((void *)v99 - 1) = v105;
        v99 -= 8;
      }
      while (v104 != v103);
      long long v103 = (char *)v495;
    }
    uint64_t v495 = v99;
    uint64_t v496 = v102;
    BOOL v497 = v101;
    if (v103) {
      operator delete(v103);
    }
    uint64_t v496 = v102;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v520, (uint64_t)&v495, a3);
    DimensionOrderHint::DimensionOrderHint(&v527, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v534, (const ZinIrTransposeUnitInfo *)&v520, (uint64_t)&v527, 1);
    if (v527.i64[0])
    {
      v527.i64[1] = v527.i64[0];
      operator delete((void *)v527.i64[0]);
    }
    unint64_t v106 = a6[1];
    if (v106 >= a6[2])
    {
      uint64_t v107 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v534);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v534);
      uint64_t v107 = v106 + 192;
      a6[1] = v106 + 192;
    }
    a6[1] = v107;
    long long v108 = (char *)operator new(8uLL);
    *(void *)long long v108 = 0x300000002;
    uint64_t v477 = v108 + 8;
    uint64_t v478 = v108 + 8;
    uint64_t v476 = v108;
    long long v109 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v478, 2uLL);
    v109[1] = 0x200000003;
    long long v110 = (char *)(v109 + 1);
    BOOL v112 = (char *)&v109[v111];
    long long v113 = (char *)(v109 + 2);
    long long v114 = (char *)v476;
    long long v115 = v477;
    if (v477 != v476)
    {
      do
      {
        uint64_t v116 = *((void *)v115 - 1);
        v115 -= 8;
        *((void *)v110 - 1) = v116;
        v110 -= 8;
      }
      while (v115 != v114);
      long long v114 = (char *)v476;
    }
    uint64_t v476 = v110;
    uint64_t v477 = v113;
    uint64_t v478 = v112;
    if (v114) {
      operator delete(v114);
    }
    uint64_t v477 = v113;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v487, (uint64_t)&v476, a3);
    DimensionOrderHint::DimensionOrderHint(v470, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v515, (const ZinIrTransposeUnitInfo *)&v487, (uint64_t)v470, 1);
    if (v470[0])
    {
      v470[1] = v470[0];
      operator delete(v470[0]);
    }
    unint64_t v117 = a6[1];
    if (v117 >= a6[2])
    {
      uint64_t v118 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v515);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v515);
      uint64_t v118 = v117 + 192;
      a6[1] = v117 + 192;
    }
    a6[1] = v118;
    int64x2_t v119 = *(int64x2_t *)(a2 + 16);
    int64x2_t v506 = *(int64x2_t *)a2;
    int64x2_t v507 = v119;
    uint64_t v508 = *(void *)(a2 + 32);
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v543, (uint64_t)&v506);
    uint64_t v532 = 0;
    uint64_t v530 = 0;
    BOOL v531 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v530, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
    int v533 = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (const ZinIrReshapeUnitInfo *)&v543, (uint64_t)&v530, 1);
    if (v530)
    {
      BOOL v531 = v530;
      operator delete(v530);
    }
    unint64_t v120 = a6[1];
    if (v120 >= a6[2])
    {
      uint64_t v121 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&__p);
      uint64_t v121 = v120 + 192;
      a6[1] = v120 + 192;
    }
    a6[1] = v121;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
    uint64_t v543 = &unk_26C34D9A0;
    if (v548)
    {
      uint64_t v549 = v548;
      operator delete(v548);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(&v543);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v515);
    uint64_t v487 = &unk_26C34F988;
    if (v491)
    {
      uint64_t v492 = v491;
      operator delete(v491);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(&v487);
    if (v476)
    {
      uint64_t v477 = (char *)v476;
      operator delete(v476);
    }
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v534);
    v520.i64[0] = (uint64_t)&unk_26C34F988;
    if (v523)
    {
      uint64_t v524 = v523;
      operator delete(v523);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v520);
    if (v495)
    {
      uint64_t v496 = (char *)v495;
      operator delete(v495);
    }
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
    v480.i64[0] = (uint64_t)&unk_26C34D9A0;
    if (v485)
    {
      uint64_t v486 = v485;
      operator delete(v485);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v480);
    long long v49 = v511;
    if (!v511) {
      goto LABEL_274;
    }
    uint64_t v512 = v511;
LABEL_144:
    operator delete(v49);
    goto LABEL_274;
  }
  int64x2_t v58 = a1[1];
  int64x2_t v537 = *a1;
  int64x2_t v538 = v58;
  uint64_t v539 = a1[2].i64[0];
  int64x2_t v59 = *(int64x2_t *)(a2 + 16);
  int64x2_t v506 = *(int64x2_t *)a2;
  int64x2_t v507 = v59;
  uint64_t v508 = *(void *)(a2 + 32);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)a5, v542);
  DimensionOrderHint::DimensionOrderHint(&v527, v542);
  if (v542[0])
  {
    v542[1] = v542[0];
    operator delete(v542[0]);
  }
  uint64_t v466 = 0;
  uint64_t v467 = 0;
  uint64_t v468 = 0;
  BOOL v473 = 0;
  uint64_t v474 = 0;
  uint64_t v475 = 0;
  ZinReshapeLayerUtils::GetReshapedDimensions((ZinReshapeLayerUtils *)a1, (const ZinTensorDimensions *)a2, (const ZinTensorDimensions *)&v527, 0, (char **)&v463);
  unsigned int AxisToSwapWidth = FindAxisToSwapWidth((uint64_t)&v463, a1->i64, a3, v50);
  if (AxisToSwapWidth != 5
    || (unsigned int AxisToSwapWidth = FindAxisToSwapWidthUsingTranspose((ZinReshapeLayerUtils *)a1, (const ZinTensorDimensions *)a2, a3, v50, 1, (DimensionOrderHint *)a5, &v466, (uint64_t)&v537), AxisToSwapWidth != 5)|| (unsigned int AxisToSwapWidth = FindAxisToSwapWidthUsingTranspose((ZinReshapeLayerUtils *)a1, (const ZinTensorDimensions *)a2, a3, v50, 0, (DimensionOrderHint *)a5, &v473, (uint64_t)&v506), AxisToSwapWidth != 5))
  {
    if (v467 != v466)
    {
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v534, (uint64_t)&v466, a3);
      DimensionOrderHint::DimensionOrderHint(v470, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrTransposeUnitInfo *)v534, (uint64_t)v470, 1);
      if (v470[0])
      {
        v470[1] = v470[0];
        operator delete(v470[0]);
      }
      unint64_t v66 = a6[1];
      if (v66 >= a6[2])
      {
        uint64_t v67 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
        uint64_t v67 = v66 + 192;
        a6[1] = v66 + 192;
      }
      a6[1] = v67;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
      v534[0] = &unk_26C34F988;
      if (v535)
      {
        uint64_t v536 = v535;
        operator delete(v535);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(v534);
    }
    uint64_t v146 = a2;
    long long v147 = (uint64_t *)operator new(8uLL);
    *long long v147 = AxisToSwapWidth | 0x400000000;
    uint64_t v461 = v147 + 1;
    uint64_t v462 = v147 + 1;
    uint64_t v460 = v147;
    __int16 v149 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v462, 2uLL);
    v149[1] = 0x300000004;
    long long v150 = (char *)(v149 + 1);
    uint64_t v151 = (char *)(v149 + 2);
    uint64_t v152 = (uint64_t *)v460;
    long long v153 = v461;
    if (v461 != v460)
    {
      do
      {
        uint64_t v154 = *--v153;
        *((void *)v150 - 1) = v154;
        v150 -= 8;
      }
      while (v153 != v152);
      uint64_t v152 = (uint64_t *)v460;
    }
    uint64_t v460 = v150;
    uint64_t v461 = v149 + 2;
    uint64_t v462 = &v149[v148];
    if (v152) {
      operator delete(v152);
    }
    uint64_t v461 = v149 + 2;
    if (AxisToSwapWidth == 2)
    {
      if (v151 < (char *)v462)
      {
        v149[2] = 0x200000003;
        long long v155 = v149 + 3;
        goto LABEL_408;
      }
      uint64_t v157 = (v151 - (unsigned char *)v460) >> 3;
      if ((unint64_t)(v157 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v158 = ((char *)v462 - (unsigned char *)v460) >> 2;
      if (v158 <= v157 + 1) {
        unint64_t v158 = v157 + 1;
      }
      if ((unint64_t)((char *)v462 - (unsigned char *)v460) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v159 = v158;
      }
      if (v159) {
        std::string v160 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v462, v159);
      }
      else {
        std::string v160 = 0;
      }
      uint64_t v234 = &v160[8 * v157];
      uint64_t v235 = &v160[8 * v159];
      *(void *)uint64_t v234 = 0x200000003;
      long long v155 = (uint64_t *)(v234 + 8);
      uint64_t v237 = (char *)v460;
      BOOL v236 = (char *)v461;
      if (v461 == v460) {
        goto LABEL_406;
      }
      do
      {
        uint64_t v238 = *((void *)v236 - 1);
        v236 -= 8;
        *((void *)v234 - 1) = v238;
        v234 -= 8;
      }
      while (v236 != v237);
      goto LABEL_405;
    }
    if (AxisToSwapWidth)
    {
      if (AxisToSwapWidth != 1) {
        ZinAssertImpl("Invalid axis\n");
      }
      if (v151 >= (char *)v462)
      {
        uint64_t v230 = (v151 - (unsigned char *)v460) >> 3;
        if ((unint64_t)(v230 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v231 = ((char *)v462 - (unsigned char *)v460) >> 2;
        if (v231 <= v230 + 1) {
          unint64_t v231 = v230 + 1;
        }
        if ((unint64_t)((char *)v462 - (unsigned char *)v460) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v232 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v232 = v231;
        }
        if (v232) {
          uint64_t v233 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v462, v232);
        }
        else {
          uint64_t v233 = 0;
        }
        uint64_t v248 = (uint64_t *)&v233[8 * v230];
        uint64_t v249 = &v233[8 * v232];
        *uint64_t v248 = 0x200000003;
        uint64_t v156 = v248 + 1;
        uint64_t v251 = (char *)v460;
        uint64_t v250 = (char *)v461;
        if (v461 != v460)
        {
          do
          {
            uint64_t v252 = *((void *)v250 - 1);
            v250 -= 8;
            *--uint64_t v248 = v252;
          }
          while (v250 != v251);
          uint64_t v250 = (char *)v460;
        }
        uint64_t v460 = v248;
        uint64_t v461 = v156;
        uint64_t v462 = (uint64_t *)v249;
        if (v250) {
          operator delete(v250);
        }
      }
      else
      {
        v149[2] = 0x200000003;
        uint64_t v156 = v149 + 3;
      }
      uint64_t v461 = v156;
      if (v156 >= v462)
      {
        uint64_t v254 = ((char *)v156 - (unsigned char *)v460) >> 3;
        if ((unint64_t)(v254 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v255 = ((char *)v462 - (unsigned char *)v460) >> 2;
        if (v255 <= v254 + 1) {
          unint64_t v255 = v254 + 1;
        }
        if ((unint64_t)((char *)v462 - (unsigned char *)v460) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v256 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v256 = v255;
        }
        if (v256) {
          uint64_t v257 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v462, v256);
        }
        else {
          uint64_t v257 = 0;
        }
        uint64_t v234 = &v257[8 * v254];
        uint64_t v235 = &v257[8 * v256];
        *(void *)uint64_t v234 = 0x100000002;
        long long v155 = (uint64_t *)(v234 + 8);
        uint64_t v267 = (char *)v460;
        BOOL v236 = (char *)v461;
        if (v461 == v460) {
          goto LABEL_406;
        }
        do
        {
          uint64_t v268 = *((void *)v236 - 1);
          v236 -= 8;
          *((void *)v234 - 1) = v268;
          v234 -= 8;
        }
        while (v236 != v267);
LABEL_405:
        BOOL v236 = (char *)v460;
LABEL_406:
        uint64_t v460 = v234;
        uint64_t v461 = v155;
        uint64_t v462 = (uint64_t *)v235;
        if (v236) {
          operator delete(v236);
        }
LABEL_408:
        uint64_t v461 = v155;
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v543, (uint64_t)&v460, a3);
        DimensionOrderHint::DimensionOrderHint(&v530, 2);
        a2 = v146;
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrTransposeUnitInfo *)&v543, (uint64_t)&v530, 1);
        if (v530)
        {
          BOOL v531 = v530;
          operator delete(v530);
        }
        unint64_t v271 = a6[1];
        if (v271 >= a6[2])
        {
          uint64_t v272 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
          uint64_t v272 = v271 + 192;
          a6[1] = v271 + 192;
        }
        a6[1] = v272;
        *(int64x2_t *)uint64_t v550 = v506;
        *(int64x2_t *)&v550[16] = v507;
        uint64_t v551 = v508;
        uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>(v506.i64, AxisToSwapWidth);
        *(void *)&v550[16] = v507.i64[1];
        *(void *)&v550[24] = ValueAt;
        if (AxisToSwapWidth == 2)
        {
          *(void *)&v550[8] = v507.i64[0];
        }
        else if (AxisToSwapWidth)
        {
          *(void *)&v550[8] = v507.i64[0];
          uint64_t v551 = v506.i64[1];
        }
        else
        {
          uint64_t v551 = v506.i64[1];
          *(void *)uint64_t v550 = v508;
          *(void *)&v550[8] = v507.i64[0];
        }
        ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v480, (uint64_t)v550);
        uint64_t v513 = 0;
        uint64_t v511 = 0;
        uint64_t v512 = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v511, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
        int v514 = *(_DWORD *)(a5 + 24);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v534, (const ZinIrReshapeUnitInfo *)&v480, (uint64_t)&v511, 1);
        if (v511)
        {
          uint64_t v512 = v511;
          operator delete(v511);
        }
        unint64_t v274 = a6[1];
        if (v274 >= a6[2])
        {
          uint64_t v275 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v534);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v534);
          uint64_t v275 = v274 + 192;
          a6[1] = v274 + 192;
        }
        a6[1] = v275;
        uint64_t v276 = (uint64_t *)operator new(8uLL);
        *uint64_t v276 = 0x400000003;
        uint64_t v458 = v276 + 1;
        uint64_t v459 = v276 + 1;
        BOOL v457 = v276;
        if (AxisToSwapWidth == 2)
        {
          uint64_t v278 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, 2uLL);
          v278[1] = 0x300000002;
          char v279 = (char *)(v278 + 1);
          uint64_t v280 = (char *)&v278[v277];
          uint64_t v281 = (char *)(v278 + 2);
          uint64_t v282 = (uint64_t *)v457;
          uint64_t v283 = v458;
          if (v458 != v457)
          {
            do
            {
              uint64_t v284 = *--v283;
              *((void *)v279 - 1) = v284;
              v279 -= 8;
            }
            while (v283 != v282);
            uint64_t v282 = (uint64_t *)v457;
          }
          BOOL v457 = v279;
          uint64_t v458 = v278 + 2;
          uint64_t v459 = &v278[v277];
          if (v282)
          {
            operator delete(v282);
            uint64_t v280 = (char *)v459;
          }
          uint64_t v458 = v278 + 2;
          if (v281 < v280)
          {
            v278[2] = 0x200000004;
            BOOL v285 = v278 + 3;
LABEL_533:
            uint64_t v458 = v285;
            ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v520, (uint64_t)&v457, a3);
            DimensionOrderHint::DimensionOrderHint(&v495, 2);
            ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v515, (const ZinIrTransposeUnitInfo *)&v520, (uint64_t)&v495, 1);
            if (v495)
            {
              uint64_t v496 = (char *)v495;
              operator delete(v495);
            }
            unint64_t v356 = a6[1];
            if (v356 >= a6[2])
            {
              uint64_t v357 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v515);
            }
            else
            {
              std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v515);
              uint64_t v357 = v356 + 192;
              a6[1] = v356 + 192;
            }
            a6[1] = v357;
            if (v474 != v473)
            {
              ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v487, (uint64_t)&v473, a3);
              DimensionOrderHint::DimensionOrderHint(&v476, 2);
              ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (const ZinIrTransposeUnitInfo *)&v487, (uint64_t)&v476, 1);
              if (v476)
              {
                uint64_t v477 = (char *)v476;
                operator delete(v476);
              }
              unint64_t v358 = a6[1];
              if (v358 >= a6[2])
              {
                uint64_t v359 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
              }
              else
              {
                std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&__p);
                uint64_t v359 = v358 + 192;
                a6[1] = v358 + 192;
              }
              a6[1] = v359;
              ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
              uint64_t v487 = &unk_26C34F988;
              if (v491)
              {
                uint64_t v492 = v491;
                operator delete(v491);
              }
              ZinIrUnitInfo::~ZinIrUnitInfo(&v487);
            }
            ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v515);
            v520.i64[0] = (uint64_t)&unk_26C34F988;
            if (v523)
            {
              uint64_t v524 = v523;
              operator delete(v523);
            }
            ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v520);
            if (v457)
            {
              uint64_t v458 = (uint64_t *)v457;
              operator delete(v457);
            }
            ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v534);
            v480.i64[0] = (uint64_t)&unk_26C34D9A0;
            if (v485)
            {
              uint64_t v486 = v485;
              operator delete(v485);
            }
            ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v480);
            ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
            uint64_t v543 = &unk_26C34F988;
            if (v546)
            {
              BOOL v547 = v546;
              operator delete(v546);
            }
            ZinIrUnitInfo::~ZinIrUnitInfo(&v543);
            if (v460)
            {
              uint64_t v461 = (uint64_t *)v460;
              operator delete(v460);
            }
            char v62 = 1;
            goto LABEL_558;
          }
          uint64_t v295 = (v281 - (unsigned char *)v457) >> 3;
          if ((unint64_t)(v295 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v296 = v280 - (unsigned char *)v457;
          uint64_t v297 = v296 >> 2;
          if (v296 >> 2 <= (unint64_t)(v295 + 1)) {
            uint64_t v297 = v295 + 1;
          }
          if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v298 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v298 = v297;
          }
          if (v298) {
            uint64_t v299 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, v298);
          }
          else {
            uint64_t v299 = 0;
          }
          unsigned int v309 = &v299[8 * v295];
          int v310 = &v299[8 * v298];
          *(void *)unsigned int v309 = 0x200000004;
          BOOL v285 = (uint64_t *)(v309 + 8);
          char v312 = (char *)v457;
          unint64_t v311 = (char *)v458;
          if (v458 == v457)
          {
LABEL_531:
            BOOL v457 = v309;
            uint64_t v458 = v285;
            uint64_t v459 = (uint64_t *)v310;
            if (v311) {
              operator delete(v311);
            }
            goto LABEL_533;
          }
          do
          {
            uint64_t v313 = *((void *)v311 - 1);
            v311 -= 8;
            *((void *)v309 - 1) = v313;
            v309 -= 8;
          }
          while (v311 != v312);
LABEL_530:
          unint64_t v311 = (char *)v457;
          goto LABEL_531;
        }
        if (AxisToSwapWidth)
        {
          uint64_t v287 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, 2uLL);
          v287[1] = 0x300000002;
          uint64_t v288 = (char *)(v287 + 1);
          uint64_t v289 = (char *)&v287[v286];
          uint64_t v290 = (char *)(v287 + 2);
          uint64_t v291 = (uint64_t *)v457;
          char v292 = v458;
          if (v458 != v457)
          {
            do
            {
              uint64_t v293 = *--v292;
              *((void *)v288 - 1) = v293;
              v288 -= 8;
            }
            while (v292 != v291);
            uint64_t v291 = (uint64_t *)v457;
          }
          BOOL v457 = v288;
          uint64_t v458 = v287 + 2;
          uint64_t v459 = &v287[v286];
          if (v291)
          {
            operator delete(v291);
            uint64_t v289 = (char *)v459;
          }
          uint64_t v458 = v287 + 2;
          if (v290 >= v289)
          {
            uint64_t v314 = (v290 - (unsigned char *)v457) >> 3;
            if ((unint64_t)(v314 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v315 = v289 - (unsigned char *)v457;
            uint64_t v316 = v315 >> 2;
            if (v315 >> 2 <= (unint64_t)(v314 + 1)) {
              uint64_t v316 = v314 + 1;
            }
            if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v317 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v317 = v316;
            }
            if (v317) {
              uint64_t v318 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, v317);
            }
            else {
              uint64_t v318 = 0;
            }
            uint64_t v324 = (uint64_t *)&v318[8 * v314];
            uint64_t v325 = &v318[8 * v317];
            *uint64_t v324 = 0x200000001;
            char v294 = v324 + 1;
            uint64_t v327 = (char *)v457;
            uint64_t v326 = (char *)v458;
            if (v458 != v457)
            {
              do
              {
                uint64_t v328 = *((void *)v326 - 1);
                v326 -= 8;
                *--uint64_t v324 = v328;
              }
              while (v326 != v327);
              uint64_t v326 = (char *)v457;
            }
            BOOL v457 = v324;
            uint64_t v458 = v294;
            uint64_t v459 = (uint64_t *)v325;
            if (v326) {
              operator delete(v326);
            }
          }
          else
          {
            v287[2] = 0x200000001;
            char v294 = v287 + 3;
          }
          uint64_t v458 = v294;
          if (v294 >= v459)
          {
            uint64_t v330 = ((char *)v294 - (unsigned char *)v457) >> 3;
            if ((unint64_t)(v330 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v331 = ((char *)v459 - (unsigned char *)v457) >> 2;
            if (v331 <= v330 + 1) {
              unint64_t v331 = v330 + 1;
            }
            if ((unint64_t)((char *)v459 - (unsigned char *)v457) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v332 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v332 = v331;
            }
            if (v332) {
              uint64_t v333 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, v332);
            }
            else {
              uint64_t v333 = 0;
            }
            unsigned int v309 = &v333[8 * v330];
            int v310 = &v333[8 * v332];
            *(void *)unsigned int v309 = 0x100000004;
            BOOL v285 = (uint64_t *)(v309 + 8);
            uint64_t v343 = (char *)v457;
            unint64_t v311 = (char *)v458;
            if (v458 == v457) {
              goto LABEL_531;
            }
            do
            {
              uint64_t v344 = *((void *)v311 - 1);
              v311 -= 8;
              *((void *)v309 - 1) = v344;
              v309 -= 8;
            }
            while (v311 != v343);
            goto LABEL_530;
          }
          uint64_t v329 = 0x100000004;
        }
        else
        {
          BOOL v301 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, 2uLL);
          v301[1] = 0x300000002;
          uint64_t v302 = (char *)(v301 + 1);
          uint64_t v303 = (char *)&v301[v300];
          uint64_t v304 = (char *)(v301 + 2);
          uint64_t v305 = (uint64_t *)v457;
          uint64_t v306 = v458;
          if (v458 != v457)
          {
            do
            {
              uint64_t v307 = *--v306;
              *((void *)v302 - 1) = v307;
              v302 -= 8;
            }
            while (v306 != v305);
            uint64_t v305 = (uint64_t *)v457;
          }
          BOOL v457 = v302;
          uint64_t v458 = v301 + 2;
          uint64_t v459 = &v301[v300];
          if (v305)
          {
            operator delete(v305);
            uint64_t v303 = (char *)v459;
          }
          uint64_t v458 = v301 + 2;
          if (v304 >= v303)
          {
            uint64_t v319 = (v304 - (unsigned char *)v457) >> 3;
            if ((unint64_t)(v319 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v320 = v303 - (unsigned char *)v457;
            uint64_t v321 = v320 >> 2;
            if (v320 >> 2 <= (unint64_t)(v319 + 1)) {
              uint64_t v321 = v319 + 1;
            }
            if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v322 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v322 = v321;
            }
            if (v322) {
              uint64_t v323 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, v322);
            }
            else {
              uint64_t v323 = 0;
            }
            uint64_t v334 = &v323[8 * v319];
            uint64_t v335 = &v323[8 * v322];
            *(void *)uint64_t v334 = 0x200000001;
            char v308 = (uint64_t *)(v334 + 8);
            uint64_t v337 = (char *)v457;
            uint64_t v336 = (char *)v458;
            if (v458 != v457)
            {
              do
              {
                uint64_t v338 = *((void *)v336 - 1);
                v336 -= 8;
                *((void *)v334 - 1) = v338;
                v334 -= 8;
              }
              while (v336 != v337);
              uint64_t v336 = (char *)v457;
            }
            BOOL v457 = v334;
            uint64_t v458 = v308;
            uint64_t v459 = (uint64_t *)v335;
            if (v336) {
              operator delete(v336);
            }
          }
          else
          {
            void v301[2] = 0x200000001;
            char v308 = v301 + 3;
          }
          uint64_t v458 = v308;
          if (v308 >= v459)
          {
            uint64_t v339 = ((char *)v308 - (unsigned char *)v457) >> 3;
            if ((unint64_t)(v339 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v340 = ((char *)v459 - (unsigned char *)v457) >> 2;
            if (v340 <= v339 + 1) {
              unint64_t v340 = v339 + 1;
            }
            if ((unint64_t)((char *)v459 - (unsigned char *)v457) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v341 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v341 = v340;
            }
            if (v341) {
              uint64_t v342 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, v341);
            }
            else {
              uint64_t v342 = 0;
            }
            uint64_t v345 = (uint64_t *)&v342[8 * v339];
            BOOL v346 = &v342[8 * v341];
            *uint64_t v345 = 0x100000000;
            char v294 = v345 + 1;
            uint64_t v348 = (char *)v457;
            uint64_t v347 = (char *)v458;
            if (v458 != v457)
            {
              do
              {
                uint64_t v349 = *((void *)v347 - 1);
                v347 -= 8;
                *--uint64_t v345 = v349;
              }
              while (v347 != v348);
              uint64_t v347 = (char *)v457;
            }
            BOOL v457 = v345;
            uint64_t v458 = v294;
            uint64_t v459 = (uint64_t *)v346;
            if (v347) {
              operator delete(v347);
            }
          }
          else
          {
            *char v308 = 0x100000000;
            char v294 = v308 + 1;
          }
          uint64_t v458 = v294;
          if (v294 >= v459)
          {
            uint64_t v350 = ((char *)v294 - (unsigned char *)v457) >> 3;
            if ((unint64_t)(v350 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v351 = ((char *)v459 - (unsigned char *)v457) >> 2;
            if (v351 <= v350 + 1) {
              unint64_t v351 = v350 + 1;
            }
            if ((unint64_t)((char *)v459 - (unsigned char *)v457) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v352 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v352 = v351;
            }
            if (v352) {
              uint64_t v353 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, v352);
            }
            else {
              uint64_t v353 = 0;
            }
            unsigned int v309 = &v353[8 * v350];
            int v310 = &v353[8 * v352];
            *(void *)unsigned int v309 = 4;
            BOOL v285 = (uint64_t *)(v309 + 8);
            BOOL v354 = (char *)v457;
            unint64_t v311 = (char *)v458;
            if (v458 == v457) {
              goto LABEL_531;
            }
            do
            {
              uint64_t v355 = *((void *)v311 - 1);
              v311 -= 8;
              *((void *)v309 - 1) = v355;
              v309 -= 8;
            }
            while (v311 != v354);
            goto LABEL_530;
          }
          uint64_t v329 = 4;
        }
        *char v294 = v329;
        BOOL v285 = v294 + 1;
        goto LABEL_533;
      }
      uint64_t v253 = 0x100000002;
    }
    else
    {
      if (v151 >= (char *)v462)
      {
        uint64_t v226 = (v151 - (unsigned char *)v460) >> 3;
        if ((unint64_t)(v226 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v227 = ((char *)v462 - (unsigned char *)v460) >> 2;
        if (v227 <= v226 + 1) {
          unint64_t v227 = v226 + 1;
        }
        if ((unint64_t)((char *)v462 - (unsigned char *)v460) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v228 = v227;
        }
        if (v228) {
          uint64_t v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v462, v228);
        }
        else {
          uint64_t v229 = 0;
        }
        uint64_t v239 = &v229[8 * v226];
        uint64_t v240 = &v229[8 * v228];
        *(void *)uint64_t v239 = 0x200000003;
        int v161 = (uint64_t *)(v239 + 8);
        uint64_t v242 = (char *)v460;
        uint64_t v241 = (char *)v461;
        if (v461 != v460)
        {
          do
          {
            uint64_t v243 = *((void *)v241 - 1);
            v241 -= 8;
            *((void *)v239 - 1) = v243;
            v239 -= 8;
          }
          while (v241 != v242);
          uint64_t v241 = (char *)v460;
        }
        uint64_t v460 = v239;
        uint64_t v461 = v161;
        uint64_t v462 = (uint64_t *)v240;
        if (v241) {
          operator delete(v241);
        }
      }
      else
      {
        v149[2] = 0x200000003;
        int v161 = v149 + 3;
      }
      uint64_t v461 = v161;
      if (v161 >= v462)
      {
        uint64_t v244 = ((char *)v161 - (unsigned char *)v460) >> 3;
        if ((unint64_t)(v244 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v245 = ((char *)v462 - (unsigned char *)v460) >> 2;
        if (v245 <= v244 + 1) {
          unint64_t v245 = v244 + 1;
        }
        if ((unint64_t)((char *)v462 - (unsigned char *)v460) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v246 = v245;
        }
        if (v246) {
          uint64_t v247 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v462, v246);
        }
        else {
          uint64_t v247 = 0;
        }
        uint64_t v258 = (uint64_t *)&v247[8 * v244];
        uint64_t v259 = &v247[8 * v246];
        *uint64_t v258 = 0x100000002;
        uint64_t v156 = v258 + 1;
        uint64_t v261 = (char *)v460;
        uint64_t v260 = (char *)v461;
        if (v461 != v460)
        {
          do
          {
            uint64_t v262 = *((void *)v260 - 1);
            v260 -= 8;
            *--uint64_t v258 = v262;
          }
          while (v260 != v261);
          uint64_t v260 = (char *)v460;
        }
        uint64_t v460 = v258;
        uint64_t v461 = v156;
        uint64_t v462 = (uint64_t *)v259;
        if (v260) {
          operator delete(v260);
        }
      }
      else
      {
        uint64_t *v161 = 0x100000002;
        uint64_t v156 = v161 + 1;
      }
      uint64_t v461 = v156;
      if (v156 >= v462)
      {
        uint64_t v263 = ((char *)v156 - (unsigned char *)v460) >> 3;
        if ((unint64_t)(v263 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v264 = ((char *)v462 - (unsigned char *)v460) >> 2;
        if (v264 <= v263 + 1) {
          unint64_t v264 = v263 + 1;
        }
        if ((unint64_t)((char *)v462 - (unsigned char *)v460) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v265 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v265 = v264;
        }
        if (v265) {
          uint64_t v266 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v462, v265);
        }
        else {
          uint64_t v266 = 0;
        }
        uint64_t v234 = &v266[8 * v263];
        uint64_t v235 = &v266[8 * v265];
        *(void *)uint64_t v234 = 1;
        long long v155 = (uint64_t *)(v234 + 8);
        uint64_t v269 = (char *)v460;
        BOOL v236 = (char *)v461;
        if (v461 == v460) {
          goto LABEL_406;
        }
        do
        {
          uint64_t v270 = *((void *)v236 - 1);
          v236 -= 8;
          *((void *)v234 - 1) = v270;
          v234 -= 8;
        }
        while (v236 != v269);
        goto LABEL_405;
      }
      uint64_t v253 = 1;
    }
    *uint64_t v156 = v253;
    long long v155 = v156 + 1;
    goto LABEL_408;
  }
  char v62 = 0;
LABEL_558:
  if (v463)
  {
    uint64_t v464 = v463;
    operator delete(v463);
  }
  if (v473)
  {
    uint64_t v474 = (char *)v473;
    operator delete(v473);
  }
  if (v466)
  {
    uint64_t v467 = (char *)v466;
    operator delete(v466);
  }
  if (v527.i64[0])
  {
    v527.i64[1] = v527.i64[0];
    operator delete((void *)v527.i64[0]);
  }
  if (v62) {
    return 1;
  }
  if (*(void *)(a2 + 16) == 1) {
    goto LABEL_568;
  }
  uint64_t v365 = a1->i64[1];
  BOOL v366 = a1->i64[0] == 1;
  BOOL v367 = a1[2].i64[0] == 1;
  if (a1[2].i64[0] != 1) {
    BOOL v366 = 0;
  }
  BOOL v368 = v365 == 1;
  if (v365 != 1) {
    BOOL v366 = 0;
  }
  uint64_t v369 = a1[1].i64[0];
  if (v368) {
    BOOL v367 = 1;
  }
  BOOL v370 = v369 == 1;
  BOOL v371 = v369 == 1 && v366;
  int v372 = v370 || v367;
  if (v371 || !v372)
  {
LABEL_568:
    uint64_t v360 = (uint64_t *)a2;
    goto LABEL_569;
  }
  uint64_t v453 = (void *)*a4;
  DimensionOrderHint::GetOrder((DimensionOrderHint *)a5, &v466);
  int64x2_t v373 = a1[1];
  int64x2_t v537 = *a1;
  int64x2_t v538 = v373;
  uint64_t v539 = a1[2].i64[0];
  if (a1[1].i64[0] == 1)
  {
    uint64_t v360 = (uint64_t *)a2;
    uint64_t v374 = v467 - 4;
    while (v374 != v466)
    {
      int v375 = *((_DWORD *)v374 - 1);
      v374 -= 4;
      if (GetValueAtDimension<ZinTensorDimensions>(a1->i64, v375) > 1)
      {
        uint64_t v376 = *(unsigned int *)v374;
        if (v376 == 5) {
          goto LABEL_689;
        }
        uint64_t v377 = (char *)operator new(8uLL);
        *(void *)uint64_t v377 = v376 | 0x300000000;
        v517[0] = v377 + 8;
        BOOL v515 = v377;
        uint64_t v516 = v377 + 8;
        int64_t v378 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v517, 2uLL);
        v378[1] = (v376 << 32) | 3;
        uint64_t v379 = (char *)(v378 + 1);
        uint64_t v381 = (char *)&v378[v380];
        unint64_t v382 = (char *)(v378 + 2);
        int v383 = (char *)v515;
        int64_t v384 = v516;
        if (v516 != v515)
        {
          do
          {
            uint64_t v385 = *((void *)v384 - 1);
            v384 -= 8;
            *((void *)v379 - 1) = v385;
            v379 -= 8;
          }
          while (v384 != v383);
          int v383 = (char *)v515;
        }
        BOOL v515 = v379;
        uint64_t v516 = v382;
        v517[0] = v381;
        if (v383) {
          operator delete(v383);
        }
        uint64_t v516 = v382;
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v534, (uint64_t)&v515, a3);
        DimensionOrderHint::DimensionOrderHint(&v527, 2);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrTransposeUnitInfo *)v534, (uint64_t)&v527, 1);
        if (v527.i64[0])
        {
          v527.i64[1] = v527.i64[0];
          operator delete((void *)v527.i64[0]);
        }
        unint64_t v386 = a6[1];
        if (v386 >= a6[2])
        {
          uint64_t v387 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
          uint64_t v387 = v386 + 192;
          a6[1] = v386 + 192;
        }
        a6[1] = v387;
        v538.i64[0] = GetValueAtDimension<ZinTensorDimensions>(a1->i64, v376);
        SetValueAtDimension<ZinTensorDimensions>(&v537, v376, a1[1].i64[0]);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
        v534[0] = &unk_26C34F988;
        if (v535)
        {
          uint64_t v536 = v535;
          operator delete(v535);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(v534);
        if (v515)
        {
          uint64_t v516 = (char *)v515;
          operator delete(v515);
        }
        goto LABEL_674;
      }
    }
    uint64_t v467 = v374;
    uint64_t v390 = v374;
LABEL_705:
    operator delete(v390);
    goto LABEL_569;
  }
LABEL_674:
  if (v537.i64[1] == 1)
  {
LABEL_675:
    uint64_t v419 = (char *)operator new(8uLL);
    *(void *)uint64_t v419 = 0x400000002;
    uint64_t v474 = v419 + 8;
    uint64_t v475 = v419 + 8;
    BOOL v473 = v419;
    uint64_t v420 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v475, 2uLL);
    v420[1] = 0x200000004;
    uint64_t v421 = (char *)(v420 + 1);
    uint64_t v423 = (char *)&v420[v422];
    uint64_t v424 = (char *)(v420 + 2);
    BOOL v425 = (char *)v473;
    uint64_t v426 = v474;
    if (v474 != v473)
    {
      do
      {
        uint64_t v427 = *((void *)v426 - 1);
        v426 -= 8;
        *((void *)v421 - 1) = v427;
        v421 -= 8;
      }
      while (v426 != v425);
      BOOL v425 = (char *)v473;
    }
    BOOL v473 = v421;
    uint64_t v474 = v424;
    uint64_t v475 = v423;
    if (v425) {
      operator delete(v425);
    }
    uint64_t v474 = v424;
    uint64_t v428 = v537.i64[1];
    v537.i64[1] = v538.i64[1];
    v538.i64[1] = v428;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v520, (uint64_t)&v473, a3);
    DimensionOrderHint::DimensionOrderHint(&v530, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrTransposeUnitInfo *)&v520, (uint64_t)&v530, 1);
    if (v530)
    {
      BOOL v531 = v530;
      operator delete(v530);
    }
    unint64_t v429 = a6[1];
    if (v429 >= a6[2])
    {
      uint64_t v430 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
      uint64_t v430 = v429 + 192;
      a6[1] = v429 + 192;
    }
    a6[1] = v430;
    uint64_t v435 = v537.i64[1];
    uint64_t v436 = v538.i64[1];
    if (v537.i64[1] == 1 && v538.i64[1] == 1)
    {
      uint64_t v360 = (uint64_t *)a2;
      uint64_t v437 = *a6;
      while (v430 != v437)
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)(v430 - 192));
      BOOL v434 = 0;
      a6[1] = v437;
    }
    else
    {
      int v455 = a3;
      uint64_t v508 = 1;
      int64x2_t v507 = vdupq_n_s64(1uLL);
      uint64_t v360 = (uint64_t *)a2;
      uint64_t v438 = *(void *)(a2 + 24);
      v506.i64[0] = 1;
      v506.i64[1] = v438;
      uint64_t v439 = v539;
      uint64_t v440 = v537.i64[0];
      uint64_t v441 = v538.i64[0];
      uint64_t v442 = v453[46];
      *(void *)uint64_t v550 = v453[48];
      *(void *)&v550[8] = v442;
      uint64_t v443 = v453[40];
      *(void *)&v550[16] = v453[42];
      *(void *)&v550[24] = v443;
      uint64_t v551 = 1;
      uint64_t v444 = (char *)operator new(0x14uLL);
      uint64_t v464 = v444 + 20;
      BOOL v465 = v444 + 20;
      *((_DWORD *)v444 + 4) = 4;
      *(_OWORD *)uint64_t v444 = xmmword_211F0643C;
      uint64_t v445 = v436 * v435 * v440 * v439 * v441 / v438;
      uint64_t v463 = v444;
      uint64_t v446 = v444 + 12;
      while (1)
      {
        BOOL v434 = v446 == v463;
        if (v446 == v463) {
          break;
        }
        uint64_t v447 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v550, *((_DWORD *)v446 - 1));
        uint64_t LowestFactorGreaterThan = FindLowestFactorGreaterThan(v445, (v445 + v447 - 1) / v447);
        int v449 = SetValueAtDimension<ZinTensorDimensions>(&v506, *((_DWORD *)v446 - 1), v445 / LowestFactorGreaterThan);
        v446 -= 4;
        uint64_t v445 = LowestFactorGreaterThan;
        if (v449)
        {
          uint64_t v451 = *a6;
          for (uint64_t i = a6[1];
                i != v451;
          a6[1] = v451;
          a3 = v455;
          goto LABEL_716;
        }
      }
      ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v480, (uint64_t)&v506);
      DimensionOrderHint::DimensionOrderHint(&v511, &v463);
      a3 = v455;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v534, (const ZinIrReshapeUnitInfo *)&v480, (uint64_t)&v511, 1);
      if (v511)
      {
        uint64_t v512 = v511;
        operator delete(v511);
      }
      std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](a6, (int *)v534);
      int64x2_t v537 = v506;
      int64x2_t v538 = v507;
      uint64_t v539 = v508;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v487, (uint64_t)&v473, v455);
      DimensionOrderHint::DimensionOrderHint(&v495, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v515, (const ZinIrTransposeUnitInfo *)&v487, (uint64_t)&v495, 1);
      if (v495)
      {
        uint64_t v496 = (char *)v495;
        operator delete(v495);
      }
      std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](a6, (int *)&v515);
      uint64_t v452 = v537.i64[1];
      v537.i64[1] = v538.i64[1];
      v538.i64[1] = v452;
      if (!ZinTensorDimensionsEqual(&v537, v360))
      {
        ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v543, (uint64_t)v360);
        DimensionOrderHint::DimensionOrderHint((DimensionOrderHint *)&v476, (const DimensionOrderHint *)a5);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (const ZinIrReshapeUnitInfo *)&v543, (uint64_t)&v476, 1);
        if (v476)
        {
          uint64_t v477 = (char *)v476;
          operator delete(v476);
        }
        std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](a6, (int *)&__p);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
        ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&v543);
      }
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v515);
      ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&v487);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v534);
      ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&v480);
LABEL_716:
      if (v463)
      {
        uint64_t v464 = v463;
        operator delete(v463);
      }
    }
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
    v520.i64[0] = (uint64_t)&unk_26C34F988;
    if (v523)
    {
      uint64_t v524 = v523;
      operator delete(v523);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v520);
    if (v473)
    {
      uint64_t v474 = (char *)v473;
      operator delete(v473);
    }
    goto LABEL_722;
  }
  uint64_t v431 = (unsigned int *)(v467 - 4);
  do
  {
    uint64_t v390 = v466;
    if (v431 == (unsigned int *)((char *)v466 + 4))
    {
      uint64_t v360 = (uint64_t *)a2;
      if (!v466) {
        goto LABEL_569;
      }
      uint64_t v467 = (char *)v466;
      goto LABEL_705;
    }
    int v432 = *--v431;
  }
  while (GetValueAtDimension<ZinTensorDimensions>(v537.i64, v432) != 1);
  unsigned int v433 = *v431;
  if (*v431 != 5)
  {
    uint64_t v516 = 0;
    BOOL v515 = 0;
    v517[0] = 0;
    v542[0] = (void *)(v433 | 0x200000000);
    std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v515, v542);
    LODWORD(v542[0]) = 2;
    HIDWORD(v542[0]) = v433;
    std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v515, v542);
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v534, (uint64_t)&v515, a3);
    DimensionOrderHint::DimensionOrderHint(v470, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrTransposeUnitInfo *)v534, (uint64_t)v470, 1);
    if (v470[0])
    {
      v470[1] = v470[0];
      operator delete(v470[0]);
    }
    std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](a6, (int *)v542);
    SetValueAtDimension<ZinTensorDimensions>(&v537, v433, v537.i64[1]);
    v537.i64[1] = 1;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
    ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)v534);
    if (v515)
    {
      uint64_t v516 = (char *)v515;
      operator delete(v515);
    }
    goto LABEL_675;
  }
  uint64_t v360 = (uint64_t *)a2;
LABEL_689:
  BOOL v434 = 0;
LABEL_722:
  if (v466)
  {
    uint64_t v467 = (char *)v466;
    operator delete(v466);
  }
  if (v434) {
    return 1;
  }
LABEL_569:
  uint64_t v361 = 0;
  uint64_t v362 = *a4;
  a2 = (uint64_t)v360;
  while (1)
  {
    uint64_t v363 = *(void *)(*a4 + 1680 + v361);
    if (!(a1[1].i64[1] % v363) && !(v360[3] % v363)) {
      break;
    }
    v361 -= 8;
    if (v361 == -32) {
      goto LABEL_573;
    }
  }
  uint64_t v388 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0];
  uint64_t v389 = *(void *)(v362 + 384);
  if (v388 <= v389)
  {
LABEL_612:
    uint64_t v463 = 0;
    if (!ZinTensorFormatGetSizeInBytes(a3, (uint64_t *)&v463))
    {
      uint64_t v391 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0];
      if (*(void *)(v362 + 408) >= (unint64_t)(v391 * (void)v463)) {
        uint64_t v392 = 1;
      }
      else {
        uint64_t v392 = v363;
      }
      uint64_t v393 = v391 / v388;
      if (v391 % v388) {
        ZinAssertImpl("Optimal batch should be divisible by definition of reshape");
      }
      *(int64x2_t *)&v550[8] = vdupq_n_s64(1uLL);
      uint64_t v394 = a1[1].i64[1];
      *(void *)uint64_t v550 = v388;
      *(void *)&v550[24] = v394;
      uint64_t v551 = v393;
      ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v543, (uint64_t)v550);
      uint64_t v532 = 0;
      uint64_t v530 = 0;
      BOOL v531 = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v530, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
      int v533 = *(_DWORD *)(a5 + 24);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrReshapeUnitInfo *)&v543, (uint64_t)&v530, 1);
      if (v530)
      {
        BOOL v531 = v530;
        operator delete(v530);
      }
      unint64_t v395 = a6[1];
      if (v395 >= a6[2])
      {
        uint64_t v396 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
        uint64_t v396 = v395 + 192;
        a6[1] = v395 + 192;
      }
      a6[1] = v396;
      uint64_t v397 = (char *)operator new(8uLL);
      *(void *)uint64_t v397 = 0x400000002;
      uint64_t v474 = v397 + 8;
      uint64_t v475 = v397 + 8;
      BOOL v473 = v397;
      uint64_t v398 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v475, 2uLL);
      v398[1] = 0x200000004;
      uint64_t v399 = (char *)(v398 + 1);
      BOOL v401 = (char *)&v398[v400];
      uint64_t v402 = (char *)(v398 + 2);
      uint64_t v403 = (char *)v473;
      uint64_t v404 = v474;
      if (v474 != v473)
      {
        do
        {
          uint64_t v405 = *((void *)v404 - 1);
          v404 -= 8;
          *((void *)v399 - 1) = v405;
          v399 -= 8;
        }
        while (v404 != v403);
        uint64_t v403 = (char *)v473;
      }
      BOOL v473 = v399;
      uint64_t v474 = v402;
      uint64_t v475 = v401;
      if (v403) {
        operator delete(v403);
      }
      uint64_t v474 = v402;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v537, (uint64_t)&v473, a3);
      DimensionOrderHint::DimensionOrderHint(&v511, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v534, (const ZinIrTransposeUnitInfo *)&v537, (uint64_t)&v511, v392);
      if (v511)
      {
        uint64_t v512 = v511;
        operator delete(v511);
      }
      unint64_t v406 = a6[1];
      if (v406 >= a6[2])
      {
        uint64_t v407 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v534);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v534);
        uint64_t v407 = v406 + 192;
        a6[1] = v406 + 192;
      }
      a6[1] = v407;
      uint64_t v408 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0] * a1[1].i64[1];
      uint64_t v409 = *(void *)(a2 + 24);
      uint64_t v410 = *(void *)(v362 + 384);
      uint64_t v411 = v408 / v409;
      if (v408 / v409 > v410)
      {
        if (!v410)
        {
LABEL_636:
          if (!(v408 % v409)) {
            ZinAssertImpl("Reshape lowering could not find optimal batch value", v453);
          }
          goto LABEL_733;
        }
        while (v408 / v409 % v410)
        {
          if (--v410 == 1) {
            goto LABEL_636;
          }
        }
        uint64_t v411 = v410;
      }
      if (!(v408 % v409))
      {
        if (!(v411 * v409)) {
          ZinAssertImpl("optimal batch cannot be zero to avoid dividing by zero", v453);
        }
        v527.i64[0] = v411;
        v527.i64[1] = v409;
        int64x2_t v528 = vdupq_n_s64(1uLL);
        uint64_t v529 = v408 / (v411 * v409);
        ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v520, (uint64_t)&v527);
        BOOL v497 = 0;
        uint64_t v495 = 0;
        uint64_t v496 = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v495, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
        int v498 = *(_DWORD *)(a5 + 24);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v515, (const ZinIrReshapeUnitInfo *)&v520, (uint64_t)&v495, v392);
        if (v495)
        {
          uint64_t v496 = (char *)v495;
          operator delete(v495);
        }
        unint64_t v412 = a6[1];
        if (v412 >= a6[2])
        {
          uint64_t v413 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v515);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v515);
          uint64_t v413 = v412 + 192;
          a6[1] = v412 + 192;
        }
        a6[1] = v413;
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v506, (uint64_t)&v473, a3);
        DimensionOrderHint::DimensionOrderHint(&v476, 2);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (const ZinIrTransposeUnitInfo *)&v506, (uint64_t)&v476, 1);
        if (v476)
        {
          uint64_t v477 = (char *)v476;
          operator delete(v476);
        }
        unint64_t v414 = a6[1];
        if (v414 >= a6[2])
        {
          uint64_t v415 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&__p);
          uint64_t v415 = v414 + 192;
          a6[1] = v414 + 192;
        }
        a6[1] = v415;
        long long v416 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v470 = *(_OWORD *)a2;
        long long v471 = v416;
        uint64_t v472 = *(void *)(a2 + 32);
        ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v487, (uint64_t)v470);
        uint64_t v467 = 0;
        uint64_t v468 = 0;
        uint64_t v466 = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v466, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
        int v469 = *(_DWORD *)(a5 + 24);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v480, (const ZinIrReshapeUnitInfo *)&v487, (uint64_t)&v466, 1);
        if (v466)
        {
          uint64_t v467 = (char *)v466;
          operator delete(v466);
        }
        unint64_t v417 = a6[1];
        if (v417 >= a6[2])
        {
          uint64_t v418 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, v480.i32);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], v480.i32);
          uint64_t v418 = v417 + 192;
          a6[1] = v417 + 192;
        }
        a6[1] = v418;
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v480);
        uint64_t v487 = &unk_26C34D9A0;
        if (v493)
        {
          uint64_t v494 = v493;
          operator delete(v493);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(&v487);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
        v506.i64[0] = (uint64_t)&unk_26C34F988;
        if (v509)
        {
          uint64_t v510 = v509;
          operator delete(v509);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v506);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v515);
        v520.i64[0] = (uint64_t)&unk_26C34D9A0;
        if (v525)
        {
          uint64_t v526 = v525;
          operator delete(v525);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v520);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v534);
        v537.i64[0] = (uint64_t)&unk_26C34F988;
        if (v540)
        {
          uint64_t v541 = v540;
          operator delete(v540);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v537);
        if (v473)
        {
          uint64_t v474 = (char *)v473;
          operator delete(v473);
        }
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
        uint64_t v543 = &unk_26C34D9A0;
        if (v548)
        {
          uint64_t v549 = v548;
          operator delete(v548);
        }
        long long v182 = &v543;
LABEL_229:
        ZinIrUnitInfo::~ZinIrUnitInfo(v182);
        return 1;
      }
LABEL_733:
      ZinAssertImpl("should be divisible by definition of reshape", v453);
    }
LABEL_732:
    ZinAssertImpl("Error in getting tensor format size in bytes", v453);
  }
  if (v389)
  {
    while (v388 % v389)
    {
      if (--v389 == 1) {
        goto LABEL_573;
      }
    }
    uint64_t v388 = v389;
    goto LABEL_612;
  }
LABEL_573:
  if (ZinIrReshapeUnit::HasDimWithValueOne((ZinIrReshapeUnit *)a1, v61)
    && ZinIrReshapeUnit::HasDimWithValueOne((ZinIrReshapeUnit *)v360, v364))
  {
    DecomposeGeneralReshape((const ZinTensorDimensions *)a1, v360, a3, a5, a6);
  }
LABEL_274:
  uint64_t v197 = a6[1];
  if (v197 != *a6)
  {
    if (ZinReshapeLayerUtils::IsValidDecomposition((long long *)a1->i8, a3, (uint64_t)a4, a6)) {
      return 1;
    }
    uint64_t v197 = *a6;
    for (uint64_t j = a6[1];
          j != v197;
  }
  a6[1] = v197;
  uint64_t v200 = (const ZinIrHalParameters *)*a4;
  uint64_t v202 = a1->i64[1];
  uint64_t v201 = a1[1].i64[0];
  uint64_t v203 = a1[2].i64[0];
  uint64_t v204 = a1->i64[0];
  *(int64x2_t *)uint64_t v550 = vdupq_n_s64(1uLL);
  *(_OWORD *)&v550[16] = *(_OWORD *)v550;
  uint64_t v551 = 1;
  if (!DistributeADimToNDC(v202 * v201 * v203 * v204, v200, (int64x2_t *)v550)) {
    return 0;
  }
  if (*(void *)&v550[16] != 1) {
    ZinAssertImpl("H dimension must be 1, because this will be transposed with W");
  }
  *(void *)&v550[24] = a1[1].i64[1];
  ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v543, (uint64_t)v550);
  v470[1] = 0;
  *(void *)&long long v471 = 0;
  v470[0] = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v470, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  DWORD2(v471) = *(_DWORD *)(a5 + 24);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v542, (const ZinIrReshapeUnitInfo *)&v543, (uint64_t)v470, 1);
  if (v470[0])
  {
    v470[1] = v470[0];
    operator delete(v470[0]);
  }
  unint64_t v205 = a6[1];
  if (v205 >= a6[2])
  {
    uint64_t v206 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v542);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v542);
    uint64_t v206 = v205 + 192;
    a6[1] = v205 + 192;
  }
  a6[1] = v206;
  uint64_t v207 = (char *)operator new(8uLL);
  *(void *)uint64_t v207 = 0x300000004;
  uint64_t v467 = v207 + 8;
  uint64_t v468 = v207 + 8;
  uint64_t v466 = v207;
  long long v208 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v468, 2uLL);
  v208[1] = 0x400000003;
  long long v209 = (char *)(v208 + 1);
  long long v211 = (char *)&v208[v210];
  long long v212 = (char *)(v208 + 2);
  long long v213 = (char *)v466;
  long long v214 = v467;
  if (v467 != v466)
  {
    do
    {
      uint64_t v215 = *((void *)v214 - 1);
      v214 -= 8;
      *((void *)v209 - 1) = v215;
      v209 -= 8;
    }
    while (v214 != v213);
    long long v213 = (char *)v466;
  }
  uint64_t v466 = v209;
  uint64_t v467 = v212;
  uint64_t v468 = v211;
  if (v213) {
    operator delete(v213);
  }
  uint64_t v467 = v212;
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v537, (uint64_t)&v466, a3);
  DimensionOrderHint::DimensionOrderHint(&v530, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v534, (const ZinIrTransposeUnitInfo *)&v537, (uint64_t)&v530, 1);
  if (v530)
  {
    BOOL v531 = v530;
    operator delete(v530);
  }
  unint64_t v216 = a6[1];
  if (v216 >= a6[2])
  {
    uint64_t v217 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v534);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v534);
    uint64_t v217 = v216 + 192;
    a6[1] = v216 + 192;
  }
  a6[1] = v217;
  unint64_t v218 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0] * a1[1].i64[1] / *(uint64_t *)(a2 + 24);
  int64x2_t v527 = vdupq_n_s64(1uLL);
  int64x2_t v528 = v527;
  uint64_t v529 = 1;
  BOOL v198 = DistributeADimToNDC(v218, v200, &v527);
  if (v198)
  {
    v528.i64[0] = *(void *)(a2 + 24);
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v520, (uint64_t)&v527);
    uint64_t v513 = 0;
    uint64_t v511 = 0;
    uint64_t v512 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v511, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
    int v514 = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v515, (const ZinIrReshapeUnitInfo *)&v520, (uint64_t)&v511, 1);
    if (v511)
    {
      uint64_t v512 = v511;
      operator delete(v511);
    }
    unint64_t v219 = a6[1];
    if (v219 >= a6[2])
    {
      uint64_t v220 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v515);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v515);
      uint64_t v220 = v219 + 192;
      a6[1] = v219 + 192;
    }
    a6[1] = v220;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v506, (uint64_t)&v466, a3);
    DimensionOrderHint::DimensionOrderHint(&v495, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (const ZinIrTransposeUnitInfo *)&v537, (uint64_t)&v495, 1);
    if (v495)
    {
      uint64_t v496 = (char *)v495;
      operator delete(v495);
    }
    unint64_t v221 = a6[1];
    if (v221 >= a6[2])
    {
      uint64_t v222 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&__p);
      uint64_t v222 = v221 + 192;
      a6[1] = v221 + 192;
    }
    a6[1] = v222;
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v487, a2);
    uint64_t v477 = 0;
    uint64_t v478 = 0;
    uint64_t v476 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v476, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
    int v479 = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v480, (const ZinIrReshapeUnitInfo *)&v487, (uint64_t)&v476, 1);
    if (v476)
    {
      uint64_t v477 = (char *)v476;
      operator delete(v476);
    }
    unint64_t v223 = a6[1];
    if (v223 >= a6[2])
    {
      uint64_t v224 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, v480.i32);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], v480.i32);
      uint64_t v224 = v223 + 192;
      a6[1] = v223 + 192;
    }
    a6[1] = v224;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v480);
    uint64_t v487 = &unk_26C34D9A0;
    if (v493)
    {
      uint64_t v494 = v493;
      operator delete(v493);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(&v487);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
    v506.i64[0] = (uint64_t)&unk_26C34F988;
    if (v509)
    {
      uint64_t v510 = v509;
      operator delete(v509);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v506);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v515);
    v520.i64[0] = (uint64_t)&unk_26C34D9A0;
    if (v525)
    {
      uint64_t v526 = v525;
      operator delete(v525);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v520);
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v534);
  v537.i64[0] = (uint64_t)&unk_26C34F988;
  if (v540)
  {
    uint64_t v541 = v540;
    operator delete(v540);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v537);
  if (v466)
  {
    uint64_t v467 = (char *)v466;
    operator delete(v466);
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v542);
  uint64_t v543 = &unk_26C34D9A0;
  if (v548)
  {
    uint64_t v549 = v548;
    operator delete(v548);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(&v543);
  return v198;
}

void sub_2113463A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  if (__p) {
    operator delete(__p);
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&STACK[0x670]);
  ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&STACK[0x460]);
  if (a30) {
    operator delete(a30);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void DecomposeGeneralReshape(const ZinTensorDimensions *a1, uint64_t *a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = *((void *)a1 + 3);
  uint64_t v8 = *((void *)a1 + 4);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *((void *)a1 + 1);
  uint64_t v12 = *((void *)a1 + 2);
  unint64_t v13 = operator new(0x28uLL);
  *unint64_t v13 = v10;
  v13[1] = v8;
  void v13[2] = v11;
  unsigned int v13[3] = v12;
  v13[4] = v9;
  uint64_t v15 = a2[3];
  uint64_t v14 = a2[4];
  uint64_t v17 = *a2;
  uint64_t v16 = a2[1];
  uint64_t v18 = a2[2];
  long long v19 = operator new(0x28uLL);
  *long long v19 = v17;
  v19[1] = v14;
  v19[2] = v16;
  v19[3] = v18;
  v19[4] = v15;
  uint64_t v102 = 0;
  long long v103 = 0;
  v104[0] = 0;
  if (IsVector(a1))
  {
    Vectorint Dimension = GetVectorDimension(a1);
    uint64_t v26 = v103 - v102;
    if ((unint64_t)(v26 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = (uint64_t)(v104[0] - (void)v102) >> 2;
    if (v27 <= v26 + 1) {
      unint64_t v27 = v26 + 1;
    }
    if (v104[0] - (void)v102 >= 0x7FFFFFFFFFFFFFF8uLL) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28) {
      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v104, v28);
    }
    else {
      uint64_t v29 = 0;
    }
    BOOL v46 = (uint64_t *)&v29[8 * v26];
    unint64_t v47 = &v29[8 * v28];
    *BOOL v46 = VectorDimension | 0x300000000;
    uint64_t v48 = v46 + 1;
    uint64_t v50 = (char *)v102;
    long long v49 = (char *)v103;
    if (v103 != v102)
    {
      do
      {
        uint64_t v51 = *((void *)v49 - 1);
        v49 -= 8;
        *--BOOL v46 = v51;
      }
      while (v49 != v50);
      long long v49 = (char *)v102;
    }
    uint64_t v102 = v46;
    long long v103 = v48;
    v104[0] = v47;
    if (v49) {
      operator delete(v49);
    }
    long long v103 = v48;
    if ((unint64_t)v48 >= v104[0])
    {
      uint64_t v53 = v48 - v102;
      if ((unint64_t)(v53 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v54 = (uint64_t)(v104[0] - (void)v102) >> 2;
      if (v54 <= v53 + 1) {
        unint64_t v54 = v53 + 1;
      }
      if (v104[0] - (void)v102 >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v54;
      }
      if (v55) {
        uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v104, v55);
      }
      else {
        uint64_t v56 = 0;
      }
      unint64_t v57 = (uint64_t *)&v56[8 * v53];
      int64x2_t v58 = &v56[8 * v55];
      uint64_t *v57 = (VectorDimension << 32) | 3;
      unint64_t v52 = v57 + 1;
      long long v60 = (char *)v102;
      int64x2_t v59 = (char *)v103;
      if (v103 != v102)
      {
        do
        {
          uint64_t v61 = *((void *)v59 - 1);
          v59 -= 8;
          *--unint64_t v57 = v61;
        }
        while (v59 != v60);
        int64x2_t v59 = (char *)v102;
      }
      uint64_t v102 = v57;
      long long v103 = v52;
      v104[0] = v58;
      if (v59) {
        operator delete(v59);
      }
    }
    else
    {
      uint64_t *v48 = (VectorDimension << 32) | 3;
      unint64_t v52 = v48 + 1;
    }
    long long v103 = v52;
  }
  else
  {
    uint64_t v21 = 0;
    while (v13[v21] != 1)
    {
      if (++v21 == 5)
      {
        LODWORD(v21) = 0;
        break;
      }
    }
    uint64_t v22 = v103 - v102;
    if ((unint64_t)(v22 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v23 = (uint64_t)(v104[0] - (void)v102) >> 2;
    if (v23 <= v22 + 1) {
      unint64_t v23 = v22 + 1;
    }
    if (v104[0] - (void)v102 >= 0x7FFFFFFFFFFFFFF8uLL) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v104, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    int64x2_t v30 = (uint64_t *)&v25[8 * v22];
    uint64_t v31 = &v25[8 * v24];
    *int64x2_t v30 = v21 | 0x400000000;
    uint64_t v32 = v30 + 1;
    uint64_t v34 = (char *)v102;
    unint64_t v33 = (char *)v103;
    if (v103 != v102)
    {
      do
      {
        uint64_t v35 = *((void *)v33 - 1);
        v33 -= 8;
        *--int64x2_t v30 = v35;
      }
      while (v33 != v34);
      unint64_t v33 = (char *)v102;
    }
    uint64_t v102 = v30;
    long long v103 = v32;
    v104[0] = v31;
    if (v33) {
      operator delete(v33);
    }
    long long v103 = v32;
    if (v21 <= 3)
    {
      uint64_t v36 = v21;
      do
      {
        uint64_t v37 = v36 + 1;
        if ((unint64_t)v32 >= v104[0])
        {
          uint64_t v38 = v32 - v102;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v39 = (uint64_t)(v104[0] - (void)v102) >> 2;
          if (v39 <= v38 + 1) {
            unint64_t v39 = v38 + 1;
          }
          if (v104[0] - (void)v102 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40) {
            int v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v104, v40);
          }
          else {
            int v41 = 0;
          }
          uint64_t v42 = &v41[8 * v38];
          *(void *)uint64_t v42 = v37 | (v36 << 32);
          uint64_t v32 = (uint64_t *)(v42 + 8);
          unint64_t v44 = (char *)v102;
          uint64_t v43 = (char *)v103;
          if (v103 != v102)
          {
            do
            {
              uint64_t v45 = *((void *)v43 - 1);
              v43 -= 8;
              *((void *)v42 - 1) = v45;
              v42 -= 8;
            }
            while (v43 != v44);
            uint64_t v43 = (char *)v102;
          }
          uint64_t v102 = (uint64_t *)v42;
          long long v103 = v32;
          v104[0] = &v41[8 * v40];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *v32++ = v37 | (v36 << 32);
        }
        long long v103 = v32;
        ++v36;
      }
      while (v37 != 4);
    }
  }
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v99, (uint64_t)&v102, a3);
  DimensionOrderHint::DimensionOrderHint(__p, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v98, (const ZinIrTransposeUnitInfo *)v99, (uint64_t)__p, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v62 = a5[1];
  if (v62 >= a5[2])
  {
    uint64_t v63 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a5, v98);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a5[1], v98);
    uint64_t v63 = v62 + 192;
    a5[1] = v62 + 192;
  }
  uint64_t v64 = 0;
  a5[1] = v63;
  while (v19[v64] != 1)
  {
    if (++v64 == 5)
    {
      LODWORD(v64) = 0;
      break;
    }
  }
  uint64_t v95 = 0;
  uint64_t v94 = 0;
  uint64_t v96 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v94, v19, (uint64_t)(v19 + 5), 5uLL);
  uint64_t v65 = v94;
  if (v64 <= 3)
  {
    uint64_t v66 = v64;
    do
    {
      v65[v66] = v65[v66 + 1];
      ++v66;
    }
    while (v66 != 4);
  }
  v65[4] = 1;
  uint64_t v90 = *v65;
  long long v91 = *((_OWORD *)v65 + 1);
  uint64_t v92 = 1;
  uint64_t v93 = v65[1];
  ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)v87, (uint64_t)&v90);
  int64x2_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v82 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v82, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  int v85 = *(_DWORD *)(a4 + 24);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v86, (const ZinIrReshapeUnitInfo *)v87, (uint64_t)&v82, 1);
  if (v82)
  {
    int64x2_t v83 = v82;
    operator delete(v82);
  }
  unint64_t v67 = a5[1];
  if (v67 >= a5[2])
  {
    uint64_t v68 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a5, v86);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a5[1], v86);
    uint64_t v68 = v67 + 192;
    a5[1] = v67 + 192;
  }
  a5[1] = v68;
  long long v79 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  memset(v78, 0, sizeof(v78));
  if (!ZinReshapeLayerUtils::IsConvertibleToTranspose(&v90, a2, (DimensionOrderHint *)a4, v78)) {
    ZinAssertImpl("the decomposed transpose is not valid.");
  }
  ZinReshapeLayerUtils::ConvertTransposeMappingToDims(v78, (char **)&v79);
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v75, (uint64_t)&v79, a3);
  DimensionOrderHint::DimensionOrderHint(v73, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v74, (const ZinIrTransposeUnitInfo *)v75, (uint64_t)v73, 1);
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  unint64_t v69 = a5[1];
  if (v69 >= a5[2])
  {
    uint64_t v70 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a5, (int *)v74);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a5[1], (int *)v74);
    uint64_t v70 = v69 + 192;
    a5[1] = v69 + 192;
  }
  a5[1] = v70;
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v74);
  v75[0] = &unk_26C34F988;
  if (v76)
  {
    int v77 = v76;
    operator delete(v76);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v75);
  v74[0] = (void **)v78;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](v74);
  if (v79)
  {
    uint64_t v80 = v79;
    operator delete(v79);
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v86);
  v87[0] = &unk_26C34D9A0;
  if (v88)
  {
    uint64_t v89 = v88;
    operator delete(v88);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v87);
  if (v94)
  {
    uint64_t v95 = v94;
    operator delete(v94);
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v98);
  v99[0] = &unk_26C34F988;
  if (v100)
  {
    long long v101 = v100;
    operator delete(v100);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v99);
  if (v102)
  {
    long long v103 = v102;
    operator delete(v102);
  }
  operator delete(v19);
  operator delete(v13);
}

void sub_2113477CC(_Unwind_Exception *a1)
{
  int v5 = *(void **)(v3 - 112);
  if (v5)
  {
    *(void *)(v3 - 104) = v5;
    operator delete(v5);
  }
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL ZinReshapeLayerUtils::CheckInterleaveCompatibility(ZinReshapeLayerUtils *this, const ZinTensorDimensions *a2, const ZinTensorDimensions *a3, unint64_t a4)
{
  if (a4 == 1) {
    return 1;
  }
  if (*((void *)a2 + 1) % a4 || *((void *)this + 1) % a4) {
    return 0;
  }
  if (!DimensionOrderHint::IsSet(a3)) {
    return 1;
  }
  DimensionOrderHint::GetOrder(a3, &v14);
  uint64_t v9 = v14;
  uint64_t v10 = v14;
  if (v14 != v15)
  {
    while (*v10 != 2)
    {
      if (++v10 == v15)
      {
        uint64_t v10 = v15;
        break;
      }
    }
  }
  uint64_t v11 = v10 + 1;
  if (v10 + 1 == v15)
  {
    int v13 = 1;
    int v12 = 1;
  }
  else
  {
    int v12 = 1;
    int v13 = 1;
    do
    {
      v12 *= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)this, *v11);
      v13 *= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)a2, *v11++);
    }
    while (v11 != v15);
    uint64_t v9 = v14;
  }
  BOOL v4 = v12 == v13;
  if (v9)
  {
    uint64_t v15 = v9;
    operator delete(v9);
  }
  return v4;
}

void sub_211347A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayerUtils::IsReshapeValidAfterStridePadding(ZinIrOpLayer *a1, int a2, uint64_t a3)
{
  int v23 = a2;
  if (!a3) {
    ZinAssertImpl("must provide fixed dimension order as default");
  }
  uint64_t v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  if (ZinIrTensor::HasFlexDimensionOrderHint(v6)) {
    DimensionOrderHint::DimensionOrderHint(v22, a3);
  }
  else {
    ZinIrTensor::GetDimensionOrderHint(v6, (uint64_t)v22);
  }
  DimensionOrderHint::GetOrder((DimensionOrderHint *)v22, &__p);
  uint64_t InputTensor = ZinIrOpLayer::GetInputTensor(a1, 0);
  ZinReshapeLayerUtils::TraceReshapeDimension(InputTensor, (uint64_t)v6, &__p, (uint64_t)v19);
  uint64_t v8 = ZinIrOpLayer::GetInputTensor(a1, 0);
  ZinReshapeLayerUtils::TraceReshapeDimension((uint64_t)v6, v8, &__p, (uint64_t)&v17);
  uint64_t v9 = (char *)__p;
  if (__p != v21)
  {
    while (*(_DWORD *)v9 != a2)
    {
      v9 += 4;
      if (v9 == v21)
      {
        uint64_t v9 = v21;
        break;
      }
    }
  }
  if (v9 - (unsigned char *)__p > 11 || (uint64_t v10 = v18) == 0)
  {
LABEL_16:
    uint64_t v12 = 1;
    goto LABEL_17;
  }
  while (1)
  {
    int v11 = *((_DWORD *)v10 + 8);
    if (v11 <= a2) {
      break;
    }
LABEL_15:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_16;
    }
  }
  if (v11 < a2)
  {
    ++v10;
    goto LABEL_15;
  }
  unint64_t v24 = &v23;
  uint64_t v14 = std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(&v17, &v23, (uint64_t)&std::piecewise_construct, &v24);
  if (v14[5] == v14[6]) {
    goto LABEL_16;
  }
  unint64_t v24 = &v23;
  int v16 = *(_DWORD *)std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(&v17, &v23, (uint64_t)&std::piecewise_construct, &v24)[5];
  unint64_t v24 = &v16;
  uint64_t v15 = std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v19, &v16, (uint64_t)&std::piecewise_construct, &v24);
  if (*(_DWORD *)v15[5] == v23) {
    goto LABEL_16;
  }
  uint64_t v12 = 0;
LABEL_17:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v17, v18);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v19, v19[1]);
  if (__p)
  {
    uint64_t v21 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  return v12;
}

void sub_211347C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t GetVectorDimension(const ZinTensorDimensions *a1)
{
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v1 = *((void *)a1 + 4);
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = operator new(0x28uLL);
  uint64_t v7 = 0;
  void *v6 = v3;
  v6[1] = v1;
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  do
  {
    BOOL v8 = (uint64_t)v6[v7] > 1 || v7 == 4;
    ++v7;
  }
  while (!v8);
  uint64_t v9 = (v7 - 1);
  operator delete(v6);
  return v9;
}

uint64_t std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](uint64_t *a1, int *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a1[1], a2);
    uint64_t result = v3 + 192;
    a1[1] = v3 + 192;
  }
  a1[1] = result;
  return result;
}

void sub_211347DB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc(uint64_t a1, const ZinIrTransposeUnitInfo *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a1 = 21;
  *(void *)(a1 + 8) = a4;
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)(a1 + 48), a2);
  return a1;
}

void sub_211347E1C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LayerTilingHelper>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  uint64_t v14 = (int *)&v10[192 * v4];
  int v16 = &v10[192 * v9];
  std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>(v14, a2);
  uint64_t v15 = v14 + 48;
  std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_211347F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

int *std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>(int *a1, int *a2)
{
  DimensionOrderHint::DimensionOrderHint(__p, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc(a1, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_211347F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc(int *a1, int *a2)
{
  unint64_t v4 = (char *)(a1 + 4);
  DimensionOrderHint::DimensionOrderHint(a1 + 4, 2);
  int v5 = *a2;
  *a1 = *a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  if (a1 != a2)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *((char **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 2);
    int v5 = *a1;
  }
  a1[10] = a2[10];
  if (v5 == 21)
  {
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)(a1 + 12), (const ZinIrTransposeUnitInfo *)(a2 + 12));
  }
  else if (v5 == 22)
  {
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)(a1 + 12), (const ZinIrReshapeUnitInfo *)(a2 + 12));
  }
  return a1;
}

void sub_21134805C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinReshapeLayerUtils::ReshapeDecomposedDesc>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinReshapeLayerUtils::ReshapeDecomposedDesc>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 192;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (int *)(v11 + v10);
    v10 -= 192;
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>(v12, (int *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)(i - 192));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc(uint64_t a1, const ZinIrReshapeUnitInfo *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (char *)(a1 + 16);
  DimensionOrderHint::DimensionOrderHint(a1 + 16, 2);
  *(_DWORD *)a1 = 22;
  *(void *)(a1 + 8) = a4;
  if (v8 != (char *)a3) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v8, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  *(_DWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a3 + 24);
  ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)(a1 + 48), a2);
  return a1;
}

void sub_211348260(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FindAxisToSwapWidth(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = xmmword_211EE3A90;
  uint64_t v18 = 1;
  if (ZinTensorFormatGetSizeInBytes(a3, &v18)) {
    ZinAssertImpl("Invalid format");
  }
  uint64_t v9 = 0;
  unint64_t v10 = -1;
  uint64_t v11 = 5;
  do
  {
    unsigned int v12 = *((_DWORD *)v8 + v9);
    uint64_t v14 = *(_DWORD **)a1;
    int v13 = *(_DWORD **)(a1 + 8);
    if (*(_DWORD **)a1 != v13)
    {
      while (*v14 != v12)
      {
        if (++v14 == v13)
        {
          uint64_t v14 = *(_DWORD **)(a1 + 8);
          break;
        }
      }
    }
    if (v14 == v13)
    {
      uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>(a2, *((_DWORD *)v8 + v9));
      unint64_t v16 = ZinAlign(ValueAt, *(void *)(a4 + 528));
      if (ValueAt != 1 && v16 - ValueAt < v10)
      {
        unint64_t v10 = v16 - ValueAt;
        uint64_t v11 = v12;
      }
      else
      {
        uint64_t v11 = v11;
      }
    }
    ++v9;
  }
  while (v9 != 4);
  operator delete(v8);
  return v11;
}

void sub_2113483A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FindAxisToSwapWidthUsingTranspose(ZinReshapeLayerUtils *a1, const ZinTensorDimensions *a2, int a3, uint64_t a4, int a5, DimensionOrderHint *this, void **a7, uint64_t a8)
{
  a7[1] = *a7;
  if (a5) {
    unint64_t v10 = a1;
  }
  else {
    unint64_t v10 = a2;
  }
  long long v11 = *(_OWORD *)v10;
  long long v12 = *((_OWORD *)v10 + 1);
  *(void *)(a8 + 32) = *((void *)v10 + 4);
  *(_OWORD *)a8 = v11;
  *(_OWORD *)(a8 + 16) = v12;
  DimensionOrderHint::GetOrder(this, __p);
  DimensionOrderHint::DimensionOrderHint(v84, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v70 = a7;
  int v13 = operator new(0x10uLL);
  uint64_t v14 = 0;
  *int v13 = xmmword_211EE3A90;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v83 = 0;
  long long v79 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  do
  {
    int v15 = *((_DWORD *)v13 + v14);
    if (GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v10, v15) == 1)
    {
      unint64_t v16 = v80;
      if (v80 >= v81)
      {
        uint64_t v18 = v79;
        uint64_t v19 = v80 - v79;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)v81 - (char *)v79;
        if (((char *)v81 - (char *)v79) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v81, v22);
          uint64_t v18 = v79;
          unint64_t v16 = v80;
        }
        else
        {
          int v23 = 0;
        }
        unint64_t v24 = (int *)&v23[4 * v19];
        *unint64_t v24 = v15;
        uint64_t v17 = v24 + 1;
        while (v16 != v18)
        {
          int v25 = *--v16;
          *--unint64_t v24 = v25;
        }
        long long v79 = v24;
        uint64_t v80 = v17;
        uint64_t v81 = (int *)&v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        int *v80 = v15;
        uint64_t v17 = v16 + 1;
      }
      uint64_t v80 = v17;
    }
    ++v14;
  }
  while (v14 != 4);
  unint64_t v26 = 0;
  do
  {
    DimensionOrderHint::GetOrder((DimensionOrderHint *)v84, v77);
    unint64_t v27 = v77[0];
    unint64_t v28 = v77[1];
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
    if ((v28 - v27) >> 2 <= v26)
    {
LABEL_53:
      uint64_t v33 = 5;
LABEL_54:
      uint64_t v31 = v79;
      goto LABEL_55;
    }
    DimensionOrderHint::GetOrder((DimensionOrderHint *)v84, v77);
    if (v26 >= ((char *)v77[1] - (char *)v77[0]) >> 2) {
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v10, *((_DWORD *)v77[0] + v26));
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
    ++v26;
  }
  while (ValueAt < 2);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)v84, v77);
  if (v26 - 1 >= ((char *)v77[1] - (char *)v77[0]) >> 2) {
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v30 = *((unsigned int *)v77[0] + v26 - 1);
  v77[1] = v77[0];
  operator delete(v77[0]);
  uint64_t v31 = v79;
  uint64_t v32 = (unsigned int *)v80;
  uint64_t v33 = 5;
  if (v80 != v79 && v30 != 5)
  {
    uint64_t v34 = 0;
    __format = "Axis values are not as expected\n";
    while (1)
    {
      uint64_t v35 = *v31;
      long long v36 = *(_OWORD *)v10;
      long long v37 = *((_OWORD *)v10 + 1);
      *(void *)(a8 + 32) = *((void *)v10 + 4);
      *(_OWORD *)a8 = v36;
      *(_OWORD *)(a8 + 16) = v37;
      uint64_t v38 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v10, v35);
      uint64_t v39 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v10, v30);
      uint64_t v40 = v39;
      if (v38 != 1 && v39 == 1) {
        goto LABEL_98;
      }
      if (SetValueAtDimension<ZinTensorDimensions>((void *)a8, v30, v38)
        || SetValueAtDimension<ZinTensorDimensions>((void *)a8, v35, v40))
      {
        __format = "Setting dim failed\n";
LABEL_98:
        ZinAssertImpl(__format);
      }
      if (a5)
      {
        ZinReshapeLayerUtils::GetReshapedDimensions((ZinReshapeLayerUtils *)a8, a2, (const ZinTensorDimensions *)v84, 0, (char **)v77);
        if (v34)
        {
          __p[1] = v34;
          operator delete(v34);
        }
        unint64_t v72 = v77[0];
        *(_OWORD *)std::string __p = *(_OWORD *)v77;
        uint64_t v83 = v78;
        uint64_t AxisToSwapWidth = FindAxisToSwapWidth((uint64_t)__p, (uint64_t *)a8, a3, a4);
      }
      else
      {
        ZinReshapeLayerUtils::GetReshapedDimensions(a1, (const ZinTensorDimensions *)a8, (const ZinTensorDimensions *)v84, 0, (char **)v77);
        if (v34)
        {
          __p[1] = v34;
          operator delete(v34);
        }
        unint64_t v72 = v77[0];
        *(_OWORD *)std::string __p = *(_OWORD *)v77;
        uint64_t v83 = v78;
        uint64_t AxisToSwapWidth = FindAxisToSwapWidth((uint64_t)__p, (uint64_t *)a1, a3, a4);
      }
      uint64_t v33 = AxisToSwapWidth;
      uint64_t v34 = v72;
      if (AxisToSwapWidth != 5) {
        break;
      }
      if (++v31 == (int *)v32) {
        goto LABEL_53;
      }
    }
    unint64_t v44 = (unint64_t)v70[2];
    uint64_t v45 = (uint64_t *)v70[1];
    if ((unint64_t)v45 >= v44)
    {
      uint64_t v47 = ((char *)v45 - (unsigned char *)*v70) >> 3;
      if ((unint64_t)(v47 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v48 = v44 - (void)*v70;
      uint64_t v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1)) {
        uint64_t v49 = v47 + 1;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v49;
      }
      if (v50) {
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v70 + 2), v50);
      }
      else {
        uint64_t v51 = 0;
      }
      unint64_t v52 = &v51[8 * v47];
      uint64_t v53 = &v51[8 * v50];
      *(void *)unint64_t v52 = v30 | (v35 << 32);
      BOOL v46 = (uint64_t *)(v52 + 8);
      unint64_t v55 = (char *)*v70;
      unint64_t v54 = (char *)v70[1];
      if (v54 != *v70)
      {
        do
        {
          uint64_t v56 = *((void *)v54 - 1);
          v54 -= 8;
          *((void *)v52 - 1) = v56;
          v52 -= 8;
        }
        while (v54 != v55);
        unint64_t v54 = (char *)*v70;
      }
      *uint64_t v70 = v52;
      v70[1] = v46;
      v70[2] = v53;
      if (v54) {
        operator delete(v54);
      }
    }
    else
    {
      uint64_t *v45 = v30 | (v35 << 32);
      BOOL v46 = v45 + 1;
    }
    v70[1] = v46;
    unint64_t v57 = (unint64_t)v70[2];
    if ((unint64_t)v46 >= v57)
    {
      uint64_t v59 = ((char *)v46 - (unsigned char *)*v70) >> 3;
      if ((unint64_t)(v59 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v60 = v57 - (void)*v70;
      uint64_t v61 = v60 >> 2;
      if (v60 >> 2 <= (unint64_t)(v59 + 1)) {
        uint64_t v61 = v59 + 1;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v61;
      }
      if (v62) {
        uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v70 + 2), v62);
      }
      else {
        uint64_t v63 = 0;
      }
      uint64_t v64 = &v63[8 * v59];
      uint64_t v65 = &v63[8 * v62];
      *(void *)uint64_t v64 = v35 | (v30 << 32);
      int64x2_t v58 = v64 + 8;
      unint64_t v67 = (char *)*v70;
      uint64_t v66 = (char *)v70[1];
      if (v66 != *v70)
      {
        do
        {
          uint64_t v68 = *((void *)v66 - 1);
          v66 -= 8;
          *((void *)v64 - 1) = v68;
          v64 -= 8;
        }
        while (v66 != v67);
        uint64_t v66 = (char *)*v70;
      }
      *uint64_t v70 = v64;
      v70[1] = v58;
      v70[2] = v65;
      if (v66) {
        operator delete(v66);
      }
    }
    else
    {
      *BOOL v46 = v35 | (v30 << 32);
      int64x2_t v58 = v46 + 1;
    }
    v70[1] = v58;
    goto LABEL_54;
  }
LABEL_55:
  if (v31)
  {
    uint64_t v80 = v31;
    operator delete(v31);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  operator delete(v13);
  if (v84[0])
  {
    v84[1] = v84[0];
    operator delete(v84[0]);
  }
  return v33;
}

void sub_211348960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  operator delete(v26);
  uint64_t v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(void *)(v27 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

BOOL DistributeADimToNDC(unint64_t a1, const ZinIrHalParameters *a2, int64x2_t *a3)
{
  unint64_t MaxDivisor = ZinFindMaxDivisor(a1, *((void *)a2 + 48));
  a3->i64[0] = MaxDivisor;
  unint64_t v7 = a1 / MaxDivisor;
  unint64_t v8 = ZinFindMaxDivisor(v7, *((void *)a2 + 44));
  a3[2].i64[0] = v8;
  unint64_t v9 = *((void *)a2 + 46);
  unint64_t v10 = v7 / v8;
  unint64_t v11 = ZinFindMaxDivisor(v7 / v8, v9);
  a3->i64[1] = v11;
  if (v10 / v11 == 1) {
    a3[1] = vdupq_n_s64(1uLL);
  }
  return v10 / v11 == 1;
}

__CFDictionary *ZinCreateNEMatMulUnit(void **a1)
{
  *(void *)&long long v20 = *MEMORY[0x263EF8340];
  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  unint64_t v11 = &unk_26C345B80;
  if (*((char *)a1 + 399) < 0) {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a1[47], (std::string::size_type)a1[48]);
  }
  else {
    std::string __p = *(std::string *)(a1 + 47);
  }
  int v13 = *((_DWORD *)a1 + 100);
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (long long *)a1[51], (long long *)a1[52], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[52] - (unsigned char *)a1[51]) >> 3));
  long long v15 = *((_OWORD *)a1 + 27);
  unint64_t v11 = &unk_26C3500E8;
  int v16 = *((_DWORD *)a1 + 112);
  if (*((char *)a1 + 31) >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 31);
  }
  else {
    size_t v3 = (size_t)a1[2];
  }
  unint64_t v4 = &v10;
  std::string::basic_string[abi:ne180100]((uint64_t)&v10, v3 + 7);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v4 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  if (v3)
  {
    if (*((char *)a1 + 31) >= 0) {
      uint64_t v5 = (char *)(a1 + 1);
    }
    else {
      uint64_t v5 = (char *)a1[1];
    }
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, ".matmul");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v10;
  long long v15 = *((_OWORD *)a1 + 4);
  if (&v11 != a1) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v14, (std::string *)a1[5], (long long *)a1[6], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[6] - (unsigned char *)a1[5]) >> 3));
  }
  MatrixMultUnit = ZinCreateMatrixMultUnit((const ZinIrMatrixMultUnitInfo *)&v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)p_p, 0x8000100u);
  CFDictionaryAddValue(Unit, v8, MatrixMultUnit);
  CFRelease(v8);
  CFRelease(MatrixMultUnit);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = __p;
  }
  memset(&v10, 0, sizeof(v10));
  uint64_t v17 = &v10;
  char v18 = 0;
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v10.__r_.__value_.__l.__size_ = v10.__r_.__value_.__r.__words[0];
  v10.__r_.__value_.__r.__words[2] = v10.__r_.__value_.__r.__words[0] + 24;
  v10.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v10.__r_.__value_.__r.__words[2], (long long *)&v19, &v20, (std::string *)v10.__r_.__value_.__l.__data_);
  ZinCreateNEUnit((uint64_t)a1, (long long **)&v10, Unit);
  uint64_t v17 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(&v11);
  return Unit;
}

void sub_211348D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t ZinMirSetZeroPad::Run(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1331))
  {
    memset(v49, 0, sizeof(v49));
    int v50 = 1065353216;
    uint64_t v2 = *(ZinIrOpLayer ***)result;
    size_t v3 = *(ZinIrOpLayer ***)(result + 8);
    if (*(ZinIrOpLayer ***)result != v3)
    {
      uint64_t v4 = a2;
      do
      {
        uint64_t v5 = *v2;
        if (ZinIrOpLayer::IsANELayer(*v2))
        {
          uint64_t v48 = 0;
          uint64_t v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0);
          uint64_t v48 = *((void *)ZinIrTensor::GetRootTensor(v6) + 12);
          if (*((void *)v5 + 33))
          {
            uint64_t v7 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0);
            if (ZinCropOffsetUtil::HasUnalignedOutputCropX(*(_DWORD *)(v7 + 88), *(void *)(*((void *)v5 + 33) + 320), v4)&& !std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v49, &v48))
            {
              int v8 = *(_DWORD *)(*(void *)(v48 + 64) + 8);
              if (v8 == 30)
              {
                uint64_t v44 = v4;
                uint64_t v45 = 0;
                BOOL v46 = 0;
                uint64_t v47 = 0;
                int v23 = *(ZinRingBufferWriterLayer ***)(v48 + 112);
                unint64_t v24 = *(ZinRingBufferWriterLayer ***)(v48 + 120);
                if (v23 != v24)
                {
                  do
                  {
                    if (*(_DWORD *)(*((void *)*v23 + 8) + 8) == 75)
                    {
                      ZinRingBufferWriterLayer::GetRingBufferWriterChain(*v23, &v51);
                      int v25 = (ZinRingBufferWriterLayer **)v51;
                      unint64_t v26 = v52;
                      if (v51 != v52)
                      {
                        do
                        {
                          SliceInputLayer = (void *)ZinRingBufferWriterLayer::GetSliceInputLayer(*v25);
                          if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)SliceInputLayer))
                          {
                            unint64_t v28 = v46;
                            if (v46 >= v47)
                            {
                              uint64_t v31 = (v46 - v45) >> 3;
                              if ((unint64_t)(v31 + 1) >> 61) {
                                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                              }
                              unint64_t v32 = (v47 - v45) >> 2;
                              if (v32 <= v31 + 1) {
                                unint64_t v32 = v31 + 1;
                              }
                              if ((unint64_t)(v47 - v45) >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v33 = v32;
                              }
                              if (v33) {
                                uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v47, v33);
                              }
                              else {
                                uint64_t v34 = 0;
                              }
                              uint64_t v35 = &v34[8 * v31];
                              *(void *)uint64_t v35 = SliceInputLayer;
                              uint64_t v29 = v35 + 8;
                              long long v37 = v45;
                              long long v36 = v46;
                              if (v46 != v45)
                              {
                                do
                                {
                                  uint64_t v38 = *((void *)v36 - 1);
                                  v36 -= 8;
                                  *((void *)v35 - 1) = v38;
                                  v35 -= 8;
                                }
                                while (v36 != v37);
                                long long v36 = v45;
                              }
                              uint64_t v45 = v35;
                              BOOL v46 = v29;
                              uint64_t v47 = &v34[8 * v33];
                              if (v36) {
                                operator delete(v36);
                              }
                            }
                            else
                            {
                              *(void *)BOOL v46 = SliceInputLayer;
                              uint64_t v29 = v28 + 8;
                            }
                            BOOL v46 = v29;
                          }
                          else
                          {
                            if (SliceInputLayer) {
                            else
                            }
                              uint64_t v30 = 0;
                            GetANELayerWriters((uint64_t)v30, (void **)&v45);
                          }
                          ++v25;
                        }
                        while (v25 != (ZinRingBufferWriterLayer **)v26);
                        int v25 = (ZinRingBufferWriterLayer **)v51;
                      }
                      if (v25)
                      {
                        unint64_t v52 = (char *)v25;
                        operator delete(v25);
                      }
                    }
                    ++v23;
                  }
                  while (v23 != v24);
                  uint64_t v39 = v45;
                  uint64_t v40 = v46;
                  for (uint64_t i = v45; i != v40; *(void *)(*(void *)(v42 + 264) + 1496) = 0x100000001)
                  {
                    uint64_t v42 = *(void *)i;
                    i += 8;
                  }
                  if (v39)
                  {
                    BOOL v46 = v39;
                    operator delete(v39);
                  }
                }
                uint64_t v4 = v44;
              }
              else
              {
                if (v8 != 7)
                {
                  uint64_t v43 = (const char *)(v48 + 24);
                  if (*(char *)(v48 + 47) < 0) {
                    uint64_t v43 = *(const char **)v43;
                  }
                  ZinAssertImpl("Unexpected unaligned output crop on layer: %s", v43);
                }
                uint64_t v51 = 0;
                unint64_t v52 = 0;
                uint64_t v53 = 0;
                GetANELayerWriters(v48, (void **)&v51);
                unint64_t v9 = 126 - 2 * __clz((v52 - v51) >> 3);
                if (v52 == v51) {
                  uint64_t v10 = 0;
                }
                else {
                  uint64_t v10 = v9;
                }
                std::__introsort<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,false>((uint64_t)v51, (uint64_t *)v52, v10, 1);
                unint64_t v11 = (uint64_t *)v51;
                long long v12 = v52;
                int8x8_t v13 = (int8x8_t)0x100000001;
                if ((unint64_t)(v52 - v51) >= 9)
                {
                  int64_t v14 = 2;
                  if ((unint64_t)((v52 - v51) >> 3) > 2) {
                    int64_t v14 = (v52 - v51) >> 3;
                  }
                  long long v15 = (uint64_t *)(v51 + 8);
                  uint64_t v16 = *(void *)(*(void *)v51 + 360);
                  int64_t v17 = v14 - 1;
                  do
                  {
                    uint64_t v18 = *v15++;
                    v19.i64[0] = v16;
                    uint64_t v16 = *(void *)(v18 + 360);
                    v19.i64[1] = v16;
                    int8x8_t v13 = vand_s8(v13, (int8x8_t)vmovn_s64(vcgtq_s64(v19, (int64x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL))));
                    --v17;
                  }
                  while (v17);
                }
                if (v51 != v52)
                {
                  int8x8_t v20 = vbic_s8((int8x8_t)0x100000001, v13);
                  uint64_t v21 = v51;
                  do
                  {
                    uint64_t v22 = *(void *)v21;
                    v21 += 8;
                    *(int8x8_t *)(*(void *)(v22 + 264) + 1496) = v20;
                  }
                  while (v21 != v12);
                }
                if (v11)
                {
                  unint64_t v52 = (char *)v11;
                  operator delete(v11);
                }
              }
              std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v49, &v48, &v48);
            }
          }
        }
        ++v2;
      }
      while (v2 != v3);
    }
    return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v49);
  }
  return result;
}

void sub_211349228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void GetANELayerWriters(uint64_t a1, void **a2)
{
  if (!a1) {
    ZinAssertImpl("Unaligned output crops in X expects a concat.");
  }
  uint64_t v2 = *(ZinIrOpLayer ***)(a1 + 88);
  size_t v3 = *(ZinIrOpLayer ***)(a1 + 96);
  if (v2 != v3)
  {
    uint64_t v5 = (uint64_t)(a2 + 2);
    do
    {
      uint64_t v6 = *v2;
      if (ZinIrOpLayer::IsANELayer(*v2))
      {
        int v8 = (ZinIrOpLayer **)a2[1];
        unint64_t v7 = (unint64_t)a2[2];
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v11 = ((char *)v8 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = v7 - (void)*a2;
          uint64_t v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
            uint64_t v13 = v11 + 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v14);
          }
          else {
            long long v15 = 0;
          }
          uint64_t v16 = (ZinIrOpLayer **)&v15[8 * v11];
          *uint64_t v16 = v6;
          unint64_t v9 = v16 + 1;
          uint64_t v18 = (char *)*a2;
          int64_t v17 = (char *)a2[1];
          if (v17 != *a2)
          {
            do
            {
              int64x2_t v19 = (ZinIrOpLayer *)*((void *)v17 - 1);
              v17 -= 8;
              *--uint64_t v16 = v19;
            }
            while (v17 != v18);
            int64_t v17 = (char *)*a2;
          }
          *a2 = v16;
          a2[1] = v9;
          a2[2] = &v15[8 * v14];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *int v8 = v6;
          unint64_t v9 = v8 + 1;
        }
        a2[1] = v9;
      }
      else
      {
        if (v6) {
        else
        }
          uint64_t v10 = 0;
        GetANELayerWriters(v10, a2);
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  int v8 = (uint64_t *)result;
LABEL_2:
  unint64_t v9 = a2 - 1;
  uint64_t v10 = v8;
  while (1)
  {
    int v8 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v130 = *v10;
          uint64_t v131 = *(void *)((*(uint64_t (**)(void, void, void))(*(void *)*(a2 - 1) + 32))(*(a2 - 1), 0, 0)+ 104);
          if (!v131 || (uint64_t v132 = *(uint64_t **)(v131 + 40), v132 == *(uint64_t **)(v131 + 48))) {
            uint64_t v133 = 0;
          }
          else {
            uint64_t v133 = *v132;
          }
          if (*(_DWORD *)(v133 + 156) != 1) {
            goto LABEL_364;
          }
          uint64_t v235 = *(void *)(v133 + 240);
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v130 + 32))(v130, 0, 0);
          uint64_t v236 = *(void *)(result + 104);
          if (!v236 || (uint64_t v237 = *(uint64_t **)(v236 + 40), v237 == *(uint64_t **)(v236 + 48))) {
            uint64_t v238 = 0;
          }
          else {
            uint64_t v238 = *v237;
          }
          if (*(_DWORD *)(v238 + 156) != 1) {
            goto LABEL_364;
          }
          if (v235 < *(void *)(v238 + 240))
          {
            uint64_t v239 = *v10;
            *uint64_t v10 = *(a2 - 1);
            *(a2 - 1) = v239;
          }
          break;
        case 3:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v10, v10 + 1, v9);
        case 4:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v10, v10 + 1, v10 + 2, v9);
        case 5:
          return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,0>(v10, v10 + 1, v10 + 2, v10 + 3, v9);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191)
    {
      int v134 = v10 + 1;
      BOOL v136 = v10 == a2 || v134 == a2;
      if (a4)
      {
        if (v136) {
          return result;
        }
        uint64_t v137 = 0;
        unint64_t v138 = v10;
        while (1)
        {
          uint64_t v140 = *v138;
          uint64_t v139 = v138[1];
          unint64_t v138 = v134;
          uint64_t v141 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v139 + 32))(v139, 0, 0)+ 104);
          if (!v141 || (uint64_t v142 = *(uint64_t **)(v141 + 40), v142 == *(uint64_t **)(v141 + 48))) {
            uint64_t v143 = 0;
          }
          else {
            uint64_t v143 = *v142;
          }
          if (*(_DWORD *)(v143 + 156) != 1) {
            break;
          }
          uint64_t v144 = *(void *)(v143 + 240);
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v140 + 32))(v140, 0, 0);
          uint64_t v145 = *(void *)(result + 104);
          if (!v145 || (uint64_t v146 = *(uint64_t **)(v145 + 40), v146 == *(uint64_t **)(v145 + 48))) {
            uint64_t v147 = 0;
          }
          else {
            uint64_t v147 = *v146;
          }
          if (*(_DWORD *)(v147 + 156) != 1) {
            break;
          }
          if (v144 < *(void *)(v147 + 240))
          {
            uint64_t v148 = *v138;
            uint64_t v149 = v137;
            while (1)
            {
              *(uint64_t *)((char *)v10 + v149 + 8) = *(uint64_t *)((char *)v10 + v149);
              if (!v149) {
                break;
              }
              uint64_t v150 = *(uint64_t *)((char *)v10 + v149 - 8);
              uint64_t v151 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v148 + 32))(v148, 0, 0)+ 104);
              if (!v151 || (uint64_t v152 = *(uint64_t **)(v151 + 40), v152 == *(uint64_t **)(v151 + 48))) {
                uint64_t v153 = 0;
              }
              else {
                uint64_t v153 = *v152;
              }
              if (*(_DWORD *)(v153 + 156) != 1) {
                goto LABEL_364;
              }
              uint64_t v154 = *(void *)(v153 + 240);
              uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v150 + 32))(v150, 0, 0);
              uint64_t v155 = *(void *)(result + 104);
              if (!v155 || (uint64_t v156 = *(uint64_t **)(v155 + 40), v156 == *(uint64_t **)(v155 + 48))) {
                uint64_t v157 = 0;
              }
              else {
                uint64_t v157 = *v156;
              }
              if (*(_DWORD *)(v157 + 156) != 1) {
                goto LABEL_364;
              }
              v149 -= 8;
              if (v154 >= *(void *)(v157 + 240))
              {
                unint64_t v158 = (uint64_t *)((char *)v10 + v149 + 8);
                goto LABEL_221;
              }
            }
            unint64_t v158 = v10;
LABEL_221:
            *unint64_t v158 = v148;
          }
          int v134 = v138 + 1;
          v137 += 8;
          if (v138 + 1 == a2) {
            return result;
          }
        }
      }
      else
      {
        if (v136) {
          return result;
        }
        while (1)
        {
          uint64_t v241 = *v8;
          uint64_t v240 = v8[1];
          int v8 = v134;
          uint64_t v242 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v240 + 32))(v240, 0, 0)+ 104);
          if (!v242 || (uint64_t v243 = *(uint64_t **)(v242 + 40), v243 == *(uint64_t **)(v242 + 48))) {
            uint64_t v244 = 0;
          }
          else {
            uint64_t v244 = *v243;
          }
          if (*(_DWORD *)(v244 + 156) != 1) {
            break;
          }
          uint64_t v245 = *(void *)(v244 + 240);
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v241 + 32))(v241, 0, 0);
          uint64_t v246 = *(void *)(result + 104);
          if (!v246 || (uint64_t v247 = *(uint64_t **)(v246 + 40), v247 == *(uint64_t **)(v246 + 48))) {
            uint64_t v248 = 0;
          }
          else {
            uint64_t v248 = *v247;
          }
          if (*(_DWORD *)(v248 + 156) != 1) {
            break;
          }
          if (v245 < *(void *)(v248 + 240))
          {
            uint64_t v249 = *v8;
            uint64_t v250 = v8;
            do
            {
              uint64_t v251 = *(v250 - 2);
              *uint64_t v250 = *(v250 - 1);
              uint64_t v252 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v249 + 32))(v249, 0, 0)+ 104);
              if (!v252 || (uint64_t v253 = *(uint64_t **)(v252 + 40), v253 == *(uint64_t **)(v252 + 48))) {
                uint64_t v254 = 0;
              }
              else {
                uint64_t v254 = *v253;
              }
              if (*(_DWORD *)(v254 + 156) != 1) {
                goto LABEL_364;
              }
              uint64_t v255 = *(void *)(v254 + 240);
              uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v251 + 32))(v251, 0, 0);
              uint64_t v256 = *(void *)(result + 104);
              if (!v256 || (uint64_t v257 = *(uint64_t **)(v256 + 40), v257 == *(uint64_t **)(v256 + 48))) {
                uint64_t v258 = 0;
              }
              else {
                uint64_t v258 = *v257;
              }
              if (*(_DWORD *)(v258 + 156) != 1) {
                goto LABEL_364;
              }
              --v250;
            }
            while (v255 < *(void *)(v258 + 240));
            *uint64_t v250 = v249;
          }
          int v134 = v8 + 1;
          if (v8 + 1 == a2) {
            return result;
          }
        }
      }
LABEL_364:
      ZinAssertImpl("Invalid symbol type", v259);
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    unint64_t v14 = &v10[(unint64_t)v12 >> 1];
    if ((unint64_t)v11 < 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v14, v10, v9);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v10, v14, v9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v10 + 1, v14 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v10 + 2, &v10[v13 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v14 - 1, v14, &v10[v13 + 1]);
      uint64_t v15 = *v10;
      *uint64_t v10 = *v14;
      *unint64_t v14 = v15;
    }
    --a3;
    if (a4) {
      goto LABEL_22;
    }
    uint64_t v16 = *v10;
    uint64_t v17 = *(void *)((*(uint64_t (**)(void, void, void))(*(void *)*(v10 - 1) + 32))(*(v10 - 1), 0, 0)+ 104);
    if (!v17 || (uint64_t v18 = *(uint64_t **)(v17 + 40), v18 == *(uint64_t **)(v17 + 48))) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *v18;
    }
    if (*(_DWORD *)(v19 + 156) != 1) {
      goto LABEL_364;
    }
    uint64_t v20 = *(void *)(v19 + 240);
    uint64_t v21 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v16 + 32))(v16, 0, 0) + 104);
    if (!v21 || (uint64_t v22 = *(uint64_t **)(v21 + 40), v22 == *(uint64_t **)(v21 + 48))) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = *v22;
    }
    if (*(_DWORD *)(v23 + 156) != 1) {
      goto LABEL_364;
    }
    if (v20 < *(void *)(v23 + 240))
    {
LABEL_22:
      uint64_t v24 = 0;
      uint64_t v25 = *v10;
      do
      {
        uint64_t v26 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v10[v24 + 1] + 32))(v10[v24 + 1], 0, 0)+ 104);
        if (!v26 || (uint64_t v27 = *(uint64_t **)(v26 + 40), v27 == *(uint64_t **)(v26 + 48))) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = *v27;
        }
        if (*(_DWORD *)(v28 + 156) != 1) {
          goto LABEL_364;
        }
        uint64_t v29 = *(void *)(v28 + 240);
        uint64_t v30 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v25 + 32))(v25, 0, 0)
                        + 104);
        if (!v30 || (uint64_t v31 = *(uint64_t **)(v30 + 40), v31 == *(uint64_t **)(v30 + 48))) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = *v31;
        }
        if (*(_DWORD *)(v32 + 156) != 1) {
          goto LABEL_364;
        }
        ++v24;
      }
      while (v29 < *(void *)(v32 + 240));
      unint64_t v33 = &v10[v24];
      uint64_t v34 = a2;
      if (v24 != 1)
      {
        while (1)
        {
          uint64_t v35 = *--v34;
          uint64_t v36 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v35 + 32))(v35, 0, 0)
                          + 104);
          if (!v36 || (long long v37 = *(uint64_t **)(v36 + 40), v37 == *(uint64_t **)(v36 + 48))) {
            uint64_t v38 = 0;
          }
          else {
            uint64_t v38 = *v37;
          }
          if (*(_DWORD *)(v38 + 156) != 1) {
            goto LABEL_364;
          }
          uint64_t v39 = *(void *)(v38 + 240);
          uint64_t v40 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v25 + 32))(v25, 0, 0)
                          + 104);
          if (!v40 || (int v41 = *(uint64_t **)(v40 + 40), v41 == *(uint64_t **)(v40 + 48))) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = *v41;
          }
          if (*(_DWORD *)(v42 + 156) != 1) {
            goto LABEL_364;
          }
          if (v39 < *(void *)(v42 + 240)) {
            goto LABEL_60;
          }
        }
      }
      uint64_t v34 = a2;
      while (v33 < v34)
      {
        uint64_t v43 = *--v34;
        uint64_t v44 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v43 + 32))(v43, 0, 0)
                        + 104);
        if (!v44 || (uint64_t v45 = *(uint64_t **)(v44 + 40), v45 == *(uint64_t **)(v44 + 48))) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = *v45;
        }
        if (*(_DWORD *)(v46 + 156) != 1) {
          goto LABEL_364;
        }
        uint64_t v47 = *(void *)(v46 + 240);
        uint64_t v48 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v25 + 32))(v25, 0, 0)
                        + 104);
        if (!v48 || (uint64_t v49 = *(uint64_t **)(v48 + 40), v49 == *(uint64_t **)(v48 + 48))) {
          uint64_t v50 = 0;
        }
        else {
          uint64_t v50 = *v49;
        }
        if (*(_DWORD *)(v50 + 156) != 1) {
          goto LABEL_364;
        }
        if (v47 < *(void *)(v50 + 240)) {
          break;
        }
      }
LABEL_60:
      if (v33 >= v34)
      {
        uint64_t v70 = v33 - 1;
      }
      else
      {
        uint64_t v51 = v33;
        unint64_t v52 = v34;
        do
        {
          uint64_t v53 = *v51;
          uint64_t *v51 = *v52;
          uint64_t *v52 = v53;
          do
          {
            uint64_t v54 = v51[1];
            ++v51;
            uint64_t v55 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v54 + 32))(v54, 0, 0)+ 104);
            if (!v55 || (uint64_t v56 = *(uint64_t **)(v55 + 40), v56 == *(uint64_t **)(v55 + 48))) {
              uint64_t v57 = 0;
            }
            else {
              uint64_t v57 = *v56;
            }
            if (*(_DWORD *)(v57 + 156) == 1)
            {
              uint64_t v58 = *(void *)(v57 + 240);
              uint64_t v59 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v25 + 32))(v25, 0, 0)+ 104);
              if (!v59 || (uint64_t v60 = *(uint64_t **)(v59 + 40), v60 == *(uint64_t **)(v59 + 48))) {
                uint64_t v61 = 0;
              }
              else {
                uint64_t v61 = *v60;
              }
              if (*(_DWORD *)(v61 + 156) == 1) {
                continue;
              }
            }
            goto LABEL_364;
          }
          while (v58 < *(void *)(v61 + 240));
          do
          {
            uint64_t v62 = *--v52;
            uint64_t v63 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v62 + 32))(v62, 0, 0)+ 104);
            if (!v63 || (uint64_t v64 = *(uint64_t **)(v63 + 40), v64 == *(uint64_t **)(v63 + 48))) {
              uint64_t v65 = 0;
            }
            else {
              uint64_t v65 = *v64;
            }
            if (*(_DWORD *)(v65 + 156) == 1)
            {
              uint64_t v66 = *(void *)(v65 + 240);
              uint64_t v67 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v25 + 32))(v25, 0, 0)+ 104);
              if (!v67 || (uint64_t v68 = *(uint64_t **)(v67 + 40), v68 == *(uint64_t **)(v67 + 48))) {
                uint64_t v69 = 0;
              }
              else {
                uint64_t v69 = *v68;
              }
              if (*(_DWORD *)(v69 + 156) == 1) {
                continue;
              }
            }
            goto LABEL_364;
          }
          while (v66 >= *(void *)(v69 + 240));
        }
        while (v51 < v52);
        uint64_t v70 = v51 - 1;
      }
      if (v70 != v8) {
        *int v8 = *v70;
      }
      *uint64_t v70 = v25;
      if (v33 < v34) {
        goto LABEL_93;
      }
      BOOL v71 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v8, v70);
      uint64_t v10 = v70 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v70 + 1, a2);
      if (result)
      {
        a2 = v70;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_93:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,false>(v8, v70, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v70 + 1;
      }
    }
    else
    {
      uint64_t v72 = *v10;
      uint64_t v73 = *v9;
      uint64_t v74 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*v10 + 32))(*v10, 0, 0)
                      + 104);
      if (!v74 || (uint64_t v75 = *(uint64_t **)(v74 + 40), v75 == *(uint64_t **)(v74 + 48))) {
        uint64_t v76 = 0;
      }
      else {
        uint64_t v76 = *v75;
      }
      if (*(_DWORD *)(v76 + 156) != 1) {
        goto LABEL_364;
      }
      uint64_t v77 = *(void *)(v76 + 240);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v73 + 32))(v73, 0, 0);
      uint64_t v78 = *(void *)(result + 104);
      if (!v78 || (long long v79 = *(uint64_t **)(v78 + 40), v79 == *(uint64_t **)(v78 + 48))) {
        uint64_t v80 = 0;
      }
      else {
        uint64_t v80 = *v79;
      }
      if (*(_DWORD *)(v80 + 156) != 1) {
        goto LABEL_364;
      }
      if (v77 < *(void *)(v80 + 240))
      {
        while (1)
        {
          uint64_t v82 = v10[1];
          ++v10;
          uint64_t v81 = v82;
          uint64_t v83 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v72 + 32))(v72, 0, 0)
                          + 104);
          if (!v83 || (uint64_t v84 = *(uint64_t **)(v83 + 40), v84 == *(uint64_t **)(v83 + 48))) {
            uint64_t v85 = 0;
          }
          else {
            uint64_t v85 = *v84;
          }
          if (*(_DWORD *)(v85 + 156) != 1) {
            goto LABEL_364;
          }
          uint64_t v86 = *(void *)(v85 + 240);
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v81 + 32))(v81, 0, 0);
          uint64_t v87 = *(void *)(result + 104);
          if (!v87 || (uint64_t v88 = *(uint64_t **)(v87 + 40), v88 == *(uint64_t **)(v87 + 48))) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = *v88;
          }
          if (*(_DWORD *)(v89 + 156) != 1) {
            goto LABEL_364;
          }
          if (v86 < *(void *)(v89 + 240)) {
            goto LABEL_130;
          }
        }
      }
      uint64_t v90 = v10 + 1;
      do
      {
        uint64_t v10 = v90;
        if (v90 >= a2) {
          break;
        }
        uint64_t v91 = *v90;
        uint64_t v92 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v72 + 32))(v72, 0, 0)
                        + 104);
        if (!v92 || (uint64_t v93 = *(uint64_t **)(v92 + 40), v93 == *(uint64_t **)(v92 + 48))) {
          uint64_t v94 = 0;
        }
        else {
          uint64_t v94 = *v93;
        }
        if (*(_DWORD *)(v94 + 156) != 1) {
          goto LABEL_364;
        }
        uint64_t v95 = *(void *)(v94 + 240);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v91 + 32))(v91, 0, 0);
        uint64_t v96 = *(void *)(result + 104);
        if (!v96 || (long long v97 = *(uint64_t **)(v96 + 40), v97 == *(uint64_t **)(v96 + 48))) {
          uint64_t v98 = 0;
        }
        else {
          uint64_t v98 = *v97;
        }
        if (*(_DWORD *)(v98 + 156) != 1) {
          goto LABEL_364;
        }
        uint64_t v99 = *(void *)(v98 + 240);
        uint64_t v90 = v10 + 1;
      }
      while (v95 >= v99);
LABEL_130:
      uint64_t v100 = a2;
      if (v10 < a2)
      {
        uint64_t v100 = a2;
        do
        {
          uint64_t v102 = *--v100;
          uint64_t v101 = v102;
          uint64_t v103 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v72 + 32))(v72, 0, 0)
                           + 104);
          if (!v103 || (char v104 = *(uint64_t **)(v103 + 40), v104 == *(uint64_t **)(v103 + 48))) {
            uint64_t v105 = 0;
          }
          else {
            uint64_t v105 = *v104;
          }
          if (*(_DWORD *)(v105 + 156) != 1) {
            goto LABEL_364;
          }
          uint64_t v106 = *(void *)(v105 + 240);
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v101 + 32))(v101, 0, 0);
          uint64_t v107 = *(void *)(result + 104);
          if (!v107 || (long long v108 = *(uint64_t **)(v107 + 40), v108 == *(uint64_t **)(v107 + 48))) {
            uint64_t v109 = 0;
          }
          else {
            uint64_t v109 = *v108;
          }
          if (*(_DWORD *)(v109 + 156) != 1) {
            goto LABEL_364;
          }
        }
        while (v106 < *(void *)(v109 + 240));
      }
LABEL_167:
      if (v10 < v100)
      {
        uint64_t v110 = *v10;
        *uint64_t v10 = *v100;
        *uint64_t v100 = v110;
        do
        {
          uint64_t v112 = v10[1];
          ++v10;
          uint64_t v111 = v112;
          uint64_t v113 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v72 + 32))(v72, 0, 0)
                           + 104);
          if (!v113 || (long long v114 = *(uint64_t **)(v113 + 40), v114 == *(uint64_t **)(v113 + 48))) {
            uint64_t v115 = 0;
          }
          else {
            uint64_t v115 = *v114;
          }
          if (*(_DWORD *)(v115 + 156) == 1)
          {
            uint64_t v116 = *(void *)(v115 + 240);
            uint64_t v117 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v111 + 32))(v111, 0, 0)+ 104);
            if (!v117 || (uint64_t v118 = *(uint64_t **)(v117 + 40), v118 == *(uint64_t **)(v117 + 48))) {
              uint64_t v119 = 0;
            }
            else {
              uint64_t v119 = *v118;
            }
            if (*(_DWORD *)(v119 + 156) == 1) {
              continue;
            }
          }
          goto LABEL_364;
        }
        while (v116 >= *(void *)(v119 + 240));
        while (1)
        {
          uint64_t v121 = *--v100;
          uint64_t v120 = v121;
          uint64_t v122 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v72 + 32))(v72, 0, 0)
                           + 104);
          if (!v122 || (uint64_t v123 = *(uint64_t **)(v122 + 40), v123 == *(uint64_t **)(v122 + 48))) {
            uint64_t v124 = 0;
          }
          else {
            uint64_t v124 = *v123;
          }
          if (*(_DWORD *)(v124 + 156) != 1) {
            goto LABEL_364;
          }
          uint64_t v125 = *(void *)(v124 + 240);
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v120 + 32))(v120, 0, 0);
          uint64_t v126 = *(void *)(result + 104);
          if (!v126 || (uint64_t v127 = *(uint64_t **)(v126 + 40), v127 == *(uint64_t **)(v126 + 48))) {
            uint64_t v128 = 0;
          }
          else {
            uint64_t v128 = *v127;
          }
          if (*(_DWORD *)(v128 + 156) != 1) {
            goto LABEL_364;
          }
          if (v125 >= *(void *)(v128 + 240)) {
            goto LABEL_167;
          }
        }
      }
      uint64_t v129 = v10 - 1;
      BOOL v4 = v10 - 1 >= v8;
      BOOL v5 = v10 - 1 == v8;
      if (v10 - 1 != v8) {
        *int v8 = *v129;
      }
      a4 = 0;
      *uint64_t v129 = v72;
    }
  }
  if (v10 != a2)
  {
    unint64_t v259 = (char *)a2 - (char *)v10;
    int64_t v159 = (unint64_t)(v12 - 2) >> 1;
    int64_t v160 = v159;
    while (1)
    {
      int64_t v161 = v160;
      if (v159 >= v160)
      {
        int64_t v260 = v160;
        uint64_t v162 = (2 * v160) | 1;
        long long v163 = &v8[v162];
        if (2 * v160 + 2 < v12)
        {
          uint64_t v164 = v163[1];
          uint64_t v165 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*v163 + 32))(*v163, 0, 0)+ 104);
          if (!v165 || (int v166 = *(uint64_t **)(v165 + 40), v166 == *(uint64_t **)(v165 + 48))) {
            uint64_t v167 = 0;
          }
          else {
            uint64_t v167 = *v166;
          }
          if (*(_DWORD *)(v167 + 156) != 1) {
            goto LABEL_364;
          }
          uint64_t v168 = *(void *)(v167 + 240);
          uint64_t v169 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v164 + 32))(v164, 0, 0)+ 104);
          if (!v169 || (uint64_t v170 = *(uint64_t **)(v169 + 40), v170 == *(uint64_t **)(v169 + 48))) {
            uint64_t v171 = 0;
          }
          else {
            uint64_t v171 = *v170;
          }
          if (*(_DWORD *)(v171 + 156) != 1) {
            goto LABEL_364;
          }
          if (v168 < *(void *)(v171 + 240))
          {
            ++v163;
            uint64_t v162 = 2 * v161 + 2;
          }
        }
        char v172 = &v8[v161];
        uint64_t v173 = *v172;
        uint64_t v174 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*v163 + 32))(*v163, 0, 0)+ 104);
        if (!v174 || (uint64_t v175 = *(uint64_t **)(v174 + 40), v175 == *(uint64_t **)(v174 + 48))) {
          uint64_t v176 = 0;
        }
        else {
          uint64_t v176 = *v175;
        }
        if (*(_DWORD *)(v176 + 156) != 1) {
          goto LABEL_364;
        }
        uint64_t v177 = *(void *)(v176 + 240);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v173 + 32))(v173, 0, 0);
        uint64_t v178 = *(void *)(result + 104);
        if (!v178 || (long long v179 = *(uint64_t **)(v178 + 40), v179 == *(uint64_t **)(v178 + 48))) {
          uint64_t v180 = 0;
        }
        else {
          uint64_t v180 = *v179;
        }
        if (*(_DWORD *)(v180 + 156) != 1) {
          goto LABEL_364;
        }
        if (v177 >= *(void *)(v180 + 240))
        {
          uint64_t v181 = *v172;
          do
          {
            long long v182 = v163;
            *char v172 = *v163;
            if (v159 < v162) {
              break;
            }
            uint64_t v183 = (2 * v162) | 1;
            long long v163 = &v8[v183];
            uint64_t v184 = 2 * v162 + 2;
            if (v184 < v12)
            {
              uint64_t v185 = v163[1];
              uint64_t v186 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*v163 + 32))(*v163, 0, 0)+ 104);
              if (!v186 || (long long v187 = *(uint64_t **)(v186 + 40), v187 == *(uint64_t **)(v186 + 48))) {
                uint64_t v188 = 0;
              }
              else {
                uint64_t v188 = *v187;
              }
              if (*(_DWORD *)(v188 + 156) != 1) {
                goto LABEL_364;
              }
              uint64_t v261 = *(void *)(v188 + 240);
              uint64_t v189 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v185 + 32))(v185, 0, 0)+ 104);
              if (!v189 || (uint64_t v190 = *(uint64_t **)(v189 + 40), v190 == *(uint64_t **)(v189 + 48))) {
                uint64_t v191 = 0;
              }
              else {
                uint64_t v191 = *v190;
              }
              if (*(_DWORD *)(v191 + 156) != 1) {
                goto LABEL_364;
              }
              if (v261 >= *(void *)(v191 + 240))
              {
                uint64_t v162 = v183;
              }
              else
              {
                ++v163;
                uint64_t v162 = v184;
              }
            }
            else
            {
              uint64_t v162 = (2 * v162) | 1;
            }
            uint64_t v192 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*v163 + 32))(*v163, 0, 0)+ 104);
            if (!v192 || (uint64_t v193 = *(uint64_t **)(v192 + 40), v193 == *(uint64_t **)(v192 + 48))) {
              uint64_t v194 = 0;
            }
            else {
              uint64_t v194 = *v193;
            }
            if (*(_DWORD *)(v194 + 156) != 1) {
              goto LABEL_364;
            }
            uint64_t v195 = *(void *)(v194 + 240);
            uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v181 + 32))(v181, 0, 0);
            uint64_t v196 = *(void *)(result + 104);
            if (!v196 || (uint64_t v197 = *(uint64_t **)(v196 + 40), v197 == *(uint64_t **)(v196 + 48))) {
              uint64_t v198 = 0;
            }
            else {
              uint64_t v198 = *v197;
            }
            if (*(_DWORD *)(v198 + 156) != 1) {
              goto LABEL_364;
            }
            char v172 = v182;
          }
          while (v195 >= *(void *)(v198 + 240));
          *long long v182 = v181;
          int64_t v161 = v260;
        }
      }
      int64_t v160 = v161 - 1;
      if (!v161)
      {
        uint64_t v199 = v259 >> 3;
        while (1)
        {
          uint64_t v200 = 0;
          uint64_t v262 = *v8;
          uint64_t v201 = v8;
          do
          {
            uint64_t v202 = &v201[v200 + 1];
            uint64_t v203 = (2 * v200) | 1;
            uint64_t v204 = 2 * v200 + 2;
            if (v204 < v199)
            {
              uint64_t v205 = v201[v200 + 2];
              uint64_t v206 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*v202 + 32))(*v202, 0, 0)+ 104);
              if (!v206 || (uint64_t v207 = *(uint64_t **)(v206 + 40), v207 == *(uint64_t **)(v206 + 48))) {
                uint64_t v208 = 0;
              }
              else {
                uint64_t v208 = *v207;
              }
              if (*(_DWORD *)(v208 + 156) != 1) {
                goto LABEL_364;
              }
              uint64_t v209 = *(void *)(v208 + 240);
              uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v205 + 32))(v205, 0, 0);
              uint64_t v210 = *(void *)(result + 104);
              if (!v210 || (long long v211 = *(uint64_t **)(v210 + 40), v211 == *(uint64_t **)(v210 + 48))) {
                uint64_t v212 = 0;
              }
              else {
                uint64_t v212 = *v211;
              }
              if (*(_DWORD *)(v212 + 156) != 1) {
                goto LABEL_364;
              }
              if (v209 < *(void *)(v212 + 240))
              {
                ++v202;
                uint64_t v203 = v204;
              }
            }
            *uint64_t v201 = *v202;
            uint64_t v201 = v202;
            uint64_t v200 = v203;
          }
          while (v203 <= (uint64_t)((unint64_t)(v199 - 2) >> 1));
          long long v213 = a2 - 1;
          BOOL v5 = v202 == --a2;
          if (v5)
          {
            *uint64_t v202 = v262;
          }
          else
          {
            *uint64_t v202 = *v213;
            uint64_t *v213 = v262;
            uint64_t v214 = (char *)v202 - (char *)v8 + 8;
            if (v214 >= 9)
            {
              unint64_t v215 = (((unint64_t)v214 >> 3) - 2) >> 1;
              unint64_t v216 = &v8[v215];
              uint64_t v217 = *v202;
              uint64_t v218 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*v216 + 32))(*v216, 0, 0)+ 104);
              if (!v218 || (unint64_t v219 = *(uint64_t **)(v218 + 40), v219 == *(uint64_t **)(v218 + 48))) {
                uint64_t v220 = 0;
              }
              else {
                uint64_t v220 = *v219;
              }
              if (*(_DWORD *)(v220 + 156) != 1) {
                goto LABEL_364;
              }
              uint64_t v221 = *(void *)(v220 + 240);
              uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v217 + 32))(v217, 0, 0);
              uint64_t v222 = *(void *)(result + 104);
              if (!v222 || (unint64_t v223 = *(uint64_t **)(v222 + 40), v223 == *(uint64_t **)(v222 + 48))) {
                uint64_t v224 = 0;
              }
              else {
                uint64_t v224 = *v223;
              }
              if (*(_DWORD *)(v224 + 156) != 1) {
                goto LABEL_364;
              }
              if (v221 < *(void *)(v224 + 240))
              {
                uint64_t v225 = *v202;
                do
                {
                  uint64_t v226 = v216;
                  *uint64_t v202 = *v216;
                  if (!v215) {
                    break;
                  }
                  unint64_t v215 = (v215 - 1) >> 1;
                  unint64_t v216 = &v8[v215];
                  uint64_t v227 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*v216 + 32))(*v216, 0, 0)+ 104);
                  if (!v227 || (unint64_t v228 = *(uint64_t **)(v227 + 40), v228 == *(uint64_t **)(v227 + 48))) {
                    uint64_t v229 = 0;
                  }
                  else {
                    uint64_t v229 = *v228;
                  }
                  if (*(_DWORD *)(v229 + 156) != 1) {
                    goto LABEL_364;
                  }
                  uint64_t v230 = *(void *)(v229 + 240);
                  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v225 + 32))(v225, 0, 0);
                  uint64_t v231 = *(void *)(result + 104);
                  if (!v231 || (unint64_t v232 = *(uint64_t **)(v231 + 40), v232 == *(uint64_t **)(v231 + 48))) {
                    uint64_t v233 = 0;
                  }
                  else {
                    uint64_t v233 = *v232;
                  }
                  if (*(_DWORD *)(v233 + 156) != 1) {
                    goto LABEL_364;
                  }
                  uint64_t v202 = v226;
                }
                while (v230 < *(void *)(v233 + 240));
                *uint64_t v226 = v225;
              }
            }
          }
          if (v199-- <= 2) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a2, a3, a4);
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a5 + 32))(*a5, 0, 0) + 104);
  if (!v11 || (uint64_t v12 = *(uint64_t **)(v11 + 40), v12 == *(uint64_t **)(v11 + 48))) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *v12;
  }
  if (*(_DWORD *)(v13 + 156) != 1) {
    goto LABEL_47;
  }
  uint64_t v14 = *(void *)(v13 + 240);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v10 + 32))(v10, 0, 0);
  uint64_t v16 = *(void *)(result + 104);
  if (!v16 || (uint64_t v17 = *(uint64_t **)(v16 + 40), v17 == *(uint64_t **)(v16 + 48))) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *v17;
  }
  if (*(_DWORD *)(v18 + 156) != 1) {
    goto LABEL_47;
  }
  if (v14 >= *(void *)(v18 + 240)) {
    return result;
  }
  uint64_t v19 = *a4;
  *a4 = *a5;
  *a5 = v19;
  uint64_t v20 = *a3;
  uint64_t v21 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a4 + 32))(*a4, 0, 0) + 104);
  if (!v21 || (uint64_t v22 = *(uint64_t **)(v21 + 40), v22 == *(uint64_t **)(v21 + 48))) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *v22;
  }
  if (*(_DWORD *)(v23 + 156) != 1) {
    goto LABEL_47;
  }
  uint64_t v24 = *(void *)(v23 + 240);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v20 + 32))(v20, 0, 0);
  uint64_t v25 = *(void *)(result + 104);
  if (!v25 || (uint64_t v26 = *(uint64_t **)(v25 + 40), v26 == *(uint64_t **)(v25 + 48))) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = *v26;
  }
  if (*(_DWORD *)(v27 + 156) != 1) {
    goto LABEL_47;
  }
  if (v24 >= *(void *)(v27 + 240)) {
    return result;
  }
  uint64_t v28 = *a3;
  *a3 = *a4;
  *a4 = v28;
  uint64_t v29 = *a2;
  uint64_t v30 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a3 + 32))(*a3, 0, 0) + 104);
  if (!v30 || (uint64_t v31 = *(uint64_t **)(v30 + 40), v31 == *(uint64_t **)(v30 + 48))) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = *v31;
  }
  if (*(_DWORD *)(v32 + 156) != 1) {
    goto LABEL_47;
  }
  uint64_t v33 = *(void *)(v32 + 240);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v29 + 32))(v29, 0, 0);
  uint64_t v34 = *(void *)(result + 104);
  if (!v34 || (uint64_t v35 = *(uint64_t **)(v34 + 40), v35 == *(uint64_t **)(v34 + 48))) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = *v35;
  }
  if (*(_DWORD *)(v36 + 156) != 1) {
    goto LABEL_47;
  }
  if (v33 >= *(void *)(v36 + 240)) {
    return result;
  }
  uint64_t v37 = *a2;
  *a2 = *a3;
  *a3 = v37;
  uint64_t v38 = *a1;
  uint64_t v39 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a2 + 32))(*a2, 0, 0) + 104);
  if (!v39 || (uint64_t v40 = *(uint64_t **)(v39 + 40), v40 == *(uint64_t **)(v39 + 48))) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = *v40;
  }
  if (*(_DWORD *)(v41 + 156) != 1
    || ((uint64_t v42 = *(void *)(v41 + 240),
         uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v38 + 32))(v38, 0, 0),
         (uint64_t v43 = *(void *)(result + 104)) == 0)
     || (uint64_t v44 = *(uint64_t **)(v43 + 40), v44 == *(uint64_t **)(v43 + 48))
      ? (uint64_t v45 = 0)
      : (uint64_t v45 = *v44),
        *(_DWORD *)(v45 + 156) != 1))
  {
LABEL_47:
    ZinAssertImpl("Invalid symbol type");
  }
  if (v42 < *(void *)(v45 + 240))
  {
    uint64_t v46 = *a1;
    *a1 = *a2;
    *a2 = v46;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a2 + 32))(*a2, 0, 0) + 104);
  if (!v7 || (int v8 = *(uint64_t **)(v7 + 40), v8 == *(uint64_t **)(v7 + 48))) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *v8;
  }
  if (*(_DWORD *)(v9 + 156) != 1) {
    goto LABEL_60;
  }
  uint64_t v10 = *(void *)(v9 + 240);
  uint64_t v11 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v6 + 32))(v6, 0, 0) + 104);
  if (!v11 || (uint64_t v12 = *(uint64_t **)(v11 + 40), v12 == *(uint64_t **)(v11 + 48))) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *v12;
  }
  if (*(_DWORD *)(v13 + 156) != 1) {
    goto LABEL_60;
  }
  uint64_t v14 = *(void *)(v13 + 240);
  uint64_t v15 = *a2;
  uint64_t v16 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a3 + 32))(*a3, 0, 0) + 104);
  if (v10 < v14)
  {
    if (v16)
    {
      uint64_t v17 = *(uint64_t **)(v16 + 40);
      if (v17 == *(uint64_t **)(v16 + 48)) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = *v17;
      }
    }
    if (*(_DWORD *)(v16 + 156) == 1)
    {
      uint64_t v19 = *(void *)(v16 + 240);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v15 + 32))(v15, 0, 0);
      uint64_t v21 = *(void *)(result + 104);
      if (!v21 || (uint64_t v22 = *(uint64_t **)(v21 + 40), v22 == *(uint64_t **)(v21 + 48))) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = *v22;
      }
      if (*(_DWORD *)(v23 + 156) == 1)
      {
        uint64_t v24 = *a1;
        if (v19 < *(void *)(v23 + 240))
        {
          *a1 = *a3;
          *a3 = v24;
          return result;
        }
        *a1 = *a2;
        *a2 = v24;
        uint64_t v25 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a3 + 32))(*a3, 0, 0)
                        + 104);
        if (!v25 || (uint64_t v26 = *(uint64_t **)(v25 + 40), v26 == *(uint64_t **)(v25 + 48))) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = *v26;
        }
        if (*(_DWORD *)(v27 + 156) == 1)
        {
          uint64_t v28 = *(void *)(v27 + 240);
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v24 + 32))(v24, 0, 0);
          uint64_t v29 = *(void *)(result + 104);
          if (!v29 || (uint64_t v30 = *(uint64_t **)(v29 + 40), v30 == *(uint64_t **)(v29 + 48))) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = *v30;
          }
          if (*(_DWORD *)(v31 + 156) == 1)
          {
            if (v28 < *(void *)(v31 + 240))
            {
              uint64_t v32 = *a2;
              *a2 = *a3;
              *a3 = v32;
            }
            return result;
          }
        }
      }
    }
LABEL_60:
    ZinAssertImpl("Invalid symbol type");
  }
  if (v16)
  {
    uint64_t v18 = *(uint64_t **)(v16 + 40);
    if (v18 == *(uint64_t **)(v16 + 48)) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *v18;
    }
  }
  if (*(_DWORD *)(v16 + 156) != 1) {
    goto LABEL_60;
  }
  uint64_t v33 = *(void *)(v16 + 240);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v15 + 32))(v15, 0, 0);
  uint64_t v34 = *(void *)(result + 104);
  if (!v34 || (uint64_t v35 = *(uint64_t **)(v34 + 40), v35 == *(uint64_t **)(v34 + 48))) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = *v35;
  }
  if (*(_DWORD *)(v36 + 156) != 1) {
    goto LABEL_60;
  }
  if (v33 >= *(void *)(v36 + 240)) {
    return result;
  }
  uint64_t v37 = *a2;
  *a2 = *a3;
  *a3 = v37;
  uint64_t v38 = *a1;
  uint64_t v39 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a2 + 32))(*a2, 0, 0) + 104);
  if (!v39 || (uint64_t v40 = *(uint64_t **)(v39 + 40), v40 == *(uint64_t **)(v39 + 48))) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = *v40;
  }
  if (*(_DWORD *)(v41 + 156) != 1) {
    goto LABEL_60;
  }
  uint64_t v42 = *(void *)(v41 + 240);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v38 + 32))(v38, 0, 0);
  uint64_t v43 = *(void *)(result + 104);
  if (!v43 || (uint64_t v44 = *(uint64_t **)(v43 + 40), v44 == *(uint64_t **)(v43 + 48))) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = *v44;
  }
  if (*(_DWORD *)(v45 + 156) != 1) {
    goto LABEL_60;
  }
  if (v42 < *(void *)(v45 + 240))
  {
    uint64_t v46 = *a1;
    *a1 = *a2;
    *a2 = v46;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *a1;
      uint64_t v7 = *(void *)((*(uint64_t (**)(void, void, void))(*(void *)*(a2 - 1) + 32))(*(a2 - 1), 0, 0)+ 104);
      if (!v7 || (int v8 = *(uint64_t **)(v7 + 40), v8 == *(uint64_t **)(v7 + 48))) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = *v8;
      }
      if (*(_DWORD *)(v9 + 156) != 1) {
        goto LABEL_50;
      }
      uint64_t v33 = *(void *)(v9 + 240);
      uint64_t v34 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v6 + 32))(v6, 0, 0) + 104);
      if (!v34 || (uint64_t v35 = *(uint64_t **)(v34 + 40), v35 == *(uint64_t **)(v34 + 48))) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = *v35;
      }
      if (*(_DWORD *)(v36 + 156) != 1) {
        goto LABEL_50;
      }
      if (v33 < *(void *)(v36 + 240))
      {
        uint64_t v37 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v37;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a1 + 1, a1 + 2);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *v10;
    uint64_t v15 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*v11 + 32))(*v11, 0, 0) + 104);
    if (!v15 || (uint64_t v16 = *(uint64_t **)(v15 + 40), v16 == *(uint64_t **)(v15 + 48))) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = *v16;
    }
    if (*(_DWORD *)(v17 + 156) != 1
      || ((uint64_t v18 = *(void *)(v17 + 240),
           (uint64_t v19 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v14 + 32))(v14, 0, 0)+ 104)) == 0)|| (v20 = *(uint64_t **)(v19 + 40), v20 == *(uint64_t **)(v19 + 48))? (v21 = 0): (v21 = *v20), *(_DWORD *)(v21 + 156) != 1))
    {
LABEL_50:
      ZinAssertImpl("Invalid symbol type");
    }
    if (v18 < *(void *)(v21 + 240))
    {
      uint64_t v22 = *v11;
      uint64_t v23 = v12;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v23 + 24) = *(uint64_t *)((char *)a1 + v23 + 16);
        if (v23 == -16) {
          break;
        }
        uint64_t v24 = *(uint64_t *)((char *)a1 + v23 + 8);
        uint64_t v25 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v22 + 32))(v22, 0, 0)
                        + 104);
        if (!v25 || (uint64_t v26 = *(uint64_t **)(v25 + 40), v26 == *(uint64_t **)(v25 + 48))) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = *v26;
        }
        if (*(_DWORD *)(v27 + 156) != 1) {
          goto LABEL_50;
        }
        uint64_t v28 = *(void *)(v27 + 240);
        uint64_t v29 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v24 + 32))(v24, 0, 0)
                        + 104);
        if (!v29 || (uint64_t v30 = *(uint64_t **)(v29 + 40), v30 == *(uint64_t **)(v29 + 48))) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = *v30;
        }
        if (*(_DWORD *)(v31 + 156) != 1) {
          goto LABEL_50;
        }
        v23 -= 8;
        if (v28 >= *(void *)(v31 + 240))
        {
          uint64_t v32 = (uint64_t *)((char *)a1 + v23 + 24);
          goto LABEL_33;
        }
      }
      uint64_t v32 = a1;
LABEL_33:
      *uint64_t v32 = v22;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a2, a3);
  uint64_t v8 = *a3;
  uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a4 + 32))(*a4, 0, 0) + 104);
  if (!v9 || (uint64_t v10 = *(uint64_t **)(v9 + 40), v10 == *(uint64_t **)(v9 + 48))) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *v10;
  }
  if (*(_DWORD *)(v11 + 156) != 1) {
    goto LABEL_36;
  }
  uint64_t v12 = *(void *)(v11 + 240);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 32))(v8, 0, 0);
  uint64_t v14 = *(void *)(result + 104);
  if (!v14 || (uint64_t v15 = *(uint64_t **)(v14 + 40), v15 == *(uint64_t **)(v14 + 48))) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *v15;
  }
  if (*(_DWORD *)(v16 + 156) != 1) {
    goto LABEL_36;
  }
  if (v12 >= *(void *)(v16 + 240)) {
    return result;
  }
  uint64_t v17 = *a3;
  *a3 = *a4;
  *a4 = v17;
  uint64_t v18 = *a2;
  uint64_t v19 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a3 + 32))(*a3, 0, 0) + 104);
  if (!v19 || (uint64_t v20 = *(uint64_t **)(v19 + 40), v20 == *(uint64_t **)(v19 + 48))) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *v20;
  }
  if (*(_DWORD *)(v21 + 156) != 1) {
    goto LABEL_36;
  }
  uint64_t v22 = *(void *)(v21 + 240);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v18 + 32))(v18, 0, 0);
  uint64_t v23 = *(void *)(result + 104);
  if (!v23 || (uint64_t v24 = *(uint64_t **)(v23 + 40), v24 == *(uint64_t **)(v23 + 48))) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *v24;
  }
  if (*(_DWORD *)(v25 + 156) != 1) {
    goto LABEL_36;
  }
  if (v22 >= *(void *)(v25 + 240)) {
    return result;
  }
  uint64_t v26 = *a2;
  *a2 = *a3;
  *a3 = v26;
  uint64_t v27 = *a1;
  uint64_t v28 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)*a2 + 32))(*a2, 0, 0) + 104);
  if (!v28 || (uint64_t v29 = *(uint64_t **)(v28 + 40), v29 == *(uint64_t **)(v28 + 48))) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *v29;
  }
  if (*(_DWORD *)(v30 + 156) != 1
    || ((uint64_t v31 = *(void *)(v30 + 240),
         uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v27 + 32))(v27, 0, 0),
         (uint64_t v32 = *(void *)(result + 104)) == 0)
     || (uint64_t v33 = *(uint64_t **)(v32 + 40), v33 == *(uint64_t **)(v32 + 48))
      ? (uint64_t v34 = 0)
      : (uint64_t v34 = *v33),
        *(_DWORD *)(v34 + 156) != 1))
  {
LABEL_36:
    ZinAssertImpl("Invalid symbol type");
  }
  if (v31 < *(void *)(v34 + 240))
  {
    uint64_t v35 = *a1;
    *a1 = *a2;
    *a2 = v35;
  }
  return result;
}

BOOL ZinCodegen::SetSecondarySourceDMA<17u>(ZinIrTensor *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, char a8, char a9, char a10, uint64_t a11)
{
  uint64_t v83 = a2;
  uint64_t v11 = *(void *)(a3 + 96 * a4 + 752);
  if (*(_DWORD *)(v11 + 156) != 1)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetResultDMA<7u>(result, v22, v23, v24, v25, v26, v27, v28);
    return 0;
  }
  uint64_t BarIdFromDynamicOffsetInfoOrSection = ZinIrSymbol::GetBarIdFromDynamicOffsetInfoOrSection((ZinIrSymbol *)v11);
  int v19 = *(_DWORD *)(v11 + 208);
  ZinAneTd<17u>::SetL2Src2DmaFormat(a2, v19);
  if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v11)
    && ZinIrSymbol::GetMemType((ZinIrSymbol *)v11) != 1)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetPrimarySourceDMA<7u>(result, v36, v37, v38, v39, v40, v41, v42);
    return 0;
  }
  if (*(_DWORD *)(v11 + 156) != 1)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetPrimarySourceDMA<7u>(result, v29, v30, v31, v32, v33, v34, v35);
    return 0;
  }
  if (!ZinIrSection::HasValidBarId(*(ZinIrSection **)(v11 + 8)))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetUniversalCompressionForSecondarySource<7u>(result, v43, v44, v45, v46, v47, v48, v49);
    return 0;
  }
  ZinAneTdHw_v17::AddRelocInfo((uint64_t *)(a2 + 8), v11 + 160, 4938, BarIdFromDynamicOffsetInfoOrSection, 1, 1, 0, 0);
  *(_DWORD *)(a2 + 608) = *(_DWORD *)(a2 + 608) & 0xFFFFFF0F | (16
                                                              * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 1, *(_DWORD *)(a3 + 1420)) & 0xF));
  *(_DWORD *)(a2 + 616) = *(_DWORD *)(a2 + 616) & 0xFFFFFFF0 | ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 2, *(_DWORD *)(a3 + 1424)) & 0xF;
  *(_DWORD *)(a2 + 616) = *(_DWORD *)(a2 + 616) & 0xFFFFFF0F | (16
                                                              * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 3, *(_DWORD *)(a3 + 1428)) & 0xF));
  switch(v19)
  {
    case 1:
      unsigned int v20 = *(_DWORD *)(a2 + 712) & 0xFFFFCFFC | 0x1000;
      break;
    case 2:
      unsigned int v20 = *(_DWORD *)(a2 + 712) & 0xFFFFCFFC;
      break;
    case 3:
      unsigned int v50 = *(_DWORD *)(a2 + 712) & 0xFFFFCFCC;
      int v51 = 8241;
      goto LABEL_32;
    case 4:
      unsigned int v20 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC | 1;
      break;
    case 5:
      unsigned int v50 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC;
      int v51 = 257;
      goto LABEL_32;
    case 6:
      unsigned int v50 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC;
      int v51 = 17;
      goto LABEL_32;
    case 7:
      unsigned int v50 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC;
      int v51 = 273;
      goto LABEL_32;
    case 8:
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      ZinAneTd<4u>::HandleTileDmaSrcConfig(result, v52, v53, v54, v55, v56, v57, v58);
      return 0;
    case 9:
      unsigned int v59 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC;
      if (!a11 && !a10) {
        goto LABEL_30;
      }
      int v60 = 4401;
      goto LABEL_34;
    case 10:
      unsigned int v59 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC;
      if (a11 || a10) {
        int v60 = 305;
      }
      else {
LABEL_30:
      }
        int v60 = 8497;
LABEL_34:
      unsigned int v20 = v59 | v60;
      break;
    case 11:
      unsigned int v50 = *(_DWORD *)(a2 + 712) & 0xFFFFFFCF;
      int v51 = 12547;
LABEL_32:
      unsigned int v20 = v50 | v51;
      break;
    default:
      return 0;
  }
  *(_DWORD *)(a2 + 712) = v20;
  unint64_t v61 = ZinTensorDescriptorDmaInterleave(v11 + 208);
  *(_DWORD *)(a2 + 712) = *(_DWORD *)(a2 + 712) & 0xF0FFFFFF | ((v61 & 0xF) << 24);
  BOOL result = CheckRegValueRange(v61, (unsigned int *)(*(void *)(a2 + 1416) + 632));
  if (result)
  {
    uint64_t v62 = *(void *)(a3 + 840);
    uint64_t v63 = *(void *)(a3 + 832);
    uint64_t v64 = *(void *)(a3 + 824);
    unint64_t v65 = *(void *)(a3 + 816) / a6;
    *(_DWORD *)(a2 + 652) = *(_DWORD *)(a2 + 652) & 0x3F | (v65 << 6);
    BOOL result = CheckRegValueRange(v65, (unsigned int *)(*(void *)(a2 + 1416) + 480));
    if (result)
    {
      *(_DWORD *)(a2 + 656) = *(_DWORD *)(a2 + 656) & 0x3F | ((v64 / a6) << 6);
      BOOL result = CheckRegValueRange(v64 / a6, (unsigned int *)(*(void *)(a2 + 1416) + 488));
      if (result)
      {
        *(_DWORD *)(a2 + 66std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a2 + 660) & 0x3F | ((v63 / a6) << 6);
        BOOL result = CheckRegValueRange(v63 / a6, (unsigned int *)(*(void *)(a2 + 1416) + 496));
        if (result)
        {
          *(_DWORD *)(a2 + 664) = *(_DWORD *)(a2 + 664) & 0x3F | ((v62 / a6) << 6);
          BOOL result = CheckRegValueRange(v62 / a6, (unsigned int *)(*(void *)(a2 + 1416) + 504));
          if (result)
          {
            uint64_t v66 = *(void *)(a3 + 848);
            ZinCodegen::SetDmaWrap<17u>(a2, v66);
            ZinIrSymbol::GetWrapInfo(v66, v81);
            if (v82) {
              ZinAneTd<17u>::SetTileDmaSrc2WrapCfg(a2, v81[0]);
            }
            if ((a8 & 1) == 0)
            {
              *(_DWORD *)(a2 + 608) |= 1u;
              if ((a9 & 1) == 0)
              {
                *(_DWORD *)(a2 + 944) = *(_DWORD *)(a2 + 944) & 0xFFFFF0FF | ((v61 & 0xF) << 8);
                BOOL result = CheckRegValueRange(v61, (unsigned int *)(*(void *)(a2 + 1416) + 632));
                if (!result) {
                  return result;
                }
                ZinAneTd<17u>::SetTileDmaSrc2CropOffset(a2, *(_DWORD *)(v11 + 240), *(_DWORD *)(v11 + 232));
              }
            }
            if (!ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808))) {
              return 1;
            }
            uint64_t v67 = (char *)ZinIrTensor::GetRootTensor(a1) + 48;
            int v68 = *(_DWORD *)(a3 + 888);
            int v69 = *(_DWORD *)(a3 + 892);
            int v70 = *(_DWORD *)(v11 + 232);
            int v71 = *(_DWORD *)(a3 + 896);
            int IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808));
            if (ZinCodegen::SetUniversalCompressionForSecondarySource<17u>((void *)a3, (uint64_t)v67, v68, v69, &v83, v71, IsCompressed, v70, a7))
            {
              ZinAneTd<17u>::SetL2Src2CfgForCompression(v83, v69);
              ZinAneTd<17u>::SetL2Src2OffsetYlsbsFromCropOffsetY(v83);
              return 1;
            }
            BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (result)
            {
              ZinCodegen::SetSecondarySourceDMA<17u>(result, v73, v74, v75, v76, v77, v78, v79);
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void ZinCodegen::SetSecondarySourceDMA<17u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

__CFDictionary *ZinCreateInputViewUnit(const ZinIrInputViewUnitInfo *a1)
{
  Unit = ZinCreateUnit(a1);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFNumberRef v5 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 80);
  CFDictionaryAddValue(Mutable, @"Offset", v5);
  CFRelease(v5);
  CFNumberRef v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 84);
  CFDictionaryAddValue(Mutable, @"Size", v6);
  CFRelease(v6);
  CFNumberRef v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 88);
  CFDictionaryAddValue(Mutable, @"Step", v7);
  CFRelease(v7);
  uint64_t v8 = ZinIrCoordinateToCFString((_DWORD *)a1 + 23);
  CFDictionaryAddValue(Mutable, @"Dimension", v8);
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

uint64_t ZinMirDilatedConv::CreateDilatedConvKernel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, int32x2_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  int v8 = *(_DWORD *)(a2 + 72);
  int v9 = *(_DWORD *)(a2 + 76);
  __int32 v10 = a4->i32[0];
  __int32 v11 = a4->i32[1];
  int64x2_t v36 = vdupq_n_s64(1uLL);
  uint64_t v37 = 1;
  *(void *)&long long v12 = 0x100000001;
  *((void *)&v12 + 1) = 0x100000001;
  long long v38 = v12;
  uint64_t v39 = 0x100000001;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  long long v43 = v12;
  uint64_t v42 = 0;
  uint64_t v44 = 1;
  __int16 v45 = 0;
  int v46 = 0;
  ZinMirDilatedConv::ConvertDilatedConvInfoStruct(a2, a4, (uint64_t)&v36);
  uint64_t v13 = *(void *)(a5 + 136);
  if (*(char *)(a5 + 47) >= 0) {
    size_t v14 = *(unsigned __int8 *)(a5 + 47);
  }
  else {
    size_t v14 = *(void *)(a5 + 32);
  }
  uint64_t v15 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v14 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v15 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    uint64_t v18 = *(char **)(a5 + 24);
    uint64_t v17 = (char *)(a5 + 24);
    uint64_t v16 = v18;
    if (v17[23] >= 0) {
      int v19 = v17;
    }
    else {
      int v19 = v16;
    }
    memmove(v15, v19, v14);
  }
  *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v29, "dil_conv_kernel");
  unsigned int v20 = std::string::append(&v29, "_xfm", 4uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  int64_t v31 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v30 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    uint64_t v22 = v30;
  }
  else {
    uint64_t v22 = (void **)v30[0];
  }
  if (v31 >= 0) {
    std::string::size_type v23 = HIBYTE(v31);
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v30[1];
  }
  uint64_t v24 = std::string::append(&v32, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  std::string::size_type v34 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  ZinIrKernel::DilateKernel(v13, v8 / v10, v9 / v11, &v35);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  uint64_t result = v35;
  if (v35 && *(unsigned char *)(a1 + 1149))
  {
    ZinIrKernel::SetMustCompressWeight(v35, *a3);
    uint64_t result = v35;
  }
  *a6 = result;
  return result;
}

void sub_21134C484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,ZinIrKernel *a36)
{
}

int32x2_t ZinMirDilatedConv::ConvertDilatedConvInfoStruct(uint64_t a1, int32x2_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 72) / a2->i32[0];
  int v4 = *(_DWORD *)(a1 + 76) / a2->i32[1];
  long long v5 = *(_OWORD *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v8;
  *(void *)(a3 + 96) = v6;
  *(_OWORD *)(a3 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *(_OWORD *)(a3 + 32) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(void *)(a3 + 72) = 0x100000001;
  uint64_t v10 = (*(void *)(a1 + 8) - 1) * v4 + 1;
  *(void *)a3 = (*(void *)a1 - 1) * v3 + 1;
  *(void *)(a3 + 8) = v10;
  int32x2_t v11 = *a2;
  LODWORD(v6) = *a2;
  LODWORD(v1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = ((int)v6 - 1 + *(_DWORD *)(a1 + 52)) / (int)v6;
  *(_DWORD *)(a3 + 48) = ((int)v6 - 1 + *(_DWORD *)(a1 + 48)) / (int)v6;
  *(_DWORD *)(a3 + 52) = v10;
  LODWORD(v1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v11.i32[1] - 1 + *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a3 + 56) = (v11.i32[1] - 1 + *(_DWORD *)(a1 + 56)) / v11.i32[1];
  *(_DWORD *)(a3 + 6std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = (int)v10 / v11.i32[1];
  if (*(unsigned char *)(a1 + 97)) {
    ZinAssertImpl("Error: dilated deconvolution is not supported!");
  }
  int8x8_t v12 = (int8x8_t)vceq_s32(v11, (int32x2_t)0x100000001);
  if (a2[1].i32[0] == 1) {
    int v13 = *(_DWORD *)(a1 + 32);
  }
  else {
    int v13 = 1;
  }
  int32x2_t result = vsub_s32((int32x2_t)vand_s8(*(int8x8_t *)(a1 + 24), v12), (int32x2_t)vmvn_s8(v12));
  *(int32x2_t *)(a3 + 24) = result;
  *(_DWORD *)(a3 + 32) = v13;
  return result;
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrPadUnitInfo *a2)
{
  *(_DWORD *)this = 44;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)this + 8), a2);
  *((void *)this + 1) = &unk_26C3499A0;
  long long v4 = *(_OWORD *)((char *)a2 + 156);
  long long v5 = *(_OWORD *)((char *)a2 + 172);
  uint64_t v6 = *(void *)((char *)a2 + 188);
  *((void *)this + 26) = 0;
  *(void *)((char *)this + 196) = v6;
  *(_OWORD *)((char *)this + 18std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *(_OWORD *)((char *)this + 164) = v4;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)this + 26, *((const void **)a2 + 25), *((void *)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3);
  *((_WORD *)this + 116) = *((_WORD *)a2 + 112);
  return this;
}

void sub_21134C694(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v1);
  _Unwind_Resume(a1);
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrInputViewUnitInfo *a2)
{
  *(_DWORD *)this = 17;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C34F860;
  *(_OWORD *)((char *)this + 88) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_21134C78C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrPoolUnitInfo *a2)
{
  *(_DWORD *)this = 2;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C34AB58;
  long long v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 104) = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)this + 88) = v6;
  long long v7 = *((_OWORD *)a2 + 7);
  long long v8 = *((_OWORD *)a2 + 8);
  long long v9 = *((_OWORD *)a2 + 9);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 40);
  *(_OWORD *)((char *)this + 152) = v9;
  *(_OWORD *)((char *)this + 136) = v8;
  *(_OWORD *)((char *)this + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v7;
  return this;
}

void sub_21134C8AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrSpaceToBatchUnitInfo *a2)
{
  *(_DWORD *)this = 34;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C351720;
  uint64_t v6 = *((void *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((void *)this + 11) = v6;
  return this;
}

void sub_21134C9B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrBatchToSpaceUnitInfo *a2)
{
  *(_DWORD *)this = 35;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C3512E0;
  uint64_t v6 = *((void *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((void *)this + 11) = v6;
  return this;
}

void sub_21134CABC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this)
{
  int v2 = *(_DWORD *)this;
  if (*(int *)this <= 33)
  {
    if (v2 == 1)
    {
      *((void *)this + 1) = &unk_26C34CC70;
      int v5 = (void *)*((void *)this + 20);
      if (v5)
      {
        *((void *)this + 21) = v5;
        operator delete(v5);
      }
      uint64_t v6 = (void *)*((void *)this + 17);
      if (v6)
      {
        *((void *)this + 18) = v6;
        operator delete(v6);
      }
      long long v4 = (void **)((char *)this + 8);
      goto LABEL_13;
    }
    if (v2 != 2 && v2 != 17) {
      return;
    }
LABEL_12:
    long long v4 = (void **)((char *)this + 8);
LABEL_13:
    ZinIrUnitInfo::~ZinIrUnitInfo(v4);
    return;
  }
  if (v2 == 34 || v2 == 35) {
    goto LABEL_12;
  }
  if (v2 == 44)
  {
    *((void *)this + 1) = &unk_26C3499A0;
    int v3 = (void *)*((void *)this + 26);
    if (v3)
    {
      *((void *)this + 27) = v3;
      operator delete(v3);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)this + 8));
  }
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, const ZinMirDilatedConv::DilatedConvDecomposedDesc *a2)
{
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 <= 33)
  {
    switch(v4)
    {
      case 1:
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)this + 8), (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)a2 + 8));
        *((void *)this + 1) = &unk_26C34A9B8;
        long long v9 = *(_OWORD *)((char *)a2 + 248);
        v10[16] = *(_OWORD *)((char *)a2 + 264);
        *(_OWORD *)((char *)this + 248) = v9;
        long long v11 = *(_OWORD *)((char *)a2 + 280);
        long long v12 = *(_OWORD *)((char *)a2 + 296);
        long long v13 = *(_OWORD *)((char *)a2 + 312);
        *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
        v10[18] = v12;
        v10[19] = v13;
        v10[17] = v11;
        break;
      case 2:
        *((void *)this + 1) = &unk_26C345B80;
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
        }
        else
        {
          long long v15 = *((_OWORD *)a2 + 1);
          *((void *)this + 4) = *((void *)a2 + 4);
          *((_OWORD *)this + 1) = v15;
        }
        int v20 = *((_DWORD *)a2 + 10);
        *((void *)this + 6) = 0;
        *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v20;
        *((void *)this + 7) = 0;
        *((void *)this + 8) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
        *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
        *((void *)this + 1) = &unk_26C34AB58;
        long long v21 = *(_OWORD *)((char *)a2 + 88);
        *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
        *(_OWORD *)((char *)this + 88) = v21;
        long long v22 = *(_OWORD *)((char *)a2 + 120);
        long long v23 = *(_OWORD *)((char *)a2 + 136);
        long long v24 = *(_OWORD *)((char *)a2 + 152);
        *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
        *(_OWORD *)((char *)this + 152) = v24;
        *(_OWORD *)((char *)this + 136) = v23;
        *(_OWORD *)((char *)this + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v22;
        break;
      case 17:
        *((void *)this + 1) = &unk_26C345B80;
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
        }
        else
        {
          long long v5 = *((_OWORD *)a2 + 1);
          *((void *)this + 4) = *((void *)a2 + 4);
          *((_OWORD *)this + 1) = v5;
        }
        int v17 = *((_DWORD *)a2 + 10);
        *((void *)this + 6) = 0;
        *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
        *((void *)this + 7) = 0;
        *((void *)this + 8) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
        *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
        *((void *)this + 1) = &unk_26C34F860;
        *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
        break;
    }
    return this;
  }
  switch(v4)
  {
    case '""':
      *((void *)this + 1) = &unk_26C345B80;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long v14 = *((_OWORD *)a2 + 1);
        *((void *)this + 4) = *((void *)a2 + 4);
        *((_OWORD *)this + 1) = v14;
      }
      int v18 = *((_DWORD *)a2 + 10);
      *((void *)this + 6) = 0;
      *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v18;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      int v19 = &unk_26C351720;
      goto LABEL_26;
    case '#':
      *((void *)this + 1) = &unk_26C345B80;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long v16 = *((_OWORD *)a2 + 1);
        *((void *)this + 4) = *((void *)a2 + 4);
        *((_OWORD *)this + 1) = v16;
      }
      int v25 = *((_DWORD *)a2 + 10);
      *((void *)this + 6) = 0;
      *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v25;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      int v19 = &unk_26C3512E0;
LABEL_26:
      *((void *)this + 1) = v19;
      uint64_t v26 = *((void *)a2 + 11);
      *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
      *((void *)this + 11) = v26;
      return this;
    case ',':
      ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)this + 8), (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)a2 + 8));
      *((void *)this + 1) = &unk_26C3499A0;
      long long v6 = *(_OWORD *)((char *)a2 + 164);
      long long v7 = *(_OWORD *)((char *)a2 + 180);
      uint64_t v8 = *(void *)((char *)a2 + 196);
      *((void *)this + 26) = 0;
      *(void *)((char *)this + 196) = v8;
      *(_OWORD *)((char *)this + 18std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v7;
      *(_OWORD *)((char *)this + 164) = v6;
      *((void *)this + 27) = 0;
      *((void *)this + 28) = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)this + 26, *((const void **)a2 + 26), *((void *)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3);
      *((_WORD *)this + 116) = *((_WORD *)a2 + 116);
      break;
  }
  return this;
}

void sub_21134CFE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirDilatedConv::DilatedConvDecomposedDesc::operator=(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (v4 <= 33)
  {
    switch(v4)
    {
      case 1:
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)(a1 + 8), (const ZinIrKernelUnitInfo *)(a2 + 8));
        *(void *)(a1 + 8) = &unk_26C34A9B8;
        long long v9 = *(_OWORD *)(a2 + 248);
        v10[16] = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 248) = v9;
        long long v11 = *(_OWORD *)(a2 + 280);
        long long v12 = *(_OWORD *)(a2 + 296);
        long long v13 = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
        v10[18] = v12;
        v10[19] = v13;
        v10[17] = v11;
        break;
      case 2:
        *(void *)(a1 + 8) = &unk_26C345B80;
        if (*(char *)(a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
        }
        else
        {
          long long v15 = *(_OWORD *)(a2 + 16);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = v15;
        }
        int v20 = *(_DWORD *)(a2 + 40);
        *(void *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v20;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *(long long **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(void *)(a1 + 8) = &unk_26C34AB58;
        long long v21 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = v21;
        long long v22 = *(_OWORD *)(a2 + 120);
        long long v23 = *(_OWORD *)(a2 + 136);
        long long v24 = *(_OWORD *)(a2 + 152);
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = v24;
        *(_OWORD *)(a1 + 136) = v23;
        *(_OWORD *)(a1 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v22;
        break;
      case 17:
        *(void *)(a1 + 8) = &unk_26C345B80;
        if (*(char *)(a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
        }
        else
        {
          long long v5 = *(_OWORD *)(a2 + 16);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = v5;
        }
        int v17 = *(_DWORD *)(a2 + 40);
        *(void *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *(long long **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(void *)(a1 + 8) = &unk_26C34F860;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        break;
    }
    return a1;
  }
  switch(v4)
  {
    case '""':
      *(void *)(a1 + 8) = &unk_26C345B80;
      if (*(char *)(a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
      }
      else
      {
        long long v14 = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = v14;
      }
      int v18 = *(_DWORD *)(a2 + 40);
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v18;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *(long long **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      int v19 = &unk_26C351720;
      goto LABEL_26;
    case '#':
      *(void *)(a1 + 8) = &unk_26C345B80;
      if (*(char *)(a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
      }
      else
      {
        long long v16 = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = v16;
      }
      int v25 = *(_DWORD *)(a2 + 40);
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v25;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *(long long **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      int v19 = &unk_26C3512E0;
LABEL_26:
      *(void *)(a1 + 8) = v19;
      uint64_t v26 = *(void *)(a2 + 88);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(void *)(a1 + 88) = v26;
      return a1;
    case ',':
      ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(a1 + 8), (const ZinIrTextureUnitInfo *)(a2 + 8));
      *(void *)(a1 + 8) = &unk_26C3499A0;
      long long v6 = *(_OWORD *)(a2 + 164);
      long long v7 = *(_OWORD *)(a2 + 180);
      uint64_t v8 = *(void *)(a2 + 196);
      *(void *)(a1 + 208) = 0;
      *(void *)(a1 + 196) = v8;
      *(_OWORD *)(a1 + 18std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v7;
      *(_OWORD *)(a1 + 164) = v6;
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 224) = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)(a1 + 208), *(const void **)(a2 + 208), *(void *)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      break;
  }
  return a1;
}

void sub_21134D440(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirDilatedConv::DecomposeDilatedConv(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, int a5, uint64_t a6, uint64_t a7, char *a8, uint64_t *a9)
{
  uint64_t v303 = *MEMORY[0x263EF8340];
  uint64_t v15 = *a9;
  for (uint64_t i = a9[1];
        i != v15;
  a9[1] = v15;
  long long v16 = *(char **)a8;
  *((void *)a8 + 1) = *(void *)a8;
  unint64_t v17 = *((void *)a8 + 2);
  if ((unint64_t)v16 >= v17)
  {
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - (void)v16) >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= 1) {
      uint64_t v22 = 1;
    }
    if (v21 >= 0x333333333333333) {
      unint64_t v23 = 0x666666666666666;
    }
    else {
      unint64_t v23 = v22;
    }
    long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a8 + 16), v23);
    uint64_t v26 = &v24[40 * v25];
    long long v27 = *(_OWORD *)a1;
    long long v28 = *(_OWORD *)(a1 + 16);
    *((void *)v24 + 4) = *(void *)(a1 + 32);
    *(_OWORD *)long long v24 = v27;
    *((_OWORD *)v24 + 1) = v28;
    int v20 = v24 + 40;
    uint64_t v30 = *(char **)a8;
    std::string v29 = (char *)*((void *)a8 + 1);
    if (v29 != *(char **)a8)
    {
      do
      {
        long long v31 = *(_OWORD *)(v29 - 40);
        long long v32 = *(_OWORD *)(v29 - 24);
        *((void *)v24 - 1) = *((void *)v29 - 1);
        *(_OWORD *)(v24 - 24) = v32;
        *(_OWORD *)(v24 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v31;
        v24 -= 40;
        v29 -= 40;
      }
      while (v29 != v30);
      std::string v29 = *(char **)a8;
    }
    *(void *)a8 = v24;
    *((void *)a8 + 1) = v20;
    *((void *)a8 + 2) = v26;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    long long v18 = *(_OWORD *)a1;
    long long v19 = *(_OWORD *)(a1 + 16);
    *((void *)v16 + 4) = *(void *)(a1 + 32);
    *(_OWORD *)long long v16 = v18;
    *((_OWORD *)v16 + 1) = v19;
    int v20 = v16 + 40;
  }
  *((void *)a8 + 1) = v20;
  if (a4[18] != 1 || a4[19] != 1)
  {
    if (ZinConvLayerUtils::IsLargeKernelStep((uint64_t)(a4 + 6), a4 + 9))
    {
      if (*(unsigned char *)(*(void *)(a6 + 8) + 492)) {
        return 3;
      }
      ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides((uint64_t)a4);
    }
    long long v211 = a8;
    unint64_t v228 = 0;
    unint64_t v229 = 0;
    v226[1] = 0;
    uint64_t v227 = &v228;
    uint64_t v225 = (uint64_t *)v226;
    v226[0] = 0;
    uint64_t v293 = 0;
    char v292 = 0;
    uint64_t v294 = 0;
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__init_with_size[abi:ne180100]<ANEDebugInfo::DebugInfoInMem::Layer*,ANEDebugInfo::DebugInfoInMem::Layer*>(&v292, *(const void **)a7, *(void *)(a7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2));
    std::string::size_type v34 = (int32x2_t *)v292;
    unint64_t v215 = v293;
    long long v213 = a4;
    if (v292 != v293)
    {
      uint64_t v210 = a6;
      uint64_t v212 = a2;
      do
      {
        BOOL v35 = v34->i32[0] == 1 && v34->i32[1] == 1;
        int v36 = !v35;
        uint64_t v290 = 0;
        uint64_t v289 = 0;
        unint64_t v291 = 0;
        uint64_t v37 = operator new(0x28uLL);
        long long v38 = *(_OWORD *)(a1 + 16);
        _OWORD *v37 = *(_OWORD *)a1;
        v37[1] = v38;
        *((void *)v37 + 4) = *(void *)(a1 + 32);
        unint64_t v288 = (unint64_t)v37 + 40;
        uint64_t v286 = v37;
        std::string __p = (char *)v37 + 40;
        if (v36)
        {
          uint64_t v39 = *(void *)(a1 + 16);
          uint64_t v40 = v34->i32[0];
          uint64_t v41 = v34->i32[1];
          uint64_t v42 = *(void *)(a1 + 24) % v40;
          uint64_t v43 = v40 - v42;
          if (v42) {
            uint64_t v44 = v43;
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v45 = v39 % v41;
          uint64_t v46 = v41 - v39 % v41;
          if (v45) {
            uint64_t v47 = v46;
          }
          else {
            uint64_t v47 = 0;
          }
          if (v44 | v47)
          {
            long long v271 = 0u;
            long long v264 = 0u;
            *(void *)&long long v265 = 0;
            *(_OWORD *)&v262[8] = 0u;
            long long v263 = 0u;
            *(void *)uint64_t v266 = -1;
            *(_OWORD *)&v266[8] = 0u;
            long long v267 = 0u;
            memset(v268, 0, sizeof(v268));
            *(void *)uint64_t v262 = &unk_26C3499A0;
            uint64_t v269 = 0;
            uint64_t v270 = 0;
            WORD4(v271) = 0;
            *(void *)&long long v271 = 0;
            DWORD2(v263) = 44;
            DWORD2(v265) = a3;
            HIDWORD(v265) = a3;
            long long __src = xmmword_211EE25D0;
            std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v269, (char *)&__src, (uint64_t)&v296, 2uLL);
            HIDWORD(v268[5]) = 0;
            *(void *)((char *)&v268[7] + 4) = 0;
            v268[6] = v44;
            LODWORD(v268[7]) = v47;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrPadUnitInfo *)v262);
            uint64_t v48 = v290;
            if ((unint64_t)v290 >= v291)
            {
              uint64_t v49 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v289, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            }
            else
            {
              ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
              uint64_t v49 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v48 + 344);
            }
            uint64_t v290 = v49;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            unsigned int v50 = __p;
            long long __src = *(_OWORD *)((char *)__p - 40);
            uint64_t v51 = *((void *)__p - 1);
            uint64_t v52 = *((void *)__p - 2) + v44;
            uint64_t v53 = *((void *)__p - 3) + v47;
            if ((unint64_t)__p >= v288)
            {
              unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__p - (unsigned char *)v286) >> 3);
              unint64_t v56 = v55 + 1;
              if (v55 + 1 > 0x666666666666666) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              if (0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3) > v56) {
                unint64_t v56 = 0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v288 - (void)v286) >> 3) >= 0x333333333333333) {
                unint64_t v57 = 0x666666666666666;
              }
              else {
                unint64_t v57 = v56;
              }
              if (v57) {
                uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v288, v57);
              }
              else {
                uint64_t v58 = 0;
              }
              unsigned int v59 = &v58[40 * v55];
              *(_OWORD *)unsigned int v59 = __src;
              *((void *)v59 + 2) = v53;
              *((void *)v59 + 3) = v52;
              *((void *)v59 + 4) = v51;
              int v60 = (char *)__p;
              unint64_t v61 = (char *)v286;
              uint64_t v62 = v59;
              if (__p != v286)
              {
                do
                {
                  long long v63 = *(_OWORD *)(v60 - 40);
                  long long v64 = *(_OWORD *)(v60 - 24);
                  *((void *)v62 - 1) = *((void *)v60 - 1);
                  *(_OWORD *)(v62 - 24) = v64;
                  *(_OWORD *)(v62 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v63;
                  v62 -= 40;
                  v60 -= 40;
                }
                while (v60 != v61);
                int v60 = v61;
              }
              uint64_t v54 = v59 + 40;
              uint64_t v286 = v62;
              std::string __p = v59 + 40;
              unint64_t v288 = (unint64_t)&v58[40 * v57];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)((char *)__p - 40);
              _OWORD v50[2] = v53;
              void v50[3] = v52;
              v50[4] = v51;
              uint64_t v54 = v50 + 5;
            }
            std::string __p = v54;
            *(void *)uint64_t v262 = &unk_26C3499A0;
            if (v269)
            {
              uint64_t v270 = v269;
              operator delete(v269);
            }
            ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v262);
          }
          *(void *)&v262[8] = 0;
          *(void *)&v262[16] = 0;
          DWORD2(v263) = 0;
          *(void *)&long long v263 = 0;
          long long v264 = 0u;
          long long v265 = 0u;
          *(void *)uint64_t v266 = -1;
          *(void *)uint64_t v262 = &unk_26C351720;
          int32x2_t v65 = *v34;
          *(_DWORD *)&v266[16] = v34[1].i32[0];
          *(int32x2_t *)&v266[8] = v65;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrSpaceToBatchUnitInfo *)v262);
          uint64_t v66 = v290;
          if ((unint64_t)v290 >= v291)
          {
            uint64_t v67 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v289, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          }
          else
          {
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            uint64_t v67 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v66 + 344);
          }
          uint64_t v290 = v67;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          int v68 = __p;
          uint64_t v69 = *((void *)__p - 4);
          uint64_t v70 = *((void *)__p - 1);
          uint64_t v71 = *((void *)__p - 5) * *(int *)&v266[12] * (uint64_t)*(int *)&v266[8];
          uint64_t v72 = *((void *)__p - 3) / *(int *)&v266[12];
          uint64_t v73 = *((void *)__p - 2) / *(int *)&v266[8];
          if ((unint64_t)__p >= v288)
          {
            uint64_t v75 = v286;
            unint64_t v76 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__p - (unsigned char *)v286) >> 3);
            unint64_t v77 = v76 + 1;
            if (v76 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3) > v77) {
              unint64_t v77 = 0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v288 - (void)v286) >> 3) >= 0x333333333333333) {
              unint64_t v78 = 0x666666666666666;
            }
            else {
              unint64_t v78 = v77;
            }
            if (v78)
            {
              uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v288, v78);
              int v68 = __p;
              uint64_t v75 = v286;
            }
            else
            {
              uint64_t v79 = 0;
            }
            uint64_t v80 = (uint64_t *)&v79[40 * v76];
            uint64_t *v80 = v71;
            v80[1] = v69;
            v80[2] = v72;
            v80[3] = v73;
            v80[4] = v70;
            if (v68 == v75)
            {
              uint64_t v84 = &v79[40 * v76];
              a4 = v213;
              a2 = v212;
            }
            else
            {
              uint64_t v81 = &v79[40 * v76];
              a4 = v213;
              a2 = v212;
              do
              {
                long long v82 = *(_OWORD *)(v68 - 5);
                long long v83 = *(_OWORD *)(v68 - 3);
                uint64_t v84 = v81 - 40;
                *((void *)v81 - 1) = *(v68 - 1);
                *(_OWORD *)(v81 - 24) = v83;
                *(_OWORD *)(v81 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v82;
                v68 -= 5;
                v81 -= 40;
              }
              while (v68 != v75);
            }
            uint64_t v74 = v80 + 5;
            uint64_t v286 = v84;
            std::string __p = v80 + 5;
            unint64_t v288 = (unint64_t)&v79[40 * v78];
            if (v75) {
              operator delete(v75);
            }
          }
          else
          {
            *(void *)std::string __p = v71;
            v68[1] = v69;
            v68[2] = v72;
            v68[3] = v73;
            uint64_t v74 = v68 + 5;
            void v68[4] = v70;
            a2 = v212;
          }
          std::string __p = v74;
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)v262);
        }
        int64x2_t v276 = vdupq_n_s64(1uLL);
        uint64_t v277 = 1;
        *(void *)&long long v85 = 0x100000001;
        *((void *)&v85 + 1) = 0x100000001;
        long long v278 = v85;
        uint64_t v279 = 0x100000001;
        uint64_t v281 = 0;
        long long v280 = 0uLL;
        long long v282 = v85;
        uint64_t v283 = 1;
        __int16 v284 = 0;
        int v285 = 0;
        *(void *)&v262[8] = 0;
        *(void *)&v262[16] = 0;
        DWORD2(v263) = 0;
        *(void *)&long long v263 = 0;
        long long v264 = 0u;
        long long v265 = 0u;
        *(void *)uint64_t v266 = -1;
        *(void *)&v266[8] = 0;
        *(_DWORD *)&v266[16] = -1;
        *(void *)&long long v267 = -1;
        DWORD2(v267) = -1;
        v268[0] = -1;
        memset(&v268[1], 0, 56);
        LODWORD(v268[8]) = 1;
        BYTE4(v268[8]) = 0;
        LOWORD(v268[9]) = 0;
        LODWORD(v268[10]) = -1;
        uint64_t v269 = (void *)-1;
        LODWORD(v27std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = -1;
        *(void *)&long long v271 = -1;
        *((void *)&v271 + 1) = 0x3F80000000000006;
        int v272 = 0;
        *(void *)uint64_t v262 = &unk_26C34A9B8;
        *(_DWORD *)uint64_t v273 = 0;
        v273[4] = 0;
        *(int64x2_t *)&v273[8] = v276;
        *(void *)&v273[24] = 1;
        *(void *)unint64_t v274 = 1;
        *(_OWORD *)&v274[8] = v85;
        *(void *)&v274[24] = 0x100000001;
        memset(v275, 0, 24);
        *(_DWORD *)&v275[24] = 1;
        ZinMirDilatedConv::ConvertDilatedConvInfoStruct((uint64_t)a4, v34, (uint64_t)&v276);
        *(_DWORD *)uint64_t v273 = 1;
        *(void *)&v274[20] = v278;
        *(_DWORD *)&v274[28] = DWORD2(v278);
        *(int64x2_t *)&v273[16] = v276;
        *(void *)unint64_t v274 = v277;
        *(_OWORD *)uint64_t v275 = v280;
        *(void *)&v275[16] = v281;
        *(_DWORD *)&v275[24] = HIDWORD(v282);
        *(void *)uint64_t v266 = *(void *)(a2 + 8);
        *(void *)&v273[8] = v283;
        DWORD2(v265) = a3;
        *(_DWORD *)&v266[12] = a5;
        *(_DWORD *)&v266[8] = 1;
        LODWORD(__src) = 1;
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)((char *)&__src + 8), (const ZinIrKernelUnitInfo *)v262);
        *((void *)&__src + 1) = &unk_26C34A9B8;
        long long v300 = *(_OWORD *)v274;
        long long v301 = *(_OWORD *)&v274[16];
        v302[0] = *(_OWORD *)v275;
        *(_OWORD *)((char *)v302 + 12) = *(_OWORD *)&v275[12];
        long long v298 = *(_OWORD *)v273;
        long long v299 = *(_OWORD *)&v273[16];
        uint64_t v86 = v290;
        if ((unint64_t)v290 >= v291)
        {
          uint64_t v87 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v289, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
        }
        else
        {
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          uint64_t v87 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v86 + 344);
        }
        uint64_t v290 = v87;
        ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
        uint64_t v88 = *((void *)__p - 1);
        long long v89 = *(_OWORD *)((char *)__p - 24);
        v260[0] = *(_OWORD *)((char *)__p - 40);
        v260[1] = v89;
        uint64_t v261 = v88;
        uint64_t v90 = *(void *)(a2 + 8);
        *(void *)&long long __src = 0x100000001;
        DWORD2(__src) = 1;
        ZinGetOutputTensorDimension((uint64_t)v260, &v276, (unsigned int *)&v278, (unsigned int *)&v278 + 3, (int *)&v280, v90, (int *)&__src, (uint64_t)&v257);
        uint64_t v91 = __p;
        if ((unint64_t)__p >= v288)
        {
          uint64_t v95 = v286;
          unint64_t v96 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__p - (unsigned char *)v286) >> 3);
          unint64_t v97 = v96 + 1;
          if (v96 + 1 > 0x666666666666666) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3) > v97) {
            unint64_t v97 = 0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v288 - (void)v286) >> 3) >= 0x333333333333333) {
            unint64_t v98 = 0x666666666666666;
          }
          else {
            unint64_t v98 = v97;
          }
          if (v98)
          {
            uint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v288, v98);
            uint64_t v91 = __p;
            uint64_t v95 = v286;
          }
          else
          {
            uint64_t v99 = 0;
          }
          uint64_t v100 = &v99[40 * v96];
          long long v101 = v257;
          long long v102 = v258;
          *((void *)v100 + 4) = v259;
          *(_OWORD *)uint64_t v100 = v101;
          *((_OWORD *)v100 + 1) = v102;
          if (v91 == v95)
          {
            uint64_t v106 = &v99[40 * v96];
          }
          else
          {
            uint64_t v103 = &v99[40 * v96];
            do
            {
              long long v104 = *(_OWORD *)((char *)v91 - 40);
              long long v105 = *(_OWORD *)((char *)v91 - 24);
              uint64_t v106 = v103 - 40;
              *((void *)v103 - 1) = *((void *)v91 - 1);
              *(_OWORD *)(v103 - 24) = v105;
              *(_OWORD *)(v103 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v104;
              uint64_t v91 = (_OWORD *)((char *)v91 - 40);
              v103 -= 40;
            }
            while (v91 != v95);
          }
          uint64_t v94 = v100 + 40;
          uint64_t v286 = v106;
          std::string __p = v100 + 40;
          unint64_t v288 = (unint64_t)&v99[40 * v98];
          if (v95) {
            operator delete(v95);
          }
        }
        else
        {
          long long v92 = v257;
          long long v93 = v258;
          *((void *)__p + 4) = v259;
          *uint64_t v91 = v92;
          v91[1] = v93;
          uint64_t v94 = (char *)v91 + 40;
        }
        std::string __p = v94;
        if (v36)
        {
          *(_OWORD *)&void v230[8] = 0uLL;
          int v232 = 0;
          uint64_t v231 = 0;
          long long v233 = 0u;
          long long v234 = 0u;
          uint64_t v235 = -1;
          *(void *)uint64_t v230 = &unk_26C3512E0;
          int32x2_t v107 = *v34;
          v237.i32[0] = v34[1].i32[0];
          int32x2_t v236 = v107;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrBatchToSpaceUnitInfo *)v230);
          long long v108 = v290;
          if ((unint64_t)v290 >= v291)
          {
            uint64_t v109 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v289, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          }
          else
          {
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            uint64_t v109 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v108 + 344);
          }
          uint64_t v290 = v109;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          uint64_t v110 = __p;
          uint64_t v111 = *((void *)__p - 4);
          uint64_t v112 = *((void *)__p - 1);
          uint64_t v113 = *((void *)__p - 3) * v236.i32[1];
          uint64_t v114 = *((void *)__p - 2) * v236.i32[0];
          uint64_t v115 = *((void *)__p - 5) / (v236.i32[1] * (uint64_t)v236.i32[0]);
          if ((unint64_t)__p >= v288)
          {
            uint64_t v117 = v286;
            unint64_t v118 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__p - (unsigned char *)v286) >> 3);
            unint64_t v119 = v118 + 1;
            if (v118 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3) > v119) {
              unint64_t v119 = 0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v288 - (void)v286) >> 3) >= 0x333333333333333) {
              unint64_t v120 = 0x666666666666666;
            }
            else {
              unint64_t v120 = v119;
            }
            if (v120)
            {
              uint64_t v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v288, v120);
              uint64_t v110 = __p;
              uint64_t v117 = v286;
            }
            else
            {
              uint64_t v121 = 0;
            }
            uint64_t v122 = (uint64_t *)&v121[40 * v118];
            *uint64_t v122 = v115;
            v122[1] = v111;
            v122[2] = v113;
            v122[3] = v114;
            v122[4] = v112;
            if (v110 == v117)
            {
              uint64_t v126 = &v121[40 * v118];
              a4 = v213;
            }
            else
            {
              uint64_t v123 = &v121[40 * v118];
              a4 = v213;
              do
              {
                long long v124 = *(_OWORD *)(v110 - 5);
                long long v125 = *(_OWORD *)(v110 - 3);
                uint64_t v126 = v123 - 40;
                *((void *)v123 - 1) = *(v110 - 1);
                *(_OWORD *)(v123 - 24) = v125;
                *(_OWORD *)(v123 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v124;
                v110 -= 5;
                v123 -= 40;
              }
              while (v110 != v117);
            }
            uint64_t v116 = v122 + 5;
            uint64_t v286 = v126;
            std::string __p = v122 + 5;
            unint64_t v288 = (unint64_t)&v121[40 * v120];
            if (v117) {
              operator delete(v117);
            }
          }
          else
          {
            *(void *)std::string __p = v115;
            v110[1] = v111;
            v110[2] = v113;
            void v110[3] = v114;
            uint64_t v116 = v110 + 5;
            void v110[4] = v112;
          }
          std::string __p = v116;
          if (ZinMirDilatedConv::NeedsExtraPadRemoval(a1, (int *)v34, a4))
          {
            v246.i64[1] = 0;
            uint64_t v247 = 0;
            DWORD2(v248) = 0;
            *(void *)&long long v248 = 0;
            memset(v249, 0, sizeof(v249));
            *(void *)&long long v250 = -1;
            v246.i64[0] = (uint64_t)&unk_26C34F860;
            uint64_t v251 = 0x400000001;
            HIDWORD(v25std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 24);
            DWORD2(v25std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
            HIDWORD(v249[3]) = a3;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrInputViewUnitInfo *)&v246);
            uint64_t v127 = v290;
            if ((unint64_t)v290 >= v291)
            {
              uint64_t v128 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v289, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            }
            else
            {
              ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
              uint64_t v128 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v127 + 344);
            }
            uint64_t v290 = v128;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            uint64_t v129 = __p;
            long long v255 = *(_OWORD *)((char *)__p - 40);
            uint64_t v256 = *((void *)__p - 3);
            uint64_t v130 = *((void *)__p - 1);
            uint64_t v131 = *(void *)(a2 + 24);
            if ((unint64_t)__p >= v288)
            {
              unint64_t v133 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__p - (unsigned char *)v286) >> 3);
              unint64_t v134 = v133 + 1;
              if (v133 + 1 > 0x666666666666666) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              if (0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3) > v134) {
                unint64_t v134 = 0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v288 - (void)v286) >> 3) >= 0x333333333333333) {
                unint64_t v135 = 0x666666666666666;
              }
              else {
                unint64_t v135 = v134;
              }
              if (v135) {
                BOOL v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v288, v135);
              }
              else {
                BOOL v136 = 0;
              }
              uint64_t v137 = &v136[40 * v133];
              *((void *)v137 + 2) = v256;
              *(_OWORD *)uint64_t v137 = v255;
              *((void *)v137 + 3) = v131;
              *((void *)v137 + 4) = v130;
              unint64_t v138 = (char *)__p;
              uint64_t v139 = (char *)v286;
              uint64_t v140 = v137;
              if (__p != v286)
              {
                do
                {
                  long long v141 = *(_OWORD *)(v138 - 40);
                  long long v142 = *(_OWORD *)(v138 - 24);
                  *((void *)v140 - 1) = *((void *)v138 - 1);
                  *(_OWORD *)(v140 - 24) = v142;
                  *(_OWORD *)(v140 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v141;
                  v140 -= 40;
                  v138 -= 40;
                }
                while (v138 != v139);
                unint64_t v138 = v139;
              }
              uint64_t v132 = v137 + 40;
              uint64_t v286 = v140;
              std::string __p = v137 + 40;
              unint64_t v288 = (unint64_t)&v136[40 * v135];
              if (v138) {
                operator delete(v138);
              }
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)((char *)__p - 40);
              v129[2] = *(v129 - 3);
              v129[3] = v131;
              v129[4] = v130;
              uint64_t v132 = v129 + 5;
            }
            std::string __p = v132;
            uint64_t v143 = *(void *)(a2 + 16);
            HIDWORD(v251) = 3;
            HIDWORD(v25std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v143;
            DWORD2(v25std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
            HIDWORD(v249[3]) = a3;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrInputViewUnitInfo *)&v246);
            uint64_t v144 = v290;
            if ((unint64_t)v290 >= v291)
            {
              uint64_t v145 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v289, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            }
            else
            {
              ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
              uint64_t v145 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v144 + 344);
            }
            uint64_t v290 = v145;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            uint64_t v146 = __p;
            long long __src = *(_OWORD *)((char *)__p - 40);
            *(void *)&long long v296 = *((void *)__p - 3);
            uint64_t v147 = *((void *)__p - 1);
            uint64_t v148 = *(void *)(a2 + 16);
            if ((unint64_t)__p >= v288)
            {
              unint64_t v150 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__p - (unsigned char *)v286) >> 3);
              unint64_t v151 = v150 + 1;
              if (v150 + 1 > 0x666666666666666) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              if (0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3) > v151) {
                unint64_t v151 = 0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v288 - (void)v286) >> 3) >= 0x333333333333333) {
                unint64_t v152 = 0x666666666666666;
              }
              else {
                unint64_t v152 = v151;
              }
              if (v152) {
                uint64_t v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v288, v152);
              }
              else {
                uint64_t v153 = 0;
              }
              uint64_t v154 = &v153[40 * v150];
              *((void *)v154 + 2) = v296;
              *(_OWORD *)uint64_t v154 = __src;
              *((void *)v154 + 3) = v148;
              *((void *)v154 + 4) = v147;
              uint64_t v155 = (char *)__p;
              uint64_t v156 = (char *)v286;
              uint64_t v157 = v154;
              if (__p != v286)
              {
                do
                {
                  long long v158 = *(_OWORD *)(v155 - 40);
                  long long v159 = *(_OWORD *)(v155 - 24);
                  *((void *)v157 - 1) = *((void *)v155 - 1);
                  *(_OWORD *)(v157 - 24) = v159;
                  *(_OWORD *)(v157 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v158;
                  v157 -= 40;
                  v155 -= 40;
                }
                while (v155 != v156);
                uint64_t v155 = v156;
              }
              uint64_t v149 = v154 + 40;
              uint64_t v286 = v157;
              std::string __p = v154 + 40;
              unint64_t v288 = (unint64_t)&v153[40 * v152];
              if (v155) {
                operator delete(v155);
              }
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)((char *)__p - 40);
              v146[2] = *(v146 - 3);
              v146[3] = v148;
              v146[4] = v147;
              uint64_t v149 = v146 + 5;
            }
            std::string __p = v149;
            ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v246);
          }
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)v230);
        }
        int64x2_t v246 = vdupq_n_s64(1uLL);
        uint64_t v247 = 1;
        *(void *)&long long v160 = 0x100000001;
        *((void *)&v160 + 1) = 0x100000001;
        long long v248 = v160;
        v249[0] = 0x100000001;
        memset(&v249[1], 0, 24);
        long long v250 = v160;
        LODWORD(v251) = 2;
        BYTE4(v251) = 0;
        int v252 = 1065353216;
        char v253 = 0;
        int v254 = 0;
        if (ZinMirDilatedConv::NeedDownsample((int *)v34, a4, (uint64_t)&v246))
        {
          *(_OWORD *)&void v230[8] = 0uLL;
          uint64_t v231 = 0;
          long long v233 = 0u;
          long long v234 = 0u;
          uint64_t v235 = -1;
          *(void *)uint64_t v230 = &unk_26C34AB58;
          int64x2_t v237 = vdupq_n_s64(1uLL);
          uint64_t v238 = 1;
          uint64_t v239 = 0x100000001;
          int v240 = 1;
          uint64_t v242 = 0;
          long long v241 = 0uLL;
          char v243 = 0;
          uint64_t v244 = 0x3F80000000000001;
          int v245 = 0;
          v236.i32[0] = 1;
          int v232 = 2;
          v236.i32[0] = ZinMirPoolUtils::ToZinIrPoolingType(v251);
          int64x2_t v237 = v246;
          uint64_t v238 = v247;
          long long v241 = *(_OWORD *)&v249[1];
          uint64_t v242 = v249[3];
          uint64_t v239 = v248;
          int v240 = DWORD2(v248);
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrPoolUnitInfo *)v230);
          int64_t v161 = v290;
          if ((unint64_t)v290 >= v291)
          {
            uint64_t v162 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v289, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          }
          else
          {
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            uint64_t v162 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v161 + 344);
          }
          uint64_t v290 = v162;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          long long v163 = *(_OWORD *)(a2 + 16);
          long long __src = *(_OWORD *)a2;
          long long v296 = v163;
          uint64_t v297 = *(void *)(a2 + 32);
          uint64_t v164 = __p;
          if ((unint64_t)__p >= v288)
          {
            uint64_t v168 = v286;
            unint64_t v169 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__p - (unsigned char *)v286) >> 3);
            unint64_t v170 = v169 + 1;
            if (v169 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3) > v170) {
              unint64_t v170 = 0x999999999999999ALL * ((uint64_t)(v288 - (void)v286) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v288 - (void)v286) >> 3) >= 0x333333333333333) {
              unint64_t v171 = 0x666666666666666;
            }
            else {
              unint64_t v171 = v170;
            }
            if (v171)
            {
              char v172 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v288, v171);
              uint64_t v164 = __p;
              uint64_t v168 = v286;
            }
            else
            {
              char v172 = 0;
            }
            uint64_t v173 = &v172[40 * v169];
            *(_OWORD *)uint64_t v173 = __src;
            *((_OWORD *)v173 + 1) = v296;
            *((void *)v173 + 4) = v297;
            if (v164 == v168)
            {
              uint64_t v177 = &v172[40 * v169];
            }
            else
            {
              uint64_t v174 = &v172[40 * v169];
              do
              {
                long long v175 = *(_OWORD *)((char *)v164 - 40);
                long long v176 = *(_OWORD *)((char *)v164 - 24);
                uint64_t v177 = v174 - 40;
                *((void *)v174 - 1) = *((void *)v164 - 1);
                *(_OWORD *)(v174 - 24) = v176;
                *(_OWORD *)(v174 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v175;
                uint64_t v164 = (_OWORD *)((char *)v164 - 40);
                v174 -= 40;
              }
              while (v164 != v168);
            }
            uint64_t v167 = v173 + 40;
            uint64_t v286 = v177;
            std::string __p = v173 + 40;
            unint64_t v288 = (unint64_t)&v172[40 * v171];
            if (v168) {
              operator delete(v168);
            }
          }
          else
          {
            long long v165 = *(_OWORD *)a2;
            long long v166 = *(_OWORD *)(a2 + 16);
            *((void *)__p + 4) = *(void *)(a2 + 32);
            *uint64_t v164 = v165;
            v164[1] = v166;
            uint64_t v167 = (char *)v164 + 40;
          }
          std::string __p = v167;
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)v230);
        }
        *(void *)uint64_t v230 = v34;
        uint64_t v178 = std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__emplace_unique_key_args<ZinIrDims3D,std::piecewise_construct_t const&,std::tuple<ZinIrDims3D const&>,std::tuple<>>((uint64_t **)&v227, (int *)v34, (uint64_t)&std::piecewise_construct, (void **)v230)+ 6;
        if (v178 != &v289) {
          std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>((uint64_t)v178, v289, (uint64_t)v290, 0x82FA0BE82FA0BE83 * (((uint64_t)v290 - v289) >> 3));
        }
        *(void *)uint64_t v230 = v34;
        long long v179 = (char *)(std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__emplace_unique_key_args<ZinIrDims3D,std::piecewise_construct_t const&,std::tuple<ZinIrDims3D const&>,std::tuple<>>(&v225, (int *)v34, (uint64_t)&std::piecewise_construct, (void **)v230)+ 6);
        if (v179 != (char *)&v286) {
          std::vector<ZinTensorDimensions>::__assign_with_size[abi:ne180100]<ZinTensorDimensions const*,ZinTensorDimensions const*>(v179, (char *)v286, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__p - (unsigned char *)v286) >> 3));
        }
        *(void *)uint64_t v262 = &unk_26C34CC70;
        if (v268[5])
        {
          v268[6] = v268[5];
          operator delete((void *)v268[5]);
        }
        if (v268[2])
        {
          v268[3] = v268[2];
          operator delete((void *)v268[2]);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)v262);
        if (v286)
        {
          std::string __p = v286;
          operator delete(v286);
        }
        *(void *)&long long __src = &v289;
        std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
        std::string::size_type v34 = (int32x2_t *)((char *)v34 + 12);
      }
      while (v34 != v215);
      std::string::size_type v34 = (int32x2_t *)v292;
      a6 = v210;
    }
    if (v34)
    {
      uint64_t v293 = v34;
      operator delete(v34);
    }
    uint64_t v180 = (uint64_t *)v227;
    if (v227 == &v228)
    {
      unsigned int v218 = 1;
      uint64_t v214 = 1;
      int v216 = 1;
LABEL_240:
      unint64_t v206 = v218 | (unint64_t)(v214 << 32);
      int v207 = v216;
    }
    else
    {
      uint64_t v181 = *(void **)a6;
      unint64_t v220 = -1;
      unint64_t v219 = -1;
      uint64_t v214 = 1;
      unsigned int v218 = 1;
      int v216 = 1;
      while (1)
      {
        int v182 = *((_DWORD *)v180 + 8);
        int v183 = *((_DWORD *)v180 + 9);
        if (v182 == 1 && v183 == 1) {
          break;
        }
        if (v229 < 2 || v182 != a4[18] || v183 != a4[19])
        {
          long long v187 = (uint64_t *)std::map<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>::at((uint64_t)&v225, (int *)v180 + 8);
          uint64_t v188 = (_DWORD *)v180[6];
          uint64_t v189 = (_DWORD *)v180[7];
          if (v188 == v189)
          {
            unint64_t v190 = 0;
          }
          else
          {
            unint64_t v190 = 0;
            do
            {
              if (*v188 == 1) {
                break;
              }
              ++v190;
              v188 += 86;
            }
            while (v188 != v189);
          }
          unint64_t v191 = v190 + 1;
          uint64_t v192 = *v187;
          if (0xCCCCCCCCCCCCCCCDLL * ((v187[1] - *v187) >> 3) <= v190 + 1) {
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          }
          *(void *)&v260[0] = 0;
          if (ZinTensorFormatGetSizeInBytes(a3, (uint64_t *)v260)) {
            ZinAssertImpl("Error in getting tensor format size in bytes");
          }
          *(void *)&long long v257 = 0;
          unint64_t v193 = ZinNEPerf::EstimateMinimumNumOfWorkunits(*(void *)(v192 + 40 * v191 + 16), *(void *)(v192 + 40 * v191 + 24), *(unint64_t *)&v260[0], 0, (uint64_t)v181, (unint64_t *)&v257);
          uint64_t v194 = v180[6];
          if (0x82FA0BE82FA0BE83 * ((v180[7] - v194) >> 3) <= v190) {
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v195 = v193;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v194 + 344 * v190));
          *(int64x2_t *)uint64_t v262 = vdupq_n_s64(1uLL);
          *(void *)&v262[16] = 1;
          *(void *)&long long v196 = 0x100000001;
          *((void *)&v196 + 1) = 0x100000001;
          long long v263 = v196;
          long long v264 = 0x100000001uLL;
          long long v265 = 0uLL;
          *(_OWORD *)uint64_t v266 = v196;
          *(void *)&v266[16] = 1;
          LOWORD(v267) = 0;
          DWORD1(v267) = 0;
          ZinIrConvUnit::CreateConvInfo((uint64_t)&__src + 8, (uint64_t)v262);
          v246.i64[0] = v263;
          v246.i32[2] = DWORD2(v263);
          ZinKernelComputeStrideExpansion(v181, v246.i32, (unint64_t *)v262, a3, 0, (int *)v230);
          uint64_t v197 = *(int *)v230;
          uint64_t v198 = *(int *)&v230[12];
          int v221 = *(_DWORD *)&v230[4];
          int v223 = *(_DWORD *)&v230[16];
          long long v263 = *(_OWORD *)v230;
          *(void *)&long long v264 = *(void *)&v230[16];
          uint64_t v199 = details::ZinIrSubchannelKernelDimension(*(int *)v230, *(int *)&v230[12], *(uint64_t *)v262, BYTE8(v264));
          uint64_t v200 = details::ZinIrSubchannelKernelDimension(SDWORD1(v263), (int)v264, *(uint64_t *)&v262[8], v265);
          unint64_t v201 = *(void *)(v192 + 40 * v191);
          unint64_t v202 = v195 * v197 * v221 * v198 * v223 * v199 * v200 * v201;
          unint64_t v203 = (unint64_t)(v201 < v220) << 7;
          if (v201 == v220) {
            unint64_t v203 = 0;
          }
          if (v202 != v219) {
            unint64_t v203 = (unint64_t)(v202 < v219) << 7;
          }
          if (v203)
          {
            unsigned int v218 = *((_DWORD *)v180 + 8);
            uint64_t v214 = *((unsigned int *)v180 + 9);
            unint64_t v219 = v195 * v197 * v221 * v198 * v223 * v199 * v200 * v201;
            unint64_t v220 = *(void *)(v192 + 40 * v191);
            int v216 = *((_DWORD *)v180 + 10);
          }
          ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          a4 = v213;
        }
        uint64_t v204 = (char *)v180[1];
        if (v204)
        {
          do
          {
            uint64_t v205 = (char **)v204;
            uint64_t v204 = *(char **)v204;
          }
          while (v204);
        }
        else
        {
          do
          {
            uint64_t v205 = (char **)v180[2];
            BOOL v35 = *v205 == (char *)v180;
            uint64_t v180 = (uint64_t *)v205;
          }
          while (!v35);
        }
        uint64_t v180 = (uint64_t *)v205;
        if (v205 == &v228) {
          goto LABEL_240;
        }
      }
      unint64_t v206 = v180[4];
      int v207 = *((_DWORD *)v180 + 10);
    }
    v276.i64[0] = v206;
    v276.i32[2] = v207;
    uint64_t v208 = (uint64_t *)std::map<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>::at((uint64_t)&v227, v276.i32);
    if (v208 != a9) {
      std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>((uint64_t)a9, *v208, v208[1], 0x82FA0BE82FA0BE83 * ((v208[1] - *v208) >> 3));
    }
    uint64_t v209 = std::map<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>::at((uint64_t)&v225, v276.i32);
    if ((char *)v209 != v211) {
      std::vector<ZinTensorDimensions>::__assign_with_size[abi:ne180100]<ZinTensorDimensions const*,ZinTensorDimensions const*>(v211, *(char **)v209, *(void *)(v209 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v209 + 8) - *(void *)v209) >> 3));
    }
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>>>::destroy((uint64_t)&v225, v226[0]);
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::destroy((uint64_t)&v227, v228);
  }
  return 0;
}

void sub_21134EDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56)
{
}

uint64_t std::map<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>::at(uint64_t a1, int *a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__find_equal<ZinIrDims3D>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 48;
}

uint64_t ZinMirDilatedConv::LowerDilatedConvolution(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v219 = *MEMORY[0x263EF8340];
  uint64_t v177 = *(void **)a2;
  uint64_t v4 = *(void *)(a3 + 200);
  if (!ZinConvLayer::IsDilated((ZinConvLayer *)v4)) {
    ZinAssertImpl("Composite Conv does not contain dilated conv\n");
  }
  uint64_t v151 = *(void *)(v4 + 16);
  uint64_t v157 = (ZinConvCompositeLayer *)a3;
  long long v159 = (void **)(a3 + 88);
  uint64_t v154 = **(ZinIrOpLayer ***)(a3 + 88);
  uint64_t v155 = v4;
  if (*(char *)(v4 + 47) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v4 + 47);
  }
  else {
    size_t v5 = *(void *)(v4 + 32);
  }
  p_src = &__src;
  std::string::basic_string[abi:ne180100]((uint64_t)&__src, v5 + 1);
  if (SBYTE7(__src_16[0]) < 0) {
    p_src = (int64x2_t *)__src.i64[0];
  }
  if (v5)
  {
    if (*(char *)(v155 + 47) >= 0) {
      long long v7 = (const void *)(v155 + 24);
    }
    else {
      long long v7 = *(const void **)(v155 + 24);
    }
    memmove(p_src, v7, v5);
  }
  *(__int16 *)((char *)p_src->i16 + v5) = 95;
  uint64_t v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v218, "lower_dilated_conv");
  long long v9 = std::string::append(v8, "_xfm", 4uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(void *)&v213[16] = *((void *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)long long v213 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v213[23] >= 0) {
    long long v11 = v213;
  }
  else {
    long long v11 = *(const std::string::value_type **)v213;
  }
  if (v213[23] >= 0) {
    std::string::size_type v12 = v213[23];
  }
  else {
    std::string::size_type v12 = *(void *)&v213[8];
  }
  long long v13 = std::string::append((std::string *)&__src, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(void *)uint64_t v198 = *((void *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  __n128 v15 = ZinObjectNameFactory::ZinObjectNameFactory(v184, __p);
  if ((v198[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  if ((v213[23] & 0x80000000) != 0) {
    operator delete(*(void **)v213);
  }
  if (SHIBYTE(v218.__end_cap_.__value_) < 0) {
    operator delete(v218.__begin_);
  }
  if (SBYTE7(__src_16[0]) < 0) {
    operator delete((void *)__src.i64[0]);
  }
  uint64_t v153 = (void *)(*(uint64_t (**)(ZinIrOpLayer *, void, void, __n128))(*(void *)v154 + 32))(v154, 0, 0, v15);
  uint64_t v152 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v155 + 32))(v155, 0, 0);
  unsigned int v176 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v154 + 32))(v154, 0, 0)+ 88);
  uint64_t v166 = *(void *)(v155 + 136);
  uint64_t v167 = (_DWORD *)(v166 + 456);
  v182[0] = 0;
  v182[1] = 0;
  int v183 = 0;
  if (*(unsigned char *)(*(void *)(a2 + 8) + 492))
  {
    __p[0] = (void *)0x100000001;
    LODWORD(__p[1]) = 1;
    std::vector<ZinIrCoordinateInfo>::__assign_with_size[abi:ne180100]<ZinIrCoordinateInfo*,ZinIrCoordinateInfo*>((char *)v182, (char *)__p, (uint64_t)&__p[1] + 4, 1uLL);
  }
  else
  {
    int WeightFormat = ZinIrKernel::GetWeightFormat((ZinIrKernel *)v166);
    BOOL HasPerCoutScale = ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v155 + 136));
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)HasPerCoutScale);
    int v165 = v18;
    int HasZeroPoint = (ZinIrHalH13g *)ZinIrKernel::HasZeroPoint(*(ZinIrKernel **)(v155 + 136));
    ZinIrHalH13g::~ZinIrHalH13g(HasZeroPoint);
    char v164 = v20;
    uint64_t v21 = *(void *)(v155 + 136);
    uint64_t v174 = *(ZinMirConvUtils **)(v21 + 416);
    char v162 = *(unsigned char *)(v21 + 173);
    unint64_t v163 = v153[7];
    if (WeightFormat == 6) {
      int v22 = 4;
    }
    else {
      int v22 = WeightFormat;
    }
    unsigned int v173 = v22;
    int64_t MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode((uint64_t)v177, v176);
    int64_t MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode((uint64_t)v177);
    uint64_t v25 = *(void *)(v166 + 464);
    uint64_t v26 = *(int *)(v166 + 528);
    uint64_t v27 = (*(void *)(v166 + 456) - 1) * v26;
    uint64_t v28 = *(int *)(v166 + 532);
    if (v27 >= MaxLogicalKernelWidthForLargeKernelMode) {
      int LowestFactorGreaterThan = FindLowestFactorGreaterThan(v26, (v27 + MaxLogicalKernelWidthForLargeKernelMode)/ MaxLogicalKernelWidthForLargeKernelMode);
    }
    else {
      int LowestFactorGreaterThan = 1;
    }
    uint64_t v30 = (v25 - 1) * v28;
    if (v30 >= MaxLogicalKernelHeightForLargeKernelMode) {
      int v31 = FindLowestFactorGreaterThan(*(int *)(v166 + 532), (v30 + MaxLogicalKernelHeightForLargeKernelMode) / MaxLogicalKernelHeightForLargeKernelMode);
    }
    else {
      int v31 = 1;
    }
    v186[0] = 0;
    v186[1] = 0;
    long long v187 = 0;
    GetAllIntegerFactors(*(_DWORD *)(v166 + 528), (int **)v213);
    GetAllIntegerFactors(*(_DWORD *)(v166 + 532), &v218.__begin_);
    long long v32 = *(_OWORD *)v213;
    if (*(void *)v213 != *(void *)&v213[8])
    {
      uint64_t v33 = (_DWORD *)(*(void *)&v213[8] - 4);
      if ((unint64_t)(*(void *)&v213[8] - 4) > *(void *)v213)
      {
        unint64_t v34 = *(void *)v213 + 4;
        do
        {
          int v35 = *(_DWORD *)(v34 - 4);
          *(_DWORD *)(v34 - 4) = *v33;
          *v33-- = v35;
          BOOL v111 = v34 >= (unint64_t)v33;
          v34 += 4;
        }
        while (!v111);
      }
    }
    int v36 = v218.__end_ - 1;
    BOOL v37 = v218.__begin_ != v218.__end_ && v36 > v218.__begin_;
    if (v37)
    {
      std::vector<int>::pointer v38 = v218.__begin_ + 1;
      do
      {
        int v39 = *(v38 - 1);
        *(v38 - 1) = *v36;
        *v36-- = v39;
        BOOL v111 = v38++ >= v36;
      }
      while (!v111);
    }
    uint64_t v40 = (_DWORD *)v32;
    if ((void)v32 != *((void *)&v32 + 1))
    {
      while (*v40 != LowestFactorGreaterThan)
      {
        if (++v40 == *((_DWORD **)&v32 + 1))
        {
          uint64_t v40 = (_DWORD *)*((void *)&v32 + 1);
          break;
        }
      }
    }
    std::vector<unsigned int>::resize((std::vector<int> *)v213, ((uint64_t)((uint64_t)v40 - v32) >> 2) + 1);
    std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = v218.__begin_;
    if (v218.__begin_ != v218.__end_)
    {
      while (*begin != v31)
      {
        if (++begin == v218.__end_)
        {
          std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = v218.__end_;
          break;
        }
      }
    }
    std::vector<unsigned int>::resize(&v218, begin - v218.__begin_ + 1);
    memset(__src_16, 0, sizeof(__src_16));
    int64x2_t __src = 0u;
    ZinMirDilatedConv::DecomposeDilationFactorX((uint64_t)v177, *(_DWORD *)(v166 + 528), (uint64_t)__p);
    std::deque<int>::__move_assign((uint64_t)&__src, (uint64_t)__p);
    int v42 = *(_DWORD *)&v198[32];
    std::deque<int>::~deque[abi:ne180100](__p);
    unint64_t v191 = 0;
    uint64_t v192 = 0;
    uint64_t v193 = 0;
    uint64_t v44 = *(_DWORD **)&v213[8];
    uint64_t v43 = *(_DWORD **)v213;
    if (v42 == 1)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v191, *(char **)v213, *(uint64_t *)&v213[8], (uint64_t)(*(void *)&v213[8] - *(void *)v213) >> 2);
    }
    else
    {
      __p[0] = &v191;
      while (v43 != v44)
      {
        if (*v43 % v42) {
          std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)__p, v43);
        }
        ++v43;
      }
    }
    uint64_t v45 = (unsigned int *)v191;
    uint64_t v156 = v192;
    if (v191 != v192)
    {
      uint64_t v46 = (uint64_t)v174;
      if (v173 - 7 >= 0x15) {
        uint64_t v46 = 1;
      }
      unint64_t v171 = (ZinIrCodegenKernelUtil *)v46;
      do
      {
        long long v160 = v45;
        std::vector<int>::pointer v47 = v218.__begin_;
        std::vector<int>::pointer end = v218.__end_;
        if (v218.__begin_ != v218.__end_)
        {
          uint64_t v168 = *v45;
          do
          {
            unint64_t v170 = v168 | ((unint64_t)*v47 << 32);
            unint64_t v194 = v170;
            LODWORD(v195) = 1;
            *(int64x2_t *)std::string __p = vdupq_n_s64(1uLL);
            *(void *)uint64_t v198 = 1;
            *(void *)&long long v48 = 0x100000001;
            *((void *)&v48 + 1) = 0x100000001;
            *(_OWORD *)&v198[8] = v48;
            *(void *)&v198[24] = 0x100000001;
            memset(&v198[32], 0, 24);
            *(_OWORD *)&v198[56] = v48;
            *(void *)&v198[72] = 1;
            LOWORD(v199) = 0;
            DWORD1(v199) = 0;
            ZinMirDilatedConv::ConvertDilatedConvInfoStruct((uint64_t)v167, (int32x2_t *)&v194, (uint64_t)__p);
            uint64_t v50 = *(void *)(v166 + 456);
            uint64_t v49 = *(void *)(v166 + 464);
            uint64_t v51 = __p[0];
            uint64_t v52 = __p[1];
            uint64_t v216 = 0x100000001;
            LODWORD(v217) = 1;
            int64_t EstimatedFootprintPerCoutElement = ZinKernelGetEstimatedFootprintPerCoutElement(v163 / *(void *)&v198[72], 0, (int *)&v216, (int8x16_t *)__p, v176, v173, v177, v165, v164, (uint64_t)v174);
            int v54 = *(_DWORD *)&v198[20];
            int v55 = *(_DWORD *)&v198[24];
            int v56 = *(_DWORD *)&v198[28];
            unint64_t v57 = ZinCalculateMaxCompressionOverhead((uint64_t)v177, EstimatedFootprintPerCoutElement, v171, v173, 0, v162, (int *)&v198[20], v176, v174);
            char MustEnableFillLowerNEFirst = ZinMirConvUtils::MustEnableFillLowerNEFirst(v174);
            if (v57
               + vcvtps_s32_f32((float)((float)((float)(v49 * v50) / (float)(uint64_t)((void)v52 * (void)v51))* (float)EstimatedFootprintPerCoutElement)* (float)(v55 * v54 * v56))+ ZinIrCodegenKernelUtil::ZinCalculateMaxScaleBiasZeroPointDuplicationAndRoundUpSize(v171, (int *)&v198[20], (uint64_t)v177, 0, v176, (unint64_t)v171, MustEnableFillLowerNEFirst) <= v177[60])
            {
              unsigned int v59 = v186[1];
              if (v186[1] >= v187)
              {
                unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v186[1] - (char *)v186[0]) >> 2);
                unint64_t v62 = v61 + 1;
                if (v61 + 1 > 0x1555555555555555) {
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((v187 - (char *)v186[0]) >> 2) > v62) {
                  unint64_t v62 = 0x5555555555555556 * ((v187 - (char *)v186[0]) >> 2);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v187 - (char *)v186[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v63 = 0x1555555555555555;
                }
                else {
                  unint64_t v63 = v62;
                }
                if (v63) {
                  long long v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)&v187, v63);
                }
                else {
                  long long v64 = 0;
                }
                int32x2_t v65 = &v64[12 * v61];
                *(void *)int32x2_t v65 = v170;
                *((_DWORD *)v65 + 2) = 1;
                uint64_t v67 = v186[0];
                uint64_t v66 = v186[1];
                int v68 = v65;
                if (v186[1] != v186[0])
                {
                  do
                  {
                    uint64_t v69 = *(void *)(v66 - 3);
                    v66 -= 3;
                    int v70 = v66[2];
                    *(void *)(v68 - 12) = v69;
                    v68 -= 12;
                    *((_DWORD *)v68 + 2) = v70;
                  }
                  while (v66 != v67);
                  uint64_t v66 = v186[0];
                }
                int v60 = v65 + 12;
                v186[0] = v68;
                v186[1] = v65 + 12;
                long long v187 = &v64[12 * v63];
                if (v66) {
                  operator delete(v66);
                }
              }
              else
              {
                *(void *)v186[1] = v170;
                v59[2] = 1;
                int v60 = v59 + 3;
              }
              v186[1] = v60;
            }
            ++v47;
          }
          while (v47 != end);
        }
        uint64_t v45 = v160 + 1;
      }
      while (v160 + 1 != v156);
      uint64_t v45 = (unsigned int *)v191;
    }
    if (v45)
    {
      uint64_t v192 = v45;
      operator delete(v45);
    }
    std::deque<int>::~deque[abi:ne180100](&__src);
    if (v218.__begin_)
    {
      v218.__end_ = v218.__begin_;
      operator delete(v218.__begin_);
    }
    if (*(void *)v213)
    {
      *(void *)&v213[8] = *(void *)v213;
      operator delete(*(void **)v213);
    }
    if (v182[0])
    {
      v182[1] = v182[0];
      operator delete(v182[0]);
    }
    *(_OWORD *)int v182 = *(_OWORD *)v186;
    int v183 = v187;
  }
  uint64_t v172 = *((void *)v157 + 12);
  uint64_t v71 = *((void *)v157 + 25);
  if (*(char *)(v71 + 47) >= 0) {
    size_t v72 = *(unsigned __int8 *)(v71 + 47);
  }
  else {
    size_t v72 = *(void *)(v71 + 32);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v72 + 16);
  if (v198[7] >= 0) {
    uint64_t v73 = __p;
  }
  else {
    uint64_t v73 = (void **)__p[0];
  }
  if (v72)
  {
    if (*(char *)(v71 + 47) >= 0) {
      uint64_t v74 = (const void *)(v71 + 24);
    }
    else {
      uint64_t v74 = *(const void **)(v71 + 24);
    }
    memmove(v73, v74, v72);
  }
  strcpy((char *)v73 + v72, "_legalizer_test_");
  ZinObjectNameFactory::ZinObjectNameFactory(v213, __p);
  if ((v198[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  if (v182[0] == v182[1]
    || (v186[0] = 0, v186[1] = 0, long long v187 = 0, (int)(-1431655765 * (((char *)v182[1] - (char *)v182[0]) >> 2)) < 1))
  {
    int v99 = 3;
    goto LABEL_146;
  }
  int32x2_t v175 = vadd_s32(*(int32x2_t *)(*(void *)(v71 + 136) + 384), (int32x2_t)0x100000001);
  uint64_t v75 = -1431655765 * (((char *)v182[1] - (char *)v182[0]) >> 2);
  do
  {
    unint64_t v76 = (int32x2_t *)((char *)v182[0] + 12 * (v75 - 1));
    if (v76->i32[0] >= v175.i32[0] && *((_DWORD *)v182[0] + 3 * (v75 - 1) + 1) >= v175.i32[1])
    {
      uint64_t v84 = (int32x2_t *)v186[1];
      if (v186[1] >= v187)
      {
        unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * (((char *)v186[1] - (char *)v186[0]) >> 2);
        unint64_t v88 = v87 + 1;
        if (v87 + 1 > 0x1555555555555555) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v187 - (char *)v186[0]) >> 2) > v88) {
          unint64_t v88 = 0x5555555555555556 * ((v187 - (char *)v186[0]) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v187 - (char *)v186[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v89 = 0x1555555555555555;
        }
        else {
          unint64_t v89 = v88;
        }
        if (v89) {
          uint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)&v187, v89);
        }
        else {
          uint64_t v90 = 0;
        }
        uint64_t v91 = &v90[12 * v87];
        int32x2_t v92 = *v76;
        *((_DWORD *)v91 + 2) = v76[1].i32[0];
        *(int32x2_t *)uint64_t v91 = v92;
        uint64_t v94 = v186[0];
        long long v93 = v186[1];
        uint64_t v95 = v91;
        if (v186[1] != v186[0])
        {
          do
          {
            uint64_t v96 = *(void *)(v93 - 3);
            v93 -= 3;
            int v97 = v93[2];
            *(void *)(v95 - 12) = v96;
            v95 -= 12;
            *((_DWORD *)v95 + 2) = v97;
          }
          while (v93 != v94);
          long long v93 = v186[0];
        }
        uint64_t v86 = v91 + 12;
        v186[0] = v95;
        v186[1] = v91 + 12;
        long long v187 = &v90[12 * v89];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        int32x2_t v85 = *v76;
        *((_DWORD *)v186[1] + 2) = v76[1].i32[0];
        *uint64_t v84 = v85;
        uint64_t v86 = (char *)&v84[1] + 4;
      }
      v186[1] = v86;
    }
    else
    {
      uint64_t v77 = *(void *)(v172 - 8);
      uint64_t v78 = *(void *)a2;
      uint64_t v79 = *(void *)(v71 + 136);
      LODWORD(v18std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v77 + 32))(v77, 0, 0)+ 88);
      ZinMirDilatedConv::CreateDilatedConvKernel(v78, v79 + 456, (unsigned int *)&v180, v76, v71, (uint64_t *)&v215);
      uint64_t v80 = (uint64_t)v215;
      if (v215)
      {
        uint64_t v81 = v215[33];
        v218.__begin_ = v215[34];
        v218.__end_ = v81;
        v218.__end_cap_.__value_ = v215[35];
        uint64_t v82 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v77 + 32))(v77, 0, 0);
        uint64_t v83 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v71 + 32))(v71, 0, 0)
                        + 56);
        __src.i64[0] = 0x100000001;
        __src.i32[2] = 1;
        ZinGetOutputTensorDimension(v82 + 48, &v218, (unsigned int *)(v80 + 328), (unsigned int *)(v80 + 340), (int *)(v80 + 352), v83, __src.i32, (uint64_t)__p);
        (*(void (**)(uint64_t, void, void))(*(void *)v71 + 32))(v71, 0, 0);
        (*(void (**)(void **__return_ptr, unsigned char *, void))(*(void *)v213 + 16))(&v191, v213, 0);
        unint64_t v190 = 0;
        uint64_t v216 = 0;
        uint64_t v217 = 0;
        __src.i32[0] = 0;
        memset(__src_16, 0, 20);
        __src.i64[1] = 0;
        ZinIrTensor::CreateTensor();
      }
    }
    BOOL v37 = v75-- <= 1;
  }
  while (!v37);
  unint64_t v98 = v186[0];
  if (v186[0] == v186[1])
  {
    int v99 = 3;
    if (!v186[0]) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }
  std::vector<ZinIrCoordinateInfo>::__assign_with_size[abi:ne180100]<ZinIrCoordinateInfo*,ZinIrCoordinateInfo*>((char *)v182, (char *)v186[0], (uint64_t)v186[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v186[1] - (char *)v186[0]) >> 2));
  int v99 = 0;
  unint64_t v98 = v186[0];
  if (v186[0])
  {
LABEL_145:
    v186[1] = v98;
    operator delete(v98);
  }
LABEL_146:
  *(void *)long long v213 = &unk_26C34DA98;
  if ((v213[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v213[8]);
  }
  if (v99) {
    ZinAssertImpl("Error: Dilated convolution cannot be lowered since all possible space-to-batch implementations exceeded the L2 DMA buffer size");
  }
  unint64_t v191 = 0;
  uint64_t v192 = 0;
  uint64_t v193 = 0;
  v186[0] = 0;
  v186[1] = 0;
  long long v187 = 0;
  int v100 = ZinIrKernel::GetWeightFormat(*(ZinIrKernel **)(v155 + 136));
  if (ZinMirDilatedConv::DecomposeDilatedConv((uint64_t)(v153 + 6), v152 + 48, v176, v167, v100, a2, (uint64_t)v182, (char *)&v191, (uint64_t *)v186))goto LABEL_150; {
  uint64_t v188 = 0x100000001;
  }
  __int32 v102 = 1;
  LODWORD(v189) = 1;
  uint64_t v103 = v186[0];
  if (v186[0] == v186[1])
  {
    __int32 v105 = 1;
  }
  else
  {
    do
    {
      if (*(_DWORD *)v103 == 34)
      {
        uint64_t v104 = v103[11];
        LODWORD(v189) = *((_DWORD *)v103 + 24);
        uint64_t v188 = v104;
      }
      v103 += 43;
    }
    while (v103 != v186[1]);
    __int32 v105 = v188;
    __int32 v102 = HIDWORD(v188);
  }
  BOOL v107 = v105 == 1 && v102 == 1;
  if (*(unsigned char *)(v151 + 668) && !v107) {
    ZinAssertImpl("Dynamic shape dilated conv cannot use SpaceToBatch approach");
  }
  if (!v107)
  {
    long long v108 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v154 + 32))(v154, 0, 0);
    unint64_t Interleave = ZinIrTensor::GetInterleave(v108);
    if (v110) {
      BOOL v111 = Interleave >= 2;
    }
    else {
      BOOL v111 = 0;
    }
    if (v111)
    {
      uint64_t v112 = *((void *)v154 + 2);
      uint64_t v113 = *(unsigned int *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v154 + 32))(v154, 0, 0)+ 88);
      uint64_t v181 = 0;
      CopyLayer = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v112, (uint64_t)v154, (uint64_t)v184, v113, (uint64_t *)&v181);
      uint64_t v115 = v181;
      uint64_t v181 = 0;
      if (v115) {
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v181, v115);
      }
      *(void *)long long v213 = *((void *)v157 + 25);
      __src.i64[0] = (uint64_t)v213;
      __src.i64[1] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &__src);
      ZinIrOpLayerGraph::AddNode(a1, CopyLayer, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_26C359A08;
      if (__p[1])
      {
        *(void **)uint64_t v198 = __p[1];
        operator delete(__p[1]);
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v154, (uint64_t)CopyLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      uint64_t v154 = CopyLayer;
    }
    uint64_t v116 = v153[9] % (int)v188;
    if (v116) {
      uint64_t v117 = (int)v188 - v116;
    }
    else {
      uint64_t v117 = 0;
    }
    uint64_t v118 = v153[8] % SHIDWORD(v188);
    if (v118) {
      uint64_t v119 = SHIDWORD(v188) - v118;
    }
    else {
      uint64_t v119 = 0;
    }
    if (v117 | v119)
    {
      *(int64x2_t *)long long v213 = vdupq_n_s64(1uLL);
      *(_OWORD *)&v213[16] = *(_OWORD *)v213;
      uint64_t v214 = 1;
      memset(v198, 0, 20);
      __p[1] = 0;
      memset(&v198[24], 0, 32);
      *(void *)&v198[56] = -1;
      *(_OWORD *)&v198[64] = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      memset(v201, 0, sizeof(v201));
      long long v202 = 0u;
      long long v203 = 0u;
      uint64_t v204 = 0;
      __p[0] = &unk_26C3499A0;
      memset(v205, 0, sizeof(v205));
      __int16 v206 = 0;
      uint64_t v120 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v154 + 32))(v154, 0, 0);
      int v121 = *(_DWORD *)(v120 + 88);
      long long v122 = *(_OWORD *)(v120 + 64);
      *(_OWORD *)long long v213 = *(_OWORD *)(v120 + 48);
      *(_OWORD *)&v213[16] = v122;
      uint64_t v214 = *(void *)(v120 + 80);
      *(void *)&v213[16] = v122 + v119;
      *(void *)&v213[24] = *((void *)&v122 + 1) + v117;
      *(_DWORD *)&v198[16] = 44;
      *(_DWORD *)&v198[48] = v121;
      *(_DWORD *)&v198[52] = v121;
      int64x2_t __src = (int64x2_t)xmmword_211EE25D0;
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v205, __src.i8, (uint64_t)__src_16, 2uLL);
      long long v202 = 0u;
      long long v203 = 0u;
      DWORD1(v202) = v117;
      HIDWORD(v202) = v119;
      ZinConvCompositeLayer::GetDequantizedPadInfo(v157, (ZinIrPadUnitInfo *)__p);
      (*(void (**)(int64x2_t *__return_ptr))(*(void *)v154 + 80))(&__src);
      uint64_t v123 = operator new(0x78uLL);
      v218.__end_ = v123 + 30;
      v218.__end_cap_.__value_ = v123 + 30;
      v123[28] = v212;
      long long v124 = v211;
      long long v125 = *(_OWORD *)v210;
      *((_OWORD *)v123 + 5) = *(_OWORD *)&v210[16];
      *((_OWORD *)v123 + 6) = v124;
      long long v126 = __src_16[0];
      *(int64x2_t *)uint64_t v123 = __src;
      *((_OWORD *)v123 + 1) = v126;
      long long v127 = v209;
      *((_OWORD *)v123 + 2) = __src_16[1];
      *((_OWORD *)v123 + 3) = v127;
      *((_OWORD *)v123 + 4) = v125;
      v218.__begin_ = v123;
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)v154 + 32))(v154, 0, 0);
      ZinBuilder::CreatePadLayer(v151, (uint64_t)v184);
    }
    (*(void (**)(void **__return_ptr, ZinIrOpLayer *, void, void))(*(void *)v154 + 80))(__p, v154, 0, 0);
    uint64_t v128 = operator new(0x78uLL);
    *(void *)&__src_16[0] = (char *)v128 + 120;
    long long v129 = *(_OWORD *)&v198[64];
    v128[4] = *(_OWORD *)&v198[48];
    v128[5] = v129;
    v128[6] = v199;
    *((_DWORD *)v128 + 28) = v200;
    long long v130 = *(_OWORD *)v198;
    *uint64_t v128 = *(_OWORD *)__p;
    v128[1] = v130;
    long long v131 = *(_OWORD *)&v198[32];
    v128[2] = *(_OWORD *)&v198[16];
    v128[3] = v131;
    __src.i64[0] = (uint64_t)v128;
    __src.i64[1] = (uint64_t)v128 + 120;
    ZinIrSpaceToBatchInfo::ZinIrSpaceToBatchInfo((uint64_t)v213, &v188);
    ZinBuilder::CreateSpaceToBatch();
  }
  LODWORD(__p[0]) = *(_DWORD *)((*(uint64_t (**)(void, void, void))(*(void *)**v159 + 32))(**v159, 0, 0)+ 88);
  ZinMirDilatedConv::CreateDilatedConvKernel((uint64_t)v177, (uint64_t)v167, (unsigned int *)__p, (int32x2_t *)&v188, v155, (uint64_t *)&v190);
  uint64_t v132 = v190;
  if (!v190)
  {
LABEL_150:
    uint64_t v101 = 3;
  }
  else
  {
    uint64_t v133 = *((void *)v190 + 33);
    unint64_t v194 = *((void *)v190 + 34);
    uint64_t v195 = v133;
    uint64_t v196 = *((void *)v190 + 35);
    uint64_t v180 = 0;
    uint64_t v134 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v154 + 32))(v154, 0, 0);
    uint64_t v135 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v155 + 32))(v155, 0, 0) + 56);
    __p[0] = (void *)0x100000001;
    LODWORD(__p[1]) = 1;
    ZinGetOutputTensorDimension(v134 + 48, &v194, (unsigned int *)v132 + 82, (unsigned int *)v132 + 85, (int *)v132 + 88, v135, (int *)__p, (uint64_t)v213);
    uint64_t DecomposedPartition = ZinConvCompositeLayer::CreateDecomposedPartition((uint64_t)v157, (uint64_t)&v190, (uint64_t)&v180, 0, 0, (uint64_t)v213, v151, (uint64_t)a1, (uint64_t)v184);
    uint64_t v137 = (ZinIrOpLayer *)DecomposedPartition;
    if (!DecomposedPartition) {
      ZinAssertImpl("Failed to create Composite partition");
    }
    if (!v107)
    {
      (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)DecomposedPartition + 80))(__p, DecomposedPartition, 0, 0);
      unint64_t v138 = operator new(0x78uLL);
      *(void *)&__src_16[0] = (char *)v138 + 120;
      long long v139 = *(_OWORD *)&v198[64];
      v138[4] = *(_OWORD *)&v198[48];
      v138[5] = v139;
      v138[6] = v199;
      *((_DWORD *)v138 + 28) = v200;
      long long v140 = *(_OWORD *)v198;
      *unint64_t v138 = *(_OWORD *)__p;
      v138[1] = v140;
      long long v141 = *(_OWORD *)&v198[32];
      v138[2] = *(_OWORD *)&v198[16];
      v138[3] = v141;
      __src.i64[0] = (uint64_t)v138;
      __src.i64[1] = (uint64_t)v138 + 120;
      ZinIrBatchToSpaceInfo::ZinIrBatchToSpaceInfo((uint64_t)&v218, &v188);
      ZinBuilder::CreateBatchToSpace();
    }
    int64x2_t __src = vdupq_n_s64(1uLL);
    *(void *)&__src_16[0] = 1;
    *(void *)&long long v142 = 0x100000001;
    *((void *)&v142 + 1) = 0x100000001;
    *(_OWORD *)((char *)__src_16 + 8) = v142;
    *((void *)&__src_16[1] + 1) = 0x100000001;
    *(void *)uint64_t v210 = 0;
    long long v209 = 0uLL;
    *(_OWORD *)&v210[8] = v142;
    *(_DWORD *)&v210[24] = 2;
    v210[28] = 0;
    LODWORD(v211) = 1065353216;
    BYTE4(v211) = 0;
    DWORD2(v211) = 0;
    if (ZinMirDilatedConv::NeedDownsample((int *)&v188, v167, (uint64_t)&__src))
    {
      (*(void (**)(uint64_t, void, void))(*(void *)v155 + 32))(v155, 0, 0);
      (*(void (**)(void **__return_ptr, ZinIrOpLayer *, void, void))(*(void *)v137 + 80))(__p, v137, 0, 0);
      uint64_t v143 = (char *)operator new(0x78uLL);
      v218.__end_ = (std::vector<int>::pointer)(v143 + 120);
      v218.__end_cap_.__value_ = (int *)(v143 + 120);
      long long v144 = *(_OWORD *)&v198[64];
      *((_OWORD *)v143 + 4) = *(_OWORD *)&v198[48];
      *((_OWORD *)v143 + 5) = v144;
      *((_OWORD *)v143 + 6) = v199;
      *((_DWORD *)v143 + 28) = v200;
      long long v145 = *(_OWORD *)v198;
      *(_OWORD *)uint64_t v143 = *(_OWORD *)__p;
      *((_OWORD *)v143 + 1) = v145;
      long long v146 = *(_OWORD *)&v198[32];
      *((_OWORD *)v143 + 2) = *(_OWORD *)&v198[16];
      *((_OWORD *)v143 + 3) = v146;
      v218.__begin_ = (std::vector<int>::pointer)v143;
      ZinBuilder::CreatePool(v151, (uint64_t)v184, &v218, (long long *)__src.i8);
    }
    memset(v178, 0, sizeof(v178));
    int v179 = 1065353216;
    char v147 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v157, v137, v178);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v178);
    if ((v147 & 1 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v157, 0)) == 0) {
      ZinAssertImpl("ANE internal failure: dilated conv graph manipulation error");
    }
    uint64_t v148 = v180;
    uint64_t v180 = 0;
    if (v148)
    {
      ZinIrKernel::~ZinIrKernel(v148);
      MEMORY[0x21667D3C0]();
    }
    uint64_t v149 = v190;
    unint64_t v190 = 0;
    if (v149)
    {
      ZinIrKernel::~ZinIrKernel(v149);
      MEMORY[0x21667D3C0]();
    }
    uint64_t v101 = 0;
  }
  __p[0] = v186;
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v191)
  {
    uint64_t v192 = (unsigned int *)v191;
    operator delete(v191);
  }
  if (v182[0])
  {
    v182[1] = v182[0];
    operator delete(v182[0]);
  }
  v184[0] = &unk_26C34DA98;
  if (v185 < 0) {
    operator delete((void *)v184[1]);
  }
  return v101;
}

void sub_211351100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,ZinIrKernel *a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  *(void *)(v71 - 152) = &unk_26C359A08;
  uint64_t v73 = *(void **)(v71 - 144);
  if (v73)
  {
    *(void *)(v71 - 136) = v73;
    operator delete(v73);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a69, 0);
  *(void *)(v71 - 224) = &a64;
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)(v71 - 224));
  if (__p)
  {
    a71 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  a56 = (uint64_t)&unk_26C34DA98;
  if (a62 < 0) {
    operator delete(a57);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirDilatedConv::NeedsExtraPadRemoval(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v3 = *a2;
  v5 = a3[12] % (int)v3 || a3[13] % (int)v3 || (int v4 = a2[1], a3[14] % v4) || a3[15] % v4 != 0;
  if (*(void *)(a1 + 24) % v3) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = *(void *)(a1 + 16) % a2[1] != 0;
  }
  return v5 | v6;
}

uint64_t ZinMirDilatedConv::NeedDownsample(int *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = 0;
  *(void *)(a3 + 84) = 2;
  *(unsigned char *)(a3 + 92) = 0;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(unsigned char *)(a3 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  if (*a1 >= 2)
  {
    int v5 = a2[6];
    if (v5 >= 2 && a2[9] == 1)
    {
      *(_DWORD *)(a3 + 24) = v5;
      uint64_t result = 1;
    }
    else
    {
      uint64_t result = 0;
    }
  }
  if (a1[1] >= 2)
  {
    int v7 = a2[7];
    if (v7 >= 2 && a2[10] == 1)
    {
      *(_DWORD *)(a3 + 28) = v7;
      uint64_t result = 1;
    }
  }
  if (a1[2] >= 2)
  {
    int v9 = a2[8];
    if (v9 >= 2 && a2[11] == 1)
    {
      *(_DWORD *)(a3 + 32) = v9;
      return 1;
    }
  }
  return result;
}

uint64_t ZinMirDilatedConv::DecomposeDilationFactorX@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  std::string __p = 0;
  long long v16 = 0;
  uint64_t v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&__p, (uint64_t *)(a1 + 1656), (uint64_t *)(a1 + 1688), 4uLL);
  if (!a2) {
    ZinAssertImpl("Error: Dilation factor cannot be 0.");
  }
  if (Factorize(a2, (int **)&__p, &v18))
  {
    int v5 = 1;
  }
  else
  {
    if ((void)v19 == *((void *)&v18 + 1)
      || (BOOL v6 = (char **)(*((void *)&v18 + 1) + 8 * ((unint64_t)v20 >> 10)),
          int v7 = *v6,
          uint64_t v8 = &(*v6)[4 * (v20 & 0x3FF)],
          uint64_t v9 = *(void *)(*((void *)&v18 + 1) + (((*((void *)&v20 + 1) + (void)v20) >> 7) & 0x1FFFFFFFFFFFFF8))
             + 4 * ((*((void *)&v20 + 1) + v20) & 0x3FF),
          v8 == (char *)v9))
    {
      int v10 = 1;
    }
    else
    {
      int v10 = 1;
      do
      {
        int v12 = *(_DWORD *)v8;
        v8 += 4;
        int v11 = v12;
        if (v8 - v7 == 4096)
        {
          long long v13 = v6[1];
          ++v6;
          int v7 = v13;
          uint64_t v8 = v13;
        }
        v10 *= v11;
      }
      while (v8 != (char *)v9);
    }
    int v5 = a2 / v10;
  }
  std::deque<int>::deque(a3, &v18);
  *(_DWORD *)(a3 + 48) = v5;
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
  return std::deque<int>::~deque[abi:ne180100](&v18);
}

void sub_2113518CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(uint64_t *a1, const ZinMirDilatedConv::DilatedConvDecomposedDesc *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x5F417D05F417D0) {
    unint64_t v9 = 0xBE82FA0BE82FA0;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  long long v13 = v10;
  long long v14 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)&v10[344 * v4];
  long long v16 = &v10[344 * v9];
  ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v14, a2);
  __n128 v15 = (char *)v14 + 344;
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ZinMirDilatedConv::DilatedConvDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_211351A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinMirDilatedConv::DilatedConvDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    int v12 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v12, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinMirDilatedConv::DilatedConvDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 344;
    ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(i - 344));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__emplace_unique_key_args<ZinIrDims3D,std::piecewise_construct_t const&,std::tuple<ZinIrDims3D const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__find_equal<ZinIrDims3D>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x48uLL);
    int v9 = *((_DWORD *)*a4 + 2);
    v7[4] = **a4;
    *((_DWORD *)v7 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v9;
    v7[7] = 0;
    v7[8] = 0;
    v7[6] = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__find_equal<ZinIrDims3D>(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a3 + 1;
    uint64_t v8 = a3 + 2;
    do
    {
      while (1)
      {
        int v9 = (void *)v4;
        uint64_t v10 = (int *)(v4 + 32);
        uint64_t v17 = a3;
        long long v18 = v7;
        long long v19 = v8;
        uint64_t v11 = (int *)(v4 + 36);
        int v12 = (int *)(v4 + 40);
        long long v14 = (int *)(v4 + 32);
        __n128 v15 = (int *)(v4 + 36);
        long long v16 = (int *)(v4 + 40);
        if ((std::__tuple_compare_three_way[abi:ne180100]<int const&,int const&,int const&,int const&,int const&,int const&,0ul,1ul,2ul>(&v17, &v14) & 0x80) == 0)break; {
        uint64_t v4 = *v9;
        }
        uint64_t v5 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      uint64_t v17 = v10;
      long long v18 = v11;
      long long v19 = v12;
      long long v14 = a3;
      __n128 v15 = v7;
      long long v16 = v8;
      if ((std::__tuple_compare_three_way[abi:ne180100]<int const&,int const&,int const&,int const&,int const&,int const&,0ul,1ul,2ul>(&v17, &v14) & 0x80) == 0)break; {
      uint64_t v5 = v9 + 1;
      }
      uint64_t v4 = v9[1];
    }
    while (v4);
  }
  else
  {
    int v9 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v9;
  return v5;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<int const&,int const&,int const&,int const&,int const&,int const&,0ul,1ul,2ul>(int **a1, int **a2)
{
  int v2 = **a1;
  int v3 = **a2;
  BOOL v4 = v2 == v3;
  if (v2 < v3) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 1;
  }
  if (v4)
  {
    int v6 = *a1[1];
    int v7 = *a2[1];
    BOOL v8 = v6 == v7;
    uint64_t v5 = v6 < v7 ? 0xFFFFFFFFLL : 1;
    if (v8)
    {
      int v9 = *a1[2];
      int v10 = *a2[2];
      BOOL v11 = v9 == v10;
      if (v9 < v10) {
        LODWORD(v5) = -1;
      }
      else {
        LODWORD(v5) = 1;
      }
      if (v11) {
        return 0;
      }
      else {
        return v5;
      }
    }
  }
  return v5;
}

void std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__vdeallocate((void **)a1);
    if (a4 > 0xBE82FA0BE82FA0) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5F417D05F417D06 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x5F417D05F417D0) {
      unint64_t v11 = 0xBE82FA0BE82FA0;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<LargeStrideConvPoolDecomposedDesc>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v16 - 344));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_211351EC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_211351ED0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    BOOL v4 = v1;
    if (v3 != v1)
    {
      do
        ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v3 - 344));
      while (v3 != v1);
      BOOL v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(a4 + v7), (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)(a2 + v7));
      v7 += 344;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_211351F98(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 344;
    do
    {
      ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v4 + v2));
      v2 -= 344;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      ZinMirDilatedConv::DilatedConvDecomposedDesc::operator=(a3, v4);
      v4 += 344;
      a3 += 344;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::deque<int>::__move_assign(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 512;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  std::deque<int>::shrink_to_fit((void **)a1);
  uint64_t result = std::__split_buffer<int *>::operator=(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  return result;
}

void std::deque<int>::shrink_to_fit(void **a1)
{
  if (a1[5])
  {
    std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    int v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      int v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  std::__split_buffer<int *>::shrink_to_fit(a1);
}

uint64_t std::deque<int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<int>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__split_buffer<int *>::shrink_to_fit(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v10 = 0;
    int v7 = 0;
    goto LABEL_8;
  }
  int v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v2, v6);
  uint64_t v8 = a1[1];
  unint64_t v5 = a1[2];
  unint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    uint64_t v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  unint64_t v5 = a1[1];
  uint64_t v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  uint64_t v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t std::__split_buffer<int *>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<int *>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(_DWORD **)(*a1 + 8);
  unint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)v6, v12);
      uint64_t v8 = *(_DWORD **)v4;
      uint64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    int64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    int v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    int v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::deque<int>::deque(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  int v7 = (char **)(v5 + 8 * (v4 >> 10));
  if (v6 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v11 = 0;
    unint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 10));
  }
  else
  {
    uint64_t v8 = &(*v7)[4 * (v4 & 0x3FF)];
    unint64_t v9 = a2[5] + v4;
    unint64_t v10 = (char *)(v5 + 8 * (v9 >> 10));
    uint64_t v11 = (char *)(*(void *)v10 + 4 * (v9 & 0x3FF));
  }
  std::deque<int>::__append<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_2113524E0(_Unwind_Exception *a1)
{
  std::__split_buffer<unsigned long *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void *std::deque<int>::__append<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 2) + ((a4 - (char *)a2) << 7) - ((a3 - *a2) >> 2);
  }
  return std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(a1, a2, a3, v5);
}

void *std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(void *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 7) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<int>::__add_back_capacity(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 10));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 4 * (v11 & 0x3FF);
  }
  v24[0] = v8 + 8 * (v11 >> 10);
  v24[1] = v14;
  uint64_t result = std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)v24, a4);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        long long v19 = *a2;
        long long v20 = (_DWORD *)v14;
        do
        {
          int v21 = *(_DWORD *)a3;
          a3 += 4;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            int v22 = a2[1];
            ++a2;
            long long v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_DWORD *)v18);
      }
      v17 += (v18 - v14) >> 2;
      if (v13 == result) {
        break;
      }
      uint64_t v23 = v13[1];
      ++v13;
      uint64_t v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void std::deque<int>::__add_back_capacity(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x3FF) != 0) {
    unint64_t v6 = (v5 >> 10) + 1;
  }
  else {
    unint64_t v6 = v5 >> 10;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 10) {
    unint64_t v8 = v7 >> 10;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          std::string v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v28);
          int v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            int v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)int v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          BOOL v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 1023;
          }
          else {
            uint64_t v64 = 1024;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 10);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int32x2_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int32x2_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              unint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v91 = a1 + 3;
      if (v13) {
        int64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v13);
      }
      else {
        int64_t v15 = 0;
      }
      uint64_t v38 = v8 << 10;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        unint64_t v88 = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        int v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                int v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)int v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              std::vector<int>::pointer v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          int v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      unint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<unsigned long *>::push_front((uint64_t)__p, v57);
      }
      unsigned int v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_211352B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 2);
    if (v4 < 1) {
      result -= (unint64_t)(1023 - v4) >> 10;
    }
    else {
      result += (unint64_t)v4 >> 10;
    }
  }
  return result;
}

void std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 48);
    std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t ZinParseRadiusSearchUnit(CFDictionaryRef *a1, uint64_t a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, @"Params");
  if (Value && (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(v6, @"Radius");
    if (v8)
    {
      CFNumberRef v9 = v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberFloatType, &valuePtr);
        uint64_t result = 0;
        *(_DWORD *)(a2 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = valuePtr;
        return result;
      }
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseRadiusSearchUnit();
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    ZinParseRadiusSearchUnit();
  }
  ZinIrUnitStatus::SetError(a3, @"InvalidParamSyntax");
  return 3;
}

void ZinParseRadiusSearchUnit()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Missing RadiusSearch parameter dictionary\n", v0, 2u);
}

{
  uint8_t v0[16];

  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Missing RadiusSearch radius value\n", v0, 2u);
}

uint64_t ZinParseScaledEWUnit(const __CFDictionary *a1, uint64_t a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (!Value || (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    CFStringRef v12 = @"InvalidParamSyntax";
LABEL_11:
    ZinIrUnitStatus::SetError(a3, v12);
    return 3;
  }
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(v6, @"Type");
  if (!v8 || (CFStringRef v9 = v8, v10 = CFGetTypeID(v8), v10 != CFStringGetTypeID()))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseScaledEWUnit();
    }
LABEL_10:
    CFStringRef v12 = @"InvalidUnitScaledElementWiseType";
    goto LABEL_11;
  }
  if (!ZinCFStringEquals(v9, @"Add"))
  {
    if (ZinCFStringEquals(v9, @"Mult"))
    {
      int v11 = 2;
      goto LABEL_21;
    }
    if (ZinCFStringEquals(v9, @"Max"))
    {
      int v11 = 4;
      goto LABEL_21;
    }
    if (ZinCFStringEquals(v9, @"Min"))
    {
      int v11 = 5;
      goto LABEL_21;
    }
    if (ZinCFStringEquals(v9, @"SumSquare"))
    {
      int v11 = 3;
      goto LABEL_21;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseScaledEWUnit();
    }
    goto LABEL_10;
  }
  int v11 = 1;
LABEL_21:
  *(_DWORD *)(a2 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v11;
  uint64_t v15 = 0;
  int v14 = 0;
  uint64_t result = ZinGetFloatFormat(v6, @"PreScaleType", (int *)&v15 + 1, a3);
  if (result != 3)
  {
    uint64_t result = ZinGetFloatFormat(v6, @"ScaleType", (int *)&v15, a3);
    if (result != 3)
    {
      if (!CFDictionaryGetValue(v6, @"BiasType"))
      {
LABEL_26:
        ZinParseFloatingPoint(v6, @"PreScale", (_DWORD *)&v15 + 1, (float *)(a2 + 88), 1.0);
        ZinParseFloatingPoint(v6, @"Scale", &v15, (float *)(a2 + 84), 1.0);
        ZinParseBoolean(v6, @"NegateSrc1", (BOOL *)(a2 + 96));
        ZinParseBoolean(v6, @"NegateSrc2", (BOOL *)(a2 + 97));
        return 0;
      }
      uint64_t result = ZinGetFloatFormat(v6, @"BiasType", &v14, a3);
      if (result != 3)
      {
        ZinParseFloatingPoint(v6, @"Bias", &v14, (float *)(a2 + 92), 0.0);
        goto LABEL_26;
      }
    }
  }
  return result;
}

void ZinParseScaledEWUnit()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Missing required type in Scaled Element-Wise parameter dictionary.\n", v0, 2u);
}

{
  uint8_t v0[16];

  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Unknown scaled element wise type!\n", v0, 2u);
}

__CFDictionary *ZinCreatePixelShuffleUnit(const ZinIrPixelShuffleUnitInfo *a1)
{
  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int v5 = 31;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

long long *ZinIrHalH14c::GetParams(ZinIrHalH14c *this)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  {
    ZinIrHalH14c::GetParams(void)const::ZinIrHalH14cParameters = xmmword_211EEDA40;
    dword_26777ED30 = 8;
    unk_26777ED38 = xmmword_211ED25C0;
    unk_26777ED48 = xmmword_211ED32E0;
    unk_26777ED58 = xmmword_211ED32F0;
    unk_26777ED68 = xmmword_211ED2760;
    unk_26777ED78 = xmmword_211ED3300;
    unk_26777ED88 = xmmword_211ED32F0;
    unk_26777ED98 = xmmword_211ED2610;
    unk_26777EDA8 = xmmword_211ED3310;
    unk_26777EDB8 = xmmword_211ED3320;
    unk_26777EDC8 = xmmword_211ED2640;
    unk_26777EDD8 = vdupq_n_s64(4uLL);
    qword_26777EDE8 = 4;
    xmmword_26777EDF0 = xmmword_211F06458;
    unk_26777EE00 = unk_211F06468;
    xmmword_26777EE10 = xmmword_211F06458;
    unk_26777EE20 = unk_211F06468;
    qword_26777EE40 = 4;
    xmmword_26777EE30 = xmmword_211F06478;
    xmmword_26777EE48 = xmmword_211ED2650;
    xmmword_26777EE58 = xmmword_211ED2660;
    xmmword_26777EE68 = xmmword_211ED2660;
    xmmword_26777EE78 = xmmword_211ED2660;
    xmmword_26777EE88 = xmmword_211ED2670;
    xmmword_26777EE98 = xmmword_211ED2680;
    xmmword_26777EEA8 = xmmword_211ED2690;
    xmmword_26777EEB8 = xmmword_211ED26A0;
    xmmword_26777EEC8 = xmmword_211ED26B0;
    xmmword_26777EED8 = xmmword_211ED2780;
    xmmword_26777EEE8 = xmmword_211ED26D0;
    xmmword_26777EEF8 = xmmword_211ED26E0;
    xmmword_26777EF08 = xmmword_211ED26F0;
    xmmword_26777EF18 = xmmword_211ED3340;
    xmmword_26777EF28 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_26777EF38 = xmmword_211ED3390;
    xmmword_26777EF48 = xmmword_211ED2720;
    xmmword_26777EF58 = xmmword_211ED2730;
    xmmword_26777EF68 = xmmword_211ED2740;
    xmmword_26777EF78 = xmmword_211ED3350;
    xmmword_26777EF88 = xmmword_211EDFBF0;
    qword_26777EF98 = 0;
    word_26777EFA0 = 256;
    xmmword_26777EFA8 = xmmword_211ED2760;
    xmmword_26777EFB8 = xmmword_211ED2770;
    xmmword_26777EFC8 = xmmword_211ED2780;
    qword_26777EFD8 = 0x10000;
    byte_26777EFE0 = 122;
    xmmword_26777EFE8 = xmmword_211ED3370;
    dword_26777EFF8 = 520097776;
    qword_26777EFFC = 0xFFFFFFEB0000000BLL;
    xmmword_26777F008 = xmmword_211ED27A0;
    xmmword_26777F018 = xmmword_211ED27B0;
    xmmword_26777F028 = xmmword_211ED27C0;
    int64x2_t v91 = vdupq_n_s64(8uLL);
    long long v92 = xmmword_211ED3380;
    long long v93 = xmmword_211ED3390;
    long long v94 = xmmword_211ED2730;
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_26777F038, (uint64_t)&v91, 4uLL);
    xmmword_26777F050 = xmmword_211ED33A0;
    unk_26777F060 = xmmword_211ED27E0;
    xmmword_26777F070 = (__int128)vdupq_n_s64(0x20uLL);
    unk_26777F080 = xmmword_211ED2610;
    unk_26777F090 = vdupq_n_s64(8uLL);
    unk_26777F0A0 = xmmword_211ED27F0;
    unk_26777F0B0 = xmmword_211ED2800;
    unk_26777F0C0 = vdupq_n_s64(0x100uLL);
    unk_26777F0D0 = vdupq_n_s64(0x80uLL);
    unk_26777F0E0 = xmmword_211ED2810;
    unk_26777F0F0 = xmmword_211ED2820;
    unk_26777F100 = xmmword_211ED2830;
    unk_26777F110 = xmmword_211ED2840;
    unk_26777F120 = xmmword_211ED2850;
    unk_26777F130 = vdupq_n_s64(2uLL);
    unk_26777F140 = xmmword_211ED2660;
    unk_26777F150 = vdupq_n_s64(0x4000uLL);
    unk_26777F160 = xmmword_211ED2860;
    unk_26777F170 = 257;
    byte_26777F176 = 0;
    unk_26777F172 = 0;
    unk_26777F177 = 1;
    unk_26777F179 = 16843009;
    byte_26777F17D = 1;
    dword_26777F17E = 16842752;
    byte_26777F182 = 1;
    *(void *)&algn_26777F183[5] = 0;
    *(void *)algn_26777F183 = 0;
    byte_26777F190 = 1;
    byte_26777F195 = 0;
    unk_26777F191 = 0;
    qword_26777F196 = 0x101010101010101;
    word_26777F19E = 0;
    unk_26777F1A0 = xmmword_211ED2760;
    unk_26777F1B0 = xmmword_211ED2880;
    unk_26777F1C0 = 40;
    unk_26777F1D0 = 0;
    unk_26777F1C8 = 0;
    word_26777F1D8 = 1;
    dword_26777F1DA = 16843009;
    word_26777F1DE = 257;
    byte_26777F1E0 = 0;
    *(void *)&algn_26777F1E1[7] = 0;
    byte_26777F1F0 = 0;
    unk_26777F1F1 = 16843009;
    unk_26777F1F9 = 0;
    unk_26777F1FB = 16842753;
    unk_26777F1FF = 0;
    byte_26777F20B = 1;
    unk_26777F207 = 16843009;
    unk_26777F20C = 0x100000100010000;
    word_26777F214 = 256;
    dword_26777F216 = 0;
    unk_26777F220 = 128;
    unk_26777F228 = -1;
    unk_26777F230 = -1;
    word_26777F238 = 0;
    unk_26777F23C = 1;
    unk_26777F240 = 0x10000;
    byte_26777F244 = 1;
    unk_26777F24D = 0;
    unk_26777F245 = 0;
    unk_26777F251 = 1542;
    byte_26777F255 = 1;
    dword_26777F256 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_26777F260, "Simple");
    qword_26777F278 = 50331648;
    dword_26777F280 = 1071225242;
    *(void *)algn_26777F284 = 14;
    *(_OWORD *)&algn_26777F284[12] = xmmword_211ED2890;
    *(int64x2_t *)&algn_26777F284[28] = vdupq_n_s64(0x40uLL);
    *(_OWORD *)&algn_26777F284[44] = xmmword_211ED27D0;
    qword_26777F2C0 = 8;
    byte_26777F2C8 = 0;
    unk_26777F2CC = 0xF3E800000;
    byte_26777F2D4 = 1;
    long long v123 = xmmword_211ED28B0;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_26777F2D8, &v123, 4uLL);
    v121[0] = xmmword_211F06490;
    v121[1] = unk_211F064A0;
    v122[0] = xmmword_211F064B0;
    *(_OWORD *)((char *)v122 + 12) = *(long long *)((char *)&xmmword_211F064B0 + 12);
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_26777F2F0, v121, 0xFuLL);
    int v120 = 25;
    v119[4] = xmmword_211F0650C;
    v119[5] = unk_211F0651C;
    v119[6] = xmmword_211F0652C;
    v119[0] = xmmword_211F064CC;
    v119[1] = unk_211F064DC;
    v119[2] = xmmword_211F064EC;
    v119[3] = unk_211F064FC;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_26777F308, v119, 0x1DuLL);
    uint64_t v118 = 0x2A00000029;
    v117[6] = xmmword_211F065A0;
    v117[7] = unk_211F065B0;
    v117[8] = xmmword_211F065C0;
    v117[9] = unk_211F065D0;
    v117[2] = xmmword_211F06560;
    uint64_t v117[3] = unk_211F06570;
    v117[4] = xmmword_211F06580;
    v117[5] = unk_211F06590;
    v117[0] = xmmword_211F06540;
    v117[1] = unk_211F06550;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_26777F320, v117, 0x2AuLL);
    int v87 = 2;
    long long v88 = xmmword_211ED28C0;
    uint64_t v89 = 0x1100000002;
    int v90 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v28, &v87, 1uLL);
    v91.i32[0] = 641877825;
    long long v92 = 0uLL;
    v91.i64[1] = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v91.i64[1], v28, (uint64_t)v29, 0xCCCCCCCCCCCCCCCDLL * ((v29 - (unsigned char *)v28) >> 3));
    int v83 = 2;
    long long v84 = xmmword_211ED28C0;
    uint64_t v85 = 0x1100000002;
    int v86 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v26, &v83, 1uLL);
    LODWORD(v93) = 759318337;
    long long v94 = 0uLL;
    *((void *)&v93 + 1) = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>((void *)&v93 + 1, v26, (uint64_t)v27, 0xCCCCCCCCCCCCCCCDLL * ((v27 - (unsigned char *)v26) >> 3));
    int v79 = 2;
    long long v80 = xmmword_211ED28C0;
    uint64_t v81 = 0x1100000002;
    int v82 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v24, &v79, 1uLL);
    int v95 = 792872769;
    memset(v96, 0, sizeof(v96));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v96, v24, (uint64_t)v25, 0xCCCCCCCCCCCCCCCDLL * ((v25 - (unsigned char *)v24) >> 3));
    int v75 = 2;
    long long v76 = xmmword_211ED28C0;
    uint64_t v77 = 0x1100000002;
    int v78 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v22, &v75, 1uLL);
    int v97 = 2084718401;
    memset(v98, 0, sizeof(v98));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v98, v22, (uint64_t)v23, 0xCCCCCCCCCCCCCCCDLL * ((v23 - (unsigned char *)v22) >> 3));
    int v71 = 10;
    int64x2_t v72 = vdupq_n_s64(1uLL);
    uint64_t v73 = 0x800000001;
    int v74 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v20, &v71, 1uLL);
    int v99 = 642527542;
    memset(v100, 0, sizeof(v100));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v100, v20, (uint64_t)v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - (unsigned char *)v20) >> 3));
    int v67 = 3;
    int64x2_t v68 = vdupq_n_s64(1uLL);
    uint64_t v69 = 0x700000002;
    int v70 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v18, &v67, 1uLL);
    int v101 = 642527336;
    memset(v102, 0, sizeof(v102));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v102, v18, (uint64_t)v19, 0xCCCCCCCCCCCCCCCDLL * ((v19 - (unsigned char *)v18) >> 3));
    int v63 = 3;
    int64x2_t v64 = vdupq_n_s64(1uLL);
    uint64_t v65 = 0x700000002;
    int v66 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v16, &v63, 1uLL);
    int v103 = 759967848;
    memset(v104, 0, sizeof(v104));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v104, v16, (uint64_t)v17, 0xCCCCCCCCCCCCCCCDLL * ((v17 - (unsigned char *)v16) >> 3));
    int v59 = 3;
    int64x2_t v60 = vdupq_n_s64(1uLL);
    uint64_t v61 = 0x700000002;
    int v62 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v14, &v59, 1uLL);
    int v105 = 793522280;
    memset(v106, 0, sizeof(v106));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v106, v14, (uint64_t)v15, 0xCCCCCCCCCCCCCCCDLL * ((v15 - (unsigned char *)v14) >> 3));
    int v55 = 3;
    int64x2_t v56 = vdupq_n_s64(1uLL);
    uint64_t v57 = 0x700000002;
    int v58 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v12, &v55, 1uLL);
    int v107 = 2085367912;
    memset(v108, 0, sizeof(v108));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v108, v12, (uint64_t)v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - (unsigned char *)v12) >> 3));
    int v51 = 3;
    long long v52 = xmmword_211ED28C0;
    uint64_t v53 = 0x1300000002;
    int v54 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v10, &v51, 1uLL);
    int v109 = 642934849;
    memset(v110, 0, sizeof(v110));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v110, v10, (uint64_t)v11, 0xCCCCCCCCCCCCCCCDLL * ((v11 - (unsigned char *)v10) >> 3));
    int v47 = 3;
    long long v48 = xmmword_211ED28C0;
    uint64_t v49 = 0x1300000002;
    int v50 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v8, &v47, 1uLL);
    int v111 = 760375361;
    memset(v112, 0, sizeof(v112));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v112, v8, (uint64_t)v9, 0xCCCCCCCCCCCCCCCDLL * ((v9 - (unsigned char *)v8) >> 3));
    int v43 = 3;
    long long v44 = xmmword_211ED28C0;
    uint64_t v45 = 0x1300000002;
    int v46 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v6, &v43, 1uLL);
    int v113 = 793929793;
    memset(v114, 0, sizeof(v114));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v114, v6, (uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)v6) >> 3));
    int v39 = 3;
    long long v40 = xmmword_211ED28C0;
    uint64_t v41 = 0x1300000002;
    int v42 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v39, 1uLL);
    int v115 = 2085775425;
    memset(v116, 0, sizeof(v116));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v116, __p, (uint64_t)v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_26777F338, (unsigned int *)&v91, 13);
    word_26777F350 = 0;
    byte_26777F352 = 1;
    *(_DWORD *)algn_26777F353 = 0;
    qword_26777F358 = 0;
    dword_26777F360 = 0;
    unk_26777F368 = 0u;
    word_26777F388 = 257;
    qword_26777F3B0 = 8;
    unk_26777F378 = 0u;
    xmmword_26777F390 = xmmword_211F065E8;
    unk_26777F3A0 = unk_211F065F8;
    unk_26777F3B8 = xmmword_211EEDA50;
    v37[0] = xmmword_211F06610;
    v37[1] = unk_211F06620;
    _OWORD v37[2] = xmmword_211F06630;
    uint64_t v38 = 0x41DF4ADD40000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777F3C8, v37, 7uLL);
    long long v35 = xmmword_211F06648;
    uint64_t v36 = 0x41CE0A6E00000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777F3E0, &v35, 3uLL);
    v33[0] = xmmword_211F06660;
    v33[1] = unk_211F06670;
    uint64_t v34 = 0x41E7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777F3F8, v33, 5uLL);
    v32[4] = xmmword_211F066C8;
    v32[5] = unk_211F066D8;
    v32[6] = xmmword_211F066E8;
    v32[0] = xmmword_211F06688;
    v32[1] = unk_211F06698;
    v32[2] = xmmword_211F066A8;
    v32[3] = unk_211F066B8;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_26777F410, (double *)v32, 7);
    xmmword_26777F428 = xmmword_211ED28E0;
    v30[0] = xmmword_211F066F8;
    v30[1] = unk_211F06708;
    int v30[2] = xmmword_211F06718;
    int v31 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_26777F438, v30, 0xDuLL);
    xmmword_26777F450 = (__int128)vdupq_n_s64(6uLL);
    unk_26777F460 = xmmword_211ED28F0;
    qword_26777F470 = 64;
    unk_26777F478 = 0x101010101010101;
    unk_26777F47E = 0x101010101010101;
    dword_26777F488 = 16777473;
    xmmword_26777F490 = xmmword_211F06730;
    unk_26777F4A0 = unk_211F06740;
    xmmword_26777F4B0 = xmmword_211F06750;
    unk_26777F4C0 = unk_211F06760;
    xmmword_26777F4F0 = xmmword_211F06790;
    unk_26777F500 = unk_211F067A0;
    xmmword_26777F4D0 = xmmword_211F06770;
    unk_26777F4E0 = unk_211F06780;
    word_26777F510 = 1;
    byte_26777F512 = 0;
    byte_26777F518 = 0;
    byte_26777F520 = 0;
    dword_26777F528 = 65792;
    word_26777F52C = 0;
    dword_26777F530 = 1056899072;
    word_26777F534 = 1;
    unk_26777F538 = xmmword_211ED4690;
    byte_26777F548 = 1;
    qword_26777F550 = 0xFFFFLL;
    byte_26777F558 = 0;
    word_26777F568 = 257;
    byte_26777F56A = 1;
    qword_26777F570 = 0x80000000;
    uint64_t v2 = 416;
    qword_26777F560 = 0;
    do
    {
      uint64_t v3 = *(void **)((char *)&v88 + v2 + 8);
      if (v3)
      {
        *(uint64_t *)((char *)&v89 + v2) = (uint64_t)v3;
        operator delete(v3);
      }
      v2 -= 32;
    }
    while (v2);
    if (__p)
    {
      int v5 = __p;
      operator delete(__p);
    }
    if (v6)
    {
      CFTypeID v7 = v6;
      operator delete(v6);
    }
    if (v8)
    {
      CFStringRef v9 = v8;
      operator delete(v8);
    }
    if (v10)
    {
      int v11 = v10;
      operator delete(v10);
    }
    if (v12)
    {
      unint64_t v13 = v12;
      operator delete(v12);
    }
    if (v14)
    {
      uint64_t v15 = v14;
      operator delete(v14);
    }
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    if (v22)
    {
      uint64_t v23 = v22;
      operator delete(v22);
    }
    if (v24)
    {
      uint64_t v25 = v24;
      operator delete(v24);
    }
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
    if (v28)
    {
      std::string v29 = v28;
      operator delete(v28);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalH14c::GetParams(void)const::ZinIrHalH14cParameters, &dword_210C72000);
  }
  return &ZinIrHalH14c::GetParams(void)const::ZinIrHalH14cParameters;
}

void sub_2113541C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v32, *(void **)(v32 + 8));
  if (qword_26777F3F8)
  {
    qword_26777F400 = qword_26777F3F8;
    operator delete((void *)qword_26777F3F8);
  }
  if (qword_26777F3E0)
  {
    qword_26777F3E8 = qword_26777F3E0;
    operator delete((void *)qword_26777F3E0);
  }
  if (qword_26777F3C8)
  {
    qword_26777F3D0 = qword_26777F3C8;
    operator delete((void *)qword_26777F3C8);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v31, *(void **)(v31 + 8));
  uint64_t v35 = 416;
  while (1)
  {
    uint64_t v36 = *(void **)((char *)&STACK[0x4B0] + v35 - 24);
    if (v36)
    {
      *(unint64_t *)((char *)&STACK[0x4B0] + v35 - 16) = (unint64_t)v36;
      operator delete(v36);
    }
    v35 -= 32;
    if (!v35)
    {
      if (__p) {
        operator delete(__p);
      }
      if (a19) {
        operator delete(a19);
      }
      if (a22) {
        operator delete(a22);
      }
      if (a25) {
        operator delete(a25);
      }
      if (a28) {
        operator delete(a28);
      }
      if (a31)
      {
        v33[1] = a31;
        operator delete(a31);
      }
      BOOL v37 = (void *)v33[3];
      if (v37)
      {
        v33[4] = v37;
        operator delete(v37);
      }
      uint64_t v38 = (void *)v33[6];
      if (v38)
      {
        v33[7] = v38;
        operator delete(v38);
      }
      int v39 = (void *)v33[9];
      if (v39)
      {
        v33[10] = v39;
        operator delete(v39);
      }
      long long v40 = (void *)v33[12];
      if (v40)
      {
        v33[13] = v40;
        operator delete(v40);
      }
      uint64_t v41 = (void *)v33[15];
      if (v41)
      {
        v33[16] = v41;
        operator delete(v41);
      }
      int v42 = (void *)v33[18];
      if (v42)
      {
        v33[19] = v42;
        operator delete(v42);
      }
      int v43 = (void *)v33[21];
      if (v43)
      {
        v33[22] = v43;
        operator delete(v43);
      }
      if (qword_26777F320)
      {
        qword_26777F328 = qword_26777F320;
        operator delete((void *)qword_26777F320);
      }
      if (qword_26777F308)
      {
        qword_26777F310 = qword_26777F308;
        operator delete((void *)qword_26777F308);
      }
      if (qword_26777F2F0)
      {
        qword_26777F2F8 = qword_26777F2F0;
        operator delete((void *)qword_26777F2F0);
      }
      if (qword_26777F2D8)
      {
        qword_26777F2E0 = qword_26777F2D8;
        operator delete((void *)qword_26777F2D8);
      }
      if (byte_26777F277 < 0) {
        operator delete((void *)qword_26777F260);
      }
      if (qword_26777F038)
      {
        qword_26777F040 = qword_26777F038;
        operator delete((void *)qword_26777F038);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_211354480()
{
}

void sub_211354490()
{
}

void sub_2113544A0()
{
}

void sub_2113544B0()
{
}

void sub_2113544C0()
{
}

void sub_2113544D0()
{
}

void sub_2113544E0()
{
}

void sub_2113544F8()
{
}

void sub_211354500()
{
}

void sub_211354508()
{
}

void sub_211354510()
{
}

void sub_211354518()
{
}

void sub_211354520()
{
}

void sub_211354528()
{
}

__n128 ZinNEPerf::CalculatePerf(ZinNEPerf *this, ZinPerfDescriptor *a2)
{
  uint64_t v4 = (unsigned char *)*((void *)this + 42);
  if (v4[41])
  {
    *((unsigned char *)this + 32std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = ZinNEPerf::IsQualifiedForSimulcast(this);
    *((void *)this + 18) = ZinNEPerf::GetL2BcastCycle(this);
    *((void *)this + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = ZinNEPerf::GetL2WbackCycle(this);
    uint64_t v4 = (unsigned char *)*((void *)this + 42);
  }
  if (v4[40])
  {
    *((void *)this + 21) = ZinNEPerfInfo::GetNumWorkunits((ZinNEPerfInfo *)(v4 + 672));
    ZinNEPerf::GetMACCyclesPerWU(this, (unint64_t *)this + 22);
    unint64_t PostCycles = ZinNEPerf::GetPostCycles(this);
    *((void *)this + 23) = PostCycles;
    uint64_t v6 = *((void *)this + 22);
    unint64_t v7 = v6 * *((void *)this + 21);
    if (v7 <= PostCycles) {
      unint64_t v8 = PostCycles;
    }
    else {
      unint64_t v8 = v6 * *((void *)this + 21);
    }
    *((void *)this + 11) = v8;
    *((void *)this + 12) = v7 + PostCycles;
    uint64_t v9 = *((void *)this + 42);
    if (*(unsigned char *)(v9 + 43) && *(unsigned char *)(v9 + 45))
    {
      ZinNEPerf::GetNonZeroCoefficientBlockCount(this, (uint64_t)&v67);
      CFTypeID v10 = (void *)*((void *)this + 26);
      if (v10)
      {
        *((void *)this + 27) = v10;
        operator delete(v10);
      }
      *((_OWORD *)this + 13) = v67;
      *((void *)this + 28) = v68;
    }
    if ((*(unsigned int (**)(ZinNEPerf *))(*(void *)this + 24))(this))
    {
      BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v11) {
        ZinNEPerf::CalculatePerf(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      return result;
    }
    if (ZinEnginePerf::ComputeDependencyStalls(this))
    {
      BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v20) {
        ZinNEPerf::CalculatePerf(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      return result;
    }
    uint64_t v4 = (unsigned char *)*((void *)this + 42);
  }
  if (v4[42])
  {
    *((void *)this + 14) = ZinEnginePerf::GetRdmaReadAmount(this);
    *((void *)this + 15) = v28;
    *((void *)this + 16) = ZinEnginePerf::GetWdmaWriteAmount(this);
    *((void *)this + 17) = (*(uint64_t (**)(ZinNEPerf *))(*(void *)this + 48))(this);
    *((void *)this + 41) = ZinEnginePerf::GetDRAMTraffic(this);
    uint64_t v4 = (unsigned char *)*((void *)this + 42);
  }
  if (v4[48]
    && ZinDMAPerf::GetStallsByTextureOperation((ZinTexturePerf **)this + 43, (unint64_t *)this + 25))
  {
    BOOL v29 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v29) {
      ZinNEPerf::CalculatePerf(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    return result;
  }
  (*(void (**)(ZinNEPerf *))(*(void *)this + 80))(this);
  (*(void (**)(ZinNEPerf *))(*(void *)this + 88))(this);
  if ((*(unsigned int (**)(ZinNEPerf *))(*(void *)this + 32))(this))
  {
    BOOL v37 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v37) {
      ZinNEPerf::CalculatePerf(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    return result;
  }
  uint64_t v45 = (unsigned char *)*((void *)this + 42);
  if (v45[51])
  {
    ZinEnginePerf::ComputePowerMetric(this);
    uint64_t v45 = (unsigned char *)*((void *)this + 42);
  }
  if (v45[53])
  {
    if ((*(unsigned int (**)(ZinNEPerf *))(*(void *)this + 96))(this))
    {
      BOOL v46 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v46) {
        ZinNEPerf::CalculatePerf(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      return result;
    }
    uint64_t v45 = (unsigned char *)*((void *)this + 42);
  }
  if (v45[54]) {
    *((void *)this + 39) = ZinEnginePerf::ComputeApproximateTileSrcDMAFetchCount(this);
  }
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  long long v54 = *(_OWORD *)((char *)this + 24);
  long long v55 = *(_OWORD *)((char *)this + 40);
  long long v56 = *(_OWORD *)((char *)this + 72);
  *((_OWORD *)a2 + 3) = *(_OWORD *)((char *)this + 56);
  *((_OWORD *)a2 + 4) = v56;
  *((_OWORD *)a2 + 1) = v54;
  *((_OWORD *)a2 + 2) = v55;
  long long v57 = *(_OWORD *)((char *)this + 88);
  long long v58 = *(_OWORD *)((char *)this + 104);
  long long v59 = *(_OWORD *)((char *)this + 136);
  *((_OWORD *)a2 + 7) = *(_OWORD *)((char *)this + 120);
  *((_OWORD *)a2 + 8) = v59;
  *((_OWORD *)a2 + 5) = v57;
  *((_OWORD *)a2 + 6) = v58;
  long long v60 = *(_OWORD *)((char *)this + 152);
  long long v61 = *(_OWORD *)((char *)this + 168);
  long long v62 = *(_OWORD *)((char *)this + 184);
  *((void *)a2 + 24) = *((void *)this + 25);
  *((_OWORD *)a2 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v61;
  *((_OWORD *)a2 + 11) = v62;
  *((_OWORD *)a2 + 9) = v60;
  if ((ZinNEPerf *)((char *)this + 8) != a2) {
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2 + 200, *((char **)this + 26), *((void *)this + 27), (uint64_t)(*((void *)this + 27) - *((void *)this + 26)) >> 3);
  }
  long long v63 = *(_OWORD *)((char *)this + 232);
  long long v64 = *(_OWORD *)((char *)this + 264);
  *((_OWORD *)a2 + 15) = *(_OWORD *)((char *)this + 248);
  *((_OWORD *)a2 + 16) = v64;
  *((_OWORD *)a2 + 14) = v63;
  __n128 result = *(__n128 *)((char *)this + 280);
  long long v65 = *(_OWORD *)((char *)this + 296);
  long long v66 = *(_OWORD *)((char *)this + 312);
  *((void *)a2 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((void *)this + 41);
  *((_OWORD *)a2 + 18) = v65;
  *((_OWORD *)a2 + 19) = v66;
  *((__n128 *)a2 + 17) = result;
  return result;
}

BOOL ZinNEPerf::IsQualifiedForSimulcast(ZinNEPerf *this)
{
  uint64_t v1 = *((void *)this + 42);
  if (*(unsigned char *)(v1 + 832)) {
    BOOL v2 = *(_DWORD *)(v1 + 736) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  int v3 = **(_DWORD **)(v1 + 256);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v5 = v4[33];
  if (v5) {
    uint64_t v6 = *(void *)(ZinMirL2Config::GetTileSrc(v5 + 120, 0) + 48);
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = IsFp16(v3);
  uint64_t v8 = 15;
  if (v7) {
    uint64_t v8 = 7;
  }
  if ((v8 & v6) != 0) {
    return 0;
  }
  BOOL result = 0;
  v10.i64[0] = *(void *)(v1 + 200);
  v10.i64[1] = *(void *)(v1 + 424);
  int64x2_t v11 = vdupq_n_s64(1uLL);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v1 + 184), *(int8x16_t *)(v1 + 184), 8uLL), v11), (int32x4_t)vceqq_s64(v10, v11))))) & 1) == 0&& *(void *)(v1 + 416) == 1&& *(void *)(v1 + 432) == 1)
  {
    return *(_DWORD *)(v4[8] + 8) != 90
        || *(_DWORD *)(*(void *)(v4[57] + 64) + 12) != 2
        || *(void *)(v1 + 800) != 0;
  }
  return result;
}

uint64_t ZinNEPerf::GetL2BcastCycle(ZinNEPerf *this)
{
  uint64_t v2 = *((void *)this + 42);
  int v3 = (*(uint64_t (**)(void))(**(void **)(v2 + 24) + 408))(*(void *)(v2 + 24));
  uint64_t v4 = 336;
  if (v3) {
    uint64_t v4 = 352;
  }
  unint64_t v5 = *(void *)(v2 + v4);
  if (!*(unsigned char *)(v2 + 752)) {
    unint64_t v5 = (v5 + *(void *)(v2 + 160) - 1) / *(void *)(v2 + 160);
  }
  unint64_t TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v2 + 672));
  uint64_t v7 = *(void *)(v2 + 768);
  unint64_t NumClusters = ZinNEPerfInfo::GetNumClusters((ZinNEPerfInfo *)(v2 + 672));
  ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v32, TotalNumberOfActiveNEs, v7, v5, NumClusters);
  uint64_t L2BcastCyclePerOcg = ZinNEPerf::GetL2BcastCyclePerOcg(this);
  BOOL v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v10 = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v2 + 672));
  std::vector<long>::resize((uint64_t)&v29, v10);
  for (unint64_t i = 0; ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v2 + 672)) > i; ++i)
  {
    if (!(i % ZinNEPerfInfo::GetNumClusters((ZinNEPerfInfo *)(v2 + 672))))
    {
      BOOL NumOfGroupsProducedByNE = ZinChannelAssignment::GetNumOfGroupsProducedByNE((ZinChannelAssignment *)v32, i);
      uint64_t v13 = v29;
      if (i >= (v30 - v29) >> 3) {
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v15 = *(void *)(v2 + 160);
      uint64_t v14 = *(void *)(v2 + 168);
      *(void *)&v13[8 * i] = NumOfGroupsProducedByNE
                             * L2BcastCyclePerOcg
                             * v14
                             * v15
                             * ZinNEPerf::GetEffectiveInputDepth(this)
                             * *(void *)(v2 + 200)
                             * *(void *)(v2 + 192)
                             * *(void *)(v2 + 184);
    }
  }
  if (*(unsigned char *)(v2 + 752))
  {
    if (v29 == v30)
    {
      uint64_t v19 = 0;
      if (!v29) {
        return v19;
      }
    }
    else
    {
      int v16 = 0;
      uint64_t v17 = v29;
      do
      {
        int v18 = *(_DWORD *)v17;
        v17 += 8;
        v16 += v18;
      }
      while (v17 != v30);
      uint64_t v19 = v16;
      if (!v29) {
        return v19;
      }
    }
LABEL_28:
    uint64_t v30 = v29;
    operator delete(v29);
    return v19;
  }
  BOOL v20 = v29 + 8;
  BOOL v21 = v29 == v30 || v20 == v30;
  uint64_t v22 = (uint64_t *)v29;
  if (!v21)
  {
    unint64_t v23 = *(void *)v29;
    uint64_t v22 = (uint64_t *)v29;
    uint64_t v24 = v29 + 8;
    do
    {
      unint64_t v26 = *(void *)v24;
      v24 += 8;
      unint64_t v25 = v26;
      BOOL v27 = v23 >= v26;
      if (v23 <= v26) {
        unint64_t v23 = v25;
      }
      if (!v27) {
        uint64_t v22 = (uint64_t *)v20;
      }
      BOOL v20 = v24;
    }
    while (v24 != v30);
  }
  uint64_t v19 = *v22;
  if (v29) {
    goto LABEL_28;
  }
  return v19;
}

void sub_211354C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ZinNEPerf::GetL2WbackCycle(ZinNEPerf *this)
{
  uint64_t v35 = 0;
  uint64_t v2 = *((void *)this + 42);
  uint64_t v3 = *(void *)(v2 + 360);
  uint64_t v4 = *(void *)(v2 + 328);
  if (ZinTensorFormatGetSizeInBytes(*(_DWORD *)(v2 + 368), &v35)) {
    ZinAssertImpl("Error in getting tensor format size in bytes");
  }
  uint64_t v5 = *((void *)this + 42);
  unint64_t v6 = *(void *)(*(void *)(v5 + 32) + 440);
  unint64_t TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v5 + 672));
  int v8 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 42) + 24) + 408))();
  uint64_t v9 = 336;
  if (v8) {
    uint64_t v9 = 352;
  }
  unint64_t v10 = *(void *)(*((void *)this + 42) + v9);
  unint64_t v11 = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v5 + 672));
  uint64_t v12 = *(void *)(v5 + 768);
  unint64_t NumClusters = ZinNEPerfInfo::GetNumClusters((ZinNEPerfInfo *)(v5 + 672));
  ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v34, v11, v12, v10, NumClusters);
  unint64_t NumOfChannels = ZinChannelAssignment::GetNumOfChannels((ZinChannelAssignment *)v34, 0);
  uint64_t v15 = *((void *)this + 42);
  int v16 = *(void **)(v15 + 672);
  uint64_t v17 = (void *)(v15 + 680);
  if (v16 == (void *)(v15 + 680))
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    int v19 = *(_DWORD *)(v5 + 824);
    do
    {
      unint64_t v20 = v16[4];
      uint64_t v21 = (v20 >> 24) & 0xFFFFFF;
      int v22 = BYTE2(v20);
      int v23 = (int)v21 / (BYTE2(v20) << v19);
      unint64_t v24 = HIWORD(v20);
      if ((unsigned __int16)v20 < HIWORD(v20)) {
        LODWORD(v24) = (unsigned __int16)v16[4];
      }
      int v25 = BYTE2(v20);
      int v26 = BYTE2(v20) << v19;
      if (v25 >= (int)v21 - ((v25 * v23) << v19)) {
        int v25 = v21 - ((v25 * v23) << v19);
      }
      uint64_t v27 = (int)v24 * (uint64_t)v25;
      if ((int)v21 % v26) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      BOOL v29 = (void *)v16[1];
      uint64_t v30 = v16;
      if (v29)
      {
        do
        {
          uint64_t v31 = v29;
          BOOL v29 = (void *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          uint64_t v31 = (void *)v30[2];
          BOOL v32 = *v31 == (void)v30;
          uint64_t v30 = v31;
        }
        while (!v32);
      }
      v18 += v16[5] / ((v21 + v26 - 1) / (unint64_t)v26) * (v28 + v22 * (int)v24 * (uint64_t)v23) * v35;
      int v16 = v31;
    }
    while (v31 != v17);
  }
  return (v6 / TotalNumberOfActiveNEs + v4 * v3 * NumOfChannels * v18 - 1) / (v6 / TotalNumberOfActiveNEs);
}

uint64_t ZinNEPerf::GetMACCyclesPerWU(ZinNEPerf *this, unint64_t *a2)
{
  if (*(_DWORD *)(*((void *)this + 42) + 176) == 8)
  {
    unint64_t v3 = 0;
  }
  else
  {
    ZinNEPerf::GetKernelSparsity(this);
    unint64_t v3 = (unint64_t)(float)((float)(1.0 - v5)
                                 * (float)(unint64_t)(*(uint64_t (**)(ZinNEPerf *))(*(void *)this + 112))(this));
  }
  *a2 = v3;
  return 0;
}

uint64_t ZinNEPerf::GetPostCycles(ZinNEPerf *this)
{
  uint64_t v1 = *((void *)this + 42);
  if (!*(unsigned char *)(v1 + 50)) {
    return 0;
  }
  uint64_t v31 = (ZinNEPerfInfo *)(v1 + 672);
  if (*(unsigned char *)(v1 + 752))
  {
    unint64_t v3 = 1;
  }
  else
  {
    int v5 = (*(uint64_t (**)(void))(**(void **)(v1 + 24) + 408))(*(void *)(v1 + 24));
    uint64_t v6 = 336;
    if (v5) {
      uint64_t v6 = 352;
    }
    unint64_t v3 = *(void *)(v1 + v6) / *(void *)(v1 + 160);
  }
  unint64_t TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs(v31);
  uint64_t v8 = *(void *)(v1 + 768);
  unint64_t NumClusters = ZinNEPerfInfo::GetNumClusters(v31);
  ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v34, TotalNumberOfActiveNEs, v8, v3, NumClusters);
  uint64_t v29 = v1;
  uint64_t NumOfGroupsProducedByNE = ZinChannelAssignment::GetNumOfGroupsProducedByNE((ZinChannelAssignment *)v34, 0);
  if (NumOfGroupsProducedByNE)
  {
    unint64_t v10 = 0;
    int v11 = 0;
    uint64_t v33 = (void *)(v1 + 680);
    do
    {
      ZinChannelAssignment::GetOutputChannelGroup((ZinChannelAssignment *)v34, 0, v10);
      uint64_t v13 = *(void **)v31;
      unint64_t v32 = v10;
      if (*(void **)v31 != v33)
      {
        int v14 = *(_DWORD *)(v29 + 824);
        uint64_t v15 = *(void *)(v29 + 216) * v12 * *(void *)(v29 + 208) * *(void *)(v29 + 224);
        do
        {
          unint64_t v16 = v13[4];
          uint64_t v17 = (v16 >> 24) & 0xFFFFFF;
          int v18 = (int)v17 / (BYTE2(v16) << v14);
          unint64_t v19 = HIWORD(v16);
          if ((unsigned __int16)v16 < HIWORD(v16)) {
            unint64_t v19 = (unsigned __int16)v13[4];
          }
          uint64_t v20 = v19 * v15;
          int v21 = ZinNEPerf::EstimatePostProcessCyclesPerWorkUnit(this, v19 * v15 * BYTE2(v16));
          int v22 = BYTE2(v16);
          int v23 = BYTE2(v16) << v14;
          if ((int)v17 % v23)
          {
            if (v22 >= (int)v17 - ((v22 * v18) << v14)) {
              int v22 = v17 - ((v22 * v18) << v14);
            }
            int v24 = ZinNEPerf::EstimatePostProcessCyclesPerWorkUnit(this, v20 * v22);
          }
          else
          {
            int v24 = 0;
          }
          unint64_t v25 = v13[5];
          int v26 = (void *)v13[1];
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              int v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (void *)v13[2];
              BOOL v28 = *v27 == (void)v13;
              uint64_t v13 = v27;
            }
            while (!v28);
          }
          v11 += v25 / ((v17 + v23 - 1) / (unint64_t)v23) * (v24 + v21 * v18);
          uint64_t v13 = v27;
        }
        while (v27 != v33);
      }
      unint64_t v10 = v32 + 1;
    }
    while (v32 + 1 != NumOfGroupsProducedByNE);
  }
  else
  {
    int v11 = 0;
  }
  return *(void *)(v29 + 360) * v11 * *(void *)(v29 + 160) * *(void *)(v29 + 168);
}

void ZinNEPerf::GetNonZeroCoefficientBlockCount(ZinNEPerf *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(*((void *)this + 42) + 672));
  std::vector<unsigned long>::reserve((void **)a2, TotalNumberOfActiveNEs);
  uint64_t v5 = *((void *)this + 42);
  if (*(unsigned char *)(v5 + 396))
  {
    uint64_t v6 = *(ZinNEConvLayer **)(v5 + 24);
    if (*(_DWORD *)(*((void *)v6 + 8) + 8) == 85)
    {
      if (*((void *)v6 + 54))
      {
        uint64_t v7 = *((void *)v6 + 17);
        if (*(void *)(v7 + 584))
        {
          uint64_t v8 = *(void *)(v7 + 800);
          if (*(void *)(v8 + 40))
          {
            unint64_t v25 = 0;
            KernelDescriptor = (int *)ZinNEConvLayer::GetKernelDescriptor(v6);
            ZinKernelFormatGetBitDepth(*KernelDescriptor, &v25);
            uint64_t v10 = *(void *)(v8 + 40);
            uint64_t v11 = *(void *)(v10 + 32);
            uint64_t v12 = *(void *)(v10 + 40);
            if (v11 != v12)
            {
              uint64_t v13 = (void *)(a2 + 16);
              int v14 = *(unint64_t **)(a2 + 8);
              do
              {
                unint64_t v15 = 8 * *(void *)(v11 + 40) / v25;
                if ((unint64_t)v14 >= *v13)
                {
                  uint64_t v17 = *(unint64_t **)a2;
                  uint64_t v18 = ((uint64_t)v14 - *(void *)a2) >> 3;
                  unint64_t v19 = v18 + 1;
                  if ((unint64_t)(v18 + 1) >> 61) {
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v20 = *v13 - (void)v17;
                  if (v20 >> 2 > v19) {
                    unint64_t v19 = v20 >> 2;
                  }
                  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v21 = v19;
                  }
                  if (v21)
                  {
                    int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a2 + 16, v21);
                    uint64_t v17 = *(unint64_t **)a2;
                    int v14 = *(unint64_t **)(a2 + 8);
                  }
                  else
                  {
                    int v22 = 0;
                  }
                  int v23 = (unint64_t *)&v22[8 * v18];
                  unint64_t *v23 = v15;
                  unint64_t v16 = v23 + 1;
                  while (v14 != v17)
                  {
                    unint64_t v24 = *--v14;
                    *--int v23 = v24;
                  }
                  *(void *)a2 = v23;
                  *(void *)(a2 + 8) = v16;
                  *(void *)(a2 + 16) = &v22[8 * v21];
                  if (v17) {
                    operator delete(v17);
                  }
                }
                else
                {
                  *int v14 = v15;
                  unint64_t v16 = v14 + 1;
                }
                *(void *)(a2 + 8) = v16;
                v11 += 56;
                int v14 = v16;
              }
              while (v11 != v12);
            }
          }
        }
      }
    }
  }
}

void sub_211355308(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEPerf::ComputeRunCycle(ZinNEPerf *this)
{
  uint64_t v1 = *((void *)this + 11);
  unint64_t v2 = *((void *)this + 18);
  if (v2 <= *((void *)this + 20)) {
    unint64_t v2 = *((void *)this + 20);
  }
  *((void *)this + 1) = v2;
  *((void *)this + 2) = v1;
  return 0;
}

uint64_t ZinNEPerf::ComputeRunTime(ZinNEPerf *this)
{
  ZinEnginePerf::ComputeRdmaAccessMetrics(this, 0, (uint64_t)v13);
  *((void *)this + 7) = v13[0];
  ZinEnginePerf::ComputeRdmaAccessMetrics(this, 1, (uint64_t)v13);
  *((void *)this + 8) = v13[0];
  ZinEnginePerf::ComputeKdmaAccessMetrics(this, (uint64_t)v13);
  *((void *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v13[0];
  ZinEnginePerf::ComputeWdmaAccessMetrics(this, (uint64_t)v13);
  *((void *)this + 9) = v13[0];
  ZinEnginePerf::ComputeDramAccessMetrics(this, (uint64_t)v13);
  *((void *)this + 5) = v13[0];
  *((double *)this + 3) = (double)*((unint64_t *)this + 2) / *(double *)(*((void *)this + 42) + 56) * 1000.0;
  double v2 = ZinEnginePerf::ComputeL2Time(this);
  *((double *)this + 4) = v2;
  double v3 = *((double *)this + 5);
  if (v3 < *((double *)this + 3)) {
    double v3 = *((double *)this + 3);
  }
  if (v3 >= v2) {
    double v2 = v3;
  }
  *((double *)this + 6) = v2;
  if (v2 > 0.0) {
    return ZinEnginePerf::RetrieveTaskCharacteristic(this);
  }
  BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v5) {
    ZinNEPerf::ComputeRunTime(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  return 3;
}

double ZinNEPerf::ComputeCoreTime(ZinNEPerf *this)
{
  return (double)*((unint64_t *)this + 2) / *(double *)(*((void *)this + 42) + 56) * 1000.0;
}

void ZinNEPerf::GetKernelSparsity(ZinNEPerf *this)
{
  uint64_t v2 = *((void *)this + 42);
  if (*(float *)(v2 + 732) <= 0.0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (*(unsigned char *)(v2 + 44))
    {
      ZinIrPerf::GetEngineLayerFusedKernel(*(const ZinANELayer **)(v2 + 24), &v13);
      uint64_t v4 = v13;
      if (v13)
      {
        if (*((unsigned char *)v13 + 160))
        {
          KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v3 + 16));
          ZinIrKernel::GetSparsityRatio(v4, 4, KernelSparsityCache);
          uint64_t v4 = v13;
          uint64_t v13 = 0;
          if (!v4) {
            return;
          }
        }
        else
        {
          uint64_t v13 = 0;
        }
        ZinIrKernel::~ZinIrKernel(v4);
        MEMORY[0x21667D3C0]();
      }
    }
    else
    {
      uint64_t v6 = *(void *)(v3 + 136);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 800);
        if (v7)
        {
          if (**(unsigned char **)(v7 + 40))
          {
            uint64_t v8 = *(void *)(v6 + 584);
            if (v8
              && (int v9 = (*(uint64_t (**)(void))(**(void **)(v8 + 136) + 184))(*(void *)(v8 + 136)),
                  uint64_t v2 = *((void *)this + 42),
                  v9)
              && *(unsigned char *)(v2 + 43))
            {
              uint64_t v10 = *(ZinIrKernel **)(v3 + 136);
              uint64_t v11 = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v3 + 16));
              ZinIrKernel::GetSparsityRatio(v10, 4, v11);
            }
            else
            {
              ZinNEPerf::GetSparsityFromStrides(*(void *)(v2 + 424), *(void *)(v2 + 416), *(void *)(v2 + 432), *(void *)(v2 + 184), *(void *)(v2 + 192), *(void *)(v2 + 200), *(void *)(v2 + 208), *(void *)(v2 + 216), *(void *)(v2 + 224), *(int *)(v2 + 372), *(int *)(v2 + 380), *(int *)(v2 + 388), v12);
            }
          }
        }
      }
    }
  }
}

void sub_21135561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  _Unwind_Resume(a1);
}

unint64_t ZinNEPerf::EstimatePostProcessCyclesPerWorkUnit(ZinNEPerf *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 42);
  uint64_t v3 = *(unint64_t **)(v2 + 32);
  unint64_t v4 = v3[230];
  float v5 = (float)v3[106];
  unint64_t v6 = v3[231];
  float v7 = (float)a2 / v5;
  signed int v8 = vcvtps_s32_f32(v7);
  uint64_t v9 = *(void *)(*(void *)(v2 + 24) + 392);
  double v10 = 0.0;
  if (v9 && *(_DWORD *)(v9 + 192) >= 2u)
  {
    float v11 = (float)v3[105];
    int v12 = vcvtps_s32_f32((float)((float)(v7 + -7.0) * v5) / v11);
    v8 += v12 & ~(v12 >> 31);
    double v10 = (double)(int)(float)((float)a2 / v11);
  }
  double v13 = *(double *)(v2 + 56) / *(double *)(v2 + 64);
  double v14 = v10 * v13;
  if ((double)v6 + (double)(v4 + v8) * v13 >= v14) {
    double v14 = (double)v6 + (double)(v4 + v8) * v13;
  }
  return vcvtpd_u64_f64(v14);
}

unint64_t ZinNEPerf::GetKdmaReadAmount(ZinNEPerf *this)
{
  uint64_t v1 = *((void *)this + 42);
  uint64_t v2 = *(void *)(v1 + 840);
  if (!*(unsigned char *)(v2 + 340) || *(unsigned char *)(v1 + 728) || *(double *)(v2 + 384) == 0.0) {
    return 0;
  }
  unint64_t v4 = (ZinNEPerfInfo *)(v1 + 672);
  uint64_t v5 = *(void *)(*(void *)(v1 + 24) + 136);
  if (*(unsigned char *)(v2 + 341))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 800);
      if (v6)
      {
        float WeightElementSizeInBytes = ZinIrKernel::GetWeightElementSizeInBytes(*(ZinIrKernel **)(*(void *)(v1 + 24)
                                                                                            + 136));
        float v8 = *(double *)(v2 + 384);
        float v9 = v8 / WeightElementSizeInBytes;
        unint64_t v10 = *(void *)(*(void *)(v6 + 40) + 16);
        return (unint64_t)(float)(v9 * (float)v10);
      }
    }
  }
  else if (v5)
  {
    uint64_t v11 = *(void *)(v5 + 800);
    if (v11)
    {
      unint64_t NumClusters = ZinNEPerfInfo::GetNumClusters(v4);
      unint64_t v10 = *(void *)(*(void *)(v11 + 40) + 16);
      float v9 = (float)NumClusters / (float)*(unint64_t *)(*(void *)(v11 + 40) + 24);
      return (unint64_t)(float)(v9 * (float)v10);
    }
  }
  uint64_t v13 = ZinNEPerfInfo::GetNumClusters(v4);
  uint64_t v14 = *(void *)(v1 + 840);
  return v13
       * (unint64_t)(*(double *)(v14 + 384)
                          * (double)GetSerializedWeightElementCount(*(_DWORD *)(v1 + 808), (unint64_t *)(v14 + 344), *(void *)(v1 + 816)));
}

uint64_t ZinNEPerf::GetL2BcastCyclePerOcg(ZinNEPerf *this)
{
  unint64_t v34 = 0;
  uint64_t v1 = *((void *)this + 42);
  if (ZinTensorFormatGetSizeInBytes(**(_DWORD **)(v1 + 256), (uint64_t *)&v34)) {
    ZinAssertImpl("Error in getting tensor format size in bytes");
  }
  uint64_t v31 = details::ZinIrSubchannelKernelDimension(*(void *)(v1 + 184), *(void *)(v1 + 208), *(void *)(v1 + 424), *(_DWORD *)(v1 + 372));
  uint64_t v2 = details::ZinIrSubchannelKernelDimension(*(void *)(v1 + 192), *(void *)(v1 + 216), *(void *)(v1 + 416), *(_DWORD *)(v1 + 380));
  uint64_t v3 = *(void **)(v1 + 672);
  uint64_t v29 = (void *)(v1 + 680);
  unint64_t v30 = v2;
  if (v3 == (void *)(v1 + 680)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v28 = v1;
  do
  {
    unint64_t v5 = v3[4];
    unint64_t v6 = BYTE2(v5);
    BOOL v7 = *(_DWORD *)(v1 + 736) == 1 && BYTE2(v5) == 8;
    if (v7) {
      unint64_t v8 = (*(void *)(*(void *)(*((void *)this + 42) + 32) + 592) >> 4) / v34;
    }
    else {
      unint64_t v8 = (unsigned __int16)v3[4];
    }
    char v9 = 0;
    unint64_t v10 = HIWORD(v5);
    if (HIWORD(v5) > v8 && *(unsigned char *)(v1 + 832)) {
      char v9 = *((unsigned char *)this + 320) ^ 1;
    }
    char v32 = v9;
    unint64_t v11 = (v5 >> 24) & 0xFFFFFF;
    int v12 = *(_DWORD *)(v1 + 824);
    unint64_t v13 = BYTE2(v5) * (uint64_t)(1 << v12);
    unint64_t v14 = v11 / v13;
    unint64_t v15 = v11 % v13;
    if (v8 >= v10) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = v8;
    }
    unint64_t L2BcastCyclesPerWorkunitPerOcg = ZinNEPerf::GetL2BcastCyclesPerWorkunitPerOcg(this, v34, v30, v31, v6, v16, v6, v8);
    if (v15)
    {
      uint64_t v18 = v11 % v6;
      if (v18)
      {
        unint64_t v19 = L2BcastCyclesPerWorkunitPerOcg;
        unint64_t v20 = ZinNEPerf::GetL2BcastCyclesPerWorkunitPerOcg(this, v34, v30, v31, v18, v16, v6, v8);
        unint64_t L2BcastCyclesPerWorkunitPerOcg = v19;
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v1 = v28;
      char v22 = v32;
      unint64_t v21 = (v20 << v32)
          + ((unint64_t)(v15 / v6) << v32) * L2BcastCyclesPerWorkunitPerOcg;
    }
    else
    {
      unint64_t v21 = 0;
      uint64_t v1 = v28;
      char v22 = v32;
    }
    unint64_t v24 = v3[4];
    unint64_t v23 = v3[5];
    unint64_t v25 = (void *)v3[1];
    if (v25)
    {
      do
      {
        int v26 = v25;
        unint64_t v25 = (void *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        int v26 = (void *)v3[2];
        BOOL v7 = *v26 == (void)v3;
        uint64_t v3 = v26;
      }
      while (!v7);
    }
    v4 += v23
        / ((((v24 >> 24) & 0xFFFFFF) + (BYTE2(v24) << v12) - 1)
         / (BYTE2(v24) << v12))
        * (v21 + (((int)v14 * (uint64_t)(1 << v12)) << v22) * L2BcastCyclesPerWorkunitPerOcg);
    uint64_t v3 = v26;
  }
  while (v26 != v29);
  return v4;
}

unint64_t ZinNEPerf::GetL2BcastCyclesPerWorkunitPerOcg(ZinNEPerf *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v11 = *((void *)this + 42);
  if (*(unsigned char *)(v11 + 752)) {
    unint64_t v12 = *(void *)(v11 + 760);
  }
  else {
    unint64_t v12 = (unint64_t)(*(void *)(*(void *)(v11 + 232) + 8) + *(void *)(v11 + 160) - 1)
  }
        / *(void *)(v11 + 160);
  unint64_t v13 = *(void *)(*(void *)(v11 + 32) + 432);
  unint64_t v14 = a6 - 1 + a4;
  unint64_t v15 = a3 + a5 - 1;
  int v16 = *(_DWORD *)(v11 + 736);
  unsigned int v17 = v16 - 5;
  unint64_t v44 = v12;
  if ((v16 - 5) >= 0xFFFFFFFE)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 1;
    if (!*(unsigned char *)(v11 + 740)) {
      uint64_t v20 = 2;
    }
    uint64_t v43 = v20;
    unint64_t v21 = (unsigned __int8 *)(v11 + 833);
  }
  else
  {
    uint64_t v18 = 1;
    if (v15 > a7 >> 1 && v16 != 1)
    {
      if (*(unsigned char *)(v11 + 740))
      {
        uint64_t v18 = 1;
      }
      else
      {
        BOOL v40 = v14 <= a8 >> 1 && a7 == 1;
        uint64_t v18 = 1;
        if (!v40) {
          uint64_t v18 = 2;
        }
      }
    }
    uint64_t v43 = v18;
    uint64_t v19 = 0;
    unint64_t v21 = (unsigned __int8 *)(v11 + 833);
    if (v14 > a8 && !*(unsigned char *)(v11 + 833))
    {
      uint64_t v19 = 1;
      if (a7 >= 9 && v16 != 1)
      {
        if ((v14 * a7 - a8) * a2 <= v13) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = 2;
        }
      }
    }
  }
  unint64_t v22 = (v15 - a7) & ~(((int)v15 - (int)a7) >> 31);
  if (v14 <= a8) {
    uint64_t v23 = a8;
  }
  else {
    uint64_t v23 = a6 - 1 + a4;
  }
  unint64_t Pow2 = ZinRoundUpToNextPow2(v23);
  unint64_t v25 = v13 / a2;
  if (v25 >= Pow2) {
    unint64_t v26 = Pow2;
  }
  else {
    unint64_t v26 = v25;
  }
  int v27 = *v21;
  unint64_t v28 = (v22 + v25 / v26 - 1) / (v25 / v26);
  if (v27)
  {
    if (a6 <= a8) {
      uint64_t v29 = a8;
    }
    else {
      uint64_t v29 = a6;
    }
    unint64_t v30 = ZinRoundUpToNextPow2(v29);
    if (v25 >= v30) {
      unint64_t v31 = v30;
    }
    else {
      unint64_t v31 = v25;
    }
    unint64_t v32 = (a6 - 1 + v31) / v31;
    if (v26 >= 2 * v31) {
      unint64_t v33 = (v28 + 1) >> 1;
    }
    else {
      unint64_t v33 = (v22 + v25 / v26 - 1) / (v25 / v26);
    }
    uint64_t v34 = v33 * v32;
    if (*(unsigned char *)(*(void *)(*((void *)this + 42) + 32) + 1601))
    {
      uint64_t v36 = v43;
      unint64_t v35 = v44;
      if (a3 <= 5 && a8 == 8 || (uint64_t v37 = 2 * v34, a3 <= 3) && a8 == 16) {
        uint64_t v37 = v34;
      }
    }
    else
    {
      uint64_t v37 = 2 * v34;
      uint64_t v36 = v43;
      unint64_t v35 = v44;
    }
    uint64_t v38 = v37 + 2 * v36;
  }
  else
  {
    if (v17 <= 0xFFFFFFFD) {
      unint64_t v22 = (v14 + v26 - 1) / v26 * v28;
    }
    unint64_t v35 = v44;
    uint64_t v38 = v19 + v43 + v22;
  }
  return v38 * v35;
}

unint64_t ZinNEPerf::GetEffectiveInputDepth(ZinNEPerf *this)
{
  uint64_t v1 = *((void *)this + 42);
  uint64_t v2 = *(int *)(v1 + 388) + (uint64_t)*(int *)(v1 + 392);
  if (v2)
  {
    if (*(unsigned char *)(v1 + 396) && *(_DWORD *)(v1 + 456) == 1) {
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  return (unint64_t)(v2 + *(void *)(v1 + 200) + *(void *)(*(void *)(v1 + 232) + 32) - 1)
       / *(void *)(v1 + 200);
}

float ZinNEPerf::GetSparsityFromStrides(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13)
{
  uint64_t v20 = details::ZinIrSubchannelKernelDimension(a4, a7, this, a10);
  uint64_t v21 = details::ZinIrSubchannelKernelDimension(a5, a8, a2, a11);
  uint64_t v22 = details::ZinIrSubchannelKernelDimension(a6, a9, a3, a12);
  char v24 = a4 == 2 && a7 == 2;
  char v26 = a5 == 2 && a8 == 2;
  char v28 = a6 == 2 && a9 == 2;
  return 1.0
       - (float)((float)(unint64_t)((a2 * this * a3) << v24 << v26 << v28)
               / (float)(a5 * a4 * a6 * a7 * a8 * a9 * v20 * v21 * v22));
}

uint64_t ZinNEPerf::GetNonZeroElementsInSubKernel(ZinNEPerf *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10)
{
  char v11 = a4 == 2 && a7 == 2;
  char v13 = a5 == 2 && a8 == 2;
  char v15 = a6 == 2 && a9 == 2;
  return (a2 * (void)this * a3) << v11 << v13 << v15;
}

uint64_t ZinNEPerf::GetSubChannelCycleCount@<X0>(ZinNEPerf *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6 = (void *)*((void *)this + 42);
  uint64_t v7 = (*(uint64_t (**)(ZinNEPerf *))(*(void *)this + 104))(this);
  uint64_t v8 = v6[26];
  if (v7 >= v8) {
    uint64_t v9 = v6[26];
  }
  else {
    uint64_t v9 = v7;
  }
  uint64_t v10 = v6[27];
  uint64_t v11 = v6[28];
  if (v7 / v9 >= v10) {
    uint64_t v12 = v6[27];
  }
  else {
    uint64_t v12 = v7 / v9;
  }
  uint64_t v13 = v7 / v9 / v12;
  if (v13 >= v11) {
    uint64_t v14 = v6[28];
  }
  else {
    uint64_t v14 = v7 / v9 / v12;
  }
  uint64_t v15 = v13 / v14;
  unint64_t v16 = vcvtmd_s64_f64((double)(v8 - 1) / (double)v9);
  uint64_t v17 = v6[23];
  unint64_t v18 = ((v6[25] + v6[25] * v16) * v6[24]
       + (v6[25] + v6[25] * v16) * v6[24] * vcvtmd_s64_f64((double)(v10 - 1) / (double)v12))
      * v17;
  unint64_t v19 = v18 + v18 * vcvtmd_s64_f64((double)(v11 - 1) / (double)v14);
  uint64_t v20 = details::ZinIrSubchannelKernelDimension(v17, v8, *(void *)(*((void *)this + 42) + 424), *(_DWORD *)(*((void *)this + 42) + 372));
  uint64_t v21 = details::ZinIrSubchannelKernelDimension(v6[24], v6[27], *(void *)(*((void *)this + 42) + 416), *(_DWORD *)(*((void *)this + 42) + 380));
  uint64_t result = details::ZinIrSubchannelKernelDimension(v6[25], v6[28], *(void *)(*((void *)this + 42) + 432), *(_DWORD *)(*((void *)this + 42) + 388));
  uint64_t v23 = *((void *)this + 42);
  if (*(unsigned char *)(v23 + 741) && (v15 < 2 || *(void *)(v23 + 768) <= 1uLL) && v19 <= 1) {
    uint64_t result = (unint64_t)(result + 1) >> 1;
  }
  unint64_t v24 = v21 * v20 * result;
  unint64_t v25 = vcvtmd_s64_f64((double)(a2 - 1) / (double)v15) + 1;
  if (v24 <= 1) {
    unint64_t v24 = 1;
  }
  *a3 = v19;
  a3[1] = v24;
  a3[2] = v25;
  return result;
}

uint64_t ZinNEPerf::GetCyclesBeforeSparsity(ZinNEPerf *this)
{
  uint64_t v2 = *((void *)this + 42);
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(*(void *)(v2 + 232) + 8);
  int EffectiveInputDepth = ZinNEPerf::GetEffectiveInputDepth(this);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 408))(v3);
  uint64_t v7 = 336;
  if (v6) {
    uint64_t v7 = 352;
  }
  uint64_t v8 = *(void *)(v2 + v7);
  unint64_t v9 = *(void *)(v2 + 160);
  if (*(unsigned char *)(v2 + 752)) {
    unint64_t v10 = *(void *)(v2 + 760);
  }
  else {
    unint64_t v10 = (v9 - 1 + v4) / v9;
  }
  unint64_t v11 = (v9 - 1 + v8) / v9;
  unint64_t TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v2 + 672));
  uint64_t v13 = *(void *)(v2 + 768);
  unint64_t NumClusters = ZinNEPerfInfo::GetNumClusters((ZinNEPerfInfo *)(v2 + 672));
  ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v24, TotalNumberOfActiveNEs, v13, v11, NumClusters);
  FullPassint Count = ZinChannelAssignment::GetFullPassCount((ZinChannelAssignment *)v24);
  int v16 = FullPassCount;
  if (FullPassCount)
  {
    ZinChannelAssignment::GetOutputChannelGroup((ZinChannelAssignment *)v24, 0, 0);
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    ZinNEPerf::GetSubChannelCycleCount(this, v17, &v21);
    v16 *= v10 * EffectiveInputDepth * v22 * v21 * v23;
  }
  if (ZinChannelAssignment::HasPartialPass((ZinChannelAssignment *)v24, 0))
  {
    BOOL NumOfGroupsProducedByNE = ZinChannelAssignment::GetNumOfGroupsProducedByNE((ZinChannelAssignment *)v24, 0);
    ZinChannelAssignment::GetOutputChannelGroup((ZinChannelAssignment *)v24, 0, NumOfGroupsProducedByNE - 1);
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    ZinNEPerf::GetSubChannelCycleCount(this, v19, &v21);
    v16 += v10 * EffectiveInputDepth * v22 * v21 * v23;
  }
  return (*(void *)(v2 + 160) + *(void *)(v2 + 160) * v16) * *(void *)(v2 + 168);
}

uint64_t ZinNEPerf::GetHinEffective(ZinNEPerf *this, uint64_t a2)
{
  uint64_t v3 = (void *)*((void *)this + 42);
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  GetSlices(v3[19], v3[62], v3[71], v3[70], v3[72], &v9);
  uint64_t v4 = v9;
  unint64_t v5 = v10;
  uint64_t v6 = v3[52];
  if (v9)
  {
    unint64_t v10 = v9;
    operator delete(v9);
  }
  uint64_t v7 = (((v5 - v4) >> 3) - 1) * (v6 - 1);
  if (v6 <= 1) {
    uint64_t v7 = 0;
  }
  return v7 + a2;
}

void sub_2113561CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinNEPerf::GetPerfOcgSize(ZinNEPerf *this, const ZinCommonPerfInfo *a2, const ZinNEPerfInfo *a3)
{
}

void sub_2113562B4(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1000C40FA0F61DDLL);
  _Unwind_Resume(a1);
}

uint64_t ZinNEPerf::GetChainedDependencyStall(ZinNEPerf *this, double *a2)
{
  ZinCommonPerfInfo::ZinCommonPerfInfo((ZinCommonPerfInfo *)v44, (const ZinCommonPerfInfo *)(*((void *)this + 42) + 56));
  if (!v55) {
    goto LABEL_12;
  }
  uint64_t v4 = *((void *)this + 42);
  unint64_t v5 = *(ZinANELayer **)(v4 + 512);
  uint64_t v6 = *(void *)(v4 + 32);
  LOWORD(v17[0]) = 257;
  BYTE2(v17[0]) = 1;
  *(_DWORD *)((char *)v17 + 3) = 0;
  *(_DWORD *)((char *)v17 + 6) = 0;
  BYTE2(v17[1]) = 1;
  *(_DWORD *)((char *)&v17[1] + 3) = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)v43, v6, (long long *)(v4 + 56), v17);
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  uint64_t v7 = operator new(8uLL);
  std::string __p = v7;
  *uint64_t v7 = 0;
  unint64_t v33 = v7 + 1;
  unint64_t v32 = v7 + 1;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v36 = _Q0;
  long long v37 = _Q0;
  long long v38 = _Q0;
  long long v39 = _Q0;
  uint64_t v40 = 0;
  char v41 = 0;
  uint64_t v42 = 0;
  LOBYTE(v17[1]) = 0;
  LOBYTE(v17[14]) = 0;
  LOBYTE(v17[15]) = 0;
  LOBYTE(v17[28]) = 0;
  LOBYTE(v17[29]) = 0;
  LOBYTE(v17[42]) = 0;
  LOBYTE(v17[43]) = 0;
  LOBYTE(v17[44]) = 0;
  LOBYTE(v17[45]) = 0;
  LOBYTE(v17[46]) = 0;
  LOBYTE(v17[47]) = 0;
  LOBYTE(v17[50]) = 0;
  LOBYTE(v17[51]) = 0;
  BYTE4(v17[51]) = 0;
  LOBYTE(v17[52]) = 0;
  LOBYTE(v17[53]) = 0;
  LOBYTE(v17[54]) = 0;
  LOBYTE(v17[55]) = 0;
  LOBYTE(v17[56]) = 0;
  LOBYTE(v17[57]) = 0;
  LOBYTE(v17[58]) = 0;
  LOBYTE(v17[61]) = 0;
  LOBYTE(v17[62]) = 0;
  LOBYTE(v17[63]) = 0;
  LOBYTE(v17[64]) = 0;
  LOBYTE(v17[65]) = 0;
  v17[0] = &unk_26C34D0D8;
  v18[0] = 0;
  v18[8] = 0;
  v18[16] = 0;
  v18[24] = 0;
  if (v54)
  {
    memcpy(&v17[1], (char *)v54 + 8, 0x201uLL);
    long long v13 = *(_OWORD *)((char *)v54 + 537);
    *(_OWORD *)unint64_t v18 = v54[33];
    *(_OWORD *)&v18[9] = v13;
  }
  int v14 = ZinANELayer::CalculatePerf(v5, (ZinIrPerf *)v43, (const ZinCustomPerfInfo *)v17, (ZinPerfDescriptor *)v19);
  if (v14)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinNEPerf::GetChainedDependencyStall();
    }
  }
  else
  {
    *a2 = *((double *)&v20 + 1);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v17);
  if (__p)
  {
    unint64_t v32 = __p;
    operator delete(__p);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v43);
  if (v14) {
    uint64_t v15 = 3;
  }
  else {
LABEL_12:
  }
    uint64_t v15 = 0;
  if (v52)
  {
    uint64_t v53 = v52;
    operator delete(v52);
  }
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  if (v45) {
    operator delete(v45);
  }
  return v15;
}

void sub_21135654C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a9);
  unint64_t v10 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v10;
    operator delete(v10);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x380]);
  ZinCommonPerfInfo::~ZinCommonPerfInfo((ZinCommonPerfInfo *)&STACK[0x6E8]);
  _Unwind_Resume(a1);
}

uint64_t ZinNEPerf::HasL2DependencyStall(ZinNEPerf *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 42) + 24);
  if (!*(void *)(v1 + 264)) {
    return 0;
  }
  uint64_t v2 = **(ZinIrOpLayer ***)(v1 + 88);
  uint64_t result = ZinIrOpLayer::IsANELayer(v2);
  if (!result) {
    return result;
  }
  if (!*((void *)v2 + 33)) {
    return 0;
  }
  uint64_t result = ZinIrOpLayer::IsPELayer(**(ZinIrOpLayer ***)(v1 + 88));
  if (result)
  {
    uint64_t v4 = *(unsigned char **)(v1 + 264);
    uint64_t L2SrcDep = (_DWORD *)ZinMirL2Config::GetL2SrcDep((uint64_t)(v4 + 120), 0);
    uint64_t result = 0;
    if (*L2SrcDep == 2)
    {
      unsigned int v6 = ZinANELayer::IsChainedConsumer(**(ZinANELayer ***)(v1 + 88));
      if ((v6 & 1) != 0 || !v4[342] && !v4[343] && !v4[336] && !v4[337]) {
        return v6 ^ 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t ZinNEPerf::GetL2DependencyStall(ZinNEPerf *this, unint64_t *a2)
{
  if (*(unsigned char *)(*((void *)this + 42) + 47) && ZinNEPerf::HasL2DependencyStall(this))
  {
    uint64_t v4 = *((void *)this + 42);
    uint64_t v5 = *(void *)(v4 + 32);
    unsigned int v6 = **(ZinANELayer ***)(*(void *)(v4 + 24) + 88);
    LOWORD(v16[0]) = 257;
    BYTE2(v16[0]) = 1;
    *(_DWORD *)((char *)v16 + 3) = 0;
    *(_DWORD *)((char *)v16 + 6) = 0;
    BYTE10(v16[0]) = 1;
    *(_DWORD *)((char *)v16 + 11) = 0;
    ZinIrPerf::ZinIrPerf((uint64_t)v30, v5, (long long *)(v4 + 56), (uint64_t *)v16);
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    uint64_t v7 = operator new(8uLL);
    std::string __p = v7;
    *uint64_t v7 = 0;
    uint64_t v19 = v7 + 1;
    long long v20 = v7 + 1;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v23 = _Q0;
    long long v24 = _Q0;
    long long v25 = _Q0;
    long long v26 = _Q0;
    uint64_t v27 = 0;
    char v28 = 0;
    uint64_t v29 = 0;
    if (ZinANELayer::CalculatePerf(v6, (ZinIrPerf *)v30, (ZinPerfDescriptor *)v16))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinNEPerf::GetL2DependencyStall();
      }
      uint64_t v13 = 3;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = *(void *)&v16[0];
      if (*(void *)&v16[0] <= *((void *)&v16[0] + 1)) {
        unint64_t v14 = *((void *)&v16[0] + 1);
      }
      *a2 = v14;
    }
    if (__p)
    {
      uint64_t v19 = __p;
      operator delete(__p);
    }
    ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v30);
  }
  else
  {
    uint64_t v13 = 0;
    *a2 = 0;
  }
  return v13;
}

void sub_211356794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (__p) {
    operator delete(__p);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&a50);
  _Unwind_Resume(a1);
}

void ZinNEPerf::AdjustTotalCycleForChainedTask(ZinNEPerf *this)
{
  uint64_t v1 = *((void *)this + 42);
  if (*(unsigned char *)(v1 + 46) && *((double *)this + 24) > 0.0)
  {
    double v3 = (double)*((unint64_t *)this + 2) / *(double *)(v1 + 56) * 1000.0;
    double v4 = ZinEnginePerf::ComputeL2Time(this);
    ZinEnginePerf::ComputeDramAccessMetrics(this, (uint64_t)v7);
    double v5 = v7[0];
    if (v3 >= v4) {
      double v6 = v3;
    }
    else {
      double v6 = v4;
    }
    if (v6 >= v7[0]) {
      double v5 = v6;
    }
    if (v5 < *((double *)this + 24)) {
      double v5 = *((double *)this + 24);
    }
    *((void *)this + 2) = (unint64_t)(v5 * *(double *)(*((void *)this + 42) + 56) / 1000.0);
  }
}

void *ZinNEPerf::AdjustTotalCycleWithL2DependencyStall(void *this)
{
  if (*(unsigned char *)(this[42] + 47))
  {
    uint64_t v1 = this[19];
    if (v1)
    {
      unint64_t v2 = this[1];
      if (v2 <= this[2]) {
        unint64_t v2 = this[2];
      }
      this[2] = v2 + v1;
    }
  }
  return this;
}

unint64_t ZinNEPerf::GetNumAccRegs(ZinNEPerf *this, uint64_t a2)
{
  double v3 = (void *)*((void *)this + 42);
  unint64_t v4 = (*(uint64_t (**)(ZinNEPerf *))(*(void *)this + 104))(this);
  return v3[27] * v3[26] * v3[28] * (unint64_t)(float)((float)(a2 + v4 - 1) / (float)v4);
}

void ZinNEPerf::GetNonConvMACCyclesPerWorkunitPerOCG(ZinNEPerf *this)
{
  uint64_t v1 = (void *)*((void *)this + 42);
  uint64_t v2 = v1[3];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  double v3 = (const ZinNEPerfInfo *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 408))(v2);
  ZinNEPerf::GetPerfOcgSize((ZinNEPerf *)(v1 + 7), (const ZinCommonPerfInfo *)(v1 + 84), v3);
}

void ZinNEPerf::GetOutputChannelUtilization(ZinNEPerf *this, const ZinIrHalParameters *a2, const ZinCommonPerfInfo *a3, const ZinNEPerfInfo *a4)
{
}

void ZinNEPerf::AnalyzeUtilization(ZinNEPerf *this)
{
  ComputeSpatialUtilization((void *)(*((void *)this + 42) + 696));
  uint64_t v2 = *((void *)this + 42);
  double v3 = *(ZinNEPerf **)(v2 + 32);
  uint64_t v4 = (const ZinIrHalParameters *)(v2 + 56);
  uint64_t v5 = (const ZinCommonPerfInfo *)(v2 + 672);
  uint64_t v6 = (const ZinNEPerfInfo *)(*(uint64_t (**)(void))(**(void **)(v2 + 24) + 408))(*(void *)(v2 + 24));
  ZinNEPerf::GetOutputChannelUtilization(v3, v4, v5, v6);
}

unint64_t ZinNEPerf::EstimateMinimumNumOfWorkunits(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v6 = *(void *)(a5 + 656);
  if (!v6) {
    return -1;
  }
  unint64_t v7 = (*(void *)(a5 + 592) / a3) >> a4;
  uint64_t v8 = a1 - 1;
  unint64_t result = -1;
  unint64_t v10 = 1;
  for (i = 1; i <= v6; unint64_t v10 = i)
  {
    if ((a2 - 1 + v7 / v10) / (v7 / v10) * ((v8 + i) / i) < result)
    {
      *a6 = v10;
      unint64_t v6 = *(void *)(a5 + 656);
      unint64_t result = (a2 - 1 + v7 / v10) / (v7 / v10) * ((v8 + i) / i);
    }
    i *= 2;
  }
  return result;
}

void ZinNEPerf::CalculatePerf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "[ZinPerfModel] NEPerf::ComputeRunTime has invalid results.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "[ZinPerfModel] Texture operation analysis failed.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "[ZinPerfModel] Dependency stall analysis is failed.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "[ZinPerfModel] ZinNEPerf::ComputeRunCycle is not successful\n", a5, a6, a7, a8, 0);
}

void ZinNEPerf::ComputeRunTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinNEPerf::GetChainedDependencyStall()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v0[0] = 67109378;
  v0[1] = 1015;
  __int16 v1 = 2080;
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinPerfModel/src/ZinNEPerf.cpp";
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "ERROR: Performance model call isn't successful, line: %d, file: %s", (uint8_t *)v0, 0x12u);
}

void ZinNEPerf::GetL2DependencyStall()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v0[0] = 67109378;
  v0[1] = 1149;
  __int16 v1 = 2080;
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinPerfModel/src/ZinNEPerf.cpp";
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "ERROR: Performance model call isn't successful, line: %d, file: %s", (uint8_t *)v0, 0x12u);
}

uint64_t ZinIrOpt::ZinIrOptTwiceSameBottom(ZinIrOpt *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)*((void *)a2 + 11);
  if (*((void *)a2 + 12) - (void)v3 == 16 && *v3 == v3[1])
  {
    uint64_t v5 = *((void *)a2 + 8);
    if (*(_DWORD *)(v5 + 8) == 5)
    {
      int v6 = *(_DWORD *)(v5 + 12);
      switch(v6)
      {
        case 2:
          Hal = ZinIrTarget::GetHal(*((uint64_t **)a2 + 2), *(ZinIrTarget **)(*((void *)a2 + 2) + 160));
          if (*(unsigned char *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal) + 1213))
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_samebottomopt", (const void **)a2 + 3, &v24);
            __n128 v15 = ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v24);
            if (v25 < 0) {
              operator delete(v24);
            }
            (*(void (**)(void **__return_ptr, __n128))(***((void ***)a2 + 11) + 80))(&v24, v15);
            std::vector<ZinIrTensorInfo>::vector[abi:ne180100](&v21, &v24, 1uLL);
            (*(void (**)(ZinIrOpLayerGraph *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
            (*(void (**)(ZinIrOpLayerGraph *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
            ZinBuilder::CreateElementWiseLayer();
          }
          int v6 = *(_DWORD *)(*((void *)a2 + 8) + 12);
          break;
        case 1:
          if (*((char *)a2 + 47) >= 0) {
            size_t v7 = *((unsigned __int8 *)a2 + 47);
          }
          else {
            size_t v7 = *((void *)a2 + 4);
          }
          p_p = &__p;
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 14);
          if (v23 < 0) {
            p_p = __p;
          }
          if (v7)
          {
            if (*((char *)a2 + 47) >= 0) {
              unint64_t v9 = (char *)a2 + 24;
            }
            else {
              unint64_t v9 = (char *)*((void *)a2 + 3);
            }
            memmove(p_p, v9, v7);
          }
          strcpy((char *)p_p + v7, "_samebottomopt");
          __n128 v10 = ZinObjectNameFactory::ZinObjectNameFactory(&v24, &__p);
          if (v23 < 0) {
            operator delete(__p);
          }
          uint64_t v11 = *((void *)a2 + 2);
          uint64_t v12 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void, __n128))(***((void ***)a2 + 11)
                                                                                         + 32))(**((void **)a2 + 11), 0, 0, v10);
          uint64_t v13 = (*(uint64_t (**)(ZinIrOpLayerGraph *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
          ZinBuilder::CreateConstScaleAndBiasGOC(v11, (uint64_t)&v24, v12, *(unsigned int *)(v13 + 88), 0, 0, 1);
        case 4:
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_samebottomopt", (const void **)a2 + 3, &__p);
          __n128 v16 = ZinObjectNameFactory::ZinObjectNameFactory(&v24, &__p);
          if (v23 < 0) {
            operator delete(__p);
          }
          uint64_t v17 = *((void *)a2 + 2);
          unint64_t v18 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void, __n128))(***((void ***)a2 + 11)
                                                                                         + 32))(**((void **)a2 + 11), 0, 0, v16);
          uint64_t v19 = (*(uint64_t (**)(ZinIrOpLayerGraph *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
          ZinBuilder::CreateConstScaleAndBiasGOC(v17, (uint64_t)&v24, v18, *(unsigned int *)(v19 + 88), 0, 0, 1);
      }
    }
  }
  return 0;
}

void sub_2113576B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  a24 = &unk_26C34DA98;
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ZinIrCostVolumeUnit::ZinIrCostVolumeUnit(ZinIrCostVolumeUnit *this, const ZinIrCostVolumeUnitInfo *a2)
{
  std::string __p = 0;
  size_t v7 = 0;
  uint64_t v8 = 0;
  ZinIrUnit::ZinIrUnit(this, (uint64_t)&__p);
  if (__p)
  {
    size_t v7 = __p;
    operator delete(__p);
  }
  *(void *)this = &unk_26C34C9D8;
  *((void *)this + 7) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + 3);
    *((_OWORD *)this + 4) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 22) = v5;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 4, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((_OWORD *)a2 + 4);
  *((void *)this + 7) = &unk_26C350080;
  *(_OWORD *)((char *)this + 136) = *((_OWORD *)a2 + 5);
}

void sub_211357934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ZinIrUnit::~ZinIrUnit(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCostVolumeUnit::TensorDimensions(ZinIrCostVolumeUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4 = *((void *)this + 1);
  long long v5 = *(_OWORD *)(v4 + 8);
  long long v6 = *(_OWORD *)(v4 + 24);
  *((void *)a3 + 4) = *(void *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  *((void *)a3 + 1) = *((int *)this + 35) + 1;
  return 0;
}

void std::make_unique[abi:ne180100]<ZinIrCostVolumeInfo,ZinIrCostVolumeUnitInfo &>()
{
}

void sub_211357AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x21667D3C0](v15, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

void ZinIrCostVolumeUnit::CreateLayer()
{
}

void sub_211357BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C409D855DA1);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

void ZinIrCostVolumeUnit::~ZinIrCostVolumeUnit(void **this)
{
  *this = &unk_26C34C9D8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);

  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  uint64_t vars8;

  *this = &unk_26C34C9D8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);

  JUMPOUT(0x21667D3C0);
}

uint64_t ZinMirPETransposeFusion::Execute(uint64_t a1, void *a2, uint64_t a3)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C32F6F8;
  v5[1] = a1;
  v5[2] = a3;
  void v5[3] = v5;
  uint64_t v3 = ZinIrControlFlowGraph::TraverseForward(a2, (uint64_t)v5, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v5);
  return v3;
}

void sub_211357DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ZinMirPETransposeFusion::FuseCWTransposeToPE(int a1, ZinTransposeLayer *this, ZinIrOpLayerGraph *a3, uint64_t a4)
{
  if (*(unsigned char *)(**(void **)a4 + 1880))
  {
    BOOL IsCWTranspose = ZinTransposeLayer::IsCWTranspose(this);
    if (IsCWTranspose)
    {
      BOOL v7 = ZinMirPETransposeFusion::FuseCWTransposeToPEAsOutput(IsCWTranspose, this, a3);
      if (!v7)
      {
        BOOL v8 = ZinMirPETransposeFusion::FuseCWTransposeToPEAsInput(v7, this, a3);
        if (!v8)
        {
          ZinMirPETransposeFusion::ConvertToNEBypass(v8, (uint64_t)this);
        }
      }
    }
  }
}

BOOL ZinMirPETransposeFusion::FuseCWTransposeToPEAsOutput(uint64_t a1, ZinIrOpLayer *a2, ZinIrOpLayerGraph *a3)
{
  long long v5 = (ZinIrOpLayer *)**((void **)a2 + 11);
  BOOL result = ZinIrOpLayer::IsPELayer(v5);
  if (result)
  {
    if (*((void *)v5 + 15) - *((void *)v5 + 14) > 8uLL) {
      return 0;
    }
    BOOL v7 = (void *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0);
    uint64_t v8 = v7[7];
    uint64_t v9 = v7[8];
    uint64_t v10 = v7[9];
    uint64_t v11 = (*(unsigned int (**)(ZinIrOpLayer *))(*(void *)v5 + 408))(v5) ? v8 : v10;
    if (v9 != 1 || v11 != 1) {
      return 0;
    }
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)v5 + 408))(v5)) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = a2;
    }
    (*(void (**)(ZinIrOpLayer *, ZinIrOpLayer *))(*(void *)v5 + 728))(v5, v13);
    unint64_t v14 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 40))(a2, 0, 0);
    uint64_t v15 = (std::__shared_weak_count *)v14[1];
    uint64_t v19 = *v14;
    long long v20 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(ZinIrOpLayer *, uint64_t *))(*(void *)v5 + 24))(v5, &v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    memset(v17, 0, sizeof(v17));
    int v18 = 1065353216;
    if (ZinIrOpLayerGraph::MoveOutgoingEdges(a3, (uint64_t **)a2, v5, v17))
    {
      BOOL v16 = ZinIrOpLayerGraph::RemoveNode(a3, a2, 0);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v17);
      if (v16) {
        return 1;
      }
    }
    else
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v17);
    }
    ZinAssertImpl("graph modification failed while fusing cw transpose into pe layer");
  }
  return result;
}

void sub_211358084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinMirPETransposeFusion::FuseCWTransposeToPEAsInput(uint64_t a1, ZinIrOpLayer *a2, ZinIrOpLayerGraph *a3)
{
  uint64_t v3 = (ZinIrOpLayer **)*((void *)a2 + 14);
  if (*((void *)a2 + 15) - (void)v3 > 8uLL) {
    return 0;
  }
  uint64_t v5 = **((void **)a2 + 11);
  if (*(_DWORD *)(*(void *)(v5 + 64) + 8) == 35) {
    return 0;
  }
  BOOL v7 = *v3;
  BOOL result = ZinIrOpLayer::IsPELayer(*v3);
  if (!result) {
    return result;
  }
  if (*((void *)v7 + 25)) {
    return 0;
  }
  uint64_t v9 = (ZinIrOpLayer **)*((void *)v7 + 11);
  uint64_t v10 = *v9;
  if (*v9 == a2)
  {
    long long v20 = (void *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    uint64_t v21 = v20[7];
    uint64_t v22 = v20[8];
    uint64_t v23 = v20[9];
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)v7 + 640))(v7)) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = v23;
    }
    if (v22 != 1 || v24 != 1) {
      return 0;
    }
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)v7 + 640))(v7)) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = a2;
    }
    (*(void (**)(ZinIrOpLayer *, ZinIrOpLayer *))(*(void *)v7 + 736))(v7, v26);
  }
  else
  {
    if (v9[1] != a2) {
      return 0;
    }
    int v11 = *(_DWORD *)(*((void *)v7 + 8) + 8);
    uint64_t v12 = (void *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    uint64_t v13 = v12[7];
    uint64_t v14 = v12[8];
    uint64_t v15 = v12[9];
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)v7 + 640))(v7)) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v15;
    }
    uint64_t v17 = 1;
    if (v11 == 84) {
      uint64_t v17 = 2;
    }
    if (v14 != v17 || v16 != 1) {
      return 0;
    }
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)v7 + 648))(v7)) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = a2;
    }
    (*(void (**)(ZinIrOpLayer *, ZinIrOpLayer *))(*(void *)v7 + 744))(v7, v19);
  }
  if (!ZinIrOpLayerGraph::SwapEdgeDestination((uint64_t)a3, v5, (uint64_t)a2, (uint64_t)v7, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0)|| !ZinIrOpLayerGraph::RemoveNode(a3, a2, 0))
  {
    ZinAssertImpl("Failed to update graph to fuse CW transpose into PE layer input");
  }
  if (v10 == a2
    && (ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a3, **((ZinIrOpLayerGraph ***)v7 + 11), **((ZinIrOpLayer ***)v7 + 11), (uint64_t)v7, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0) & 1) == 0)
  {
    ZinAssertImpl("Failed to swap inputs to the PE layer after fusing CW transpose input");
  }
  return 1;
}

void ZinMirPETransposeFusion::ConvertToNEBypass(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 47) >= 0) {
    size_t v3 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    size_t v3 = *(void *)(a2 + 32);
  }
  uint64_t v4 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v3 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v4 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v3)
  {
    if (*(char *)(a2 + 47) >= 0) {
      uint64_t v5 = (const void *)(a2 + 24);
    }
    else {
      uint64_t v5 = *(const void **)(a2 + 24);
    }
    memmove(v4, v5, v3);
  }
  *(_WORD *)((char *)&v4->__r_.__value_.__l.__data_ + v3) = 95;
  long long v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v21, "pe_trans");
  BOOL v7 = std::string::append(v6, "_xfm", 4uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v26 = v7->__r_.__value_.__r.__words[2];
  long long v25 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (v26 >= 0) {
    uint64_t v9 = (const std::string::value_type *)&v25;
  }
  else {
    uint64_t v9 = (const std::string::value_type *)v25;
  }
  if (v26 >= 0) {
    std::string::size_type v10 = HIBYTE(v26);
  }
  else {
    std::string::size_type v10 = *((void *)&v25 + 1);
  }
  int v11 = std::string::append(&v23, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  __n128 v13 = ZinObjectNameFactory::ZinObjectNameFactory(&v24, __p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = **(void **)(a2 + 88);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = *(unsigned int *)((*(uint64_t (**)(uint64_t, void, void, __n128))(*(void *)a2 + 32))(a2, 0, 0, v13)+ 88);
  uint64_t v20 = 0;
  v19[0] = 0;
  v19[168] = 0;
  ZinBuilder::CreateNEBypass(v15, (uint64_t)&v24, v14, v16, &v20, 1, (uint64_t)v19, 1.0);
}

void sub_2113587CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  a17 = &unk_26C359A08;
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  *(void *)(v22 - 136) = &unk_26C34DA98;
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C32F6F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C32F6F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, ZinTransposeLayer **a3)
{
  if (*(_DWORD *)(*((void *)*a3 + 8) + 8) == 37) {
    ZinMirPETransposeFusion::FuseCWTransposeToPE(*(void *)(a1 + 8), *a3, *a2, *(void *)(a1 + 16));
  }
  return 0;
}

uint64_t std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t ZinF16ToE5M2(float a1)
{
  int v1 = (LODWORD(a1) >> 8) & 0x80;
  unsigned int v2 = v1 | ((((unsigned __int16)(LOWORD(a1) & 0x7FFF) >> 7) + 1) >> 1);
  unsigned int v3 = v1 | 0x7E;
  if ((LOWORD(a1) & 0x7FFFu) >= 0x7C01) {
    return v3;
  }
  else {
    return v2;
  }
}

float ZinE5M2ToF16(int a1)
{
  LODWORD(result) = a1 << 8;
  return result;
}

float ZinE5M2ToF32(__int16 a1)
{
  _H0 = a1 << 8;
  __asm { FCVT            S0, H0 }
  return result;
}

uint64_t ZinF32ToE5M2(float _S0)
{
  __asm { FCVT            H0, S0 }
  int v5 = (LODWORD(_S0) >> 8) & 0x80;
  unsigned int v6 = v5 | ((((unsigned __int16)(LOWORD(_S0) & 0x7FFF) >> 7) + 1) >> 1);
  unsigned int v7 = v5 | 0x7E;
  if ((LOWORD(_S0) & 0x7FFFu) >= 0x7C01) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t ZinIrCropResizeUnit::ZinIrCropResizeUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = ZinIrUnit::ZinIrUnit((void *)a1, a3);
  *int v5 = &unk_26C34CAA8;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v5 + 7), (const ZinIrTextureUnitInfo *)a2);
  int v6 = *(_DWORD *)(a2 + 156);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 56) = &unk_26C3500A0;
  *(_DWORD *)(a1 + 212) = v6;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)(a1 + 216), *(const void **)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 3);
  *(_OWORD *)(a1 + 24std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 184);
  return a1;
}

void sub_211358B38(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCropResizeUnit::TensorDimensions(ZinIrCropResizeUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  if (*((void *)this + 2) - (void)v4 != 240) {
    ZinAssertImpl("CropResize layer should have two bottoms, (1) input tensor and (2) index tensor.", a2, a3, a4);
  }
  uint64_t v5 = v4[2];
  *(void *)a3 = v4[16];
  *((void *)a3 + 1) = v5;
  *((void *)a3 + 4) = v4[5];
  uint64_t v6 = *((int *)this + 60);
  *((void *)a3 + 2) = *((int *)this + 61);
  *((void *)a3 + 3) = v6;
  return 0;
}

void ZinIrCropResizeUnit::CreateOpcode(unsigned int **this, const ZinIrHalParameters *a2)
{
  int v3 = *(_DWORD *)((*((uint64_t (**)(unsigned int **, const ZinIrHalParameters *))*this + 14))(this, a2) + 64);
  unsigned int v4 = *this[1];
  if (!v3)
  {
    if (v4 == 8) {
      ZinAssertImpl("Invalid input layer format:%s for the crop_resize layer", "packed10");
    }
    if ((IsFormatDMAConvertibleToFP16(v4) & 1) == 0 && CheckValidFormat(*this[1]))
    {
      ZinTensorFormatToString(*this[1], v6);
      if (v7 >= 0) {
        uint64_t v5 = (const char *)v6;
      }
      else {
        uint64_t v5 = (const char *)v6[0];
      }
      ZinAssertImpl("Invalid input layer format:%s for the crop_resize layer", v5);
    }
  }
  operator new();
}

void sub_211358CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrCropResizeUnit::CreateLayer(unsigned int **a1, const ZinIrHalParameters *a2)
{
}

void sub_211358E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, ZinIrPadUnitInfo *a2)
{
  *(_DWORD *)this = 44;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)this + 8), a2);
  *((void *)this + 1) = &unk_26C3499A0;
  long long v4 = *(_OWORD *)((char *)a2 + 156);
  long long v5 = *(_OWORD *)((char *)a2 + 172);
  uint64_t v6 = *(void *)((char *)a2 + 188);
  *((void *)this + 26) = 0;
  *(void *)((char *)this + 196) = v6;
  *(_OWORD *)((char *)this + 18std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *(_OWORD *)((char *)this + 164) = v4;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)this + 26, *((const void **)a2 + 25), *((void *)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3);
  *((_WORD *)this + 116) = *((_WORD *)a2 + 112);
  return this;
}

void sub_211358F68(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v1);
  _Unwind_Resume(a1);
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, ZinIrInputViewUnitInfo *a2)
{
  *(_DWORD *)this = 17;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C34F860;
  *(_OWORD *)((char *)this + 88) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_211359060(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, ZinIrPixelShuffleUnitInfo *a2)
{
  *(_DWORD *)this = 31;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C351540;
  uint64_t v6 = *((void *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((void *)this + 11) = v6;
  return this;
}

void sub_211359168(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, ZinIrPixelUnshuffleUnitInfo *a2)
{
  *(_DWORD *)this = 32;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C352340;
  uint64_t v6 = *((void *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((void *)this + 11) = v6;
  return this;
}

void sub_211359270(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this)
{
  int v2 = *(_DWORD *)this;
  if (*(int *)this <= 30)
  {
    if (v2 == 1)
    {
      *((void *)this + 1) = &unk_26C34CC70;
      int v5 = (void *)*((void *)this + 20);
      if (v5)
      {
        *((void *)this + 21) = v5;
        operator delete(v5);
      }
      uint64_t v6 = (void *)*((void *)this + 17);
      if (v6)
      {
        *((void *)this + 18) = v6;
        operator delete(v6);
      }
      long long v4 = (void **)((char *)this + 8);
      goto LABEL_16;
    }
    if (v2 != 17) {
      return;
    }
LABEL_10:
    long long v4 = (void **)((char *)this + 8);
LABEL_16:
    ZinIrUnitInfo::~ZinIrUnitInfo(v4);
    return;
  }
  if (v2 == 31 || v2 == 32) {
    goto LABEL_10;
  }
  if (v2 == 44)
  {
    *((void *)this + 1) = &unk_26C3499A0;
    int v3 = (void *)*((void *)this + 26);
    if (v3)
    {
      *((void *)this + 27) = v3;
      operator delete(v3);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)this + 8));
  }
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, const ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *a2)
{
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 > 30)
  {
    if (v4 == 31)
    {
      *((void *)this + 1) = &unk_26C345B80;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long v9 = *((_OWORD *)a2 + 1);
        *((void *)this + 4) = *((void *)a2 + 4);
        *((_OWORD *)this + 1) = v9;
      }
      int v16 = *((_DWORD *)a2 + 10);
      *((void *)this + 6) = 0;
      *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v16;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      uint64_t v17 = &unk_26C351540;
    }
    else
    {
      if (v4 != 32)
      {
        if (v4 == 44)
        {
          ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)this + 8), (const ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)a2 + 8));
          *((void *)this + 1) = &unk_26C3499A0;
          long long v5 = *(_OWORD *)((char *)a2 + 164);
          long long v6 = *(_OWORD *)((char *)a2 + 180);
          uint64_t v7 = *(void *)((char *)a2 + 196);
          *((void *)this + 26) = 0;
          *(void *)((char *)this + 196) = v7;
          *(_OWORD *)((char *)this + 18std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v6;
          *(_OWORD *)((char *)this + 164) = v5;
          *((void *)this + 27) = 0;
          *((void *)this + 28) = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)this + 26, *((const void **)a2 + 26), *((void *)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3);
          *((_WORD *)this + 116) = *((_WORD *)a2 + 116);
        }
        return this;
      }
      *((void *)this + 1) = &unk_26C345B80;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long v10 = *((_OWORD *)a2 + 1);
        *((void *)this + 4) = *((void *)a2 + 4);
        *((_OWORD *)this + 1) = v10;
      }
      int v18 = *((_DWORD *)a2 + 10);
      *((void *)this + 6) = 0;
      *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v18;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      uint64_t v17 = &unk_26C352340;
    }
    *((void *)this + 1) = v17;
    uint64_t v19 = *((void *)a2 + 11);
    *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
    *((void *)this + 11) = v19;
    return this;
  }
  if (v4 == 1)
  {
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)this + 8), (const ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)a2 + 8));
    *((void *)this + 1) = &unk_26C34A9B8;
    long long v11 = *(_OWORD *)((char *)a2 + 248);
    v12[16] = *(_OWORD *)((char *)a2 + 264);
    *(_OWORD *)((char *)this + 248) = v11;
    long long v13 = *(_OWORD *)((char *)a2 + 280);
    long long v14 = *(_OWORD *)((char *)a2 + 296);
    long long v15 = *(_OWORD *)((char *)a2 + 312);
    *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
    v12[18] = v14;
    v12[19] = v15;
    v12[17] = v13;
  }
  else if (v4 == 17)
  {
    *((void *)this + 1) = &unk_26C345B80;
    if (*((char *)a2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
    }
    else
    {
      long long v8 = *((_OWORD *)a2 + 1);
      *((void *)this + 4) = *((void *)a2 + 4);
      *((_OWORD *)this + 1) = v8;
    }
    int v20 = *((_DWORD *)a2 + 10);
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v20;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
    *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 1) = &unk_26C34F860;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  }
  return this;
}

void sub_2113596B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinLargeKernelSizeUtils::DecomposeLargeKernelConvDesc(uint64_t *a1, long long *a2, int64x2_t *a3, int a4, uint64_t a5, int *a6, int64x2_t *a7, uint64_t **a8, uint64_t **a9)
{
  v181[43] = *MEMORY[0x263EF8340];
  if (ZinConvLayerUtils::IsDilatedConv(&a3[4].i32[2])) {
    ZinAssertImpl("Error: dilated conv with large kernel size is not supported");
  }
  if (a3[6].i8[1]) {
    ZinAssertImpl("Error: deconv with large kernel size is not supported");
  }
  if (a3[5].i64[1] != 1) {
    ZinAssertImpl("Error: grouped conv with large kernel size is not supported");
  }
  if (a3[5].i32[1] != 1) {
    ZinAssertImpl("Error: only support zero padding for conv with large kernel");
  }
  __int32 v16 = a3[1].i32[2];
  __int32 v17 = a3[2].i32[1];
  if (v16 != v17) {
    ZinAssertImpl("Error: input and output x strides should be the same for conv with large kernel but are %d and %d", a3[1].i32[2], v17);
  }
  __int32 v18 = a3[1].i32[3];
  __int32 v19 = a3[2].i32[2];
  if (v18 != v19) {
    ZinAssertImpl("Error: input and output y strides should be the same for conv with large kernel but are %d and %d", a3[1].i32[3], v19);
  }
  if ((v16 - 1) >= 2) {
    ZinAssertImpl("Error: x strides should be 1 or 2 for conv with large kernel but is %d", a3[1].i32[2]);
  }
  if ((v18 - 1) >= 2) {
    ZinAssertImpl("Error: y strides should be 1 or 2 for conv with large kernel but is %d", a3[1].i32[3]);
  }
  uint64_t v20 = a3->i64[1];
  if (((a3->i64[0] | v20) & 7) != 0) {
    ZinAssertImpl("Error: kernel width and height should be multiple of 8 for large kernel but are %zd and %zd", a3->i64[0], v20);
  }
  if (a3[1].i64[0] != 1) {
    ZinAssertImpl("Error: kernel with depth = %zd > 1 is not supported for large kernel", a3[1].u64[0]);
  }
  *(void *)a6 = 0x800000008;
  int64x2_t v21 = a3[2];
  int64x2_t v22 = *a3;
  a7[1] = a3[1];
  a7[2] = v21;
  *a7 = v22;
  int64x2_t v23 = a3[3];
  int64x2_t v24 = a3[4];
  float64x2_t v25 = (float64x2_t)a3[5];
  a7[6].i64[0] = a3[6].i64[0];
  a7[4] = v24;
  a7[5] = (int64x2_t)v25;
  a7[3] = v23;
  a7[1].i64[1] = 0x100000001;
  float64x2_t v26 = (float64x2_t)a3[3];
  a7[4].i64[0] = a3[4].i64[0];
  a7[3] = (int64x2_t)v26;
  v26.f64[0] = (double)a3[3].i32[2];
  v25.f64[0] = (double)a3[3].i32[0];
  int32x2_t v27 = *(int32x2_t *)a6;
  v28.i64[0] = (int)*(void *)a6;
  v28.i64[1] = (int)HIDWORD(*(void *)a6);
  uint64_t v107 = v28.i64[1];
  float64x2_t v29 = vcvtq_f64_s64(v28);
  v25.f64[1] = (double)a3[3].i32[1] + 1.0;
  v26.f64[1] = (double)a3[3].i32[3] + 1.0;
  a7[3] = (int64x2_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vrndpq_f64(vdivq_f64(v25, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29.f64[0], 0)))), (int32x4_t)vcvtq_s64_f64(vrndpq_f64(vdivq_f64(v26, (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1)))));
  int v99 = a3;
  v25.f64[0] = NAN;
  v25.f64[1] = NAN;
  float64x2_t v103 = v29;
  *a7 = vcvtq_s64_f64(vrndpq_f64(vdivq_f64(vcvtq_f64_s64(vaddq_s64(vaddw_s32(*a3, v27), (int64x2_t)v25)), v29)));
  memset(&v147[1], 0, 24);
  int v148 = 0;
  long long v149 = 0u;
  long long v150 = 0u;
  uint64_t v151 = -1;
  uint64_t v152 = 0;
  int v153 = -1;
  uint64_t v154 = -1;
  int v155 = -1;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  uint64_t v156 = -1;
  uint64_t v160 = 0;
  int v161 = 1;
  char v162 = 0;
  __int16 v163 = 0;
  int v164 = -1;
  uint64_t v165 = -1;
  int v166 = -1;
  uint64_t v167 = -1;
  uint64_t v168 = 0x3F80000000000006;
  int v169 = 0;
  uint64_t v30 = a7[1].i64[0];
  *(void *)((char *)&v173 + 4) = a7[1].i64[1];
  v147[0] = &unk_26C34A9B8;
  *((void *)&v170 + 1) = 1;
  *((void *)&v172 + 1) = 0x100000001;
  LODWORD(v173) = 1;
  HIDWORD(v173) = a7[2].i32[0];
  *(void *)&long long v172 = v30;
  int64x2_t v171 = *a7;
  *(void *)&v174[16] = a7[4].i64[0];
  *(int64x2_t *)uint64_t v174 = a7[3];
  *(_DWORD *)&v174[24] = a7[5].i32[1];
  LODWORD(v17std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
  DWORD2(v15std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a4;
  BYTE4(v17std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a7[6].i8[0];
  uint64_t v31 = a1[1];
  uint64_t v105 = *a1;
  uint64_t v106 = a1[4];
  uint64_t v32 = a1[2];
  uint64_t v33 = a1[3];
  std::string::basic_string[abi:ne180100]<0>(&v129, "conv");
  LODWORD(v175) = 1;
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v176, (const ZinIrKernelUnitInfo *)v147);
  long long v34 = v172;
  long long v35 = *(_OWORD *)v174;
  v36[18] = v173;
  v36[19] = v35;
  long long v178 = *(_OWORD *)&v174[12];
  long long v37 = v170;
  v36[16] = v171;
  v36[17] = v34;
  unsigned int v176 = &unk_26C34A9B8;
  long long v177 = v37;
  std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, &v129, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
  std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(a8, __p, (long long *)__p);
  unint64_t v38 = vcvtpd_u64_f64((double)v33 / v103.f64[0]);
  uint64_t v39 = v28.i64[0];
  double v40 = (double)v32 / v103.f64[1];
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v181);
  if (v180 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v41 = vcvtpd_u64_f64(v40);
  int64_t v42 = v39 * v38;
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
  if (SHIBYTE(v130) < 0) {
    operator delete((void *)v129);
  }
  int64_t v43 = v107 * v41;
  uint64_t v44 = a1[2];
  uint64_t v45 = a1[3];
  if (v42 != v45 || v43 != v44)
  {
    *((void *)&v129 + 1) = 0;
    uint64_t v130 = 0;
    int v132 = 0;
    uint64_t v131 = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    uint64_t v135 = -1;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v138 = 0u;
    memset(v139, 0, sizeof(v139));
    *(void *)&long long v129 = &unk_26C3499A0;
    long long v140 = 0u;
    long long v141 = 0u;
    uint64_t v142 = 0;
    long long v144 = 0;
    uint64_t v143 = 0;
    __int16 v146 = 0;
    unint64_t v145 = 0;
    int v46 = v43 - v44;
    DWORD1(v14std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v42 - v45;
    HIDWORD(v14std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v46;
    if ((int)v42 - (int)v45 < 1)
    {
      uint64_t v50 = 0;
    }
    else
    {
      uint64_t v47 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v145, 1uLL);
      uint64_t v49 = &v47[v48];
      void *v47 = 0x100000004;
      uint64_t v50 = v47 + 1;
      uint64_t v51 = (char *)v144;
      uint64_t v52 = (char *)v143;
      if (v144 != v143)
      {
        do
        {
          uint64_t v53 = *((void *)v51 - 1);
          v51 -= 8;
          *--uint64_t v47 = v53;
        }
        while (v51 != v52);
        uint64_t v51 = (char *)v143;
      }
      uint64_t v143 = v47;
      long long v144 = v50;
      unint64_t v145 = (unint64_t)v49;
      if (v51) {
        operator delete(v51);
      }
      long long v144 = v50;
      int v46 = HIDWORD(v140);
    }
    if (v46 >= 1)
    {
      if ((unint64_t)v50 >= v145)
      {
        uint64_t v55 = ((char *)v50 - (unsigned char *)v143) >> 3;
        if ((unint64_t)(v55 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v56 = (uint64_t)(v145 - (void)v143) >> 2;
        if (v56 <= v55 + 1) {
          unint64_t v56 = v55 + 1;
        }
        if (v145 - (unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57) {
          long long v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v145, v57);
        }
        else {
          long long v58 = 0;
        }
        long long v59 = &v58[8 * v55];
        long long v60 = &v58[8 * v57];
        *(void *)long long v59 = 0x100000003;
        long long v54 = v59 + 8;
        long long v61 = (char *)v144;
        long long v62 = (char *)v143;
        if (v144 != v143)
        {
          do
          {
            uint64_t v63 = *((void *)v61 - 1);
            v61 -= 8;
            *((void *)v59 - 1) = v63;
            v59 -= 8;
          }
          while (v61 != v62);
          long long v61 = (char *)v143;
        }
        uint64_t v143 = v59;
        long long v144 = v54;
        unint64_t v145 = (unint64_t)v60;
        if (v61) {
          operator delete(v61);
        }
      }
      else
      {
        void *v50 = 0x100000003;
        long long v54 = v50 + 1;
      }
      long long v144 = v54;
    }
    std::string::basic_string[abi:ne180100]<0>(&v120, "pad");
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175, (ZinIrPadUnitInfo *)&v129);
    std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, &v120, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(a8, __p, (long long *)__p);
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v181);
    if (v180 < 0) {
      operator delete(__p[0]);
    }
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
    if (SHIBYTE(v121) < 0) {
      operator delete((void *)v120);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "pad");
    int32x2_t v175 = __p;
    long long v64 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v175);
    *((void *)v64 + 7) = v105;
    *((void *)v64 + 8) = v31;
    *((void *)v64 + 9) = v43;
    *((void *)v64 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v42;
    *((void *)v64 + 11) = v106;
    if (v180 < 0) {
      operator delete(__p[0]);
    }
    *(void *)&long long v129 = &unk_26C3499A0;
    if (v143)
    {
      long long v144 = v143;
      operator delete(v143);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v129);
  }
  uint64_t v65 = *a6;
  uint64_t v66 = a6[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "unshuffle");
  int32x2_t v175 = __p;
  long long v67 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v175);
  uint64_t v104 = a8;
  uint64_t v68 = v42 / v65;
  *((void *)v67 + 7) = v105;
  *((void *)v67 + 8) = v31 * (int)v66 * (uint64_t)(int)v65;
  uint64_t v69 = v43 / v66;
  *((void *)v67 + 9) = v69;
  *((void *)v67 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v68;
  *((void *)v67 + 11) = v106;
  if (v180 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v98 = a2;
  uint64_t v70 = *((void *)a2 + 1);
  uint64_t v71 = *a6;
  uint64_t v72 = a6[1];
  uint64_t v73 = (uint64_t *)a7;
  uint64_t v74 = a7[3].i32[2];
  uint64_t v75 = *((int *)v73 + 15);
  uint64_t v76 = *((int *)v73 + 13);
  uint64_t v100 = *((int *)v73 + 12);
  int v101 = v73;
  __int32 v102 = a6;
  uint64_t v78 = *v73;
  uint64_t v77 = v73[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "conv");
  int32x2_t v175 = __p;
  int v79 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v175);
  uint64_t v80 = v70 * v71 * v72;
  uint64_t v81 = v69 + v74 + v75 - v77 + 1;
  uint64_t v82 = v68 + v100 + v76 - v78 + 1;
  *((void *)v79 + 7) = v105;
  *((void *)v79 + 8) = v80;
  *((void *)v79 + 9) = v81;
  *((void *)v79 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v82;
  *((void *)v79 + 11) = v106;
  if (v180 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v83 = *v102;
  uint64_t v84 = v102[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "shuffle");
  int32x2_t v175 = __p;
  uint64_t v85 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v175);
  uint64_t v86 = v80 / ((int)v84 * (uint64_t)(int)v83);
  uint64_t v87 = v81 * v84;
  uint64_t v88 = v82 * v83;
  *((void *)v85 + 7) = v105;
  *((void *)v85 + 8) = v86;
  *((void *)v85 + 9) = v87;
  *((void *)v85 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v88;
  *((void *)v85 + 11) = v106;
  if (v180 < 0) {
    operator delete(__p[0]);
  }
  *((void *)&v129 + 1) = 0;
  uint64_t v130 = 0;
  long long v133 = 0u;
  long long v134 = 0u;
  uint64_t v131 = 0;
  uint64_t v135 = -1;
  *(void *)&long long v129 = &unk_26C351540;
  int v132 = 31;
  *((void *)&v120 + 1) = 0;
  uint64_t v121 = 0;
  int v123 = 0;
  uint64_t v122 = 0;
  long long v124 = 0u;
  long long v125 = 0u;
  uint64_t v89 = *(void *)v102;
  DWORD2(v136) = v102[2];
  *(void *)&long long v136 = v89;
  *(void *)&long long v120 = &unk_26C352340;
  uint64_t v126 = -1;
  uint64_t v127 = v89;
  int v128 = DWORD2(v136);
  std::string::basic_string[abi:ne180100]<0>(&v110, "shuffle");
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175, (ZinIrPixelShuffleUnitInfo *)&v129);
  std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, &v110, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
  std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(v104, __p, (long long *)__p);
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v181);
  if (v180 < 0) {
    operator delete(__p[0]);
  }
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
  if (SHIBYTE(v111) < 0) {
    operator delete((void *)v110);
  }
  std::string::basic_string[abi:ne180100]<0>(&v110, "unshuffle");
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175, (ZinIrPixelUnshuffleUnitInfo *)&v120);
  std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, &v110, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
  std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(v104, __p, (long long *)__p);
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v181);
  if (v180 < 0) {
    operator delete(__p[0]);
  }
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
  if (SHIBYTE(v111) < 0) {
    operator delete((void *)v110);
  }
  uint64_t v90 = *((void *)v98 + 2);
  if (v87 > v90)
  {
    *((void *)&v110 + 1) = 0;
    uint64_t v111 = 0;
    int v113 = 0;
    uint64_t v112 = 0;
    long long v114 = 0u;
    long long v115 = 0u;
    uint64_t v116 = -1;
    *(void *)&long long v110 = &unk_26C34F860;
    int v117 = v102[1] * *((_DWORD *)v101 + 14) - v99[3].i32[2];
    int v118 = v90;
    uint64_t v119 = 0x300000001;
    std::string::basic_string[abi:ne180100]<0>(v108, "view_h");
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175, (ZinIrInputViewUnitInfo *)&v110);
    std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, (long long *)v108, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(v104, __p, (long long *)__p);
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v181);
    if (v180 < 0) {
      operator delete(__p[0]);
    }
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
    if (v109 < 0) {
      operator delete(v108[0]);
    }
    uint64_t v91 = *((void *)v98 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "view_h");
    int32x2_t v175 = __p;
    long long v92 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v175);
    *((void *)v92 + 7) = v105;
    *((void *)v92 + 8) = v86;
    *((void *)v92 + 9) = v91;
    *((void *)v92 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v88;
    *((void *)v92 + 11) = v106;
    if (v180 < 0) {
      operator delete(__p[0]);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v110);
  }
  uint64_t v93 = *((void *)v98 + 3);
  if (v88 > v93)
  {
    *((void *)&v110 + 1) = 0;
    uint64_t v111 = 0;
    int v113 = 0;
    uint64_t v112 = 0;
    long long v114 = 0u;
    long long v115 = 0u;
    uint64_t v116 = -1;
    *(void *)&long long v110 = &unk_26C34F860;
    int v117 = *v102 * *((_DWORD *)v101 + 12) - v99[3].i32[0];
    int v118 = v93;
    uint64_t v119 = 0x400000001;
    std::string::basic_string[abi:ne180100]<0>(v108, "view_w");
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175, (ZinIrInputViewUnitInfo *)&v110);
    std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)__p, (long long *)v108, (ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(v104, __p, (long long *)__p);
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)v181);
    if (v180 < 0) {
      operator delete(__p[0]);
    }
    ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)&v175);
    if (v109 < 0) {
      operator delete(v108[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "view_w");
    int32x2_t v175 = __p;
    long long v94 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a9, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v175);
    long long v95 = *v98;
    long long v96 = v98[1];
    *((void *)v94 + 11) = *((void *)v98 + 4);
    *(_OWORD *)(v94 + 72) = v96;
    *(_OWORD *)(v94 + 56) = v95;
    if (v180 < 0) {
      operator delete(__p[0]);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v110);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v120);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v129);
  v147[0] = &unk_26C34CC70;
  if ((void)v159)
  {
    *((void *)&v159 + 1) = v159;
    operator delete((void *)v159);
  }
  if (*((void *)&v157 + 1))
  {
    *(void *)&long long v158 = *((void *)&v157 + 1);
    operator delete(*((void **)&v157 + 1));
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v147);
  return 1;
}

void sub_21135A440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
}

uint64_t std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ZinLargeKernelSizeUtils::CreateLargeKernelDecomposedConvLayer(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unsigned int *a5, void *a6, uint64_t a7)
{
  uint64_t v63 = *(void *)(a2 + 16);
  uint64_t v70 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  ZinIrKernel::GetWeightDimensions(*(ZinIrKernel **)(a2 + 136), (uint64_t)&v96);
  long long v93 = v96;
  long long v94 = v97;
  uint64_t v11 = *a4;
  uint64_t v65 = a4;
  uint64_t v74 = a4[1];
  uint64_t v12 = (int)v74 * (uint64_t)(int)v11;
  uint64_t v13 = *((void *)&v96 + 1);
  uint64_t v14 = v96 * v12;
  *(void *)&long long v93 = v96 * v12;
  *((void *)&v93 + 1) = *((void *)&v96 + 1) * v12;
  unint64_t v15 = a6[1];
  uint64_t v69 = a6;
  *((void *)&v94 + 1) = *a6;
  uint64_t v95 = v98;
  *(void *)&long long v94 = v15;
  uint64_t v72 = *((void *)&v96 + 1) * v12;
  unsigned long long v82 = __PAIR128__(*((unint64_t *)&v94 + 1), v15);
  uint64_t v16 = *((void *)&v96 + 1) * v12 * v96 * v12 * *((void *)&v94 + 1) * v15 * v98;
  details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)v91, v16);
  if (v16)
  {
    uint64_t v17 = 0;
    do
    {
      int v18 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
      __int32 v19 = (void *)(v92 + v17);
      if (!v18) {
        __int32 v19 = v91;
      }
      *__int32 v19 = v14 + 1;
      *(_OWORD *)(v19 + 1) = 0u;
      *(_OWORD *)(v19 + 3) = 0u;
      v17 += 40;
      --v16;
    }
    while (v16);
  }
  uint64_t v67 = a7;
  uint64_t v68 = a2;
  if ((int)v74 >= 1)
  {
    uint64_t v71 = 0;
    unint64_t v20 = 0;
    uint64_t v77 = v82 * v74;
    uint64_t v21 = *((void *)&v82 + 1) * v11;
    uint64_t v81 = v14 + 1;
    uint64_t v61 = v13 * v11 * v12;
    do
    {
      if ((int)v11 >= 1)
      {
        uint64_t v78 = 0;
        unint64_t v22 = 0;
        uint64_t v23 = *((void *)&v96 + 1);
        uint64_t v73 = v71;
        do
        {
          if (v23 >= 1)
          {
            uint64_t v75 = 0;
            uint64_t v79 = 0;
            uint64_t v24 = v96;
            do
            {
              if (v24 >= 1)
              {
                uint64_t v80 = 0;
                uint64_t v76 = v73;
                do
                {
                  if (v77 >= 1)
                  {
                    for (int64_t i = 0; i != v77; ++i)
                    {
                      if (v21 >= 1)
                      {
                        int64_t v26 = 0;
                        uint64_t v27 = i - v20;
                        do
                        {
                          uint64_t v28 = v26 / v11
                              + (i / v74 + (v76 + v11 * (v75 + i - i / v74 * v74) + v26 - v11 * (v26 / v11)) * v82)
                              * *((void *)&v82 + 1);
                          if (i < v20
                            || v26 < v22
                            || (uint64_t)v97 <= v27
                            || (uint64_t)(*((void *)&v97 + 1) + v22) <= v26)
                          {
                            int v31 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            uint64_t v32 = (uint64_t *)(v92 + 40 * v28);
                            if (!v31) {
                              uint64_t v32 = v91;
                            }
                            *uint64_t v32 = v81;
                            *(_OWORD *)(v32 + 1) = 0u;
                            *(_OWORD *)(v32 + 3) = 0u;
                          }
                          else
                          {
                            int v29 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                     + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                            uint64_t v30 = (uint64_t *)(v92 + 40 * v28);
                            if (!v29) {
                              uint64_t v30 = v91;
                            }
                            *uint64_t v30 = v80;
                            v30[1] = v79;
                            int v30[2] = v27;
                            _OWORD v30[3] = v78 + v26;
                            v30[4] = 0;
                          }
                          ++v26;
                        }
                        while (v21 != v26);
                      }
                    }
                    uint64_t v24 = v96;
                  }
                  v76 += v61 * v74;
                  ++v80;
                }
                while (v24 > v80);
                uint64_t v23 = *((void *)&v96 + 1);
              }
              v75 += v74;
              ++v79;
            }
            while (v23 > v79);
          }
          ++v22;
          v73 += v72;
          --v78;
        }
        while (v22 != v11);
      }
      ++v20;
      v71 += v61;
    }
    while (v20 != v74);
  }
  uint64_t v33 = *(void *)(v68 + 136);
  if (*(char *)(v70 + 47) >= 0) {
    size_t v34 = *(unsigned __int8 *)(v70 + 47);
  }
  else {
    size_t v34 = *(void *)(v70 + 32);
  }
  long long v35 = &v88;
  std::string::basic_string[abi:ne180100]((uint64_t)&v88, v34 + 1);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v35 = (std::string *)v88.__r_.__value_.__r.__words[0];
  }
  if (v34)
  {
    if (*(char *)(v70 + 47) >= 0) {
      long long v36 = (const void *)(v70 + 24);
    }
    else {
      long long v36 = *(const void **)(v70 + 24);
    }
    memmove(v35, v36, v34);
  }
  *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v85, "lks_kernel");
  long long v37 = std::string::append(&v85, "_xfm", 4uLL);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  int64_t v87 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v86 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v87 >= 0) {
    uint64_t v39 = v86;
  }
  else {
    uint64_t v39 = (void **)v86[0];
  }
  if (v87 >= 0) {
    std::string::size_type v40 = HIBYTE(v87);
  }
  else {
    std::string::size_type v40 = (std::string::size_type)v86[1];
  }
  unint64_t v41 = std::string::append(&v88, (const std::string::value_type *)v39, v40);
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  std::string::size_type v90 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  int v44 = *((_DWORD *)v69 + 6);
  int v43 = *((_DWORD *)v69 + 7);
  int v45 = *((_DWORD *)v69 + 8);
  int v46 = *((_DWORD *)v69 + 9);
  int v48 = *((_DWORD *)v69 + 10);
  uint64_t v47 = *((int *)v69 + 11);
  KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v68 + 16));
  ZinIrKernel::ShuffleKernel(v33, (uint64_t)v91, v44, v43, v45, v46, v48, &v84, v47, (uint64_t)&v93, v67, KernelSparsityCache, (long long *)v69 + 3, *((unsigned char *)v69 + 97), *((_DWORD *)v69 + 21));
  if (SHIBYTE(v90) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v87) < 0) {
    operator delete(v86[0]);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v91);
  uint64_t v50 = v84;
  if (v84)
  {
    uint64_t v51 = (void *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a3 + 32))(a3, 0, 0);
    uint64_t v53 = *((void *)v50 + 33);
    uint64_t v52 = *((void *)v50 + 34);
    v91[0] = v51[6];
    uint64_t v54 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v68 + 32))(v68, 0, 0);
    uint64_t v55 = v51[9];
    uint64_t v56 = v51[8] - v53 + *((int *)v50 + 90) + (uint64_t)*((int *)v50 + 91) + 1;
    v91[1] = *(void *)(v54 + 56) * *v65 * v65[1];
    v91[2] = v56;
    uint64_t v57 = v51[10];
    v91[3] = v55 - v52 + *((int *)v50 + 88) + (uint64_t)*((int *)v50 + 89) + 1;
    void v91[4] = v57;
    uint64_t v58 = *(unsigned int *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v68 + 32))(v68, 0, 0)
                          + 88);
    uint64_t v59 = *a5;
    uint64_t v83 = v84;
    uint64_t v84 = 0;
    ZinBuilder::CreateConv(v63, a1, (uint64_t)v91, v59, v58, &v83);
  }
  return 0;
}

void sub_21135AD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,ZinIrKernel *a40,ZinIrKernel *a41)
{
}

uint64_t std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>(uint64_t a1, long long *a2, ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *a3)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)(a1 + 24), a3);
  return a1;
}

void sub_21135AE20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>(uint64_t **a1, void **a2, long long *a3)
{
  long long v5 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__construct_node<std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    long long v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::__construct_node<std::pair<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x190uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21135AF24(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>::pair[abi:ne180100]<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc,0>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)(a1 + 24), (const ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)a2 + 24));
  return a1;
}

void sub_21135AF7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

long long *ZinIrHalT1::GetParams(ZinIrHalT1 *this)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  {
    ZinIrHalT1::GetParams(void)const::ZinIrHalT1Parameters = xmmword_211F06910;
    dword_26777F590 = 8;
    unk_26777F598 = xmmword_211ED25C0;
    unk_26777F5A8 = xmmword_211ED25D0;
    unk_26777F5B8 = xmmword_211ED25E0;
    unk_26777F5C8 = xmmword_211ED25F0;
    unk_26777F5D8 = xmmword_211ED2600;
    unk_26777F5E8 = xmmword_211ED25E0;
    unk_26777F5F8 = xmmword_211ED4640;
    unk_26777F608 = xmmword_211F06920;
    unk_26777F618 = xmmword_211ED2630;
    unk_26777F628 = xmmword_211ED2640;
    unk_26777F638 = vdupq_n_s64(4uLL);
    qword_26777F648 = 4;
    xmmword_26777F650 = xmmword_211F06930;
    unk_26777F660 = unk_211F06940;
    xmmword_26777F670 = xmmword_211F06930;
    unk_26777F680 = unk_211F06940;
    qword_26777F6A0 = 4;
    xmmword_26777F690 = xmmword_211F06950;
    xmmword_26777F6A8 = xmmword_211ED2650;
    xmmword_26777F6B8 = xmmword_211ED2660;
    xmmword_26777F6C8 = xmmword_211ED2660;
    xmmword_26777F6D8 = xmmword_211ED2660;
    xmmword_26777F6E8 = xmmword_211ED2670;
    xmmword_26777F6F8 = xmmword_211ED2680;
    xmmword_26777F708 = xmmword_211ED2690;
    xmmword_26777F718 = xmmword_211ED26A0;
    xmmword_26777F728 = xmmword_211ED26B0;
    xmmword_26777F738 = xmmword_211ED26C0;
    xmmword_26777F748 = xmmword_211ED26D0;
    xmmword_26777F758 = xmmword_211ED26E0;
    xmmword_26777F768 = xmmword_211ED26F0;
    xmmword_26777F778 = xmmword_211ED2700;
    xmmword_26777F788 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_26777F798 = xmmword_211ED5530;
    xmmword_26777F7A8 = xmmword_211ED2720;
    xmmword_26777F7B8 = xmmword_211ED2730;
    xmmword_26777F7C8 = xmmword_211ED2740;
    qword_26777F7D8 = 64;
    xmmword_26777F7E0 = 0u;
    unk_26777F7F0 = xmmword_211F045F0;
    word_26777F800 = 256;
    xmmword_26777F808 = xmmword_211ED2760;
    xmmword_26777F818 = xmmword_211ED2770;
    xmmword_26777F828 = xmmword_211ED2780;
    qword_26777F838 = 0x10000;
    byte_26777F840 = 32;
    xmmword_26777F848 = xmmword_211ED2790;
    dword_26777F858 = 520097776;
    qword_26777F85C = 0xFFFFFFEB0000000BLL;
    xmmword_26777F868 = xmmword_211ED27A0;
    xmmword_26777F878 = xmmword_211ED27B0;
    xmmword_26777F888 = xmmword_211ED27C0;
    int64x2_t v48 = vdupq_n_s64(8uLL);
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_26777F898, (uint64_t)&v48, 1uLL);
    xmmword_26777F8B0 = xmmword_211ED27D0;
    unk_26777F8C0 = xmmword_211ED27E0;
    xmmword_26777F8D0 = (__int128)vdupq_n_s64(0x20uLL);
    unk_26777F8E0 = xmmword_211ED2610;
    xmmword_26777F8F0 = (__int128)vdupq_n_s64(8uLL);
    unk_26777F900 = xmmword_211ED27F0;
    xmmword_26777F910 = xmmword_211ED2800;
    unk_26777F920 = vdupq_n_s64(0x100uLL);
    xmmword_26777F930 = (__int128)vdupq_n_s64(0x80uLL);
    unk_26777F940 = xmmword_211ED2810;
    xmmword_26777F950 = xmmword_211ED2820;
    unk_26777F960 = xmmword_211ED2830;
    xmmword_26777F970 = xmmword_211ED2840;
    unk_26777F980 = xmmword_211ED2850;
    xmmword_26777F990 = (__int128)vdupq_n_s64(2uLL);
    unk_26777F9A0 = xmmword_211ED2660;
    xmmword_26777F9B0 = (__int128)vdupq_n_s64(0x4000uLL);
    unk_26777F9C0 = xmmword_211ED2860;
    word_26777F9D0 = 257;
    byte_26777F9D6 = 0;
    dword_26777F9D2 = 0;
    dword_26777F9D7 = 16842753;
    byte_26777F9DB = 1;
    xmmword_26777F9DC = 0u;
    dword_26777F9EC = 0;
    byte_26777F9F0 = 1;
    byte_26777F9F5 = 0;
    dword_26777F9F1 = 0;
    qword_26777F9F6 = 0x101000000010101;
    word_26777F9FE = 0;
    xmmword_26777FA00 = xmmword_211ED2870;
    unk_26777FA10 = xmmword_211ED2880;
    qword_26777FA20 = 40;
    xmmword_26777FA28 = 0u;
    dword_26777FA38 = 16843009;
    *(int *)((char *)&dword_26777FA38 + 3) = 16843009;
    word_26777FA3F = 0;
    qword_26777FA48 = 0;
    byte_26777FA50 = 0;
    dword_26777FA51 = 16843009;
    word_26777FA59 = 0;
    dword_26777FA55 = 0;
    dword_26777FA5B = 16842753;
    qword_26777FA5F = 0;
    byte_26777FA67 = 0;
    dword_26777FA68 = 65793;
    word_26777FA6C = 0;
    byte_26777FA6E = 1;
    dword_26777FA6F = 0;
    word_26777FA73 = 257;
    dword_26777FA75 = 0;
    byte_26777FA79 = 0;
    qword_26777FA88 = -1;
    unk_26777FA90 = -1;
    qword_26777FA80 = 128;
    word_26777FA98 = 0;
    dword_26777FA9C = 0;
    word_26777FAA0 = 1;
    byte_26777FAA2 = 1;
    *(uint64_t *)((char *)&qword_26777FAA3 + 6) = 0;
    qword_26777FAA3 = 0;
    dword_26777FAB1 = 1542;
    byte_26777FAB5 = 1;
    dword_26777FAB6 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_26777FAC0, "Simple");
    qword_26777FAD8 = 0x1000000;
    unk_26777FAF0 = xmmword_211ED2890;
    dword_26777FAE4 = 0;
    unk_26777FAE8 = 0;
    dword_26777FAE0 = 1071225242;
    unk_26777FB00 = vdupq_n_s64(0x40uLL);
    unk_26777FB10 = xmmword_211ED27D0;
    qword_26777FB20 = 8;
    byte_26777FB28 = 0;
    unk_26777FB2C = 1048576000;
    byte_26777FB34 = 0;
    long long v47 = xmmword_211ED28B0;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_26777FB38, &v47, 4uLL);
    v46[0] = xmmword_211F06968;
    v46[1] = unk_211F06978;
    void v46[2] = xmmword_211F06988;
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_26777FB50, v46, 0xCuLL);
    int v45 = 25;
    void v44[4] = xmmword_211F069D8;
    v44[5] = unk_211F069E8;
    v44[6] = xmmword_211F069F8;
    v44[0] = xmmword_211F06998;
    v44[1] = unk_211F069A8;
    void v44[2] = xmmword_211F069B8;
    void v44[3] = unk_211F069C8;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_26777FB68, v44, 0x1DuLL);
    uint64_t v43 = 0x2A00000029;
    v42[6] = xmmword_211F06A6C;
    v42[7] = unk_211F06A7C;
    v42[8] = xmmword_211F06A8C;
    v42[9] = unk_211F06A9C;
    _OWORD v42[2] = xmmword_211F06A2C;
    void v42[3] = unk_211F06A3C;
    void v42[4] = xmmword_211F06A4C;
    v42[5] = unk_211F06A5C;
    v42[0] = xmmword_211F06A0C;
    v42[1] = unk_211F06A1C;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_26777FB80, v42, 0x2AuLL);
    int v31 = 2;
    long long v32 = xmmword_211ED28C0;
    uint64_t v33 = 0x1100000002;
    int v34 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v8, &v31, 1uLL);
    unsigned int v35 = 641877825;
    memset(v36, 0, sizeof(v36));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v36, v8, (uint64_t)v9, 0xCCCCCCCCCCCCCCCDLL * ((v9 - (unsigned char *)v8) >> 3));
    int v27 = 10;
    int64x2_t v28 = vdupq_n_s64(1uLL);
    uint64_t v29 = 0x800000001;
    int v30 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v6, &v27, 1uLL);
    int v37 = 642527542;
    memset(v38, 0, sizeof(v38));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v38, v6, (uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)v6) >> 3));
    int v23 = 3;
    int64x2_t v24 = vdupq_n_s64(1uLL);
    uint64_t v25 = 0x700000002;
    int v26 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v23, 1uLL);
    int v39 = 642527336;
    v41[0] = 0;
    v41[1] = 0;
    uint64_t v40 = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v40, __p, (uint64_t)v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_26777FB98, &v35, 3);
    word_26777FBB0 = 0;
    byte_26777FBB2 = 1;
    *(_DWORD *)algn_26777FBB3 = 0;
    qword_26777FBB8 = 0;
    dword_26777FBC0 = 0;
    unk_26777FBC8 = 0u;
    unk_26777FBD8 = 0u;
    word_26777FBE8 = 257;
    qword_26777FC10 = 8;
    xmmword_26777FBF0 = xmmword_211F06AB8;
    unk_26777FC00 = unk_211F06AC8;
    unk_26777FC18 = xmmword_211ED28D0;
    v22[2] = xmmword_211F06B00;
    void v22[3] = unk_211F06B10;
    v22[4] = xmmword_211F06B20;
    v22[0] = xmmword_211F06AE0;
    v22[1] = unk_211F06AF0;
    std::vector<double>::vector[abi:ne180100](&qword_26777FC28, v22, 0xAuLL);
    long long v12 = xmmword_211F06B30;
    *(void *)&long long v13 = 0x41CAD27480000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777FC40, &v12, 3uLL);
    long long v12 = xmmword_211F06B48;
    *(void *)&long long v13 = 0x41DFC8BFD0000000;
    std::vector<double>::vector[abi:ne180100](&qword_26777FC58, &v12, 3uLL);
    long long v18 = xmmword_211F06BC0;
    long long v19 = unk_211F06BD0;
    long long v20 = xmmword_211F06BE0;
    long long v21 = unk_211F06BF0;
    long long v14 = xmmword_211F06B80;
    long long v15 = unk_211F06B90;
    long long v16 = xmmword_211F06BA0;
    long long v17 = unk_211F06BB0;
    long long v12 = xmmword_211F06B60;
    long long v13 = unk_211F06B70;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_26777FC70, (double *)&v12, 10);
    xmmword_26777FC88 = xmmword_211ED28E0;
    v10[0] = xmmword_211F06C00;
    v10[1] = unk_211F06C10;
    void v10[2] = xmmword_211F06C20;
    int v11 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_26777FC98, v10, 0xDuLL);
    uint64_t v2 = 0;
    xmmword_26777FCB0 = xmmword_211ED2790;
    unk_26777FCC0 = xmmword_211ED28F0;
    word_26777FDC9 = 257;
    qword_26777FCD0 = 64;
    unk_26777FCD8 = 0x101010101010101;
    unk_26777FCDD = 0x101010101010101;
    byte_26777FCE5 = 0;
    dword_26777FCE8 = 257;
    xmmword_26777FCF0 = xmmword_211F06C38;
    unk_26777FD00 = unk_211F06C48;
    xmmword_26777FD10 = xmmword_211F06C58;
    unk_26777FD20 = unk_211F06C68;
    xmmword_26777FD50 = xmmword_211F06C98;
    unk_26777FD60 = unk_211F06CA8;
    xmmword_26777FD30 = xmmword_211F06C78;
    unk_26777FD40 = unk_211F06C88;
    word_26777FD70 = 0;
    byte_26777FD72 = 0;
    byte_26777FD78 = 0;
    byte_26777FD80 = 0;
    dword_26777FD90 = 0;
    word_26777FD94 = 0;
    qword_26777FDB0 = 0;
    byte_26777FDB8 = 0;
    qword_26777FDC0 = 0;
    byte_26777FDC8 = 0;
    dword_26777FD88 = 0;
    word_26777FD8C = 0;
    qword_26777FD98 = 0;
    unk_26777FDA0 = 0;
    qword_26777FDD0 = 0x40000000;
    byte_26777FDA8 = 0;
    do
    {
      long long v3 = (void *)v41[v2 - 1];
      if (v3)
      {
        v41[v2] = v3;
        operator delete(v3);
      }
      v2 -= 4;
    }
    while (v2 != -12);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
    if (v6)
    {
      uint64_t v7 = v6;
      operator delete(v6);
    }
    if (v8)
    {
      long long v9 = v8;
      operator delete(v8);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalT1::GetParams(void)const::ZinIrHalT1Parameters, &dword_210C72000);
  }
  return &ZinIrHalT1::GetParams(void)const::ZinIrHalT1Parameters;
}

void sub_21135BA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v23, *(void **)(v23 + 8));
  if (qword_26777FC58)
  {
    qword_26777FC60 = qword_26777FC58;
    operator delete((void *)qword_26777FC58);
  }
  if (qword_26777FC40)
  {
    qword_26777FC48 = qword_26777FC40;
    operator delete((void *)qword_26777FC40);
  }
  if (qword_26777FC28)
  {
    qword_26777FC30 = qword_26777FC28;
    operator delete((void *)qword_26777FC28);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v22, *(void **)(v22 + 8));
  uint64_t v25 = 0;
  while (1)
  {
    int v26 = *(void **)((char *)&STACK[0x230] + v25 + 72);
    if (v26)
    {
      *(unint64_t *)((char *)&STACK[0x230] + v25 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = (unint64_t)v26;
      operator delete(v26);
    }
    v25 -= 32;
    if (v25 == -96)
    {
      if (__p) {
        operator delete(__p);
      }
      if (a19) {
        operator delete(a19);
      }
      if (a22) {
        operator delete(a22);
      }
      if (qword_26777FB80)
      {
        qword_26777FB88 = qword_26777FB80;
        operator delete((void *)qword_26777FB80);
      }
      if (qword_26777FB68)
      {
        qword_26777FB70 = qword_26777FB68;
        operator delete((void *)qword_26777FB68);
      }
      if (qword_26777FB50)
      {
        qword_26777FB58 = qword_26777FB50;
        operator delete((void *)qword_26777FB50);
      }
      if (qword_26777FB38)
      {
        qword_26777FB40 = qword_26777FB38;
        operator delete((void *)qword_26777FB38);
      }
      if (byte_26777FAD7 < 0) {
        operator delete((void *)qword_26777FAC0);
      }
      if (qword_26777F898)
      {
        qword_26777F8A0 = qword_26777F898;
        operator delete((void *)qword_26777F898);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_21135BC88()
{
}

void sub_21135BC90()
{
}

void sub_21135BC98()
{
}

void sub_21135BCA0()
{
}

void sub_21135BCA8()
{
}

void sub_21135BCB0()
{
}

void sub_21135BCB8()
{
}

double ZinComputeAddressTranslationRegisters::ComputeAddressTranslation@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  long long v17 = xmmword_211F03C80;
  long long v18 = xmmword_211F03C80;
  long long v6 = (int8x16_t *)a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = (uint64_t)v6->i64 - *a2;
  char v9 = 1;
  if ((unint64_t)v8 >= 0x10)
  {
    unint64_t v10 = 126 - 2 * __clz(v8 >> 3);
    if (v6 == (int8x16_t *)v7) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    std::__introsort<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **,false>(v7, v6, v11, 1);
    uint64_t v12 = *a2;
    uint64_t v13 = *(void *)(*a2 + 8);
    long long v14 = *(uint64_t **)(a1 + 8);
    char v9 = CalculateBoundaryRegisters(*(void *)*a2, v13, v14, 0, 0, (unint64_t *)&v17);
    if ((unint64_t)(a2[1] - v12) >= 0x11) {
      v9 &= CalculateBoundaryRegisters(v13, *(void *)(v12 + 16), v14, *((uint64_t *)&v17 + 1), 1, (unint64_t *)&v18);
    }
  }
  double result = *(double *)&v17;
  long long v16 = v18;
  *(_OWORD *)a3 = v17;
  *(_OWORD *)(a3 + 16) = v16;
  *(unsigned char *)(a3 + 32) = v9;
  *(unsigned char *)(a3 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
  return result;
}

BOOL CalculateBoundaryRegisters(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, unint64_t *a6)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 184);
  if (a5) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  unint64_t v9 = v7 + v8;
  a6[1] = v9;
  unint64_t v10 = *(void *)(a2 + 16);
  if (v10 >= v9)
  {
    unint64_t v12 = v10 - (v7 + v6);
    uint64_t v11 = *a3;
  }
  else
  {
    uint64_t v11 = *a3;
    unint64_t v12 = v10 - (v7 + v6) + *(void *)(*a3 + 408);
  }
  *a6 = v12;
  unint64_t v13 = *(void *)(v11 + 632);
  unint64_t v14 = v12 / v13;
  unint64_t v15 = v12 % v13;
  if (!v15) {
    *a6 = v14;
  }
  return v15 == 0;
}

uint64_t ZinComputeAddressTranslationRegisters::Execute(ZinIrOpLayer ****this)
{
  uint64_t v1 = **this;
  uint64_t v2 = (*this)[1];
  if (v1 == v2) {
    return 0;
  }
  long long v4 = &_os_log_internal;
  while (1)
  {
    uint64_t v5 = *v1;
    if (ZinIrOpLayer::IsANELayer(*v1)) {
      break;
    }
LABEL_41:
    if (++v1 == v2) {
      return 0;
    }
  }
  ZinEngineLayerMirInfo::GetL2WrSymbols(*((ZinEngineLayerMirInfo **)v5 + 33), v26);
  ZinComputeAddressTranslationRegisters::ComputeAddressTranslation((uint64_t)this, (uint64_t *)v26, (uint64_t)&v22);
  int v6 = v25;
  if (!v25)
  {
LABEL_7:
    ZinEngineLayerMirInfo::GetL2RdSymbols(*((void *)v5 + 33), 0, v19);
    ZinComputeAddressTranslationRegisters::ComputeAddressTranslation((uint64_t)this, (uint64_t *)v19, (uint64_t)&v15);
    if (v6 == v18)
    {
      if (v6)
      {
        long long v22 = v15;
        long long v23 = v16;
        LOBYTE(v24) = v17;
LABEL_17:
        long long v15 = v22;
        long long v16 = v23;
        uint64_t v17 = v24;
        if (!(_BYTE)v24)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
            ZinComputeAddressTranslationRegisters::Execute(&v13, v14);
          }
          int v8 = 1;
          goto LABEL_36;
        }
        ZinEngineLayerMirInfo::SetAddressTranslationBoundaryRegisters(*((void *)v5 + 33), 0, (uint64_t)&v15);
        int v7 = 0;
        int v6 = 1;
LABEL_19:
        ZinEngineLayerMirInfo::GetL2RdSymbols(*((void *)v5 + 33), 1, __p);
        ZinComputeAddressTranslationRegisters::ComputeAddressTranslation((uint64_t)this, (uint64_t *)__p, (uint64_t)&v15);
        if (v6 == v18)
        {
          if (v7)
          {
LABEL_26:
            int v8 = 0;
            goto LABEL_34;
          }
          long long v22 = v15;
          long long v23 = v16;
          LOBYTE(v24) = v17;
        }
        else
        {
          if ((v7 & 1) == 0)
          {
            int v8 = 0;
            unsigned __int8 v25 = 0;
LABEL_34:
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
LABEL_36:
            if (v19[0])
            {
              v19[1] = v19[0];
              operator delete(v19[0]);
            }
            goto LABEL_38;
          }
          long long v22 = v15;
          long long v23 = v16;
          uint64_t v24 = v17;
          unsigned __int8 v25 = 1;
        }
        long long v15 = v22;
        long long v16 = v23;
        uint64_t v17 = v24;
        if (!(_BYTE)v24)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
            ZinComputeAddressTranslationRegisters::Execute(&v10, v11);
          }
          int v8 = 1;
          goto LABEL_34;
        }
        ZinEngineLayerMirInfo::SetAddressTranslationBoundaryRegisters(*((void *)v5 + 33), 1, (uint64_t)&v15);
        goto LABEL_26;
      }
    }
    else
    {
      if (!v6)
      {
        long long v22 = v15;
        long long v23 = v16;
        uint64_t v24 = v17;
        unsigned __int8 v25 = 1;
        goto LABEL_17;
      }
      int v6 = 0;
      unsigned __int8 v25 = 0;
    }
    int v7 = 1;
    goto LABEL_19;
  }
  long long v15 = v22;
  long long v16 = v23;
  uint64_t v17 = v24;
  if ((_BYTE)v24)
  {
    ZinEngineLayerMirInfo::SetAddressTranslationBoundaryRegisters(*((void *)v5 + 33), 3, (uint64_t)&v15);
    goto LABEL_7;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    ZinComputeAddressTranslationRegisters::Execute(&v20, v21);
  }
  int v8 = 1;
LABEL_38:
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (!v8) {
    goto LABEL_41;
  }
  return 3;
}

void sub_21135C0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  int v27 = *(void **)(v25 - 112);
  if (v27)
  {
    *(void *)(v25 - 104) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (int8x16_t *)result;
  while (2)
  {
    i64 = a2[-1].i64;
    uint64_t v98 = &a2[-1].i64[1];
    uint64_t v95 = &a2[-2].i64[1];
    char v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                double result = ZinLiveRange::operator<((void *)(a2[-1].i64[1] + 192), (void *)(v9->i64[0] + 192));
                if (result)
                {
                  uint64_t v41 = v9->i64[0];
                  v9->i64[0] = a2[-1].i64[1];
                  a2[-1].i64[1] = v41;
                }
                break;
              case 3:
                double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v9->i64, &v9->i64[1], v98);
                break;
              case 4:
                double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v9->i64, &v9->i64[1], v9[1].i64, v98);
                break;
              case 5:
                long long v42 = v9 + 1;
                uint64_t v43 = &v9[1].i8[8];
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v9->i64, &v9->i64[1], v9[1].i64, &v9[1].i64[1]);
                double result = ZinLiveRange::operator<((void *)(a2[-1].i64[1] + 192), (void *)(v9[1].i64[1] + 192));
                if (result)
                {
                  uint64_t v44 = *(void *)v43;
                  *(void *)uint64_t v43 = a2[-1].i64[1];
                  a2[-1].i64[1] = v44;
                  double result = ZinLiveRange::operator<((void *)(*(void *)v43 + 192), (void *)(v42->i64[0] + 192));
                  if (result)
                  {
                    uint64_t v45 = v42->i64[0];
                    uint64_t v46 = *(void *)v43;
                    v42->i64[0] = *(void *)v43;
                    *(void *)uint64_t v43 = v45;
                    double result = ZinLiveRange::operator<((void *)(v46 + 192), (void *)(v9->i64[1] + 192));
                    if (result)
                    {
                      uint64_t v48 = v9->i64[1];
                      uint64_t v47 = v9[1].i64[0];
                      uint64_t v49 = v9->i64[0];
                      v9->i64[1] = v47;
                      v9[1].i64[0] = v48;
                      double result = ZinLiveRange::operator<((void *)(v47 + 192), (void *)(v49 + 192));
                      if (result) {
                        *unint64_t v9 = vextq_s8(*v9, *v9, 8uLL);
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v50 = (int8x16_t *)&v9->u64[1];
            BOOL v52 = v9 == a2 || v50 == a2;
            if (a4)
            {
              if (!v52)
              {
                uint64_t v53 = 0;
                uint64_t v54 = (uint64_t *)v9;
                do
                {
                  uint64_t v56 = *v54;
                  uint64_t v55 = v54[1];
                  uint64_t v54 = (uint64_t *)v50;
                  double result = ZinLiveRange::operator<((void *)(v55 + 192), (void *)(v56 + 192));
                  if (result)
                  {
                    uint64_t v57 = a2;
                    uint64_t v58 = *v54;
                    uint64_t v59 = (void *)(*v54 + 192);
                    uint64_t v60 = v53;
                    while (1)
                    {
                      *(uint64_t *)((char *)&v9->i64[1] + v6std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(uint64_t *)((char *)v9->i64 + v60);
                      if (!v60) {
                        break;
                      }
                      double result = ZinLiveRange::operator<(v59, (void *)(*(uint64_t *)((char *)&v9->i64[-1] + v60) + 192));
                      v60 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v61 = (uint64_t *)((char *)&v9->i64[1] + v60);
                        goto LABEL_83;
                      }
                    }
                    uint64_t v61 = (uint64_t *)v9;
LABEL_83:
                    *uint64_t v61 = v58;
                    a2 = v57;
                  }
                  uint64_t v50 = (int8x16_t *)(v54 + 1);
                  v53 += 8;
                }
                while (v54 + 1 != (uint64_t *)a2);
              }
            }
            else if (!v52)
            {
              do
              {
                uint64_t v88 = v9->i64[0];
                uint64_t v87 = v9->i64[1];
                unint64_t v9 = v50;
                double result = ZinLiveRange::operator<((void *)(v87 + 192), (void *)(v88 + 192));
                if (result)
                {
                  uint64_t v89 = v9->i64[0];
                  std::string::size_type v90 = (void *)(v9->i64[0] + 192);
                  uint64_t v91 = (uint64_t *)v9;
                  do
                  {
                    uint64_t v92 = v91;
                    uint64_t v93 = *--v91;
                    *uint64_t v92 = v93;
                    double result = ZinLiveRange::operator<(v90, (void *)(*(v92 - 2) + 192));
                  }
                  while ((result & 1) != 0);
                  *uint64_t v91 = v89;
                }
                uint64_t v50 = (int8x16_t *)&v9->u64[1];
              }
              while (&v9->u64[1] != (unint64_t *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v99 = v62;
              long long v94 = a2;
              do
              {
                int64_t v63 = v62;
                if (v99 >= v62)
                {
                  uint64_t v64 = (2 * v62) | 1;
                  uint64_t v65 = &v9->i64[v64];
                  if (2 * v62 + 2 < v12 && ZinLiveRange::operator<((void *)(*v65 + 192), (void *)(v65[1] + 192)))
                  {
                    ++v65;
                    uint64_t v64 = 2 * v63 + 2;
                  }
                  uint64_t v66 = &v9->i8[8 * v63];
                  double result = ZinLiveRange::operator<((void *)(*v65 + 192), (void *)(*(void *)v66 + 192));
                  if ((result & 1) == 0)
                  {
                    uint64_t v97 = *(void *)v66;
                    uint64_t v67 = (void *)(*(void *)v66 + 192);
                    do
                    {
                      uint64_t v68 = v65;
                      *(void *)uint64_t v66 = *v65;
                      if (v99 < v64) {
                        break;
                      }
                      uint64_t v69 = (2 * v64) | 1;
                      uint64_t v65 = &v9->i64[v69];
                      if (2 * v64 + 2 < v12
                        && ZinLiveRange::operator<((void *)(*v65 + 192), (void *)(v65[1] + 192)))
                      {
                        ++v65;
                        uint64_t v69 = 2 * v64 + 2;
                      }
                      double result = ZinLiveRange::operator<((void *)(*v65 + 192), v67);
                      uint64_t v66 = (__int8 *)v68;
                      uint64_t v64 = v69;
                    }
                    while (!result);
                    uint64_t *v68 = v97;
                    a2 = v94;
                  }
                }
                int64_t v62 = v63 - 1;
              }
              while (v63);
              uint64_t v70 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v71 = a2;
                uint64_t v72 = 0;
                uint64_t v73 = v9->i64[0];
                uint64_t v74 = v9->i64;
                do
                {
                  uint64_t v75 = (uint64_t)&v74[v72 + 1];
                  uint64_t v76 = (2 * v72) | 1;
                  uint64_t v77 = 2 * v72 + 2;
                  if (v77 < v70)
                  {
                    double result = ZinLiveRange::operator<((void *)(v74[v72 + 1] + 192), (void *)(v74[v72 + 2] + 192));
                    if (result)
                    {
                      v75 += 8;
                      uint64_t v76 = v77;
                    }
                  }
                  *uint64_t v74 = *(void *)v75;
                  uint64_t v74 = (void *)v75;
                  uint64_t v72 = v76;
                }
                while (v76 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
                uint64_t v78 = &v71[-1].i64[1];
                if ((uint64_t *)v75 == v78)
                {
                  uint64_t v79 = (int8x16_t *)v78;
                  *(void *)uint64_t v75 = v73;
                }
                else
                {
                  *(void *)uint64_t v75 = *v78;
                  uint64_t v79 = (int8x16_t *)v78;
                  *uint64_t v78 = v73;
                  uint64_t v80 = v75 - (void)v9 + 8;
                  if (v80 >= 9)
                  {
                    unint64_t v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                    unsigned long long v82 = &v9->i64[v81];
                    double result = ZinLiveRange::operator<((void *)(*v82 + 192), (void *)(*(void *)v75 + 192));
                    if (result)
                    {
                      uint64_t v83 = *(void *)v75;
                      uint64_t v84 = (void *)(*(void *)v75 + 192);
                      do
                      {
                        std::string v85 = v82;
                        *(void *)uint64_t v75 = *v82;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unsigned long long v82 = &v9->i64[v81];
                        double result = ZinLiveRange::operator<((void *)(*v82 + 192), v84);
                        uint64_t v75 = (uint64_t)v85;
                      }
                      while ((result & 1) != 0);
                      *std::string v85 = v83;
                    }
                  }
                }
                BOOL v86 = v70-- <= 2;
                a2 = v79;
              }
              while (!v86);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = &v9->i64[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v14, v9->i64, v98);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v9->i64, v14, v98);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(&v9->i64[1], v14 - 1, i64);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v9[1].i64, &v9->i64[v13 + 1], v95);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v14 - 1, v14, &v9->i64[v13 + 1]);
            uint64_t v15 = v9->i64[0];
            v9->i64[0] = *v14;
            *unint64_t v14 = v15;
          }
          --a3;
          if ((a4 & 1) != 0 || ZinLiveRange::operator<((void *)(v9[-1].i64[1] + 192), (void *)(v9->i64[0] + 192))) {
            break;
          }
          uint64_t v31 = v9->i64[0];
          long long v32 = (void *)(v9->i64[0] + 192);
          double result = ZinLiveRange::operator<(v32, (void *)(*v98 + 192));
          if (result)
          {
            char v10 = v9;
            do
            {
              uint64_t v33 = v10->i64[1];
              char v10 = (int8x16_t *)((char *)v10 + 8);
              double result = ZinLiveRange::operator<(v32, (void *)(v33 + 192));
            }
            while ((result & 1) == 0);
          }
          else
          {
            int v34 = &v9->i64[1];
            do
            {
              char v10 = (int8x16_t *)v34;
              if (v34 >= (uint64_t *)a2) {
                break;
              }
              ++v34;
              double result = ZinLiveRange::operator<(v32, (void *)(v10->i64[0] + 192));
            }
            while (!result);
          }
          unsigned int v35 = a2;
          if (v10 < a2)
          {
            unsigned int v35 = a2;
            do
            {
              uint64_t v36 = v35[-1].i64[1];
              unsigned int v35 = (int8x16_t *)((char *)v35 - 8);
              double result = ZinLiveRange::operator<(v32, (void *)(v36 + 192));
            }
            while ((result & 1) != 0);
          }
          while (v10 < v35)
          {
            uint64_t v37 = v10->i64[0];
            v10->i64[0] = v35->i64[0];
            v35->i64[0] = v37;
            do
            {
              uint64_t v38 = v10->i64[1];
              char v10 = (int8x16_t *)((char *)v10 + 8);
            }
            while (!ZinLiveRange::operator<(v32, (void *)(v38 + 192)));
            do
            {
              uint64_t v39 = v35[-1].i64[1];
              unsigned int v35 = (int8x16_t *)((char *)v35 - 8);
              double result = ZinLiveRange::operator<(v32, (void *)(v39 + 192));
            }
            while ((result & 1) != 0);
          }
          uint64_t v40 = &v10[-1].i64[1];
          BOOL v4 = &v10[-1].u64[1] >= (unint64_t *)v9;
          BOOL v5 = &v10[-1].u64[1] == (unint64_t *)v9;
          if (&v10[-1].u64[1] != (unint64_t *)v9) {
            v9->i64[0] = *v40;
          }
          a4 = 0;
          uint64_t *v40 = v31;
        }
        uint64_t v16 = 0;
        uint64_t v17 = v9->i64[0];
        unsigned __int8 v18 = (void *)(v9->i64[0] + 192);
        while (ZinLiveRange::operator<((void *)(v9->i64[++v16] + 192), v18))
          ;
        char v20 = &v9->i8[v16 * 8];
        long long v21 = a2;
        if (v16 == 1)
        {
          do
          {
            if (v20 >= (char *)a2) {
              break;
            }
            uint64_t v23 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!ZinLiveRange::operator<((void *)(v23 + 192), v18));
        }
        else
        {
          do
          {
            uint64_t v22 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!ZinLiveRange::operator<((void *)(v22 + 192), v18));
        }
        if (v20 >= (char *)a2)
        {
          uint64_t v29 = (int8x16_t *)(v20 - 8);
        }
        else
        {
          uint64_t v24 = &v9->i64[v16];
          uint64_t v25 = (uint64_t *)a2;
          do
          {
            uint64_t v26 = *v24;
            *uint64_t v24 = *v25;
            *uint64_t v25 = v26;
            do
            {
              uint64_t v27 = v24[1];
              ++v24;
            }
            while (ZinLiveRange::operator<((void *)(v27 + 192), v18));
            do
              uint64_t v28 = *--v25;
            while (!ZinLiveRange::operator<((void *)(v28 + 192), v18));
          }
          while (v24 < v25);
          uint64_t v29 = (int8x16_t *)(v24 - 1);
        }
        if (v29 != v9) {
          v9->i64[0] = v29->i64[0];
        }
        v29->i64[0] = v17;
        BOOL v4 = v20 >= (char *)a2;
        a2 = v21;
        if (v4) {
          break;
        }
LABEL_33:
        double result = std::__introsort<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        char v10 = (int8x16_t *)&v29->u64[1];
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(v9, v29);
      char v10 = (int8x16_t *)&v29->u64[1];
      double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>((int8x16_t *)&v29->u64[1], v21);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v6 = ZinLiveRange::operator<((void *)(*a2 + 192), (void *)(*a1 + 192));
  BOOL result = ZinLiveRange::operator<((void *)(*a3 + 192), (void *)(*a2 + 192));
  if (v6)
  {
    uint64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      BOOL result = ZinLiveRange::operator<((void *)(*a3 + 192), (void *)(v8 + 192));
      if (!result) {
        return result;
      }
      uint64_t v8 = *a2;
      *a2 = *a3;
    }
    *a3 = v8;
  }
  else if (result)
  {
    uint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    BOOL result = ZinLiveRange::operator<((void *)(*a2 + 192), (void *)(*a1 + 192));
    if (result)
    {
      uint64_t v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (ZinLiveRange::operator<((void *)(a2[-1].i64[1] + 192), (void *)(a1->i64[0] + 192)))
      {
        uint64_t v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      uint64_t v16 = a1 + 1;
      uint64_t v17 = &a1[1].i8[8];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1]);
      if (ZinLiveRange::operator<((void *)(a2[-1].i64[1] + 192), (void *)(a1[1].i64[1] + 192)))
      {
        uint64_t v18 = *(void *)v17;
        *(void *)uint64_t v17 = a2[-1].i64[1];
        a2[-1].i64[1] = v18;
        if (ZinLiveRange::operator<((void *)(*(void *)v17 + 192), (void *)(v16->i64[0] + 192)))
        {
          uint64_t v19 = v16->i64[0];
          uint64_t v20 = *(void *)v17;
          v16->i64[0] = *(void *)v17;
          *(void *)uint64_t v17 = v19;
          if (ZinLiveRange::operator<((void *)(v20 + 192), (void *)(a1->i64[1] + 192)))
          {
            uint64_t v22 = a1->i64[1];
            uint64_t v21 = a1[1].i64[0];
            uint64_t v23 = a1->i64[0];
            a1->i64[1] = v21;
            a1[1].i64[0] = v22;
            if (ZinLiveRange::operator<((void *)(v21 + 192), (void *)(v23 + 192))) {
              *a1 = vextq_s8(*a1, *a1, 8uLL);
            }
          }
        }
      }
      return 1;
    default:
      int v7 = a1 + 1;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v8 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (ZinLiveRange::operator<((void *)(v8->i64[0] + 192), (void *)(v7->i64[0] + 192)))
    {
      uint64_t v11 = v8->i64[0];
      uint64_t v12 = (void *)(v8->i64[0] + 192);
      uint64_t v13 = v9;
      while (1)
      {
        *(uint64_t *)((char *)&a1[1].i64[1] + v13) = *(uint64_t *)((char *)a1[1].i64 + v13);
        if (v13 == -16) {
          break;
        }
        BOOL v14 = ZinLiveRange::operator<(v12, (void *)(*(uint64_t *)((char *)&a1->i64[1] + v13) + 192));
        v13 -= 8;
        if (!v14)
        {
          uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
          goto LABEL_13;
        }
      }
      uint64_t v15 = (uint64_t *)a1;
LABEL_13:
      *uint64_t v15 = v11;
      if (++v10 == 8) {
        return &v8->u64[1] == (unint64_t *)a2;
      }
    }
    int v7 = v8;
    v9 += 8;
    uint64_t v8 = (int8x16_t *)((char *)v8 + 8);
    if (v8 == a2) {
      return 1;
    }
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,$_0 &,ZinIrSymbol **>(a1, a2, a3);
  BOOL result = ZinLiveRange::operator<((void *)(*a4 + 192), (void *)(*a3 + 192));
  if (result)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    BOOL result = ZinLiveRange::operator<((void *)(*a3 + 192), (void *)(*a2 + 192));
    if (result)
    {
      uint64_t v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      BOOL result = ZinLiveRange::operator<((void *)(*a2 + 192), (void *)(*a1 + 192));
      if (result)
      {
        uint64_t v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void ZinComputeAddressTranslationRegisters::Execute(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_0_3(a1, a2);
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid Src2 Boundary Registers", v2, 2u);
}

{
  uint8_t *v2;

  OUTLINED_FUNCTION_0_3(a1, a2);
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid Src1 Boundary Register", v2, 2u);
}

{
  uint8_t *v2;

  OUTLINED_FUNCTION_0_3(a1, a2);
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid Write Boundary Register", v2, 2u);
}

uint64_t ZinIrReductionInfo::ZinIrReductionInfo(uint64_t a1, int a2, void *a3, int a4, int a5, int a6, char a7, char a8, float a9, float a10)
{
  uint64_t result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 32);
  *(void *)uint64_t result = &unk_26C34BFC0;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(result + 16) = a4;
  *(void *)(result + 24) = *a3;
  *(float *)(result + 32) = a9;
  *(float *)(result + 36) = a10;
  *(_DWORD *)(result + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a5;
  *(_DWORD *)(result + 44) = a6;
  *(unsigned char *)(result + 48) = a7;
  *(unsigned char *)(result + 49) = a8;
  return result;
}

uint64_t ZinIrReductionInfo::TensorDimensions(ZinIrReductionInfo *this, const ZinTensorDimensions *a2, ZinTensorDimensions *a3)
{
  long long v3 = *(_OWORD *)a2;
  long long v4 = *((_OWORD *)a2 + 1);
  *((void *)a3 + 4) = *((void *)a2 + 4);
  *(_OWORD *)a3 = v3;
  *((_OWORD *)a3 + 1) = v4;
  ZinIrReductionInfo::ComputeOutputDimensions((uint64_t)this, a3);
  return 0;
}

uint64_t ZinIrUnflattenInfo::ZinIrUnflattenInfo(uint64_t a1, int a2)
{
  uint64_t result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 11);
  *(void *)uint64_t result = &unk_26C34C1A0;
  *(_DWORD *)(result + 12) = a2;
  return result;
}

void *ZinUnflattenLayer::ZinUnflattenLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  uint64_t v13 = v6;
  uint64_t v14 = v5;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v14, &v12, a4, &v11);
  int v7 = v11;
  uint64_t v11 = 0;
  if (v7)
  {
    ZinIrKernel::~ZinIrKernel(v7);
    MEMORY[0x21667D3C0](v8, 0x1032C40C25AA5B7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *a1 = &unk_26C34B490;
  return a1;
}

void sub_21135D018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinLayerNormLayer::ZinLayerNormLayer(&a12);
  _Unwind_Resume(a1);
}

uint64_t ZinUnflattenLayer::Lower()
{
  return 0;
}

void ZinUnflattenLayer::Clone()
{
}

void sub_21135D178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void *ZinUnflattenLayer::OpCodeKindToString@<X0>(ZinUnflattenLayer *this@<X0>, void *a2@<X8>)
{
  if (*(_DWORD *)(*((void *)this + 8) + 12)) {
    uint64_t v2 = "NHWC";
  }
  else {
    uint64_t v2 = "NCHW";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t ZinUnflattenLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_21135D380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ZinUnflattenLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  if (a2[1] - *a2 != 120) {
    ZinAssertImpl("Unflatten layer can only have one bottom");
  }
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  uint64_t v5 = (void *)*a2;
  uint64_t v6 = (void *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  uint64_t v7 = v5[3];
  std::string::basic_string[abi:ne180100]<0>(__p, "height");
  if (v7 != 1)
  {
    if (v24 >= 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid input %s = %zd for unflatten layer. It should be 1", (const char *)v18, v7);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = v5[4];
  std::string::basic_string[abi:ne180100]<0>(__p, "width");
  if (v8 != 1)
  {
    if (v24 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid input %s = %zd for unflatten layer. It should be 1", (const char *)v19, v8);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = v5[5];
  std::string::basic_string[abi:ne180100]<0>(__p, "depth");
  if (v9 != 1)
  {
    if (v24 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      uint64_t v20 = (void **)__p[0];
    }
    ZinAssertImpl("Error: invalid input %s = %zd for unflatten layer. It should be 1", (const char *)v20, v9);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = v5[2];
  uint64_t v11 = v6[7];
  uint64_t v12 = v6[8];
  uint64_t v13 = v6[9];
  if (v10 != v12 * v11 * v13) {
    ZinAssertImpl("Error: input elements count (%zu) must equal output with shape C%zdH%zdW%zd (%zu)", v10, v11, v12, v6[9], v12 * v11 * v13);
  }
  uint64_t v14 = v5[1];
  uint64_t v15 = v6[6];
  std::string::basic_string[abi:ne180100]<0>(__p, "batch");
  if (v14 != v15)
  {
    if (v24 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    ZinAssertImpl("Error: input %s (%zd) is not equal to output (%zd) for unflatten layer", (const char *)v21, v14, v15);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = v5[5];
  uint64_t v17 = v6[10];
  std::string::basic_string[abi:ne180100]<0>(__p, "depth");
  if (v16 != v17)
  {
    if (v24 >= 0) {
      uint64_t v22 = __p;
    }
    else {
      uint64_t v22 = (void **)__p[0];
    }
    ZinAssertImpl("Error: input %s (%zd) is not equal to output (%zd) for unflatten layer", (const char *)v22, v16, v17);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (*(_DWORD *)(*((void *)a1 + 8) + 12) >= 2u) {
    ZinAssertImpl("Error: unknown unflatten mode. It should be NCHW or NHWC");
  }
}

void sub_21135D618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GetAddressOfRelocationCommand(_DWORD *a1)
{
  return 4 * (*a1 & 0x7FFFu);
}

uint64_t GetSizeInWordsOfRelocationCommand(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 1) & 0x80) != 0) {
    return 3;
  }
  else {
    return 2;
  }
}

void ZinAneRelocationCommand_v11::ZinAneRelocationCommand_v11(ZinAneRelocationCommand_v11 *this, const unsigned int *a2)
{
  *(void *)this = &unk_26C352260;
  int v2 = *a2;
  *((_DWORD *)this + 2) = *a2;
  *(void *)((char *)this + 12) = a2[1];
  if ((v2 & 0x8000) != 0) {
    *((_DWORD *)this + 4) = a2[2];
  }
}

uint64_t ZinAneRelocationCommand_v11::SizeInWords(ZinAneRelocationCommand_v11 *this)
{
  if ((*((unsigned char *)this + 9) & 0x80) != 0) {
    return 3;
  }
  else {
    return 2;
  }
}

void ZinAneRelocationCommand_v11::GetRegistersSpecified(ZinAneRelocationCommand_v11 *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v4 = (*(uint64_t (**)(ZinAneRelocationCommand_v11 *))(*(void *)this + 64))(this);
  uint64_t v5 = a2 + 2;
  uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a2 + 2), 1uLL);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  *(_DWORD *)uint64_t v7 = v4;
  uint64_t v10 = v7 + 4;
  uint64_t v11 = v7;
  while (v9 != v8)
  {
    int v12 = *((_DWORD *)v9 - 1);
    v9 -= 4;
    *((_DWORD *)v11 - 1) = v12;
    v11 -= 4;
  }
  *a2 = v11;
  a2[1] = v10;
  a2[2] = &v7[4 * v6];
  if (v8) {
    operator delete(v8);
  }
  a2[1] = v10;
  if ((*((unsigned char *)this + 9) & 0x80) != 0)
  {
    int v13 = v4 + 4;
    if ((unint64_t)v10 >= *v5)
    {
      uint64_t v15 = *a2;
      uint64_t v16 = (v10 - *a2) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = *v5 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a2 + 2), v19);
        uint64_t v15 = *a2;
        uint64_t v10 = a2[1];
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      uint64_t v22 = &v20[4 * v19];
      *(_DWORD *)uint64_t v21 = v13;
      uint64_t v14 = v21 + 4;
      while (v10 != v15)
      {
        int v23 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v23;
        v21 -= 4;
      }
      *a2 = v21;
      a2[1] = v14;
      a2[2] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *((_DWORD *)v7 + 1) = v13;
      uint64_t v14 = v7 + 8;
    }
    a2[1] = v14;
  }
}

void sub_21135D824(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneRelocationCommand_v11::GetNthRegisterAddress(ZinAneRelocationCommand_v11 *this, int a2)
{
  return (*(unsigned int (**)(ZinAneRelocationCommand_v11 *))(*(void *)this + 64))(this) + 4 * a2;
}

uint64_t ZinAneRelocationCommand_v11::GetNthRegisterValue(ZinAneRelocationCommand_v11 *this, int a2)
{
  uint64_t v2 = 16;
  if (!a2) {
    uint64_t v2 = 12;
  }
  return *(unsigned int *)((char *)this + v2);
}

uint64_t ZinAneRelocationCommand_v11::CommandHeaderToRawString@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  *(_DWORD *)((char *)v8 + *(void *)(v7 - 24)) = *(_DWORD *)((unsigned char *)v8 + *(void *)(v7 - 24)) & 0xFFFFFFB5 | 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Raw: 0x", 7);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)" 0x", 3);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" 0x", 3);
  std::ostream::operator<<();
  std::ostream::put();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a1);
  v6[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v7 = v4;
  v8[0] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v10);
}

void sub_21135DA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ZinAneRelocationCommand_v11::CommandHeaderToString@<X0>(ZinAneRelocationCommand_v11 *this@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Relocation Command: Address ", 28);
  *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 8) = *(_DWORD *)((unsigned char *)v4 + *(void *)(*v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  (*(void (**)(ZinAneRelocationCommand_v11 *))(*(void *)this + 64))(this);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; ", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"BarId: ", 7);
  std::to_string(&__p, (*((_DWORD *)this + 2) >> 22) & 0x7F);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Mode: ", 6);
  if ((*((_DWORD *)this + 2) & 0x100000) != 0) {
    uint64_t v11 = "XOR";
  }
  else {
    uint64_t v11 = "Add";
  }
  int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; ", 2);
  int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Size: ", 6);
  if ((*((_DWORD *)this + 2) & 0x8000) != 0) {
    uint64_t v14 = "64b";
  }
  else {
    uint64_t v14 = "32b";
  }
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"DataLo: ", 8);
  uint64_t v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; ", 2);
  if ((*((unsigned char *)this + 9) & 0x80) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"DataHi: ", 8);
    unint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; ", 2);
  }
  std::ostream::put();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23, a2);
  v21[0] = *MEMORY[0x263F8C2B8];
  uint64_t v18 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v22 = v18;
  v23[0] = MEMORY[0x263F8C318] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v25);
}

void sub_21135DE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t ZinAneRelocationCommand_v11::GetAddress(ZinAneRelocationCommand_v11 *this)
{
  return 4 * (*((_DWORD *)this + 2) & 0x7FFFu);
}

uint64_t ZinAneRelocationCommand_v11::SetAddress(uint64_t this, unsigned int a2)
{
  *(_DWORD *)(this + 8) = *(_DWORD *)(this + 8) & 0xFFFF8000 | (a2 >> 2) & 0x7FFF;
  return this;
}

uint64_t *GetRegistersProgrammedAsRelocationCommands@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  while (v3 != v4)
  {
    int v6 = 4 * (*(_DWORD *)(v3 + 32) & 0x7FFF);
    uint64_t result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, (unsigned int *)&v6, &v6);
    if ((*(unsigned char *)(v3 + 33) & 0x80) != 0)
    {
      int v5 = v6 + 4;
      uint64_t result = std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, (unsigned int *)&v5, &v5);
    }
    v3 += 40;
  }
  return result;
}

void sub_21135DEE4(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinAneRelocInfo::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || *((_DWORD *)a1 + 8) != *((_DWORD *)a2 + 8)) {
    return 0;
  }
  uint64_t v2 = a1[31];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[31];
  }
  else {
    uint64_t v3 = *((void *)a1 + 2);
  }
  uint64_t v4 = a2[31];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 2);
  }
  if (v3 != v4) {
    return 0;
  }
  int v6 = (const void **)(a1 + 8);
  char v9 = (unsigned __int8 *)*((void *)a2 + 1);
  uint64_t v7 = a2 + 8;
  uint64_t v8 = v9;
  if (v5 < 0) {
    uint64_t v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *((void *)a1 + 2)) == 0;
  }
  if (!a1[31]) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    int v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t ZinAneRelocInfo::operator<(unsigned __int8 *a1, unsigned __int8 *a2)
{
  v4[0] = a1;
  v4[1] = a1 + 32;
  v4[2] = a1 + 8;
  v3[0] = a2;
  v3[1] = a2 + 32;
  v3[2] = a2 + 8;
  return (std::__tuple_compare_three_way[abi:ne180100]<BOOL const&,unsigned int const&,std::string const&,BOOL const&,unsigned int const&,std::string const&,0ul,1ul,2ul>(v4, v3) >> 7) & 1;
}

void ZinAneRelocInfo::ZinAneRelocInfo(ZinAneRelocInfo *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *(_WORD *)this = 1;
  *((_DWORD *)this + 8) = 0;
}

uint64_t ZinAneRelocInfo::ZinAneRelocInfo(uint64_t a1, const std::string *a2, __int16 a3, char a4, char a5, char a6, char a7, int a8)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)a1 = a6;
  *(unsigned char *)(a1 + 1) = a7;
  std::string::operator=((std::string *)(a1 + 8), a2);
  if (a8) {
    int v13 = 0x100000;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 32) = a3 & 0x7FFF | ((a4 & 0x7F) << 22) | ((a5 & 1) << 15) | v13 | *(_DWORD *)(a1 + 32) & 0x2F0000 | 0x20000000;
  return a1;
}

void sub_21135E0BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *FindRelocationInfo@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  for (uint64_t i = *result; ; i += 40)
  {
    if (i == result[1])
    {
      *a3 = 0;
      a3[40] = 0;
      return result;
    }
    if (4 * (*(_DWORD *)(i + 32) & 0x7FFF) == a2) {
      break;
    }
  }
  return (uint64_t *)std::__optional_destruct_base<ZinAneRelocInfo,false>::__optional_destruct_base[abi:ne180100]<ZinAneRelocInfo const&>((uint64_t)a3, i);
}

void ZinAneRelocationCommand_v11::~ZinAneRelocationCommand_v11(ZinAneRelocationCommand_v11 *this)
{
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<BOOL const&,unsigned int const&,std::string const&,BOOL const&,unsigned int const&,std::string const&,0ul,1ul,2ul>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned int v2 = **a1;
  unsigned int v3 = **a2;
  BOOL v4 = v2 == v3;
  if (v2 < v3) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 1;
  }
  if (v4
    && ((unsigned int v6 = *(_DWORD *)a1[1], v7 = *(_DWORD *)a2[1], v8 = v6 == v7, v6 < v7) ? (v5 = 0xFFFFFFFFLL) : (v5 = 1), v8))
  {
    return std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1[2], (void **)a2[2]);
  }
  else
  {
    return v5;
  }
}

uint64_t std::__optional_destruct_base<ZinAneRelocInfo,false>::__optional_destruct_base[abi:ne180100]<ZinAneRelocInfo const&>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  BOOL v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
  return a1;
}

void ZinMirHandleUnflattenLayer(uint64_t **a1, ZinUnflattenCompositeLayer *a2)
{
  uint64_t v190 = *MEMORY[0x263EF8340];
  uint64_t v169 = *((void *)a2 + 2);
  BOOL v4 = (ZinIrOpLayer *)*((void *)a2 + 24);
  long long v5 = (char *)operator new(8uLL);
  uint64_t v181 = v5;
  *(void *)long long v5 = v4;
  int v182 = v5 + 8;
  int v183 = v5 + 8;
  *(void *)uint64_t v188 = a2;
  long long v177 = (ZinIrKernel *)v188;
  long long v178 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v177);
  ZinIrOpLayerGraph::AddNode(a1, v4, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_26C359A08;
  if (__p[1])
  {
    v185[0] = __p[1];
    operator delete(__p[1]);
  }
  long long v177 = a2;
  __p[0] = &v177;
  unsigned int v6 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 8, (unint64_t **)__p);
  if (v6) {
    unsigned int v7 = (uint64_t *)(v6 + 3);
  }
  else {
    unsigned int v7 = (uint64_t *)(a1 + 13);
  }
  ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>((uint64_t)a1, v7, (uint64_t)v4);
  BOOL v8 = (ZinIrOpLayer *)*((void *)a2 + 25);
  if (v8)
  {
    *(void *)uint64_t v188 = a2;
    long long v177 = (ZinIrKernel *)v188;
    long long v178 = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v177);
    ZinIrOpLayerGraph::AddNode(a1, v8, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_26C359A08;
    if (__p[1])
    {
      v185[0] = __p[1];
      operator delete(__p[1]);
    }
    ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v4, (uint64_t)v8, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    char v9 = v182;
    if (v182 >= v183)
    {
      uint64_t v11 = (v182 - (unsigned char *)v181) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = (v183 - (unsigned char *)v181) >> 2;
      if (v12 <= v11 + 1) {
        unint64_t v12 = v11 + 1;
      }
      if ((unint64_t)(v183 - (unsigned char *)v181) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v183, v13);
      }
      else {
        int v14 = 0;
      }
      uint64_t v15 = (ZinIrOpLayer **)&v14[8 * v11];
      BOOL v16 = &v14[8 * v13];
      *uint64_t v15 = v8;
      uint64_t v10 = (char *)(v15 + 1);
      uint64_t v18 = (char *)v181;
      unint64_t v17 = v182;
      if (v182 != v181)
      {
        do
        {
          unint64_t v19 = (ZinIrOpLayer *)*((void *)v17 - 1);
          v17 -= 8;
          *--uint64_t v15 = v19;
        }
        while (v17 != v18);
        unint64_t v17 = (char *)v181;
      }
      uint64_t v181 = v15;
      int v182 = v10;
      int v183 = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)int v182 = v8;
      uint64_t v10 = v9 + 8;
    }
    int v182 = v10;
  }
  uint64_t v20 = (ZinIrOpLayer *)*((void *)a2 + 26);
  if (v20)
  {
    *(void *)uint64_t v188 = a2;
    long long v177 = (ZinIrKernel *)v188;
    long long v178 = (void *)1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v177);
    ZinIrOpLayerGraph::AddNode(a1, v20, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_26C359A08;
    if (__p[1])
    {
      v185[0] = __p[1];
      operator delete(__p[1]);
    }
    ZinIrOpLayerGraph::AddEdge((uint64_t)a1, *((void *)v182 - 1), (uint64_t)v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    uint64_t v21 = v182;
    if (v182 >= v183)
    {
      uint64_t v23 = (v182 - (unsigned char *)v181) >> 3;
      if ((unint64_t)(v23 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v24 = (v183 - (unsigned char *)v181) >> 2;
      if (v24 <= v23 + 1) {
        unint64_t v24 = v23 + 1;
      }
      if ((unint64_t)(v183 - (unsigned char *)v181) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25) {
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v183, v25);
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = (ZinIrOpLayer **)&v26[8 * v23];
      uint64_t v28 = &v26[8 * v25];
      *uint64_t v27 = v20;
      uint64_t v22 = (char *)(v27 + 1);
      BOOL v30 = (char *)v181;
      uint64_t v29 = v182;
      if (v182 != v181)
      {
        do
        {
          uint64_t v31 = (ZinIrOpLayer *)*((void *)v29 - 1);
          v29 -= 8;
          *--uint64_t v27 = v31;
        }
        while (v29 != v30);
        uint64_t v29 = (char *)v181;
      }
      uint64_t v181 = v27;
      int v182 = v22;
      int v183 = v28;
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(void *)int v182 = v20;
      uint64_t v22 = v21 + 8;
    }
    int v182 = v22;
  }
  else
  {
    uint64_t v22 = v182;
  }
  uint64_t v168 = (*(uint64_t (**)(void, void, void))(**((void **)v22 - 1) + 32))(*((void *)v22 - 1), 0, 0);
  int v166 = v4;
  uint64_t v167 = (void *)(*(uint64_t (**)(ZinUnflattenCompositeLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  if (*(_DWORD *)(*(void *)(*((void *)a2 + 27) + 64) + 12) == 1)
  {
    long long v32 = (char *)v181;
    uint64_t v33 = v182;
    if (v181 != v182)
    {
      do
      {
        int v34 = (ZinIrKernel **)(*(void *)v32 + 136);
        unsigned int v35 = *v34;
        if (*v34)
        {
          if (*((char *)v35 + 23) >= 0) {
            size_t v36 = *((unsigned __int8 *)v35 + 23);
          }
          else {
            size_t v36 = *((void *)v35 + 1);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v36 + 9);
          if (SHIBYTE(v185[0]) >= 0) {
            uint64_t v37 = __p;
          }
          else {
            uint64_t v37 = (void **)__p[0];
          }
          if (v36)
          {
            if (*((char *)v35 + 23) >= 0) {
              uint64_t v38 = v35;
            }
            else {
              uint64_t v38 = *(ZinIrKernel **)v35;
            }
            memmove(v37, v38, v36);
          }
          strcpy((char *)v37 + v36, "_remapped");
          uint64_t v39 = (uint64_t)*v34;
          Hal = ZinIrTarget::GetHal((uint64_t *)v169, *(ZinIrTarget **)(v169 + 160));
          (*(void (**)(uint64_t *))(*Hal + 16))(Hal);
          ZinIrKernel::RemapWeightForUnflatten(v39, (const ZinTensorDimensions *)(v167 + 6), &v177);
          uint64_t v41 = v177;
          if (!v177) {
            ZinAssertImpl("Error: fail to remap unflatten kernel");
          }
          long long v177 = 0;
          std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v34, v41);
          long long v42 = v177;
          long long v177 = 0;
          if (v42)
          {
            ZinIrKernel::~ZinIrKernel(v42);
            MEMORY[0x21667D3C0]();
          }
          if (SHIBYTE(v185[0]) < 0) {
            operator delete(__p[0]);
          }
        }
        v32 += 8;
      }
      while (v32 != v33);
    }
  }
  uint64_t v43 = ZinIrTarget::GetHal((uint64_t *)v169, *(ZinIrTarget **)(v169 + 160));
  (*(void (**)(uint64_t *))(*v43 + 16))(v43);
  uint64_t v44 = v167[6];
  uint64_t v45 = v167[7];
  uint64_t v46 = v167[8];
  unint64_t v47 = v167[9];
  memset(v185, 0, sizeof(v185));
  *(_OWORD *)std::string __p = 0u;
  uint64_t v48 = v45 * v44 * v46;
  unint64_t v49 = v48 * v47;
  if (v47 <= 4)
  {
    uint64_t v50 = operator new(8uLL);
    void *v50 = v47;
    v185[0] = v50 + 1;
    __p[0] = v50;
    __p[1] = v50 + 1;
    if (v49)
    {
      uint64_t v51 = 0;
      for (uint64_t i = 0; i != v49; ++i)
      {
        if (v51 >= v185[3])
        {
          uint64_t v54 = (char *)v185[1];
          uint64_t v55 = (v51 - (char *)v185[1]) >> 3;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v57 = (char *)v185[3] - (char *)v185[1];
          if (((char *)v185[3] - (char *)v185[1]) >> 2 > v56) {
            unint64_t v56 = v57 >> 2;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58)
          {
            uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v185[3], v58);
            uint64_t v51 = (char *)v185[2];
            uint64_t v54 = (char *)v185[1];
          }
          else
          {
            uint64_t v59 = 0;
          }
          uint64_t v60 = &v59[8 * v55];
          *(void *)uint64_t v60 = i;
          uint64_t v53 = v60 + 8;
          while (v51 != v54)
          {
            uint64_t v61 = *((void *)v51 - 1);
            v51 -= 8;
            *((void *)v60 - 1) = v61;
            v60 -= 8;
          }
          v185[1] = v60;
          v185[2] = v53;
          v185[3] = &v59[8 * v58];
          if (v54) {
            operator delete(v54);
          }
        }
        else
        {
          *(void *)uint64_t v51 = i;
          uint64_t v53 = v51 + 8;
        }
        v185[2] = v53;
        uint64_t v51 = (char *)v53;
      }
    }
    goto LABEL_231;
  }
  if (v47 <= 8)
  {
    int64_t v62 = operator new(8uLL);
    void *v62 = 8;
    v185[0] = v62 + 1;
    __p[0] = v62;
    __p[1] = v62 + 1;
    if (!v49) {
      goto LABEL_231;
    }
    int64_t v63 = 0;
    unint64_t v64 = 0;
    while (1)
    {
      for (unint64_t j = 0; j != 8; ++j)
      {
        if (j >= v47)
        {
          if (v63 < v185[3])
          {
            *(void *)int64_t v63 = v49;
            v63 += 8;
            goto LABEL_124;
          }
          uint64_t v67 = (char *)v185[1];
          uint64_t v73 = (v63 - (char *)v185[1]) >> 3;
          unint64_t v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v75 = (char *)v185[3] - (char *)v185[1];
          if (((char *)v185[3] - (char *)v185[1]) >> 2 > v74) {
            unint64_t v74 = v75 >> 2;
          }
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v74;
          }
          if (v71)
          {
            uint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v185[3], v71);
            int64_t v63 = (char *)v185[2];
            uint64_t v67 = (char *)v185[1];
          }
          else
          {
            uint64_t v72 = 0;
          }
          uint64_t v76 = &v72[8 * v73];
          *(void *)uint64_t v76 = v49;
          uint64_t v77 = v76 + 8;
          while (v63 != v67)
          {
            uint64_t v79 = *((void *)v63 - 1);
            v63 -= 8;
            *((void *)v76 - 1) = v79;
            v76 -= 8;
          }
        }
        else
        {
          unint64_t v66 = j + v64;
          if (v63 < v185[3])
          {
            *(void *)int64_t v63 = v66;
            v63 += 8;
            goto LABEL_124;
          }
          uint64_t v67 = (char *)v185[1];
          uint64_t v68 = (v63 - (char *)v185[1]) >> 3;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v70 = (char *)v185[3] - (char *)v185[1];
          if (((char *)v185[3] - (char *)v185[1]) >> 2 > v69) {
            unint64_t v69 = v70 >> 2;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            uint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v185[3], v71);
            int64_t v63 = (char *)v185[2];
            uint64_t v67 = (char *)v185[1];
          }
          else
          {
            uint64_t v72 = 0;
          }
          uint64_t v76 = &v72[8 * v68];
          *(void *)uint64_t v76 = v66;
          uint64_t v77 = v76 + 8;
          while (v63 != v67)
          {
            uint64_t v78 = *((void *)v63 - 1);
            v63 -= 8;
            *((void *)v76 - 1) = v78;
            v76 -= 8;
          }
        }
        v185[1] = v76;
        v185[2] = v77;
        v185[3] = &v72[8 * v71];
        if (v67) {
          operator delete(v67);
        }
        int64_t v63 = (char *)v77;
LABEL_124:
        v185[2] = v63;
      }
      v64 += v47;
      if (v64 >= v49) {
        goto LABEL_231;
      }
    }
  }
  if (v47 >= 0x11)
  {
    if (v47 >= 0x19)
    {
      if (v47 >= 0x21)
      {
        if (v47 > 0x40)
        {
          v188[0] = 0;
          std::pair<BOOL,ZinMirUnflatten::ShuffleInfo>::pair[abi:ne180100]<BOOL,ZinMirUnflatten::ShuffleInfo&,0>((uint64_t)&v177, v188, (uint64_t)__p);
          goto LABEL_232;
        }
        unint64_t v80 = 8;
      }
      else
      {
        unint64_t v80 = 4;
      }
    }
    else
    {
      unint64_t v80 = 3;
    }
  }
  else
  {
    unint64_t v80 = 2;
  }
  unsigned long long v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v185, 1uLL);
  uint64_t v83 = (char *)__p[1];
  uint64_t v84 = (char *)__p[0];
  std::string v85 = &v82[8 * v81];
  *(void *)unsigned long long v82 = 8;
  BOOL v86 = v82 + 8;
  uint64_t v87 = v82;
  while (v83 != v84)
  {
    uint64_t v88 = *((void *)v83 - 1);
    v83 -= 8;
    *((void *)v87 - 1) = v88;
    v87 -= 8;
  }
  __p[0] = v87;
  __p[1] = v82 + 8;
  v185[0] = &v82[8 * v81];
  if (v84)
  {
    operator delete(v84);
    std::string v85 = (char *)v185[0];
  }
  __p[1] = v82 + 8;
  if (v86 >= v85)
  {
    std::string::size_type v90 = (char *)__p[0];
    uint64_t v91 = (v86 - (char *)__p[0]) >> 3;
    unint64_t v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v93 = v85 - (char *)__p[0];
    if (v93 >> 2 > v92) {
      unint64_t v92 = v93 >> 2;
    }
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v94 = v92;
    }
    if (v94)
    {
      uint64_t v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v185, v94);
      BOOL v86 = (char *)__p[1];
      std::string::size_type v90 = (char *)__p[0];
    }
    else
    {
      uint64_t v95 = 0;
    }
    long long v96 = (unint64_t *)&v95[8 * v91];
    uint64_t v97 = &v95[8 * v94];
    *long long v96 = v80;
    uint64_t v89 = v96 + 1;
    while (v86 != v90)
    {
      unint64_t v98 = *((void *)v86 - 1);
      v86 -= 8;
      *--long long v96 = v98;
    }
    __p[0] = v96;
    __p[1] = v89;
    v185[0] = v97;
    if (v90) {
      operator delete(v90);
    }
  }
  else
  {
    *((void *)v82 + 1) = v80;
    uint64_t v89 = v82 + 16;
  }
  __p[1] = v89;
  v186.i64[0] = 0;
  std::vector<unsigned long>::vector(v173, 8uLL, &v186);
  std::vector<std::vector<unsigned long>>::vector(v188, v80, (uint64_t)v173);
  if (v173[0])
  {
    v173[1] = v173[0];
    operator delete(v173[0]);
  }
  uint64_t v99 = 0;
  unint64_t v100 = 0;
  uint64_t v101 = *(void *)v188;
  int64x2_t v102 = vdupq_n_s64(2uLL);
  do
  {
    uint64_t v103 = 0;
    uint64_t v104 = *(void *)(v101 + 24 * v99);
    int8x16_t v105 = (int8x16_t)vdupq_n_s64(v100);
    v100 += 8;
    int64x2_t v106 = (int64x2_t)vorrq_s8(v105, (int8x16_t)xmmword_211ED5A80);
    do
    {
      *(int64x2_t *)(v104 + v103) = v106;
      int64x2_t v106 = vaddq_s64(v106, v102);
      v103 += 16;
    }
    while (v103 != 64);
    ++v99;
  }
  while (v99 != v80);
  uint64_t v165 = v48;
  unint64_t v170 = v48 * v47;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  v173[0] = 0;
  v173[1] = 0;
  *(void *)&long long v174 = 0;
  do
  {
    for (uint64_t k = 0; k != v80; ++k)
    {
      uint64_t v110 = *(void *)(*(void *)v188 + 24 * k);
      if ((unint64_t)v107 >= (unint64_t)v174)
      {
        uint64_t v111 = (char *)v173[0];
        uint64_t v112 = (v107 - (char *)v173[0]) >> 3;
        unint64_t v113 = v112 + 1;
        if ((unint64_t)(v112 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v114 = v174 - (unint64_t)v173[0];
        if ((uint64_t)(v174 - (unint64_t)v173[0]) >> 2 > v113) {
          unint64_t v113 = v114 >> 2;
        }
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v115 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v113;
        }
        if (v115)
        {
          uint64_t v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v174, v115);
          uint64_t v111 = (char *)v173[0];
          uint64_t v107 = (char *)v173[1];
        }
        else
        {
          uint64_t v116 = 0;
        }
        int v117 = &v116[8 * v112];
        *(void *)int v117 = *(void *)(v110 + 8 * v108);
        int v118 = v117 + 8;
        while (v107 != v111)
        {
          uint64_t v119 = *((void *)v107 - 1);
          v107 -= 8;
          *((void *)v117 - 1) = v119;
          v117 -= 8;
        }
        v173[0] = v117;
        v173[1] = v118;
        *(void *)&long long v174 = &v116[8 * v115];
        if (v111) {
          operator delete(v111);
        }
        uint64_t v107 = (char *)v118;
      }
      else
      {
        *(void *)uint64_t v107 = *(void *)(v110 + 8 * v108);
        v107 += 8;
      }
      v173[1] = v107;
    }
    ++v108;
  }
  while (v108 != 8);
  v171[0] = 0;
  std::vector<unsigned long>::vector(&v186, 8 * v80, v171);
  uint64_t v120 = 0;
  uint64_t v121 = v173[0];
  uint64_t v122 = (void *)v186.i64[0];
  do
  {
    v122[v121[v120]] = v120;
    ++v120;
  }
  while (8 * v80 != v120);
  v171[0] = 0;
  v171[1] = 0;
  long long v172 = 0;
  if (!v165)
  {
LABEL_225:
    v186.i64[1] = (uint64_t)v122;
    operator delete(v122);
    goto LABEL_226;
  }
  int v123 = 0;
  unint64_t v124 = 0;
LABEL_187:
  uint64_t v125 = v186.i64[1];
  for (int m = (unint64_t *)v186.i64[0]; ; ++m)
  {
    if (m == (unint64_t *)v125)
    {
      v124 += v47;
      if (v124 >= v49)
      {
        uint64_t v122 = (void *)v186.i64[0];
        if (v186.i64[0]) {
          goto LABEL_225;
        }
LABEL_226:
        if (v173[0])
        {
          v173[1] = v173[0];
          operator delete(v173[0]);
        }
        v173[0] = v188;
        std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)v173);
        if (v185[1])
        {
          v185[2] = v185[1];
          operator delete(v185[1]);
        }
        *(_OWORD *)&v185[1] = *(_OWORD *)v171;
        v185[3] = v172;
LABEL_231:
        v188[0] = 1;
        std::pair<BOOL,ZinMirUnflatten::ShuffleInfo>::pair[abi:ne180100]<BOOL,ZinMirUnflatten::ShuffleInfo&,0>((uint64_t)&v177, v188, (uint64_t)__p);
LABEL_232:
        if (v185[1])
        {
          v185[2] = v185[1];
          operator delete(v185[1]);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((_BYTE)v177)
        {
          uint64_t v142 = (char *)v181;
          long long v141 = v182;
          if (v181 != v182)
          {
            do
            {
              long long v144 = (ZinIrKernel **)(*(void *)v142 + 136);
              uint64_t v143 = *v144;
              if (*v144)
              {
                if (*((char *)v143 + 23) >= 0) {
                  size_t v145 = *((unsigned __int8 *)v143 + 23);
                }
                else {
                  size_t v145 = *((void *)v143 + 1);
                }
                std::string::basic_string[abi:ne180100]((uint64_t)v188, v145 + 1);
                if (v188[23] >= 0) {
                  __int16 v146 = v188;
                }
                else {
                  __int16 v146 = *(unsigned char **)v188;
                }
                if (v145)
                {
                  if (*((char *)v143 + 23) >= 0) {
                    char v147 = v143;
                  }
                  else {
                    char v147 = *(ZinIrKernel **)v143;
                  }
                  memmove(v146, v147, v145);
                }
                *(_WORD *)&v146[v145] = 95;
                int v148 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v186, "unflat_shuf");
                long long v149 = std::string::append(v148, "_xfm", 4uLL);
                long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
                *(void *)&long long v174 = *((void *)&v149->__r_.__value_.__l + 2);
                *(_OWORD *)long long v173 = v150;
                v149->__r_.__value_.__l.__size_ = 0;
                v149->__r_.__value_.__r.__words[2] = 0;
                v149->__r_.__value_.__r.__words[0] = 0;
                if ((SBYTE7(v174) & 0x80u) == 0) {
                  uint64_t v151 = v173;
                }
                else {
                  uint64_t v151 = (void **)v173[0];
                }
                if ((SBYTE7(v174) & 0x80u) == 0) {
                  std::string::size_type v152 = BYTE7(v174);
                }
                else {
                  std::string::size_type v152 = (std::string::size_type)v173[1];
                }
                int v153 = std::string::append((std::string *)v188, (const std::string::value_type *)v151, v152);
                long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
                v185[0] = (void *)v153->__r_.__value_.__r.__words[2];
                *(_OWORD *)std::string __p = v154;
                v153->__r_.__value_.__l.__size_ = 0;
                v153->__r_.__value_.__r.__words[2] = 0;
                v153->__r_.__value_.__r.__words[0] = 0;
                ZinIrKernel::ShuffleChannels((uint64_t)v143, (uint64_t)&v180, v171);
                if (SHIBYTE(v185[0]) < 0) {
                  operator delete(__p[0]);
                }
                if (SBYTE7(v174) < 0) {
                  operator delete(v173[0]);
                }
                if (v187 < 0) {
                  operator delete((void *)v186.i64[0]);
                }
                if ((v188[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v188);
                }
                int v155 = v171[0];
                v171[0] = 0;
                std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v144, v155);
                uint64_t v156 = v171[0];
                v171[0] = 0;
                if (v156)
                {
                  ZinIrKernel::~ZinIrKernel(v156);
                  MEMORY[0x21667D3C0]();
                }
              }
              v142 += 8;
            }
            while (v142 != v141);
          }
          long long v157 = *(_OWORD *)(v168 + 64);
          *(_OWORD *)uint64_t v188 = *(_OWORD *)(v168 + 48);
          *(_OWORD *)&v188[16] = v157;
          uint64_t v189 = *(void *)(v168 + 80);
          uint64_t v158 = v167[8] * v167[7] * *(void *)v178;
          *(void *)&v188[8] = v158;
          if (v179 - (void)v178 == 16) {
            *(void *)&v188[8] = *((void *)v178 + 1) * v158;
          }
          uint64_t v189 = 1;
          if (v181 != v182)
          {
            uint64_t v159 = *(void *)v181;
            if (*(char *)(*(void *)v181 + 47) >= 0) {
              size_t v160 = *(unsigned __int8 *)(*(void *)v181 + 47);
            }
            else {
              size_t v160 = *(void *)(*(void *)v181 + 32);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v173, v160 + 13);
            if ((SBYTE7(v174) & 0x80u) == 0) {
              int v161 = v173;
            }
            else {
              int v161 = (void **)v173[0];
            }
            if (v160)
            {
              if (*(char *)(v159 + 47) >= 0) {
                char v162 = (const void *)(v159 + 24);
              }
              else {
                char v162 = *(const void **)(v159 + 24);
              }
              memmove(v161, v162, v160);
            }
            strcpy((char *)v161 + v160, "_interleave_0");
            v176[6] = 0;
            v171[0] = 0;
            v171[1] = 0;
            LODWORD(__p[0]) = 0;
            memset(v185, 0, 20);
            __p[1] = 0;
            ZinIrTensor::CreateTensor();
          }
          DimensionOrderHint::DimensionOrderHint(v176, 2);
          if (v179 - (void)v178 == 8)
          {
            ZinObjectNameFactory::ZinObjectNameFactory(v173, (char *)v166 + 24);
            uint64_t v163 = (*(uint64_t (**)(void, void, void))(**((void **)v182 - 1) + 32))(*((void *)v182 - 1), 0, 0);
            ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)(v167 + 6), *(_DWORD *)(v163 + 88), 2, (uint64_t)v176, 64, 1, 1, &v186);
            operator new();
          }
          long long v174 = *(_OWORD *)&v188[16];
          uint64_t v175 = v189;
          *(_OWORD *)long long v173 = *(_OWORD *)v188;
          v173[1] = (void *)(*(void *)&v188[8] / *(void *)v178);
          *(void *)&long long v174 = *(void *)&v188[16];
          *((void *)&v174 + 1) = *(void *)v178;
          uint64_t v175 = 1;
          uint64_t v164 = (*(uint64_t (**)(void, void, void))(**((void **)v182 - 1) + 32))(*((void *)v182 - 1), 0, 0);
          ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)v173, *(_DWORD *)(v164 + 88), 2, (uint64_t)v176, 64, 1, 1, &v186);
          operator new();
        }
        ZinAssertImpl("Error: failed to obtain the shuffling info. Only width in [1, 64] is valid but get %zd", v167[9]);
      }
      goto LABEL_187;
    }
    if (*m >= v47)
    {
      if (v123 < v172)
      {
        *(void *)int v123 = v49;
        int v128 = (ZinIrKernel *)((char *)v123 + 8);
        goto LABEL_222;
      }
      long long v129 = v171[0];
      uint64_t v135 = (v123 - v171[0]) >> 3;
      unint64_t v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v137 = v172 - v171[0];
      if ((v172 - v171[0]) >> 2 > v136) {
        unint64_t v136 = v137 >> 2;
      }
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v133 = v136;
      }
      if (v133)
      {
        long long v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v172, v133);
        long long v129 = v171[0];
        int v123 = v171[1];
      }
      else
      {
        long long v134 = 0;
      }
      long long v138 = (ZinIrKernel *)&v134[8 * v135];
      *(void *)long long v138 = v49;
      int v128 = (ZinIrKernel *)((char *)v138 + 8);
      while (v123 != v129)
      {
        uint64_t v140 = *((void *)v123 - 1);
        int v123 = (ZinIrKernel *)((char *)v123 - 8);
        *((void *)v138 - 1) = v140;
        long long v138 = (ZinIrKernel *)((char *)v138 - 8);
      }
    }
    else
    {
      unint64_t v127 = *m + v124;
      if (v123 < v172)
      {
        *(void *)int v123 = v127;
        int v128 = (ZinIrKernel *)((char *)v123 + 8);
        unint64_t v49 = v170;
        goto LABEL_222;
      }
      long long v129 = v171[0];
      uint64_t v130 = (v123 - v171[0]) >> 3;
      unint64_t v131 = v130 + 1;
      if ((unint64_t)(v130 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v132 = v172 - v171[0];
      if ((v172 - v171[0]) >> 2 > v131) {
        unint64_t v131 = v132 >> 2;
      }
      if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v133 = v131;
      }
      if (v133)
      {
        long long v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v172, v133);
        long long v129 = v171[0];
        int v123 = v171[1];
      }
      else
      {
        long long v134 = 0;
      }
      long long v138 = (ZinIrKernel *)&v134[8 * v130];
      *(void *)long long v138 = v127;
      int v128 = (ZinIrKernel *)((char *)v138 + 8);
      if (v123 == v129)
      {
        unint64_t v49 = v170;
      }
      else
      {
        unint64_t v49 = v170;
        do
        {
          uint64_t v139 = *((void *)v123 - 1);
          int v123 = (ZinIrKernel *)((char *)v123 - 8);
          *((void *)v138 - 1) = v139;
          long long v138 = (ZinIrKernel *)((char *)v138 - 8);
        }
        while (v123 != v129);
      }
    }
    v171[0] = v138;
    v171[1] = v128;
    long long v172 = (ZinIrKernel *)&v134[8 * v133];
    if (v129) {
      operator delete(v129);
    }
LABEL_222:
    v171[1] = v128;
    int v123 = v128;
  }
}

void sub_21135FFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ANEDebugInfo::DebugInfoInMem::Group::~Group((ANEDebugInfo::DebugInfoInMem::Group *)&STACK[0x200]);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::pair<BOOL,ZinMirUnflatten::ShuffleInfo>::~pair(void *a1)
{
  unsigned int v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t std::pair<BOOL,ZinMirUnflatten::ShuffleInfo>::pair[abi:ne180100]<BOOL,ZinMirUnflatten::ShuffleInfo&,0>(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(unsigned char *)a1 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)(a1 + 8), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)(a1 + 32), *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3);
  return a1;
}

void sub_211360724(_Unwind_Exception *exception_object)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ANECGetCompilerInputs(const __CFDictionary *a1, void **a2, CFArrayRef *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  CFArrayRef theArray = 0;
  uint64_t v10 = 0;
  BOOL v8 = 0;
  ANECGetArray(a1, @"InputNetworks", &v10, &theArray);
  if (v10 != 1 || ANECGetArrayElem(theArray, 0, &v8))
  {
    CFStringRef v6 = @"UnsupportedFeature";
LABEL_4:
    ZinIrPlistCompilationStatus::SetError(a3, v6);
    return;
  }
  if (!ANECGetFileName(v8, @"NetworkPlistName", @"NetworkPlistPath", a2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    *(_DWORD *)long long buf = 138413058;
    unint64_t v12 = @"NetworkPlistName";
    __int16 v13 = 2112;
    int v14 = @"NetworkPlistPath";
    __int16 v15 = 2112;
    BOOL v16 = @"NetworkSourceFileName";
    __int16 v17 = 2112;
    uint64_t v18 = @"NetworkSourcePath";
    unsigned int v7 = &_os_log_internal;
LABEL_14:
    _os_log_impl(&dword_210C72000, v7, OS_LOG_TYPE_INFO, "ANEC Compiler Input used legacy key names '%@' '%@' - please update to use '%@' '%@'", buf, 0x2Au);
    goto LABEL_15;
  }
  if (!ANECGetFileName(v8, @"NetworkMILName", @"NetworkMILPath", a2))
  {
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    *(_DWORD *)long long buf = 138413058;
    unint64_t v12 = @"NetworkMILName";
    __int16 v13 = 2112;
    int v14 = @"NetworkMILPath";
    __int16 v15 = 2112;
    BOOL v16 = @"NetworkSourceFileName";
    __int16 v17 = 2112;
    uint64_t v18 = @"NetworkSourcePath";
    unsigned int v7 = &_os_log_internal;
    goto LABEL_14;
  }
  if (ANECGetFileName(v8, @"NetworkSourceFileName", @"NetworkSourcePath", a2))
  {
    CFStringRef v6 = @"InvalidNetworkSourceFileName";
    goto LABEL_4;
  }
LABEL_15:
  if (ANECGetFileName(a1, @"OutputFileName", @"OutputFilePath", a2 + 3))
  {
    CFStringRef v6 = @"InvalidMachOFileName";
    goto LABEL_4;
  }
}

void ANECGetJITCompilerInputs(const __CFDictionary *a1, void **a2, int *a3, CFArrayRef *a4)
{
  CFArrayRef theArray = 0;
  uint64_t v16 = 0;
  CFDictionaryRef theDict = 0;
  ANECGetArray(a1, @"InputNetworks", &v16, &theArray);
  if (v16 != 1 || ANECGetArrayElem(theArray, 0, &theDict))
  {
    ZinIrPlistCompilationStatus::SetError(a4, @"UnsupportedFeature");
    return;
  }
  if (ANECGetFileName(theDict, @"NetworkSourceFileName", @"NetworkSourcePath", a2))
  {
    ZinIrPlistCompilationStatus::SetError(a4, @"InvalidNetworkSourceFileName");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int16 v13 = 0;
      BOOL v8 = &_os_log_internal;
      char v9 = "ANEC JIT Compiler Input is missing the input AOT file information";
LABEL_17:
      _os_log_impl(&dword_210C72000, v8, OS_LOG_TYPE_INFO, v9, v13, 2u);
    }
  }
  else if (ANECGetFileName(theDict, @"NetworkJITShapesName", @"NetworkJITShapesPath", a2 + 6))
  {
    ZinIrPlistCompilationStatus::SetError(a4, @"InvalidJITShapesFileName");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int16 v13 = 0;
      BOOL v8 = &_os_log_internal;
      char v9 = "ANEC JIT Compiler Input is missing the JIT shapes file information";
      goto LABEL_17;
    }
  }
  else
  {
    *a3 = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"NetworkProcedureIndex");
    if (Value)
    {
      CFNumberRef v11 = Value;
      CFTypeID v12 = CFGetTypeID(Value);
      if (v12 == CFNumberGetTypeID()) {
        CFNumberGetValue(v11, kCFNumberSInt32Type, a3);
      }
    }
    if (ANECGetFileName(a1, @"OutputFileName", @"OutputFilePath", a2 + 3))
    {
      ZinIrPlistCompilationStatus::SetError(a4, @"InvalidMachOFileName");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int16 v13 = 0;
        BOOL v8 = &_os_log_internal;
        char v9 = "ANEC JIT Compiler Input is missing the output JIT file information";
        goto LABEL_17;
      }
    }
  }
}

unint64_t ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_1::operator()(const __CFArray *a1, unint64_t *a2, int a3)
{
  unint64_t result = CFArrayGetCount(a1);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v16 = 0;
      ZinGetString(ValueAtIndex, (uint64_t)__p);
      if (a3)
      {
        unint64_t v9 = a2[4];
        if (v9 >= a2[5])
        {
          __int16 v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)(a2 + 3), (uint64_t)__p);
        }
        else
        {
          if (SHIBYTE(v16) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)a2[4], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            long long v10 = *(_OWORD *)__p;
            *(void *)(v9 + 16) = v16;
            *(_OWORD *)unint64_t v9 = v10;
          }
          __int16 v13 = (std::string *)(v9 + 24);
          a2[4] = v9 + 24;
        }
        a2[4] = (unint64_t)v13;
      }
      else
      {
        unint64_t v11 = a2[7];
        if (v11 >= a2[8])
        {
          int v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)(a2 + 6), (uint64_t)__p);
        }
        else
        {
          if (SHIBYTE(v16) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)a2[7], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            long long v12 = *(_OWORD *)__p;
            *(void *)(v11 + 16) = v16;
            *(_OWORD *)unint64_t v11 = v12;
          }
          int v14 = (std::string *)(v11 + 24);
          a2[7] = v11 + 24;
        }
        a2[7] = (unint64_t)v14;
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      unint64_t result = CFArrayGetCount(a1);
    }
  }
  return result;
}

void sub_211360CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 56) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ZinIrCompilerParameters::SubGraphSpec>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ZinIrCompilerParameters::SubGraphSpec>::__push_back_slow_path<ZinIrCompilerParameters::SubGraphSpec const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinIrCompilerParameters::SubGraphSpec,ZinIrCompilerParameters::SubGraphSpec const&,ZinIrCompilerParameters::SubGraphSpec*>(a1[1], a2);
    uint64_t result = v3 + 96;
    a1[1] = v3 + 96;
  }
  a1[1] = result;
  return result;
}

void sub_211360D54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL ANECGetCompilerOptions(__CFDictionary const*,ZinIrCompilerParameters &,ZinIrPlistCompilationStatus &)::$_2::operator()(CFDictionaryRef *a1, uint64_t a2)
{
  CFNumberRef Value = (__CFString *)CFDictionaryGetValue(*a1, @"SpatialSplitMode");
  if (Value)
  {
    BOOL v4 = Value;
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID())
    {
      uint64_t v15 = v4;
      CFIndex Length = CFStringGetLength(v4);
      if (Length != CFStringGetLength(@"Memory")
        || (v16.length = CFStringGetLength(v4),
            v16.location = 0,
            CFStringCompareWithOptions(v4, @"Memory", v16, 1uLL)))
      {
        CFIndex v7 = CFStringGetLength(v4);
        if (v7 != CFStringGetLength(@"Auto")
          || (v17.length = CFStringGetLength(v4),
              v17.location = 0,
              CFStringCompareWithOptions(v4, @"Auto", v17, 1uLL)))
        {
          CFIndex v8 = CFStringGetLength(v4);
          if (v8 != CFStringGetLength(@"Test")
            || (v18.length = CFStringGetLength(v4),
                v18.location = 0,
                CFStringCompareWithOptions(v4, @"Test", v18, 1uLL)))
          {
            CFIndex v9 = CFStringGetLength(v4);
            if (v9 != CFStringGetLength(@"GenericDAG")
              || (v19.length = CFStringGetLength(v4),
                  v19.location = 0,
                  CFStringCompareWithOptions(v4, @"GenericDAG", v19, 1uLL)))
            {
              CFIndex v10 = CFStringGetLength(v4);
              if (v10 != CFStringGetLength(@"GenericDAGExperimental")
                || (v20.length = CFStringGetLength(v4),
                    v20.location = 0,
                    CFStringCompareWithOptions(v4, @"GenericDAGExperimental", v20, 1uLL)))
              {
                CFIndex v11 = CFStringGetLength(v4);
                if (v11 != CFStringGetLength(@"GenericDAGMemory")
                  || (v21.length = CFStringGetLength(v4),
                      v21.location = 0,
                      CFStringCompareWithOptions(v4, @"GenericDAGMemory", v21, 1uLL)))
                {
                  int v14 = @"Disabled";
                  BOOL result = ZinCompareCFStringRef((CFStringRef *)&v15, (CFStringRef *)&v14);
                  if (!result) {
                    return result;
                  }
                  BOOL v4 = v15;
                }
              }
            }
          }
        }
      }
      int v13 = CFStringRefToSpatialSplitMode(v4);
      std::function<void ()(SpatialSplitMode)>::operator()(a2, v13);
    }
  }
  return 1;
}

uint64_t ANECCreateProcedureInfoForSingleProcedureNetwork(const __CFDictionary *a1, ANECProcedureInfo *a2, CFArrayRef *a3)
{
  CFTypeRef cf = 0;
  if (ZinAneCreateSanitizedPlist(a1, (const __CFDictionary **)&cf))
  {
    if (cf)
    {
      ANECProcedureInfo::SetANECIRDict((const void **)a2, cf);
      CFRelease(cf);
    }
    else
    {
      ANECProcedureInfo::SetANECIRDict((const void **)a2, a1);
    }
    CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)a2, @"Networks");
    if (Value)
    {
      uint64_t v15 = Value;
      CFTypeID v16 = CFGetTypeID(Value);
      if (v16 == CFArrayGetTypeID()) {
        CFNumberRef Value = v15;
      }
      else {
        CFNumberRef Value = 0;
      }
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, 0);
    if (ValueAtIndex)
    {
      CFRange v18 = ValueAtIndex;
      CFTypeID v19 = CFGetTypeID(ValueAtIndex);
      if (v19 == CFStringGetTypeID()) {
        CFRange v20 = v18;
      }
      else {
        CFRange v20 = 0;
      }
    }
    else
    {
      CFRange v20 = 0;
    }
    CFRange v21 = CFDictionaryGetValue(*(CFDictionaryRef *)a2, v20);
    if (v21)
    {
      uint64_t v22 = v21;
      CFTypeID v23 = CFGetTypeID(v21);
      if (v23 == CFDictionaryGetTypeID()) {
        CFRange v21 = v22;
      }
      else {
        CFRange v21 = 0;
      }
    }
    if (ZinAneCreateNameMaps((const __CFDictionary *)v21, (uint64_t **)a2 + 1, (uint64_t **)a2 + 4, (uint64_t **)a2 + 7)) {
      return 1;
    }
    BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v25) {
      ANECCreateProcedureInfoForSingleProcedureNetwork(v25, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  else
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ANECCreateProcedureInfoForSingleProcedureNetwork(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  ZinIrPlistCompilationStatus::SetError(a3, @"CompilationFailure");
  return 0;
}

void ANECProcedureInfo::SetANECIRDict(const void **this, CFTypeRef cf)
{
  BOOL v4 = *this;
  if (v4) {
    CFRelease(v4);
  }
  *this = cf;
  if (cf)
  {
    CFRetain(cf);
  }
}

uint64_t ANECCreateProcedureInfoForMultiProcedureNetwork(const __CFDictionary *a1, unsigned int a2, const void **a3, CFArrayRef *a4)
{
  CFTypeRef cf = 0;
  ProcedureDict = ZinAneCreateProcedureDict(a1, a2, (uint64_t)(a3 + 1), (uint64_t)(a3 + 4), (uint64_t)(a3 + 7), a4);
  if (!ProcedureDict) {
    goto LABEL_4;
  }
  uint64_t v7 = ProcedureDict;
  if (CFArrayGetCount(a4[4]) >= 1)
  {
    CFRelease(v7);
LABEL_4:
    BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v8) {
      ANECCreateProcedureInfoForMultiProcedureNetwork(v8, v9, v10, v11, v12, v13, v14, v15);
    }
LABEL_6:
    ZinIrPlistCompilationStatus::SetError(a4, @"CompilationFailure");
    return 0;
  }
  if ((ZinAneCreateSanitizedPlist(v7, (const __CFDictionary **)&cf) & 1) == 0)
  {
    if (cf) {
      CFRelease(cf);
    }
    CFRelease(v7);
    BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v18) {
      ANECCreateProcedureInfoForMultiProcedureNetwork(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    goto LABEL_6;
  }
  if (cf) {
    CFTypeRef v17 = cf;
  }
  else {
    CFTypeRef v17 = v7;
  }
  ANECProcedureInfo::SetANECIRDict(a3, v17);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v7);
  return 1;
}

const void *ANECCreateCompilerPlistDictionaryFromANECIR(uint64_t *a1, CFArrayRef *a2)
{
  unint64_t v3 = a1;
  BOOL v4 = (char *)a1 + 23;
  if (*((char *)a1 + 23) < 0) {
    a1 = (uint64_t *)*a1;
  }
  CFPropertyListRef DictFromPlist = ZinCreateDictFromPlist((const char *)a1);
  if (!DictFromPlist)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ANECCreateCompilerPlistDictionaryFromANECIR(v4, v3);
    }
    goto LABEL_8;
  }
  BOOL v6 = DictFromPlist;
  CFTypeID v7 = CFGetTypeID(DictFromPlist);
  if (v7 != CFDictionaryGetTypeID())
  {
    CFRelease(v6);
LABEL_8:
    ZinIrPlistCompilationStatus::SetError(a2, @"InvalidNetworkSourceFileName");
    return 0;
  }
  return v6;
}

void ANECCreatePrepareInfoFromANECIR(const ZinIrCompilerParameters *a1@<X0>, CFArrayRef *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    BOOL v6 = (char *)a1;
  }
  else {
    BOOL v6 = *(char **)a1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v6);
  CFTypeID v7 = ANECCreateCompilerPlistDictionaryFromANECIR((uint64_t *)&__p, a2);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  if (CFArrayGetCount(a2[4]) >= 1)
  {
    if (v7) {
      CFRelease(v7);
    }
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  unint64_t v40 = 0;
  Procedureint Count = ZinAnePlistGetProcedureCount((const __CFDictionary *)v7, &v40);
  long long v34 = 0uLL;
  unint64_t v35 = 0;
  ZinIdentStrings::ZinIdentStrings((ZinIdentStrings *)&v36, (const __CFDictionary *)v7, a1);
  if (ProcedureCount)
  {
    memset(v14, 0, sizeof(v14));
    if (v40)
    {
      LODWORD(v9) = 0;
      while (1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        std::string __p = 0;
        CFTypeID v16 = &v17;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v19 = &v20;
        uint64_t v22 = &v23;
        char v25 = 0;
        char v26 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v27 = &v28;
        uint64_t v30 = &v31;
        char v33 = 0;
        if ((ANECCreateProcedureInfoForMultiProcedureNetwork((const __CFDictionary *)v7, v9, (const void **)&__p, a2) & 1) == 0) {
          break;
        }
        uint64_t v10 = *((void *)&v34 + 1);
        if (*((void *)&v34 + 1) >= v35)
        {
          uint64_t v11 = std::vector<ANECProcedureInfo>::__emplace_back_slow_path<ANECProcedureInfo>((uint64_t *)&v34, (const ANECProcedureInfo *)&__p);
        }
        else
        {
          ANECProcedureInfo::ANECProcedureInfo(*((ANECProcedureInfo **)&v34 + 1), (const ANECProcedureInfo *)&__p);
          uint64_t v11 = v10 + 168;
        }
        *((void *)&v34 + 1) = v11;
        ANECProcedureInfo::~ANECProcedureInfo((char **)&__p);
        unint64_t v9 = (v9 + 1);
        if (v40 <= v9) {
          goto LABEL_18;
        }
      }
      if (v7) {
        CFRelease(v7);
      }
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      ANECProcedureInfo::~ANECProcedureInfo((char **)&__p);
      std::string __p = v14;
      std::vector<ANECProcedureInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_31;
    }
LABEL_18:
    std::string __p = v14;
    std::vector<ANECProcedureInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    std::string __p = 0;
    CFTypeID v16 = &v17;
    uint64_t v19 = &v20;
    uint64_t v20 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = &v23;
    char v25 = 0;
    char v26 = 0;
    uint64_t v27 = &v28;
    uint64_t v28 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = &v31;
    char v33 = 0;
    if ((ANECCreateProcedureInfoForSingleProcedureNetwork((const __CFDictionary *)v7, (ANECProcedureInfo *)&__p, a2) & 1) == 0)
    {
      if (v7) {
        CFRelease(v7);
      }
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      ANECProcedureInfo::~ANECProcedureInfo((char **)&__p);
      goto LABEL_31;
    }
    uint64_t v12 = *((void *)&v34 + 1);
    if (*((void *)&v34 + 1) >= v35)
    {
      uint64_t v13 = std::vector<ANECProcedureInfo>::__emplace_back_slow_path<ANECProcedureInfo>((uint64_t *)&v34, (const ANECProcedureInfo *)&__p);
    }
    else
    {
      ANECProcedureInfo::ANECProcedureInfo(*((ANECProcedureInfo **)&v34 + 1), (const ANECProcedureInfo *)&__p);
      uint64_t v13 = v12 + 168;
    }
    *((void *)&v34 + 1) = v13;
    ANECProcedureInfo::~ANECProcedureInfo((char **)&__p);
  }
  CFRelease(v7);
  *(_OWORD *)a3 = v34;
  *(void *)(a3 + 16) = v35;
  long long v34 = 0uLL;
  *(_OWORD *)(a3 + 24) = v36;
  *(void *)(a3 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v37;
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  *(_OWORD *)(a3 + 48) = v38;
  *(void *)(a3 + 64) = v39;
  unint64_t v35 = 0;
  long long v38 = 0uLL;
  uint64_t v39 = 0;
LABEL_31:
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  std::string __p = &v34;
  std::vector<ANECProcedureInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_21136163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  ANECProcedureInfo::~ANECProcedureInfo(&__p);
  std::string __p = &a11;
  std::vector<ANECProcedureInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  ANECPrepareInfo::~ANECPrepareInfo((void **)(v19 - 176));
  _Unwind_Resume(a1);
}

uint64_t ANECGetAdditionalWeightFileName@<X0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = (size_t)a1[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a2, v3 + 23);
  if (*(char *)(result + 23) >= 0) {
    CFTypeID v5 = (void *)result;
  }
  else {
    CFTypeID v5 = *(void **)result;
  }
  if (v3)
  {
    if (*((char *)a1 + 23) >= 0) {
      BOOL v6 = a1;
    }
    else {
      BOOL v6 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, ".additional_weights.bin");
  return result;
}

float ANECDescToUnitInfo<ANECNeuronLayerDesc,ZinIrNeuronUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 6;
  *(_DWORD *)(a4 + 68) = a5;
  if (!CFStringToZinIrNeuronType(*(void *)a1, (int *)(a4 + 80)))
  {
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v11 = 0;
    if (ZinGetString(*(CFStringRef *)a1, (uint64_t)v10))
    {
      unint64_t v9 = (const char *)v10;
      if (v11 < 0) {
        unint64_t v9 = (const char *)v10[0];
      }
      ZinAssertImpl("Could not convert neuron type \"%s\" to ZinIrNeuronType.", v9);
    }
    ZinAssertImpl("Could not retrieve neuron type from neuron unit");
  }
  ZinF16CheckInBounds(*(float *)(a1 + 8));
  ZinF16CheckInBounds(*(float *)(a1 + 12));
  ZinF16CheckInBounds(*(float *)(a1 + 16));
  ZinF16CheckInBounds(*(float *)(a1 + 20));
  ZinF16CheckInBounds(*(float *)(a1 + 24));
  ZinF16CheckInBounds(*(float *)(a1 + 28));
  ZinF16CheckInBounds(*(float *)(a1 + 32));
  *(void *)&long long v7 = vrev64q_s32(*(int32x4_t *)(a1 + 8)).u64[0];
  *((void *)&v7 + 1) = *(void *)(a1 + 16);
  *(_OWORD *)(a4 + 84) = v7;
  *(void *)(a4 + 10std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(a1 + 24);
  float result = *(float *)(a1 + 32);
  *(float *)(a4 + 108) = result;
  return result;
}

void sub_21136185C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t ANECDescToUnitInfo<ANECSpaceToChannelLayerDesc,ZinIrSpaceToChannelUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  a4[4].i32[0] = 36;
  a4[8].i32[1] = a5;
  a4[11].i32[0] = a1[1].i64[0];
  int32x2_t result = vmovn_s64(*a1);
  a4[10] = result;
  return result;
}

void *ANECDescToUnitInfo<ANECInstanceNormLayerDesc,ZinIrInstanceNormUnitInfo>(void *result, uint64_t a2, uint64_t a3, _DWORD *a4, int a5)
{
  a4[8] = 25;
  a4[17] = a5;
  a4[30] = *((_DWORD *)result + 12);
  if (*result)
  {
    CFTypeID v5 = result;
    BOOL v6 = a4 + 20;
    unint64_t v7 = 1;
    do
    {
      int v14 = 0;
      if ((CFStringToZinIrDimension(v5[v7], &v14) & 1) == 0)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        if (ZinGetString((CFStringRef)v5[v7], (uint64_t)&v11))
        {
          uint64_t v10 = (const char *)&v11;
          if (v13 < 0) {
            uint64_t v10 = v11;
          }
          ZinAssertImpl("Error: Invalid dimension:%s setting in the instance norm layer descriptor", v10);
        }
        ZinAssertImpl("Error: cannot extract the instance_norm dimension string from the InstanceNorm Layer Descriptor");
      }
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v6, &v14))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        if (ZinGetString((CFStringRef)v5[v7], (uint64_t)&v11))
        {
          unint64_t v9 = (const char *)&v11;
          if (v13 < 0) {
            unint64_t v9 = v11;
          }
          ZinAssertImpl("Error: duplicated dimension setting, %s, in InstanceNorm", v9);
        }
        ZinAssertImpl("Error: cannot extract the instance_norm dimension string from the InstanceNorm Layer Descriptor");
      }
      int32x2_t result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>((uint64_t)v6, &v14, &v14);
    }
    while (*v5 > v7++);
  }
  return result;
}

void sub_2113619D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t ANECDescToUnitInfo<ANECChannelToSpaceLayerDesc,ZinIrChannelToSpaceUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  a4[4].i32[0] = 37;
  a4[8].i32[1] = a5;
  a4[11].i32[0] = a1[1].i64[0];
  int32x2_t result = vmovn_s64(*a1);
  a4[10] = result;
  return result;
}

uint64_t ANECDescToUnitInfo<ANECDynamicSliceLayerDesc,ZinIrDynamicSliceUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(_DWORD *)(a4 + 32) = 47;
  *(_DWORD *)(a4 + 68) = a5;
  ANECTextureInfoToZin(a1 + 128, *(void *)a1, (void **)(a4 + 104));
  ANECTextureInfoToZin(a1 + 8, *(void *)a1, a4 + 80);
  unint64_t v7 = (char **)(a4 + 184);
  *(void *)(a4 + 192) = *(void *)(a4 + 184);
  BOOL v8 = (char **)(a4 + 160);
  *(void *)(a4 + 168) = *(void *)(a4 + 160);
  if (*(void *)a1)
  {
    unint64_t v9 = 0;
    do
    {
      int v46 = 0;
      uint64_t v10 = a1 + 16 * v9;
      if (!CFStringToZinIrCoordinate(*(void *)(v10 + 248), &v46)) {
        ZinAssertImpl("Invalid slice size information");
      }
      int v11 = v46;
      uint64_t v12 = *(int *)(v10 + 256);
      unint64_t v13 = *(void *)(a4 + 168);
      unint64_t v14 = *(void *)(a4 + 176);
      if (v13 >= v14)
      {
        uint64_t v16 = (uint64_t)(v13 - (void)*v8) >> 4;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v14 - (void)*v8;
        if (v18 >> 3 > v17) {
          unint64_t v17 = v18 >> 3;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19) {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>(a4 + 176, v19);
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = &v20[16 * v16];
        *(_DWORD *)uint64_t v21 = v11;
        *((_DWORD *)v21 + 1) = 0;
        *((void *)v21 + 1) = v12;
        uint64_t v23 = *(char **)(a4 + 160);
        uint64_t v22 = *(char **)(a4 + 168);
        uint64_t v24 = v21;
        if (v22 != v23)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
            v24 -= 16;
            v22 -= 16;
          }
          while (v22 != v23);
          uint64_t v22 = *v8;
        }
        uint64_t v15 = v21 + 16;
        *(void *)(a4 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v24;
        *(void *)(a4 + 168) = v21 + 16;
        *(void *)(a4 + 176) = &v20[16 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v13 = v46;
        *(_DWORD *)(v13 + 4) = 0;
        uint64_t v15 = (char *)(v13 + 16);
        *(void *)(v13 + 8) = v12;
      }
      *(void *)(a4 + 168) = v15;
      int v45 = 0;
      if (!CFStringToZinIrCoordinate(*(void *)(a1 + 8 * v9 + 208), &v45)) {
        ZinAssertImpl("Invalid offset order information");
      }
      int v25 = v45;
      unint64_t v26 = *(void *)(a4 + 192);
      unint64_t v27 = *(void *)(a4 + 200);
      if (v26 >= v27)
      {
        uint64_t v29 = (uint64_t)(v26 - (void)*v7) >> 4;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v27 - (void)*v7;
        if (v31 >> 3 > v30) {
          unint64_t v30 = v31 >> 3;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32) {
          char v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>(a4 + 200, v32);
        }
        else {
          char v33 = 0;
        }
        long long v34 = &v33[16 * v29];
        *(_DWORD *)long long v34 = v25;
        *((_DWORD *)v34 + 1) = 0;
        *((void *)v34 + 1) = v9;
        long long v36 = *(char **)(a4 + 184);
        unint64_t v35 = *(char **)(a4 + 192);
        uint64_t v37 = v34;
        if (v35 != v36)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
            v37 -= 16;
            v35 -= 16;
          }
          while (v35 != v36);
          unint64_t v35 = *v7;
        }
        uint64_t v28 = v34 + 16;
        *(void *)(a4 + 184) = v37;
        *(void *)(a4 + 192) = v34 + 16;
        *(void *)(a4 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &v33[16 * v32];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v26 = v45;
        *(_DWORD *)(v26 + 4) = 0;
        uint64_t v28 = (char *)(v26 + 16);
        *(void *)(v26 + 8) = v9;
      }
      *(void *)(a4 + 192) = v28;
      ++v9;
    }
    while (v9 < *(void *)a1);
  }
  _S0 = *(_DWORD *)(a1 + 328);
  __asm { FCVT            H0, S0 }
  *(_WORD *)(a4 + 152) = _S0;
  return ZinLayerValidationUtils::ValidateBackgroundPadding(a4, a5);
}

uint64_t ANECDescToUnitInfo<ANECInputViewLayerDesc,ZinIrInputViewUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 17;
  *(_DWORD *)(a4 + 68) = a5;
  *(void *)(a4 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(void *)a1;
  *(_DWORD *)(a4 + 88) = *(_DWORD *)(a1 + 8);
  uint64_t result = CFStringToZinIrDimension(*(void *)(a1 + 16), a4 + 92);
  if ((result & 1) == 0)
  {
    v8[0] = 0;
    v8[1] = 0;
    uint64_t v9 = 0;
    if (ZinGetString(*(CFStringRef *)(a1 + 16), (uint64_t)v8))
    {
      unint64_t v7 = (const char *)v8;
      if (v9 < 0) {
        unint64_t v7 = (const char *)v8[0];
      }
      ZinAssertImpl("Error: cannot parse InputView dimension \"%s\"", v7);
    }
    ZinAssertImpl("Error: cannot extract the view dimension string from the InputView Layer Descriptor");
  }
  return result;
}

void sub_211361D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t ANECDescToUnitInfo<ANECPixelShuffleLayerDesc,ZinIrPixelShuffleUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  int32x2_t result = vmovn_s64(*a1);
  a4[10] = result;
  a4[11].i32[0] = a1[1].i64[0];
  a4[8].i32[1] = a5;
  return result;
}

BOOL ANECDescToUnitInfo<ANECElementWiseLayerDesc,ZinIrEWUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5)
{
  a4[8] = 4;
  a4[17] = a5;
  BOOL result = CFStringToZinIrEWType(*(void *)(a1 + 8), a4 + 20);
  if (!result) {
    ZinAssertImpl("Unknown element wise type.");
  }
  return result;
}

BOOL ANECDescToUnitInfo<ANECScaledElementWiseLayerDesc,ZinIrScaledEWUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 5;
  *(_DWORD *)(a4 + 68) = a5;
  *(void *)(a4 + 84) = *(void *)a1;
  *(_DWORD *)(a4 + 92) = *(_DWORD *)(a1 + 8);
  *(_WORD *)(a4 + 96) = *(_WORD *)(a1 + 12);
  BOOL result = CFStringToZinIrScaledEWType(*(void *)(a1 + 16), (int *)(a4 + 80));
  if (!result) {
    ZinAssertImpl("Unknown scaled element wise type.");
  }
  return result;
}

void *ANECDescToUnitInfo<ANECTensorDesc,ZinIrBroadcastUnitInfo>(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a3 != 1) {
    ZinAssertImpl("One tensor descriptor is needed for broadcast layer");
  }
  *(_DWORD *)(a4 + 32) = 19;
  *(_DWORD *)(a4 + 68) = a5;
  uint64_t v7 = a4 + 80;
  BOOL result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::clear((void *)(a4 + 80));
  uint64_t v9 = a2[1];
  uint64_t v10 = a1[1];
  int v19 = 0;
  if (v9 != v10)
  {
    uint64_t v20 = &v19;
    BOOL result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v10;
  }
  uint64_t v11 = a2[5];
  uint64_t v12 = a1[5];
  int v19 = 1;
  if (v11 != v12)
  {
    uint64_t v20 = &v19;
    BOOL result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v12;
  }
  uint64_t v13 = a2[2];
  uint64_t v14 = a1[2];
  int v19 = 2;
  if (v13 != v14)
  {
    uint64_t v20 = &v19;
    BOOL result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v14;
  }
  uint64_t v15 = a2[3];
  uint64_t v16 = a1[3];
  int v19 = 3;
  if (v15 != v16)
  {
    uint64_t v20 = &v19;
    BOOL result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v16;
  }
  uint64_t v17 = a2[4];
  uint64_t v18 = a1[4];
  int v19 = 4;
  if (v17 != v18)
  {
    uint64_t v20 = &v19;
    BOOL result = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v7, &v19, (uint64_t)&std::piecewise_construct, &v20);
    result[3] = v18;
  }
  return result;
}

__int16 ANECDescToUnitInfo<ANECCropResizeLayerDesc,ZinIrCropResizeUnitInfo>@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>)
{
  *(_DWORD *)(a4 + 32) = 46;
  *(_OWORD *)(a4 + 184) = *(_OWORD *)(a1 + 156);
  CFStringToZinIrCropResizeBoxMode(*(const __CFString **)a1, (int *)(a4 + 156));
  ANECTextureInfoToZin(a1 + 8, 2, (void **)(a4 + 160));
  ANECTextureInfoToZin(a1 + 40, 2, (void **)(a4 + 128));
  ANECTextureInfoToZin(a1 + 72, 2, (void **)(a4 + 104));
  ANECTextureInfoToZin(a1 + 104, 2, a4 + 80);
  _S0 = *(_DWORD *)(a1 + 152);
  __asm { FCVT            H0, S0 }
  *(_WORD *)(a4 + 152) = result;
  *(_DWORD *)(a4 + 68) = a5;
  return result;
}

int32x2_t ANECDescToUnitInfo<ANECBatchToSpaceLayerDesc,ZinIrBatchToSpaceUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  a4[4].i32[0] = 35;
  a4[8].i32[1] = a5;
  int32x2_t result = vmovn_s64(*a1);
  a4[10] = result;
  a4[11].i32[0] = a1[1].i64[0];
  return result;
}

int32x2_t ANECDescToUnitInfo<ANECSpaceToBatchLayerDesc,ZinIrSpaceToBatchUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  a4[4].i32[0] = 34;
  a4[8].i32[1] = a5;
  int32x2_t result = vmovn_s64(*a1);
  a4[10] = result;
  a4[11].i32[0] = a1[1].i64[0];
  return result;
}

unint64_t *ANECDescToUnitInfo<ANECLayerNormLayerDesc,ZinIrLayerNormUnitInfo>(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 28;
  *(_DWORD *)(a4 + 68) = a5;
  *(void *)(a4 + 128) = result[1];
  if (*result)
  {
    CFTypeID v5 = result;
    uint64_t v6 = a4 + 80;
    uint64_t v7 = 2;
    do
    {
      int v12 = 0;
      if ((CFStringToZinIrDimension(v5[v7], &v12) & 1) == 0)
      {
        v10[0] = 0;
        v10[1] = 0;
        uint64_t v11 = 0;
        if (ZinGetString((CFStringRef)v5[v7], (uint64_t)v10))
        {
          uint64_t v9 = (const char *)v10;
          if (v11 < 0) {
            uint64_t v9 = (const char *)v10[0];
          }
          ZinAssertImpl("Invalid LayerNorm dimension: %s", v9);
        }
        ZinAssertImpl("Invalid LayerNorm dimension");
      }
      int32x2_t result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>(v6, &v12, &v12);
      unint64_t v8 = v7++ - 1;
    }
    while (*v5 > v8);
  }
  return result;
}

void sub_21136219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ANECDescToUnitInfo<ANECRingBufferWriterLayerDesc,ZinIrRingBufferUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a4 + 32) = 61;
  *(_DWORD *)(a4 + 68) = a5;
  long long v5 = *(_OWORD *)(a1 + 176);
  void v40[2] = *(_OWORD *)(a1 + 160);
  v41[0] = v5;
  v41[1] = *(_OWORD *)(a1 + 192);
  uint64_t v42 = *(void *)(a1 + 208);
  long long v6 = *(_OWORD *)(a1 + 112);
  void v39[3] = *(_OWORD *)(a1 + 96);
  v39[4] = v6;
  long long v7 = *(_OWORD *)(a1 + 144);
  v40[0] = *(_OWORD *)(a1 + 128);
  v40[1] = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  void v38[2] = *(_OWORD *)(a1 + 32);
  v39[0] = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  v39[1] = *(_OWORD *)(a1 + 64);
  void v39[2] = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  v38[0] = *(_OWORD *)a1;
  v38[1] = v10;
  uint64_t v11 = *(void *)&v38[0];
  int v12 = (uint64_t *)MEMORY[0x263EFFB40];
  if (*(void *)&v38[0])
  {
    uint64_t v13 = a4 + 120;
    uint64_t v14 = *MEMORY[0x263EFFB40];
    uint64_t v15 = (void *)v39 + 1;
    uint64_t v16 = (const __CFString **)v38 + 1;
    do
    {
      LODWORD(v46) = 0;
      CFStringRef v17 = *v16;
      if ((CFStringToZinIrDimension(*v16, &v46) & 1) == 0)
      {
        memset(&v44, 0, sizeof(v44));
        if (ZinGetString(v17, (uint64_t)&v44))
        {
          long long v34 = &v44;
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
          }
          ZinAssertImpl("Invalid dimension: %s", (const char *)v34);
        }
        ZinAssertImpl("Failed to get the axis name");
      }
      uint64_t v18 = *(v15 - 1);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v13, (int *)&v46, (uint64_t)&std::piecewise_construct, &v44)[3] = v18;
      LOBYTE(v18) = *v15 == v14;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      *((unsigned char *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v13, (int *)&v46, (uint64_t)&std::piecewise_construct, &v44)+ 32) = v18;
      v15 += 2;
      ++v16;
      --v11;
    }
    while (v11);
  }
  uint64_t v19 = *(void *)&v40[0];
  if (*(uint64_t *)&v40[0] >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = a4 + 80;
    uint64_t v37 = *v12;
    do
    {
      int v43 = 0;
      CFStringRef v22 = (const __CFString *)*((void *)v40 + v20 + 1);
      if ((CFStringToZinIrDimension(v22, &v43) & 1) == 0)
      {
        memset(&v44, 0, sizeof(v44));
        if (ZinGetString(v22, (uint64_t)&v44))
        {
          unint64_t v35 = &v44;
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v35 = (std::string *)v44.__r_.__value_.__r.__words[0];
          }
          ZinAssertImpl("Invalid dimension: %s", (const char *)v35);
        }
        ZinAssertImpl("Invalid dimension");
      }
      std::to_string(&v44, v20);
      uint64_t v23 = std::string::insert(&v44, 0, "live_param", 0xAuLL);
      std::string::size_type v25 = v23->__r_.__value_.__r.__words[0];
      std::string::size_type size = v23->__r_.__value_.__l.__size_;
      int v45 = &v43;
      *(void *)&long long v46 = size;
      *(void *)((char *)&v46 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
      char v26 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      unint64_t v27 = std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v21, &v43, (uint64_t)&std::piecewise_construct, &v45);
      uint64_t v28 = v27;
      if (*((char *)v27 + 47) < 0) {
        operator delete((void *)v27[3]);
      }
      uint64_t v29 = v46;
      v28[3] = v25;
      v28[4] = v29;
      *(void *)((char *)v28 + 39) = *(void *)((char *)&v46 + 7);
      *((unsigned char *)v28 + 47) = v26;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      BOOL v30 = *((void *)v41 + v20) == v37;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
      *((unsigned char *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v21, &v43, (uint64_t)&std::piecewise_construct, &v44)+ 48) = v30;
      ++v20;
    }
    while (v19 != v20);
  }
  GetAllZinIrDimensions(&v44.__r_.__value_.__l.__data_);
  std::string::size_type v32 = v44.__r_.__value_.__l.__size_;
  uint64_t v31 = (int *)v44.__r_.__value_.__r.__words[0];
  if (v44.__r_.__value_.__r.__words[0] != v44.__r_.__value_.__l.__size_)
  {
    char v33 = (void *)(a4 + 120);
    do
    {
      if (!std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v33, v31)&& !std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((void *)(a4 + 80), v31))
      {
        LODWORD(v46) = *v31;
        *((void *)&v46 + 1) = 0;
        char v47 = 0;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,ZinIrStaticOffsetPerAxisInfo> const&>((uint64_t)v33, (int *)&v46, (uint64_t)&v46);
      }
      ++v31;
    }
    while (v31 != (int *)v32);
    uint64_t v31 = (int *)v44.__r_.__value_.__r.__words[0];
  }
  if (v31)
  {
    v44.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
    operator delete(v31);
  }
}

void sub_211362560(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)(v1 - 168);
  if (v3)
  {
    *(void *)(v1 - 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__int16 ANECDescToUnitInfo<ANECPadLayerDesc,ZinIrPadUnitInfo>@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>)
{
  *(_DWORD *)(a4 + 32) = 44;
  *(_DWORD *)(a4 + 68) = a5;
  if (*(void *)a1)
  {
    unint64_t v7 = 0;
    uint64_t v41 = (_DWORD *)(a4 + 160);
    uint64_t v42 = (_DWORD *)(a4 + 156);
    uint64_t v39 = (_DWORD *)(a4 + 168);
    unint64_t v40 = (_DWORD *)(a4 + 164);
    uint64_t v37 = (_DWORD *)(a4 + 176);
    long long v38 = (_DWORD *)(a4 + 172);
    unint64_t v35 = (_DWORD *)(a4 + 184);
    long long v36 = (_DWORD *)(a4 + 180);
    long long v8 = (char **)(a4 + 200);
    uint64_t v43 = a4 + 216;
    do
    {
      uint64_t v46 = 0;
      uint64_t v9 = a1 + 24 * v7;
      CFStringToZinIrDimension(*(void *)(v9 + 8), (char *)&v46 + 4);
      char v10 = CFStringToZinIrPaddingMode(*(const __CFString **)(v9 + 16), &v46);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v45 = 0;
      ZinGetString(*(CFStringRef *)(v9 + 16), (uint64_t)__p);
      if ((v10 & 1) == 0)
      {
        long long v34 = __p;
        if (v45 < 0) {
          long long v34 = (void **)__p[0];
        }
        ZinAssertImpl("Unknown padding mode: %s.", (const char *)v34);
      }
      uint64_t v11 = HIDWORD(v46);
      int v12 = (_DWORD *)(a4 + 188);
      uint64_t v13 = (_DWORD *)(a4 + 192);
      switch(HIDWORD(v46))
      {
        case 0:
          goto LABEL_9;
        case 1:
          uint64_t v13 = v37;
          int v12 = v38;
          goto LABEL_9;
        case 2:
          uint64_t v13 = v35;
          int v12 = v36;
          goto LABEL_9;
        case 3:
          uint64_t v13 = v39;
          int v12 = v40;
          goto LABEL_9;
        case 4:
          uint64_t v13 = v41;
          int v12 = v42;
LABEL_9:
          uint64_t v14 = a1 + 24 * v7;
          *int v12 = *(_DWORD *)(v14 + 24);
          *uint64_t v13 = *(_DWORD *)(v14 + 28);
          break;
        default:
          break;
      }
      uint64_t v15 = v46;
      CFStringRef v17 = *(unint64_t **)(a4 + 208);
      unint64_t v16 = *(void *)(a4 + 216);
      if ((unint64_t)v17 >= v16)
      {
        uint64_t v19 = ((char *)v17 - *v8) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - (void)*v8;
        uint64_t v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v43, v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = &v23[8 * v19];
        *(void *)uint64_t v24 = v11 | (v15 << 32);
        uint64_t v18 = v24 + 8;
        char v26 = *(char **)(a4 + 200);
        std::string::size_type v25 = *(char **)(a4 + 208);
        if (v25 != v26)
        {
          do
          {
            uint64_t v27 = *((void *)v25 - 1);
            v25 -= 8;
            *((void *)v24 - 1) = v27;
            v24 -= 8;
          }
          while (v25 != v26);
          std::string::size_type v25 = *v8;
        }
        *(void *)(a4 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v24;
        *(void *)(a4 + 208) = v18;
        *(void *)(a4 + 216) = &v23[8 * v22];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *CFStringRef v17 = v11 | ((unint64_t)v46 << 32);
        uint64_t v18 = v17 + 1;
      }
      *(void *)(a4 + 208) = v18;
      if (SHIBYTE(v45) < 0) {
        operator delete(__p[0]);
      }
      ++v7;
    }
    while (v7 < *(void *)a1);
  }
  _S0 = *(_DWORD *)(a1 + 128);
  __asm { FCVT            H0, S0 }
  *(_WORD *)(a4 + 224) = result;
  return result;
}

void sub_21136281C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ANECDescToUnitInfo<ANECTileLayerDesc,ZinIrTileUnitInfo>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 45;
  *(_DWORD *)(a4 + 68) = a5;
  uint64_t v6 = *a1;
  uint64_t v7 = a4 + 80;
  int v13 = 0;
  uint64_t v14 = &v13;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(a4 + 80, &v13, (uint64_t)&std::piecewise_construct, &v14)+ 5) = v6;
  uint64_t v8 = a1[4];
  int v13 = 1;
  uint64_t v14 = &v13;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, &v14)+ 5) = v8;
  uint64_t v9 = a1[1];
  int v13 = 2;
  uint64_t v14 = &v13;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, &v14)+ 5) = v9;
  uint64_t v10 = a1[2];
  int v13 = 3;
  uint64_t v14 = &v13;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, &v14)+ 5) = v10;
  uint64_t v11 = a1[3];
  int v13 = 4;
  uint64_t v14 = &v13;
  __int16 result = std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(v7, &v13, (uint64_t)&std::piecewise_construct, &v14);
  *((_DWORD *)result + 5) = v11;
  return result;
}

uint64_t ANECDescToUnitInfo<ANECReductionLayerDesc,ZinIrReductionUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 20;
  *(_DWORD *)(a4 + 68) = a5;
  *(_DWORD *)(a4 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = CFStringToZinIrReductionType((const __CFString **)a1);
  uint64_t result = CFStringToZinReductionPostOp((CFStringRef *)(a1 + 8));
  *(_DWORD *)(a4 + 84) = result;
  *(void *)(a4 + 88) = *(void *)(a1 + 16);
  if (*(void *)(a1 + 24))
  {
    unint64_t v8 = 0;
    do
    {
      unsigned int v12 = 0;
      uint64_t result = CFStringToZinIrDimension(*(void *)(a1 + 32 + 8 * v8), &v12);
      if ((result & 1) == 0)
      {
        v10[0] = 0;
        v10[1] = 0;
        uint64_t v11 = 0;
        if (ZinGetString(*(CFStringRef *)(a1 + 8 * v8 + 32), (uint64_t)v10))
        {
          uint64_t v9 = (const char *)v10;
          if (v11 < 0) {
            uint64_t v9 = (const char *)v10[0];
          }
          ZinAssertImpl("Unknown dimension for reduction: %s", v9);
        }
        ZinAssertImpl("Invalid reduction dimension");
      }
      if (v12 >= 5) {
        std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
      }
      *(void *)(a4 + 96) |= 1 << v12;
      ++v8;
    }
    while (v8 < *(void *)(a1 + 24));
  }
  return result;
}

void sub_211362A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ANECDescToUnitInfo<ANECGatherLayerDesc,ZinIrGatherUnitInfo>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 39;
  *(_DWORD *)(a4 + 68) = a5;
  if (*a1)
  {
    unint64_t v7 = 0;
    unint64_t v8 = (void **)(a4 + 160);
    uint64_t v9 = a4 + 176;
    do
    {
      int v27 = 0;
      uint64_t v10 = &a1[v7];
      unint64_t v12 = v10[1];
      uint64_t v11 = (CFStringRef *)(v10 + 1);
      if ((CFStringToZinIrDimension(v12, &v27) & 1) == 0)
      {
        v25[0] = 0;
        v25[1] = 0;
        uint64_t v26 = 0;
        if (ZinGetString(*v11, (uint64_t)v25))
        {
          uint64_t v24 = (const char *)v25;
          if (v26 < 0) {
            uint64_t v24 = (const char *)v25[0];
          }
          ZinAssertImpl("Unknown dimension for gather: %s", v24);
        }
        ZinAssertImpl("Invalid gather dimension");
      }
      uint64_t v14 = *(char **)(a4 + 168);
      unint64_t v13 = *(void *)(a4 + 176);
      if ((unint64_t)v14 >= v13)
      {
        unint64_t v16 = (char *)*v8;
        uint64_t v17 = (v14 - (unsigned char *)*v8) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(v9, v20);
          unint64_t v16 = *(char **)(a4 + 160);
          uint64_t v14 = *(char **)(a4 + 168);
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = &v21[4 * v17];
        *(_DWORD *)unint64_t v22 = v27;
        uint64_t v15 = v22 + 4;
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        *(void *)(a4 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v22;
        *(void *)(a4 + 168) = v15;
        *(void *)(a4 + 176) = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v14 = v27;
        uint64_t v15 = v14 + 4;
      }
      *(void *)(a4 + 168) = v15;
      ++v7;
    }
    while (v7 < *a1);
  }
}

void sub_211362C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANECDescToUnitInfo<ANECTopKLayerDesc,ZinIrTopKUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 51;
  *(_DWORD *)(a4 + 68) = a5;
  *(_DWORD *)(a4 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = CFStringToZinIrTopKType(*(void *)a1);
  *(void *)(a4 + 88) = *(void *)(a1 + 8);
  if ((CFStringToZinIrDimension(*(void *)(a1 + 16), a4 + 96) & 1) == 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (ZinGetString(*(CFStringRef *)(a1 + 16), (uint64_t)&v14))
    {
      unint64_t v13 = (const char *)&v14;
      if (v16 < 0) {
        unint64_t v13 = v14;
      }
      ZinAssertImpl("Unknown sort_dimension for TopK: %s", v13);
    }
    ZinAssertImpl("Invalid TopK sort_dimension");
  }
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = (_DWORD *)(a4 + 100);
  if (v7)
  {
    if ((CFStringToZinIrDimension(v7, v8) & 1) == 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      if (ZinGetString(*(CFStringRef *)(a1 + 24), (uint64_t)&v14))
      {
        uint64_t v9 = (const char *)&v14;
        if (v16 < 0) {
          uint64_t v9 = v14;
        }
        ZinAssertImpl("Unknown vector_dimension for TopK: %s", v9);
      }
      ZinAssertImpl("Invalid TopK vector_dimension");
    }
  }
  else
  {
    *unint64_t v8 = 5;
  }
  if (*(void *)(a1 + 32))
  {
    unint64_t v10 = 0;
    uint64_t v11 = (unint64_t *)(a1 + 40);
    do
    {
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a4 + 104), v11, (uint64_t *)v11);
      ++v10;
      ++v11;
    }
    while (*(void *)(a1 + 32) > v10);
  }
  uint64_t result = CFBooleanGetValue(*(CFBooleanRef *)(a1 + 552));
  *(unsigned char *)(a4 + 128) = result != 0;
  return result;
}

void sub_211362DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t ANECDescToUnitInfo<ANECPixelUnshuffleLayerDesc,ZinIrPixelUnshuffleUnitInfo>(int64x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int32 a5)
{
  a4[4].i32[0] = 32;
  a4[8].i32[1] = a5;
  int32x2_t result = vmovn_s64(*a1);
  a4[10] = result;
  a4[11].i32[0] = a1[1].i64[0];
  return result;
}

uint64_t ANECDescToUnitInfo<ANECMatrixMultLayerDesc,ZinIrMatrixMultUnitInfo>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a4 + 32) = 18;
  *(_DWORD *)(a4 + 68) = a5;
  *(void *)(a4 + 72) = *(void *)(result + 8);
  *(unsigned char *)(a4 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)result;
  return result;
}

uint64_t ANECDescToUnitInfo<ANECResampleLayerDesc,ZinIrResampleUnitInfo>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(_DWORD *)(a4 + 32) = 43;
  *(_DWORD *)(a4 + 68) = a5;
  ANECTextureInfoToZin(a1 + 32, 2, (void **)(a4 + 104));
  ANECTextureInfoToZin(a1 + 64, 2, a4 + 80);
  ANECTextureInfoToZin(a1, 2, (void **)(a4 + 128));
  ANECTextureInfoToZin(a1 + 112, 2, (void **)(a4 + 160));
  *(_DWORD *)(a4 + 184) = 0;
  _S0 = *(_DWORD *)(a1 + 144);
  __asm { FCVT            H0, S0 }
  *(_WORD *)(a4 + 152) = _S0;

  return ZinLayerValidationUtils::ValidateBackgroundPadding(a4, a5);
}