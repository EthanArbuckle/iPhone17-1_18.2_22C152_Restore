void *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_26C3870A0;
  v2 = a1 + 3;
  v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      return a1;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26C3870A0;
  v2 = a1 + 3;
  v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    v4 = (std::__shared_weak_count *)a1[2];
    if (!v4)
    {
LABEL_9:
      JUMPOUT(0x21667D3C0);
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  goto LABEL_9;
}

void *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::__clone(void *a1)
{
  v2 = operator new(0x38uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *v2 = &unk_26C3870A0;
  v2[1] = v4;
  v2[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = (void *)a1[6];
  if (v5)
  {
    if (v5 == a1 + 3)
    {
      v2[6] = v2 + 3;
      (*(void (**)(void *))(*v5 + 24))(v5);
    }
    else
    {
      v2[6] = (*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
    return v2;
  }
  else
  {
    v2[6] = 0;
    return v2;
  }
}

void *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v4 = result[1];
  uint64_t v3 = result[2];
  *a2 = &unk_26C3870A0;
  a2[1] = v4;
  a2[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = (void *)result[6];
  if (v5)
  {
    if (v5 == result + 3)
    {
      a2[6] = a2 + 3;
      v6 = *(uint64_t (**)(void))(*(void *)result[6] + 24);
      return (void *)v6();
    }
    else
    {
      result = (void *)(*(uint64_t (**)(void))(*v5 + 16))(result[6]);
      a2[6] = result;
    }
  }
  else
  {
    a2[6] = 0;
  }
  return result;
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 24;
  uint64_t v3 = (char *)*((void *)__p + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_5:
    v5 = __p;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  v5 = __p;

LABEL_7:
  operator delete(v5);
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    uint64_t v3 = *(std::promise<void> **)(a1 + 8);
    std::promise<void>::set_value(v3);
  }
  else
  {
    uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::target(v4);
  }
}

uint64_t std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    v6 = *(void **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v34 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v34 = 1;
      }
      if (!(v34 >> 61))
      {
        unint64_t v35 = v34 >> 2;
        uint64_t v36 = 8 * v34;
        v37 = (char *)operator new(8 * v34);
        v38 = &v37[8 * v35];
        v39 = &v37[v36];
        int64_t v41 = v5 - v7;
        BOOL v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            v76 = &v37[8 * v35];
            v43 = v76;
            if ((unint64_t)(v76 - v7) >= 0x20)
            {
              uint64_t v77 = (v42 >> 3) + 1;
              uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v43 = &v38[v78];
              v7 += v78;
              v79 = (long long *)(v6 + 3);
              v80 = v76 + 16;
              uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                _OWORD *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            v43 = &v37[8 * v35];
          }
          do
          {
            uint64_t v83 = *(void *)v7;
            v7 += 8;
            *(void *)v43 = v83;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_76;
      }
LABEL_86:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v92 = operator new(0xFF0uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v92);
      return;
    }
    v92 = operator new(0xFF0uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v92);
    v44 = *(void **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v44 + 1);
    uint64_t v8 = *v44;
    *(void *)(a1 + 8) = v44 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v45 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v45 = 1;
      }
      if (!(v45 >> 61))
      {
        unint64_t v46 = v45 >> 2;
        uint64_t v47 = 8 * v45;
        v37 = (char *)operator new(8 * v45);
        v38 = &v37[8 * v46];
        v39 = &v37[v47];
        int64_t v48 = v5 - v7;
        BOOL v40 = v5 == v7;
        v5 = v38;
        if (!v40)
        {
          v5 = &v38[v48 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v49 = v48 - 8;
          if ((unint64_t)(v48 - 8) >= 0x38)
          {
            v84 = &v37[8 * v46];
            v50 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              uint64_t v85 = (v49 >> 3) + 1;
              uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v50 = &v38[v86];
              v7 += v86;
              v87 = (long long *)(v44 + 3);
              v88 = v84 + 16;
              uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                _OWORD *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            v50 = &v37[8 * v46];
          }
          do
          {
            uint64_t v91 = *(void *)v7;
            v7 += 8;
            *(void *)v50 = v91;
            v50 += 8;
          }
          while (v50 != v5);
        }
LABEL_76:
        *(void *)a1 = v37;
        *(void *)(a1 + 8) = v38;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v39;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_86;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_86;
  }
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v21];
  v27 = &v25[8 * v24];
  v28 = operator new(0xFF0uLL);
  v29 = v28;
  if (v21 != v24) {
    goto LABEL_23;
  }
  if (v20 >= 1)
  {
    unint64_t v30 = v21 + 2;
    if (v21 >= -1) {
      unint64_t v30 = v21 + 1;
    }
    v26 -= 8 * (v30 >> 1);
LABEL_23:
    *(void *)v26 = v28;
    v31 = v26 + 8;
    if (v18 != v19) {
      goto LABEL_51;
    }
    goto LABEL_24;
  }
  if (v18 == v19) {
    unint64_t v51 = 1;
  }
  else {
    unint64_t v51 = v20 >> 2;
  }
  if (v51 >> 61) {
    goto LABEL_86;
  }
  uint64_t v52 = 8 * v51;
  v53 = (char *)operator new(8 * v51);
  v26 = &v53[8 * (v51 >> 2)];
  v27 = &v53[v52];
  operator delete(v25);
  uint64_t v54 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 16);
  v25 = v53;
  *(void *)v26 = v29;
  v31 = v26 + 8;
  if (v18 != v54)
  {
    while (1)
    {
LABEL_51:
      if (v26 == v25)
      {
        if (v31 >= v27)
        {
          unint64_t v61 = (v27 - v26) >> 2;
          if (v27 == v26) {
            unint64_t v61 = 1;
          }
          if (v61 >> 61) {
            goto LABEL_86;
          }
          unint64_t v62 = (v61 + 3) >> 2;
          uint64_t v63 = 8 * v61;
          v64 = (char *)operator new(8 * v61);
          v25 = v64;
          v55 = &v64[8 * v62];
          int64_t v65 = v31 - v26;
          BOOL v40 = v31 == v26;
          v31 = v55;
          if (!v40)
          {
            v31 = &v55[v65 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v66 = v65 - 8;
            v67 = &v64[8 * v62];
            v68 = v26;
            if (v66 < 0x38) {
              goto LABEL_89;
            }
            v67 = &v64[8 * v62];
            v68 = v26;
            if ((unint64_t)(v67 - v26) < 0x20) {
              goto LABEL_89;
            }
            uint64_t v69 = (v66 >> 3) + 1;
            uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v67 = &v55[v70];
            v68 = &v26[v70];
            v71 = (long long *)(v26 + 16);
            v72 = &v64[8 * v62 + 16];
            uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v74 = *v71;
              *((_OWORD *)v72 - 1) = *(v71 - 1);
              *(_OWORD *)v72 = v74;
              v71 += 2;
              v72 += 32;
              v73 -= 4;
            }
            while (v73);
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                uint64_t v75 = *(void *)v68;
                v68 += 8;
                *(void *)v67 = v75;
                v67 += 8;
              }
              while (v67 != v31);
            }
          }
          v27 = &v64[v63];
          operator delete(v26);
        }
        else
        {
          uint64_t v57 = (v27 - v31) >> 3;
          if (v57 >= -1) {
            unint64_t v58 = v57 + 1;
          }
          else {
            unint64_t v58 = v57 + 2;
          }
          v59 = &v31[8 * (v58 >> 1)];
          v55 = &v59[-(v31 - v26)];
          size_t v60 = v31 - v26;
          BOOL v40 = v31 == v26;
          v31 = v59;
          if (!v40) {
            memmove(v55, v26, v60);
          }
          v25 = v26;
        }
      }
      else
      {
        v55 = v26;
      }
      uint64_t v56 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v55 - 1) = v56;
      v32 = v55 - 8;
      v26 = v32;
      if (v18 == *(void *)(a1 + 8)) {
        goto LABEL_25;
      }
    }
  }
LABEL_24:
  v32 = v26;
LABEL_25:
  v33 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v32;
  *(void *)(a1 + 16) = v31;
  *(void *)(a1 + 24) = v27;
  if (v33)
  {
    operator delete(v33);
  }
}

void std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &unk_26C387610;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C387610;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::operator()(uint64_t result)
{
  unsigned __int8 v1 = atomic_load(*(unsigned __int8 **)(result + 8));
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t add = atomic_fetch_add(*(atomic_uint *volatile *)(result + 16), 1u);
    if (add < **(_DWORD **)(result + 24))
    {
      mlir::ParallelDiagnosticHandler::setOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(result + 32), add);
    }
  }
  return result;
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12verifyOnExitE"
                     "RS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12ve"
                                "rifyOnExitERS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12verifyOnExitERS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12verifyOnExitERS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::target_type()
{
}

uint64_t mlir::OperationName::mightHaveTrait<mlir::OpTrait::NoTerminator>(void ***a1)
{
  {
    uint64_t v11 = a1;
    a1 = v11;
    if (v3)
    {
      uint64_t v12 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoTerminator<Empty>]";
      unint64_t v13 = 84;
      unint64_t v4 = llvm::StringRef::find((uint64_t *)&v12, "DesiredTypeName = ", 0x12uLL, 0);
      if (v13 >= v4) {
        unint64_t v5 = v4;
      }
      else {
        unint64_t v5 = v13;
      }
      v6 = &v12[v5];
      unint64_t v7 = v13 - v5;
      if (v13 - v5 >= 0x12) {
        uint64_t v8 = 18;
      }
      else {
        uint64_t v8 = v13 - v5;
      }
      unint64_t v9 = v7 - v8;
      if (v9 >= v9 - 1) {
        uint64_t v10 = v9 - 1;
      }
      else {
        uint64_t v10 = v9;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      a1 = v11;
    }
  }
  unsigned __int8 v1 = *a1;
  if (v1[2] == &mlir::detail::TypeIDResolver<void,void>::id) {
    return 1;
  }
  else {
    return (*((uint64_t (**)(void **, uint64_t))*v1 + 4))(v1, mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id);
  }
}

uint64_t mlir::ForwardIterator::makeIterable(mlir::ForwardIterator *this, mlir::Operation *a2)
{
  unint64_t v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) != 0) {
    return (uint64_t)this
  }
         + 32 * *((unsigned int *)this + 10)
         + 16 * ((v2 >> 23) & 1)
         + ((v2 >> 21) & 0x7F8)
         + 64;
  else {
    return 0;
  }
}

uint64_t mlir::ConstantIntRanges::smax(mlir::ConstantIntRanges *this)
{
  return (uint64_t)this + 48;
}

uint64_t mlir::ConstantIntRanges::getStorageBitwidth(uint64_t a1)
{
  uint64_t v5 = a1;
  if (mlir::Type::isIndex((mlir::Type *)&v5)) {
    return 64;
  }
  uint64_t v2 = v5;
  int v3 = *(void **)(*(void *)v5 + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v2 = 0;
  }
  uint64_t v4 = v2;
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return mlir::IntegerType::getWidth((mlir::IntegerType *)&v4);
  }
  else {
    return 0;
  }
}

llvm::APInt *mlir::ConstantIntRanges::maxRange@<X0>(mlir::ConstantIntRanges *this@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v8 = this;
  if (this > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v7);
  }
  unint64_t v7 = 0;
  unsigned int v6 = this;
  unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)this;
  if (!this) {
    unint64_t v3 = 0;
  }
  uint64_t v5 = (llvm::APInt *)v3;
  __n128 result = mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v7, (const llvm::APInt *)&v5, a2);
  if (v6 >= 0x41)
  {
    __n128 result = v5;
    if (v5) {
      __n128 result = (llvm::APInt *)MEMORY[0x21667D390](v5, 0x1000C8000313F17);
    }
  }
  if (v8 >= 0x41)
  {
    __n128 result = v7;
    if (v7) {
      return (llvm::APInt *)MEMORY[0x21667D390](v7, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::APInt *mlir::ConstantIntRanges::fromUnsigned@<X0>(mlir::ConstantIntRanges *this@<X0>, const llvm::APInt *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v7 = *((_DWORD *)this + 2);
  unsigned int v33 = 1;
  v32 = 0;
  int v31 = 1;
  unint64_t v30 = 0;
  char v8 = v7 - 1;
  unint64_t v9 = (mlir::ConstantIntRanges *)(*(void *)this + 8 * ((v7 - 1) >> 6));
  if (v7 < 0x41) {
    unint64_t v9 = this;
  }
  uint64_t v10 = 1 << v8;
  BOOL v11 = (*(void *)v9 & (1 << v8)) == 0;
  unsigned int v12 = *((_DWORD *)a2 + 2);
  char v13 = v12 - 1;
  if (v12 >= 0x41) {
    uint64_t v14 = (const llvm::APInt *)(*(void *)a2 + 8 * ((v12 - 1) >> 6));
  }
  else {
    uint64_t v14 = a2;
  }
  if ((v11 ^ (((*(void *)v14 >> v13) & 1) == 0)))
  {
    unsigned int v29 = v7;
    if (v7 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v28);
    }
    v32 = (llvm::APInt *)v10;
    unsigned int v33 = v29;
    unsigned int v29 = v7;
    unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7) {
      unint64_t v20 = 0;
    }
    unint64_t v28 = v20 & ~v10;
    unint64_t v30 = v28;
    unsigned int v18 = v29;
  }
  else
  {
    if ((int)llvm::APInt::compareSigned(this, a2) >= 0) {
      v15 = a2;
    }
    else {
      v15 = this;
    }
    unsigned int v16 = *((_DWORD *)v15 + 2);
    if (v16 > 0x40)
    {
      llvm::APInt::assignSlowCase((unsigned int *)&v32, v15);
      if ((int)llvm::APInt::compareSigned(this, a2) <= 0) {
        uint64_t v17 = a2;
      }
      else {
        uint64_t v17 = this;
      }
    }
    else
    {
      v32 = *(llvm::APInt **)v15;
      unsigned int v33 = v16;
      if ((int)llvm::APInt::compareSigned(this, a2) <= 0) {
        uint64_t v17 = a2;
      }
      else {
        uint64_t v17 = this;
      }
    }
    unsigned int v18 = *((_DWORD *)v17 + 2);
    if (v18 > 0x40)
    {
      llvm::APInt::assignSlowCase((unsigned int *)&v30, v17);
      unsigned int v19 = *((_DWORD *)this + 2);
      a3[2] = v19;
      if (v19 <= 0x40) {
        goto LABEL_31;
      }
LABEL_23:
      llvm::APInt::initSlowCase((llvm::APInt *)a3, this);
    }
    unint64_t v30 = *(void *)v17;
  }
  int v31 = v18;
  unsigned int v21 = *((_DWORD *)this + 2);
  a3[2] = v21;
  if (v21 > 0x40) {
    goto LABEL_23;
  }
LABEL_31:
  *(void *)a3 = *(void *)this;
  uint64_t v22 = (llvm::APInt *)(a3 + 4);
  unsigned int v23 = *((_DWORD *)a2 + 2);
  a3[6] = v23;
  if (v23 > 0x40) {
    llvm::APInt::initSlowCase(v22, a2);
  }
  *(void *)uint64_t v22 = *(void *)a2;
  unint64_t v24 = (llvm::APInt *)(a3 + 8);
  unsigned int v25 = v33;
  a3[10] = v33;
  if (v25 > 0x40) {
    llvm::APInt::initSlowCase(v24, (const llvm::APInt *)&v32);
  }
  *(void *)unint64_t v24 = v32;
  __n128 result = (llvm::APInt *)(a3 + 12);
  unsigned int v27 = v31;
  a3[14] = v31;
  if (v27 > 0x40) {
    llvm::APInt::initSlowCase(result, (const llvm::APInt *)&v30);
  }
  *(void *)__n128 result = v30;
  if (v33 >= 0x41)
  {
    __n128 result = v32;
    if (v32) {
      return (llvm::APInt *)MEMORY[0x21667D390](v32, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t mlir::ConstantIntRanges::constant@<X0>(mlir::ConstantIntRanges *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a2, this);
  }
  *(void *)a2 = *(void *)this;
  *(_DWORD *)(a2 + 24) = v5;
  *(void *)(a2 + 16) = *(void *)this;
  *(_DWORD *)(a2 + 40) = v5;
  *(void *)(a2 + 32) = *(void *)this;
  uint64_t result = a2 + 48;
  *(_DWORD *)(a2 + 56) = v5;
  *(void *)(a2 + 48) = *(void *)this;
  return result;
}

llvm::APInt *mlir::ConstantIntRanges::range@<X0>(mlir::ConstantIntRanges *this@<X0>, const llvm::APInt *a2@<X1>, const llvm::APInt *a3@<X2>, _DWORD *a4@<X8>)
{
  if (a3) {
    return mlir::ConstantIntRanges::fromSigned(this, a2, a3, a4);
  }
  else {
    return mlir::ConstantIntRanges::fromUnsigned(this, a2, a4);
  }
}

llvm::APInt *mlir::ConstantIntRanges::fromSigned@<X0>(mlir::ConstantIntRanges *this@<X0>, const llvm::APInt *a2@<X1>, const llvm::APInt *a3@<X2>, _DWORD *a4@<X8>)
{
  unsigned int v7 = *((_DWORD *)this + 2);
  unsigned int v32 = 1;
  int v31 = 0;
  unsigned int v30 = 1;
  unsigned int v29 = 0;
  char v8 = (mlir::ConstantIntRanges *)(*(void *)this + 8 * ((v7 - 1) >> 6));
  if (v7 < 0x41) {
    char v8 = this;
  }
  BOOL v9 = ((*(void *)v8 >> (v7 - 1)) & 1) == 0;
  unsigned int v10 = *((_DWORD *)a2 + 2);
  char v11 = v10 - 1;
  if (v10 >= 0x41) {
    unsigned int v12 = (const llvm::APInt *)(*(void *)a2 + 8 * ((v10 - 1) >> 6));
  }
  else {
    unsigned int v12 = a2;
  }
  if (((v9 ^ (((*(void *)v12 >> v11) & 1) == 0)) & 1) == 0)
  {
    if ((int)llvm::APInt::compare(this, a2) >= 0) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = this;
    }
    unsigned int v15 = *((_DWORD *)v14 + 2);
    if (v15 > 0x40)
    {
      llvm::APInt::assignSlowCase((unsigned int *)&v31, v14);
      if ((int)llvm::APInt::compare(this, a2) <= 0) {
        unsigned int v16 = a2;
      }
      else {
        unsigned int v16 = this;
      }
    }
    else
    {
      int v31 = *(llvm::APInt **)v14;
      unsigned int v32 = v15;
      if ((int)llvm::APInt::compare(this, a2) <= 0) {
        unsigned int v16 = a2;
      }
      else {
        unsigned int v16 = this;
      }
    }
    unsigned int v18 = *((_DWORD *)v16 + 2);
    if (v18 > 0x40)
    {
      llvm::APInt::assignSlowCase((unsigned int *)&v29, v16);
      unsigned int v20 = v32;
      a4[2] = v32;
      if (v20 <= 0x40) {
        goto LABEL_31;
      }
    }
    else
    {
      unsigned int v29 = *(llvm::APInt **)v16;
      unsigned int v30 = v18;
      unsigned int v19 = v32;
      a4[2] = v32;
      if (v19 <= 0x40) {
        goto LABEL_31;
      }
    }
LABEL_26:
    llvm::APInt::initSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v31);
  }
  unsigned int v28 = v7;
  if (v7 >= 0x41) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v27);
  }
  int v31 = 0;
  unsigned int v32 = v28;
  unsigned int v28 = v7;
  unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  if (!v7) {
    unint64_t v13 = 0;
  }
  unsigned int v27 = (llvm::APInt *)v13;
  unsigned int v29 = v27;
  unsigned int v30 = v28;
  unsigned int v17 = v32;
  a4[2] = v32;
  if (v17 > 0x40) {
    goto LABEL_26;
  }
LABEL_31:
  *(void *)a4 = v31;
  unsigned int v21 = (llvm::APInt *)(a4 + 4);
  unsigned int v22 = v30;
  a4[6] = v30;
  if (v22 > 0x40) {
    llvm::APInt::initSlowCase(v21, (const llvm::APInt *)&v29);
  }
  *(void *)unsigned int v21 = v29;
  unsigned int v23 = (llvm::APInt *)(a4 + 8);
  unsigned int v24 = *((_DWORD *)this + 2);
  a4[10] = v24;
  if (v24 > 0x40) {
    llvm::APInt::initSlowCase(v23, this);
  }
  *(void *)unsigned int v23 = *(void *)this;
  uint64_t result = (llvm::APInt *)(a4 + 12);
  unsigned int v26 = *((_DWORD *)a2 + 2);
  a4[14] = v26;
  if (v26 > 0x40) {
    llvm::APInt::initSlowCase(result, a2);
  }
  *(void *)uint64_t result = *(void *)a2;
  if (v30 >= 0x41)
  {
    uint64_t result = v29;
    if (v29) {
      uint64_t result = (llvm::APInt *)MEMORY[0x21667D390](v29, 0x1000C8000313F17, a3);
    }
  }
  if (v32 >= 0x41)
  {
    uint64_t result = v31;
    if (v31) {
      return (llvm::APInt *)MEMORY[0x21667D390](v31, 0x1000C8000313F17, a3);
    }
  }
  return result;
}

llvm::APInt *mlir::ConstantIntRanges::rangeUnion@<X0>(mlir::ConstantIntRanges *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  if (!*((_DWORD *)this + 2))
  {
    a3[2] = 0;
    *(void *)a3 = *(void *)this;
    unsigned int v15 = (llvm::APInt *)(a3 + 4);
    unsigned int v16 = (mlir::ConstantIntRanges *)((char *)this + 16);
    unsigned int v17 = *((_DWORD *)this + 6);
    a3[6] = v17;
    if (v17 > 0x40) {
      llvm::APInt::initSlowCase(v15, v16);
    }
    *(void *)unsigned int v15 = *(void *)v16;
    unsigned int v18 = (llvm::APInt *)(a3 + 8);
    unsigned int v19 = (mlir::ConstantIntRanges *)((char *)this + 32);
    unsigned int v20 = *((_DWORD *)this + 10);
    a3[10] = v20;
    if (v20 > 0x40) {
      llvm::APInt::initSlowCase(v18, v19);
    }
    *(void *)unsigned int v18 = *(void *)v19;
    uint64_t result = (llvm::APInt *)(a3 + 12);
    uint64_t v14 = (mlir::ConstantIntRanges *)((char *)this + 48);
    unsigned int v32 = *((_DWORD *)this + 14);
    a3[14] = v32;
    if (v32 > 0x40)
    {
LABEL_33:
      llvm::APInt::initSlowCase(result, v14);
    }
LABEL_29:
    uint64_t v31 = *(void *)v14;
    goto LABEL_30;
  }
  if (!*((_DWORD *)a2 + 2))
  {
    a3[2] = 0;
    *(void *)a3 = *(void *)a2;
    unsigned int v21 = (llvm::APInt *)(a3 + 4);
    unsigned int v22 = (const mlir::ConstantIntRanges *)((char *)a2 + 16);
    unsigned int v23 = *((_DWORD *)a2 + 6);
    a3[6] = v23;
    if (v23 > 0x40) {
      llvm::APInt::initSlowCase(v21, v22);
    }
    *(void *)unsigned int v21 = *(void *)v22;
    unsigned int v24 = (llvm::APInt *)(a3 + 8);
    unsigned int v25 = (const mlir::ConstantIntRanges *)((char *)a2 + 32);
    unsigned int v26 = *((_DWORD *)a2 + 10);
    a3[10] = v26;
    if (v26 > 0x40) {
      llvm::APInt::initSlowCase(v24, v25);
    }
    *(void *)unsigned int v24 = *(void *)v25;
    uint64_t result = (llvm::APInt *)(a3 + 12);
    uint64_t v14 = (const mlir::ConstantIntRanges *)((char *)a2 + 48);
    unsigned int v33 = *((_DWORD *)a2 + 14);
    a3[14] = v33;
    if (v33 > 0x40) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  if ((int)llvm::APInt::compare(this, a2) >= 0) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = this;
  }
  unsigned int v7 = (char *)a2 + 16;
  if ((int)llvm::APInt::compare((mlir::ConstantIntRanges *)((char *)this + 16), (const mlir::ConstantIntRanges *)((char *)a2 + 16)) > 0)unsigned int v7 = (char *)this + 16; {
  char v8 = (char *)this + 32;
  }
  if ((int)llvm::APInt::compareSigned((mlir::ConstantIntRanges *)((char *)this + 32), (const mlir::ConstantIntRanges *)((char *)a2 + 32)) >= 0)char v8 = (char *)a2 + 32; {
  BOOL v9 = (mlir::ConstantIntRanges *)((char *)this + 48);
  }
  unsigned int v10 = (const mlir::ConstantIntRanges *)((char *)a2 + 48);
  if ((int)llvm::APInt::compareSigned(v9, v10) > 0) {
    unsigned int v10 = v9;
  }
  unsigned int v11 = *((_DWORD *)v6 + 2);
  a3[2] = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, v6);
  }
  *(void *)a3 = *(void *)v6;
  unsigned int v12 = (llvm::APInt *)(a3 + 4);
  unsigned int v13 = *((_DWORD *)v7 + 2);
  a3[6] = v13;
  if (v13 > 0x40) {
    llvm::APInt::initSlowCase(v12, (const llvm::APInt *)v7);
  }
  *(void *)unsigned int v12 = *(void *)v7;
  unsigned int v27 = (llvm::APInt *)(a3 + 8);
  unsigned int v28 = *((_DWORD *)v8 + 2);
  a3[10] = v28;
  if (v28 > 0x40) {
    llvm::APInt::initSlowCase(v27, (const llvm::APInt *)v8);
  }
  *(void *)unsigned int v27 = *(void *)v8;
  uint64_t result = (llvm::APInt *)(a3 + 12);
  unsigned int v30 = *((_DWORD *)v10 + 2);
  a3[14] = v30;
  if (v30 > 0x40)
  {
    uint64_t v14 = v10;
    goto LABEL_33;
  }
  uint64_t v31 = *(void *)v10;
LABEL_30:
  *(void *)uint64_t result = v31;
  return result;
}

llvm::APInt *mlir::ConstantIntRanges::intersection@<X0>(mlir::ConstantIntRanges *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  if (!*((_DWORD *)this + 2))
  {
    a3[2] = 0;
    *(void *)a3 = *(void *)this;
    unsigned int v15 = (llvm::APInt *)(a3 + 4);
    unsigned int v16 = (mlir::ConstantIntRanges *)((char *)this + 16);
    unsigned int v17 = *((_DWORD *)this + 6);
    a3[6] = v17;
    if (v17 > 0x40) {
      llvm::APInt::initSlowCase(v15, v16);
    }
    *(void *)unsigned int v15 = *(void *)v16;
    unsigned int v18 = (llvm::APInt *)(a3 + 8);
    unsigned int v19 = (mlir::ConstantIntRanges *)((char *)this + 32);
    unsigned int v20 = *((_DWORD *)this + 10);
    a3[10] = v20;
    if (v20 > 0x40) {
      llvm::APInt::initSlowCase(v18, v19);
    }
    *(void *)unsigned int v18 = *(void *)v19;
    uint64_t result = (llvm::APInt *)(a3 + 12);
    uint64_t v14 = (mlir::ConstantIntRanges *)((char *)this + 48);
    unsigned int v32 = *((_DWORD *)this + 14);
    a3[14] = v32;
    if (v32 > 0x40)
    {
LABEL_33:
      llvm::APInt::initSlowCase(result, v14);
    }
LABEL_29:
    uint64_t v31 = *(void *)v14;
    goto LABEL_30;
  }
  if (!*((_DWORD *)a2 + 2))
  {
    a3[2] = 0;
    *(void *)a3 = *(void *)a2;
    unsigned int v21 = (llvm::APInt *)(a3 + 4);
    unsigned int v22 = (const mlir::ConstantIntRanges *)((char *)a2 + 16);
    unsigned int v23 = *((_DWORD *)a2 + 6);
    a3[6] = v23;
    if (v23 > 0x40) {
      llvm::APInt::initSlowCase(v21, v22);
    }
    *(void *)unsigned int v21 = *(void *)v22;
    unsigned int v24 = (llvm::APInt *)(a3 + 8);
    unsigned int v25 = (const mlir::ConstantIntRanges *)((char *)a2 + 32);
    unsigned int v26 = *((_DWORD *)a2 + 10);
    a3[10] = v26;
    if (v26 > 0x40) {
      llvm::APInt::initSlowCase(v24, v25);
    }
    *(void *)unsigned int v24 = *(void *)v25;
    uint64_t result = (llvm::APInt *)(a3 + 12);
    uint64_t v14 = (const mlir::ConstantIntRanges *)((char *)a2 + 48);
    unsigned int v33 = *((_DWORD *)a2 + 14);
    a3[14] = v33;
    if (v33 > 0x40) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  if ((int)llvm::APInt::compare(this, a2) <= 0) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = this;
  }
  unsigned int v7 = (char *)a2 + 16;
  if ((int)llvm::APInt::compare((mlir::ConstantIntRanges *)((char *)this + 16), (const mlir::ConstantIntRanges *)((char *)a2 + 16)) < 0)unsigned int v7 = (char *)this + 16; {
  char v8 = (char *)this + 32;
  }
  if ((int)llvm::APInt::compareSigned((mlir::ConstantIntRanges *)((char *)this + 32), (const mlir::ConstantIntRanges *)((char *)a2 + 32)) <= 0)char v8 = (char *)a2 + 32; {
  BOOL v9 = (mlir::ConstantIntRanges *)((char *)this + 48);
  }
  unsigned int v10 = (const mlir::ConstantIntRanges *)((char *)a2 + 48);
  if ((int)llvm::APInt::compareSigned(v9, v10) < 0) {
    unsigned int v10 = v9;
  }
  unsigned int v11 = *((_DWORD *)v6 + 2);
  a3[2] = v11;
  if (v11 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, v6);
  }
  *(void *)a3 = *(void *)v6;
  unsigned int v12 = (llvm::APInt *)(a3 + 4);
  unsigned int v13 = *((_DWORD *)v7 + 2);
  a3[6] = v13;
  if (v13 > 0x40) {
    llvm::APInt::initSlowCase(v12, (const llvm::APInt *)v7);
  }
  *(void *)unsigned int v12 = *(void *)v7;
  unsigned int v27 = (llvm::APInt *)(a3 + 8);
  unsigned int v28 = *((_DWORD *)v8 + 2);
  a3[10] = v28;
  if (v28 > 0x40) {
    llvm::APInt::initSlowCase(v27, (const llvm::APInt *)v8);
  }
  *(void *)unsigned int v27 = *(void *)v8;
  uint64_t result = (llvm::APInt *)(a3 + 12);
  unsigned int v30 = *((_DWORD *)v10 + 2);
  a3[14] = v30;
  if (v30 > 0x40)
  {
    uint64_t v14 = v10;
    goto LABEL_33;
  }
  uint64_t v31 = *(void *)v10;
LABEL_30:
  *(void *)uint64_t result = v31;
  return result;
}

uint64_t mlir::ConstantIntRanges::getConstantValue@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  unsigned int v4 = *(_DWORD *)(this + 8);
  if (v4 > 0x40)
  {
    this = llvm::APInt::equalSlowCase((const void **)this, (const void **)(this + 16));
    if (this)
    {
      *(_DWORD *)(a2 + 8) = v4;
      unsigned int v7 = (llvm::APInt *)a2;
      char v8 = (const llvm::APInt *)v2;
      goto LABEL_17;
    }
  }
  else
  {
    unsigned int v5 = *(const void **)this;
    if (v4) {
      BOOL v6 = v5 == *(const void **)(this + 16);
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      *(_DWORD *)(a2 + 8) = v4;
LABEL_14:
      *(void *)a2 = v5;
      *(unsigned char *)(a2 + 16) = 1;
      return this;
    }
  }
  BOOL v9 = (const void **)(v2 + 32);
  unsigned int v10 = (const void **)(v2 + 48);
  unsigned int v11 = *(_DWORD *)(v2 + 40);
  if (v11 > 0x40)
  {
    this = llvm::APInt::equalSlowCase(v9, v10);
    if ((this & 1) == 0) {
      goto LABEL_18;
    }
    *(_DWORD *)(a2 + 8) = v11;
    unsigned int v7 = (llvm::APInt *)a2;
    char v8 = (const llvm::APInt *)v9;
LABEL_17:
    llvm::APInt::initSlowCase(v7, v8);
  }
  if (v11)
  {
    unsigned int v5 = *v9;
    if (*v9 == *v10)
    {
      *(_DWORD *)(a2 + 8) = v11;
      goto LABEL_14;
    }
  }
LABEL_18:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return this;
}

uint64_t mlir::detail::verifyInferredResultTypes(mlir::detail *this, mlir::Operation *a2)
{
  v67[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *((unsigned int *)this + 9);
  unsigned int v4 = (char *)this - 16;
  if (!v3) {
    unsigned int v4 = 0;
  }
  int64_t v65 = v4;
  uint64_t v66 = v3;
  mlir::OperandRange::getTypes((uint64_t *)&v65, &v51);
  int64_t v65 = (char *)v67;
  uint64_t v66 = 0x400000000;
  uint64_t v5 = v51;
  uint64_t v6 = (uint64_t)v52;
  uint64_t v8 = v53;
  unsigned int v7 = v54;
  int v9 = v54 - v52;
  if ((unint64_t)((unsigned char *)v54 - v52) < 5)
  {
    int v10 = 0;
    BOOL v11 = v51 != v53;
    if (v54 != v52) {
      goto LABEL_9;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, (unsigned char *)v54 - v52, 8);
    int v10 = v66;
    BOOL v11 = v5 != v8;
    if (v7 != (void *)v6) {
      goto LABEL_9;
    }
  }
  if (!v11)
  {
    LODWORD(v66) = v10 + v9;
    goto LABEL_13;
  }
LABEL_9:
  unsigned int v12 = (unint64_t *)&v65[8 * v10];
  if (v11)
  {
    while (1)
      *v12++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6++) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  do
    *v12++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6++) + 8) & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (void *)v6);
  LODWORD(v66) = v66 + v9;
  if (!this) {
    goto LABEL_50;
  }
LABEL_13:
  uint64_t v13 = *((void *)this + 6);
  uint64_t v14 = *(void **)(v13 + 16);
  BOOL v15 = v14 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v14 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *((void *)this + 6);
  }
  if (v15)
  {
    uint64_t v51 = *(void *)(v13 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v51);
    if (Values)
    {
      uint64_t v20 = v13;
      goto LABEL_21;
    }
LABEL_50:
    uint64_t v18 = 0;
    uint64_t Context = mlir::Attribute::getContext((mlir::detail *)((char *)this + 24));
    uint64_t v22 = *((void *)this + 3);
    if ((*((unsigned char *)this + 46) & 0x80) != 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
  unint64_t v17 = v16 | v13 & 0xFFFFFFFFFFFFFF00;
  uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>(v17 + 32);
  if (v18) {
    goto LABEL_22;
  }
  uint64_t Values = *(void *)(v17 + 24);
  uint64_t v20 = *((void *)this + 6);
LABEL_21:
  uint64_t v18 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::InferTypeOpInterface>(Values, v20);
LABEL_22:
  uint64_t Context = mlir::Attribute::getContext((mlir::detail *)((char *)this + 24));
  uint64_t v22 = *((void *)this + 3);
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
LABEL_23:
    uint64_t v23 = *((void *)this + 9);
    unint64_t v24 = *((unsigned int *)this + 17);
    goto LABEL_24;
  }
LABEL_51:
  uint64_t v23 = 0;
  unint64_t v24 = 0;
LABEL_24:
  mlir::ValueRange::ValueRange(v64, v23, v24);
  uint64_t v25 = *((void *)this + 7);
  unint64_t v26 = *((unsigned int *)this + 11);
  if (HIBYTE(*((_DWORD *)this + 11))) {
    unsigned int v27 = (char *)this + 16 * ((v26 >> 23) & 1) + 64;
  }
  else {
    unsigned int v27 = 0;
  }
  unint64_t v28 = v26 & 0x7FFFFF;
  if ((v26 & 0x7FFFFF) != 0)
  {
    uint64_t v29 = (((unint64_t)this + 16 * ((v26 >> 23) & 1) + ((v26 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v29 = 0;
    unint64_t v28 = 0;
  }
  mlir::ValueRange::ValueRange(&v63, v29, v28);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, char *))(v18 + 8))(Context, v22, 1, v64[0], v64[1], v25, v27);
  if (!(_BYTE)v30)
  {
    __int16 v47 = 257;
    mlir::Operation::emitOpError((uint64_t)this, &v46, (uint64_t)&v51);
    if (v51)
    {
      int v48 = 3;
      unint64_t v49 = "failed to infer returned types";
      uint64_t v50 = 30;
      unsigned int v32 = &v48;
      unsigned int v33 = (char *)v54;
      if (v55 >= v56)
      {
        unint64_t v44 = v55 + 1;
        if (v54 <= &v48 && (char *)v54 + 24 * v55 > (char *)&v48)
        {
          int64_t v45 = (char *)&v48 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v44, 24);
          unsigned int v33 = (char *)v54;
          unsigned int v32 = (int *)((char *)v54 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v44, 24);
          unsigned int v32 = &v48;
          unsigned int v33 = (char *)v54;
        }
      }
      unint64_t v34 = &v33[24 * v55];
      long long v35 = *(_OWORD *)v32;
      *((void *)v34 + 2) = *((void *)v32 + 2);
      *(_OWORD *)unint64_t v34 = v35;
      ++v55;
      if (v51) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v51);
      }
    }
    if (v62)
    {
      uint64_t v36 = __p;
      if (__p)
      {
        v37 = v61;
        v38 = __p;
        if (v61 != __p)
        {
          do
            v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          v38 = __p;
        }
        unint64_t v61 = v36;
        operator delete(v38);
      }
      v39 = v58;
      if (v58)
      {
        BOOL v40 = v59;
        int64_t v41 = v58;
        if (v59 != v58)
        {
          do
          {
            uint64_t v43 = *--v40;
            uint64_t v42 = v43;
            *BOOL v40 = 0;
            if (v43) {
              MEMORY[0x21667D390](v42, 0x1000C8077774924);
            }
          }
          while (v40 != v39);
          int64_t v41 = v58;
        }
        v59 = v39;
        operator delete(v41);
      }
      if (v54 != v57) {
        free(v54);
      }
    }
  }
  if (v65 != (char *)v67) {
    free(v65);
  }
  return v30;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::InferTypeOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v15 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v17 = 76;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      int v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, v3[17], v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>(uint64_t a1)
{
  unsigned __int8 v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    unsigned __int8 v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unsigned int v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v22 = 76;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unsigned __int8 v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[17];
  unsigned int v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      unsigned int v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void mlir::memref::MemRefDialect::initialize(mlir::memref::MemRefDialect *this)
{
}

void mlir::memref::MemRefDialect::MemRefDialect(mlir::memref::MemRefDialect *this, mlir::MLIRContext *a2)
{
  unint64_t v3 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"memref", 6, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id);
  void *v3 = &unk_26C37FFB0;
  unsigned int v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"arith", 5))
  {
    uint64_t v5 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v5);
  }
  mlir::memref::MemRefDialect::initialize(this);
}

void mlir::memref::MemRefDialect::~MemRefDialect(llvm **this)
{
}

void sub_2116B7BDC()
{
  JUMPOUT(0x21667D3C0);
}

void mlir::Dialect::addOperations<mlir::memref::AssumeAlignmentOp,mlir::memref::AtomicRMWOp,mlir::memref::AtomicYieldOp,mlir::memref::CopyOp,mlir::memref::GenericAtomicRMWOp,mlir::memref::LoadOp,mlir::memref::AllocOp,mlir::memref::AllocaOp,mlir::memref::AllocaScopeOp,mlir::memref::AllocaScopeReturnOp,mlir::memref::CastOp,mlir::memref::CollapseShapeOp,mlir::memref::DeallocOp,mlir::memref::DimOp,mlir::memref::DmaStartOp,mlir::memref::DmaWaitOp,mlir::memref::ExpandShapeOp,mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::memref::ExtractStridedMetadataOp,mlir::memref::GetGlobalOp,mlir::memref::GlobalOp,mlir::memref::MemorySpaceCastOp,mlir::memref::PrefetchOp,mlir::memref::RankOp,mlir::memref::ReallocOp,mlir::memref::ReinterpretCastOp,mlir::memref::ReshapeOp,mlir::memref::StoreOp,mlir::memref::TransposeOp,mlir::memref::ViewOp,mlir::memref::SubViewOp>()
{
}

void mlir::RegisteredOperationName::insert<mlir::memref::AssumeAlignmentOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::AtomicYieldOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::CopyOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::GenericAtomicRMWOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::AllocaScopeOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::DeallocOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::DmaStartOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::DmaWaitOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::GlobalOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::PrefetchOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::RegisteredOperationName::insert<mlir::memref::ReallocOp>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  unint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  unint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::AssumeAlignmentOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unint64_t v10 = v11;
      }
      else {
        unint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::AssumeAlignmentOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AssumeAlignmentOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::AssumeAlignmentOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AssumeAlignmentOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AssumeAlignmentOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::AssumeAlignmentOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AssumeAlignmentOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::memref::AssumeAlignmentOp::verifyInvariantsImpl((mlir::memref::AssumeAlignmentOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::AssumeAlignmentOp::verify((mlir::memref::AssumeAlignmentOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.atomic_rmw", 17, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AtomicRMWOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379070;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::memref::AtomicRMWOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::AtomicRMWOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AtomicRMWOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::AtomicRMWOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AtomicRMWOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AtomicRMWOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::AtomicRMWOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::AtomicRMWOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::AtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.atomic_rmw";
  v16[1] = 17;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::AtomicRMWOp::getEffects((uint64_t)&v3, a3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::AtomicRMWOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::AtomicRMWOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      uint64_t v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      BOOL v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v154 = 104;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      unint64_t v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      unint64_t v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      unint64_t v154 = 97;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[441];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v154 = 89;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      uint64_t v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v154 = 90;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[37];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AtomicRMWOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::AtomicRMWOp::verifyInvariantsImpl((mlir::memref::AtomicRMWOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::AtomicRMWOp::verify((mlir::memref::AtomicRMWOp *)&v6) != 0;
}

BOOL mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::AtomicYieldOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    char v3 = (void *)&unk_267770000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[29];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<Empty>]";
      unint64_t v176 = 121;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[187];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[31];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v176 = 84;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroResults<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OneOperand<mlir::memref::AtomicYieldOp>,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OpInvariants<mlir::memref::AtomicYieldOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::AtomicYieldOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::IsTerminator<mlir::memref::AtomicYieldOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::memref::AtomicYieldOp::verify((mlir::memref::AtomicYieldOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroResults<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OneOperand<mlir::memref::AtomicYieldOp>,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OpInvariants<mlir::memref::AtomicYieldOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::AtomicYieldOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::IsTerminator<mlir::memref::AtomicYieldOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>::verifyTrait((uint64_t)a1)
      && ZinIrConstData_specialization<half>::prepare()
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>::verifyTrait(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::GenericAtomicRMWOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "memref.generic_atomic_rmw";
  v37[1] = 25;
  if (*v8)
  {
    uint64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      uint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v18 = v46;
      unint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unint64_t v19 = __p;
      }
      unint64_t v46 = v17;
      operator delete(v19);
    }
    int64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      unint64_t v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          *int v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        unint64_t v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  char v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = (llvm **)v12[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::CopyOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      unint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getSource;
  v2[1] = mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getTarget;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CopyOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CopyOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[189], v2);
}

uint64_t mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

uint64_t mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::CopyOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  mlir::memref::detail::CopyOpGenericAdaptorBase::CopyOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::memref::CopyOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v144 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267770000;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    uint64_t v3 = (void *)&unk_267770000;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v154 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      unsigned int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v3 = (void *)&unk_267770000;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v154 = 90;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[89];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CopyOpInterface::Trait<Empty>]";
      unint64_t v154 = 85;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::CopyOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CopyOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[191];
  uint64_t v13 = &unk_267772000;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    uint64_t v13 = (void *)&unk_267772000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsElementType<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v13 = (void *)&unk_267772000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = v13[193];
  long long v15 = &unk_267772000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    long long v15 = (void *)&unk_267772000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsShape<Empty>]";
      unint64_t v154 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      long long v15 = (void *)&unk_267772000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[195];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v17[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::CopyOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CopyOp>,mlir::OpTrait::ZeroResults<mlir::memref::CopyOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CopyOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::CopyOp>,mlir::OpTrait::OpInvariants<mlir::memref::CopyOp>,mlir::CopyOpInterface::Trait<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsElementType<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsShape<mlir::memref::CopyOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CopyOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CopyOp>,mlir::OpTrait::ZeroResults<mlir::memref::CopyOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CopyOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::CopyOp>,mlir::OpTrait::OpInvariants<mlir::memref::CopyOp>,mlir::CopyOpInterface::Trait<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsElementType<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsShape<mlir::memref::CopyOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CopyOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v8 = a1, mlir::memref::CopyOp::verifyInvariantsImpl((mlir::memref::CopyOp *)&v8))
    && mlir::OpTrait::impl::verifySameOperandsElementType(a1, v5))
  {
    return mlir::OpTrait::impl::verifySameOperandsShape(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::foldHook()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = (llvm **)v6[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::memref::GenericAtomicRMWOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.generic_atomic_rmw";
  v16[1] = 25;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::GenericAtomicRMWOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v165 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v176 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[427];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v176 = 104;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v176 = 97;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v176 = 83;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[443];
  uint64_t v13 = &unk_267772000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267772000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref:"
             ":AtomicYieldOp>::Impl<Empty>]";
      unint64_t v176 = 136;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267772000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[197];
  long long v15 = &unk_267770000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = (void *)&unk_267770000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = (void *)&unk_267770000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[435];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v176 = 90;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[37];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::memref::GenericAtomicRMWOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneResult<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OpInvariants<mlir::memref::GenericAtomicRMWOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::memref::GenericAtomicRMWOp::verify((mlir::memref::GenericAtomicRMWOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneResult<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OpInvariants<mlir::memref::GenericAtomicRMWOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
  {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::GenericAtomicRMWOp::verifyInvariantsImpl((mlir::memref::GenericAtomicRMWOp *)&v6) != 0;
}

uint64_t mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  unint64_t v1 = *(unsigned int *)(a1 + 44);
  uint64_t v2 = v1 & 0x7FFFFF;
  if ((v1 & 0x7FFFFF) == 0) {
    return 1;
  }
  uint64_t v3 = 0;
  for (i = (void *)(((a1 + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(a1 + 40)); ; i += 3)
  {
    if (i == (void *)*i) {
      goto LABEL_3;
    }
    uint64_t v5 = i[1];
    if (i == (void *)v5 || i != *(void **)(v5 + 8)) {
      break;
    }
    if (*(void *)(v5 + 24) == v5 + 24)
    {
      __int16 v43 = 257;
      mlir::Operation::emitOpError(a1, v42, (uint64_t)v47);
      if (v47[0])
      {
        int v44 = 3;
        uint64_t v45 = "expects a non-empty block";
        uint64_t v46 = 25;
        uint64_t v6 = &v44;
        uint64_t v7 = (char *)v48;
        if (v49 >= v50)
        {
          unint64_t v38 = v49 + 1;
          if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
          {
            int64_t v41 = (char *)&v44 - (unsigned char *)v48;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
            uint64_t v7 = (char *)v48;
            uint64_t v6 = (int *)((char *)v48 + v41);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
            uint64_t v6 = &v44;
            uint64_t v7 = (char *)v48;
          }
        }
        uint64_t v8 = &v7[24 * v49];
        long long v9 = *(_OWORD *)v6;
        *((void *)v8 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v8 = v9;
        ++v49;
      }
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
      if (v56)
      {
        uint64_t v11 = __p;
        if (__p)
        {
          uint64_t v12 = v55;
          uint64_t v13 = __p;
          if (v55 != __p)
          {
            do
              uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
            while (v12 != v11);
            uint64_t v13 = __p;
          }
          unint64_t v55 = v11;
          operator delete(v13);
        }
        uint64_t v14 = v52;
        if (!v52) {
          goto LABEL_47;
        }
        long long v15 = v53;
        uint64_t v16 = v52;
        if (v53 == v52) {
          goto LABEL_46;
        }
        do
        {
          uint64_t v18 = *--v15;
          uint64_t v17 = v18;
          void *v15 = 0;
          if (v18) {
            MEMORY[0x21667D390](v17, 0x1000C8077774924);
          }
        }
        while (v15 != v14);
        goto LABEL_45;
      }
      return v10;
    }
LABEL_3:
    if ((const char *)v2 == ++v3) {
      return 1;
    }
  }
  v42[0] = (void **)"expects region #";
  __int16 v43 = 259;
  mlir::Operation::emitOpError(a1, v42, (uint64_t)v47);
  if (v47[0])
  {
    int v44 = 5;
    uint64_t v45 = v3;
    uint64_t v19 = &v44;
    int64_t v20 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v35 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v39 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v35, 24);
        int64_t v20 = (char *)v48;
        uint64_t v19 = (int *)((char *)v48 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v35, 24);
        uint64_t v19 = &v44;
        int64_t v20 = (char *)v48;
      }
    }
    uint64_t v21 = &v20[24 * v49];
    long long v22 = *(_OWORD *)v19;
    *((void *)v21 + 2) = *((void *)v19 + 2);
    *(_OWORD *)uint64_t v21 = v22;
    uint64_t v23 = ++v49;
    if (v47[0])
    {
      int v44 = 3;
      uint64_t v45 = " to have 0 or 1 blocks";
      uint64_t v46 = 22;
      uint64_t v24 = &v44;
      uint64_t v25 = (char *)v48;
      if (v23 >= v50)
      {
        unint64_t v36 = v23 + 1;
        BOOL v37 = (char *)v48 + 24 * v23 > (char *)&v44;
        if (v48 <= &v44 && v37)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v36, 24);
          uint64_t v25 = (char *)v48;
          uint64_t v24 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v36, 24);
          uint64_t v24 = &v44;
          uint64_t v25 = (char *)v48;
        }
      }
      unsigned int v26 = &v25[24 * v49];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = *((void *)v24 + 2);
      *(_OWORD *)unsigned int v26 = v27;
      ++v49;
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
  if (v47[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  }
  if (v56)
  {
    int v28 = __p;
    if (__p)
    {
      unint64_t v29 = v55;
      int v30 = __p;
      if (v55 != __p)
      {
        do
          unint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        int v30 = __p;
      }
      unint64_t v55 = v28;
      operator delete(v30);
    }
    uint64_t v14 = v52;
    if (!v52) {
      goto LABEL_47;
    }
    int v31 = v53;
    uint64_t v16 = v52;
    if (v53 == v52)
    {
LABEL_46:
      unint64_t v53 = v14;
      operator delete(v16);
LABEL_47:
      if (v48 != v51) {
        free(v48);
      }
      return v10;
    }
    do
    {
      uint64_t v33 = *--v31;
      uint64_t v32 = v33;
      void *v31 = 0;
      if (v33) {
        MEMORY[0x21667D390](v32, 0x1000C8077774924);
      }
    }
    while (v31 != v14);
LABEL_45:
    uint64_t v16 = v52;
    goto LABEL_46;
  }
  return v10;
}

BOOL mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyInferredResultTypes(a1, v2) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>::verifyRegionTrait(uint64_t a1)
{
  v23[24] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (v1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 64;
    uint64_t v5 = 24 * v1;
    do
    {
      unint64_t v6 = *(unsigned int *)(a1 + 44);
      if ((v6 & 0x7FFFFF) != 0)
      {
        uint64_t v7 = (void *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                      + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
        if (v7 != (void *)*v7) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v7 = v3;
        if (v3 != (void *)*v3)
        {
LABEL_8:
          uint64_t v8 = v7[1];
          if (v8) {
            uint64_t v9 = v8 - 8;
          }
          else {
            uint64_t v9 = 0;
          }
          ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v9 + 32));
          uint64_t v11 = *(void *)(v10 + 48);
          if (*(_UNKNOWN **)(v11 + 16) != &mlir::detail::TypeIDResolver<mlir::memref::AtomicYieldOp,void>::id)
          {
            __int16 v16 = 1283;
            v15[0] = "expects regions to end with '";
            v15[2] = "memref.atomic_yield";
            v15[3] = 19;
            v17[0] = v15;
            unint64_t v17[2] = "', found '";
            __int16 v18 = 770;
            v23[0] = *(void *)(v11 + 8);
            uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v23);
            v19[0] = v17;
            v19[2] = AttrData;
            v19[3] = v13;
            __int16 v20 = 1282;
            v21[0] = (void **)v19;
            v21[2] = (void **)"'";
            __int16 v22 = 770;
            mlir::Operation::emitOpError(a1, v21, (uint64_t)v23);
            mlir::Diagnostic::attachNote();
          }
        }
      }
      v3 += 3;
    }
    while ((void *)v5 != v3);
  }
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.load", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::LoadOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379DB8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::LoadOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::LoadOp::getInherentAttr(Context, v8, a3, a4);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::LoadOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::LoadOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::LoadOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::LoadOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::LoadOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::loadsFrom;
  v2[1] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::storesTo;
  v2[2] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getStored;
  v2[3] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canUsesBeRemoved;
  v2[4] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::removeBlockingUses;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface]";
      unint64_t v14 = 80;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[199], v2);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::loadsFrom(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  return mlir::memref::LoadOp::loadsFrom((uint64_t)&v4, a3);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::storesTo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return Layer2TDMapper::SourceLayer::IsGraphInitialization((Layer2TDMapper::SourceLayer *)&v3);
}

void mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getStored(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrConstData::~ZinIrConstData((ZinIrConstData *)&v2);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canUsesBeRemoved(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::LoadOp::canUsesBeRemoved((mlir::anec::Convolution *)&v5, a3, a4);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::removeBlockingUses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = a2;
  return mlir::memref::LoadOp::removeBlockingUses((mlir::anec::Convolution *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canRewire;
  v2[1] = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::rewire;
  uint64_t v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface]";
      unint64_t v14 = 89;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[201], v2);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canRewire(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::LoadOp::canRewire((mlir::memref::LoadOp *)&v5, a3, a4);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::rewire(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = a2;
  return mlir::memref::LoadOp::rewire((mlir::memref::LoadOp *)&v6, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::LoadOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::LoadOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  __int16 v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.load";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::LoadOp::getEffects((uint64_t)&v3, a3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::memref::detail::LoadOpGenericAdaptorBase::LoadOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::LoadOp::fold(&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      int64_t v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unsigned int v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v223 = 104;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      int v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[318];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      int v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v223 = 97;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      int v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      int v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      int v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267772000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = (void *)&unk_267772000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v223 = 91;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      int v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = (void *)&unk_267772000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[55];
  uint64_t v17 = &unk_267772000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_267772000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface::Trait<Empty>]";
      unint64_t v223 = 94;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      int v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::PromotableMemOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_267772000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[203];
  uint64_t v19 = &unk_267772000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    uint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface::Trait<Empty>]";
      unint64_t v223 = 103;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      uint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestructurableAccessorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[205];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v223 = 90;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      uint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[37];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::LoadOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::LoadOp::verifyInvariantsImpl((mlir::memref::LoadOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::LoadOp::verify((mlir::memref::LoadOp *)&v6) != 0;
}

BOOL mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.alloc", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37A010;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::AllocOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::AllocOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AllocOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::AllocOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AllocOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AllocOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::AllocOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::AllocOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::AllocOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::AllocOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::AllocOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v176 = 110;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[27];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v176 = 88;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v176 = 96;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[47];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[435];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[320];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v176 = 86;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[350];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      unint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AllocOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::AllocOp::verifyInvariantsImpl((mlir::memref::AllocOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::AllocOp::verify((mlir::memref::AllocOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.alloca", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocaOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37A1A0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::foldHook()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = (llvm **)v6[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::AllocaOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::AllocOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AllocOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::AllocOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AllocOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AllocOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::AllocOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::AllocOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::AllocOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::AllocaOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getPromotableSlots;
  v2[1] = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultValue;
  v2[2] = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleBlockArgument;
  v2[3] = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handlePromotionComplete;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableAllocationOpInterface]";
      unint64_t v14 = 87;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableAllocationOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[213], v2);
}

double mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getPromotableSlots@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1;
  return mlir::memref::AllocaOp::getPromotableSlots((mlir::memref::AllocaOp *)&v3, a2);
}

char *mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::AllocaOp::getDefaultValue((uint64_t)&v5, a3, a4);
}

void mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleBlockArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

uint64_t mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handlePromotionComplete(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a2;
  return mlir::memref::AllocaOp::handlePromotionComplete(&v6, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDestructurableSlots;
  v2[1] = mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::destructure;
  v2[2] = mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleDestructuringComplete;
  uint64_t v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAllocationOpInterface]";
      unint64_t v14 = 91;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAllocationOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[215], v2);
}

double mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDestructurableSlots@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1;
  return mlir::memref::AllocaOp::getDestructurableSlots((mlir::memref::AllocaOp *)&v3, a2);
}

uint64_t mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::destructure@<X0>(ZinIrHalH13g *a1@<X1>, void *a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v5 = a1;
  return mlir::memref::AllocaOp::destructure(&v5, a2, a3, a4);
}

uint64_t mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleDestructuringComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::AllocaOp::handleDestructuringComplete(&v5, a3, a4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::AllocaOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      int v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      int v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v223 = 110;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      int v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[27];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      int v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v223 = 88;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      int v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[83];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v223 = 96;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      int v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[47];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      int v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[435];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      int v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[320];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v223 = 86;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      int v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[350];
  uint64_t v19 = &unk_267772000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    uint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableAllocationOpInterface::Trait<Empty>]";
      unint64_t v223 = 101;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      uint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableAllocationOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::PromotableAllocationOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[217];
  uint64_t v21 = &unk_267772000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    uint64_t v21 = (void *)&unk_267772000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAllocationOpInterface::Trait<Empty>]";
      unint64_t v223 = 105;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      uint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAllocationOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestructurableAllocationOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v21 = (void *)&unk_267772000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[219];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AllocOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::AllocOp::verifyInvariantsImpl((mlir::memref::AllocOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::AllocaOp::verify((mlir::memref::AllocaOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getParseAssemblyFn(void (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::memref::AllocaScopeOp::parse;
  a1[3] = (void (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                          + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::areTypesCompatible;
  char v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[397], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  }
  else {
    return 0;
  }
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  *(void *)&double result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v6, 0, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)&double result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  uint64_t v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a5 + 12 * v7;
  uint64_t v9 = v6;
  do
  {
    *(void *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(uint64_t a1)
{
  uint64_t v1 = &unk_267770000;
  {
    uint64_t v187 = a1;
    uint64_t v1 = (void *)&unk_267770000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v199 = 81;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      int v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = (void *)&unk_267770000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[427];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v199 = 87;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      int v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[437];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      int v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v199 = 84;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      int v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v199 = 83;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      int v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[443];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref:"
             ":AllocaScopeReturnOp>::Impl<Empty>]";
      unint64_t v199 = 142;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      int v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[225];
  uint64_t v13 = &unk_267772000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267772000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      unint64_t v199 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      int v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267772000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[159];
  uint64_t v15 = &unk_267770000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267770000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      int v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267770000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[435];
  uint64_t v17 = &unk_267772000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267772000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      unint64_t v199 = 96;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      int v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267772000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[65];
  unint64_t v19 = &unk_267772000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      int v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[227];
  int v21 = &unk_267772000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    int v21 = (void *)&unk_267772000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v199 = 97;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      int v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      int v21 = (void *)&unk_267772000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[229] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::memref::AllocaScopeOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v4)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    || !mlir::OpTrait::impl::verifyNoRegionArguments(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::AllocaScopeOp::verifyInvariantsImpl((unsigned int **)&v7);
}

BOOL mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::memref::AllocaScopeOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::memref::AllocaScopeOp>::verifyRegionTrait(uint64_t a1)
{
  v23[24] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (v1)
  {
    char v3 = 0;
    uint64_t v4 = a1 + 64;
    uint64_t v5 = 24 * v1;
    do
    {
      unint64_t v6 = *(unsigned int *)(a1 + 44);
      if ((v6 & 0x7FFFFF) != 0)
      {
        uint64_t v7 = (void *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                      + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
        if (v7 != (void *)*v7) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v7 = v3;
        if (v3 != (void *)*v3)
        {
LABEL_8:
          uint64_t v8 = v7[1];
          if (v8) {
            uint64_t v9 = v8 - 8;
          }
          else {
            uint64_t v9 = 0;
          }
          ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v9 + 32));
          uint64_t v11 = *(void *)(v10 + 48);
          if (*(_UNKNOWN **)(v11 + 16) != &mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeReturnOp,void>::id)
          {
            __int16 v16 = 1283;
            v15[0] = "expects regions to end with '";
            v15[2] = "memref.alloca_scope.return";
            v15[3] = 26;
            v17[0] = v15;
            unint64_t v17[2] = "', found '";
            __int16 v18 = 770;
            v23[0] = *(void *)(v11 + 8);
            uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v23);
            v19[0] = v17;
            v19[2] = AttrData;
            v19[3] = v13;
            __int16 v20 = 1282;
            v21[0] = (void **)v19;
            v21[2] = (void **)"'";
            __int16 v22 = 770;
            mlir::Operation::emitOpError(a1, v21, (uint64_t)v23);
            mlir::Diagnostic::attachNote();
          }
        }
      }
      v3 += 3;
    }
    while ((void *)v5 != v3);
  }
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.alloca_scope.return", 26, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeReturnOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379908;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::AllocaScopeReturnOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    __int16 v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSuccessorRegions;
  char v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      unint64_t v14 = 89;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[405], v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  char v3 = a1;
  return mlir::memref::AllocaScopeReturnOp::getMutableSuccessorOperands(&v3, a2);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  return mlir::detail::RegionBranchTerminatorOpInterfaceTrait<mlir::func::ReturnOp>::getSuccessorRegions(&v6, a3, a4, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      unint64_t v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    char v3 = (void *)&unk_267770000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v223 = 83;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v223 = 88;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267772000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = (void *)&unk_267772000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<Empty>]";
      unint64_t v223 = 116;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = (void *)&unk_267772000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[231];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v223 = 99;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[31];
  unint64_t v19 = &unk_267772000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      unint64_t v223 = 103;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[79];
  int v21 = &unk_267770000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    int v21 = (void *)&unk_267770000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      unint64_t v223 = 82;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      int v21 = (void *)&unk_267770000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[413];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v223 = 84;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[233] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::func::ReturnOp::print((mlir::func::ReturnOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<mlir::memref::AllocaScopeReturnOp>::verifyTrait((uint64_t)a1)
      && ZinIrConstData_specialization<half>::prepare()
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<mlir::memref::AllocaScopeReturnOp>::verifyTrait(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(mlir::Block **)(a1 + 16);
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "memref.alloca_scope";
  v37[1] = 19;
  if (*v8)
  {
    uint64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      uint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          uint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v18 = v46;
      unint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unint64_t v19 = __p;
      }
      int v46 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      uint64_t v22 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v24 = *--v21;
          uint64_t v23 = v24;
          *int v21 = 0;
          if (v24) {
            MEMORY[0x21667D390](v23, 0x1000C8077774924);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v43;
      }
      uint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.cast", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      long long v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379C28;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::CastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = __p;
    if (__p)
    {
      unint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::CastOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getViewSource;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[419], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::CastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::CastOp>(mlir::Operation *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::memref::detail::CastOpGenericAdaptorBase::CastOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::memref::CastOp::fold((uint64_t *)&v12);
  unint64_t v9 = v8;
  if (v8 < 8
    || (mlir::Operation *)((char *)a1 - 16) == (mlir::Operation *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v259 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v274 = 83;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      int v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v274 = 81;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      int v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<Empty>]";
      unint64_t v274 = 114;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      int v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[233];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      int v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v274 = 82;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      int v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      int v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    uint64_t v196 = v12;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      unint64_t v274 = 85;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      int v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[356];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    uint64_t v197 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v189;
    uint64_t v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v274 = 86;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      int v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v189;
      uint64_t v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = v15[350];
  uint64_t v17 = &unk_267772000;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    uint64_t v198 = v12;
    uint64_t v183 = v16;
    uint64_t v17 = (void *)&unk_267772000;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    uint64_t v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v274 = 91;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      int v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v17 = (void *)&unk_267772000;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      uint64_t v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = v17[55];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    uint64_t v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    uint64_t v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v274 = 95;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      int v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      uint64_t v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = v19[322];
  int v21 = &unk_267771000;
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    uint64_t v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    uint64_t v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v274 = 99;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      int v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      uint64_t v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  uint64_t v22 = v21[324];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    uint64_t v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    uint64_t v171 = v22;
    uint64_t v175 = v20;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    uint64_t v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v274 = 93;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      uint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      uint64_t v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = v23[31];
  uint64_t v25 = &unk_267771000;
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    uint64_t v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    uint64_t v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    uint64_t v25 = (void *)&unk_267771000;
    uint64_t v24 = v169;
    uint64_t v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    uint64_t v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      unint64_t v274 = 98;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      uint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      uint64_t v25 = (void *)&unk_267771000;
      uint64_t v24 = v169;
      uint64_t v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      uint64_t v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  uint64_t v26 = v25[65];
  unsigned int v27 = &unk_267772000;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    uint64_t v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    uint64_t v173 = v22;
    uint64_t v177 = v20;
    uint64_t v168 = v26;
    uint64_t v170 = v24;
    unsigned int v27 = (void *)&unk_267772000;
    uint64_t v26 = v168;
    uint64_t v24 = v170;
    uint64_t v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    uint64_t v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      uint64_t v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      unsigned int v27 = (void *)&unk_267772000;
      uint64_t v26 = v168;
      uint64_t v24 = v170;
      uint64_t v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      uint64_t v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[235] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CastOp>,mlir::OpTrait::OneResult<mlir::memref::CastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::CastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CastOp>,mlir::OpTrait::OneOperand<mlir::memref::CastOp>,mlir::OpTrait::OpInvariants<mlir::memref::CastOp>,mlir::CastOpInterface::Trait<mlir::memref::CastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::CastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::CastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::CastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::CastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::CastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CastOp>,mlir::OpTrait::OneResult<mlir::memref::CastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::CastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CastOp>,mlir::OpTrait::OneOperand<mlir::memref::CastOp>,mlir::OpTrait::OpInvariants<mlir::memref::CastOp>,mlir::CastOpInterface::Trait<mlir::memref::CastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::CastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::CastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::CastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::CastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::CastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (unint64_t v9 = a1, mlir::memref::CastOp::verifyInvariantsImpl((mlir::memref::CastOp *)&v9))
    && mlir::impl::verifyCastInterfaceOp(a1, v6))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.collapse_shape", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379520;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::CollapseShapeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::CollapseShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getViewSource;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[419], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::CollapseShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::CollapseShapeOp::fold(&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      unsigned int v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v223 = 110;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[27];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v223 = 82;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v223 = 86;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[350];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[322];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v223 = 99;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[324];
  int v21 = &unk_267771000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[31];
  uint64_t v23 = &unk_267772000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267772000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      unint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267772000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[235] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::memref::CollapseShapeOp::verifyInvariantsImpl((mlir::memref::CollapseShapeOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::CollapseShapeOp::verify((mlir::memref::CollapseShapeOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  char v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0) {
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v5 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        char v5 = v7;
      }
      else {
        char v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DeallocOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::DeallocOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  mlir::memref::detail::DeallocOpGenericAdaptorBase::DeallocOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      uint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267770000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    uint64_t v3 = (void *)&unk_267770000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v113 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      uint64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v3 = (void *)&unk_267770000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unint64_t v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v113 = 82;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[29];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      unint64_t v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v113 = 91;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      unint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[55];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v113 = 93;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      unint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::DeallocOp::verifyInvariantsImpl((mlir::memref::DeallocOp *)&v7);
}

uint64_t mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.dim", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::DimOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379B60;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v8 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  char v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = (llvm **)v12[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DimOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::DimOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

BOOL mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::DimOp::getSpeculatability((mlir::memref::DimOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getShapedValue;
  v2[1] = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDimension;
  uint64_t v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[239], v2);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getShapedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDimension(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v3) | 4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::DimOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.dim";
  v16[1] = 10;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::memref::detail::DimOpGenericAdaptorBase::DimOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::DimOp::fold((uint64_t *)&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      int v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      int v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      unint64_t v223 = 109;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      int v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[445];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      int v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v223 = 90;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      int v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[89];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      uint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v223 = 86;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      uint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[350];
  uint64_t v15 = &unk_267772000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = (void *)&unk_267772000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v223 = 91;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      uint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = (void *)&unk_267772000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[55];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[322];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[31];
  uint64_t v21 = &unk_267772000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    uint64_t v21 = (void *)&unk_267772000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface::Trait<Empty>]";
      unint64_t v223 = 90;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedDimOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v21 = (void *)&unk_267772000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[241];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v223 = 90;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      unint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::DimOp::print((mlir::memref::DimOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::DimOp>,mlir::OpTrait::OneResult<mlir::memref::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::memref::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::DimOp>,mlir::OpTrait::OpInvariants<mlir::memref::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::DimOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::memref::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::DimOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::DimOp>,mlir::OpTrait::OneResult<mlir::memref::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::memref::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::DimOp>,mlir::OpTrait::OpInvariants<mlir::memref::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::DimOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::memref::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::DimOp>>(mlir::detail *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v7 = a1, mlir::memref::DimOp::verifyInvariantsImpl((mlir::memref::DimOp *)&v7)))
  {
    return mlir::detail::verifyShapedDimOpInterface(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  char v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = (llvm **)v12[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return v8;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DmaStartOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  mlir::memref::detail::DmaStartOpGenericAdaptorBase::DmaStartOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v70 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v16 = v15;
    a1 = v70;
    if (v16)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v76 = 83;
      unint64_t v17 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v17) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = v76;
      }
      unint64_t v19 = &v75[v18];
      unint64_t v20 = v76 - v18;
      if (v76 - v18 >= 0x12) {
        uint64_t v21 = 18;
      }
      else {
        uint64_t v21 = v76 - v18;
      }
      unint64_t v22 = v20 - v21;
      if (v22 >= v22 - 1) {
        uint64_t v23 = v22 - 1;
      }
      else {
        uint64_t v23 = v22;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v70;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v66 = v2;
    uint64_t v71 = a1;
    char v3 = (void *)&unk_267770000;
    int v25 = v24;
    uint64_t v2 = v66;
    a1 = v71;
    if (v25)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v76 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v76;
      }
      unint64_t v28 = &v75[v27];
      unint64_t v29 = v76 - v27;
      if (v76 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v76 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v66;
      a1 = v71;
    }
  }
  uint64_t v4 = v3[429];
  uint64_t v5 = &unk_267770000;
  {
    uint64_t v67 = v2;
    uint64_t v72 = a1;
    uint64_t v63 = v4;
    uint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v63;
    uint64_t v2 = v67;
    int v34 = v33;
    a1 = v72;
    if (v34)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v76 = 86;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v76;
      }
      int v37 = &v75[v36];
      unint64_t v38 = v76 - v36;
      if (v76 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v76 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v63;
      uint64_t v2 = v67;
      a1 = v72;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v68 = v2;
    uint64_t v73 = a1;
    uint64_t v61 = v6;
    uint64_t v64 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v61;
    uint64_t v4 = v64;
    int v43 = v42;
    uint64_t v2 = v68;
    a1 = v73;
    if (v43)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v76 = 88;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v76;
      }
      int v46 = &v75[v45];
      unint64_t v47 = v76 - v45;
      if (v76 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v76 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v61;
      uint64_t v4 = v64;
      uint64_t v2 = v68;
      a1 = v73;
    }
  }
  uint64_t v8 = v7[83];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v69 = v2;
    uint64_t v74 = a1;
    uint64_t v62 = v6;
    uint64_t v65 = v4;
    uint64_t v60 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v60;
    uint64_t v6 = v62;
    uint64_t v4 = v65;
    uint64_t v2 = v69;
    int v52 = v51;
    a1 = v74;
    if (v52)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v76 = 84;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v76;
      }
      int v55 = &v75[v54];
      unint64_t v56 = v76 - v54;
      if (v76 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v76 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v60;
      uint64_t v6 = v62;
      uint64_t v4 = v65;
      uint64_t v2 = v69;
      a1 = v74;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v9[435] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::memref::DmaStartOp::print((mlir::memref::DmaStartOp *)&v8, a3);
}

BOOL mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!ZinIrConstData_specialization<half>::prepare()) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::DmaStartOp::verify((mlir::memref::DmaStartOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  char v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0) {
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v5 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        char v5 = v7;
      }
      else {
        char v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DmaWaitOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      int v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        int v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  mlir::memref::detail::DmaWaitOpGenericAdaptorBase::DmaWaitOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v70 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v16 = v15;
    a1 = v70;
    if (v16)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v76 = 83;
      unint64_t v17 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v17) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = v76;
      }
      unint64_t v19 = &v75[v18];
      unint64_t v20 = v76 - v18;
      if (v76 - v18 >= 0x12) {
        uint64_t v21 = 18;
      }
      else {
        uint64_t v21 = v76 - v18;
      }
      unint64_t v22 = v20 - v21;
      if (v22 >= v22 - 1) {
        uint64_t v23 = v22 - 1;
      }
      else {
        uint64_t v23 = v22;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v70;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v66 = v2;
    uint64_t v71 = a1;
    char v3 = (void *)&unk_267770000;
    int v25 = v24;
    uint64_t v2 = v66;
    a1 = v71;
    if (v25)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v76 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v76;
      }
      unint64_t v28 = &v75[v27];
      unint64_t v29 = v76 - v27;
      if (v76 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v76 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v66;
      a1 = v71;
    }
  }
  uint64_t v4 = v3[429];
  char v5 = &unk_267770000;
  {
    uint64_t v67 = v2;
    uint64_t v72 = a1;
    uint64_t v63 = v4;
    char v5 = (void *)&unk_267770000;
    uint64_t v4 = v63;
    uint64_t v2 = v67;
    int v34 = v33;
    a1 = v72;
    if (v34)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v76 = 86;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v76;
      }
      int v37 = &v75[v36];
      unint64_t v38 = v76 - v36;
      if (v76 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v76 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      char v5 = (void *)&unk_267770000;
      uint64_t v4 = v63;
      uint64_t v2 = v67;
      a1 = v72;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v68 = v2;
    uint64_t v73 = a1;
    uint64_t v61 = v6;
    uint64_t v64 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v61;
    uint64_t v4 = v64;
    int v43 = v42;
    uint64_t v2 = v68;
    a1 = v73;
    if (v43)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      unint64_t v76 = 97;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v76;
      }
      int v46 = &v75[v45];
      unint64_t v47 = v76 - v45;
      if (v76 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v76 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v61;
      uint64_t v4 = v64;
      uint64_t v2 = v68;
      a1 = v73;
    }
  }
  uint64_t v8 = v7[441];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v69 = v2;
    uint64_t v74 = a1;
    uint64_t v62 = v6;
    uint64_t v65 = v4;
    uint64_t v60 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v60;
    uint64_t v6 = v62;
    uint64_t v4 = v65;
    uint64_t v2 = v69;
    int v52 = v51;
    a1 = v74;
    if (v52)
    {
      unint64_t v75 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v76 = 84;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v75, "DesiredTypeName = ", 0x12uLL, 0);
      if (v76 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v76;
      }
      int v55 = &v75[v54];
      unint64_t v56 = v76 - v54;
      if (v76 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v76 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v60;
      uint64_t v6 = v62;
      uint64_t v4 = v65;
      uint64_t v2 = v69;
      a1 = v74;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v9[435] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::DmaWaitOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::DmaWaitOp::verifyInvariantsImpl((mlir::memref::DmaWaitOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::DmaWaitOp::verify((mlir::memref::DmaWaitOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.expand_shape", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379458;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ExpandShapeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    BOOL v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::ExpandShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getViewSource;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[419], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::ExpandShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::ExpandShapeOp::fold(&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::memref::CollapseShapeOp::verifyInvariantsImpl((mlir::memref::CollapseShapeOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::ExpandShapeOp::verify((mlir::memref::ExpandShapeOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.extract_aligned_pointer_as_index", 39, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ExtractAlignedPointerAsIndexOp,void>::id, (uint64_t)&v9);
  int v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379A98;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ExtractAlignedPointerAsIndexOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::ExtractAlignedPointerAsIndexOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.extract_aligned_pointer_as_index";
  v16[1] = 39;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      int v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      int v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      unint64_t v199 = 109;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      int v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[445];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      uint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v199 = 82;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      uint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[29];
  char v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    char v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      int v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      char v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      int v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[350];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      int v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      int v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[324];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      int v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[31];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v199 = 90;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      int v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[37] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::ExtractAlignedPointerAsIndexOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::ExtractAlignedPointerAsIndexOp::verifyInvariantsImpl((mlir::memref::ExtractAlignedPointerAsIndexOp *)&v7);
}

BOOL mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.extract_strided_metadata", 31, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ExtractStridedMetadataOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3799D0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  char v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = (llvm **)v12[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return v8;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ExtractStridedMetadataOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      char v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          char v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::ExtractStridedMetadataOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getViewSource;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[419], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::isCompatibleReturnTypes;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::inferReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.extract_strided_metadata";
  v16[1] = 31;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  mlir::memref::detail::ExtractStridedMetadataOpGenericAdaptorBase::ExtractStridedMetadataOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::memref::ExtractStridedMetadataOp::fold((mlir::memref::ExtractStridedMetadataOp *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v210 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      unint64_t v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNResults<2>::Impl<Empty>]";
      unint64_t v223 = 96;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[439];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v223 = 82;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[29];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v223 = 86;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[350];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[322];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v223 = 99;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[324];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[31];
  uint64_t v19 = &unk_267772000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    uint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[235];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v223 = 90;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[37];
  uint64_t v23 = &unk_267772000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = (void *)&unk_267772000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::InferTypeOpAdaptor<Empty>]";
      unint64_t v223 = 90;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::InferTypeOpAdaptor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::InferTypeOpAdaptor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = (void *)&unk_267772000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[245] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::ExtractAlignedPointerAsIndexOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyAtLeastNResults(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v4))
  {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::ExtractStridedMetadataOp::verifyInvariantsImpl((mlir::memref::ExtractStridedMetadataOp *)&v6) != 0;
}

BOOL mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.get_global", 17, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::GetGlobalOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379138;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::GetGlobalOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::GetGlobalOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::GetGlobalOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::GetGlobalOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::GetGlobalOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::GetGlobalOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::verifySymbolUses;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      unint64_t v14 = 77;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[53], v2);
}

uint64_t mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::verifySymbolUses(uint64_t a1, mlir::SymbolTable *a2, mlir::SymbolTableCollection *a3)
{
  int v4 = a2;
  return mlir::memref::GetGlobalOp::verifySymbolUses(&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      int v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      int v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v199 = 110;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      int v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[27];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      int v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v199 = 84;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      int v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      int v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v199 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      int v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      int v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      int v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[324];
  uint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    uint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      int v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[31];
  uint64_t v21 = &unk_267772000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    uint64_t v21 = (void *)&unk_267772000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface::Trait<Empty>]";
      unint64_t v199 = 91;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      int v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      uint64_t v21 = (void *)&unk_267772000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[57] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::GetGlobalOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::GetGlobalOp::verifyInvariantsImpl((mlir::memref::GetGlobalOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::foldHook()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = (llvm **)v6[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::GlobalOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  int Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::GlobalOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::GlobalOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::GlobalOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::GlobalOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::getOpPropertyByteSize()
{
  return 48;
}

double mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::initProperties(uint64_t a1, uint64_t a2, _OWORD *a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[2];
    a3[1] = a4[1];
    a3[2] = v5;
    *a3 = v4;
  }
  else
  {
    *(void *)&long long v4 = 0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::GlobalOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::memref::GlobalOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] != a2[1]) {
    return 0;
  }
  if (a3[2] != a2[2]) {
    return 0;
  }
  if (a3[3] != a2[3]) {
    return 0;
  }
  if (a3[4] == a2[4]) {
    return a3[5] == a2[5];
  }
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::GlobalOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::GlobalOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  void *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isDeclaration;
  char v3 = &unk_267770000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
      unint64_t v14 = 73;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[411], v2);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  __int16 v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setNested(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setPrivate(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setPublic(uint64_t a1, uint64_t a2)
{
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isDeclaration()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v105 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      int v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    char v3 = (void *)&unk_267770000;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v113 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      int v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      int v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[431];
  size_t v7 = &unk_267770000;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    size_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v113 = 84;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      int v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      size_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      int v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v113 = 89;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      int v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[320];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface::Trait<Empty>]";
      unint64_t v113 = 87;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      int v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v13[437] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  size_t v7 = a2;
  mlir::memref::GlobalOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroOperands(a1, v5)) {
    return 0;
  }
  uint64_t v8 = a1;
  if (!mlir::memref::GlobalOp::verifyInvariantsImpl((mlir::memref::GlobalOp *)&v8)
    || !mlir::detail::verifySymbol(a1, v6))
  {
    return 0;
  }
  uint64_t v8 = a1;
  return mlir::memref::GlobalOp::verify((mlir::memref::GlobalOp *)&v8) != 0;
}

uint64_t mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.memory_space_cast", 24, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::MemorySpaceCastOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      size_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C3796B0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::MemorySpaceCastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    int v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::areCastCompatible;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[354], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::MemorySpaceCastOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getViewSource;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[419], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::MemorySpaceCastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::MemorySpaceCastOp>(mlir::Operation *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v12 = a1;
  mlir::memref::detail::MemorySpaceCastOpGenericAdaptorBase::MemorySpaceCastOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::memref::MemorySpaceCastOp::fold((uint64_t)&v12);
  unint64_t v9 = v8;
  if (v8 < 8
    || (mlir::Operation *)((char *)a1 - 16) == (mlir::Operation *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v285 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v46 = v45;
    a1 = v285;
    if (v46)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v301 = 83;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v301;
      }
      int v49 = &v300[v48];
      unint64_t v50 = v301 - v48;
      if (v301 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v301 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v285;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v271 = v2;
    uint64_t v286 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v55 = v54;
    uint64_t v2 = v271;
    a1 = v286;
    if (v55)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v301 = 81;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v301;
      }
      int v58 = &v300[v57];
      unint64_t v59 = v301 - v57;
      if (v301 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v301 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v271;
      a1 = v286;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v272 = v2;
    uint64_t v287 = a1;
    uint64_t v258 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v258;
    uint64_t v2 = v272;
    int v64 = v63;
    a1 = v287;
    if (v64)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<Empty>]";
      unint64_t v301 = 114;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v301;
      }
      int v67 = &v300[v66];
      unint64_t v68 = v301 - v66;
      if (v301 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v301 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v258;
      uint64_t v2 = v272;
      a1 = v287;
    }
  }
  uint64_t v6 = v5[233];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v273 = v2;
    uint64_t v288 = a1;
    uint64_t v246 = v6;
    uint64_t v259 = v4;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v246;
    uint64_t v4 = v259;
    int v73 = v72;
    uint64_t v2 = v273;
    a1 = v288;
    if (v73)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v301 = 86;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v301;
      }
      int v76 = &v300[v75];
      unint64_t v77 = v301 - v75;
      if (v301 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v301 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v246;
      uint64_t v4 = v259;
      uint64_t v2 = v273;
      a1 = v288;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v274 = v2;
    uint64_t v289 = a1;
    uint64_t v247 = v6;
    uint64_t v260 = v4;
    uint64_t v235 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v235;
    uint64_t v6 = v247;
    uint64_t v4 = v260;
    uint64_t v2 = v274;
    int v82 = v81;
    a1 = v289;
    if (v82)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v301 = 82;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v301;
      }
      uint64_t v85 = &v300[v84];
      unint64_t v86 = v301 - v84;
      if (v301 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v301 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v235;
      uint64_t v6 = v247;
      uint64_t v4 = v260;
      uint64_t v2 = v274;
      a1 = v289;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v275 = v2;
    uint64_t v290 = a1;
    uint64_t v248 = v6;
    uint64_t v261 = v4;
    uint64_t v236 = v8;
    uint64_t v225 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v225;
    uint64_t v8 = v236;
    uint64_t v6 = v248;
    uint64_t v4 = v261;
    uint64_t v2 = v275;
    int v91 = v90;
    a1 = v290;
    if (v91)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v301 = 84;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v301;
      }
      uint64_t v94 = &v300[v93];
      unint64_t v95 = v301 - v93;
      if (v301 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v301 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v225;
      uint64_t v8 = v236;
      uint64_t v6 = v248;
      uint64_t v4 = v261;
      uint64_t v2 = v275;
      a1 = v290;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v276 = v2;
    uint64_t v291 = a1;
    uint64_t v249 = v6;
    uint64_t v262 = v4;
    uint64_t v237 = v8;
    uint64_t v216 = v12;
    uint64_t v226 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v216;
    uint64_t v10 = v226;
    uint64_t v8 = v237;
    uint64_t v6 = v249;
    uint64_t v4 = v262;
    uint64_t v2 = v276;
    int v100 = v99;
    a1 = v291;
    if (v100)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      unint64_t v301 = 85;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v301;
      }
      uint64_t v103 = &v300[v102];
      unint64_t v104 = v301 - v102;
      if (v301 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v301 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v216;
      uint64_t v10 = v226;
      uint64_t v8 = v237;
      uint64_t v6 = v249;
      uint64_t v4 = v262;
      uint64_t v2 = v276;
      a1 = v291;
    }
  }
  uint64_t v14 = v13[356];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v277 = v2;
    uint64_t v292 = a1;
    uint64_t v250 = v6;
    uint64_t v263 = v4;
    uint64_t v238 = v8;
    uint64_t v217 = v12;
    uint64_t v227 = v10;
    uint64_t v208 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v208;
    uint64_t v12 = v217;
    uint64_t v10 = v227;
    uint64_t v8 = v238;
    uint64_t v6 = v250;
    uint64_t v4 = v263;
    uint64_t v2 = v277;
    int v109 = v108;
    a1 = v292;
    if (v109)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v301 = 86;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v301;
      }
      unint64_t v112 = &v300[v111];
      unint64_t v113 = v301 - v111;
      if (v301 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v301 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v208;
      uint64_t v12 = v217;
      uint64_t v10 = v227;
      uint64_t v8 = v238;
      uint64_t v6 = v250;
      uint64_t v4 = v263;
      uint64_t v2 = v277;
      a1 = v292;
    }
  }
  uint64_t v16 = v15[350];
  uint64_t v17 = &unk_267772000;
  {
    uint64_t v278 = v2;
    uint64_t v293 = a1;
    uint64_t v251 = v6;
    uint64_t v264 = v4;
    uint64_t v239 = v8;
    uint64_t v218 = v12;
    uint64_t v228 = v10;
    uint64_t v201 = v16;
    uint64_t v209 = v14;
    uint64_t v17 = (void *)&unk_267772000;
    uint64_t v16 = v201;
    uint64_t v14 = v209;
    uint64_t v12 = v218;
    uint64_t v10 = v228;
    uint64_t v8 = v239;
    uint64_t v6 = v251;
    uint64_t v4 = v264;
    uint64_t v2 = v278;
    int v118 = v117;
    a1 = v293;
    if (v118)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v301 = 91;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v301;
      }
      unint64_t v121 = &v300[v120];
      unint64_t v122 = v301 - v120;
      if (v301 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v301 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v17 = (void *)&unk_267772000;
      uint64_t v16 = v201;
      uint64_t v14 = v209;
      uint64_t v12 = v218;
      uint64_t v10 = v228;
      uint64_t v8 = v239;
      uint64_t v6 = v251;
      uint64_t v4 = v264;
      uint64_t v2 = v278;
      a1 = v293;
    }
  }
  uint64_t v18 = v17[55];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v279 = v2;
    uint64_t v294 = a1;
    uint64_t v252 = v6;
    uint64_t v265 = v4;
    uint64_t v240 = v8;
    uint64_t v219 = v12;
    uint64_t v229 = v10;
    uint64_t v202 = v16;
    uint64_t v210 = v14;
    uint64_t v195 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v195;
    uint64_t v16 = v202;
    uint64_t v14 = v210;
    uint64_t v12 = v219;
    uint64_t v10 = v229;
    uint64_t v8 = v240;
    uint64_t v6 = v252;
    uint64_t v4 = v265;
    uint64_t v2 = v279;
    int v127 = v126;
    a1 = v294;
    if (v127)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v301 = 95;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v301;
      }
      unint64_t v130 = &v300[v129];
      unint64_t v131 = v301 - v129;
      if (v301 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v301 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v195;
      uint64_t v16 = v202;
      uint64_t v14 = v210;
      uint64_t v12 = v219;
      uint64_t v10 = v229;
      uint64_t v8 = v240;
      uint64_t v6 = v252;
      uint64_t v4 = v265;
      uint64_t v2 = v279;
      a1 = v294;
    }
  }
  uint64_t v20 = v19[322];
  int v21 = &unk_267771000;
  {
    uint64_t v280 = v2;
    uint64_t v295 = a1;
    uint64_t v253 = v6;
    uint64_t v266 = v4;
    uint64_t v241 = v8;
    uint64_t v220 = v12;
    uint64_t v230 = v10;
    uint64_t v203 = v16;
    uint64_t v211 = v14;
    uint64_t v190 = v20;
    uint64_t v196 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v190;
    uint64_t v18 = v196;
    uint64_t v16 = v203;
    uint64_t v14 = v211;
    uint64_t v12 = v220;
    uint64_t v10 = v230;
    uint64_t v8 = v241;
    uint64_t v6 = v253;
    uint64_t v4 = v266;
    uint64_t v2 = v280;
    int v136 = v135;
    a1 = v295;
    if (v136)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v301 = 99;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v301;
      }
      uint64_t v139 = &v300[v138];
      unint64_t v140 = v301 - v138;
      if (v301 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v301 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v190;
      uint64_t v18 = v196;
      uint64_t v16 = v203;
      uint64_t v14 = v211;
      uint64_t v12 = v220;
      uint64_t v10 = v230;
      uint64_t v8 = v241;
      uint64_t v6 = v253;
      uint64_t v4 = v266;
      uint64_t v2 = v280;
      a1 = v295;
    }
  }
  uint64_t v22 = v21[324];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v281 = v2;
    uint64_t v296 = a1;
    uint64_t v254 = v6;
    uint64_t v267 = v4;
    uint64_t v242 = v8;
    uint64_t v221 = v12;
    uint64_t v231 = v10;
    uint64_t v204 = v16;
    uint64_t v212 = v14;
    uint64_t v191 = v20;
    uint64_t v197 = v18;
    uint64_t v186 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v186;
    uint64_t v20 = v191;
    uint64_t v18 = v197;
    uint64_t v16 = v204;
    uint64_t v14 = v212;
    uint64_t v12 = v221;
    uint64_t v10 = v231;
    uint64_t v8 = v242;
    uint64_t v6 = v254;
    uint64_t v4 = v267;
    uint64_t v2 = v281;
    int v145 = v144;
    a1 = v296;
    if (v145)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v301 = 93;
      unint64_t v146 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v146) {
        unint64_t v147 = v146;
      }
      else {
        unint64_t v147 = v301;
      }
      uint64_t v148 = &v300[v147];
      unint64_t v149 = v301 - v147;
      if (v301 - v147 >= 0x12) {
        uint64_t v150 = 18;
      }
      else {
        uint64_t v150 = v301 - v147;
      }
      unint64_t v151 = v149 - v150;
      if (v151 >= v151 - 1) {
        uint64_t v152 = v151 - 1;
      }
      else {
        uint64_t v152 = v151;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v148[v150], v152);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v186;
      uint64_t v20 = v191;
      uint64_t v18 = v197;
      uint64_t v16 = v204;
      uint64_t v14 = v212;
      uint64_t v12 = v221;
      uint64_t v10 = v231;
      uint64_t v8 = v242;
      uint64_t v6 = v254;
      uint64_t v4 = v267;
      uint64_t v2 = v281;
      a1 = v296;
    }
  }
  uint64_t v24 = v23[31];
  int v25 = &unk_267771000;
  {
    uint64_t v282 = v2;
    uint64_t v297 = a1;
    uint64_t v255 = v6;
    uint64_t v268 = v4;
    uint64_t v243 = v8;
    uint64_t v222 = v12;
    uint64_t v232 = v10;
    uint64_t v205 = v16;
    uint64_t v213 = v14;
    uint64_t v192 = v20;
    uint64_t v198 = v18;
    uint64_t v183 = v24;
    uint64_t v187 = v22;
    int v25 = (void *)&unk_267771000;
    uint64_t v24 = v183;
    uint64_t v22 = v187;
    uint64_t v20 = v192;
    uint64_t v18 = v198;
    uint64_t v16 = v205;
    uint64_t v14 = v213;
    uint64_t v12 = v222;
    uint64_t v10 = v232;
    uint64_t v8 = v243;
    uint64_t v6 = v255;
    uint64_t v4 = v268;
    uint64_t v2 = v282;
    int v154 = v153;
    a1 = v297;
    if (v154)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultElementType<Empty>]";
      unint64_t v301 = 104;
      unint64_t v155 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v155) {
        unint64_t v156 = v155;
      }
      else {
        unint64_t v156 = v301;
      }
      uint64_t v157 = &v300[v156];
      unint64_t v158 = v301 - v156;
      if (v301 - v156 >= 0x12) {
        uint64_t v159 = 18;
      }
      else {
        uint64_t v159 = v301 - v156;
      }
      unint64_t v160 = v158 - v159;
      if (v160 >= v160 - 1) {
        uint64_t v161 = v160 - 1;
      }
      else {
        uint64_t v161 = v160;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v157[v159], v161);
      int v25 = (void *)&unk_267771000;
      uint64_t v24 = v183;
      uint64_t v22 = v187;
      uint64_t v20 = v192;
      uint64_t v18 = v198;
      uint64_t v16 = v205;
      uint64_t v14 = v213;
      uint64_t v12 = v222;
      uint64_t v10 = v232;
      uint64_t v8 = v243;
      uint64_t v6 = v255;
      uint64_t v4 = v268;
      uint64_t v2 = v282;
      a1 = v297;
    }
  }
  uint64_t v26 = v25[167];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v283 = v2;
    uint64_t v298 = a1;
    uint64_t v256 = v6;
    uint64_t v269 = v4;
    uint64_t v244 = v8;
    uint64_t v223 = v12;
    uint64_t v233 = v10;
    uint64_t v206 = v16;
    uint64_t v214 = v14;
    uint64_t v193 = v20;
    uint64_t v199 = v18;
    uint64_t v184 = v24;
    uint64_t v188 = v22;
    uint64_t v181 = v26;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v181;
    uint64_t v24 = v184;
    uint64_t v22 = v188;
    uint64_t v20 = v193;
    uint64_t v18 = v199;
    uint64_t v16 = v206;
    uint64_t v14 = v214;
    uint64_t v12 = v223;
    uint64_t v10 = v233;
    uint64_t v8 = v244;
    uint64_t v6 = v256;
    uint64_t v4 = v269;
    uint64_t v2 = v283;
    int v163 = v162;
    a1 = v298;
    if (v163)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      unint64_t v301 = 98;
      unint64_t v164 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v164) {
        unint64_t v165 = v164;
      }
      else {
        unint64_t v165 = v301;
      }
      uint64_t v166 = &v300[v165];
      unint64_t v167 = v301 - v165;
      if (v301 - v165 >= 0x12) {
        uint64_t v168 = 18;
      }
      else {
        uint64_t v168 = v301 - v165;
      }
      unint64_t v169 = v167 - v168;
      if (v169 >= v169 - 1) {
        uint64_t v170 = v169 - 1;
      }
      else {
        uint64_t v170 = v169;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v166[v168], v170);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v181;
      uint64_t v24 = v184;
      uint64_t v22 = v188;
      uint64_t v20 = v193;
      uint64_t v18 = v199;
      uint64_t v16 = v206;
      uint64_t v14 = v214;
      uint64_t v12 = v223;
      uint64_t v10 = v233;
      uint64_t v8 = v244;
      uint64_t v6 = v256;
      uint64_t v4 = v269;
      uint64_t v2 = v283;
      a1 = v298;
    }
  }
  uint64_t v28 = v27[65];
  uint64_t v29 = &unk_267772000;
  {
    uint64_t v284 = v2;
    uint64_t v299 = a1;
    uint64_t v257 = v6;
    uint64_t v270 = v4;
    uint64_t v245 = v8;
    uint64_t v224 = v12;
    uint64_t v234 = v10;
    uint64_t v207 = v16;
    uint64_t v215 = v14;
    uint64_t v194 = v20;
    uint64_t v200 = v18;
    uint64_t v185 = v24;
    uint64_t v189 = v22;
    uint64_t v180 = v28;
    uint64_t v182 = v26;
    uint64_t v29 = (void *)&unk_267772000;
    uint64_t v28 = v180;
    uint64_t v26 = v182;
    uint64_t v24 = v185;
    uint64_t v22 = v189;
    uint64_t v20 = v194;
    uint64_t v18 = v200;
    uint64_t v16 = v207;
    uint64_t v14 = v215;
    uint64_t v12 = v224;
    uint64_t v10 = v234;
    uint64_t v8 = v245;
    uint64_t v6 = v257;
    uint64_t v4 = v270;
    uint64_t v2 = v284;
    int v172 = v171;
    a1 = v299;
    if (v172)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v301 = 89;
      unint64_t v173 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v173) {
        unint64_t v174 = v173;
      }
      else {
        unint64_t v174 = v301;
      }
      uint64_t v175 = &v300[v174];
      unint64_t v176 = v301 - v174;
      if (v301 - v174 >= 0x12) {
        uint64_t v177 = 18;
      }
      else {
        uint64_t v177 = v301 - v174;
      }
      unint64_t v178 = v176 - v177;
      if (v178 >= v178 - 1) {
        uint64_t v179 = v178 - 1;
      }
      else {
        uint64_t v179 = v178;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v175[v177], v179);
      uint64_t v29 = (void *)&unk_267772000;
      uint64_t v28 = v180;
      uint64_t v26 = v182;
      uint64_t v24 = v185;
      uint64_t v22 = v189;
      uint64_t v20 = v194;
      uint64_t v18 = v200;
      uint64_t v16 = v207;
      uint64_t v14 = v215;
      uint64_t v12 = v224;
      uint64_t v10 = v234;
      uint64_t v8 = v245;
      uint64_t v6 = v257;
      uint64_t v4 = v270;
      uint64_t v2 = v284;
      a1 = v299;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v29[235] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneResult<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneOperand<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OpInvariants<mlir::memref::MemorySpaceCastOp>,mlir::CastOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::MemorySpaceCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::MemorySpaceCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::MemorySpaceCastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::MemorySpaceCastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneResult<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneOperand<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OpInvariants<mlir::memref::MemorySpaceCastOp>,mlir::CastOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::MemorySpaceCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::MemorySpaceCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::MemorySpaceCastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::MemorySpaceCastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v10 = a1, mlir::memref::CastOp::verifyInvariantsImpl((mlir::memref::CastOp *)&v10))
    && mlir::impl::verifyCastInterfaceOp(a1, v6)
    && mlir::OpTrait::impl::verifySameOperandsAndResultElementType(a1, v7))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  char v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0) {
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v5 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        char v5 = v7;
      }
      else {
        char v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::memref::PrefetchOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                       + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  int Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::PrefetchOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::PrefetchOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::PrefetchOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::PrefetchOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::getOpPropertyByteSize()
{
  return 24;
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    *(void *)(a3 + 16) = *((void *)a4 + 2);
    *(_OWORD *)a3 = v4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::PrefetchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::memref::PrefetchOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] == a2[1]) {
    return a3[2] == a2[2];
  }
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::PrefetchOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::PrefetchOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  mlir::memref::detail::PrefetchOpGenericAdaptorBase::PrefetchOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::memref::DeallocOp::fold(&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v87 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v19 = v18;
    a1 = v87;
    if (v19)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v94 = 83;
      unint64_t v20 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v94;
      }
      uint64_t v22 = &v93[v21];
      unint64_t v23 = v94 - v21;
      if (v94 - v21 >= 0x12) {
        uint64_t v24 = 18;
      }
      else {
        uint64_t v24 = v94 - v21;
      }
      unint64_t v25 = v23 - v24;
      if (v25 >= v25 - 1) {
        uint64_t v26 = v25 - 1;
      }
      else {
        uint64_t v26 = v25;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v87;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267770000;
  {
    uint64_t v82 = v2;
    uint64_t v88 = a1;
    char v3 = (void *)&unk_267770000;
    int v28 = v27;
    uint64_t v2 = v82;
    a1 = v88;
    if (v28)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v94 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v94;
      }
      int v31 = &v93[v30];
      unint64_t v32 = v94 - v30;
      if (v94 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v94 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      char v3 = (void *)&unk_267770000;
      uint64_t v2 = v82;
      a1 = v88;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v83 = v2;
    uint64_t v89 = a1;
    uint64_t v78 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v78;
    uint64_t v2 = v83;
    int v37 = v36;
    a1 = v89;
    if (v37)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v94 = 86;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v94;
      }
      int v40 = &v93[v39];
      unint64_t v41 = v94 - v39;
      if (v94 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v94 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v78;
      uint64_t v2 = v83;
      a1 = v89;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v84 = v2;
    uint64_t v90 = a1;
    uint64_t v75 = v6;
    uint64_t v79 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v75;
    uint64_t v4 = v79;
    int v46 = v45;
    uint64_t v2 = v84;
    a1 = v90;
    if (v46)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v94 = 97;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v94;
      }
      int v49 = &v93[v48];
      unint64_t v50 = v94 - v48;
      if (v94 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v94 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v75;
      uint64_t v4 = v79;
      uint64_t v2 = v84;
      a1 = v90;
    }
  }
  uint64_t v8 = v7[433];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v85 = v2;
    uint64_t v91 = a1;
    uint64_t v76 = v6;
    uint64_t v80 = v4;
    uint64_t v73 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v73;
    uint64_t v6 = v76;
    uint64_t v4 = v80;
    uint64_t v2 = v85;
    int v55 = v54;
    a1 = v91;
    if (v55)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v94 = 84;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v94;
      }
      int v58 = &v93[v57];
      unint64_t v59 = v94 - v57;
      if (v94 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v94 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v73;
      uint64_t v6 = v76;
      uint64_t v4 = v80;
      uint64_t v2 = v85;
      a1 = v91;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v86 = v2;
    uint64_t v92 = a1;
    uint64_t v77 = v6;
    uint64_t v81 = v4;
    uint64_t v72 = v10;
    uint64_t v74 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v72;
    uint64_t v8 = v74;
    uint64_t v6 = v77;
    uint64_t v4 = v81;
    int v64 = v63;
    uint64_t v2 = v86;
    a1 = v92;
    if (v64)
    {
      unint64_t v93 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v94 = 89;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v93, "DesiredTypeName = ", 0x12uLL, 0);
      if (v94 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v94;
      }
      int v67 = &v93[v66];
      unint64_t v68 = v94 - v66;
      if (v94 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v94 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v72;
      uint64_t v8 = v74;
      uint64_t v6 = v77;
      uint64_t v4 = v81;
      uint64_t v2 = v86;
      a1 = v92;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v11[320] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::memref::PrefetchOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::PrefetchOp::verifyInvariantsImpl((mlir::memref::PrefetchOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::PrefetchOp::verify((mlir::memref::PrefetchOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::RankOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.rank", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::RankOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379E80;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::RankOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::RankOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::RankOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::RankOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  void *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::isCompatibleReturnTypes;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[17], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::RankOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::RankOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  v22[4] = *MEMORY[0x263EF8340];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.rank";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::memref::detail::RankOpGenericAdaptorBase::RankOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::RankOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::RankOp::verifyInvariantsImpl((mlir::memref::RankOp *)&v7);
}

BOOL mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ReallocOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        unint64_t v10 = v11;
      }
      else {
        unint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::AssumeAlignmentOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AssumeAlignmentOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::AssumeAlignmentOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AllocOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::ReallocOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::AssumeAlignmentOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::ReallocOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v124 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v25 = v24;
    a1 = v124;
    if (v25)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v133 = 83;
      unint64_t v26 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v26) {
        unint64_t v27 = v26;
      }
      else {
        unint64_t v27 = v133;
      }
      int v28 = &v132[v27];
      unint64_t v29 = v133 - v27;
      if (v133 - v27 >= 0x12) {
        uint64_t v30 = 18;
      }
      else {
        uint64_t v30 = v133 - v27;
      }
      unint64_t v31 = v29 - v30;
      if (v31 >= v31 - 1) {
        uint64_t v32 = v31 - 1;
      }
      else {
        uint64_t v32 = v31;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v124;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v125 = a1;
    uint64_t v117 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v117;
    int v34 = v33;
    a1 = v125;
    if (v34)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v133 = 81;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v133;
      }
      int v37 = &v132[v36];
      unint64_t v38 = v133 - v36;
      if (v133 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v133 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v117;
      a1 = v125;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v126 = a1;
    uint64_t v111 = v4;
    uint64_t v118 = v2;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v111;
    uint64_t v2 = v118;
    int v43 = v42;
    a1 = v126;
    if (v43)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v133 = 110;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v133;
      }
      int v46 = &v132[v45];
      unint64_t v47 = v133 - v45;
      if (v133 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v133 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v111;
      uint64_t v2 = v118;
      a1 = v126;
    }
  }
  uint64_t v6 = v5[27];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v127 = a1;
    uint64_t v112 = v4;
    uint64_t v119 = v2;
    uint64_t v106 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v106;
    uint64_t v4 = v112;
    uint64_t v2 = v119;
    int v52 = v51;
    a1 = v127;
    if (v52)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v133 = 86;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v133;
      }
      int v55 = &v132[v54];
      unint64_t v56 = v133 - v54;
      if (v133 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v133 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v106;
      uint64_t v4 = v112;
      uint64_t v2 = v119;
      a1 = v127;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v128 = a1;
    uint64_t v113 = v4;
    uint64_t v120 = v2;
    uint64_t v102 = v8;
    uint64_t v107 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v102;
    uint64_t v6 = v107;
    uint64_t v4 = v113;
    uint64_t v2 = v120;
    int v61 = v60;
    a1 = v128;
    if (v61)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v133 = 97;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v133;
      }
      int v64 = &v132[v63];
      unint64_t v65 = v133 - v63;
      if (v133 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v133 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v102;
      uint64_t v6 = v107;
      uint64_t v4 = v113;
      uint64_t v2 = v120;
      a1 = v128;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v129 = a1;
    uint64_t v114 = v4;
    uint64_t v121 = v2;
    uint64_t v103 = v8;
    uint64_t v108 = v6;
    uint64_t v99 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v99;
    uint64_t v8 = v103;
    uint64_t v6 = v108;
    uint64_t v4 = v114;
    uint64_t v2 = v121;
    int v70 = v69;
    a1 = v129;
    if (v70)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v133 = 84;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v133;
      }
      uint64_t v73 = &v132[v72];
      unint64_t v74 = v133 - v72;
      if (v133 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v133 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v99;
      uint64_t v8 = v103;
      uint64_t v6 = v108;
      uint64_t v4 = v114;
      uint64_t v2 = v121;
      a1 = v129;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v130 = a1;
    uint64_t v115 = v4;
    uint64_t v122 = v2;
    uint64_t v104 = v8;
    uint64_t v109 = v6;
    uint64_t v97 = v12;
    uint64_t v100 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v97;
    uint64_t v10 = v100;
    uint64_t v8 = v104;
    uint64_t v6 = v109;
    uint64_t v4 = v115;
    uint64_t v2 = v122;
    int v79 = v78;
    a1 = v130;
    if (v79)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v133 = 89;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v133;
      }
      uint64_t v82 = &v132[v81];
      unint64_t v83 = v133 - v81;
      if (v133 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v133 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v97;
      uint64_t v10 = v100;
      uint64_t v8 = v104;
      uint64_t v6 = v109;
      uint64_t v4 = v115;
      uint64_t v2 = v122;
      a1 = v130;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v131 = a1;
    uint64_t v116 = v4;
    uint64_t v123 = v2;
    uint64_t v105 = v8;
    uint64_t v110 = v6;
    uint64_t v98 = v12;
    uint64_t v101 = v10;
    uint64_t v96 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v96;
    uint64_t v12 = v98;
    uint64_t v10 = v101;
    uint64_t v8 = v105;
    uint64_t v6 = v110;
    uint64_t v4 = v116;
    uint64_t v2 = v123;
    int v88 = v87;
    a1 = v131;
    if (v88)
    {
      uint64_t v132 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v133 = 93;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v132, "DesiredTypeName = ", 0x12uLL, 0);
      if (v133 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v133;
      }
      uint64_t v91 = &v132[v90];
      unint64_t v92 = v133 - v90;
      if (v133 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v133 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v96;
      uint64_t v12 = v98;
      uint64_t v10 = v101;
      uint64_t v8 = v105;
      uint64_t v6 = v110;
      uint64_t v4 = v116;
      uint64_t v2 = v123;
      a1 = v131;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || v14 == a1 || v15[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::ReallocOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::ReallocOp::verifyInvariantsImpl((mlir::memref::ReallocOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::ReallocOp::verify((mlir::memref::ReallocOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.reinterpret_cast", 23, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ReinterpretCastOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379778;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ReinterpretCastOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::ReinterpretCastOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::ReinterpretCastOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::ReinterpretCastOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::ReinterpretCastOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    *(void *)(a3 + 32) = *((void *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(void *)&long long v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::ReinterpretCastOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::memref::ReinterpretCastOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] != a2[1]) {
    return 0;
  }
  if (a3[2] != a2[2]) {
    return 0;
  }
  return a3[3] == a2[3] && a3[4] == a2[4];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::ReinterpretCastOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::ReinterpretCastOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::ReinterpretCastOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0xD0uLL, 0x80040B342C78EuLL);
  void *v2 = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getOffsetSizeAndStrideStartOperandIndex;
  v2[1] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getArrayAttrMaxRanks;
  v2[2] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getOffsets;
  v2[3] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getSizes;
  v2[4] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStrides;
  v2[5] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticOffsets;
  v2[6] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticSizes;
  v2[7] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticStrides;
  v2[8] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedOffsets;
  v2[9] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedSizes;
  v2[10] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedStrides;
  v2[11] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicOffset;
  v2[12] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicSize;
  v2[13] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicStride;
  v2[14] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticOffset;
  v2[15] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticSize;
  v2[16] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticStride;
  v2[17] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicOffset;
  v2[18] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicSize;
  v2[19] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicStride;
  v2[20] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicOffset;
  v2[21] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicSize;
  v2[22] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicStride;
  v2[23] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isSameAs;
  v2[24] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::hasUnitStride;
  v2[25] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::hasZeroOffset;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[269], v2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getOffsetSizeAndStrideStartOperandIndex()
{
  return 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getArrayAttrMaxRanks(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unint64_t v5 = *(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v4) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  return (v2 << 32) | 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedOffsets(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedSizes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedStrides(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v7);
  return mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3) + 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return (NumDynamicEntriesUpToIdx + v7 + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  int v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return (v8 + v9 + NumDynamicEntriesUpToIdx + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v8);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3);
  return *(void *)(*(void *)(v8 + 72) + 32 * (NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return *(void *)(*(void *)(v9 + 72) + 32 * (NumDynamicEntriesUpToIdx + v7 + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  int v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return *(void *)(*(void *)(v11 + 72) + 32 * (v8 + v9 + NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isSameAs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void, void), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::isSameAs(&v7, a3, a4, a5, a6);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::hasUnitStride(uint64_t a1, uint64_t a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  uint64_t v2 = (uint64_t *)v12;
  if (!v13)
  {
    uint64_t v8 = 1;
    if (v12 == v14) {
      return v8;
    }
    goto LABEL_15;
  }
  uint64_t v3 = 8 * v13 - 8;
  do
  {
    uint64_t v4 = *v2++;
    unint64_t ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6) {
      BOOL v7 = ConstantIntValue == 1;
    }
    else {
      BOOL v7 = 0;
    }
    uint64_t v8 = v7;
    BOOL v9 = v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  uint64_t v2 = (uint64_t *)v12;
  if (v12 != v14) {
LABEL_15:
  }
    free(v2);
  return v8;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::hasZeroOffset(uint64_t a1, uint64_t a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  uint64_t v2 = (uint64_t *)v12;
  if (!v13)
  {
    uint64_t v8 = 1;
    if (v12 == v14) {
      return v8;
    }
    goto LABEL_15;
  }
  uint64_t v3 = 8 * v13 - 8;
  do
  {
    uint64_t v4 = *v2++;
    unint64_t ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6) {
      BOOL v7 = ConstantIntValue == 0;
    }
    else {
      BOOL v7 = 0;
    }
    uint64_t v8 = v7;
    BOOL v9 = v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  uint64_t v2 = (uint64_t *)v12;
  if (v12 != v14) {
LABEL_15:
  }
    free(v2);
  return v8;
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets(mlir::memref::ReinterpretCastOp *a1@<X0>, uint64_t a2@<X8>)
{
  v18[6] = *MEMORY[0x263EF8340];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  Staticuint64_t Offsets = (uint64_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets(a1);
  unint64_t v6 = v5;
  uint64_t Offsets = mlir::memref::ReinterpretCastOp::getOffsets(a1);
  mlir::ValueRange::ValueRange(v14, Offsets, v8);
  mlir::getMixedValues(StaticOffsets, v6, v14[0], v14[1], (mlir::Builder *)&Context, (uint64_t)&__src);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  unsigned int v9 = v16;
  unint64_t v10 = __src;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v18)
    {
      unsigned int v12 = v16;
      if (v16 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 8), v12 = v16, unint64_t v10 = __src, v16))
      {
        memcpy(*(void **)a2, v10, 8 * v12);
        unint64_t v10 = __src;
      }
      *(_DWORD *)(a2 + 8) = v9;
    }
    else
    {
      *(void *)a2 = __src;
      int v11 = v17;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v11;
      __src = v18;
      int v17 = 0;
      unint64_t v10 = v18;
    }
    unsigned int v16 = 0;
  }
  if (v10 != v18) {
    free(v10);
  }
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(mlir::memref::ReinterpretCastOp *a1@<X0>, uint64_t a2@<X8>)
{
  v18[6] = *MEMORY[0x263EF8340];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  Staticuint64_t Sizes = (uint64_t *)mlir::memref::ReinterpretCastOp::getStaticSizes(a1);
  unint64_t v6 = v5;
  uint64_t Sizes = mlir::memref::ReinterpretCastOp::getSizes(a1);
  mlir::ValueRange::ValueRange(v14, Sizes, v8);
  mlir::getMixedValues(StaticSizes, v6, v14[0], v14[1], (mlir::Builder *)&Context, (uint64_t)&__src);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  unsigned int v9 = v16;
  unint64_t v10 = __src;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v18)
    {
      unsigned int v12 = v16;
      if (v16 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 8), v12 = v16, unint64_t v10 = __src, v16))
      {
        memcpy(*(void **)a2, v10, 8 * v12);
        unint64_t v10 = __src;
      }
      *(_DWORD *)(a2 + 8) = v9;
    }
    else
    {
      *(void *)a2 = __src;
      int v11 = v17;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v11;
      __src = v18;
      int v17 = 0;
      unint64_t v10 = v18;
    }
    unsigned int v16 = 0;
  }
  if (v10 != v18) {
    free(v10);
  }
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(mlir::memref::ReinterpretCastOp *a1@<X0>, uint64_t a2@<X8>)
{
  v18[6] = *MEMORY[0x263EF8340];
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  Staticuint64_t Strides = (uint64_t *)mlir::memref::ReinterpretCastOp::getStaticStrides(a1);
  unint64_t v6 = v5;
  uint64_t Strides = mlir::memref::ReinterpretCastOp::getStrides(a1);
  mlir::ValueRange::ValueRange(v14, Strides, v8);
  mlir::getMixedValues(StaticStrides, v6, v14[0], v14[1], (mlir::Builder *)&Context, (uint64_t)&__src);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  unsigned int v9 = v16;
  unint64_t v10 = __src;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v18)
    {
      unsigned int v12 = v16;
      if (v16 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 8), v12 = v16, unint64_t v10 = __src, v16))
      {
        memcpy(*(void **)a2, v10, 8 * v12);
        unint64_t v10 = __src;
      }
      *(_DWORD *)(a2 + 8) = v9;
    }
    else
    {
      *(void *)a2 = __src;
      int v11 = v17;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v11;
      __src = v18;
      int v17 = 0;
      unint64_t v10 = v18;
    }
    unsigned int v16 = 0;
  }
  if (v10 != v18) {
    free(v10);
  }
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::isSameAs(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void), uint64_t a5)
{
  uint64_t v9 = *a1;
  if (!*a1) {
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  int v11 = *(void **)(v10 + 16);
  BOOL v12 = v11 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v11 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(v9 + 48);
  }
  if (v12)
  {
    uint64_t v19 = *(void *)(v10 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v19);
    if (Values)
    {
      uint64_t v17 = v10;
      goto LABEL_10;
    }
LABEL_11:
    uint64_t v15 = 0;
    return mlir::detail::sameOffsetsSizesAndStrides(v9, v15, a2, a3, a4, a5);
  }
  unint64_t v14 = v13 | v10 & 0xFFFFFFFFFFFFFF00;
  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::OffsetSizeAndStrideOpInterface>(v14 + 32);
  if (!v15)
  {
    uint64_t Values = *(void *)(v14 + 24);
    uint64_t v17 = *(void *)(v9 + 48);
LABEL_10:
    uint64_t v15 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::OffsetSizeAndStrideOpInterface>(Values, v17);
  }
  return mlir::detail::sameOffsetsSizesAndStrides(v9, v15, a2, a3, a4, a5);
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::OffsetSizeAndStrideOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = &unk_267772000;
  {
    uint64_t v15 = a1;
    uint64_t v3 = (void *)&unk_267772000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      unsigned int v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      unint64_t v17 = 86;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      uint64_t v3 = (void *)&unk_267772000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, v3[269], v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::OffsetSizeAndStrideOpInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267772000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267772000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      unint64_t v22 = 86;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267772000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[269];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  unint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getViewSource;
  unint64_t v3 = &unk_267771000;
  {
    int v12 = v2;
    unint64_t v3 = (void *)&unk_267771000;
    unint64_t v2 = v12;
    if (v4)
    {
      unint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      unint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = (void *)&unk_267771000;
      unint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[419], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::ReinterpretCastOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::ReinterpretCastOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v285 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v46 = v45;
    a1 = v285;
    if (v46)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v301 = 83;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v301;
      }
      unint64_t v49 = &v300[v48];
      unint64_t v50 = v301 - v48;
      if (v301 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v301 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v285;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v271 = v2;
    uint64_t v286 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v55 = v54;
    uint64_t v2 = v271;
    a1 = v286;
    if (v55)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v301 = 81;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v301;
      }
      unint64_t v58 = &v300[v57];
      unint64_t v59 = v301 - v57;
      if (v301 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v301 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v271;
      a1 = v286;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v272 = v2;
    uint64_t v287 = a1;
    uint64_t v258 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v258;
    uint64_t v2 = v272;
    int v64 = v63;
    a1 = v287;
    if (v64)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v301 = 110;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v301;
      }
      unint64_t v67 = &v300[v66];
      unint64_t v68 = v301 - v66;
      if (v301 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v301 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v258;
      uint64_t v2 = v272;
      a1 = v287;
    }
  }
  uint64_t v6 = v5[27];
  unint64_t v7 = &unk_267770000;
  {
    uint64_t v273 = v2;
    uint64_t v288 = a1;
    uint64_t v246 = v6;
    uint64_t v259 = v4;
    unint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v246;
    uint64_t v4 = v259;
    int v73 = v72;
    uint64_t v2 = v273;
    a1 = v288;
    if (v73)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v301 = 86;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v301;
      }
      unint64_t v76 = &v300[v75];
      unint64_t v77 = v301 - v75;
      if (v301 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v301 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      unint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v246;
      uint64_t v4 = v259;
      uint64_t v2 = v273;
      a1 = v288;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v274 = v2;
    uint64_t v289 = a1;
    uint64_t v247 = v6;
    uint64_t v260 = v4;
    uint64_t v235 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v235;
    uint64_t v6 = v247;
    uint64_t v4 = v260;
    uint64_t v2 = v274;
    int v82 = v81;
    a1 = v289;
    if (v82)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v301 = 97;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v301;
      }
      unint64_t v85 = &v300[v84];
      unint64_t v86 = v301 - v84;
      if (v301 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v301 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v235;
      uint64_t v6 = v247;
      uint64_t v4 = v260;
      uint64_t v2 = v274;
      a1 = v289;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v275 = v2;
    uint64_t v290 = a1;
    uint64_t v248 = v6;
    uint64_t v261 = v4;
    uint64_t v236 = v8;
    uint64_t v225 = v10;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v225;
    uint64_t v8 = v236;
    uint64_t v6 = v248;
    uint64_t v4 = v261;
    uint64_t v2 = v275;
    int v91 = v90;
    a1 = v290;
    if (v91)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v301 = 96;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v301;
      }
      unint64_t v94 = &v300[v93];
      unint64_t v95 = v301 - v93;
      if (v301 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v301 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v225;
      uint64_t v8 = v236;
      uint64_t v6 = v248;
      uint64_t v4 = v261;
      uint64_t v2 = v275;
      a1 = v290;
    }
  }
  uint64_t v12 = v11[47];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v276 = v2;
    uint64_t v291 = a1;
    uint64_t v249 = v6;
    uint64_t v262 = v4;
    uint64_t v237 = v8;
    uint64_t v216 = v12;
    uint64_t v226 = v10;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v216;
    uint64_t v10 = v226;
    uint64_t v8 = v237;
    uint64_t v6 = v249;
    uint64_t v4 = v262;
    uint64_t v2 = v276;
    int v100 = v99;
    a1 = v291;
    if (v100)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v301 = 84;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v301;
      }
      uint64_t v103 = &v300[v102];
      unint64_t v104 = v301 - v102;
      if (v301 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v301 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v216;
      uint64_t v10 = v226;
      uint64_t v8 = v237;
      uint64_t v6 = v249;
      uint64_t v4 = v262;
      uint64_t v2 = v276;
      a1 = v291;
    }
  }
  uint64_t v14 = v13[435];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v277 = v2;
    uint64_t v292 = a1;
    uint64_t v250 = v6;
    uint64_t v263 = v4;
    uint64_t v238 = v8;
    uint64_t v217 = v12;
    uint64_t v227 = v10;
    uint64_t v208 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v208;
    uint64_t v12 = v217;
    uint64_t v10 = v227;
    uint64_t v8 = v238;
    uint64_t v6 = v250;
    uint64_t v4 = v263;
    uint64_t v2 = v277;
    int v109 = v108;
    a1 = v292;
    if (v109)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v301 = 89;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v301;
      }
      uint64_t v112 = &v300[v111];
      unint64_t v113 = v301 - v111;
      if (v301 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v301 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v208;
      uint64_t v12 = v217;
      uint64_t v10 = v227;
      uint64_t v8 = v238;
      uint64_t v6 = v250;
      uint64_t v4 = v263;
      uint64_t v2 = v277;
      a1 = v292;
    }
  }
  uint64_t v16 = v15[320];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v278 = v2;
    uint64_t v293 = a1;
    uint64_t v251 = v6;
    uint64_t v264 = v4;
    uint64_t v239 = v8;
    uint64_t v218 = v12;
    uint64_t v228 = v10;
    uint64_t v201 = v16;
    uint64_t v209 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v201;
    uint64_t v14 = v209;
    uint64_t v12 = v218;
    uint64_t v10 = v228;
    uint64_t v8 = v239;
    uint64_t v6 = v251;
    uint64_t v4 = v264;
    uint64_t v2 = v278;
    int v118 = v117;
    a1 = v293;
    if (v118)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v301 = 86;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v301;
      }
      uint64_t v121 = &v300[v120];
      unint64_t v122 = v301 - v120;
      if (v301 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v301 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v201;
      uint64_t v14 = v209;
      uint64_t v12 = v218;
      uint64_t v10 = v228;
      uint64_t v8 = v239;
      uint64_t v6 = v251;
      uint64_t v4 = v264;
      uint64_t v2 = v278;
      a1 = v293;
    }
  }
  uint64_t v18 = v17[350];
  uint64_t v19 = &unk_267772000;
  {
    uint64_t v279 = v2;
    uint64_t v294 = a1;
    uint64_t v252 = v6;
    uint64_t v265 = v4;
    uint64_t v240 = v8;
    uint64_t v219 = v12;
    uint64_t v229 = v10;
    uint64_t v202 = v16;
    uint64_t v210 = v14;
    uint64_t v195 = v18;
    uint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v195;
    uint64_t v16 = v202;
    uint64_t v14 = v210;
    uint64_t v12 = v219;
    uint64_t v10 = v229;
    uint64_t v8 = v240;
    uint64_t v6 = v252;
    uint64_t v4 = v265;
    uint64_t v2 = v279;
    int v127 = v126;
    a1 = v294;
    if (v127)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v301 = 91;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v301;
      }
      uint64_t v130 = &v300[v129];
      unint64_t v131 = v301 - v129;
      if (v301 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v301 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      uint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v195;
      uint64_t v16 = v202;
      uint64_t v14 = v210;
      uint64_t v12 = v219;
      uint64_t v10 = v229;
      uint64_t v8 = v240;
      uint64_t v6 = v252;
      uint64_t v4 = v265;
      uint64_t v2 = v279;
      a1 = v294;
    }
  }
  uint64_t v20 = v19[55];
  uint64_t v21 = &unk_267771000;
  {
    uint64_t v280 = v2;
    uint64_t v295 = a1;
    uint64_t v253 = v6;
    uint64_t v266 = v4;
    uint64_t v241 = v8;
    uint64_t v220 = v12;
    uint64_t v230 = v10;
    uint64_t v203 = v16;
    uint64_t v211 = v14;
    uint64_t v190 = v20;
    uint64_t v196 = v18;
    uint64_t v21 = (void *)&unk_267771000;
    uint64_t v20 = v190;
    uint64_t v18 = v196;
    uint64_t v16 = v203;
    uint64_t v14 = v211;
    uint64_t v12 = v220;
    uint64_t v10 = v230;
    uint64_t v8 = v241;
    uint64_t v6 = v253;
    uint64_t v4 = v266;
    uint64_t v2 = v280;
    int v136 = v135;
    a1 = v295;
    if (v136)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v301 = 95;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v301;
      }
      uint64_t v139 = &v300[v138];
      unint64_t v140 = v301 - v138;
      if (v301 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v301 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v21 = (void *)&unk_267771000;
      uint64_t v20 = v190;
      uint64_t v18 = v196;
      uint64_t v16 = v203;
      uint64_t v14 = v211;
      uint64_t v12 = v220;
      uint64_t v10 = v230;
      uint64_t v8 = v241;
      uint64_t v6 = v253;
      uint64_t v4 = v266;
      uint64_t v2 = v280;
      a1 = v295;
    }
  }
  uint64_t v22 = v21[322];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v281 = v2;
    uint64_t v296 = a1;
    uint64_t v254 = v6;
    uint64_t v267 = v4;
    uint64_t v242 = v8;
    uint64_t v221 = v12;
    uint64_t v231 = v10;
    uint64_t v204 = v16;
    uint64_t v212 = v14;
    uint64_t v191 = v20;
    uint64_t v197 = v18;
    uint64_t v186 = v22;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v186;
    uint64_t v20 = v191;
    uint64_t v18 = v197;
    uint64_t v16 = v204;
    uint64_t v14 = v212;
    uint64_t v12 = v221;
    uint64_t v10 = v231;
    uint64_t v8 = v242;
    uint64_t v6 = v254;
    uint64_t v4 = v267;
    uint64_t v2 = v281;
    int v145 = v144;
    a1 = v296;
    if (v145)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v301 = 99;
      unint64_t v146 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v146) {
        unint64_t v147 = v146;
      }
      else {
        unint64_t v147 = v301;
      }
      uint64_t v148 = &v300[v147];
      unint64_t v149 = v301 - v147;
      if (v301 - v147 >= 0x12) {
        uint64_t v150 = 18;
      }
      else {
        uint64_t v150 = v301 - v147;
      }
      unint64_t v151 = v149 - v150;
      if (v151 >= v151 - 1) {
        uint64_t v152 = v151 - 1;
      }
      else {
        uint64_t v152 = v151;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v148[v150], v152);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v186;
      uint64_t v20 = v191;
      uint64_t v18 = v197;
      uint64_t v16 = v204;
      uint64_t v14 = v212;
      uint64_t v12 = v221;
      uint64_t v10 = v231;
      uint64_t v8 = v242;
      uint64_t v6 = v254;
      uint64_t v4 = v267;
      uint64_t v2 = v281;
      a1 = v296;
    }
  }
  uint64_t v24 = v23[324];
  int v25 = &unk_267771000;
  {
    uint64_t v282 = v2;
    uint64_t v297 = a1;
    uint64_t v255 = v6;
    uint64_t v268 = v4;
    uint64_t v243 = v8;
    uint64_t v222 = v12;
    uint64_t v232 = v10;
    uint64_t v205 = v16;
    uint64_t v213 = v14;
    uint64_t v192 = v20;
    uint64_t v198 = v18;
    uint64_t v183 = v24;
    uint64_t v187 = v22;
    int v25 = (void *)&unk_267771000;
    uint64_t v24 = v183;
    uint64_t v22 = v187;
    uint64_t v20 = v192;
    uint64_t v18 = v198;
    uint64_t v16 = v205;
    uint64_t v14 = v213;
    uint64_t v12 = v222;
    uint64_t v10 = v232;
    uint64_t v8 = v243;
    uint64_t v6 = v255;
    uint64_t v4 = v268;
    uint64_t v2 = v282;
    int v154 = v153;
    a1 = v297;
    if (v154)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v301 = 93;
      unint64_t v155 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v155) {
        unint64_t v156 = v155;
      }
      else {
        unint64_t v156 = v301;
      }
      uint64_t v157 = &v300[v156];
      unint64_t v158 = v301 - v156;
      if (v301 - v156 >= 0x12) {
        uint64_t v159 = 18;
      }
      else {
        uint64_t v159 = v301 - v156;
      }
      unint64_t v160 = v158 - v159;
      if (v160 >= v160 - 1) {
        uint64_t v161 = v160 - 1;
      }
      else {
        uint64_t v161 = v160;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v157[v159], v161);
      int v25 = (void *)&unk_267771000;
      uint64_t v24 = v183;
      uint64_t v22 = v187;
      uint64_t v20 = v192;
      uint64_t v18 = v198;
      uint64_t v16 = v205;
      uint64_t v14 = v213;
      uint64_t v12 = v222;
      uint64_t v10 = v232;
      uint64_t v8 = v243;
      uint64_t v6 = v255;
      uint64_t v4 = v268;
      uint64_t v2 = v282;
      a1 = v297;
    }
  }
  uint64_t v26 = v25[31];
  unint64_t v27 = &unk_267772000;
  {
    uint64_t v283 = v2;
    uint64_t v298 = a1;
    uint64_t v256 = v6;
    uint64_t v269 = v4;
    uint64_t v244 = v8;
    uint64_t v223 = v12;
    uint64_t v233 = v10;
    uint64_t v206 = v16;
    uint64_t v214 = v14;
    uint64_t v193 = v20;
    uint64_t v199 = v18;
    uint64_t v184 = v24;
    uint64_t v188 = v22;
    uint64_t v181 = v26;
    unint64_t v27 = (void *)&unk_267772000;
    uint64_t v26 = v181;
    uint64_t v24 = v184;
    uint64_t v22 = v188;
    uint64_t v20 = v193;
    uint64_t v18 = v199;
    uint64_t v16 = v206;
    uint64_t v14 = v214;
    uint64_t v12 = v223;
    uint64_t v10 = v233;
    uint64_t v8 = v244;
    uint64_t v6 = v256;
    uint64_t v4 = v269;
    uint64_t v2 = v283;
    int v163 = v162;
    a1 = v298;
    if (v163)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface::Trait<Empty>]";
      unint64_t v301 = 100;
      unint64_t v164 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v164) {
        unint64_t v165 = v164;
      }
      else {
        unint64_t v165 = v301;
      }
      uint64_t v166 = &v300[v165];
      unint64_t v167 = v301 - v165;
      if (v301 - v165 >= 0x12) {
        uint64_t v168 = 18;
      }
      else {
        uint64_t v168 = v301 - v165;
      }
      unint64_t v169 = v167 - v168;
      if (v169 >= v169 - 1) {
        uint64_t v170 = v169 - 1;
      }
      else {
        uint64_t v170 = v169;
      }
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OffsetSizeAndStrideOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v166[v168], v170);
      unint64_t v27 = (void *)&unk_267772000;
      uint64_t v26 = v181;
      uint64_t v24 = v184;
      uint64_t v22 = v188;
      uint64_t v20 = v193;
      uint64_t v18 = v199;
      uint64_t v16 = v206;
      uint64_t v14 = v214;
      uint64_t v12 = v223;
      uint64_t v10 = v233;
      uint64_t v8 = v244;
      uint64_t v6 = v256;
      uint64_t v4 = v269;
      uint64_t v2 = v283;
      a1 = v298;
    }
  }
  uint64_t v28 = v27[271];
  unint64_t v29 = &unk_267772000;
  {
    uint64_t v284 = v2;
    uint64_t v299 = a1;
    uint64_t v257 = v6;
    uint64_t v270 = v4;
    uint64_t v245 = v8;
    uint64_t v224 = v12;
    uint64_t v234 = v10;
    uint64_t v207 = v16;
    uint64_t v215 = v14;
    uint64_t v194 = v20;
    uint64_t v200 = v18;
    uint64_t v185 = v24;
    uint64_t v189 = v22;
    uint64_t v180 = v28;
    uint64_t v182 = v26;
    unint64_t v29 = (void *)&unk_267772000;
    uint64_t v28 = v180;
    uint64_t v26 = v182;
    uint64_t v24 = v185;
    uint64_t v22 = v189;
    uint64_t v20 = v194;
    uint64_t v18 = v200;
    uint64_t v16 = v207;
    uint64_t v14 = v215;
    uint64_t v12 = v224;
    uint64_t v10 = v234;
    uint64_t v8 = v245;
    uint64_t v6 = v257;
    uint64_t v4 = v270;
    uint64_t v2 = v284;
    int v172 = v171;
    a1 = v299;
    if (v172)
    {
      v300 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v301 = 89;
      unint64_t v173 = llvm::StringRef::find((uint64_t *)&v300, "DesiredTypeName = ", 0x12uLL, 0);
      if (v301 >= v173) {
        unint64_t v174 = v173;
      }
      else {
        unint64_t v174 = v301;
      }
      uint64_t v175 = &v300[v174];
      unint64_t v176 = v301 - v174;
      if (v301 - v174 >= 0x12) {
        uint64_t v177 = 18;
      }
      else {
        uint64_t v177 = v301 - v174;
      }
      unint64_t v178 = v176 - v177;
      if (v178 >= v178 - 1) {
        uint64_t v179 = v178 - 1;
      }
      else {
        uint64_t v179 = v178;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v175[v177], v179);
      unint64_t v29 = (void *)&unk_267772000;
      uint64_t v28 = v180;
      uint64_t v26 = v182;
      uint64_t v24 = v185;
      uint64_t v22 = v189;
      uint64_t v20 = v194;
      uint64_t v18 = v200;
      uint64_t v16 = v207;
      uint64_t v14 = v215;
      uint64_t v12 = v224;
      uint64_t v10 = v234;
      uint64_t v8 = v245;
      uint64_t v6 = v257;
      uint64_t v4 = v270;
      uint64_t v2 = v284;
      a1 = v299;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v28 == a1
      || v29[235] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::ReinterpretCastOp::print((mlir::memref::ReinterpretCastOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OneResult<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OpInvariants<mlir::memref::ReinterpretCastOp>,mlir::BytecodeOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::ReinterpretCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::ReinterpretCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::memref::ReinterpretCastOp::verify((mlir::memref::ReinterpretCastOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OneResult<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OpInvariants<mlir::memref::ReinterpretCastOp>,mlir::BytecodeOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::ReinterpretCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::ReinterpretCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (uint64_t v6 = a1, mlir::memref::ReinterpretCastOp::verifyInvariantsImpl((mlir::memref::ReinterpretCastOp *)&v6)))
  {
    return mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::verifyTrait((uint64_t)a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::verifyTrait(uint64_t a1)
{
  if (!a1) {
    return mlir::detail::verifyOffsetSizeAndStrideOp(a1, 0);
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (!v4)
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::OffsetSizeAndStrideOpInterface>(v6 + 32);
    if (v7) {
      return mlir::detail::verifyOffsetSizeAndStrideOp(a1, v7);
    }
    uint64_t Values = *(void *)(v6 + 24);
    uint64_t v10 = *(void *)(a1 + 48);
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(v2 + 8);
  uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v12);
  if (!Values) {
    return mlir::detail::verifyOffsetSizeAndStrideOp(a1, 0);
  }
  uint64_t v10 = v2;
LABEL_12:
  uint64_t v11 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::OffsetSizeAndStrideOpInterface>(Values, v10);
  return mlir::detail::verifyOffsetSizeAndStrideOp(a1, v11);
}

uint64_t mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReshapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.reshape", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ReshapeOp,void>::id, (uint64_t)&v9);
  BOOL v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    BOOL v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37A588;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ReshapeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      uint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      uint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::ReshapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReshapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReshapeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReshapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getViewSource;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[419], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      int v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      int v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267772000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267772000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<Empty>]";
      unint64_t v199 = 114;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      int v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267772000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[233];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      int v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v199 = 90;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      int v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[89];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      int v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      int v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[350];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      int v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[322];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      int v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[324];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      int v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[31];
  int v21 = &unk_267772000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    int v21 = (void *)&unk_267772000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v199 = 89;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      int v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      int v21 = (void *)&unk_267772000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[235] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::ReshapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::ReshapeOp::verifyInvariantsImpl((mlir::memref::ReshapeOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::ReshapeOp::verify((mlir::memref::ReshapeOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.store", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::StoreOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37A0D8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  char v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0) {
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v5 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        char v5 = v7;
      }
      else {
        char v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::StoreOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::LoadOp::getInherentAttr(Context, v8, a3, a4);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::LoadOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::LoadOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::LoadOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::LoadOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::LoadOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  void *v2 = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::loadsFrom;
  v2[1] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::storesTo;
  v2[2] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::getStored;
  v2[3] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::canUsesBeRemoved;
  v2[4] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::removeBlockingUses;
  char v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface]";
      unint64_t v14 = 80;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[199], v2);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::loadsFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return Layer2TDMapper::SourceLayer::IsGraphInitialization((Layer2TDMapper::SourceLayer *)&v3);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::storesTo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  return mlir::memref::StoreOp::storesTo((uint64_t)&v4, a3);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::getStored(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::StoreOp::getStored(&v5, a3, a4);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::canUsesBeRemoved(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::StoreOp::canUsesBeRemoved((mlir::anec::Deconvolution *)&v5, a3, a4);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::removeBlockingUses()
{
  return ZinIrConstData_specialization<half>::prepare();
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::canRewire;
  v2[1] = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::rewire;
  uint64_t v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface]";
      unint64_t v14 = 89;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[201], v2);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::canRewire(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::StoreOp::canRewire((mlir::anec::Deconvolution *)&v5, a3, a4);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::rewire(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = a2;
  return mlir::memref::StoreOp::rewire((mlir::memref::ViewOp *)&v6, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::StoreOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  mlir::memref::detail::StoreOpGenericAdaptorBase::StoreOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::memref::StoreOp::fold(&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v165 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      int v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267770000;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = (void *)&unk_267770000;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      int v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = (void *)&unk_267770000;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[429];
  unint64_t v5 = &unk_267770000;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = (void *)&unk_267770000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      int v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = (void *)&unk_267770000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[431];
  uint64_t v7 = &unk_267771000;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = (void *)&unk_267771000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      unint64_t v176 = 97;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      int v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = (void *)&unk_267771000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[441];
  uint64_t v9 = &unk_267770000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_267770000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      int v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_267770000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[435];
  uint64_t v11 = &unk_267771000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_267771000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      int v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_267771000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[320];
  uint64_t v13 = &unk_267772000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_267772000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v176 = 91;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      int v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_267772000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[55];
  uint64_t v15 = &unk_267772000;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    uint64_t v15 = (void *)&unk_267772000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface::Trait<Empty>]";
      unint64_t v176 = 94;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      int v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::PromotableMemOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      uint64_t v15 = (void *)&unk_267772000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[203];
  uint64_t v17 = &unk_267772000;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    uint64_t v17 = (void *)&unk_267772000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface::Trait<Empty>]";
      unint64_t v176 = 103;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      int v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestructurableAccessorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      uint64_t v17 = (void *)&unk_267772000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = v17[205];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      int v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::StoreOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::StoreOp::verifyInvariantsImpl((mlir::memref::StoreOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::StoreOp::verify((mlir::memref::StoreOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::TransposeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.transpose", 16, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::TransposeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379200;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::memref::TransposeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::TransposeOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    BOOL v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::TransposeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::TransposeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::TransposeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::TransposeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::TransposeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::TransposeOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::TransposeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::TransposeOp>::getSpeculatability;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::TransposeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getEffects;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::memref::detail::TransposeOpGenericAdaptorBase::TransposeOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::TransposeOp::fold(&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  char v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    char v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v199 = 110;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[27];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v199 = 82;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[29];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v199 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[320];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[350];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[322];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[324];
  int v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[31] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::memref::TransposeOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::memref::TransposeOp::verifyInvariantsImpl((mlir::memref::TransposeOp *)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::TransposeOp::verify((mlir::memref::TransposeOp *)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.view", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C379F48;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::foldHook()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = (llvm **)v6[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ViewOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x263EF8340];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::ViewOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getViewSource;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[419], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ViewOp>::getSpeculatability;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ViewOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v187 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v199 = 83;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      unint64_t v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v199 = 81;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      unint64_t v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v199 = 110;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      unint64_t v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[27];
  uint64_t v7 = &unk_267770000;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = (void *)&unk_267770000;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      unint64_t v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = (void *)&unk_267770000;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[431];
  uint64_t v9 = &unk_267771000;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      unint64_t v199 = 97;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      unint64_t v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[441];
  uint64_t v11 = &unk_267770000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_267770000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      unint64_t v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_267770000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[435];
  uint64_t v13 = &unk_267771000;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = (void *)&unk_267771000;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v199 = 86;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      unint64_t v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = (void *)&unk_267771000;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[350];
  uint64_t v15 = &unk_267772000;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    uint64_t v15 = (void *)&unk_267772000;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v199 = 89;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      unint64_t v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v15 = (void *)&unk_267772000;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[235];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v199 = 95;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      unint64_t v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[322];
  unint64_t v19 = &unk_267771000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_267771000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v199 = 99;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      unint64_t v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_267771000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[324];
  int v21 = &unk_267771000;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    int v21 = (void *)&unk_267771000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      uint64_t v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      int v21 = (void *)&unk_267771000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v21[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::ViewOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::ViewOp::verifyInvariantsImpl((mlir::memref::ViewOp *)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::ViewOp::verify((mlir::memref::ViewOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.subview", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_26C37A650;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_26C361F50;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getCanonicalizationPatterns()
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::SubViewOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::SubViewOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::SubViewOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::ReinterpretCastOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::ReinterpretCastOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a4)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    *(void *)(a3 + 32) = *((void *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(void *)&long long v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::ReinterpretCastOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    long long v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    long long v4 = 0;
  }

  return mlir::memref::ReinterpretCastOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  if (*a3 != *a2) {
    return 0;
  }
  if (a3[1] != a2[1]) {
    return 0;
  }
  if (a3[2] != a2[2]) {
    return 0;
  }
  return a3[3] == a2[3] && a3[4] == a2[4];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::ReinterpretCastOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  void *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::writeProperties;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[312], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::ReinterpretCastOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  void *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDefaultDialect;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[346], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::SubViewOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDefaultDialect()
{
  return &byte_211F4AA5D;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getViewSource;
  char v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[419], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0xD0uLL, 0x80040B342C78EuLL);
  void *v2 = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getOffsetSizeAndStrideStartOperandIndex;
  v2[1] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getArrayAttrMaxRanks;
  v2[2] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getOffsets;
  v2[3] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getSizes;
  v2[4] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStrides;
  v2[5] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticOffsets;
  v2[6] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticSizes;
  v2[7] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticStrides;
  v2[8] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedOffsets;
  v2[9] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedSizes;
  v2[10] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedStrides;
  v2[11] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicOffset;
  v2[12] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicSize;
  v2[13] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicStride;
  v2[14] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticOffset;
  v2[15] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticSize;
  v2[16] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticStride;
  v2[17] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicOffset;
  v2[18] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicSize;
  v2[19] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicStride;
  v2[20] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicOffset;
  v2[21] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicSize;
  v2[22] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicStride;
  v2[23] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isSameAs;
  v2[24] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::hasUnitStride;
  v2[25] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::hasZeroOffset;
  uint64_t v3 = &unk_267772000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267772000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      unint64_t v14 = 86;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      size_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267772000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[269], v2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getOffsetSizeAndStrideStartOperandIndex()
{
  return 1;
}

unint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getArrayAttrMaxRanks(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unint64_t v5 = *(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v4) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  return v2 | ((unint64_t)v2 << 32);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedOffsets(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedSizes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedStrides(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  return *(void *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = a2;
  Staticuint64_t Offsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v7);
  return mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3) + 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = a2;
  Staticuint64_t Sizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return (NumDynamicEntriesUpToIdx + v7 + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v11 = a2;
  Staticuint64_t Strides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  int v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return (v8 + v9 + NumDynamicEntriesUpToIdx + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = a2;
  Staticuint64_t Offsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v8);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3);
  return *(void *)(*(void *)(v8 + 72) + 32 * (NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = a2;
  Staticuint64_t Sizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return *(void *)(*(void *)(v9 + 72) + 32 * (NumDynamicEntriesUpToIdx + v7 + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v11 = a2;
  Staticuint64_t Strides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  int v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return *(void *)(*(void *)(v11 + 72) + 32 * (v8 + v9 + NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isSameAs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void, void), uint64_t a6)
{
  uint64_t v7 = a2;
  return mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::isSameAs(&v7, a3, a4, a5, a6);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::hasUnitStride(uint64_t a1, uint64_t a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  uint64_t v2 = (uint64_t *)v12;
  if (!v13)
  {
    uint64_t v8 = 1;
    if (v12 == v14) {
      return v8;
    }
    goto LABEL_15;
  }
  uint64_t v3 = 8 * v13 - 8;
  do
  {
    uint64_t v4 = *v2++;
    unint64_t ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6) {
      BOOL v7 = ConstantIntValue == 1;
    }
    else {
      BOOL v7 = 0;
    }
    uint64_t v8 = v7;
    BOOL v9 = v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  uint64_t v2 = (uint64_t *)v12;
  if (v12 != v14) {
LABEL_15:
  }
    free(v2);
  return v8;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::hasZeroOffset(uint64_t a1, uint64_t a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  uint64_t v2 = (uint64_t *)v12;
  if (!v13)
  {
    uint64_t v8 = 1;
    if (v12 == v14) {
      return v8;
    }
    goto LABEL_15;
  }
  uint64_t v3 = 8 * v13 - 8;
  do
  {
    uint64_t v4 = *v2++;
    unint64_t ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6) {
      BOOL v7 = ConstantIntValue == 0;
    }
    else {
      BOOL v7 = 0;
    }
    uint64_t v8 = v7;
    BOOL v9 = v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  uint64_t v2 = (uint64_t *)v12;
  if (v12 != v14) {
LABEL_15:
  }
    free(v2);
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::SubViewOp>::getSpeculatability;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      BOOL v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[314], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::SubViewOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  void *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getEffects;
  uint64_t v3 = &unk_267771000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_267771000;
    uint64_t v2 = v12;
    if (v4)
    {
      unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      BOOL v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[11], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  mlir::memref::detail::SubViewOpGenericAdaptorBase::SubViewOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::SubViewOp::fold((mlir::memref::ReinterpretCastOp *)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &unk_267771000;
  {
    uint64_t v259 = a1;
    uint64_t v1 = (void *)&unk_267771000;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v274 = 83;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      unint64_t v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v1 = (void *)&unk_267771000;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[23];
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v274 = 81;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      unint64_t v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v3 = (void *)&unk_267771000;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[25];
  unint64_t v5 = &unk_267771000;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    unint64_t v5 = (void *)&unk_267771000;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v274 = 110;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      unint64_t v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      unint64_t v5 = (void *)&unk_267771000;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[27];
  BOOL v7 = &unk_267770000;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    BOOL v7 = (void *)&unk_267770000;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      unint64_t v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      BOOL v7 = (void *)&unk_267770000;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[431];
  unint64_t v9 = &unk_267771000;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    unint64_t v9 = (void *)&unk_267771000;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v274 = 97;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      unint64_t v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v9 = (void *)&unk_267771000;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = v9[433];
  uint64_t v11 = &unk_267772000;
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v11 = (void *)&unk_267772000;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v274 = 96;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      unint64_t v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v11 = (void *)&unk_267772000;
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  uint64_t v12 = v11[47];
  uint64_t v13 = &unk_267770000;
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    uint64_t v196 = v12;
    uint64_t v13 = (void *)&unk_267770000;
    uint64_t v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      unint64_t v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v13 = (void *)&unk_267770000;
      uint64_t v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[435];
  uint64_t v15 = &unk_267771000;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    uint64_t v197 = v12;
    uint64_t v15 = (void *)&unk_267771000;
    uint64_t v14 = v189;
    uint64_t v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      unint64_t v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      uint64_t v15 = (void *)&unk_267771000;
      uint64_t v14 = v189;
      uint64_t v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = v15[320];
  uint64_t v17 = &unk_267771000;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    uint64_t v198 = v12;
    uint64_t v183 = v16;
    uint64_t v17 = (void *)&unk_267771000;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    uint64_t v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v274 = 86;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      unint64_t v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      uint64_t v17 = (void *)&unk_267771000;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      uint64_t v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = v17[350];
  unint64_t v19 = &unk_267772000;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    uint64_t v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    unint64_t v19 = (void *)&unk_267772000;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    uint64_t v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      uint64_t v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      unint64_t v19 = (void *)&unk_267772000;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      uint64_t v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = v19[235];
  int v21 = &unk_267772000;
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    uint64_t v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    int v21 = (void *)&unk_267772000;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    uint64_t v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface::Trait<Empty>]";
      unint64_t v274 = 100;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      uint64_t v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OffsetSizeAndStrideOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      int v21 = (void *)&unk_267772000;
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      uint64_t v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  uint64_t v22 = v21[271];
  uint64_t v23 = &unk_267771000;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    uint64_t v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    uint64_t v171 = v22;
    uint64_t v175 = v20;
    uint64_t v23 = (void *)&unk_267771000;
    uint64_t v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    uint64_t v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v274 = 95;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      uint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      uint64_t v23 = (void *)&unk_267771000;
      uint64_t v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      uint64_t v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = v23[322];
  int v25 = &unk_267771000;
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    uint64_t v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    uint64_t v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    int v25 = (void *)&unk_267771000;
    uint64_t v24 = v169;
    uint64_t v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    uint64_t v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v274 = 99;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      uint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      int v25 = (void *)&unk_267771000;
      uint64_t v24 = v169;
      uint64_t v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      uint64_t v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  uint64_t v26 = v25[324];
  unsigned int v27 = &unk_267771000;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    uint64_t v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    uint64_t v173 = v22;
    uint64_t v177 = v20;
    uint64_t v168 = v26;
    uint64_t v170 = v24;
    unsigned int v27 = (void *)&unk_267771000;
    uint64_t v26 = v168;
    uint64_t v24 = v170;
    uint64_t v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    uint64_t v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      uint64_t v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v274 = 93;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      uint64_t v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      unsigned int v27 = (void *)&unk_267771000;
      uint64_t v26 = v168;
      uint64_t v24 = v170;
      uint64_t v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      uint64_t v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[31] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::SubViewOp::print((mlir::memref::SubViewOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::SubViewOp>,mlir::OpTrait::OneResult<mlir::memref::SubViewOp>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::memref::SubViewOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::SubViewOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::SubViewOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::memref::SubViewOp>,mlir::OpTrait::OpInvariants<mlir::memref::SubViewOp>,mlir::BytecodeOpInterface::Trait<mlir::memref::SubViewOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::SubViewOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::SubViewOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::SubViewOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::SubViewOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::SubViewOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::SubViewOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::memref::SubViewOp::verify((mlir::memref::SubViewOp *)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::SubViewOp>,mlir::OpTrait::OneResult<mlir::memref::SubViewOp>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::memref::SubViewOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::SubViewOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::SubViewOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::memref::SubViewOp>,mlir::OpTrait::OpInvariants<mlir::memref::SubViewOp>,mlir::BytecodeOpInterface::Trait<mlir::memref::SubViewOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::SubViewOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::SubViewOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::SubViewOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::SubViewOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::SubViewOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::SubViewOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (uint64_t v6 = a1, mlir::memref::SubViewOp::verifyInvariantsImpl((mlir::memref::SubViewOp *)&v6)))
  {
    return mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::verifyTrait((uint64_t)a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void anonymous namespace'::MemRefInlinerInterface::~MemRefInlinerInterface(_anonymous_namespace_::MemRefInlinerInterface *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::MemRefInlinerInterface::isLegalToInline()
{
  return 1;
}

{
  return 1;
}

double mlir::memref::AllocaOp::getPromotableSlots@<D0>(mlir::memref::AllocaOp *this@<X0>, void *a2@<X8>)
{
  unint64_t v12 = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
  RHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v12);
  if (*(_UNKNOWN **)(*(void *)RHS + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id
    || (v13[0] = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)&RHS),
        memset(&v13[1], 0, 24),
        mlir::Builder::getZeroAttr(v13, RHS)))
  {
    if (mlir::BaseMemRefType::hasRank((mlir::BaseMemRefType *)&v12))
    {
      Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12);
      if (v5)
      {
        uint64_t v6 = 8 * v5;
        while (*Value != 0x8000000000000000)
        {
          ++Value;
          v6 -= 8;
          if (!v6) {
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        uint64_t v7 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12);
        if (mlir::ShapedType::getNumElements(v7, v8) == 1)
        {
          uint64_t v9 = *(void *)this - 16;
          uint64_t v10 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v12);
          a2[2] = v9;
          *a2 = a2 + 2;
          a2[3] = v10;
          *(void *)&double result = 0x300000001;
          a2[1] = 0x300000001;
          return result;
        }
      }
    }
  }
  *a2 = a2 + 2;
  *(void *)&double result = 0x300000000;
  a2[1] = 0x300000000;
  return result;
}

char *mlir::memref::AllocaOp::getDefaultValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(mlir::MLIRContext **)(a2 + 8);
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  uint64_t v5 = (mlir::MLIRContext **)(a3 + 8);
  if (*(_UNKNOWN **)(*(void *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v8[0] = (uint64_t)v3;
    return (char *)mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &>(v5, v4, v8) - 16;
  }
  else
  {
    uint64_t v9 = v3;
    v8[0] = (uint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)(a3 + 8), v3);
    v8[1] = v6;
    return (char *)mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::TypedAttr>((mlir::OpBuilder *)v5, v4, (uint64_t *)&v9, v8)- 16;
  }
}

uint64_t mlir::memref::AllocaOp::handlePromotionComplete(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a3;
  if (!*a3)
  {
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 40))(a4, DefiningOp);
  }
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 40))(a4, *a1);
}

double mlir::memref::AllocaOp::getDestructurableSlots@<D0>(mlir::memref::AllocaOp *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)(*(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::DestructurableTypeInterface>(*v4 + 8))
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::DestructurableTypeInterface>(*v4 + 8);
    unint64_t v38 = v4;
    uint64_t v39 = v5;
    if (v4)
    {
      mlir::DestinationStyleOpInterface::getDpsInitsMutable((uint64_t *)&v34, (mlir::DestinationStyleOpInterface *)&v38);
      if (v37)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        unsigned int v33 = 0;
        if (!v35) {
          goto LABEL_56;
        }
        if (v36)
        {
          uint64_t v6 = 16 * v36;
          uint64_t v7 = v34;
          while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v7 += 2;
            v6 -= 16;
            if (!v6) {
              goto LABEL_56;
            }
          }
        }
        else
        {
          uint64_t v7 = v34;
        }
        uint64_t v9 = &v34[2 * v36];
        if (v7 == v9)
        {
LABEL_56:
          mlir::anec::Convolution::getResult(this);
          llvm::deallocate_buffer(0, 0);
        }
        while (1)
        {
          uint64_t v10 = mlir::MemRefType::get(0, 0, v7[1], 0, 0, 0);
          uint64_t v11 = *v7;
          int v12 = v33;
          if (!v33) {
            goto LABEL_40;
          }
          unsigned int v13 = ((v11 >> 4) ^ (v11 >> 9)) & (v33 - 1);
          uint64_t v14 = (void *)(v31 + 16 * v13);
          uint64_t v15 = *v14;
          if (*v14 == v11) {
            goto LABEL_32;
          }
          uint64_t v16 = 0;
          int v17 = 1;
          while (v15 != -4096)
          {
            if (v16) {
              BOOL v18 = 0;
            }
            else {
              BOOL v18 = v15 == -8192;
            }
            if (v18) {
              uint64_t v16 = v14;
            }
            unsigned int v19 = v13 + v17++;
            unsigned int v13 = v19 & (v33 - 1);
            uint64_t v14 = (void *)(v31 + 16 * v13);
            uint64_t v15 = *v14;
            if (*v14 == v11) {
              goto LABEL_32;
            }
          }
          int v21 = v16 ? v16 : v14;
          if (4 * (int)v32 + 4 < 3 * v33)
          {
            if (v33 + ~v32 - HIDWORD(v32) > v33 >> 3) {
              goto LABEL_28;
            }
            uint64_t v29 = *v7;
            uint64_t v30 = v10;
          }
          else
          {
LABEL_40:
            uint64_t v29 = *v7;
            uint64_t v30 = v10;
            int v12 = 2 * v33;
          }
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v31, v12);
          unsigned int v22 = v33 - 1;
          unsigned int v23 = (v33 - 1) & ((v29 >> 4) ^ (v29 >> 9));
          int v21 = (void *)(v31 + 16 * v23);
          uint64_t v24 = *v21;
          if (*v21 != v29)
          {
            int v25 = 0;
            int v26 = 1;
            uint64_t v10 = v30;
            while (v24 != -4096)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v24 == -8192;
              }
              if (v27) {
                int v25 = v21;
              }
              unsigned int v28 = v23 + v26++;
              unsigned int v23 = v28 & v22;
              int v21 = (void *)(v31 + 16 * (v28 & v22));
              uint64_t v24 = *v21;
              uint64_t v11 = v29;
              uint64_t v20 = v29;
              if (*v21 == v29) {
                goto LABEL_29;
              }
            }
            if (v25) {
              int v21 = v25;
            }
            uint64_t v11 = v29;
LABEL_28:
            uint64_t v20 = *v21;
            goto LABEL_29;
          }
          uint64_t v11 = v29;
          uint64_t v20 = v29;
          uint64_t v10 = v30;
LABEL_29:
          LODWORD(v32) = v32 + 1;
          if (v20 != -4096) {
            --HIDWORD(v32);
          }
          *int v21 = v11;
          v21[1] = v10;
          do
          {
LABEL_32:
            v7 += 2;
            if (v7 == v9) {
              goto LABEL_56;
            }
          }
          while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000);
          if (v7 == v9) {
            goto LABEL_56;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v38 = 0;
    uint64_t v39 = 0;
  }
  *a2 = a2 + 2;
  *(void *)&double result = 0x100000000;
  a2[1] = 0x100000000;
  return result;
}

void sub_2116E8C48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, void *__src, uint64_t a14, unsigned int a15)
{
  if (a15)
  {
    buffer = llvm::allocate_buffer(16 * a15, (std::align_val_t)8uLL);
    memcpy(buffer, __src, 16 * a15);
  }
  *(void *)(v15 + 16) = v16;
  *(void *)uint64_t v15 = v15 + 16;
  *(void *)(v15 + 8) = 0x100000000;
  *(void *)(v15 + 24) = v17;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = 0;
  *(_DWORD *)(v15 + 48) = 0;
  llvm::deallocate_buffer(0, 0);
}

void sub_2116E8CC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  *(_DWORD *)(v11 + 48) = v14;
  if (v14)
  {
    uint64_t v15 = (void *)(16 * v14);
    buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
    *(void *)(v11 + 32) = buffer;
    *(void *)(v11 + 40) = a11;
    memcpy(buffer, v12, 16 * *(unsigned int *)(v11 + 48));
  }
  else
  {
    uint64_t v15 = 0;
    *unsigned int v13 = 0;
    v13[1] = 0;
  }
  ++*(_DWORD *)(v11 + 8);
  llvm::deallocate_buffer((llvm *)v12, v15);
}

void sub_2116E8D20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, llvm *a14, uint64_t a15, unsigned int a16)
{
}

void sub_2116E8D34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, llvm *a17, uint64_t a18, unsigned int a19, int a20,char a21)
{
  if (a21) {
    llvm::deallocate_buffer(a17, (void *)(16 * a19));
  }
  JUMPOUT(0x2116E8A24);
}

uint64_t mlir::memref::AllocaOp::destructure@<X0>(ZinIrHalH13g **a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *((void *)v8 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(v8);
  uint64_t v11 = *(void *)(v10 + 8);
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = v11;
  *(_DWORD *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  int v12 = (void *)(*((void *)*a1 - 1) & 0xFFFFFFFFFFFFFFF8);
  if (v12) {
    uint64_t result = mlir::detail::InterfaceMap::lookup<mlir::DestructurableTypeInterface>(*v12 + 8);
  }
  else {
    uint64_t result = 0;
  }
  v35[0] = v12;
  v35[1] = result;
  uint64_t v14 = a2[1];
  if (v14 == *a2) {
    uint64_t v15 = (unsigned int *)a2 + 5;
  }
  else {
    uint64_t v15 = (unsigned int *)(a2 + 2);
  }
  uint64_t v16 = *v15;
  if (v16)
  {
    uint64_t v17 = 8 * v16;
    for (i = (uint64_t *)a2[1]; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v17 -= 8;
      if (!v17) {
        return result;
      }
    }
  }
  else
  {
    i = (uint64_t *)a2[1];
  }
  unsigned int v19 = (uint64_t *)(v14 + 8 * v16);
  if (i == v19) {
    return result;
  }
  uint64_t v20 = (mlir::MLIRContext **)(a3 + 8);
  do
  {
    uint64_t v34 = *i;
    uint64_t SuccessorBlockArgument = mlir::BranchOpInterface::getSuccessorBlockArgument((mlir::BranchOpInterface *)v35, v34);
    uint64_t v33 = mlir::MemRefType::get(0, 0, SuccessorBlockArgument, 0, 0, 0);
    uint64_t result = (uint64_t)mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &>(v20, *((void *)*a1 + 3), &v33);
    *(void *)&long long v32 = result - 16;
    *((void *)&v32 + 1) = SuccessorBlockArgument;
    int v22 = *(_DWORD *)(a4 + 16);
    if (!v22)
    {
      uint64_t v31 = 0;
LABEL_27:
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,mlir::MemorySlot,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,mlir::MemorySlot>>,mlir::Attribute,mlir::MemorySlot,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,mlir::MemorySlot>>::InsertIntoBucket<mlir::Attribute const&,mlir::MemorySlot>(a4, v31, &v34, &v32);
      goto LABEL_28;
    }
    int v23 = v22 - 1;
    unsigned int v24 = ((v34 >> 4) ^ (v34 >> 9)) & v23;
    int v25 = (void *)(*(void *)a4 + 24 * v24);
    uint64_t v26 = *v25;
    if (v34 == *v25) {
      goto LABEL_28;
    }
    BOOL v27 = 0;
    int v28 = 1;
    do
    {
      if (v26 == -4096)
      {
        if (v27) {
          uint64_t v31 = (uint64_t)v27;
        }
        else {
          uint64_t v31 = (uint64_t)v25;
        }
        goto LABEL_27;
      }
      if (v27) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = v26 == -8192;
      }
      if (v29) {
        BOOL v27 = v25;
      }
      unsigned int v30 = v24 + v28++;
      unsigned int v24 = v30 & v23;
      int v25 = (void *)(*(void *)a4 + 24 * v24);
      uint64_t v26 = *v25;
    }
    while (v34 != *v25);
    do
    {
LABEL_28:
      if (++i == v19) {
        return result;
      }
    }
    while ((unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL);
  }
  while (i != v19);
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.alloca", (const unsigned __int8 *)0xD, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    v15[2] = (uint64_t)"memref.alloca";
    v15[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::memref::AllocaOp::build(a1, (uint64_t)v17, *a3, 0);
  uint64_t v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocaOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

uint64_t mlir::memref::AllocaOp::handleDestructuringComplete(void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 40))(a3, *a1);
}

BOOL mlir::memref::LoadOp::loadsFrom(uint64_t a1, void *a2)
{
  return *(void *)(*(void *)(*(void *)a1 + 72) + 24) == *a2;
}

BOOL mlir::memref::LoadOp::canUsesBeRemoved(mlir::anec::Convolution *a1, void *a2, uint64_t a3)
{
  LODWORD(v3) = *(_DWORD *)(a3 + 20);
  if (v3 - *(_DWORD *)(a3 + 24) != 1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4 == *(void *)a3) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = *(unsigned int *)(a3 + 16);
  }
  if (v3)
  {
    uint64_t v5 = 8 * v3;
    uint64_t v6 = v4 + 8 * v3;
    while (*(void *)v4 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v4 += 8;
      v5 -= 8;
      if (!v5)
      {
        uint64_t v4 = v6;
        break;
      }
    }
  }
  uint64_t v7 = *(void *)(*(void *)v4 + 24);
  return v7 == *a2
      && *(void *)(*(void *)(*(void *)a1 + 72) + 24) == v7
      && a2[1] == (*(void *)(mlir::anec::Convolution::getResult(a1) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::LoadOp::removeBlockingUses(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *(uint64_t **)mlir::anec::Convolution::getResult(a1);
  if (v7)
  {
    do
    {
      uint64_t v9 = (uint64_t *)*v7;
      uint64_t v10 = v7[2];
      (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 72))(a4, v10);
      uint64_t v11 = (uint64_t *)v7[1];
      if (v11)
      {
        *uint64_t v11 = *v7;
        if (*v7) {
          *(void *)(*v7 + 8) = v7[1];
        }
      }
      v7[3] = (uint64_t)a5;
      uint64_t v12 = *a5;
      uint64_t *v7 = *a5;
      v7[1] = (uint64_t)a5;
      if (v12) {
        *(void *)(v12 + 8) = v7;
      }
      *a5 = (uint64_t)v7;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 80))(a4, v10);
      uint64_t v7 = v9;
    }
    while (v9);
  }
  return 1;
}

uint64_t mlir::memref::LoadOp::canRewire(mlir::memref::LoadOp *a1, void *a2, uint64_t a3)
{
  unint64_t v14[2] = *MEMORY[0x263EF8340];
  if (*a2 != *(void *)(*(void *)(*(void *)a1 + 72) + 24)) {
    return 0;
  }
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  uint64_t Indices = mlir::memref::LoadOp::getIndices(a1);
  mlir::ValueRange::ValueRange(v14, Indices, v8);
  uint64_t result = getAttributeIndexFromIndexOperands(Context, v14[0], v14[1], *(void *)(*(void *)(*(void *)(*(void *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (result)
  {
    uint64_t v9 = *(void *)(a3 + 8);
    if (v9 != *(void *)a3) {
      goto LABEL_5;
    }
    uint64_t v10 = *(unsigned int *)(a3 + 20);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 8 * v10;
      unsigned int v13 = *(uint64_t **)(a3 + 8);
      while (*v13 != result)
      {
        if (*v13 == -2) {
          uint64_t v11 = v13;
        }
        ++v13;
        v12 -= 8;
        if (!v12)
        {
          if (!v11) {
            goto LABEL_16;
          }
          *uint64_t v11 = result;
          --*(_DWORD *)(a3 + 24);
          return 1;
        }
      }
      return 1;
    }
LABEL_16:
    if (v10 < *(_DWORD *)(a3 + 16))
    {
      *(_DWORD *)(a3 + 20) = v10 + 1;
      *(void *)(v9 + 8 * v10) = result;
    }
    else
    {
LABEL_5:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a3, (const void *)result);
    }
    return 1;
  }
  return result;
}

uint64_t getAttributeIndexFromIndexOperands(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v38[1] = *MEMORY[0x263EF8340];
  uint64_t v28 = a4;
  uint64_t v33 = v35;
  uint64_t v34 = 0x600000000;
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  uint64_t v30 = a2;
  uint64_t v31 = 0;
  long long v32 = (unint64_t *)Value;
  if (!a3 || (uint64_t v9 = v8) == 0)
  {
    unsigned int v21 = v34;
LABEL_28:
    uint64_t v24 = mlir::ArrayAttr::get(a1, (uint64_t)v33, v21);
    int v25 = v33;
    if (v33 == v35) {
      return v24;
    }
LABEL_29:
    free(v25);
    return v24;
  }
  uint64_t v10 = 0;
  uint64_t v11 = Value + 8 * v9;
  while (1)
  {
    uint64_t v12 = mlir::ValueRange::dereference_iterator(&v30, v10);
    unsigned int v13 = v32;
    unint64_t v27 = 0;
    uint64_t v29 = v12;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v29);
    if (!DefiningOp) {
      break;
    }
    uint64_t v15 = DefiningOp;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
      break;
    }
    unsigned int v36 = v38;
    uint64_t v37 = 0x100000000;
    mlir::Operation::fold(v15, 0, 0, (uint64_t)&v36);
    BOOL v16 = (*(void *)v36 & 0xFFFFFFFFFFFFFFF8) == 0
       || *(void *)(*(void *)(*(void *)v36 & 0xFFFFFFFFFFFFFFF8) + 136) != (void)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    if (!v16) {
      unint64_t v27 = *(void *)v36 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v36 != v38) {
      free(v36);
    }
    if (v16) {
      break;
    }
    mlir::IntegerAttr::getValue((uint64_t)&v27, (llvm::APInt *)&v36);
    int v17 = v37;
    if (v37 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v36) > 0x40)
      {
        if (v36) {
          MEMORY[0x21667D390](v36, 0x1000C8000313F17);
        }
        break;
      }
      unint64_t v18 = *(void *)v36;
      MEMORY[0x21667D390]();
      if (v18 >= *v13) {
        break;
      }
    }
    else if ((unint64_t)v36 >= *v13)
    {
      break;
    }
    unint64_t v19 = v27;
    uint64_t v20 = v34;
    if (v34 >= (unint64_t)HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 8);
      uint64_t v20 = v34;
    }
    *((void *)v33 + v20) = v19;
    unsigned int v21 = v34 + 1;
    LODWORD(v34) = v34 + 1;
    uint64_t v10 = v31 + 1;
    int v22 = v32 + 1;
    uint64_t v31 = v10;
    ++v32;
    BOOL v23 = v10 == a3 && v30 == a2;
    if (v23 || v22 == (void *)v11) {
      goto LABEL_28;
    }
  }
  uint64_t v24 = 0;
  int v25 = v33;
  if (v33 != v35) {
    goto LABEL_29;
  }
  return v24;
}

uint64_t mlir::memref::LoadOp::rewire(mlir::memref::LoadOp *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v27[3] = *MEMORY[0x263EF8340];
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  uint64_t Indices = mlir::memref::LoadOp::getIndices(a1);
  mlir::ValueRange::ValueRange(v24, Indices, v9);
  uint64_t AttributeIndexFromIndexOperands = getAttributeIndexFromIndexOperands(Context, v24[0], v24[1], *(void *)(*(void *)(*(void *)(*(void *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *a3;
  unsigned int v12 = *((_DWORD *)a3 + 4);
  if (!v12)
  {
LABEL_7:
    __int16 v14 = (uint64_t *)(v11 + 24 * v12);
    goto LABEL_8;
  }
  unsigned int v13 = ((AttributeIndexFromIndexOperands >> 4) ^ (AttributeIndexFromIndexOperands >> 9)) & (v12 - 1);
  __int16 v14 = (uint64_t *)(v11 + 24 * v13);
  uint64_t v15 = *v14;
  if (*v14 != AttributeIndexFromIndexOperands)
  {
    int v16 = 1;
    while (v15 != -4096)
    {
      unsigned int v17 = v13 + v16++;
      unsigned int v13 = v17 & (v12 - 1);
      __int16 v14 = (uint64_t *)(v11 + 24 * v13);
      uint64_t v15 = *v14;
      if (*v14 == AttributeIndexFromIndexOperands) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v18 = *(void *)a1;
  (*(void (**)(uint64_t, void))(*(void *)a4 + 72))(a4, *(void *)a1);
  unint64_t v19 = (uint64_t *)v14[1];
  uint64_t v20 = *(uint64_t **)(*(void *)a1 + 72);
  unsigned int v21 = (uint64_t *)v20[1];
  if (v21)
  {
    *unsigned int v21 = *v20;
    if (*v20) {
      *(void *)(*v20 + 8) = v20[1];
    }
  }
  v20[3] = (uint64_t)v19;
  v20[1] = (uint64_t)v19;
  uint64_t v22 = *v19;
  *uint64_t v20 = *v19;
  if (v22) {
    *(void *)(v22 + 8) = v20;
  }
  *unint64_t v19 = (uint64_t)v20;
  mlir::memref::LoadOp::getIndicesMutable(a1, (uint64_t)v25);
  mlir::MutableOperandRange::clear((mlir::MutableOperandRange *)v25);
  if (v26 != v27) {
    free(v26);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 80))(a4, v18);
  return 0;
}

BOOL mlir::memref::StoreOp::storesTo(uint64_t a1, void *a2)
{
  return *(void *)(*(void *)(*(void *)a1 + 72) + 56) == *a2;
}

BOOL mlir::memref::StoreOp::canUsesBeRemoved(mlir::anec::Deconvolution *this, void *a2, uint64_t a3)
{
  LODWORD(v3) = *(_DWORD *)(a3 + 20);
  if (v3 - *(_DWORD *)(a3 + 24) != 1) {
    return 0;
  }
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6 == *(void *)a3) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = *(unsigned int *)(a3 + 16);
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    uint64_t v8 = v6 + 8 * v3;
    while (*(void *)v6 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v6 += 8;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v6 = v8;
        break;
      }
    }
  }
  uint64_t v9 = *(void *)(*(void *)v6 + 24);
  return v9 == *a2
      && *(void *)(*(void *)(*(void *)this + 72) + 56) == v9
      && *a2 != mlir::anec::Deconvolution::getInput(this)
      && a2[1] == (*(void *)(mlir::anec::Deconvolution::getInput(this) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::StoreOp::canRewire(mlir::anec::Deconvolution *a1, uint64_t a2, uint64_t a3)
{
  v22[2] = *MEMORY[0x263EF8340];
  if (*(void *)a2 != *(void *)(*(void *)(*(void *)a1 + 72) + 56)
    || *(void *)a2 == mlir::anec::Deconvolution::getInput(a1))
  {
    return 0;
  }
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  uint64_t Sizes = mlir::memref::ViewOp::getSizes(a1);
  mlir::ValueRange::ValueRange(v22, Sizes, v9);
  uint64_t result = getAttributeIndexFromIndexOperands(Context, v22[0], v22[1], *(void *)(*(void *)(*(void *)(*(void *)a1 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (result)
  {
    int v10 = *(_DWORD *)(a2 + 32);
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 16);
      int v12 = v10 - 1;
      unsigned int v13 = v12 & ((result >> 4) ^ (result >> 9));
      uint64_t v14 = *(void *)(v11 + 16 * v13);
      if (v14 == result)
      {
LABEL_8:
        uint64_t v15 = *(void *)(a3 + 8);
        if (v15 != *(void *)a3) {
          goto LABEL_9;
        }
        uint64_t v16 = *(unsigned int *)(a3 + 20);
        if (v16)
        {
          unsigned int v17 = 0;
          uint64_t v18 = 8 * v16;
          unint64_t v19 = *(uint64_t **)(a3 + 8);
          while (*v19 != result)
          {
            if (*v19 == -2) {
              unsigned int v17 = v19;
            }
            ++v19;
            v18 -= 8;
            if (!v18)
            {
              if (!v17) {
                goto LABEL_19;
              }
              *unsigned int v17 = result;
              --*(_DWORD *)(a3 + 24);
              return 1;
            }
          }
          return 1;
        }
LABEL_19:
        if (v16 < *(_DWORD *)(a3 + 16))
        {
          *(_DWORD *)(a3 + 20) = v16 + 1;
          *(void *)(v15 + 8 * v16) = result;
        }
        else
        {
LABEL_9:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a3, (const void *)result);
        }
        return 1;
      }
      int v20 = 1;
      while (v14 != -4096)
      {
        unsigned int v21 = v13 + v20++;
        unsigned int v13 = v21 & v12;
        uint64_t v14 = *(void *)(v11 + 16 * (v21 & v12));
        if (v14 == result) {
          goto LABEL_8;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t mlir::memref::StoreOp::rewire(mlir::memref::ViewOp *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v28[3] = *MEMORY[0x263EF8340];
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  uint64_t Sizes = mlir::memref::ViewOp::getSizes(a1);
  mlir::ValueRange::ValueRange(v25, Sizes, v9);
  uint64_t AttributeIndexFromIndexOperands = getAttributeIndexFromIndexOperands(Context, v25[0], v25[1], *(void *)(*(void *)(*(void *)(*(void *)a1 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *a3;
  unsigned int v12 = *((_DWORD *)a3 + 4);
  if (!v12)
  {
LABEL_7:
    uint64_t v14 = (uint64_t *)(v11 + 24 * v12);
    goto LABEL_8;
  }
  unsigned int v13 = ((AttributeIndexFromIndexOperands >> 4) ^ (AttributeIndexFromIndexOperands >> 9)) & (v12 - 1);
  uint64_t v14 = (uint64_t *)(v11 + 24 * v13);
  uint64_t v15 = *v14;
  if (*v14 != AttributeIndexFromIndexOperands)
  {
    int v16 = 1;
    while (v15 != -4096)
    {
      unsigned int v17 = v13 + v16++;
      unsigned int v13 = v17 & (v12 - 1);
      uint64_t v14 = (uint64_t *)(v11 + 24 * v13);
      uint64_t v15 = *v14;
      if (*v14 == AttributeIndexFromIndexOperands) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v18 = *(void *)a1;
  (*(void (**)(uint64_t, void))(*(void *)a4 + 72))(a4, *(void *)a1);
  unint64_t v19 = (uint64_t *)v14[1];
  int v20 = *(void **)(*(void *)a1 + 72);
  unsigned int v21 = v20 + 4;
  uint64_t v22 = (void *)v20[5];
  if (v22)
  {
    *uint64_t v22 = *v21;
    if (*v21) {
      *(void *)(*v21 + 8) = v20[5];
    }
  }
  v20[7] = v19;
  v20[5] = v19;
  uint64_t v23 = *v19;
  v20[4] = *v19;
  if (v23) {
    *(void *)(v23 + 8) = v21;
  }
  *unint64_t v19 = (uint64_t)v21;
  mlir::memref::StoreOp::getIndicesMutable(a1, (uint64_t)v26);
  mlir::MutableOperandRange::clear((mlir::MutableOperandRange *)v26);
  if (v27 != v28) {
    free(v27);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 80))(a4, v18);
  return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::DestructurableTypeInterface>(uint64_t a1)
{
  uint64_t v1 = &unk_267772000;
  {
    uint64_t v20 = a1;
    uint64_t v1 = (void *)&unk_267772000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unsigned int v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableTypeInterface]";
      unint64_t v22 = 83;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableTypeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      uint64_t v1 = (void *)&unk_267772000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[293];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::TypedAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    __int16 v18 = 1283;
    unint64_t v17[2] = (uint64_t)"arith.constant";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::ConstantOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4, a4[1]);
  int v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,mlir::MemorySlot,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,mlir::MemorySlot>>,mlir::Attribute,mlir::MemorySlot,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,mlir::MemorySlot>>::InsertIntoBucket<mlir::Attribute const&,mlir::MemorySlot>(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    uint64_t v10 = *(void *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>::grow(a1, v9);
  uint64_t v10 = *a3;
  int v12 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & v12;
  a2 = *(void *)a1 + 24 * v13;
  uint64_t v14 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        uint64_t v15 = a2;
      }
      unsigned int v18 = v13 + v16++;
      unsigned int v13 = v18 & v12;
      a2 = *(void *)a1 + 24 * (v18 & v12);
      uint64_t v14 = *(void *)a2;
      if (v10 == *(void *)a2) {
        goto LABEL_4;
      }
    }
    if (v15) {
      a2 = v15;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  *(_OWORD *)(a2 + 8) = *a4;
  return a2;
}

ZinIrHalH13g *mlir::memref::MemRefDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, void *a3, uint64_t a4, uint64_t a5)
{
  return mlir::arith::ConstantOp::materialize(a2, a3, a4, a5);
}

uint64_t mlir::memref::foldMemRefCast(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 46) & 0x80) != 0 && (uint64_t v2 = *(unsigned int *)(a1 + 68), v2))
  {
    char v4 = 0;
    uint64_t v5 = *(uint64_t **)(a1 + 72);
    uint64_t v6 = 32 * v2;
    do
    {
      uint64_t v12 = v5[3];
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (DefiningOp)
      {
        if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id
          && v5[3] != a2)
        {
          int v8 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
          if (*(_UNKNOWN **)(*(void *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
          {
            unsigned int v9 = (uint64_t *)v5[1];
            if (v9)
            {
              uint64_t *v9 = *v5;
              if (*v5) {
                *(void *)(*v5 + 8) = v5[1];
              }
            }
            v5[3] = (uint64_t)v8;
            uint64_t v10 = *v8;
            uint64_t *v5 = *v8;
            v5[1] = (uint64_t)v8;
            if (v10) {
              *(void *)(v10 + 8) = v5;
            }
            *int v8 = (uint64_t)v5;
            char v4 = 1;
          }
        }
      }
      v5 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t mlir::memref::getTensorTypeFromMemRefType(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v1 = *(void **)(*(void *)a1 + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v13 = v2;
  if (v2)
  {
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
    uint64_t v5 = v4;
    uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v13);
    return mlir::RankedTensorType::get(Value, v5, RHS, 0);
  }
  else
  {
    BOOL v8 = v1 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
    if (v1 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v13 = v9;
    if (v8)
    {
      uint64_t v12 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
      return mlir::UnrankedTensorType::get(v12);
    }
    else
    {
      uint64_t Context = (mlir::NoneType *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
      return mlir::NoneType::get(Context, v11);
    }
  }
}

uint64_t mlir::memref::AllocOp::getAsmResultNames(void *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "alloc", 5);
}

uint64_t mlir::memref::AllocaOp::getAsmResultNames(void *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "alloca", 6);
}

uint64_t mlir::memref::AllocOp::verify(mlir::memref::AllocOp *this)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)this;
  uint64_t v72 = v1;
  unint64_t v71 = *(void *)(v1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v71)
  {
    v69[0] = (void **)"result must be a memref";
    __int16 v70 = 259;
    mlir::OpState::emitOpError(&v72, v69, (uint64_t)&RawStringData);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v86)
    {
      int v11 = __p;
      if (__p)
      {
        uint64_t v12 = v85;
        uint64_t v13 = __p;
        if (v85 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          uint64_t v13 = __p;
        }
        unint64_t v85 = v11;
        operator delete(v13);
      }
      uint64_t v14 = v82;
      if (!v82) {
        goto LABEL_75;
      }
      uint64_t v15 = v83;
      int v16 = v82;
      if (v83 == v82) {
        goto LABEL_74;
      }
      do
      {
        uint64_t v18 = *--v15;
        uint64_t v17 = v18;
        void *v15 = 0;
        if (v18) {
          MEMORY[0x21667D390](v17, 0x1000C8077774924);
        }
      }
      while (v15 != v14);
      goto LABEL_73;
    }
    return v10;
  }
  unint64_t v2 = *(unsigned int *)(v1 + 44);
  uint64_t v3 = v1 + 16 * ((v2 >> 23) & 1) + 64;
  if (!BYTE3(v2)) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  if (!v6)
  {
    uint64_t v8 = 0;
    goto LABEL_28;
  }
  unint64_t v7 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v7 >= 3)
  {
    unint64_t v19 = v7 + 1;
    uint64_t v20 = (v7 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v9 = (uint64_t *)(Value + 8 * v20);
    unsigned int v21 = (int64x2_t *)(Value + 16);
    int64x2_t v22 = 0uLL;
    int64x2_t v23 = vdupq_n_s64(0x8000000000000000);
    uint64_t v24 = v20;
    int64x2_t v25 = 0uLL;
    do
    {
      int64x2_t v22 = vsubq_s64(v22, vceqq_s64(v21[-1], v23));
      int64x2_t v25 = vsubq_s64(v25, vceqq_s64(*v21, v23));
      v21 += 2;
      v24 -= 4;
    }
    while (v24);
    uint64_t v8 = vaddvq_s64(vaddq_s64(v25, v22));
    if (v19 == v20) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)Value;
  }
  do
  {
    uint64_t v26 = *v9++;
    if (v26 == 0x8000000000000000) {
      ++v8;
    }
  }
  while (v9 != (uint64_t *)(Value + 8 * v6));
LABEL_28:
  if (v8 == v4)
  {
    uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v71);
    uint64_t v77 = v27;
    if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData))
    {
      unsigned int NumSymbols = 0;
    }
    else
    {
      uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v71);
      uint64_t v77 = v35;
      v69[0] = (void **)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&RawStringData);
      unsigned int NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v69);
    }
    unint64_t v36 = v72 + 16 * (((unint64_t)*(unsigned int *)(v72 + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(v72 + 44))) {
      unint64_t v36 = 0;
    }
    uint64_t v37 = (const char *)NumSymbols;
    if ((*(_DWORD *)(v36 + 12) + *(_DWORD *)(v36 + 8)) - (unint64_t)*(unsigned int *)(v36 + 8) == NumSymbols) {
      return 1;
    }
    v69[0] = (void **)"symbol operand count does not equal memref symbol count: expected ";
    __int16 v70 = 259;
    mlir::OpState::emitOpError(&v72, v69, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      int v73 = 5;
      unint64_t v74 = v37;
      unint64_t v38 = &v73;
      uint64_t v39 = (char *)v78;
      if (v79 >= v80)
      {
        unint64_t v61 = v79 + 1;
        if (v78 <= &v73 && (char *)v78 + 24 * v79 > (char *)&v73)
        {
          int64_t v66 = (char *)&v73 - (unsigned char *)v78;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v61, 24);
          uint64_t v39 = (char *)v78;
          unint64_t v38 = (int *)((char *)v78 + v66);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v61, 24);
          unint64_t v38 = &v73;
          uint64_t v39 = (char *)v78;
        }
      }
      unint64_t v40 = &v39[24 * v79];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = *((void *)v38 + 2);
      *(_OWORD *)unint64_t v40 = v41;
      uint64_t v42 = ++v79;
      if (RawStringData)
      {
        int v73 = 3;
        unint64_t v74 = ", got ";
        uint64_t v75 = 6;
        int v43 = &v73;
        unint64_t v44 = (char *)v78;
        if (v42 >= v80)
        {
          unint64_t v62 = v42 + 1;
          BOOL v63 = (char *)v78 + 24 * v42 > (char *)&v73;
          if (v78 <= &v73 && v63)
          {
            int64_t v67 = (char *)&v73 - (unsigned char *)v78;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v62, 24);
            unint64_t v44 = (char *)v78;
            int v43 = (int *)((char *)v78 + v67);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v62, 24);
            int v43 = &v73;
            unint64_t v44 = (char *)v78;
          }
        }
        unint64_t v45 = &v44[24 * v79];
        long long v46 = *(_OWORD *)v43;
        *((void *)v45 + 2) = *((void *)v43 + 2);
        *(_OWORD *)unint64_t v45 = v46;
        uint64_t v47 = ++v79;
        if (RawStringData)
        {
          unint64_t v48 = v72 + 16 * (((unint64_t)*(unsigned int *)(v72 + 44) >> 23) & 1) + 64;
          if (!HIBYTE(*(_DWORD *)(v72 + 44))) {
            unint64_t v48 = 0;
          }
          unint64_t v49 = (*(_DWORD *)(v48 + 8) + *(_DWORD *)(v48 + 12))
              - (unint64_t)*(unsigned int *)(v48 + 8);
          int v73 = 5;
          unint64_t v74 = (const char *)v49;
          uint64_t v50 = &v73;
          int v51 = (char *)v78;
          if (v47 >= v80)
          {
            unint64_t v64 = v47 + 1;
            BOOL v65 = (char *)v78 + 24 * v47 > (char *)&v73;
            if (v78 <= &v73 && v65)
            {
              int64_t v68 = (char *)&v73 - (unsigned char *)v78;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
              int v51 = (char *)v78;
              uint64_t v50 = (int *)((char *)v78 + v68);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
              uint64_t v50 = &v73;
              int v51 = (char *)v78;
            }
          }
          int v52 = &v51[24 * v79];
          long long v53 = *(_OWORD *)v50;
          *((void *)v52 + 2) = *((void *)v50 + 2);
          *(_OWORD *)int v52 = v53;
          ++v79;
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v86)
    {
      unint64_t v54 = __p;
      if (__p)
      {
        unint64_t v55 = v85;
        unint64_t v56 = __p;
        if (v85 != __p)
        {
          do
            unint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          unint64_t v56 = __p;
        }
        unint64_t v85 = v54;
        operator delete(v56);
      }
      uint64_t v14 = v82;
      if (!v82) {
        goto LABEL_75;
      }
      uint64_t v57 = v83;
      int v16 = v82;
      if (v83 == v82)
      {
LABEL_74:
        unint64_t v83 = v14;
        operator delete(v16);
LABEL_75:
        if (v78 != v81) {
          free(v78);
        }
        return v10;
      }
      do
      {
        uint64_t v59 = *--v57;
        uint64_t v58 = v59;
        *uint64_t v57 = 0;
        if (v59) {
          MEMORY[0x21667D390](v58, 0x1000C8077774924);
        }
      }
      while (v57 != v14);
LABEL_73:
      int v16 = v82;
      goto LABEL_74;
    }
  }
  else
  {
    v69[0] = (void **)"dimension operand count does not equal memref dynamic dimension count";
    __int16 v70 = 259;
    mlir::OpState::emitOpError(&v72, v69, (uint64_t)&RawStringData);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v86)
    {
      uint64_t v29 = __p;
      if (__p)
      {
        uint64_t v30 = v85;
        uint64_t v31 = __p;
        if (v85 != __p)
        {
          do
            uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          uint64_t v31 = __p;
        }
        unint64_t v85 = v29;
        operator delete(v31);
      }
      uint64_t v14 = v82;
      if (!v82) {
        goto LABEL_75;
      }
      long long v32 = v83;
      int v16 = v82;
      if (v83 == v82) {
        goto LABEL_74;
      }
      do
      {
        uint64_t v34 = *--v32;
        uint64_t v33 = v34;
        void *v32 = 0;
        if (v34) {
          MEMORY[0x21667D390](v33, 0x1000C8077774924);
        }
      }
      while (v32 != v14);
      goto LABEL_73;
    }
  }
  return v10;
}

uint64_t mlir::memref::AllocaOp::verify(mlir::memref::AllocaOp *this)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  do
  {
    uint64_t v3 = *(mlir::Block **)(v2 + 16);
    if (!v3 || (uint64_t ParentOp = mlir::Block::getParentOp(v3)) == 0)
    {
      v79[0] = (void **)"requires an ancestor op with AutomaticAllocationScope trait";
      __int16 v80 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v79, (uint64_t)&RawStringData);
      uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      }
      if (v96)
      {
        uint64_t v15 = __p;
        if (__p)
        {
          int v16 = v95;
          uint64_t v17 = __p;
          if (v95 != __p)
          {
            do
              int v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
            while (v16 != v15);
            uint64_t v17 = __p;
          }
          uint64_t v95 = v15;
          operator delete(v17);
        }
        uint64_t v18 = v92;
        if (!v92) {
          goto LABEL_93;
        }
        unint64_t v19 = v93;
        uint64_t v20 = v92;
        if (v93 == v92) {
          goto LABEL_92;
        }
        do
        {
          uint64_t v22 = *--v19;
          uint64_t v21 = v22;
          *unint64_t v19 = 0;
          if (v22) {
            MEMORY[0x21667D390](v21, 0x1000C8077774924);
          }
        }
        while (v19 != v18);
        goto LABEL_91;
      }
      return v14;
    }
    uint64_t v2 = ParentOp;
  }
  while ((mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((void *)(ParentOp + 48)) & 1) == 0);
  uint64_t v5 = *(void *)this;
  uint64_t v82 = v5;
  unint64_t v81 = *(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (v81)
  {
    unint64_t v6 = *(unsigned int *)(v5 + 44);
    uint64_t v7 = v5 + 16 * ((v6 >> 23) & 1) + 64;
    if (!BYTE3(v6)) {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned int *)(v7 + 8);
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v81);
    if (v10)
    {
      unint64_t v11 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v11 >= 3)
      {
        unint64_t v29 = v11 + 1;
        uint64_t v30 = (v11 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v13 = (uint64_t *)(Value + 8 * v30);
        uint64_t v31 = (int64x2_t *)(Value + 16);
        int64x2_t v32 = 0uLL;
        int64x2_t v33 = vdupq_n_s64(0x8000000000000000);
        uint64_t v34 = v30;
        int64x2_t v35 = 0uLL;
        do
        {
          int64x2_t v32 = vsubq_s64(v32, vceqq_s64(v31[-1], v33));
          int64x2_t v35 = vsubq_s64(v35, vceqq_s64(*v31, v33));
          v31 += 2;
          v34 -= 4;
        }
        while (v34);
        uint64_t v12 = vaddvq_s64(vaddq_s64(v35, v32));
        if (v29 != v30) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = (uint64_t *)Value;
        do
        {
LABEL_43:
          uint64_t v36 = *v13++;
          if (v36 == 0x8000000000000000) {
            ++v12;
          }
        }
        while (v13 != (uint64_t *)(Value + 8 * v10));
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v12 == v8)
    {
      uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v81);
      uint64_t v87 = v37;
      if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData))
      {
        unsigned int NumSymbols = 0;
      }
      else
      {
        uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v81);
        uint64_t v87 = v45;
        v79[0] = (void **)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&RawStringData);
        unsigned int NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v79);
      }
      unint64_t v46 = v82 + 16 * (((unint64_t)*(unsigned int *)(v82 + 44) >> 23) & 1) + 64;
      if (!HIBYTE(*(_DWORD *)(v82 + 44))) {
        unint64_t v46 = 0;
      }
      uint64_t v47 = (const char *)NumSymbols;
      if ((*(_DWORD *)(v46 + 12) + *(_DWORD *)(v46 + 8)) - (unint64_t)*(unsigned int *)(v46 + 8) == NumSymbols) {
        return 1;
      }
      v79[0] = (void **)"symbol operand count does not equal memref symbol count: expected ";
      __int16 v80 = 259;
      mlir::OpState::emitOpError(&v82, v79, (uint64_t)&RawStringData);
      if (RawStringData)
      {
        int v83 = 5;
        uint64_t v84 = v47;
        unint64_t v48 = &v83;
        unint64_t v49 = (char *)v88;
        if (v89 >= v90)
        {
          unint64_t v71 = v89 + 1;
          if (v88 <= &v83 && (char *)v88 + 24 * v89 > (char *)&v83)
          {
            int64_t v76 = (char *)&v83 - (unsigned char *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v71, 24);
            unint64_t v49 = (char *)v88;
            unint64_t v48 = (int *)((char *)v88 + v76);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v71, 24);
            unint64_t v48 = &v83;
            unint64_t v49 = (char *)v88;
          }
        }
        uint64_t v50 = &v49[24 * v89];
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = *((void *)v48 + 2);
        *(_OWORD *)uint64_t v50 = v51;
        uint64_t v52 = ++v89;
        if (RawStringData)
        {
          int v83 = 3;
          uint64_t v84 = ", got ";
          uint64_t v85 = 6;
          long long v53 = &v83;
          unint64_t v54 = (char *)v88;
          if (v52 >= v90)
          {
            unint64_t v72 = v52 + 1;
            BOOL v73 = (char *)v88 + 24 * v52 > (char *)&v83;
            if (v88 <= &v83 && v73)
            {
              int64_t v77 = (char *)&v83 - (unsigned char *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v72, 24);
              unint64_t v54 = (char *)v88;
              long long v53 = (int *)((char *)v88 + v77);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v72, 24);
              long long v53 = &v83;
              unint64_t v54 = (char *)v88;
            }
          }
          unint64_t v55 = &v54[24 * v89];
          long long v56 = *(_OWORD *)v53;
          *((void *)v55 + 2) = *((void *)v53 + 2);
          *(_OWORD *)unint64_t v55 = v56;
          uint64_t v57 = ++v89;
          if (RawStringData)
          {
            unint64_t v58 = v82 + 16 * (((unint64_t)*(unsigned int *)(v82 + 44) >> 23) & 1) + 64;
            if (!HIBYTE(*(_DWORD *)(v82 + 44))) {
              unint64_t v58 = 0;
            }
            unint64_t v59 = (*(_DWORD *)(v58 + 8) + *(_DWORD *)(v58 + 12))
                - (unint64_t)*(unsigned int *)(v58 + 8);
            int v83 = 5;
            uint64_t v84 = (const char *)v59;
            int v60 = &v83;
            unint64_t v61 = (char *)v88;
            if (v57 >= v90)
            {
              unint64_t v74 = v57 + 1;
              BOOL v75 = (char *)v88 + 24 * v57 > (char *)&v83;
              if (v88 <= &v83 && v75)
              {
                int64_t v78 = (char *)&v83 - (unsigned char *)v88;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v74, 24);
                unint64_t v61 = (char *)v88;
                int v60 = (int *)((char *)v88 + v78);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v74, 24);
                int v60 = &v83;
                unint64_t v61 = (char *)v88;
              }
            }
            unint64_t v62 = &v61[24 * v89];
            long long v63 = *(_OWORD *)v60;
            *((void *)v62 + 2) = *((void *)v60 + 2);
            *(_OWORD *)unint64_t v62 = v63;
            ++v89;
          }
        }
      }
      uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      }
      if (v96)
      {
        unint64_t v64 = __p;
        if (__p)
        {
          BOOL v65 = v95;
          int64_t v66 = __p;
          if (v95 != __p)
          {
            do
              BOOL v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
            while (v65 != v64);
            int64_t v66 = __p;
          }
          uint64_t v95 = v64;
          operator delete(v66);
        }
        uint64_t v18 = v92;
        if (!v92) {
          goto LABEL_93;
        }
        int64_t v67 = v93;
        uint64_t v20 = v92;
        if (v93 == v92)
        {
LABEL_92:
          uint64_t v93 = v18;
          operator delete(v20);
LABEL_93:
          if (v88 != v91) {
            free(v88);
          }
          return v14;
        }
        do
        {
          uint64_t v69 = *--v67;
          uint64_t v68 = v69;
          void *v67 = 0;
          if (v69) {
            MEMORY[0x21667D390](v68, 0x1000C8077774924);
          }
        }
        while (v67 != v18);
LABEL_91:
        uint64_t v20 = v92;
        goto LABEL_92;
      }
    }
    else
    {
      v79[0] = (void **)"dimension operand count does not equal memref dynamic dimension count";
      __int16 v80 = 259;
      mlir::OpState::emitOpError(&v82, v79, (uint64_t)&RawStringData);
      uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      }
      if (v96)
      {
        uint64_t v39 = __p;
        if (__p)
        {
          unint64_t v40 = v95;
          long long v41 = __p;
          if (v95 != __p)
          {
            do
              unint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            long long v41 = __p;
          }
          uint64_t v95 = v39;
          operator delete(v41);
        }
        uint64_t v18 = v92;
        if (!v92) {
          goto LABEL_93;
        }
        uint64_t v42 = v93;
        uint64_t v20 = v92;
        if (v93 == v92) {
          goto LABEL_92;
        }
        do
        {
          uint64_t v44 = *--v42;
          uint64_t v43 = v44;
          *uint64_t v42 = 0;
          if (v44) {
            MEMORY[0x21667D390](v43, 0x1000C8077774924);
          }
        }
        while (v42 != v18);
        goto LABEL_91;
      }
    }
  }
  else
  {
    v79[0] = (void **)"result must be a memref";
    __int16 v80 = 259;
    mlir::OpState::emitOpError(&v82, v79, (uint64_t)&RawStringData);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v96)
    {
      int64x2_t v23 = __p;
      if (__p)
      {
        uint64_t v24 = v95;
        int64x2_t v25 = __p;
        if (v95 != __p)
        {
          do
            uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          int64x2_t v25 = __p;
        }
        uint64_t v95 = v23;
        operator delete(v25);
      }
      uint64_t v18 = v92;
      if (!v92) {
        goto LABEL_93;
      }
      uint64_t v26 = v93;
      uint64_t v20 = v92;
      if (v93 == v92) {
        goto LABEL_92;
      }
      do
      {
        uint64_t v28 = *--v26;
        uint64_t v27 = v28;
        void *v26 = 0;
        if (v28) {
          MEMORY[0x21667D390](v27, 0x1000C8077774924);
        }
      }
      while (v26 != v18);
      goto LABEL_91;
    }
  }
  return v14;
}

void mlir::memref::AllocOp::getCanonicalizationPatterns()
{
}

void mlir::memref::AllocaOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::memref::ReallocOp::verify(mlir::memref::ReallocOp *this)
{
  uint64_t v144 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v129 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v128 = *(void *)(v2 - 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v129);
  uint64_t v134 = v3;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v126[0] = "unsupported layout for source memref type ";
    __int16 v127 = 259;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)v126, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      uint64_t v28 = &v130;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v129);
      unint64_t v29 = (char *)v135;
      if (v136 >= v137)
      {
        unint64_t v106 = v136 + 1;
        if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
        {
          int64_t v117 = (char *)&v130 - (unsigned char *)v135;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v106, 24);
          unint64_t v29 = (char *)v135;
          uint64_t v28 = (int *)((char *)v135 + v117);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v106, 24);
          uint64_t v28 = &v130;
          unint64_t v29 = (char *)v135;
        }
      }
      uint64_t v30 = &v29[24 * v136];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)uint64_t v30 = v31;
      ++v136;
    }
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v143)
    {
      int64x2_t v32 = __p;
      if (__p)
      {
        int64x2_t v33 = v142;
        uint64_t v34 = __p;
        if (v142 != __p)
        {
          do
            int64x2_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          uint64_t v34 = __p;
        }
        int v142 = v32;
        operator delete(v34);
      }
      int64x2_t v23 = v139;
      if (!v139) {
        goto LABEL_115;
      }
      int64x2_t v35 = v140;
      int64x2_t v25 = v139;
      if (v140 == v139) {
        goto LABEL_114;
      }
      do
      {
        uint64_t v37 = *--v35;
        uint64_t v36 = v37;
        *int64x2_t v35 = 0;
        if (v37) {
          MEMORY[0x21667D390](v36, 0x1000C8077774924);
        }
      }
      while (v35 != v23);
      goto LABEL_113;
    }
    return v19;
  }
  uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v128);
  uint64_t v134 = v4;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v126[0] = "unsupported layout for result memref type ";
    __int16 v127 = 259;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)v126, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      unint64_t v38 = &v130;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v128);
      uint64_t v39 = (char *)v135;
      if (v136 >= v137)
      {
        unint64_t v107 = v136 + 1;
        if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
        {
          int64_t v118 = (char *)&v130 - (unsigned char *)v135;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v107, 24);
          uint64_t v39 = (char *)v135;
          unint64_t v38 = (int *)((char *)v135 + v118);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v107, 24);
          unint64_t v38 = &v130;
          uint64_t v39 = (char *)v135;
        }
      }
      unint64_t v40 = &v39[24 * v136];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = *((void *)v38 + 2);
      *(_OWORD *)unint64_t v40 = v41;
      ++v136;
    }
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v143)
    {
      uint64_t v42 = __p;
      if (__p)
      {
        uint64_t v43 = v142;
        uint64_t v44 = __p;
        if (v142 != __p)
        {
          do
            uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          uint64_t v44 = __p;
        }
        int v142 = v42;
        operator delete(v44);
      }
      int64x2_t v23 = v139;
      if (!v139) {
        goto LABEL_115;
      }
      uint64_t v45 = v140;
      int64x2_t v25 = v139;
      if (v140 == v139) {
        goto LABEL_114;
      }
      do
      {
        uint64_t v47 = *--v45;
        uint64_t v46 = v47;
        *uint64_t v45 = 0;
        if (v47) {
          MEMORY[0x21667D390](v46, 0x1000C8077774924);
        }
      }
      while (v45 != v23);
      goto LABEL_113;
    }
    return v19;
  }
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v129);
  if (LayerSchedule != ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v128))
  {
    v126[0] = "different memory spaces specified for source memref type ";
    __int16 v127 = 259;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)v126, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      unint64_t v6 = &v130;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v129);
      uint64_t v7 = (char *)v135;
      if (v136 >= v137)
      {
        unint64_t v108 = v136 + 1;
        if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
        {
          int64_t v119 = (char *)&v130 - (unsigned char *)v135;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v108, 24);
          uint64_t v7 = (char *)v135;
          unint64_t v6 = (int *)((char *)v135 + v119);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v108, 24);
          unint64_t v6 = &v130;
          uint64_t v7 = (char *)v135;
        }
      }
      uint64_t v8 = &v7[24 * v136];
      long long v9 = *(_OWORD *)v6;
      *((void *)v8 + 2) = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v8 = v9;
      uint64_t v10 = ++v136;
      if (RawStringData)
      {
        int v130 = 3;
        uint64_t v131 = " and result memref type ";
        uint64_t v132 = 24;
        unint64_t v11 = &v130;
        uint64_t v12 = (char *)v135;
        if (v10 >= v137)
        {
          unint64_t v109 = v10 + 1;
          BOOL v110 = (char *)v135 + 24 * v10 > (char *)&v130;
          if (v135 <= &v130 && v110)
          {
            int64_t v120 = (char *)&v130 - (unsigned char *)v135;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v109, 24);
            uint64_t v12 = (char *)v135;
            unint64_t v11 = (int *)((char *)v135 + v120);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v109, 24);
            unint64_t v11 = &v130;
            uint64_t v12 = (char *)v135;
          }
        }
        uint64_t v13 = &v12[24 * v136];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = *((void *)v11 + 2);
        *(_OWORD *)uint64_t v13 = v14;
        ++v136;
        if (RawStringData)
        {
          uint64_t v15 = &v130;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v128);
          int v16 = (char *)v135;
          if (v136 >= v137)
          {
            unint64_t v111 = v136 + 1;
            if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
            {
              int64_t v121 = (char *)&v130 - (unsigned char *)v135;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v111, 24);
              int v16 = (char *)v135;
              uint64_t v15 = (int *)((char *)v135 + v121);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v111, 24);
              uint64_t v15 = &v130;
              int v16 = (char *)v135;
            }
          }
          uint64_t v17 = &v16[24 * v136];
          long long v18 = *(_OWORD *)v15;
          *((void *)v17 + 2) = *((void *)v15 + 2);
          *(_OWORD *)uint64_t v17 = v18;
          ++v136;
        }
      }
    }
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v143)
    {
      uint64_t v20 = __p;
      if (__p)
      {
        uint64_t v21 = v142;
        uint64_t v22 = __p;
        if (v142 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        int v142 = v20;
        operator delete(v22);
      }
      int64x2_t v23 = v139;
      if (!v139) {
        goto LABEL_115;
      }
      uint64_t v24 = v140;
      int64x2_t v25 = v139;
      if (v140 == v139)
      {
LABEL_114:
        uint64_t v140 = v23;
        operator delete(v25);
LABEL_115:
        if (v135 != v138) {
          free(v135);
        }
        return v19;
      }
      do
      {
        uint64_t v27 = *--v24;
        uint64_t v26 = v27;
        *uint64_t v24 = 0;
        if (v27) {
          MEMORY[0x21667D390](v26, 0x1000C8077774924);
        }
      }
      while (v24 != v23);
LABEL_113:
      int64x2_t v25 = v139;
      goto LABEL_114;
    }
    return v19;
  }
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v129);
  if (RHS == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v128))
  {
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
    if (!v69) {
      goto LABEL_93;
    }
    unint64_t v70 = (v69 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v70 >= 3)
    {
      unint64_t v73 = v70 + 1;
      uint64_t v74 = (v70 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      unint64_t v72 = (uint64_t *)(Value + 8 * v74);
      BOOL v75 = (int64x2_t *)(Value + 16);
      int64x2_t v76 = 0uLL;
      int64x2_t v77 = vdupq_n_s64(0x8000000000000000);
      uint64_t v78 = v74;
      int64x2_t v79 = 0uLL;
      do
      {
        int64x2_t v76 = vsubq_s64(v76, vceqq_s64(v75[-1], v77));
        int64x2_t v79 = vsubq_s64(v79, vceqq_s64(*v75, v77));
        v75 += 2;
        v78 -= 4;
      }
      while (v78);
      uint64_t v71 = vaddvq_s64(vaddq_s64(v79, v76));
      if (v73 == v74) {
        goto LABEL_90;
      }
    }
    else
    {
      uint64_t v71 = 0;
      unint64_t v72 = (uint64_t *)Value;
    }
    do
    {
      uint64_t v80 = *v72++;
      if (v80 == 0x8000000000000000) {
        ++v71;
      }
    }
    while (v72 != (uint64_t *)(Value + 8 * v69));
LABEL_90:
    if (v71 && (*(_DWORD *)(*(void *)this + 68) == 1 || !*(void *)(*(void *)(*(void *)this + 72) + 56)))
    {
      v126[0] = "missing dimension operand for result type ";
      __int16 v127 = 259;
      mlir::OpState::emitError((uint64_t *)this, (uint64_t)v126, (uint64_t)&RawStringData);
      if (RawStringData)
      {
        char v86 = &v130;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v128);
        uint64_t v87 = (char *)v135;
        if (v136 >= v137)
        {
          unint64_t v116 = v136 + 1;
          if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
          {
            int64_t v125 = (char *)&v130 - (unsigned char *)v135;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v116, 24);
            uint64_t v87 = (char *)v135;
            char v86 = (int *)((char *)v135 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v116, 24);
            char v86 = &v130;
            uint64_t v87 = (char *)v135;
          }
        }
        int v88 = &v87[24 * v136];
        long long v89 = *(_OWORD *)v86;
        *((void *)v88 + 2) = *((void *)v86 + 2);
        *(_OWORD *)int v88 = v89;
        ++v136;
      }
      uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      }
      if (v143)
      {
        unsigned int v90 = __p;
        if (__p)
        {
          unint64_t v91 = v142;
          unint64_t v92 = __p;
          if (v142 != __p)
          {
            do
              unint64_t v91 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v91 - 1);
            while (v91 != v90);
            unint64_t v92 = __p;
          }
          int v142 = v90;
          operator delete(v92);
        }
        int64x2_t v23 = v139;
        if (!v139) {
          goto LABEL_115;
        }
        uint64_t v93 = v140;
        int64x2_t v25 = v139;
        if (v140 == v139) {
          goto LABEL_114;
        }
        do
        {
          uint64_t v95 = *--v93;
          uint64_t v94 = v95;
          *uint64_t v93 = 0;
          if (v95) {
            MEMORY[0x21667D390](v94, 0x1000C8077774924);
          }
        }
        while (v93 != v23);
        goto LABEL_113;
      }
      return v19;
    }
LABEL_93:
    uint64_t v81 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
    if (!v82)
    {
LABEL_125:
      if (*(_DWORD *)(*(void *)this + 68) != 1 && *(void *)(*(void *)(*(void *)this + 72) + 56))
      {
        v126[0] = "unnecessary dimension operand for result type ";
        __int16 v127 = 259;
        mlir::OpState::emitError((uint64_t *)this, (uint64_t)v126, (uint64_t)&RawStringData);
        uint64_t v105 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&RawStringData, (uint64_t *)&v128);
        uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v105);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&RawStringData);
        return v19;
      }
      return 1;
    }
    unint64_t v83 = (v82 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v83 >= 3)
    {
      unint64_t v97 = v83 + 1;
      uint64_t v98 = (v83 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v85 = (uint64_t *)(v81 + 8 * v98);
      unint64_t v99 = (int64x2_t *)(v81 + 16);
      int64x2_t v100 = 0uLL;
      int64x2_t v101 = vdupq_n_s64(0x8000000000000000);
      uint64_t v102 = v98;
      int64x2_t v103 = 0uLL;
      do
      {
        int64x2_t v100 = vsubq_s64(v100, vceqq_s64(v99[-1], v101));
        int64x2_t v103 = vsubq_s64(v103, vceqq_s64(*v99, v101));
        v99 += 2;
        v102 -= 4;
      }
      while (v102);
      uint64_t v84 = vaddvq_s64(vaddq_s64(v103, v100));
      if (v97 == v98) {
        goto LABEL_124;
      }
    }
    else
    {
      uint64_t v84 = 0;
      uint64_t v85 = (uint64_t *)v81;
    }
    do
    {
      uint64_t v104 = *v85++;
      if (v104 == 0x8000000000000000) {
        ++v84;
      }
    }
    while (v85 != (uint64_t *)(v81 + 8 * v82));
LABEL_124:
    if (v84) {
      return 1;
    }
    goto LABEL_125;
  }
  v126[0] = "different element types specified for source memref type ";
  __int16 v127 = 259;
  mlir::OpState::emitError((uint64_t *)this, (uint64_t)v126, (uint64_t)&RawStringData);
  if (RawStringData)
  {
    unint64_t v49 = &v130;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v129);
    uint64_t v50 = (char *)v135;
    if (v136 >= v137)
    {
      unint64_t v112 = v136 + 1;
      if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
      {
        int64_t v122 = (char *)&v130 - (unsigned char *)v135;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v112, 24);
        uint64_t v50 = (char *)v135;
        unint64_t v49 = (int *)((char *)v135 + v122);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v112, 24);
        unint64_t v49 = &v130;
        uint64_t v50 = (char *)v135;
      }
    }
    long long v51 = &v50[24 * v136];
    long long v52 = *(_OWORD *)v49;
    *((void *)v51 + 2) = *((void *)v49 + 2);
    *(_OWORD *)long long v51 = v52;
    uint64_t v53 = ++v136;
    if (RawStringData)
    {
      int v130 = 3;
      uint64_t v131 = " and result memref type ";
      uint64_t v132 = 24;
      unint64_t v54 = &v130;
      unint64_t v55 = (char *)v135;
      if (v53 >= v137)
      {
        unint64_t v113 = v53 + 1;
        BOOL v114 = (char *)v135 + 24 * v53 > (char *)&v130;
        if (v135 <= &v130 && v114)
        {
          int64_t v123 = (char *)&v130 - (unsigned char *)v135;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v113, 24);
          unint64_t v55 = (char *)v135;
          unint64_t v54 = (int *)((char *)v135 + v123);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v113, 24);
          unint64_t v54 = &v130;
          unint64_t v55 = (char *)v135;
        }
      }
      long long v56 = &v55[24 * v136];
      long long v57 = *(_OWORD *)v54;
      *((void *)v56 + 2) = *((void *)v54 + 2);
      *(_OWORD *)long long v56 = v57;
      ++v136;
      if (RawStringData)
      {
        unint64_t v58 = &v130;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v128);
        unint64_t v59 = (char *)v135;
        if (v136 >= v137)
        {
          unint64_t v115 = v136 + 1;
          if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
          {
            int64_t v124 = (char *)&v130 - (unsigned char *)v135;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v115, 24);
            unint64_t v59 = (char *)v135;
            unint64_t v58 = (int *)((char *)v135 + v124);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v115, 24);
            unint64_t v58 = &v130;
            unint64_t v59 = (char *)v135;
          }
        }
        int v60 = &v59[24 * v136];
        long long v61 = *(_OWORD *)v58;
        *((void *)v60 + 2) = *((void *)v58 + 2);
        *(_OWORD *)int v60 = v61;
        ++v136;
      }
    }
  }
  uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
  if (RawStringData) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
  }
  if (v143)
  {
    unint64_t v62 = __p;
    if (__p)
    {
      long long v63 = v142;
      unint64_t v64 = __p;
      if (v142 != __p)
      {
        do
          long long v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
        while (v63 != v62);
        unint64_t v64 = __p;
      }
      int v142 = v62;
      operator delete(v64);
    }
    int64x2_t v23 = v139;
    if (!v139) {
      goto LABEL_115;
    }
    BOOL v65 = v140;
    int64x2_t v25 = v139;
    if (v140 == v139) {
      goto LABEL_114;
    }
    do
    {
      uint64_t v67 = *--v65;
      uint64_t v66 = v67;
      *BOOL v65 = 0;
      if (v67) {
        MEMORY[0x21667D390](v66, 0x1000C8077774924);
      }
    }
    while (v65 != v23);
    goto LABEL_113;
  }
  return v19;
}

void mlir::memref::ReallocOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::memref::AllocaScopeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
    int v6 = *((_DWORD *)*this + 9);
    if (!v6) {
      goto LABEL_13;
    }
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
    int v6 = *((_DWORD *)*this + 9);
    if (!v6) {
      goto LABEL_13;
    }
  }
  uint64_t v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v8 = *((void *)v7 + 4);
  if ((unint64_t)(*((void *)v7 + 3) - v8) > 4)
  {
    *(unsigned char *)(v8 + 4) = 40;
    *(_DWORD *)uint64_t v8 = 540945696;
    *((void *)v7 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v7, " -> (", 5uLL);
  }
  uint64_t v9 = *((unsigned int *)*this + 9);
  uint64_t v10 = (char *)*this - 16;
  if (!v9) {
    uint64_t v10 = 0;
  }
  uint64_t v24 = v10;
  uint64_t v25 = v9;
  mlir::OperandRange::getTypes((uint64_t *)&v24, v23);
  uint64_t v24 = ", ";
  uint64_t v25 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v23[0], v23[1], v23[2], v23[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)&v24);
  unint64_t v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v12 = (unsigned char *)*((void *)v11 + 4);
  if (*((unsigned char **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ")", 1uLL);
  }
  else
  {
    *uint64_t v12 = 41;
    ++*((void *)v11 + 4);
  }
LABEL_13:
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
    uint64_t v15 = *this;
    unint64_t v16 = *((unsigned int *)*this + 11);
    if ((v16 & 0x7FFFFF) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *long long v14 = 32;
    uint64_t v15 = *this;
    unint64_t v16 = *((unsigned int *)*this + 11);
    if ((v16 & 0x7FFFFF) != 0)
    {
LABEL_15:
      unint64_t v17 = (((unint64_t)v15 + 16 * ((v16 >> 23) & 1) + ((v16 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v15 + 10);
      goto LABEL_18;
    }
  }
  unint64_t v17 = 0;
LABEL_18:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, void, BOOL, void))(*(void *)a2 + 224))(a2, v17, 0, v6 != 0, 0);
  long long v18 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v23[0] = mlir::Operation::getAttrDictionary(v18);
    uint64_t v19 = (mlir::ArrayAttr *)v23;
  }
  else
  {
    uint64_t v19 = (mlir::Operation *)((char *)v18 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v19);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v21, 0, 0);
}

void mlir::memref::AllocaScopeOp::parse(uint64_t a1, mlir::OperationState *a2)
{
}

__n128 mlir::memref::AllocaScopeOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v17[2] = *MEMORY[0x263EF8340];
  if (a2)
  {
    unint64_t v4 = *(unsigned int *)(*(void *)a1 + 36);
    if (v4) {
      uint64_t v5 = *(void *)a1 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v16 = 0;
    int v6 = (__n128 *)&v16;
    mlir::ValueRange::ValueRange(v17, v5, v4);
    uint64_t v7 = *(unsigned int *)(a3 + 8);
    unint64_t v8 = *(void *)a3;
    if (v7 >= *(_DWORD *)(a3 + 12))
    {
LABEL_12:
      unint64_t v13 = v7 + 1;
      BOOL v14 = v8 + 24 * v7 > (unint64_t)&v16;
      if (v8 <= (unint64_t)&v16 && v14)
      {
        uint64_t v15 = (char *)&v17[-1] - v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13, 24);
        unint64_t v8 = *(void *)a3;
        int v6 = (__n128 *)&v15[*(void *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13, 24);
        unint64_t v8 = *(void *)a3;
        int v6 = (__n128 *)&v16;
      }
    }
  }
  else
  {
    unint64_t v9 = *(unsigned int *)(*(void *)a1 + 44);
    if ((v9 & 0x7FFFFF) != 0) {
      unint64_t v10 = ((*(void *)a1 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
    }
          + 32 * *(unsigned int *)(*(void *)a1 + 40);
    else {
      unint64_t v10 = 0;
    }
    unint64_t v16 = v10;
    int v6 = (__n128 *)&v16;
    mlir::ValueRange::ValueRange(v17, 0, 0);
    uint64_t v7 = *(unsigned int *)(a3 + 8);
    unint64_t v8 = *(void *)a3;
    if (v7 >= *(_DWORD *)(a3 + 12)) {
      goto LABEL_12;
    }
  }
  unint64_t v11 = (__n128 *)(v8 + 24 * *(unsigned int *)(a3 + 8));
  __n128 result = *v6;
  v11[1].n128_u64[0] = v6[1].n128_u64[0];
  *unint64_t v11 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

void mlir::memref::AllocaScopeOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::memref::AssumeAlignmentOp::verify(mlir::memref::AssumeAlignmentOp *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  v14[0] = *(void ***)(*(void *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                     + 64);
  mlir::IntegerAttr::getValue((uint64_t)v14, (llvm::APInt *)&v16);
  if (v17 > 0x40)
  {
    uint64_t v2 = *v16;
    MEMORY[0x21667D390]();
  }
  else
  {
    LODWORD(v2) = v16;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.i32[0] == 1) {
    return 1;
  }
  v14[0] = (void **)"alignment must be power of 2";
  __int16 v15 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v14, (uint64_t)&v16);
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
  if (v16) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
  }
  if (v24)
  {
    uint64_t v5 = __p;
    if (__p)
    {
      int v6 = v23;
      uint64_t v7 = __p;
      if (v23 != __p)
      {
        do
          int v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      int64x2_t v23 = v5;
      operator delete(v7);
    }
    unint64_t v8 = v20;
    if (v20)
    {
      unint64_t v9 = v21;
      unint64_t v10 = v20;
      if (v21 != v20)
      {
        do
        {
          uint64_t v12 = *--v9;
          uint64_t v11 = v12;
          void *v9 = 0;
          if (v12) {
            MEMORY[0x21667D390](v11, 0x1000C8077774924);
          }
        }
        while (v9 != v8);
        unint64_t v10 = v20;
      }
      uint64_t v21 = v8;
      operator delete(v10);
    }
    if (v18 != &v19) {
      free(v18);
    }
  }
  return v4;
}

uint64_t mlir::memref::CastOp::getAsmResultNames(void *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "cast", 4);
}

uint64_t mlir::memref::CastOp::canFoldIntoConsumerOp(uint64_t a1)
{
  v35[4] = *MEMORY[0x263EF8340];
  unint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v1 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    unint64_t v1 = 0;
  }
  unint64_t v29 = v1;
  unint64_t v2 = *(void *)(a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    unint64_t v2 = 0;
  }
  unint64_t v28 = v2;
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v29);
  if (RHS != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v28)) {
    return 0;
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
  uint64_t v6 = v5;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  if (v6 != v7) {
    return 0;
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int64x2_t v33 = v35;
  uint64_t v34 = 0x400000000;
  uint64_t v30 = v32;
  uint64_t v31 = 0x400000000;
  if (mlir::getStridesAndOffset(v29, (uint64_t)&v33, &v27)
    && mlir::getStridesAndOffset(v28, (uint64_t)&v30, &v26))
  {
    uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
    uint64_t v10 = v9;
    uint64_t v11 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
    if (v10 && v12)
    {
      uint64_t v13 = 8 * v12 - 8;
      uint64_t v14 = 8 * v10 - 8;
      while (*Value != 0x8000000000000000 || *v11 == 0x8000000000000000)
      {
        if (v14)
        {
          ++Value;
          ++v11;
          uint64_t v16 = v13;
          v13 -= 8;
          v14 -= 8;
          if (v16) {
            continue;
          }
        }
        goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      if (v27 != 0x8000000000000000 || v26 == 0x8000000000000000)
      {
        uint64_t v18 = 1;
        if (v34 && v31)
        {
          uint64_t v19 = v33;
          uint64_t v20 = v30;
          uint64_t v21 = 8 * v31 - 8;
          uint64_t v22 = 8 * v34 - 8;
          do
          {
            BOOL v23 = *v19 != 0x8000000000000000 || *v20 == 0x8000000000000000;
            uint64_t v18 = v23;
            if (!v23) {
              break;
            }
            uint64_t v18 = 1;
            if (!v22) {
              break;
            }
            ++v19;
            ++v20;
            uint64_t v24 = v21;
            v21 -= 8;
            v22 -= 8;
          }
          while (v24);
        }
        goto LABEL_45;
      }
    }
  }
  uint64_t v18 = 0;
LABEL_45:
  if (v30 != v32) {
    free(v30);
  }
  if (v33 != v35) {
    free(v33);
  }
  return v18;
}

BOOL mlir::ShapedType::isDynamic(mlir::ShapedType *this)
{
  return this == (mlir::ShapedType *)0x8000000000000000;
}

BOOL mlir::memref::CastOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = 0;
  v49[4] = *MEMORY[0x263EF8340];
  if (a2 == 1 && a4 == 1)
  {
    unint64_t v7 = mlir::TypeRange::dereference_iterator(a1, 0);
    unint64_t v8 = mlir::TypeRange::dereference_iterator(a3, 0);
    if (*(_UNKNOWN **)(*(void *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v43 = v9;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v42 = v10;
    uint64_t v11 = *(void **)(*(void *)v7 + 136);
    if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
      unint64_t v12 = v7;
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v41 = v12;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
      unint64_t v13 = v8;
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v40 = v13;
    if (v9)
    {
      if (v10)
      {
        uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v43);
        if (RHS != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v42)) {
          return 0;
        }
        uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v43);
        if (RawStringData == mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v42)) {
          goto LABEL_49;
        }
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v47 = v49;
        uint64_t v48 = 0x400000000;
        uint64_t v44 = v46;
        uint64_t v45 = 0x400000000;
        if (mlir::getStridesAndOffset(v43, (uint64_t)&v47, &v39)
          && mlir::getStridesAndOffset(v42, (uint64_t)&v44, &v38)
          && v48 == v45
          && (v39 == 0x8000000000000000 || v38 == 0x8000000000000000 || v39 == v38))
        {
          if (!v48)
          {
LABEL_74:
            int v22 = 1;
            BOOL v23 = v44;
            if (v44 == v46)
            {
LABEL_46:
              if (v47 != v49) {
                free(v47);
              }
              if (v22)
              {
LABEL_49:
                uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v43);
                if (LayerSchedule == ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v42))
                {
                  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
                  uint64_t v26 = v25;
                  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
                  if (v26 == v27)
                  {
                    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
                    if (!v28) {
                      return 1;
                    }
                    uint64_t v29 = 0;
                    uint64_t v30 = 8 * v28;
                    while (1)
                    {
                      uint64_t v31 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43) + v29);
                      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
                      if (v31 != 0x8000000000000000)
                      {
                        uint64_t v33 = *(void *)(Value + v29);
                        if (v33 != 0x8000000000000000 && v31 != v33) {
                          break;
                        }
                      }
                      v29 += 8;
                      BOOL result = 1;
                      if (v30 == v29) {
                        return result;
                      }
                    }
                  }
                }
              }
              return 0;
            }
LABEL_45:
            free(v23);
            goto LABEL_46;
          }
          uint64_t v16 = v47;
          unsigned int v17 = v44;
          uint64_t v18 = 8 * v48;
          while (*v16 == 0x8000000000000000 || *v17 == 0x8000000000000000 || *v16 == *v17)
          {
            ++v16;
            ++v17;
            v18 -= 8;
            if (!v18) {
              goto LABEL_74;
            }
          }
        }
        int v22 = 0;
        BOOL v23 = v44;
        if (v44 == v46) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
      if (v13) {
        BOOL v19 = v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19) {
        return 0;
      }
      uint64_t v20 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v43);
      if (v42) {
        goto LABEL_36;
      }
    }
    else
    {
      if (!v12) {
        return 0;
      }
      if (v10)
      {
        if (v13) {
          return 0;
        }
      }
      else
      {
        if (v13) {
          BOOL v35 = v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
        }
        else {
          BOOL v35 = 1;
        }
        if (v35) {
          return 0;
        }
      }
      uint64_t v20 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
      if (v42)
      {
LABEL_36:
        if (v20 != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v42)) {
          return 0;
        }
LABEL_68:
        if (v43)
        {
          uint64_t LHS = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v43);
          if (v42)
          {
LABEL_70:
            uint64_t v37 = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v42);
            return LHS == v37;
          }
        }
        else
        {
          uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v41);
          if (v42) {
            goto LABEL_70;
          }
        }
        uint64_t v37 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v40);
        return LHS == v37;
      }
    }
    if (v20 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40)) {
      return 0;
    }
    goto LABEL_68;
  }
  return result;
}

uint64_t mlir::memref::CastOp::fold(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) == 0) {
    return 4;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 68);
  if (!v2) {
    return 4;
  }
  char v4 = 0;
  uint64_t v5 = *(uint64_t **)(v1 + 72);
  uint64_t v6 = &v5[4 * v2];
  do
  {
    while (1)
    {
      uint64_t v12 = v5[3];
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (!DefiningOp) {
        break;
      }
      if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id) {
        break;
      }
      if (!v5[3]) {
        break;
      }
      unint64_t v8 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
      if (*(_UNKNOWN **)(*(void *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
        break;
      }
      uint64_t v9 = (uint64_t *)v5[1];
      if (v9)
      {
        uint64_t *v9 = *v5;
        if (*v5) {
          *(void *)(*v5 + 8) = v5[1];
        }
      }
      v5[3] = (uint64_t)v8;
      uint64_t v10 = *v8;
      uint64_t *v5 = *v8;
      v5[1] = (uint64_t)v8;
      if (v10) {
        *(void *)(v10 + 8) = v5;
      }
      *unint64_t v8 = (uint64_t)v5;
      v5 += 4;
      char v4 = 1;
      if (v5 == v6) {
        return (*a1 - 16) | 4;
      }
    }
    v5 += 4;
  }
  while (v5 != v6);
  if ((v4 & 1) == 0) {
    return 4;
  }
  return (*a1 - 16) | 4;
}

void mlir::memref::CopyOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::memref::CopyOp::fold(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) != 0 && (uint64_t v2 = *(unsigned int *)(v1 + 68), v2))
  {
    char v3 = 0;
    char v4 = *(uint64_t **)(v1 + 72);
    uint64_t v5 = 32 * v2;
    do
    {
      uint64_t v13 = v4[3];
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
      if (DefiningOp)
      {
        unint64_t v7 = *(void **)(*(void *)(DefiningOp + 48) + 16);
        uint64_t v8 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id ? DefiningOp : 0;
        if (v7 == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id
          && mlir::memref::CastOp::canFoldIntoConsumerOp(DefiningOp))
        {
          uint64_t v9 = *(uint64_t **)(*(void *)(v8 + 72) + 24);
          uint64_t v10 = (uint64_t *)v4[1];
          if (v10)
          {
            *uint64_t v10 = *v4;
            if (*v4) {
              *(void *)(*v4 + 8) = v4[1];
            }
          }
          v4[3] = (uint64_t)v9;
          uint64_t v11 = *v9;
          uint64_t *v4 = *v9;
          v4[1] = (uint64_t)v9;
          if (v11) {
            *(void *)(v11 + 8) = v4;
          }
          uint64_t *v9 = (uint64_t)v4;
          char v3 = 1;
        }
      }
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t mlir::memref::DeallocOp::fold(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) != 0 && (uint64_t v2 = *(unsigned int *)(v1 + 68), v2))
  {
    char v3 = 0;
    char v4 = *(uint64_t **)(v1 + 72);
    uint64_t v5 = 32 * v2;
    do
    {
      uint64_t v11 = v4[3];
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
      if (DefiningOp)
      {
        if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
        {
          if (v4[3])
          {
            unint64_t v7 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
            if (*(_UNKNOWN **)(*(void *)(v7[1] & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
            {
              uint64_t v8 = (uint64_t *)v4[1];
              if (v8)
              {
                *uint64_t v8 = *v4;
                if (*v4) {
                  *(void *)(*v4 + 8) = v4[1];
                }
              }
              v4[3] = (uint64_t)v7;
              uint64_t v9 = *v7;
              uint64_t *v4 = *v7;
              v4[1] = (uint64_t)v7;
              if (v9) {
                *(void *)(v9 + 8) = v4;
              }
              uint64_t *v7 = (uint64_t)v4;
              char v3 = 1;
            }
          }
        }
      }
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t mlir::memref::DimOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v4 = *(void *)a1 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);

  return a2(a3, NextResultAtOffset, "dim", 3);
}

BOOL mlir::memref::DimOp::getSpeculatability(mlir::memref::DimOp *this)
{
  mlir::getConstantIntValue(*(void *)(*(void *)(*(void *)this + 72) + 56) | 4);
  if (!v2) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    return (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != 0;
  return 0;
}

void mlir::memref::SubViewOp::getDroppedDims(mlir::memref::SubViewOp *this@<X0>, void *a2@<X8>)
{
  v10[4] = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v5 = *(void *)this - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(this, (uint64_t)&v8);
  computeMemRefRankReductionMask(&v7, v4, v6, (uint64_t)v8, v9);
  if (v8 != v10) {
    free(v8);
  }
  if ((v7 & 1) == 0) {
    operator new();
  }
  *a2 = v7;
}

void computeMemRefRankReductionMask(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v144[6] = *MEMORY[0x263EF8340];
  uint64_t v137 = a3;
  uint64_t v138 = a2;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v138);
  if (v8 > 0x39) {
    operator new();
  }
  unint64_t v9 = (v8 << 58) | 1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v138);
  uint64_t v11 = v10;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v137);
  if (v11 == v12) {
    goto LABEL_26;
  }
  if (a5)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 8 * a5;
    do
    {
      uint64_t v15 = *(void *)(a4 + 8 * v13);
      if ((v15 & 4) == 0)
      {
        uint64_t v16 = (uint64_t **)(v15 & 0xFFFFFFFFFFFFFFF8);
        if (v16)
        {
          int v142 = v16;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v142) == 1)
          {
            if (v9) {
              unint64_t v9 = v9 & 0xFC00000000000000 | (2
            }
                                              * (((v9 >> 1) & ~(-1 << (v9 >> 58)) | (1 << v13)) & ~(-1 << (v9 >> 58)))) | 1;
            else {
              *(void *)(*(void *)v9 + 8 * (v13 >> 6)) |= 1 << v13;
            }
          }
        }
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  if (v9)
  {
    uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)((v9 >> 1) & ~(-1 << (v9 >> 58))));
    v22.i16[0] = vaddlv_u8(v22);
    unsigned int v20 = v22.i32[0];
    goto LABEL_25;
  }
  uint64_t v17 = *(unsigned int *)(v9 + 8);
  if (!v17)
  {
    unsigned int v20 = 0;
    goto LABEL_25;
  }
  uint64_t v18 = *(int8x8_t **)v9;
  unint64_t v19 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v19 < 7)
  {
    unsigned int v20 = 0;
    uint64_t v21 = *(int8x8_t **)v9;
LABEL_23:
    uint64_t v33 = &v18[v17];
    do
    {
      int8x8_t v34 = *v21++;
      uint8x8_t v35 = (uint8x8_t)vcnt_s8(v34);
      v35.i16[0] = vaddlv_u8(v35);
      v20 += v35.i32[0];
    }
    while (v21 != v33);
    goto LABEL_25;
  }
  unint64_t v23 = v19 + 1;
  uint64_t v24 = (v19 + 1) & 0x3FFFFFFFFFFFFFF8;
  uint64_t v21 = &v18[v24];
  uint64_t v25 = (int8x16_t *)&v18[4];
  int32x4_t v26 = 0uLL;
  uint64_t v27 = v24;
  int32x4_t v28 = 0uLL;
  do
  {
    int8x16_t v29 = v25[-2];
    int8x16_t v30 = v25[-1];
    int8x16_t v31 = *v25;
    int8x16_t v32 = v25[1];
    v25 += 4;
    int32x4_t v26 = vaddq_s32(v26, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v29)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v30))))));
    int32x4_t v28 = vaddq_s32(v28, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v31)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v32))))));
    v27 -= 8;
  }
  while (v27);
  unsigned int v20 = vaddvq_s32(vaddq_s32(v28, v26));
  if (v23 != v24) {
    goto LABEL_23;
  }
LABEL_25:
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v137);
  uint64_t v37 = v36 + v20;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v138);
  if (v37 == v38)
  {
LABEL_26:
    *(void *)a1 = v9;
    a1[8] = 1;
    return;
  }
  int v142 = (uint64_t **)v144;
  uint64_t v143 = 0x600000000;
  unint64_t v139 = v141;
  uint64_t v140 = 0x600000000;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  if (mlir::getStridesAndOffset(v138, (uint64_t)&v142, &v136)
    && mlir::getStridesAndOffset(v137, (uint64_t)&v139, &v135))
  {
    unint64_t v128 = a1;
    uint64_t v39 = v142;
    int v133 = 0;
    uint64_t v134 = 0;
    uint64_t v132 = &v133;
    if (v143)
    {
      unint64_t v40 = &v142[v143];
      do
      {
        unint64_t v41 = *v39;
        uint64_t v42 = v133;
        uint64_t v43 = &v133;
        uint64_t v44 = &v133;
        if (v133)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v44 = (uint64_t **)v42;
              uint64_t v45 = v42[4];
              if ((uint64_t)v41 >= v45) {
                break;
              }
              uint64_t v42 = *v44;
              uint64_t v43 = v44;
              if (!*v44) {
                goto LABEL_41;
              }
            }
            if (v45 >= (uint64_t)v41) {
              break;
            }
            uint64_t v42 = v44[1];
            if (!v42)
            {
              uint64_t v43 = v44 + 1;
              goto LABEL_41;
            }
          }
        }
        else
        {
LABEL_41:
          uint64_t v46 = (uint64_t *)v44;
          uint64_t v44 = (uint64_t **)operator new(0x30uLL);
          v44[4] = v41;
          *((_DWORD *)v44 + 10) = 0;
          void *v44 = 0;
          v44[1] = 0;
          v44[2] = v46;
          void *v43 = (uint64_t *)v44;
          uint64_t v47 = (uint64_t *)v44;
          if (*v132)
          {
            uint64_t v132 = (uint64_t **)*v132;
            uint64_t v47 = *v43;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v133, v47);
          ++v134;
        }
        ++*((_DWORD *)v44 + 10);
        ++v39;
      }
      while (v39 != v40);
    }
    unint64_t v49 = (uint64_t **)v139;
    int v130 = 0;
    uint64_t v131 = 0;
    unint64_t v129 = &v130;
    if (v140)
    {
      uint64_t v50 = (uint64_t **)((char *)v139 + 8 * v140);
      do
      {
        long long v51 = *v49;
        long long v52 = v130;
        uint64_t v53 = &v130;
        unint64_t v54 = &v130;
        if (v130)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v54 = (uint64_t **)v52;
              uint64_t v55 = v52[4];
              if ((uint64_t)v51 >= v55) {
                break;
              }
              long long v52 = *v54;
              uint64_t v53 = v54;
              if (!*v54) {
                goto LABEL_62;
              }
            }
            if (v55 >= (uint64_t)v51) {
              break;
            }
            long long v52 = v54[1];
            if (!v52)
            {
              uint64_t v53 = v54 + 1;
              goto LABEL_62;
            }
          }
        }
        else
        {
LABEL_62:
          long long v56 = (uint64_t *)v54;
          unint64_t v54 = (uint64_t **)operator new(0x30uLL);
          v54[4] = v51;
          *((_DWORD *)v54 + 10) = 0;
          *unint64_t v54 = 0;
          v54[1] = 0;
          v54[2] = v56;
          int *v53 = (uint64_t *)v54;
          long long v57 = (uint64_t *)v54;
          if (*v129)
          {
            unint64_t v129 = (uint64_t **)*v129;
            long long v57 = *v53;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v130, v57);
          ++v131;
        }
        ++*((_DWORD *)v54 + 10);
        ++v49;
      }
      while (v49 != v50);
    }
    if (v9)
    {
      unint64_t v58 = v9 >> 58;
      if (!(v9 >> 58)) {
        goto LABEL_152;
      }
    }
    else
    {
      unint64_t v58 = *(unsigned int *)(v9 + 64);
      if (!*(_DWORD *)(v9 + 64))
      {
LABEL_152:
        if (v9)
        {
          uint8x8_t v111 = (uint8x8_t)vcnt_s8((int8x8_t)((v9 >> 1) & ~(-1 << (v9 >> 58))));
          v111.i16[0] = vaddlv_u8(v111);
          unsigned int v109 = v111.i32[0];
          unint64_t v106 = v128;
        }
        else
        {
          uint64_t v105 = *(unsigned int *)(v9 + 8);
          unint64_t v106 = v128;
          if (v105)
          {
            unint64_t v107 = *(int8x8_t **)v9;
            unint64_t v108 = (v105 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (v108 >= 7)
            {
              unint64_t v112 = v108 + 1;
              uint64_t v113 = (v108 + 1) & 0x3FFFFFFFFFFFFFF8;
              BOOL v110 = &v107[v113];
              BOOL v114 = (int8x16_t *)&v107[4];
              int32x4_t v115 = 0uLL;
              uint64_t v116 = v113;
              int32x4_t v117 = 0uLL;
              do
              {
                int8x16_t v118 = v114[-2];
                int8x16_t v119 = v114[-1];
                int8x16_t v120 = *v114;
                int8x16_t v121 = v114[1];
                v114 += 4;
                int32x4_t v115 = vaddq_s32(v115, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v118)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v119))))));
                int32x4_t v117 = vaddq_s32(v117, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v120)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v121))))));
                v116 -= 8;
              }
              while (v116);
              unsigned int v109 = vaddvq_s32(vaddq_s32(v117, v115));
              if (v112 == v113) {
                goto LABEL_163;
              }
            }
            else
            {
              unsigned int v109 = 0;
              BOOL v110 = *(int8x8_t **)v9;
            }
            int64_t v122 = &v107[v105];
            do
            {
              int8x8_t v123 = *v110++;
              uint8x8_t v124 = (uint8x8_t)vcnt_s8(v123);
              v124.i16[0] = vaddlv_u8(v124);
              v109 += v124.i32[0];
            }
            while (v110 != v122);
          }
          else
          {
            unsigned int v109 = 0;
          }
        }
LABEL_163:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v137);
        uint64_t v126 = v125 + v109;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v138);
        if (v126 == v127)
        {
          *(void *)unint64_t v106 = v9;
          unint64_t v9 = 1;
          v106[8] = 1;
        }
        else
        {
          *unint64_t v106 = 0;
          v106[8] = 0;
        }
LABEL_166:
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v129, v130);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v132, v133);
        uint64_t v48 = v139;
        if (v139 == v141) {
          goto LABEL_45;
        }
        goto LABEL_44;
      }
    }
    uint64_t v59 = 0;
    while (1)
    {
      if (v9)
      {
        if (((v9 >> 1) & ~(-1 << (v9 >> 58)) & (1 << v59)) == 0) {
          goto LABEL_70;
        }
      }
      else if ((*(void *)(*(void *)v9 + 8 * (v59 >> 6)) & (1 << v59)) == 0)
      {
        goto LABEL_70;
      }
      int v60 = v142[v59];
      long long v61 = v133;
      unint64_t v62 = &v133;
      long long v63 = &v133;
      if (v133)
      {
        while (1)
        {
          while (1)
          {
            long long v63 = (uint64_t **)v61;
            uint64_t v64 = v61[4];
            if ((uint64_t)v60 >= v64) {
              break;
            }
            long long v61 = *v63;
            unint64_t v62 = v63;
            if (!*v63) {
              goto LABEL_82;
            }
          }
          if (v64 >= (uint64_t)v60) {
            break;
          }
          long long v61 = v63[1];
          if (!v61)
          {
            unint64_t v62 = v63 + 1;
            goto LABEL_82;
          }
        }
      }
      else
      {
LABEL_82:
        BOOL v65 = (uint64_t *)v63;
        long long v63 = (uint64_t **)operator new(0x30uLL);
        v63[4] = v60;
        *((_DWORD *)v63 + 10) = 0;
        *long long v63 = 0;
        v63[1] = 0;
        v63[2] = v65;
        *unint64_t v62 = (uint64_t *)v63;
        uint64_t v66 = (uint64_t *)v63;
        if (*v132)
        {
          uint64_t v132 = (uint64_t **)*v132;
          uint64_t v66 = *v62;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v133, v66);
        ++v134;
      }
      unsigned int v67 = *((_DWORD *)v63 + 10);
      uint64_t v68 = v130;
      uint64_t v69 = &v130;
      unint64_t v70 = &v130;
      if (v130)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v70 = (uint64_t **)v68;
            uint64_t v71 = v68[4];
            if ((uint64_t)v60 >= v71) {
              break;
            }
            uint64_t v68 = *v70;
            uint64_t v69 = v70;
            if (!*v70) {
              goto LABEL_92;
            }
          }
          if (v71 >= (uint64_t)v60) {
            break;
          }
          uint64_t v68 = v70[1];
          if (!v68)
          {
            uint64_t v69 = v70 + 1;
            goto LABEL_92;
          }
        }
      }
      else
      {
LABEL_92:
        unint64_t v72 = (uint64_t *)v70;
        unint64_t v70 = (uint64_t **)operator new(0x30uLL);
        v70[4] = v60;
        *((_DWORD *)v70 + 10) = 0;
        *unint64_t v70 = 0;
        v70[1] = 0;
        v70[2] = v72;
        *uint64_t v69 = (uint64_t *)v70;
        unint64_t v73 = (uint64_t *)v70;
        if (*v129)
        {
          unint64_t v129 = (uint64_t **)*v129;
          unint64_t v73 = *v69;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v130, v73);
        ++v131;
      }
      uint64_t v74 = v133;
      if (v67 <= *((_DWORD *)v70 + 10))
      {
        uint64_t v80 = &v133;
        uint64_t v81 = &v133;
        if (v133)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v81 = (uint64_t **)v74;
              uint64_t v82 = v74[4];
              if ((uint64_t)v60 >= v82) {
                break;
              }
              uint64_t v74 = *v81;
              uint64_t v80 = v81;
              if (!*v81) {
                goto LABEL_114;
              }
            }
            if (v82 >= (uint64_t)v60) {
              break;
            }
            uint64_t v74 = v81[1];
            if (!v74)
            {
              uint64_t v80 = v81 + 1;
              goto LABEL_114;
            }
          }
        }
        else
        {
LABEL_114:
          unint64_t v83 = (uint64_t *)v81;
          uint64_t v81 = (uint64_t **)operator new(0x30uLL);
          v81[4] = v60;
          *((_DWORD *)v81 + 10) = 0;
          *uint64_t v81 = 0;
          v81[1] = 0;
          v81[2] = v83;
          _OWORD *v80 = (uint64_t *)v81;
          uint64_t v84 = (uint64_t *)v81;
          if (*v132)
          {
            uint64_t v132 = (uint64_t **)*v132;
            uint64_t v84 = *v80;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v133, v84);
          ++v134;
        }
        int v85 = *((_DWORD *)v81 + 10);
        char v86 = v130;
        uint64_t v87 = &v130;
        int v88 = &v130;
        if (v130)
        {
          while (1)
          {
            while (1)
            {
              int v88 = (uint64_t **)v86;
              uint64_t v89 = v86[4];
              if ((uint64_t)v60 >= v89) {
                break;
              }
              char v86 = *v88;
              uint64_t v87 = v88;
              if (!*v88) {
                goto LABEL_124;
              }
            }
            if (v89 >= (uint64_t)v60) {
              break;
            }
            char v86 = v88[1];
            if (!v86)
            {
              uint64_t v87 = v88 + 1;
              goto LABEL_124;
            }
          }
        }
        else
        {
LABEL_124:
          unsigned int v90 = (uint64_t *)v88;
          int v88 = (uint64_t **)operator new(0x30uLL);
          v88[4] = v60;
          *((_DWORD *)v88 + 10) = 0;
          char *v88 = 0;
          v88[1] = 0;
          v88[2] = v90;
          char *v87 = (uint64_t *)v88;
          unint64_t v91 = (uint64_t *)v88;
          if (*v129)
          {
            unint64_t v129 = (uint64_t **)*v129;
            unint64_t v91 = *v87;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v130, v91);
          ++v131;
        }
        if (v85 == *((_DWORD *)v88 + 10))
        {
          if (v9) {
            unint64_t v9 = ((2 * ~((1 << v59) | (-1 << (v9 >> 58)))) | 0xFC00000000000000) & v9 | 1;
          }
          else {
            *(void *)(*(void *)v9 + 8 * (v59 >> 6)) &= ~(1 << v59);
          }
        }
        else
        {
          unint64_t v92 = v133;
          uint64_t v93 = &v133;
          uint64_t v94 = &v133;
          if (v133)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v94 = (uint64_t **)v92;
                uint64_t v95 = v92[4];
                if ((uint64_t)v60 >= v95) {
                  break;
                }
                unint64_t v92 = *v94;
                uint64_t v93 = v94;
                if (!*v94) {
                  goto LABEL_137;
                }
              }
              if (v95 >= (uint64_t)v60) {
                break;
              }
              unint64_t v92 = v94[1];
              if (!v92)
              {
                uint64_t v93 = v94 + 1;
                goto LABEL_137;
              }
            }
          }
          else
          {
LABEL_137:
            char v96 = (uint64_t *)v94;
            uint64_t v94 = (uint64_t **)operator new(0x30uLL);
            v94[4] = v60;
            *((_DWORD *)v94 + 10) = 0;
            const char *v94 = 0;
            v94[1] = 0;
            v94[2] = v96;
            *uint64_t v93 = (uint64_t *)v94;
            unint64_t v97 = (uint64_t *)v94;
            if (*v132)
            {
              uint64_t v132 = (uint64_t **)*v132;
              unint64_t v97 = *v93;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v133, v97);
            ++v134;
          }
          unsigned int v98 = *((_DWORD *)v94 + 10);
          unint64_t v99 = v130;
          int64x2_t v100 = &v130;
          int64x2_t v101 = &v130;
          if (v130)
          {
            while (1)
            {
              while (1)
              {
                int64x2_t v101 = (uint64_t **)v99;
                uint64_t v102 = v99[4];
                if ((uint64_t)v60 >= v102) {
                  break;
                }
                unint64_t v99 = *v101;
                int64x2_t v100 = v101;
                if (!*v101) {
                  goto LABEL_147;
                }
              }
              if (v102 >= (uint64_t)v60) {
                break;
              }
              unint64_t v99 = v101[1];
              if (!v99)
              {
                int64x2_t v100 = v101 + 1;
                goto LABEL_147;
              }
            }
          }
          else
          {
LABEL_147:
            int64x2_t v103 = (uint64_t *)v101;
            int64x2_t v101 = (uint64_t **)operator new(0x30uLL);
            v101[4] = v60;
            *((_DWORD *)v101 + 10) = 0;
            *int64x2_t v101 = 0;
            v101[1] = 0;
            v101[2] = v103;
            *int64x2_t v100 = (uint64_t *)v101;
            uint64_t v104 = (uint64_t *)v101;
            if (*v129)
            {
              unint64_t v129 = (uint64_t **)*v129;
              uint64_t v104 = *v100;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v130, v104);
            ++v131;
          }
          if (v98 < *((_DWORD *)v101 + 10))
          {
            *unint64_t v128 = 0;
            v128[8] = 0;
            goto LABEL_166;
          }
        }
      }
      else
      {
        BOOL v75 = &v133;
        int64x2_t v76 = &v133;
        if (v133)
        {
          while (1)
          {
            while (1)
            {
              int64x2_t v76 = (uint64_t **)v74;
              uint64_t v77 = v74[4];
              if ((uint64_t)v60 >= v77) {
                break;
              }
              uint64_t v74 = *v76;
              BOOL v75 = v76;
              if (!*v76) {
                goto LABEL_103;
              }
            }
            if (v77 >= (uint64_t)v60) {
              break;
            }
            uint64_t v74 = v76[1];
            if (!v74)
            {
              BOOL v75 = v76 + 1;
              goto LABEL_103;
            }
          }
        }
        else
        {
LABEL_103:
          uint64_t v78 = (uint64_t *)v76;
          int64x2_t v76 = (uint64_t **)operator new(0x30uLL);
          v76[4] = v60;
          *((_DWORD *)v76 + 10) = 0;
          const char *v76 = 0;
          v76[1] = 0;
          v76[2] = v78;
          *BOOL v75 = (uint64_t *)v76;
          int64x2_t v79 = (uint64_t *)v76;
          if (*v132)
          {
            uint64_t v132 = (uint64_t **)*v132;
            int64x2_t v79 = *v75;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v133, v79);
          ++v134;
        }
        --*((_DWORD *)v76 + 10);
      }
LABEL_70:
      if (++v59 == v58) {
        goto LABEL_152;
      }
    }
  }
  *a1 = 0;
  a1[8] = 0;
  uint64_t v48 = v139;
  if (v139 != v141) {
LABEL_44:
  }
    free(v48);
LABEL_45:
  if (v142 != v144) {
    free(v142);
  }
  if ((v9 & 1) == 0)
  {
    if (*(void *)v9 != v9 + 16) {
      free(*(void **)v9);
    }
    MEMORY[0x21667D3C0](v9, 0x1080C40EF38A13ELL);
  }
}

unint64_t mlir::memref::DimOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v2) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v2 = 0;
  }
  uint64_t v90 = v2;
  if (!v2) {
    return 0;
  }
  unint64_t v4 = *(void *)(*(void *)(*(void *)(*a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    unint64_t v4 = 0;
  }
  unint64_t v89 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v90);
  if (Int < 0) {
    return 0;
  }
  uint64_t v6 = Int;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
  if (v6 >= v7) {
    return 0;
  }
  unsigned int v8 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v90);
  if (*(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89) + 8 * v8) != 0x8000000000000000)
  {
    uint64_t Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
    uint64_t v11 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v90);
    return mlir::Builder::getIndexAttr(&Context, *(mlir::MLIRContext **)(Value + 8 * v11)) & 0xFFFFFFFFFFFFFFFBLL;
  }
  mlir::IntegerAttr::getValue((uint64_t)&v90, (llvm::APInt *)&Context);
  if (v88 > 0x40)
  {
    unint64_t v9 = *(unsigned int *)Context;
    MEMORY[0x21667D390]();
  }
  else
  {
    unint64_t v9 = Context;
  }
  uint64_t Context = *(mlir::IndexType **)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Context);
  if (!DefiningOp)
  {
    uint64_t v17 = 0;
LABEL_25:
    uint64_t Context = (mlir::IndexType *)DefiningOp;
    uint64_t v88 = v17;
    if (DefiningOp) {
      return mlir::OffsetSizeAndStrideOpInterface::getDynamicSize((mlir::OffsetSizeAndStrideOpInterface *)&Context, v9) | 4;
    }
    if (mlir::memref::foldMemRefCast(*a1, 0))
    {
      if (*(_DWORD *)(*a1 + 36)) {
        uint64_t v25 = *a1 - 16;
      }
      else {
        uint64_t v25 = 0;
      }
      return mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 0) | 4;
    }
    return 0;
  }
  uint64_t v14 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v18 = *(void *)(DefiningOp + 72);
      uint64_t v19 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v20 >= v9) {
        unint64_t v21 = v9;
      }
      else {
        unint64_t v21 = v20;
      }
      if (!v21) {
        goto LABEL_106;
      }
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v82 >= v9) {
        unint64_t v21 = v9;
      }
      else {
        unint64_t v21 = v82;
      }
      if (!v21) {
        goto LABEL_106;
      }
    }
    unint64_t v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 >= 7)
    {
      unint64_t v36 = v22 + 1;
      uint64_t v37 = (v22 + 1) & 0x3FFFFFFFFFFFFFF8;
      uint64_t v24 = (uint64_t *)(v19 + 8 * v37);
      uint64_t v38 = (int64x2_t *)(v19 + 32);
      int32x4_t v39 = 0uLL;
      int64x2_t v40 = vdupq_n_s64(0x8000000000000000);
      uint64_t v41 = v37;
      int32x4_t v42 = 0uLL;
      do
      {
        int64x2_t v43 = v38[-2];
        int64x2_t v44 = v38[-1];
        int64x2_t v45 = *v38;
        int64x2_t v46 = v38[1];
        v38 += 4;
        int32x4_t v39 = vsubq_s32(v39, vuzp1q_s32((int32x4_t)vceqq_s64(v43, v40), (int32x4_t)vceqq_s64(v44, v40)));
        int32x4_t v42 = vsubq_s32(v42, vuzp1q_s32((int32x4_t)vceqq_s64(v45, v40), (int32x4_t)vceqq_s64(v46, v40)));
        v41 -= 8;
      }
      while (v41);
      unsigned int v23 = vaddvq_s32(vaddq_s32(v42, v39));
      if (v36 == v37) {
        goto LABEL_84;
      }
    }
    else
    {
      unsigned int v23 = 0;
      uint64_t v24 = (uint64_t *)v19;
    }
    uint64_t v47 = (uint64_t *)(v19 + 8 * v21);
    do
    {
      uint64_t v48 = *v24++;
      if (v48 == 0x8000000000000000) {
        ++v23;
      }
    }
    while (v24 != v47);
    goto LABEL_84;
  }
  if (v14 == &mlir::detail::TypeIDResolver<mlir::memref::AllocaOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v18 = *(void *)(DefiningOp + 72);
      uint64_t v26 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v27 >= v9) {
        unint64_t v28 = v9;
      }
      else {
        unint64_t v28 = v27;
      }
      if (!v28) {
        goto LABEL_106;
      }
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v26 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v83 >= v9) {
        unint64_t v28 = v9;
      }
      else {
        unint64_t v28 = v83;
      }
      if (!v28) {
        goto LABEL_106;
      }
    }
    unint64_t v29 = (v28 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v29 >= 7)
    {
      unint64_t v53 = v29 + 1;
      uint64_t v54 = (v29 + 1) & 0x3FFFFFFFFFFFFFF8;
      int8x16_t v30 = (uint64_t *)(v26 + 8 * v54);
      uint64_t v55 = (int64x2_t *)(v26 + 32);
      int32x4_t v56 = 0uLL;
      int64x2_t v57 = vdupq_n_s64(0x8000000000000000);
      uint64_t v58 = v54;
      int32x4_t v59 = 0uLL;
      do
      {
        int64x2_t v60 = v55[-2];
        int64x2_t v61 = v55[-1];
        int64x2_t v62 = *v55;
        int64x2_t v63 = v55[1];
        v55 += 4;
        int32x4_t v56 = vsubq_s32(v56, vuzp1q_s32((int32x4_t)vceqq_s64(v60, v57), (int32x4_t)vceqq_s64(v61, v57)));
        int32x4_t v59 = vsubq_s32(v59, vuzp1q_s32((int32x4_t)vceqq_s64(v62, v57), (int32x4_t)vceqq_s64(v63, v57)));
        v58 -= 8;
      }
      while (v58);
      unsigned int v23 = vaddvq_s32(vaddq_s32(v59, v56));
      if (v53 == v54) {
        goto LABEL_84;
      }
    }
    else
    {
      unsigned int v23 = 0;
      int8x16_t v30 = (uint64_t *)v26;
    }
    uint64_t v64 = (uint64_t *)(v26 + 8 * v28);
    do
    {
      uint64_t v65 = *v30++;
      if (v65 == 0x8000000000000000) {
        ++v23;
      }
    }
    while (v30 != v64);
    goto LABEL_84;
  }
  if (v14 == &mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v18 = *(void *)(DefiningOp + 72) + 64;
      uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v32 >= v9) {
        unint64_t v33 = v9;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v33)
      {
LABEL_52:
        unint64_t v34 = (v33 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v34 < 7)
        {
          unsigned int v23 = 0;
          uint8x8_t v35 = (uint64_t *)v31;
          goto LABEL_80;
        }
        unint64_t v66 = v34 + 1;
        uint64_t v67 = (v34 + 1) & 0x3FFFFFFFFFFFFFF8;
        uint8x8_t v35 = (uint64_t *)(v31 + 8 * v67);
        uint64_t v68 = (int64x2_t *)(v31 + 32);
        int32x4_t v69 = 0uLL;
        int64x2_t v70 = vdupq_n_s64(0x8000000000000000);
        uint64_t v71 = v67;
        int32x4_t v72 = 0uLL;
        do
        {
          int64x2_t v73 = v68[-2];
          int64x2_t v74 = v68[-1];
          int64x2_t v75 = *v68;
          int64x2_t v76 = v68[1];
          v68 += 4;
          int32x4_t v69 = vsubq_s32(v69, vuzp1q_s32((int32x4_t)vceqq_s64(v73, v70), (int32x4_t)vceqq_s64(v74, v70)));
          int32x4_t v72 = vsubq_s32(v72, vuzp1q_s32((int32x4_t)vceqq_s64(v75, v70), (int32x4_t)vceqq_s64(v76, v70)));
          v71 -= 8;
        }
        while (v71);
        unsigned int v23 = vaddvq_s32(vaddq_s32(v72, v69));
        if (v66 != v67)
        {
LABEL_80:
          uint64_t v77 = (uint64_t *)(v31 + 8 * v33);
          do
          {
            uint64_t v78 = *v35++;
            if (v78 == 0x8000000000000000) {
              ++v23;
            }
          }
          while (v35 != v77);
        }
LABEL_84:
        uint64_t v79 = v23;
        return *(void *)(v18 + 32 * v79 + 24) | 4;
      }
    }
    else
    {
      uint64_t v18 = 64;
      uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v84 >= v9) {
        unint64_t v33 = v9;
      }
      else {
        unint64_t v33 = v84;
      }
      if (v33) {
        goto LABEL_52;
      }
    }
LABEL_106:
    uint64_t v79 = 0;
    return *(void *)(v18 + 32 * v79 + 24) | 4;
  }
  BOOL v15 = v14 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id;
  if (v14 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id) {
    uint64_t v16 = (mlir::IndexType *)DefiningOp;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t Context = v16;
  if (!v15)
  {
    uint64_t DefiningOp = llvm::DefaultDoCastIfPossible<mlir::OffsetSizeAndStrideOpInterface,mlir::Operation *,llvm::CastInfo<mlir::OffsetSizeAndStrideOpInterface,mlir::Operation *,void>>::doCastIfPossible(DefiningOp);
    goto LABEL_25;
  }
  mlir::memref::SubViewOp::getDroppedDims((mlir::memref::SubViewOp *)&Context, &v86);
  unint64_t v85 = *(void *)(*(void *)(*((void *)Context + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
  uint64_t v50 = v49;
  if (v49)
  {
    if ((v86 & 1) == 0)
    {
      int v51 = 0;
      uint64_t i = 0;
      while (1)
      {
        if (((*(void *)(*(void *)v86 + 8 * (i >> 6)) >> i) & 1) == 0)
        {
          if (v51 == v9) {
            goto LABEL_91;
          }
          ++v51;
        }
        if (v50 == ++i) {
          goto LABEL_90;
        }
      }
    }
    int v80 = 0;
    for (uint64_t i = 0; v50 != i; ++i)
    {
      if (((v86 >> 1) & ~(-1 << (v86 >> 58)) & (1 << i)) == 0)
      {
        if (v80 == v9) {
          goto LABEL_91;
        }
        ++v80;
      }
    }
  }
LABEL_90:
  LODWORD(i) = 0;
LABEL_91:
  uint64_t v81 = mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::SubViewOp>::getDynamicSize((uint64_t)&Context, i) | 4;
  llvm::SmallBitVector::~SmallBitVector((void ***)&v86);
  return v81;
}

uint64_t mlir::memref::AllocOp::getDynamicSizes(mlir::memref::AllocOp *this)
{
  if ((*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72);
  }
  else {
    return 0;
  }
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::SubViewOp>::getDynamicSize(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = 0;
  }
  uint64_t v10 = *(void *)(v4 + 8);
  uint64_t v5 = (int64x2_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v10);
  int NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(v5, v6, a2);
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v8 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v8 = 0;
  }
  return *(void *)(*(void *)(*(void *)a1 + 72)
                   + 32 * (NumDynamicEntriesUpToIdx + *(_DWORD *)(v8 + 28) + 1)
                   + 24);
}

void llvm::SmallBitVector::~SmallBitVector(void ***this)
{
  uint64_t v1 = *this;
  if ((*this & 1) == 0 && v1)
  {
    if (*v1 != v1 + 2) {
      free(*v1);
    }
    MEMORY[0x21667D3C0](v1, 0x1080C40EF38A13ELL);
  }
}

void mlir::memref::DimOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::memref::DmaStartOp::print(mlir::memref::DmaStartOp *this, mlir::OpAsmPrinter *a2)
{
  unint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 91;
  }
  if ((*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0) {
    uint64_t v8 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v8 = 0;
  }
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  uint64_t v10 = v9;
  uint64_t v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  AttrDictionary = ", ";
  uint64_t v74 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8 + 32, 0, v8 + 32, v10, (uint64_t)a2, v11, (uint64_t)&AttrDictionary);
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 2)
  {
    *(unsigned char *)(v13 + 2) = 32;
    *(_WORD *)uint64_t v13 = 11357;
    *((void *)v12 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v12, "], ", 3uLL);
  }
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 32 * (v14 + 1) + 24));
  BOOL v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if ((unint64_t)v16 >= *((void *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 91);
  }
  else
  {
    *((void *)v15 + 4) = v16 + 1;
    *uint64_t v16 = 91;
  }
  if ((*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0) {
    uint64_t v17 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v17 = 0;
  }
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  uint64_t v19 = v18;
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  uint64_t v21 = v20;
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72)
                                                        + 32 * (v22 + 1)
                                                        + 24)
                                            + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  uint64_t v23 = v17 + 32 * v19 + 64;
  uint64_t v25 = v21 - v19 + v24;
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  AttrDictionary = ", ";
  uint64_t v74 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v23, 0, v23, v25, (uint64_t)a2, v26, (uint64_t)&AttrDictionary);
  unint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = *((void *)v27 + 4);
  if ((unint64_t)(*((void *)v27 + 3) - v28) > 2)
  {
    *(unsigned char *)(v28 + 2) = 32;
    *(_WORD *)uint64_t v28 = 11357;
    *((void *)v27 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v27, "], ", 3uLL);
  }
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  int v30 = v29;
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72)
                                                        + 32 * (v31 + 1)
                                                        + 24)
                                            + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 32 * (v30 + v32 + 2) + 24));
  unint64_t v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v34 = (_WORD *)*((void *)v33 + 4);
  if (*((void *)v33 + 3) - (void)v34 > 1uLL)
  {
    *unint64_t v34 = 8236;
    *((void *)v33 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v33, ", ", 2uLL);
  }
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  int v36 = v35;
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72)
                                                        + 32 * (v37 + 1)
                                                        + 24)
                                            + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 32 * (v36 + v38 + 3) + 24));
  int32x4_t v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64x2_t v40 = (unsigned char *)*((void *)v39 + 4);
  if ((unint64_t)v40 >= *((void *)v39 + 3))
  {
    llvm::raw_ostream::write(v39, 91);
  }
  else
  {
    *((void *)v39 + 4) = v40 + 1;
    *int64x2_t v40 = 91;
  }
  Taguint64_t Indices = mlir::memref::DmaStartOp::getTagIndices(this);
  uint64_t v43 = v42;
  int64x2_t v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  AttrDictionary = ", ";
  uint64_t v74 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(TagIndices, 0, TagIndices, v43, (uint64_t)a2, v44, (uint64_t)&AttrDictionary);
  int64x2_t v45 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64x2_t v46 = (unsigned char *)*((void *)v45 + 4);
  if ((unint64_t)v46 < *((void *)v45 + 3))
  {
    *((void *)v45 + 4) = v46 + 1;
    *int64x2_t v46 = 93;
    if (!mlir::memref::DmaStartOp::isStrided(this)) {
      goto LABEL_30;
    }
LABEL_33:
    unsigned int v49 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v50 = (_WORD *)*((void *)v49 + 4);
    if (*((void *)v49 + 3) - (void)v50 > 1uLL)
    {
      _WORD *v50 = 8236;
      *((void *)v49 + 4) += 2;
      if (!mlir::memref::DmaStartOp::isStrided(this)) {
        goto LABEL_35;
      }
    }
    else
    {
      llvm::raw_ostream::write(v49, ", ", 2uLL);
      if (!mlir::memref::DmaStartOp::isStrided(this))
      {
LABEL_35:
        uint64_t v51 = 0;
        goto LABEL_40;
      }
    }
    uint64_t v52 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
      uint64_t v53 = (*(_DWORD *)(v52 + 68) - 2);
    }
    else {
      uint64_t v53 = 4294967294;
    }
    uint64_t v51 = *(void *)(*(void *)(v52 + 72) + 32 * v53 + 24);
LABEL_40:
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v51);
    uint64_t v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v55 = (_WORD *)*((void *)v54 + 4);
    if (*((void *)v54 + 3) - (void)v55 > 1uLL)
    {
      _WORD *v55 = 8236;
      *((void *)v54 + 4) += 2;
      if (!mlir::memref::DmaStartOp::isStrided(this)) {
        goto LABEL_42;
      }
    }
    else
    {
      llvm::raw_ostream::write(v54, ", ", 2uLL);
      if (!mlir::memref::DmaStartOp::isStrided(this))
      {
LABEL_42:
        uint64_t v56 = 0;
        goto LABEL_47;
      }
    }
    uint64_t v57 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
      uint64_t v58 = (*(_DWORD *)(v57 + 68) - 1);
    }
    else {
      uint64_t v58 = 0xFFFFFFFFLL;
    }
    uint64_t v56 = *(void *)(*(void *)(v57 + 72) + 32 * v58 + 24);
LABEL_47:
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 160))(a2, v56);
    uint64_t v47 = *(mlir::Operation **)this;
    if (!*(unsigned char *)(*(void *)this + 47)) {
      goto LABEL_31;
    }
    goto LABEL_48;
  }
  llvm::raw_ostream::write(v45, 93);
  if (mlir::memref::DmaStartOp::isStrided(this)) {
    goto LABEL_33;
  }
LABEL_30:
  uint64_t v47 = *(mlir::Operation **)this;
  if (!*(unsigned char *)(*(void *)this + 47))
  {
LABEL_31:
    p_AttrDictionary = (mlir::Operation *)((char *)v47 + 56);
    goto LABEL_49;
  }
LABEL_48:
  AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v47);
  p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_49:
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v60, 0, 0);
  int64x2_t v61 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v62 = *((void *)v61 + 4);
  if ((unint64_t)(*((void *)v61 + 3) - v62) > 2)
  {
    *(unsigned char *)(v62 + 2) = 32;
    *(_WORD *)uint64_t v62 = 14880;
    *((void *)v61 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v61, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  int64x2_t v63 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v64 = (_WORD *)*((void *)v63 + 4);
  if (*((void *)v63 + 3) - (void)v64 > 1uLL)
  {
    _WORD *v64 = 8236;
    *((void *)v63 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v63, ", ", 2uLL);
  }
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v65 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v67 = (_WORD *)*((void *)v66 + 4);
  if (*((void *)v66 + 3) - (void)v67 > 1uLL)
  {
    _WORD *v67 = 8236;
    *((void *)v66 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v66, ", ", 2uLL);
  }
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  int v69 = v68;
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  AttrDictionary = (const char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72)
                                                        + 32 * (v70 + 1)
                                                        + 24)
                                            + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v69 + v71 + 3) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::DmaStartOp::getDstIndices(mlir::memref::DmaStartOp *this)
{
  if ((*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0) {
    uint64_t v2 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v2 = 0;
  }
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v5 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  return v2 + 32 * v4 + 64;
}

uint64_t mlir::memref::DmaStartOp::getNumElements(mlir::memref::DmaStartOp *this)
{
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  int v3 = v2;
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v4 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  return *(void *)(*(void *)(*(void *)this + 72) + 32 * (v3 + v5 + 2) + 24);
}

uint64_t mlir::memref::DmaStartOp::getTagMemRef(mlir::memref::DmaStartOp *this)
{
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  int v3 = v2;
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  unint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v4 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  return *(void *)(*(void *)(*(void *)this + 72) + 32 * (v3 + v5 + 3) + 24);
}

uint64_t mlir::memref::DmaStartOp::getTagIndices(mlir::memref::DmaStartOp *this)
{
  unint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  int v3 = v2;
  unint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  unint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v4 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  if ((*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0) {
    uint64_t v6 = *(void *)(*(void *)this + 72);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (v3 + v5 + 4);
  unint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  int v9 = v8;
  unint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  unint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v10 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  unint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v9 + v11 + 3) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  return v6 + 32 * v7;
}

BOOL mlir::memref::DmaStartOp::isStrided(mlir::memref::DmaStartOp *this)
{
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    int v3 = *(_DWORD *)(v2 + 68);
  }
  else {
    int v3 = 0;
  }
  unint64_t v15 = *(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  int v5 = v4;
  unint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  unint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v6 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  int v8 = v7;
  unint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  int v10 = v9;
  unint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  unint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v11 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  unint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v10 + v12 + 3) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  return v3 != v5 + v8 + v13 + 4;
}

uint64_t mlir::memref::DmaStartOp::getStride(mlir::memref::DmaStartOp *this)
{
  if (!mlir::memref::DmaStartOp::isStrided(this)) {
    return 0;
  }
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    uint64_t v3 = *(void *)(v2 + 72) + 32 * (*(_DWORD *)(v2 + 68) - 2);
  }
  else {
    uint64_t v3 = *(void *)(v2 + 72) + 0x1FFFFFFFC0;
  }
  return *(void *)(v3 + 24);
}

uint64_t mlir::memref::DmaStartOp::getNumElementsPerStride(mlir::memref::DmaStartOp *this)
{
  if (!mlir::memref::DmaStartOp::isStrided(this)) {
    return 0;
  }
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    uint64_t v3 = *(void *)(v2 + 72) + 32 * (*(_DWORD *)(v2 + 68) - 1);
  }
  else {
    uint64_t v3 = *(void *)(v2 + 72) + 0x1FFFFFFFE0;
  }
  return *(void *)(v3 + 24);
}

uint64_t mlir::memref::DmaStartOp::parse(uint64_t a1, uint64_t a2)
{
  v43[16] = *MEMORY[0x263EF8340];
  memset(v27, 0, 24);
  uint64_t v41 = (char *)v43;
  uint64_t v42 = 0x400000000;
  memset(v26, 0, 24);
  int v38 = v40;
  uint64_t v39 = 0x400000000;
  memset(v25, 0, 24);
  memset(v24, 0, 24);
  int v35 = v37;
  uint64_t v36 = 0x400000000;
  int v32 = v34;
  uint64_t v33 = 0x200000000;
  int v29 = v31;
  uint64_t v30 = 0x300000000;
  int v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v27, 1)
    || !(*(unsigned __int8 (**)(uint64_t, char **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v41, 2, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v26, 1)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v38, 2, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v25, 1)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v24, 1)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1,
          &v35,
          2,
          1,
          0xFFFFFFFFLL)
    || !mlir::OpAsmParser::parseTrailingOperandList(a1, (uint64_t)&v32, 0))
  {
    goto LABEL_37;
  }
  int v7 = v33;
  if ((v33 | 2) != 2)
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v19 = "expected two stride related operands";
LABEL_51:
    int v22 = v19;
    __int16 v23 = 259;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v28, a1, v18, &v22);
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v28);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v28);
    goto LABEL_38;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 552))(a1, &v29)) {
    goto LABEL_37;
  }
  if (v30 != 3)
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v19 = "fewer/more types expected";
    goto LABEL_51;
  }
  uint64_t v8 = a2 + 16;
  if (!(*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v27, *(void *)v29, v8))goto LABEL_37; {
  int v20 = v7;
  }
  if (v42)
  {
    int v9 = v41;
    uint64_t v10 = 32 * v42;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, IndexType, v8))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10) {
        goto LABEL_20;
      }
    }
    goto LABEL_37;
  }
LABEL_20:
  if (!(*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v26, *((void *)v29 + 1), v8))goto LABEL_37; {
  if (v39)
  }
  {
    int v11 = (char *)v38;
    uint64_t v12 = 32 * v39;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v11, IndexType, v8))
    {
      v11 += 32;
      v12 -= 32;
      if (!v12) {
        goto LABEL_25;
      }
    }
    goto LABEL_37;
  }
LABEL_25:
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v25, IndexType, v8)|| !(*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v24, *((void *)v29 + 2), v8))
  {
LABEL_37:
    uint64_t v16 = 0;
    goto LABEL_38;
  }
  if (v36)
  {
    int v13 = (char *)v35;
    uint64_t v14 = 32 * v36;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, IndexType, v8))
    {
      v13 += 32;
      v14 -= 32;
      if (!v14) {
        goto LABEL_31;
      }
    }
    goto LABEL_37;
  }
LABEL_31:
  if (v20 == 2 && v33)
  {
    unint64_t v15 = (char *)v32;
    uint64_t v21 = 32 * v33;
    uint64_t v16 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v15, IndexType, v8))
    {
      v15 += 32;
      v21 -= 32;
      if (!v21) {
        goto LABEL_38;
      }
    }
    goto LABEL_37;
  }
  uint64_t v16 = 1;
LABEL_38:
  if (v29 != v31) {
    free(v29);
  }
  if (v32 != v34) {
    free(v32);
  }
  if (v35 != v37) {
    free(v35);
  }
  if (v38 != v40) {
    free(v38);
  }
  if (v41 != (char *)v43) {
    free(v41);
  }
  return v16;
}

uint64_t mlir::OpAsmParser::parseTrailingOperandList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1)) {
    return 1;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688);

  return v6(a1, a2, a3, 1, 0xFFFFFFFFLL);
}

uint64_t mlir::memref::DmaStartOp::verify(mlir::memref::DmaStartOp *this)
{
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0 || (unsigned int v3 = *(_DWORD *)(v2 + 68), v3 <= 3))
  {
    Taguint64_t Indices = (void **)"expected at least 4 operands";
    __int16 v127 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &TagIndices, (uint64_t)&v131);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
    if (v131) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    }
    if (v142)
    {
      int v5 = v140;
      if (v140)
      {
        int v6 = v141;
        int v7 = v140;
        if (v141 != v140)
        {
          do
            int v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          int v7 = v140;
        }
        int v141 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v138;
      if (!v138) {
        goto LABEL_123;
      }
      int v9 = v139;
      uint64_t v10 = v138;
      if (v139 == v138)
      {
LABEL_122:
        unint64_t v139 = v8;
        operator delete(v10);
LABEL_123:
        if (v134 != v137) {
          free(v134);
        }
        return v4;
      }
      do
      {
        uint64_t v12 = *--v9;
        uint64_t v11 = v12;
        void *v9 = 0;
        if (v12) {
          MEMORY[0x21667D390](v11, 0x1000C8077774924);
        }
      }
      while (v9 != v8);
LABEL_121:
      uint64_t v10 = v138;
      goto LABEL_122;
    }
    return v4;
  }
  unint64_t v13 = *(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    unint64_t v131 = v13;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
    if (v3 < v20 + 4)
    {
      __int16 v127 = 257;
      mlir::OpState::emitOpError((uint64_t *)this, &TagIndices, (uint64_t)&v131);
      if (v131)
      {
        LODWORD(v128) = 3;
        unint64_t v129 = "expected at least ";
        uint64_t v130 = 18;
        uint64_t v21 = &v128;
        int v22 = (char *)v134;
        if (v135 >= v136)
        {
          unint64_t v109 = v135 + 1;
          if (v134 <= &v128 && (char *)v134 + 24 * v135 > (char *)&v128)
          {
            int64_t v118 = (char *)&v128 - (unsigned char *)v134;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v109, 24);
            int v22 = (char *)v134;
            uint64_t v21 = (unint64_t *)((char *)v134 + v118);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v109, 24);
            uint64_t v21 = &v128;
            int v22 = (char *)v134;
          }
        }
        __int16 v23 = &v22[24 * v135];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = v21[2];
        *(_OWORD *)__int16 v23 = v24;
        ++v135;
      }
      unint64_t v128 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
      if (v131)
      {
        LODWORD(v128) = 5;
        unint64_t v129 = (const char *)(v25 + 4);
        uint64_t v26 = &v128;
        unint64_t v27 = (char *)v134;
        if (v135 >= v136)
        {
          unint64_t v110 = v135 + 1;
          if (v134 <= &v128 && (char *)v134 + 24 * v135 > (char *)&v128)
          {
            int64_t v119 = (char *)&v128 - (unsigned char *)v134;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v110, 24);
            unint64_t v27 = (char *)v134;
            uint64_t v26 = (unint64_t *)((char *)v134 + v119);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v110, 24);
            uint64_t v26 = &v128;
            unint64_t v27 = (char *)v134;
          }
        }
        uint64_t v28 = &v27[24 * v135];
        long long v29 = *(_OWORD *)v26;
        *((void *)v28 + 2) = v26[2];
        *(_OWORD *)uint64_t v28 = v29;
        uint64_t v30 = ++v135;
        if (v131)
        {
          LODWORD(v128) = 3;
          unint64_t v129 = " operands";
          uint64_t v130 = 9;
          int v31 = &v128;
          int v32 = (char *)v134;
          if (v30 >= v136)
          {
            unint64_t v111 = v30 + 1;
            BOOL v112 = (char *)v134 + 24 * v30 > (char *)&v128;
            if (v134 <= &v128 && v112)
            {
              int64_t v120 = (char *)&v128 - (unsigned char *)v134;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v111, 24);
              int v32 = (char *)v134;
              int v31 = (unint64_t *)((char *)v134 + v120);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v111, 24);
              int v31 = &v128;
              int v32 = (char *)v134;
            }
          }
          uint64_t v33 = &v32[24 * v135];
          long long v34 = *(_OWORD *)v31;
          *((void *)v33 + 2) = v31[2];
          *(_OWORD *)uint64_t v33 = v34;
          ++v135;
        }
      }
      uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
      if (v131) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
      }
      if (v142)
      {
        int v35 = v140;
        if (v140)
        {
          uint64_t v36 = v141;
          int v37 = v140;
          if (v141 != v140)
          {
            do
              uint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
            while (v36 != v35);
            int v37 = v140;
          }
          int v141 = v35;
          operator delete(v37);
        }
        uint64_t v8 = v138;
        if (!v138) {
          goto LABEL_123;
        }
        int v38 = v139;
        uint64_t v10 = v138;
        if (v139 == v138) {
          goto LABEL_122;
        }
        do
        {
          uint64_t v40 = *--v38;
          uint64_t v39 = v40;
          void *v38 = 0;
          if (v40) {
            MEMORY[0x21667D390](v39, 0x1000C8077774924);
          }
        }
        while (v38 != v8);
        goto LABEL_121;
      }
      return v4;
    }
    unint64_t v131 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
    if (!v41) {
      goto LABEL_61;
    }
    uint64_t v42 = (*(_DWORD *)(*(void *)this + 44) & 0x800000) != 0 ? *(void *)(*(void *)this + 72) : 0;
    unint64_t v128 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
    Taguint64_t Indices = (void **)(v42 + 32);
    uint64_t v126 = v43;
    mlir::OperandRange::getTypes((uint64_t *)&TagIndices, (uint64_t *)&v131);
    unint64_t v45 = v131;
    int64x2_t v44 = v132;
    int64x2_t v46 = (char *)v134;
    BOOL v47 = v131 == v133;
    if (v131 == v133 && v134 == v132)
    {
LABEL_61:
      unint64_t v131 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      uint64_t v49 = *(void *)(*(void *)this + 72);
      if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(v49 + 32 * (v48 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                        + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        Taguint64_t Indices = (void **)"expected destination to be of memref type";
        __int16 v127 = 259;
        mlir::OpState::emitOpError((uint64_t *)this, &TagIndices, (uint64_t)&v131);
        uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
        if (v131) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
        }
        if (v142)
        {
          uint64_t v50 = v140;
          if (v140)
          {
            uint64_t v51 = v141;
            uint64_t v52 = v140;
            if (v141 != v140)
            {
              do
                uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
              while (v51 != v50);
              uint64_t v52 = v140;
            }
            int v141 = v50;
            operator delete(v52);
          }
          uint64_t v8 = v138;
          if (!v138) {
            goto LABEL_123;
          }
          uint64_t v53 = v139;
          uint64_t v10 = v138;
          if (v139 == v138) {
            goto LABEL_122;
          }
          do
          {
            uint64_t v55 = *--v53;
            uint64_t v54 = v55;
            void *v53 = 0;
            if (v55) {
              MEMORY[0x21667D390](v54, 0x1000C8077774924);
            }
          }
          while (v53 != v8);
          goto LABEL_121;
        }
        return v4;
      }
      unint64_t v131 = *(void *)(*(void *)(v49 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      int v62 = v61;
      unint64_t v131 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      unint64_t v131 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v63 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      int v65 = (const char *)(v62 + v64 + 4);
      unsigned int v124 = v65;
      if (v3 < v65)
      {
        __int16 v127 = 257;
        mlir::OpState::emitOpError((uint64_t *)this, &TagIndices, (uint64_t)&v131);
        if (v131)
        {
          LODWORD(v128) = 3;
          unint64_t v129 = "expected at least ";
          uint64_t v130 = 18;
          unint64_t v66 = &v128;
          uint64_t v67 = (char *)v134;
          if (v135 >= v136)
          {
            unint64_t v113 = v135 + 1;
            if (v134 <= &v128 && (char *)v134 + 24 * v135 > (char *)&v128)
            {
              int64_t v121 = (char *)&v128 - (unsigned char *)v134;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v113, 24);
              uint64_t v67 = (char *)v134;
              unint64_t v66 = (unint64_t *)((char *)v134 + v121);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v113, 24);
              unint64_t v66 = &v128;
              uint64_t v67 = (char *)v134;
            }
          }
          int v68 = &v67[24 * v135];
          long long v69 = *(_OWORD *)v66;
          *((void *)v68 + 2) = v66[2];
          *(_OWORD *)int v68 = v69;
          uint64_t v70 = ++v135;
          if (v131)
          {
            LODWORD(v128) = 5;
            unint64_t v129 = v65;
            int v71 = &v128;
            int32x4_t v72 = (char *)v134;
            if (v70 >= v136)
            {
              unint64_t v114 = v70 + 1;
              BOOL v115 = (char *)v134 + 24 * v70 > (char *)&v128;
              if (v134 <= &v128 && v115)
              {
                int64_t v122 = (char *)&v128 - (unsigned char *)v134;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v114, 24);
                int32x4_t v72 = (char *)v134;
                int v71 = (unint64_t *)((char *)v134 + v122);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v114, 24);
                int v71 = &v128;
                int32x4_t v72 = (char *)v134;
              }
            }
            int64x2_t v73 = &v72[24 * v135];
            long long v74 = *(_OWORD *)v71;
            *((void *)v73 + 2) = v71[2];
            *(_OWORD *)int64x2_t v73 = v74;
            uint64_t v75 = ++v135;
            if (v131)
            {
              LODWORD(v128) = 3;
              unint64_t v129 = " operands";
              uint64_t v130 = 9;
              int64x2_t v76 = &v128;
              uint64_t v77 = (char *)v134;
              if (v75 >= v136)
              {
                unint64_t v116 = v75 + 1;
                BOOL v117 = (char *)v134 + 24 * v75 > (char *)&v128;
                if (v134 <= &v128 && v117)
                {
                  int64_t v123 = (char *)&v128 - (unsigned char *)v134;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v116, 24);
                  uint64_t v77 = (char *)v134;
                  int64x2_t v76 = (unint64_t *)((char *)v134 + v123);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v116, 24);
                  int64x2_t v76 = &v128;
                  uint64_t v77 = (char *)v134;
                }
              }
              uint64_t v78 = &v77[24 * v135];
              long long v79 = *(_OWORD *)v76;
              *((void *)v78 + 2) = v76[2];
              *(_OWORD *)uint64_t v78 = v79;
              ++v135;
            }
          }
        }
        uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
        if (v131) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
        }
        if (v142)
        {
          int v80 = v140;
          if (v140)
          {
            uint64_t v81 = v141;
            unint64_t v82 = v140;
            if (v141 != v140)
            {
              do
                uint64_t v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
              while (v81 != v80);
              unint64_t v82 = v140;
            }
            int v141 = v80;
            operator delete(v82);
          }
          uint64_t v8 = v138;
          if (!v138) {
            goto LABEL_123;
          }
          unint64_t v83 = v139;
          uint64_t v10 = v138;
          if (v139 == v138) {
            goto LABEL_122;
          }
          do
          {
            uint64_t v85 = *--v83;
            uint64_t v84 = v85;
            *unint64_t v83 = 0;
            if (v85) {
              MEMORY[0x21667D390](v84, 0x1000C8077774924);
            }
          }
          while (v83 != v8);
          goto LABEL_121;
        }
        return v4;
      }
      unint64_t v131 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      unsigned int v96 = v95;
      unint64_t v131 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      uint64_t v98 = v97;
      unint64_t v131 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      unint64_t v131 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v99 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      if (v98 - v96 + v100
        && (Taguint64_t Indices = (void **)mlir::memref::DmaStartOp::getDstIndices(this),
            uint64_t v126 = v101,
            mlir::OperandRange::getTypes((uint64_t *)&TagIndices, (uint64_t *)&v131),
            !llvm::all_of<mlir::ValueTypeRange<mlir::OperandRange>,mlir::memref::DmaStartOp::verify(void)::$_1>((uint64_t *)&v131)))
      {
        uint64_t v102 = "expected destination indices to be of index type";
      }
      else
      {
        unint64_t v131 = *(void *)(mlir::memref::DmaStartOp::getNumElements(this) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::Type::isIndex((mlir::Type *)&v131))
        {
          if (*(_UNKNOWN **)(*(void *)(*(void *)(mlir::memref::DmaStartOp::getTagMemRef(this) + 8) & 0xFFFFFFFFFFFFFFF8)
                            + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
          {
            unsigned int v104 = v65 + mlir::memref::DmaStartOp::getTagMemRefRank(this);
            unsigned int v124 = v104;
            if (v3 < v104)
            {
              __int16 v127 = 257;
              mlir::OpState::emitOpError((uint64_t *)this, &TagIndices, (uint64_t)&v131);
              uint64_t v105 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v131, "expected at least ");
              uint64_t v106 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>(v105, &v124);
              int64x2_t v103 = (unint64_t *)mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v106, " operands");
              goto LABEL_134;
            }
            mlir::memref::DmaStartOp::getTagIndices(this);
            if (v107
              && (Taguint64_t Indices = (void **)mlir::memref::DmaStartOp::getTagIndices(this),
                  uint64_t v126 = v108,
                  mlir::OperandRange::getTypes((uint64_t *)&TagIndices, (uint64_t *)&v131),
                  !llvm::all_of<mlir::ValueTypeRange<mlir::OperandRange>,mlir::memref::DmaStartOp::verify(void)::$_1>((uint64_t *)&v131)))
            {
              uint64_t v102 = "expected tag indices to be of index type";
            }
            else if (v3 == v104 || v3 == v104 + 2)
            {
              if (!mlir::memref::DmaStartOp::isStrided(this)) {
                return 1;
              }
              unint64_t v131 = *(void *)(mlir::memref::DmaStartOp::getStride(this) + 8) & 0xFFFFFFFFFFFFFFF8;
              if (mlir::Type::isIndex((mlir::Type *)&v131))
              {
                Taguint64_t Indices = (void **)(*(void *)(mlir::memref::DmaStartOp::getNumElementsPerStride(this) + 8) & 0xFFFFFFFFFFFFFFF8);
                if (mlir::Type::isIndex((mlir::Type *)&TagIndices)) {
                  return 1;
                }
              }
              uint64_t v102 = "expected stride and num elements per stride to be of type index";
            }
            else
            {
              uint64_t v102 = "incorrect number of operands";
            }
          }
          else
          {
            uint64_t v102 = "expected tag to be of memref type";
          }
        }
        else
        {
          uint64_t v102 = "expected num elements to be of index type";
        }
      }
      Taguint64_t Indices = (void **)v102;
      __int16 v127 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, &TagIndices, (uint64_t)&v131);
      int64x2_t v103 = &v131;
LABEL_134:
      uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v103);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v131);
      return v4;
    }
    unint64_t v128 = *(void *)(*(void *)(v131 + 32 * (void)v132 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    BOOL isIndex = mlir::Type::isIndex((mlir::Type *)&v128);
    if (v47)
    {
      if (isIndex)
      {
        uint64_t v57 = v45 + 32 * (void)v44 + 56;
        uint64_t v58 = (char *)(v46 - (unsigned char *)v44);
        while (--v58)
        {
          uint64_t v59 = v57 + 32;
          unint64_t v128 = *(void *)(*(void *)v57 + 8) & 0xFFFFFFFFFFFFFFF8;
          BOOL v60 = mlir::Type::isIndex((mlir::Type *)&v128);
          uint64_t v57 = v59;
          if (!v60) {
            goto LABEL_107;
          }
        }
        goto LABEL_61;
      }
    }
    else if (isIndex)
    {
      unint64_t v86 = (uint64_t *)(v45 + 32 * (void)v44 + 56);
      do
      {
        uint64_t v87 = *v86;
        v86 += 4;
        unint64_t v128 = *(void *)(v87 + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      while (mlir::Type::isIndex((mlir::Type *)&v128));
    }
LABEL_107:
    Taguint64_t Indices = (void **)"expected source indices to be of index type";
    __int16 v127 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &TagIndices, (uint64_t)&v131);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
    if (v131) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    }
    if (v142)
    {
      uint64_t v88 = v140;
      if (v140)
      {
        unint64_t v89 = v141;
        uint64_t v90 = v140;
        if (v141 != v140)
        {
          do
            unint64_t v89 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v89 - 1);
          while (v89 != v88);
          uint64_t v90 = v140;
        }
        int v141 = v88;
        operator delete(v90);
      }
      uint64_t v8 = v138;
      if (!v138) {
        goto LABEL_123;
      }
      unint64_t v91 = v139;
      uint64_t v10 = v138;
      if (v139 == v138) {
        goto LABEL_122;
      }
      do
      {
        uint64_t v93 = *--v91;
        uint64_t v92 = v93;
        *unint64_t v91 = 0;
        if (v93) {
          MEMORY[0x21667D390](v92, 0x1000C8077774924);
        }
      }
      while (v91 != v8);
      goto LABEL_121;
    }
    return v4;
  }
  Taguint64_t Indices = (void **)"expected source to be of memref type";
  __int16 v127 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &TagIndices, (uint64_t)&v131);
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
  if (v131) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
  }
  if (v142)
  {
    uint64_t v14 = v140;
    if (v140)
    {
      unint64_t v15 = v141;
      uint64_t v16 = v140;
      if (v141 != v140)
      {
        do
          unint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = v140;
      }
      int v141 = v14;
      operator delete(v16);
    }
    uint64_t v8 = v138;
    if (!v138) {
      goto LABEL_123;
    }
    uint64_t v17 = v139;
    uint64_t v10 = v138;
    if (v139 == v138) {
      goto LABEL_122;
    }
    do
    {
      uint64_t v19 = *--v17;
      uint64_t v18 = v19;
      *uint64_t v17 = 0;
      if (v19) {
        MEMORY[0x21667D390](v18, 0x1000C8077774924);
      }
    }
    while (v17 != v8);
    goto LABEL_121;
  }
  return v4;
}

BOOL llvm::all_of<mlir::ValueTypeRange<mlir::OperandRange>,mlir::memref::DmaStartOp::verify(void)::$_1>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  BOOL v5 = *a1 == v3;
  if (*a1 == v3 && v4 == v1) {
    return 1;
  }
  unint64_t v13 = *(void *)(*(void *)(v2 + 32 * v1 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  BOOL result = mlir::Type::isIndex((mlir::Type *)&v13);
  if (v5)
  {
    if (result)
    {
      uint64_t v7 = v2 + 32 * v1 + 56;
      uint64_t v8 = v4 - v1;
      while (1)
      {
        BOOL result = --v8 == 0;
        if (!v8) {
          break;
        }
        uint64_t v9 = v7 + 32;
        unint64_t v13 = *(void *)(*(void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8;
        BOOL isIndex = mlir::Type::isIndex((mlir::Type *)&v13);
        uint64_t v7 = v9;
        if (!isIndex) {
          return 0;
        }
      }
    }
  }
  else if (result)
  {
    uint64_t v11 = (uint64_t *)(v2 + 32 * v1 + 56);
    do
    {
      uint64_t v12 = *v11;
      v11 += 4;
      unint64_t v13 = *(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (mlir::Type::isIndex((mlir::Type *)&v13));
    return 0;
  }
  return result;
}

uint64_t mlir::memref::DmaStartOp::getTagMemRefRank(mlir::memref::DmaStartOp *this)
{
  unint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  int v3 = v2;
  unint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  unint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v4 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  unint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 32 * (v3 + v5 + 3) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  return v6;
}

uint64_t mlir::memref::DmaWaitOp::verify(mlir::memref::DmaWaitOp *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    unsigned int v3 = *(_DWORD *)(v2 + 68) - 2;
  }
  else {
    unsigned int v3 = -2;
  }
  v51[0] = *(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v51);
  unsigned int v5 = v4;
  if (v3 == v4) {
    return 1;
  }
  __int16 v47 = 257;
  mlir::OpState::emitOpError((uint64_t *)this, &v46, (uint64_t)v51);
  if (v51[0])
  {
    int v48 = 3;
    unint64_t v49 = (unint64_t)"expected tagIndices to have the same number of elements as the tagMemRef rank, expected ";
    uint64_t v50 = 88;
    uint64_t v7 = &v48;
    unint64_t v8 = (char *)v52;
    if (v53 >= v54)
    {
      unint64_t v35 = v53 + 1;
      if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
      {
        int64_t v42 = (char *)&v48 - (unsigned char *)v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v35, 24);
        unint64_t v8 = (char *)v52;
        uint64_t v7 = (int *)((char *)v52 + v42);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v35, 24);
        uint64_t v7 = &v48;
        unint64_t v8 = (char *)v52;
      }
    }
    uint64_t v9 = &v8[24 * v53];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    uint64_t v11 = ++v53;
    if (v51[0])
    {
      int v48 = 5;
      unint64_t v49 = v5;
      uint64_t v12 = &v48;
      unint64_t v13 = (char *)v52;
      if (v11 >= v54)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v52 + 24 * v11 > (char *)&v48;
        if (v52 <= &v48 && v37)
        {
          int64_t v43 = (char *)&v48 - (unsigned char *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          unint64_t v13 = (char *)v52;
          uint64_t v12 = (int *)((char *)v52 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          uint64_t v12 = &v48;
          unint64_t v13 = (char *)v52;
        }
      }
      uint64_t v14 = &v13[24 * v53];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)uint64_t v14 = v15;
      uint64_t v16 = ++v53;
      if (v51[0])
      {
        int v48 = 3;
        unint64_t v49 = (unint64_t)", but got ";
        uint64_t v50 = 10;
        uint64_t v17 = &v48;
        uint64_t v18 = (char *)v52;
        if (v16 >= v54)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v52 + 24 * v16 > (char *)&v48;
          if (v52 <= &v48 && v39)
          {
            int64_t v44 = (char *)&v48 - (unsigned char *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            uint64_t v18 = (char *)v52;
            uint64_t v17 = (int *)((char *)v52 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            uint64_t v17 = &v48;
            uint64_t v18 = (char *)v52;
          }
        }
        uint64_t v19 = &v18[24 * v53];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        uint64_t v21 = ++v53;
        if (v51[0])
        {
          int v48 = 5;
          unint64_t v49 = v3;
          int v22 = &v48;
          __int16 v23 = (char *)v52;
          if (v21 >= v54)
          {
            unint64_t v40 = v21 + 1;
            BOOL v41 = (char *)v52 + 24 * v21 > (char *)&v48;
            if (v52 <= &v48 && v41)
            {
              int64_t v45 = (char *)&v48 - (unsigned char *)v52;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v40, 24);
              __int16 v23 = (char *)v52;
              int v22 = (int *)((char *)v52 + v45);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v40, 24);
              int v22 = &v48;
              __int16 v23 = (char *)v52;
            }
          }
          long long v24 = &v23[24 * v53];
          long long v25 = *(_OWORD *)v22;
          *((void *)v24 + 2) = *((void *)v22 + 2);
          *(_OWORD *)long long v24 = v25;
          ++v53;
        }
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
  if (v51[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
  }
  if (v60)
  {
    uint64_t v26 = __p;
    if (__p)
    {
      unint64_t v27 = v59;
      uint64_t v28 = __p;
      if (v59 != __p)
      {
        do
          unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p;
      }
      uint64_t v59 = v26;
      operator delete(v28);
    }
    long long v29 = v56;
    if (v56)
    {
      uint64_t v30 = v57;
      int v31 = v56;
      if (v57 != v56)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          *uint64_t v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        int v31 = v56;
      }
      uint64_t v57 = v29;
      operator delete(v31);
    }
    if (v52 != v55) {
      free(v52);
    }
  }
  return v6;
}

uint64_t mlir::memref::ExtractAlignedPointerAsIndexOp::getAsmResultNames(void *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "intptr", 6);
}

uint64_t mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[2] = *MEMORY[0x263EF8340];
  v20[0] = *(void *)(a4 + 40);
  v20[1] = 0;
  unint64_t v7 = *(void *)(mlir::ValueRange::dereference_iterator(v20, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v7 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    unint64_t v7 = 0;
  }
  v20[0] = v7;
  if (!v7) {
    return 0;
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v20);
  int v9 = (int)v8;
  uint64_t v10 = mlir::IndexType::get(a1, v8);
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v20);
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)v20);
  uint64_t v13 = mlir::MemRefType::get(0, 0, RHS, 0, 0, LayerSchedule);
  uint64_t v14 = *(unsigned int *)(a5 + 8);
  if (v14 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v14) = v13;
  unsigned int v15 = *(_DWORD *)(a5 + 12);
  uint64_t v16 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v16;
  if (v16 >= v15)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v16) = v10;
  unsigned int v17 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v17;
  for (int i = 2 * v9; i; --i)
  {
    if (v17 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v17 + 1, 8);
      unsigned int v17 = *(_DWORD *)(a5 + 8);
    }
    *(void *)(*(void *)a5 + 8 * v17) = v10;
    unsigned int v17 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v17;
  }
  return 1;
}

uint64_t mlir::memref::ExtractStridedMetadataOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v5 = *(void *)a1 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "base_buffer", 11);
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v7 = *(void *)a1 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  uint64_t v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
  a2(a3, v9, "offset", 6);
  int v10 = *(_DWORD *)(*(void *)a1 + 36);
  if (v10) {
    uint64_t v11 = *(void *)a1 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t result = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 2);
  if ((v10 & 0xFFFFFFFE) != 2)
  {
    if (*(_DWORD *)(*(void *)a1 + 36)) {
      uint64_t v13 = *(void *)a1 - 16;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 2);
    uint64_t v15 = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
    a2(a3, v15, "sizes", 5);
    int v16 = *(_DWORD *)(*(void *)a1 + 36);
    if (v16) {
      uint64_t v17 = *(void *)a1 - 16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, ((v16 - 2) >> 1) + 2);
    uint64_t v19 = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
    return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v19, "strides", 7);
  }
  return result;
}

uint64_t mlir::memref::ExtractStridedMetadataOp::fold(mlir::memref::ExtractStridedMetadataOp *a1)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(ZinIrHalH13g **)a1;
  v41[0] = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  v41[1] = 0;
  unsigned int v3 = (mlir::IndexType *)*((void *)v2 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(v2);
  v41[2] = v3;
  v41[3] = v4;
  uint64_t v5 = *(void *)(*(void *)a1 + 24);
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v6 = *(void *)a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 1);
  uint64_t v8 = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
  uint64_t ConstifiedMixedOffset = mlir::memref::ExtractStridedMetadataOp::getConstifiedMixedOffset(a1);
  if (*v8
    && (uint64_t v10 = ConstifiedMixedOffset, ConstifiedMixedOffset != mlir::getAsOpFoldResult((uint64_t)v8))
    && (unint64_t v45 = v10 & 0xFFFFFFFFFFFFFFF8,
        uint64_t Int = (void *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v45),
        uint64_t v11 = mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(v41, v5, (mlir::MLIRContext **)&Int),
        (uint64_t v12 = (void *)*v8) != 0))
  {
    uint64_t v13 = (uint64_t *)((char *)v11 - 16);
    do
    {
      uint64_t v14 = (void *)*v12;
      mlir::Operation::replaceUsesOfWith(v12[2], v8, v13);
      uint64_t v12 = v14;
    }
    while (v14);
    int v15 = 1;
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = *(void *)(*(void *)a1 + 24);
  int v17 = *(_DWORD *)(*(void *)a1 + 36);
  if (v17) {
    uint64_t v18 = *(void *)a1 - 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 2);
  uint64_t v20 = (v17 - 2) >> 1;
  int v21 = *(_DWORD *)(*(void *)a1 + 36);
  if (v21) {
    uint64_t v22 = *(void *)a1 - 16;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 2);
  mlir::ValueRange::ValueRange(&v45, v23, (v21 - 2) >> 1);
  mlir::getAsOpFoldResult(v45, v46, &Int);
  unint64_t v24 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  constifyIndexValues((uint64_t)&Int, v24, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantSizes, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
  int v26 = replaceConstantUsesOf<mlir::ResultRange>(v41, v16, v19, v20, (uint64_t *)Int, v43);
  if (Int != v44) {
    free(Int);
  }
  uint64_t v27 = *(void *)(*(void *)a1 + 24);
  int v28 = *(_DWORD *)(*(void *)a1 + 36);
  unsigned int v29 = (v28 - 2) >> 1;
  if (v28) {
    uint64_t v30 = *(void *)a1 - 16;
  }
  else {
    uint64_t v30 = 0;
  }
  int v31 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v30, v29 + 2);
  int v32 = *(_DWORD *)(*(void *)a1 + 36);
  unsigned int v33 = (v32 - 2) >> 1;
  if (v32) {
    uint64_t v34 = *(void *)a1 - 16;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v33 + 2);
  mlir::ValueRange::ValueRange(&v45, v35, v33 + 2 + v33 - (unint64_t)(v33 + 2));
  mlir::getAsOpFoldResult(v45, v46, &Int);
  unint64_t v36 = *(ZinIrHalH13g **)a1;
  unint64_t v37 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (mlir::IndexType *)mlir::Attribute::getContext((ZinIrHalH13g *)((char *)v36 + 24));
  constifyIndexValues((uint64_t)&Int, v37, v38, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantStrides, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
  unsigned int v39 = replaceConstantUsesOf<mlir::ResultRange>(v41, v27, v31, v29 + 2 + v29 - (unint64_t)(v29 + 2), (uint64_t *)Int, v43);
  if (Int != v44) {
    free(Int);
  }
  return v15 | v26 | v39;
}

uint64_t mlir::memref::ExtractStridedMetadataOp::getConstifiedMixedOffset(mlir::memref::ExtractStridedMetadataOp *this)
{
  v11[6] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v2 = *(void *)this - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 1);
  uint64_t v4 = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
  v10[0] = v11;
  v11[0] = mlir::getAsOpFoldResult(v4);
  v10[1] = (void *)0x600000001;
  uint64_t v5 = *(void *)this;
  unint64_t v6 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(v5 + 24));
  constifyIndexValues((uint64_t)v10, v6, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantOffset, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
  uint64_t v8 = *(void *)v10[0];
  if (v10[0] != v11) {
    free(v10[0]);
  }
  return v8;
}

uint64_t replaceConstantUsesOf<mlir::ResultRange>(mlir::IndexType **a1, uint64_t a2, mlir::detail::OpResultImpl *this, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  char v6 = 0;
  if (a6 && a4)
  {
    uint64_t v8 = a5;
    char v6 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = &a5[a6];
    do
    {
      uint64_t NextResultAtOffset = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v12);
      if (*NextResultAtOffset)
      {
        int v15 = NextResultAtOffset;
        uint64_t v16 = *v8;
        if (v16 != mlir::getAsOpFoldResult((uint64_t)NextResultAtOffset))
        {
          unint64_t v22 = *v8 & 0xFFFFFFFFFFFFFFF8;
          uint64_t Int = (mlir::MLIRContext *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v22);
          int v17 = mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(a1, a2, &Int);
          uint64_t v18 = (void *)*v15;
          if (*v15)
          {
            uint64_t v19 = (uint64_t *)((char *)v17 - 16);
            do
            {
              uint64_t v20 = (void *)*v18;
              mlir::Operation::replaceUsesOfWith(v18[2], v15, v19);
              uint64_t v18 = v20;
            }
            while (v20);
            char v6 = 1;
          }
        }
      }
      if (++v8 == v13) {
        break;
      }
      ++v12;
    }
    while (v12 != a4);
  }
  return v6 & 1;
}

void constifyIndexValues(uint64_t a1, uint64_t a2, mlir::IndexType *a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, mlir::MLIRContext *), uint64_t a7)
{
  v26[6] = *MEMORY[0x263EF8340];
  a4(&v24, a5);
  uint64_t v23 = a3;
  if (v25)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (char *)v24;
    uint64_t v13 = 8 * v25;
    do
    {
      uint64_t v14 = *(mlir::MLIRContext **)&v12[v11];
      if ((a6(a7, v14) & 1) == 0) {
        *(void *)(*(void *)a1 + v11) = mlir::Builder::getIndexAttr(&v23, v14) & 0xFFFFFFFFFFFFFFFBLL;
      }
      v11 += 8;
    }
    while (v13 != v11);
  }
  uint64_t v15 = *(unsigned int *)(a1 + 8);
  if (v15)
  {
    uint64_t v16 = *(unint64_t **)a1;
    for (uint64_t i = 8 * v15; i; i -= 8)
    {
      unint64_t v19 = *v16;
      if ((*v16 & 4) != 0)
      {
        unint64_t ConstantIntValue = mlir::getConstantIntValue(v19 & 0xFFFFFFFFFFFFFFF8 | 4);
        if (!v21) {
          goto LABEL_10;
        }
        uint64_t Int = (mlir::MLIRContext *)ConstantIntValue;
      }
      else
      {
        unint64_t v22 = v19 & 0xFFFFFFFFFFFFFFF8;
        uint64_t Int = (mlir::MLIRContext *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v22);
      }
      *uint64_t v16 = mlir::Builder::getIndexAttr(&v23, Int) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_10:
      ++v16;
    }
  }
  if (v24 != v26) {
    free(v24);
  }
}

void getConstantSizes(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = a1;
  uint64_t Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  uint64_t v5 = v3;
  size_t v6 = 8 * v3;
  *a2 = a2 + 2;
  a2[1] = 0x600000000;
  if ((unint64_t)(8 * v3) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 2, (8 * v3) >> 3, 8);
    unsigned int v7 = *((_DWORD *)a2 + 2);
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v7 = 0;
  if (v3)
  {
LABEL_5:
    memcpy((void *)(*a2 + 8 * v7), Value, v6);
    unsigned int v7 = *((_DWORD *)a2 + 2);
  }
LABEL_6:
  *((_DWORD *)a2 + 2) = v7 + (v6 >> 3);
}

void getConstantStrides(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v10[6] = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  __src = v10;
  uint64_t v9 = 0x600000000;
  char StridesAndOffset = mlir::getStridesAndOffset(a1, (uint64_t)&__src, &v7);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x600000000;
  if (StridesAndOffset)
  {
    int v4 = v9;
    if (v9)
    {
      if (&__src != (void **)a2)
      {
        if (__src == v10)
        {
          unsigned int v6 = v9;
          if (v9 < 7
            || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v9, 8),
                (unsigned int v6 = v9) != 0))
          {
            memcpy(*(void **)a2, __src, 8 * v6);
          }
          *(_DWORD *)(a2 + 8) = v4;
        }
        else
        {
          *(void *)a2 = __src;
          int v5 = HIDWORD(v9);
          *(_DWORD *)(a2 + 8) = v4;
          *(_DWORD *)(a2 + 12) = v5;
          __src = v10;
          HIDWORD(v9) = 0;
        }
        LODWORD(v9) = 0;
      }
    }
  }
  if (__src != v10) {
    free(__src);
  }
}

void getConstantOffset(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[6] = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  v6[0] = v7;
  uint64_t v3 = 0x600000000;
  v6[1] = (void *)0x600000000;
  char StridesAndOffset = mlir::getStridesAndOffset(a1, (uint64_t)v6, &v5);
  *a2 = a2 + 2;
  if (StridesAndOffset)
  {
    a2[2] = v5;
    uint64_t v3 = 0x600000001;
  }
  a2[1] = v3;
  if (v6[0] != v7) {
    free(v6[0]);
  }
}

uint64_t mlir::memref::GenericAtomicRMWOp::verify(mlir::memref::GenericAtomicRMWOp *this)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(unsigned int *)(*(void *)this + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    int v4 = (void *)(((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v2 + 40));
    if ((void *)*v4 == v4) {
      goto LABEL_29;
    }
  }
  else
  {
    int v4 = 0;
    if (!MEMORY[0]) {
      goto LABEL_29;
    }
  }
  uint64_t v5 = v4[1];
  if (v5) {
    uint64_t v6 = v5 - 8;
  }
  else {
    uint64_t v6 = 0;
  }
  if (((*(void *)(v6 + 56) - *(void *)(v6 + 48)) & 0x7FFFFFFF8) != 8)
  {
LABEL_29:
    v35[0] = (void **)"expected single number of entry block arguments";
    __int16 v36 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v35, (uint64_t)v37);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      unint64_t v22 = __p;
      if (__p)
      {
        uint64_t v23 = v43;
        unint64_t v24 = __p;
        if (v43 != __p)
        {
          do
            uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          unint64_t v24 = __p;
        }
        unsigned int v43 = v22;
        operator delete(v24);
      }
      int v17 = v40;
      if (!v40) {
        goto LABEL_45;
      }
      unsigned int v25 = v41;
      unint64_t v19 = v40;
      if (v41 == v40)
      {
LABEL_44:
        BOOL v41 = v17;
        operator delete(v19);
LABEL_45:
        if (v38 != &v39) {
          free(v38);
        }
        return v13;
      }
      do
      {
        uint64_t v27 = *--v25;
        uint64_t v26 = v27;
        void *v25 = 0;
        if (v27) {
          MEMORY[0x21667D390](v26, 0x1000C8077774924);
        }
      }
      while (v25 != v17);
LABEL_43:
      unint64_t v19 = v40;
      goto LABEL_44;
    }
    return v13;
  }
  int v7 = *(_DWORD *)(v2 + 36);
  uint64_t v8 = v2 - 16;
  if (v7) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (void *)v4[1];
  uint64_t v12 = v11 - 1;
  if (!v11) {
    uint64_t v12 = 0;
  }
  if (v10 == (*(void *)(*(void *)v12[6] + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    for (; v11 != v4; uint64_t v11 = (void *)v11[1])
    {
      unsigned int v29 = v11 - 1;
      if (!v11) {
        unsigned int v29 = 0;
      }
      uint64_t v30 = (ZinIrHalH13g *)(v29 + 4);
      int v31 = (ZinIrHalH13g *)v29[5];
      while (v31 != v30)
      {
        int v32 = (ZinIrHalH13g *)*((void *)v31 + 1);
        ZinIrHalH13g::~ZinIrHalH13g(v31);
        int v34 = mlir::detail::walk<mlir::ForwardIterator>(v33, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::memref::GenericAtomicRMWOp::verify(void)::$_0>, (uint64_t)v37, 1);
        int v31 = v32;
        if (!v34) {
          return 0;
        }
      }
    }
    return 1;
  }
  else
  {
    v35[0] = (void **)"expected block argument of the same type result type";
    __int16 v36 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v35, (uint64_t)v37);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      uint64_t v14 = __p;
      if (__p)
      {
        uint64_t v15 = v43;
        uint64_t v16 = __p;
        if (v43 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        unsigned int v43 = v14;
        operator delete(v16);
      }
      int v17 = v40;
      if (!v40) {
        goto LABEL_45;
      }
      uint64_t v18 = v41;
      unint64_t v19 = v40;
      if (v41 == v40) {
        goto LABEL_44;
      }
      do
      {
        uint64_t v21 = *--v18;
        uint64_t v20 = v21;
        *uint64_t v18 = 0;
        if (v21) {
          MEMORY[0x21667D390](v20, 0x1000C8077774924);
        }
      }
      while (v18 != v17);
      goto LABEL_43;
    }
  }
  return v13;
}

uint64_t mlir::memref::GenericAtomicRMWOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  v14[16] = *MEMORY[0x263EF8340];
  memset(v11, 0, 24);
  uint64_t v10 = 0;
  uint64_t v12 = v14;
  uint64_t v13 = 0x400000000;
  int v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  if ((*(unsigned __int8 (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 672))(a1, v11, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v12, 2, 1, 0xFFFFFFFFLL)&& (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v10)&& (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v11, v10, (uint64_t)a2 + 16))
  {
    if (!v13) {
LABEL_9:
    }
      mlir::OperationState::addRegion(a2);
    int v7 = (char *)v12;
    uint64_t v8 = 32 * v13;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v7, IndexType, (uint64_t)a2 + 16))
    {
      v7 += 32;
      v8 -= 32;
      if (!v8) {
        goto LABEL_9;
      }
    }
  }
  if (v12 != v14) {
    free(v12);
  }
  return 0;
}

uint64_t mlir::memref::GenericAtomicRMWOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  int v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
    uint64_t v8 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned char *v7 = 91;
    ++*((void *)v6 + 4);
    uint64_t v8 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_6:
      uint64_t v9 = *((unsigned int *)v8 + 17);
      uint64_t v10 = *((void *)v8 + 9);
      uint64_t v11 = v9 - 1;
      goto LABEL_7;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = -1;
LABEL_7:
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  v26[0] = ", ";
  v26[1] = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v12, 0, v12, v11, (uint64_t)a2, v13, (uint64_t)v26);
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (_DWORD *)*((void *)v14 + 4);
  if (*((void *)v14 + 3) - (void)v15 > 3uLL)
  {
    _DWORD *v15 = 540680285;
    *((void *)v14 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v14, "] : ", 4uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
    uint64_t v18 = *this;
    unint64_t v19 = *((unsigned int *)*this + 11);
    if ((v19 & 0x7FFFFF) != 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    *int v17 = 32;
    uint64_t v18 = *this;
    unint64_t v19 = *((unsigned int *)*this + 11);
    if ((v19 & 0x7FFFFF) != 0)
    {
LABEL_12:
      unint64_t v20 = (((unint64_t)v18 + 16 * ((v19 >> 23) & 1) + ((v19 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v18 + 10);
      goto LABEL_15;
    }
  }
  unint64_t v20 = 0;
LABEL_15:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 224))(a2, v20, 1, 1, 0);
  uint64_t v21 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v26[0] = mlir::Operation::getAttrDictionary(v21);
    unint64_t v22 = (mlir::ArrayAttr *)v26;
  }
  else
  {
    unint64_t v22 = (mlir::Operation *)((char *)v21 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v22);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v24, 0, 0);
}

uint64_t mlir::memref::AtomicYieldOp::verify(mlir::memref::AtomicYieldOp *this)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t ParentOp = *(unsigned int **)(*(void *)this + 16);
  if (ParentOp) {
    uint64_t ParentOp = (unsigned int *)mlir::Block::getParentOp((mlir::Block *)ParentOp);
  }
  unint64_t v3 = (void **)ParentOp[9];
  int v4 = (void **)(ParentOp - 4);
  if (!v3) {
    int v4 = 0;
  }
  v43[0] = v4;
  v43[1] = v3;
  mlir::OperandRange::getTypes((uint64_t *)v43, v48);
  unint64_t v5 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v48[0], v48[1]) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == v6) {
    return 1;
  }
  __int16 v44 = 257;
  mlir::OpState::emitOpError((uint64_t *)this, v43, (uint64_t)v48);
  if (v48[0])
  {
    int v45 = 3;
    unint64_t v46 = "types mismatch between yield op: ";
    uint64_t v47 = 33;
    int v7 = &v45;
    uint64_t v8 = (char *)v49;
    if (v50 >= v51)
    {
      unint64_t v34 = v50 + 1;
      if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
      {
        int64_t v39 = (char *)&v45 - (unsigned char *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
        uint64_t v8 = (char *)v49;
        int v7 = (int *)((char *)v49 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
        int v7 = &v45;
        uint64_t v8 = (char *)v49;
      }
    }
    uint64_t v9 = &v8[24 * v50];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    ++v50;
    if (v48[0])
    {
      uint64_t v11 = &v45;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v45, v6);
      uint64_t v12 = (char *)v49;
      if (v50 >= v51)
      {
        unint64_t v35 = v50 + 1;
        if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
        {
          int64_t v40 = (char *)&v45 - (unsigned char *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          uint64_t v12 = (char *)v49;
          uint64_t v11 = (int *)((char *)v49 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          uint64_t v11 = &v45;
          uint64_t v12 = (char *)v49;
        }
      }
      uint64_t v13 = &v12[24 * v50];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v13 = v14;
      uint64_t v15 = ++v50;
      if (v48[0])
      {
        int v45 = 3;
        unint64_t v46 = " and its parent: ";
        uint64_t v47 = 17;
        uint64_t v16 = &v45;
        int v17 = (char *)v49;
        if (v15 >= v51)
        {
          unint64_t v36 = v15 + 1;
          BOOL v37 = (char *)v49 + 24 * v15 > (char *)&v45;
          if (v49 <= &v45 && v37)
          {
            int64_t v41 = (char *)&v45 - (unsigned char *)v49;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v36, 24);
            int v17 = (char *)v49;
            uint64_t v16 = (int *)((char *)v49 + v41);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v36, 24);
            uint64_t v16 = &v45;
            int v17 = (char *)v49;
          }
        }
        uint64_t v18 = &v17[24 * v50];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = *((void *)v16 + 2);
        *(_OWORD *)uint64_t v18 = v19;
        ++v50;
        if (v48[0])
        {
          unint64_t v20 = &v45;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v45, v5);
          uint64_t v21 = (char *)v49;
          if (v50 >= v51)
          {
            unint64_t v38 = v50 + 1;
            if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
            {
              int64_t v42 = (char *)&v45 - (unsigned char *)v49;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v38, 24);
              uint64_t v21 = (char *)v49;
              unint64_t v20 = (int *)((char *)v49 + v42);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v38, 24);
              unint64_t v20 = &v45;
              uint64_t v21 = (char *)v49;
            }
          }
          unint64_t v22 = &v21[24 * v50];
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)unint64_t v22 = v23;
          ++v50;
        }
      }
    }
  }
  uint64_t v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
  if (v48[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
  }
  if (v57)
  {
    unsigned int v25 = __p;
    if (__p)
    {
      uint64_t v26 = v56;
      uint64_t v27 = __p;
      if (v56 != __p)
      {
        do
          uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        uint64_t v27 = __p;
      }
      uint64_t v56 = v25;
      operator delete(v27);
    }
    int v28 = v53;
    if (v53)
    {
      unsigned int v29 = v54;
      uint64_t v30 = v53;
      if (v54 != v53)
      {
        do
        {
          uint64_t v32 = *--v29;
          uint64_t v31 = v32;
          void *v29 = 0;
          if (v32) {
            MEMORY[0x21667D390](v31, 0x1000C8077774924);
          }
        }
        while (v29 != v28);
        uint64_t v30 = v53;
      }
      unsigned int v54 = v28;
      operator delete(v30);
    }
    if (v49 != v52) {
      free(v49);
    }
  }
  return v24;
}

uint64_t mlir::memref::GlobalOp::verify(mlir::memref::GlobalOp *this)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  unint64_t v110 = *(int8x8_t **)(v2 + 40);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v110);
  if (!Value || !mlir::BaseMemRefType::hasRank((mlir::BaseMemRefType *)&Value)) {
    goto LABEL_18;
  }
  unint64_t v3 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
  if (!v4)
  {
LABEL_9:
    uint64_t v6 = *(void *)this;
    unint64_t v7 = ((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1;
    if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      uint64_t v8 = *(void *)this + 16 * v7 + 64;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = *(void *)v9;
      if (*(_UNKNOWN **)(*(void *)v9 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      {
        if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(v10 + 8))
        {
          v104[0] = (void **)"initial value should be a unit or elements attribute, but got ";
          __int16 v105 = 259;
          mlir::OpState::emitOpError((uint64_t *)this, v104, (uint64_t)&v110);
          if (v110)
          {
            int32x4_t v72 = (char *)&v107;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v9);
            int64x2_t v73 = (char *)v112;
            if (v113 >= v114)
            {
              unint64_t v86 = v113 + 1;
              if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
              {
                int64_t v97 = (char *)&v107 - (unsigned char *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v86, 24);
                int64x2_t v73 = (char *)v112;
                int32x4_t v72 = (char *)v112 + v97;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v86, 24);
                int32x4_t v72 = (char *)&v107;
                int64x2_t v73 = (char *)v112;
              }
            }
            long long v74 = &v73[24 * v113];
            long long v75 = *(_OWORD *)v72;
            *((void *)v74 + 2) = *((void *)v72 + 2);
            *(_OWORD *)long long v74 = v75;
            ++v113;
          }
          uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
          if (v110) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
          }
          if (!v120) {
            return v18;
          }
          int64x2_t v76 = __p;
          if (__p)
          {
            uint64_t v77 = v119;
            uint64_t v78 = __p;
            if (v119 != __p)
            {
              do
                uint64_t v77 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v77 - 1);
              while (v77 != v76);
              uint64_t v78 = __p;
            }
            int64_t v119 = v76;
            operator delete(v78);
          }
          unint64_t v22 = v116;
          if (!v116) {
            goto LABEL_110;
          }
          long long v79 = v117;
          uint64_t v24 = v116;
          if (v117 == v116) {
            goto LABEL_109;
          }
          do
          {
            uint64_t v81 = *--v79;
            uint64_t v80 = v81;
            void *v79 = 0;
            if (v81) {
              MEMORY[0x21667D390](v80, 0x1000C8077774924);
            }
          }
          while (v79 != v22);
          goto LABEL_108;
        }
        uint64_t v10 = *(void *)v9;
      }
      if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(v10 + 8))
      {
        uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v9 + 8);
        uint64_t v102 = v9;
        uint64_t v103 = v11;
        uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v102);
        TensorTypeFromMemRefuint64_t Type = mlir::memref::getTensorTypeFromMemRefType(Value);
        if (Type != TensorTypeFromMemRefType)
        {
          uint64_t v29 = TensorTypeFromMemRefType;
          v104[0] = (void **)"initial value expected to be of type ";
          __int16 v105 = 259;
          mlir::OpState::emitOpError((uint64_t *)this, v104, (uint64_t)&v110);
          if (v110)
          {
            uint64_t v30 = (char *)&v107;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v29);
            uint64_t v31 = (char *)v112;
            if (v113 >= v114)
            {
              unint64_t v85 = v113 + 1;
              if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
              {
                int64_t v96 = (char *)&v107 - (unsigned char *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v85, 24);
                uint64_t v31 = (char *)v112;
                uint64_t v30 = (char *)v112 + v96;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v85, 24);
                uint64_t v30 = (char *)&v107;
                uint64_t v31 = (char *)v112;
              }
            }
            uint64_t v32 = &v31[24 * v113];
            long long v33 = *(_OWORD *)v30;
            *((void *)v32 + 2) = *((void *)v30 + 2);
            *(_OWORD *)uint64_t v32 = v33;
            uint64_t v34 = ++v113;
            if (v110)
            {
              LODWORD(v107) = 3;
              uint64_t v108 = ", but was of type ";
              uint64_t v109 = 18;
              unint64_t v35 = (char *)&v107;
              unint64_t v36 = (char *)v112;
              if (v34 >= v114)
              {
                unint64_t v89 = v34 + 1;
                BOOL v90 = (char *)v112 + 24 * v34 > (char *)&v107;
                if (v112 <= &v107 && v90)
                {
                  int64_t v99 = (char *)&v107 - (unsigned char *)v112;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
                  unint64_t v36 = (char *)v112;
                  unint64_t v35 = (char *)v112 + v99;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
                  unint64_t v35 = (char *)&v107;
                  unint64_t v36 = (char *)v112;
                }
              }
              BOOL v37 = &v36[24 * v113];
              long long v38 = *(_OWORD *)v35;
              *((void *)v37 + 2) = *((void *)v35 + 2);
              *(_OWORD *)BOOL v37 = v38;
              ++v113;
              if (v110)
              {
                int64_t v39 = (char *)&v107;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, Type);
                int64_t v40 = (char *)v112;
                if (v113 >= v114)
                {
                  unint64_t v93 = v113 + 1;
                  if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
                  {
                    int64_t v101 = (char *)&v107 - (unsigned char *)v112;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
                    int64_t v40 = (char *)v112;
                    int64_t v39 = (char *)v112 + v101;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
                    int64_t v39 = (char *)&v107;
                    int64_t v40 = (char *)v112;
                  }
                }
                int64_t v41 = &v40[24 * v113];
                long long v42 = *(_OWORD *)v39;
                *((void *)v41 + 2) = *((void *)v39 + 2);
                *(_OWORD *)int64_t v41 = v42;
                ++v113;
              }
            }
          }
          uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
          if (v110) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
          }
          if (!v120) {
            return v18;
          }
          unsigned int v43 = __p;
          if (__p)
          {
            __int16 v44 = v119;
            int v45 = __p;
            if (v119 != __p)
            {
              do
                __int16 v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
              while (v44 != v43);
              int v45 = __p;
            }
            int64_t v119 = v43;
            operator delete(v45);
          }
          unint64_t v22 = v116;
          if (!v116) {
            goto LABEL_110;
          }
          unint64_t v46 = v117;
          uint64_t v24 = v116;
          if (v117 == v116)
          {
LABEL_109:
            BOOL v117 = v22;
            operator delete(v24);
LABEL_110:
            if (v112 != v115) {
              free(v112);
            }
            return v18;
          }
          do
          {
            uint64_t v48 = *--v46;
            uint64_t v47 = v48;
            *unint64_t v46 = 0;
            if (v48) {
              MEMORY[0x21667D390](v47, 0x1000C8077774924);
            }
          }
          while (v46 != v22);
          goto LABEL_108;
        }
      }
      else
      {
        uint64_t v102 = 0;
        uint64_t v103 = 0;
      }
      uint64_t v6 = *(void *)this;
      unint64_t v7 = ((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1;
    }
    v104[0] = *(void ***)(v6 + 16 * v7 + 64);
    if (!v104[0]) {
      return 1;
    }
    mlir::IntegerAttr::getValue((uint64_t)v104, (llvm::APInt *)&v110);
    if (v111 >= 0x41) {
      unint64_t v49 = v110;
    }
    else {
      unint64_t v49 = (int8x8_t *)&v110;
    }
    int8x8_t v50 = *v49;
    if (v111 >= 0x41 && v110) {
      MEMORY[0x21667D390](v110, 0x1000C8000313F17);
    }
    uint8x8_t v51 = (uint8x8_t)vcnt_s8(v50);
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.u32[0] == 1) {
      return 1;
    }
    __int16 v105 = 257;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)v104, (uint64_t)&v110);
    if (v110)
    {
      LODWORD(v107) = 3;
      uint64_t v108 = "alignment attribute value ";
      uint64_t v109 = 26;
      uint64_t v52 = (char *)&v107;
      unsigned int v53 = (char *)v112;
      if (v113 >= v114)
      {
        unint64_t v84 = v113 + 1;
        if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
        {
          int64_t v95 = (char *)&v107 - (unsigned char *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v84, 24);
          unsigned int v53 = (char *)v112;
          uint64_t v52 = (char *)v112 + v95;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v84, 24);
          uint64_t v52 = (char *)&v107;
          unsigned int v53 = (char *)v112;
        }
      }
      unsigned int v54 = &v53[24 * v113];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = *((void *)v52 + 2);
      *(_OWORD *)unsigned int v54 = v55;
      uint64_t v56 = ++v113;
      if (v110)
      {
        LODWORD(v107) = 5;
        uint64_t v108 = (const char *)v50;
        char v57 = (char *)&v107;
        uint64_t v58 = (char *)v112;
        if (v56 >= v114)
        {
          unint64_t v87 = v56 + 1;
          BOOL v88 = (char *)v112 + 24 * v56 > (char *)&v107;
          if (v112 <= &v107 && v88)
          {
            int64_t v98 = (char *)&v107 - (unsigned char *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v87, 24);
            uint64_t v58 = (char *)v112;
            char v57 = (char *)v112 + v98;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v87, 24);
            char v57 = (char *)&v107;
            uint64_t v58 = (char *)v112;
          }
        }
        uint64_t v59 = &v58[24 * v113];
        long long v60 = *(_OWORD *)v57;
        *((void *)v59 + 2) = *((void *)v57 + 2);
        *(_OWORD *)uint64_t v59 = v60;
        uint64_t v61 = ++v113;
        if (v110)
        {
          LODWORD(v107) = 3;
          uint64_t v108 = " is not a power of 2";
          uint64_t v109 = 20;
          int v62 = (char *)&v107;
          int v63 = (char *)v112;
          if (v61 >= v114)
          {
            unint64_t v91 = v61 + 1;
            BOOL v92 = (char *)v112 + 24 * v61 > (char *)&v107;
            if (v112 <= &v107 && v92)
            {
              int64_t v100 = (char *)&v107 - (unsigned char *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
              int v63 = (char *)v112;
              int v62 = (char *)v112 + v100;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
              int v62 = (char *)&v107;
              int v63 = (char *)v112;
            }
          }
          int v64 = &v63[24 * v113];
          long long v65 = *(_OWORD *)v62;
          *((void *)v64 + 2) = *((void *)v62 + 2);
          *(_OWORD *)int v64 = v65;
          ++v113;
        }
      }
    }
    uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
    if (v110) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
    }
    if (!v120) {
      return v18;
    }
    unint64_t v66 = __p;
    if (__p)
    {
      uint64_t v67 = v119;
      int v68 = __p;
      if (v119 != __p)
      {
        do
          uint64_t v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        int v68 = __p;
      }
      int64_t v119 = v66;
      operator delete(v68);
    }
    unint64_t v22 = v116;
    if (!v116) {
      goto LABEL_110;
    }
    long long v69 = v117;
    uint64_t v24 = v116;
    if (v117 == v116) {
      goto LABEL_109;
    }
    do
    {
      uint64_t v71 = *--v69;
      uint64_t v70 = v71;
      *long long v69 = 0;
      if (v71) {
        MEMORY[0x21667D390](v70, 0x1000C8077774924);
      }
    }
    while (v69 != v22);
LABEL_108:
    uint64_t v24 = v116;
    goto LABEL_109;
  }
  uint64_t v5 = 8 * v4;
  while (*v3 != 0x8000000000000000)
  {
    ++v3;
    v5 -= 8;
    if (!v5) {
      goto LABEL_9;
    }
  }
LABEL_18:
  v104[0] = (void **)"type should be static shaped memref, but got ";
  __int16 v105 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v104, (uint64_t)&v110);
  unint64_t v12 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v12 = 0;
  }
  uint64_t v107 = *(void *)(v12 + 40);
  uint64_t v13 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v107);
  if (v110)
  {
    long long v14 = (char *)&v107;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v13);
    uint64_t v15 = (char *)v112;
    if (v113 >= v114)
    {
      unint64_t v83 = v113 + 1;
      if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
      {
        int64_t v94 = (char *)&v107 - (unsigned char *)v112;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v83, 24);
        uint64_t v15 = (char *)v112;
        long long v14 = (char *)v112 + v94;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v83, 24);
        long long v14 = (char *)&v107;
        uint64_t v15 = (char *)v112;
      }
    }
    uint64_t v16 = &v15[24 * v113];
    long long v17 = *(_OWORD *)v14;
    *((void *)v16 + 2) = *((void *)v14 + 2);
    *(_OWORD *)uint64_t v16 = v17;
    ++v113;
  }
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
  if (v110) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
  }
  if (v120)
  {
    long long v19 = __p;
    if (__p)
    {
      unint64_t v20 = v119;
      uint64_t v21 = __p;
      if (v119 != __p)
      {
        do
          unint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      int64_t v119 = v19;
      operator delete(v21);
    }
    unint64_t v22 = v116;
    if (!v116) {
      goto LABEL_110;
    }
    long long v23 = v117;
    uint64_t v24 = v116;
    if (v117 == v116) {
      goto LABEL_109;
    }
    do
    {
      uint64_t v26 = *--v23;
      uint64_t v25 = v26;
      *long long v23 = 0;
      if (v26) {
        MEMORY[0x21667D390](v25, 0x1000C8077774924);
      }
    }
    while (v23 != v22);
    goto LABEL_108;
  }
  return v18;
}

void *mlir::memref::GlobalOp::getConstantInitValue(mlir::memref::GlobalOp *this)
{
  uint64_t result = 0;
  uint64_t v3 = *(void *)this;
  unint64_t v4 = *(unsigned int *)(v3 + 44);
  uint64_t v5 = v3 + 16 * ((v4 >> 23) & 1) + 64;
  if (!BYTE3(v4)) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void **)(v5 + 16);
  if (*(void *)(v5 + 8)) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v6 + 8);
    return v6;
  }
  return result;
}

uint64_t mlir::memref::GetGlobalOp::verifySymbolUses(mlir::SymbolTable **this, mlir::SymbolTableCollection *a2)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = mlir::SymbolTableCollection::lookupNearestSymbolFrom((uint64_t)a2, *this, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  if (v3
    && (uint64_t v4 = v3,
        *(_UNKNOWN **)(*(void *)(v3 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::GlobalOp,void>::id))
  {
    if (*((_DWORD *)*this + 9)) {
      uint64_t v20 = (uint64_t)*this - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    unint64_t v21 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (HIBYTE(*(_DWORD *)(v4 + 44))) {
      unint64_t v22 = v4 + 64 + 16 * (((unint64_t)*(unsigned int *)(v4 + 44) >> 23) & 1);
    }
    else {
      unint64_t v22 = 0;
    }
    uint64_t v71 = *(void *)(v22 + 40);
    if (mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v71) == v21) {
      return 1;
    }
    v64[0] = (void **)"result type ";
    __int16 v65 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v64, (uint64_t)&v71);
    if (v71)
    {
      long long v23 = &v67;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v21);
      uint64_t v24 = (char *)v73;
      if (v74 >= v75)
      {
        unint64_t v53 = v74 + 1;
        if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
        {
          int64_t v60 = (char *)&v67 - (unsigned char *)v73;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v53, 24);
          uint64_t v24 = (char *)v73;
          long long v23 = (void ***)((char *)v73 + v60);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v53, 24);
          long long v23 = &v67;
          uint64_t v24 = (char *)v73;
        }
      }
      uint64_t v25 = &v24[24 * v74];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = v23[2];
      *(_OWORD *)uint64_t v25 = v26;
      uint64_t v27 = ++v74;
      if (v71)
      {
        LODWORD(v67) = 3;
        int v68 = " does not match type ";
        uint64_t v69 = 21;
        int v28 = &v67;
        uint64_t v29 = (char *)v73;
        if (v27 >= v75)
        {
          unint64_t v55 = v27 + 1;
          BOOL v56 = (char *)v73 + 24 * v27 > (char *)&v67;
          if (v73 <= &v67 && v56)
          {
            int64_t v62 = (char *)&v67 - (unsigned char *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v55, 24);
            uint64_t v29 = (char *)v73;
            int v28 = (void ***)((char *)v73 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v55, 24);
            int v28 = &v67;
            uint64_t v29 = (char *)v73;
          }
        }
        uint64_t v30 = &v29[24 * v74];
        long long v31 = *(_OWORD *)v28;
        *((void *)v30 + 2) = v28[2];
        *(_OWORD *)uint64_t v30 = v31;
        ++v74;
      }
    }
    if (HIBYTE(*(_DWORD *)(v4 + 44))) {
      unint64_t v32 = v4 + 64 + 16 * (((unint64_t)*(unsigned int *)(v4 + 44) >> 23) & 1);
    }
    else {
      unint64_t v32 = 0;
    }
    uint64_t v67 = *(void ***)(v32 + 40);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
    if (v71)
    {
      uint64_t v34 = &v67;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, Value);
      unint64_t v35 = (char *)v73;
      if (v74 >= v75)
      {
        unint64_t v54 = v74 + 1;
        if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
        {
          int64_t v61 = (char *)&v67 - (unsigned char *)v73;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v54, 24);
          unint64_t v35 = (char *)v73;
          uint64_t v34 = (void ***)((char *)v73 + v61);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v54, 24);
          uint64_t v34 = &v67;
          unint64_t v35 = (char *)v73;
        }
      }
      unint64_t v36 = &v35[24 * v74];
      long long v37 = *(_OWORD *)v34;
      *((void *)v36 + 2) = v34[2];
      *(_OWORD *)unint64_t v36 = v37;
      uint64_t v38 = ++v74;
      if (v71)
      {
        LODWORD(v67) = 3;
        int v68 = " of the global memref @";
        uint64_t v69 = 23;
        int64_t v39 = &v67;
        int64_t v40 = (char *)v73;
        if (v38 >= v75)
        {
          unint64_t v57 = v38 + 1;
          BOOL v58 = (char *)v73 + 24 * v38 > (char *)&v67;
          if (v73 <= &v67 && v58)
          {
            int64_t v63 = (char *)&v67 - (unsigned char *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
            int64_t v40 = (char *)v73;
            int64_t v39 = (void ***)((char *)v73 + v63);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
            int64_t v39 = &v67;
            int64_t v40 = (char *)v73;
          }
        }
        int64_t v41 = &v40[24 * v74];
        long long v42 = *(_OWORD *)v39;
        *((void *)v41 + 2) = v39[2];
        *(_OWORD *)int64_t v41 = v42;
        ++v74;
      }
    }
    uint64_t v66 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
    uint64_t v67 = (void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
    uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v67);
    if (v71)
    {
      __int16 v70 = 261;
      uint64_t v67 = AttrData;
      int v68 = v44;
      mlir::Diagnostic::operator<<((uint64_t)v72, &v67);
    }
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if (v71) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    }
    if (v81)
    {
      int v45 = __p;
      if (__p)
      {
        unint64_t v46 = v80;
        uint64_t v47 = __p;
        if (v80 != __p)
        {
          do
            unint64_t v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
          while (v46 != v45);
          uint64_t v47 = __p;
        }
        uint64_t v80 = v45;
        operator delete(v47);
      }
      uint64_t v15 = v77;
      if (!v77) {
        goto LABEL_59;
      }
      uint64_t v48 = v78;
      long long v17 = v77;
      if (v78 == v77) {
        goto LABEL_58;
      }
      do
      {
        uint64_t v50 = *--v48;
        uint64_t v49 = v50;
        *uint64_t v48 = 0;
        if (v50) {
          MEMORY[0x21667D390](v49, 0x1000C8077774924);
        }
      }
      while (v48 != v15);
      goto LABEL_57;
    }
  }
  else
  {
    v64[0] = (void **)"'";
    __int16 v65 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v64, (uint64_t)&v71);
    uint64_t v66 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
    uint64_t v67 = (void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
    uint64_t v5 = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v67);
    if (v71)
    {
      __int16 v70 = 261;
      uint64_t v67 = v5;
      int v68 = v6;
      mlir::Diagnostic::operator<<((uint64_t)v72, &v67);
      if (v71)
      {
        LODWORD(v67) = 3;
        int v68 = "' does not reference a valid global memref";
        uint64_t v69 = 42;
        BOOL v7 = &v67;
        uint64_t v8 = (char *)v73;
        if (v74 >= v75)
        {
          unint64_t v52 = v74 + 1;
          if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
          {
            int64_t v59 = (char *)&v67 - (unsigned char *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v52, 24);
            uint64_t v8 = (char *)v73;
            BOOL v7 = (void ***)((char *)v73 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v52, 24);
            BOOL v7 = &v67;
            uint64_t v8 = (char *)v73;
          }
        }
        uint64_t v9 = &v8[24 * v74];
        long long v10 = *(_OWORD *)v7;
        *((void *)v9 + 2) = v7[2];
        *(_OWORD *)uint64_t v9 = v10;
        ++v74;
      }
    }
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if (v71) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    }
    if (v81)
    {
      unint64_t v12 = __p;
      if (__p)
      {
        uint64_t v13 = v80;
        long long v14 = __p;
        if (v80 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          long long v14 = __p;
        }
        uint64_t v80 = v12;
        operator delete(v14);
      }
      uint64_t v15 = v77;
      if (!v77) {
        goto LABEL_59;
      }
      uint64_t v16 = v78;
      long long v17 = v77;
      if (v78 == v77)
      {
LABEL_58:
        uint64_t v78 = v15;
        operator delete(v17);
LABEL_59:
        if (v73 != v76) {
          free(v73);
        }
        return v11;
      }
      do
      {
        uint64_t v19 = *--v16;
        uint64_t v18 = v19;
        *uint64_t v16 = 0;
        if (v19) {
          MEMORY[0x21667D390](v18, 0x1000C8077774924);
        }
      }
      while (v16 != v15);
LABEL_57:
      long long v17 = v77;
      goto LABEL_58;
    }
  }
  return v11;
}

uint64_t mlir::memref::LoadOp::verify(mlir::memref::LoadOp *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    uint64_t v3 = *(unsigned int *)(v2 + 68);
  }
  else {
    uint64_t v3 = 0;
  }
  v17[0] = *(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v17);
  if (v4 + 1 == v3) {
    return 1;
  }
  uint64_t v15 = (void **)"incorrect number of indices for load";
  __int16 v16 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v15, (uint64_t)v17);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v17[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
  }
  if (v24)
  {
    uint64_t v6 = __p;
    if (__p)
    {
      BOOL v7 = v23;
      uint64_t v8 = __p;
      if (v23 != __p)
      {
        do
          BOOL v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        uint64_t v8 = __p;
      }
      long long v23 = v6;
      operator delete(v8);
    }
    uint64_t v9 = v20;
    if (v20)
    {
      long long v10 = v21;
      uint64_t v11 = v20;
      if (v21 != v20)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          *long long v10 = 0;
          if (v13) {
            MEMORY[0x21667D390](v12, 0x1000C8077774924);
          }
        }
        while (v10 != v9);
        uint64_t v11 = v20;
      }
      unint64_t v21 = v9;
      operator delete(v11);
    }
    if (v18 != &v19) {
      free(v18);
    }
  }
  return v5;
}

uint64_t mlir::memref::LoadOp::fold(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) == 0) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 68);
  if (!v2) {
    return 0;
  }
  char v4 = 0;
  uint64_t v5 = *(uint64_t **)(v1 + 72);
  uint64_t v6 = &v5[4 * v2];
  do
  {
    while (1)
    {
      uint64_t v13 = v5[3];
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
      if (!DefiningOp) {
        break;
      }
      if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id) {
        break;
      }
      if (!v5[3]) {
        break;
      }
      uint64_t v8 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
      if (*(_UNKNOWN **)(*(void *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
        break;
      }
      uint64_t v9 = (uint64_t *)v5[1];
      if (v9)
      {
        uint64_t *v9 = *v5;
        if (*v5) {
          *(void *)(*v5 + 8) = v5[1];
        }
      }
      v5[3] = (uint64_t)v8;
      uint64_t v10 = *v8;
      uint64_t *v5 = *v8;
      v5[1] = (uint64_t)v8;
      if (v10) {
        *(void *)(v10 + 8) = v5;
      }
      *uint64_t v8 = (uint64_t)v5;
      v5 += 4;
      char v4 = 1;
      if (v5 == v6) {
        goto LABEL_17;
      }
    }
    v5 += 4;
  }
  while (v5 != v6);
  if ((v4 & 1) == 0) {
    return 0;
  }
LABEL_17:
  if (*(_DWORD *)(*a1 + 36)) {
    uint64_t v11 = *a1 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  return mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) | 4;
}

uint64_t mlir::memref::MemorySpaceCastOp::getAsmResultNames(void *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "memspacecast", 12);
}

BOOL mlir::memref::MemorySpaceCastOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = 0;
  if (a2 == 1 && a4 == 1)
  {
    v30[3] = v4;
    v30[4] = v5;
    unint64_t v9 = mlir::TypeRange::dereference_iterator(a1, 0);
    unint64_t v10 = mlir::TypeRange::dereference_iterator(a3, 0);
    uint64_t v11 = *(void **)(*(void *)v9 + 136);
    if (v11 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      unint64_t v12 = v9;
    }
    else {
      unint64_t v12 = 0;
    }
    v30[0] = v12;
    uint64_t v13 = *(void **)(*(void *)v10 + 136);
    if (v13 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      unint64_t v14 = v10;
    }
    else {
      unint64_t v14 = 0;
    }
    if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
      unint64_t v15 = v9;
    }
    else {
      unint64_t v15 = 0;
    }
    if (v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = 0;
    }
    unint64_t v28 = v15;
    unint64_t v29 = v14;
    unint64_t v27 = v16;
    if (v11 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id
      && v13 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v30);
      if (RHS == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v29))
      {
        uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v30);
        if (RawStringData == mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v29))
        {
          uint64_t Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v30);
          uint64_t v24 = v23;
          uint64_t v25 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
          if (v24 == v26 && !memcmp(Value, v25, 8 * v24)) {
            return 1;
          }
        }
      }
    }
    else if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id {
           && v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
    }
    {
      uint64_t v19 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v28);
      return v19 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v27);
    }
    return 0;
  }
  return result;
}

uint64_t mlir::memref::MemorySpaceCastOp::fold(uint64_t a1)
{
  uint64_t v8 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v8);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::MemorySpaceCastOp,void>::id)
  {
    return 4;
  }
  uint64_t v4 = *(uint64_t **)(*(void *)a1 + 72);
  uint64_t v5 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
  uint64_t v6 = (uint64_t *)v4[1];
  if (v6)
  {
    uint64_t *v6 = *v4;
    if (*v4) {
      *(void *)(*v4 + 8) = v4[1];
    }
  }
  v4[3] = (uint64_t)v5;
  uint64_t v7 = *v5;
  uint64_t *v4 = *v5;
  v4[1] = (uint64_t)v5;
  if (v7) {
    *(void *)(v7 + 8) = v4;
  }
  uint64_t *v5 = (uint64_t)v4;
  return (*(void *)a1 - 16) | 4;
}

uint64_t mlir::memref::PrefetchOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 91;
  }
  uint64_t v8 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v9 = *((unsigned int *)v8 + 17);
    uint64_t v10 = *((void *)v8 + 9);
    uint64_t v11 = v9 - 1;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = -1;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  *(void *)&v48[0] = ", ";
  *((void *)&v48[0] + 1) = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v12, 0, v12, v11, (uint64_t)a2, v13, (uint64_t)v48);
  unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 93);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 93;
  }
  unint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v17 = (_WORD *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v17 > 1uLL)
  {
    *long long v17 = 8236;
    *((void *)v16 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v16, ", ", 2uLL);
  }
  unint64_t v18 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v18 = 0;
  }
  *(void *)&v48[0] = *(void *)(v18 + 8);
  BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)v48);
  uint64_t v20 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v21 = (llvm::raw_ostream *)v20;
  if (Value) {
    unint64_t v22 = "write";
  }
  else {
    unint64_t v22 = "read";
  }
  if (Value) {
    size_t v23 = 5;
  }
  else {
    size_t v23 = 4;
  }
  uint64_t v25 = *(void *)(v20 + 24);
  uint64_t v24 = *(void **)(v20 + 32);
  if (v23 <= v25 - (uint64_t)v24)
  {
    memcpy(v24, v22, v23);
    *((void *)v21 + 4) += v23;
  }
  else
  {
    llvm::raw_ostream::write(v21, v22, v23);
  }
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = *((void *)v26 + 4);
  if ((unint64_t)(*((void *)v26 + 3) - v27) > 0xA)
  {
    *(_DWORD *)(v27 + 7) = 1014592617;
    *(void *)uint64_t v27 = *(void *)", locality<";
    *((void *)v26 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v26, ", locality<", 0xBuLL);
  }
  unint64_t v28 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v28 = 0;
  }
  uint64_t v47 = *(void *)(v28 + 16);
  mlir::IntegerAttr::getValue((uint64_t)&v47, (llvm::APInt *)v48);
  if (DWORD2(v48[0]) > 0x40)
  {
    unint64_t v29 = **(_DWORD **)&v48[0];
    MEMORY[0x21667D390]();
  }
  else
  {
    unint64_t v29 = LODWORD(v48[0]);
  }
  uint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v30, v29);
  long long v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v32 = *((void *)v31 + 4);
  if ((unint64_t)(*((void *)v31 + 3) - v32) > 2)
  {
    *(unsigned char *)(v32 + 2) = 32;
    *(_WORD *)uint64_t v32 = 11326;
    *((void *)v31 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v31, ">, ", 3uLL);
  }
  *(void *)&v48[0] = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  BOOL v33 = mlir::BoolAttr::getValue((mlir::BoolAttr *)v48);
  uint64_t v34 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v35 = (llvm::raw_ostream *)v34;
  if (v33) {
    unint64_t v36 = "data";
  }
  else {
    unint64_t v36 = "instr";
  }
  if (v33) {
    size_t v37 = 4;
  }
  else {
    size_t v37 = 5;
  }
  uint64_t v39 = *(void *)(v34 + 24);
  uint64_t v38 = *(void **)(v34 + 32);
  if (v37 <= v39 - (uint64_t)v38)
  {
    memcpy(v38, v36, v37);
    *((void *)v35 + 4) += v37;
    int64_t v40 = *this;
    if (*((unsigned char *)*this + 47)) {
      goto LABEL_45;
    }
  }
  else
  {
    llvm::raw_ostream::write(v35, v36, v37);
    int64_t v40 = *this;
    if (*((unsigned char *)*this + 47))
    {
LABEL_45:
      *(void *)&v48[0] = mlir::Operation::getAttrDictionary(v40);
      int64_t v41 = (mlir::ArrayAttr *)v48;
      goto LABEL_48;
    }
  }
  int64_t v41 = (mlir::Operation *)((char *)v40 + 56);
LABEL_48:
  uint64_t v42 = mlir::ArrayAttr::getValue(v41);
  v48[0] = xmmword_26418CFA8;
  v48[1] = *(_OWORD *)&off_26418CFB8;
  v48[2] = xmmword_26418CFC8;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)a2 + 192))(a2, v42, v43, v48, 3);
  __int16 v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v45 = *((void *)v44 + 4);
  if ((unint64_t)(*((void *)v44 + 3) - v45) > 2)
  {
    *(unsigned char *)(v45 + 2) = 32;
    *(_WORD *)uint64_t v45 = 14880;
    *((void *)v44 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v44, " : ", 3uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::PrefetchOp::parse(mlir::AsmParser *a1, mlir::Attribute *a2)
{
  v64[16] = *MEMORY[0x263EF8340];
  memset(v51, 0, 24);
  int64_t v62 = (char *)v64;
  uint64_t v63 = 0x400000000;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v4 = (mlir::IndexType **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v4, v5);
  uint64_t v7 = (mlir::Builder *)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v7, 0x20u);
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void *, uint64_t))(*(void *)a1 + 672))(a1, v51, 1)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, char **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v62, 2, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 120))(a1)|| !mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v47)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 120))(a1)|| (__int16 v55 = 257, !(*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, const char **))(*(void *)a1 + 368))(a1, "locality", 8, &v52))|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 152))(a1)|| !mlir::AsmParser::parseAttribute<mlir::IntegerAttr>((uint64_t)a1, &v50, IntegerType,
                           (uint64_t)"localityHint",
                           12,
                           (uint64_t)a2 + 112)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 168))(a1)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 120))(a1)
    || !mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v45)
    || !mlir::AsmParser::parseColonType<mlir::MemRefType>((uint64_t)a1, &v49)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v51, v49, (uint64_t)a2 + 16))
  {
LABEL_32:
    uint64_t v12 = 0;
    goto LABEL_33;
  }
  if (v63)
  {
    uint64_t v9 = v62;
    uint64_t v10 = 32 * v63;
    while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, IndexType, (uint64_t)a2 + 16))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10) {
        goto LABEL_18;
      }
    }
    goto LABEL_32;
  }
LABEL_18:
  if (v48 == 5)
  {
    if (*(_DWORD *)v47 != 1953067639 || *(unsigned char *)(v47 + 4) != 101)
    {
LABEL_21:
      uint64_t v11 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 16))(a1);
      uint64_t v42 = "rw specifier has to be 'read' or 'write'";
      __int16 v44 = 259;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)a1 + 24))(&v52, a1, v11, &v42);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v52);
      if (v52) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v52);
      }
      if (v61)
      {
        uint64_t v13 = __p;
        if (__p)
        {
          unint64_t v14 = v60;
          unint64_t v15 = __p;
          if (v60 != __p)
          {
            do
              unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            unint64_t v15 = __p;
          }
          int64_t v60 = v13;
          operator delete(v15);
        }
        unint64_t v16 = v57;
        if (!v57) {
          goto LABEL_71;
        }
        long long v17 = v58;
        unint64_t v18 = v57;
        if (v58 == v57)
        {
LABEL_70:
          BOOL v58 = v16;
          operator delete(v18);
LABEL_71:
          if (v54 != &v56) {
            free(v54);
          }
          goto LABEL_33;
        }
        do
        {
          uint64_t v21 = *--v17;
          uint64_t v20 = v21;
          *long long v17 = 0;
          if (v21) {
            MEMORY[0x21667D390](v20, 0x1000C8077774924);
          }
        }
        while (v17 != v16);
LABEL_69:
        unint64_t v18 = v57;
        goto LABEL_70;
      }
      goto LABEL_33;
    }
  }
  else if (v48 != 4 || *(_DWORD *)v47 != 1684104562)
  {
    goto LABEL_21;
  }
  size_t v23 = (mlir::BoolAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
  uint64_t v25 = (mlir::MLIRContext *)(v48 == 5 && *(_DWORD *)v47 == 1953067639 && *(unsigned char *)(v47 + 4) == 101);
  uint64_t BoolAttr = mlir::Builder::getBoolAttr(v23, v25);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  __int16 v55 = 261;
  unint64_t v52 = "isWrite";
  uint64_t v53 = 7;
  uint64_t v28 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v52);
  ZinMirCacheTensors::ZinMirCacheTensors(&v42, v28, BoolAttr);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v42, v43);
  if (v46 != 5)
  {
    if (v46 != 4 || *(_DWORD *)v45 != 1635017060) {
      goto LABEL_55;
    }
LABEL_78:
    size_t v37 = (mlir::BoolAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
    if (v46 == 4) {
      uint64_t v38 = (mlir::MLIRContext *)(*(_DWORD *)v45 == 1635017060);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = mlir::Builder::getBoolAttr(v37, v38);
    int64_t v40 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
    __int16 v55 = 261;
    unint64_t v52 = "isDataCache";
    uint64_t v53 = 11;
    uint64_t v41 = mlir::StringAttr::get(v40, (mlir::MLIRContext *)&v52);
    ZinMirCacheTensors::ZinMirCacheTensors(&v42, v41, v39);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v42, v43);
    uint64_t v12 = 1;
    goto LABEL_33;
  }
  if (*(_DWORD *)v45 == 1953721961 && *(unsigned char *)(v45 + 4) == 114) {
    goto LABEL_78;
  }
LABEL_55:
  uint64_t v29 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 16))(a1);
  uint64_t v42 = "cache type has to be 'data' or 'instr'";
  __int16 v44 = 259;
  (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(void *)a1 + 24))(&v52, a1, v29, &v42);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v52);
  if (v52) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v52);
  }
  if (v61)
  {
    uint64_t v30 = __p;
    if (__p)
    {
      long long v31 = v60;
      uint64_t v32 = __p;
      if (v60 != __p)
      {
        do
          long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      int64_t v60 = v30;
      operator delete(v32);
    }
    unint64_t v16 = v57;
    if (!v57) {
      goto LABEL_71;
    }
    BOOL v33 = v58;
    unint64_t v18 = v57;
    if (v58 == v57) {
      goto LABEL_70;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v16);
    goto LABEL_69;
  }
LABEL_33:
  if (v62 != (char *)v64) {
    free(v62);
  }
  return v12;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v26, a3)) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v13 = v26;
  }
  else {
    uint64_t v13 = 0;
  }
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    uint64_t v24 = "invalid kind of attribute specified";
    __int16 v25 = 259;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v27, a1, v12, &v24);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    }
    if (v34)
    {
      unint64_t v16 = __p;
      if (__p)
      {
        long long v17 = v33;
        unint64_t v18 = __p;
        if (v33 != __p)
        {
          do
            long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          unint64_t v18 = __p;
        }
        BOOL v33 = v16;
        operator delete(v18);
      }
      uint64_t v19 = v30;
      if (v30)
      {
        uint64_t v20 = v31;
        uint64_t v21 = v30;
        if (v31 != v30)
        {
          do
          {
            uint64_t v23 = *--v20;
            uint64_t v22 = v23;
            *uint64_t v20 = 0;
            if (v23) {
              MEMORY[0x21667D390](v22, 0x1000C8077774924);
            }
          }
          while (v20 != v19);
          uint64_t v21 = v30;
        }
        long long v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29) {
        free(v28);
      }
    }
  }
  return v14;
}

uint64_t mlir::AsmParser::parseColonType<mlir::MemRefType>(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v18)) {
    return 0;
  }
  uint64_t v5 = v18;
  if (*(_UNKNOWN **)(*(void *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  unint64_t v16 = "invalid kind of type specified";
  __int16 v17 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v19, a1, v4, &v16);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  }
  if (v26)
  {
    uint64_t v8 = __p;
    if (__p)
    {
      uint64_t v9 = v25;
      uint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      __int16 v25 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v22;
    if (v22)
    {
      uint64_t v12 = v23;
      uint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v15 = *--v12;
          uint64_t v14 = v15;
          *uint64_t v12 = 0;
          if (v15) {
            MEMORY[0x21667D390](v14, 0x1000C8077774924);
          }
        }
        while (v12 != v11);
        uint64_t v13 = v22;
      }
      uint64_t v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t mlir::memref::PrefetchOp::verify(mlir::memref::PrefetchOp *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    uint64_t v3 = *(unsigned int *)(v2 + 68);
  }
  else {
    uint64_t v3 = 0;
  }
  v17[0] = *(void *)(*(void *)(*(void *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v17);
  if (v4 + 1 == v3) {
    return 1;
  }
  uint64_t v15 = (void **)"too few indices";
  __int16 v16 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v15, (uint64_t)v17);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v17[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
  }
  if (v24)
  {
    uint64_t v6 = __p;
    if (__p)
    {
      uint64_t v7 = v23;
      uint64_t v8 = __p;
      if (v23 != __p)
      {
        do
          uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        uint64_t v8 = __p;
      }
      uint64_t v23 = v6;
      operator delete(v8);
    }
    uint64_t v9 = v20;
    if (v20)
    {
      uint64_t v10 = v21;
      uint64_t v11 = v20;
      if (v21 != v20)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          *uint64_t v10 = 0;
          if (v13) {
            MEMORY[0x21667D390](v12, 0x1000C8077774924);
          }
        }
        while (v10 != v9);
        uint64_t v11 = v20;
      }
      uint64_t v21 = v9;
      operator delete(v11);
    }
    if (v18 != &v19) {
      free(v18);
    }
  }
  return v5;
}

unint64_t mlir::memref::RankOp::fold(uint64_t a1)
{
  uint64_t v2 = (void *)(*(void *)(*(void *)(*(void *)(*(void *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    uint64_t v9 = v2;
    uint64_t v10 = v3;
    if (v2 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v9))
    {
      uint64_t Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
      uint64_t v6 = mlir::IndexType::get(Context, v5);
      mlir::ShapedType::getShape((mlir::ShapedType *)&v9);
      return mlir::IntegerAttr::get(v6, v7) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  return 0;
}

uint64_t mlir::memref::ReinterpretCastOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v4 = *(void *)a1 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);

  return a2(a3, NextResultAtOffset, "reinterpret_cast", 16);
}

uint64_t mlir::memref::ReinterpretCastOp::verify(mlir::memref::ReinterpretCastOp *this)
{
  uint64_t v220 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v202 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *(_DWORD *)(v2 + 36);
  uint64_t v4 = v2 - 16;
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v201 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t MemorySpace = mlir::BaseMemRefType::getMemorySpace((mlir::BaseMemRefType *)&v202);
  if (MemorySpace != ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v201))
  {
    uint64_t v206 = "different memory spaces specified for source type ";
    __int16 v209 = 259;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)&v206, (uint64_t)v210);
    if (v210[0])
    {
      unint64_t v7 = &v196;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v196, v202);
      uint64_t v8 = (char *)v211;
      if (v212 >= v213)
      {
        unint64_t v151 = v212 + 1;
        if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
        {
          int64_t v178 = (char *)&v196 - (unsigned char *)v211;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v151, 24);
          uint64_t v8 = (char *)v211;
          unint64_t v7 = (const char **)((char *)v211 + v178);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v151, 24);
          unint64_t v7 = &v196;
          uint64_t v8 = (char *)v211;
        }
      }
      uint64_t v9 = &v8[24 * v212];
      long long v10 = *(_OWORD *)v7;
      *((void *)v9 + 2) = v7[2];
      *(_OWORD *)uint64_t v9 = v10;
      uint64_t v11 = ++v212;
      if (v210[0])
      {
        LODWORD(v196) = 3;
        uint64_t v197 = " and result memref type ";
        uint64_t v198 = 24;
        uint64_t v12 = &v196;
        uint64_t v13 = (char *)v211;
        if (v11 >= v213)
        {
          unint64_t v152 = v11 + 1;
          BOOL v153 = (char *)v211 + 24 * v11 > (char *)&v196;
          if (v211 <= &v196 && v153)
          {
            int64_t v179 = (char *)&v196 - (unsigned char *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v152, 24);
            uint64_t v13 = (char *)v211;
            uint64_t v12 = (const char **)((char *)v211 + v179);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v152, 24);
            uint64_t v12 = &v196;
            uint64_t v13 = (char *)v211;
          }
        }
        uint64_t v14 = &v13[24 * v212];
        long long v15 = *(_OWORD *)v12;
        *((void *)v14 + 2) = v12[2];
        *(_OWORD *)uint64_t v14 = v15;
        ++v212;
        if (v210[0])
        {
          __int16 v16 = &v196;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v196, v201);
          __int16 v17 = (char *)v211;
          if (v212 >= v213)
          {
            unint64_t v154 = v212 + 1;
            if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
            {
              int64_t v180 = (char *)&v196 - (unsigned char *)v211;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v154, 24);
              __int16 v17 = (char *)v211;
              __int16 v16 = (const char **)((char *)v211 + v180);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v154, 24);
              __int16 v16 = &v196;
              __int16 v17 = (char *)v211;
            }
          }
          uint64_t v18 = &v17[24 * v212];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = v16[2];
          *(_OWORD *)uint64_t v18 = v19;
          ++v212;
        }
      }
    }
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
    if (v210[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
    }
    if (!v219) {
      return v20;
    }
    uint64_t v21 = __p;
    if (__p)
    {
      uint64_t v22 = v218;
      uint64_t v23 = __p;
      if (v218 != __p)
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        uint64_t v23 = __p;
      }
      uint64_t v218 = v21;
      operator delete(v23);
    }
    char v24 = v215;
    if (!v215) {
      goto LABEL_85;
    }
    uint64_t v25 = v216;
    char v26 = v215;
    if (v216 == v215) {
      goto LABEL_84;
    }
    do
    {
      uint64_t v28 = *--v25;
      uint64_t v27 = v28;
      void *v25 = 0;
      if (v28) {
        MEMORY[0x21667D390](v27, 0x1000C8077774924);
      }
    }
    while (v25 != v24);
    goto LABEL_83;
  }
  Elementuint64_t Type = mlir::BaseMemRefType::getElementType((mlir::BaseMemRefType *)&v202);
  if (ElementType != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v201))
  {
    uint64_t v206 = "different element types specified for source type ";
    __int16 v209 = 259;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)&v206, (uint64_t)v210);
    if (v210[0])
    {
      uint64_t v30 = &v196;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v196, v202);
      long long v31 = (char *)v211;
      if (v212 >= v213)
      {
        unint64_t v155 = v212 + 1;
        if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
        {
          int64_t v181 = (char *)&v196 - (unsigned char *)v211;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v155, 24);
          long long v31 = (char *)v211;
          uint64_t v30 = (const char **)((char *)v211 + v181);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v155, 24);
          uint64_t v30 = &v196;
          long long v31 = (char *)v211;
        }
      }
      uint64_t v32 = &v31[24 * v212];
      long long v33 = *(_OWORD *)v30;
      *((void *)v32 + 2) = v30[2];
      *(_OWORD *)uint64_t v32 = v33;
      uint64_t v34 = ++v212;
      if (v210[0])
      {
        LODWORD(v196) = 3;
        uint64_t v197 = " and result memref type ";
        uint64_t v198 = 24;
        uint64_t v35 = &v196;
        unint64_t v36 = (char *)v211;
        if (v34 >= v213)
        {
          unint64_t v156 = v34 + 1;
          BOOL v157 = (char *)v211 + 24 * v34 > (char *)&v196;
          if (v211 <= &v196 && v157)
          {
            int64_t v182 = (char *)&v196 - (unsigned char *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v156, 24);
            unint64_t v36 = (char *)v211;
            uint64_t v35 = (const char **)((char *)v211 + v182);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v156, 24);
            uint64_t v35 = &v196;
            unint64_t v36 = (char *)v211;
          }
        }
        size_t v37 = &v36[24 * v212];
        long long v38 = *(_OWORD *)v35;
        *((void *)v37 + 2) = v35[2];
        *(_OWORD *)size_t v37 = v38;
        ++v212;
        if (v210[0])
        {
          uint64_t v39 = &v196;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v196, v201);
          int64_t v40 = (char *)v211;
          if (v212 >= v213)
          {
            unint64_t v158 = v212 + 1;
            if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
            {
              int64_t v183 = (char *)&v196 - (unsigned char *)v211;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v158, 24);
              int64_t v40 = (char *)v211;
              uint64_t v39 = (const char **)((char *)v211 + v183);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v158, 24);
              uint64_t v39 = &v196;
              int64_t v40 = (char *)v211;
            }
          }
          uint64_t v41 = &v40[24 * v212];
          long long v42 = *(_OWORD *)v39;
          *((void *)v41 + 2) = v39[2];
          *(_OWORD *)uint64_t v41 = v42;
          ++v212;
        }
      }
    }
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
    if (v210[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
    }
    if (!v219) {
      return v20;
    }
    uint64_t v43 = __p;
    if (__p)
    {
      __int16 v44 = v218;
      uint64_t v45 = __p;
      if (v218 != __p)
      {
        do
          __int16 v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
        while (v44 != v43);
        uint64_t v45 = __p;
      }
      uint64_t v218 = v43;
      operator delete(v45);
    }
    char v24 = v215;
    if (!v215) {
      goto LABEL_85;
    }
    uint64_t v46 = v216;
    char v26 = v215;
    if (v216 == v215) {
      goto LABEL_84;
    }
    do
    {
      uint64_t v48 = *--v46;
      uint64_t v47 = v48;
      *uint64_t v46 = 0;
      if (v48) {
        MEMORY[0x21667D390](v47, 0x1000C8077774924);
      }
    }
    while (v46 != v24);
    goto LABEL_83;
  }
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v201);
  uint64_t v51 = v50;
  unint64_t v52 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v52 = 0;
  }
  v210[0] = *(void *)(v52 + 8);
  uint64_t v53 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v210);
  if (!v51)
  {
LABEL_88:
    uint64_t v200 = 0;
    uint64_t v206 = v208;
    uint64_t v207 = 0x400000000;
    if (mlir::getStridesAndOffset(v201, (uint64_t)&v206, &v200))
    {
      v210[0] = *(void *)(*(void *)this
                          + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                          + 64);
      uint64_t v94 = *(void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v210);
      uint64_t v195 = v94;
      if (v200 != 0x8000000000000000 && v94 != 0x8000000000000000 && v200 != v94)
      {
        uint64_t v196 = "expected result type with offset = ";
        __int16 v199 = 259;
        mlir::OpState::emitError((uint64_t *)this, (uint64_t)&v196, (uint64_t)v210);
        uint64_t v95 = mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)v210, &v195);
        uint64_t v96 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v95, " instead of ");
        uint64_t v97 = mlir::InFlightDiagnostic::operator<<<long long &>(v96, &v200);
        uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v97);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v210);
        goto LABEL_150;
      }
      unint64_t v110 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
      if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
        unint64_t v110 = 0;
      }
      v210[0] = *(void *)(v110 + 16);
      uint64_t v111 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v210);
      if (!v207)
      {
LABEL_145:
        uint64_t v20 = 1;
        goto LABEL_150;
      }
      uint64_t v112 = v111;
      unsigned int v113 = 0;
      unsigned int v114 = v206;
      uint64_t v115 = 8 * v207;
      while (1)
      {
        uint64_t v116 = *(void *)&v206[8 * (void)v113];
        if (v116 != 0x8000000000000000)
        {
          uint64_t v117 = *(void *)(v111 + 8 * (void)v113);
          if (v117 != 0x8000000000000000 && v116 != v117) {
            break;
          }
        }
        ++v113;
        v115 -= 8;
        if (!v115) {
          goto LABEL_145;
        }
      }
      uint64_t v196 = "expected result type with stride = ";
      __int16 v199 = 259;
      mlir::OpState::emitError((uint64_t *)this, (uint64_t)&v196, (uint64_t)v210);
      if (v210[0])
      {
        int64_t v119 = *(const char **)(v112 + 8 * (void)v113);
        int v203 = 2;
        uint64_t v204 = v119;
        char v120 = &v203;
        uint64_t v121 = (char *)v211;
        if (v212 >= v213)
        {
          unint64_t v165 = v212 + 1;
          if (v211 <= &v203 && (char *)v211 + 24 * v212 > (char *)&v203)
          {
            int64_t v188 = (char *)&v203 - (unsigned char *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v165, 24);
            uint64_t v121 = (char *)v211;
            char v120 = (int *)((char *)v211 + v188);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v165, 24);
            char v120 = &v203;
            uint64_t v121 = (char *)v211;
          }
        }
        int64_t v122 = &v121[24 * v212];
        long long v123 = *(_OWORD *)v120;
        *((void *)v122 + 2) = *((void *)v120 + 2);
        *(_OWORD *)int64_t v122 = v123;
        uint64_t v124 = ++v212;
        if (v210[0])
        {
          int v203 = 3;
          uint64_t v204 = " instead of ";
          uint64_t v205 = 12;
          uint64_t v125 = &v203;
          uint64_t v126 = (char *)v211;
          if (v124 >= v213)
          {
            unint64_t v168 = v124 + 1;
            BOOL v169 = (char *)v211 + 24 * v124 > (char *)&v203;
            if (v211 <= &v203 && v169)
            {
              int64_t v190 = (char *)&v203 - (unsigned char *)v211;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v168, 24);
              uint64_t v126 = (char *)v211;
              uint64_t v125 = (int *)((char *)v211 + v190);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v168, 24);
              uint64_t v125 = &v203;
              uint64_t v126 = (char *)v211;
            }
          }
          __int16 v127 = &v126[24 * v212];
          long long v128 = *(_OWORD *)v125;
          *((void *)v127 + 2) = *((void *)v125 + 2);
          *(_OWORD *)__int16 v127 = v128;
          uint64_t v129 = ++v212;
          if (v210[0])
          {
            uint64_t v130 = *(const char **)&v114[8 * (void)v113];
            int v203 = 2;
            uint64_t v204 = v130;
            unint64_t v131 = &v203;
            uint64_t v132 = (char *)v211;
            if (v129 >= v213)
            {
              unint64_t v172 = v129 + 1;
              BOOL v173 = (char *)v211 + 24 * v129 > (char *)&v203;
              if (v211 <= &v203 && v173)
              {
                int64_t v192 = (char *)&v203 - (unsigned char *)v211;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v172, 24);
                uint64_t v132 = (char *)v211;
                unint64_t v131 = (int *)((char *)v211 + v192);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v172, 24);
                unint64_t v131 = &v203;
                uint64_t v132 = (char *)v211;
              }
            }
            uint64_t v133 = &v132[24 * v212];
            long long v134 = *(_OWORD *)v131;
            *((void *)v133 + 2) = *((void *)v131 + 2);
            *(_OWORD *)uint64_t v133 = v134;
            uint64_t v135 = ++v212;
            if (v210[0])
            {
              int v203 = 3;
              uint64_t v204 = " in dim = ";
              uint64_t v205 = 10;
              unsigned int v136 = &v203;
              uint64_t v137 = (char *)v211;
              if (v135 >= v213)
              {
                unint64_t v174 = v135 + 1;
                BOOL v175 = (char *)v211 + 24 * v135 > (char *)&v203;
                if (v211 <= &v203 && v175)
                {
                  int64_t v193 = (char *)&v203 - (unsigned char *)v211;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v174, 24);
                  uint64_t v137 = (char *)v211;
                  unsigned int v136 = (int *)((char *)v211 + v193);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v174, 24);
                  unsigned int v136 = &v203;
                  uint64_t v137 = (char *)v211;
                }
              }
              uint64_t v138 = &v137[24 * v212];
              long long v139 = *(_OWORD *)v136;
              *((void *)v138 + 2) = *((void *)v136 + 2);
              *(_OWORD *)uint64_t v138 = v139;
              uint64_t v140 = ++v212;
              if (v210[0])
              {
                int v203 = 5;
                uint64_t v204 = v113;
                int v141 = &v203;
                char v142 = (char *)v211;
                if (v140 >= v213)
                {
                  unint64_t v176 = v140 + 1;
                  BOOL v177 = (char *)v211 + 24 * v140 > (char *)&v203;
                  if (v211 <= &v203 && v177)
                  {
                    int64_t v194 = (char *)&v203 - (unsigned char *)v211;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v176, 24);
                    char v142 = (char *)v211;
                    int v141 = (int *)((char *)v211 + v194);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v176, 24);
                    int v141 = &v203;
                    char v142 = (char *)v211;
                  }
                }
                uint64_t v143 = &v142[24 * v212];
                long long v144 = *(_OWORD *)v141;
                *((void *)v143 + 2) = *((void *)v141 + 2);
                *(_OWORD *)uint64_t v143 = v144;
                ++v212;
              }
            }
          }
        }
      }
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
      if (v210[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
      }
      if (v219)
      {
        uint64_t v145 = __p;
        if (__p)
        {
          unint64_t v146 = v218;
          uint64_t v147 = __p;
          if (v218 != __p)
          {
            do
              unint64_t v146 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v146 - 1);
            while (v146 != v145);
            uint64_t v147 = __p;
          }
          uint64_t v218 = v145;
          operator delete(v147);
        }
        __int16 v105 = v215;
        if (!v215) {
          goto LABEL_148;
        }
        unint64_t v148 = v216;
        uint64_t v107 = v215;
        if (v216 == v215)
        {
LABEL_147:
          uint64_t v216 = v105;
          operator delete(v107);
LABEL_148:
          if (v211 != v214) {
            free(v211);
          }
          goto LABEL_150;
        }
        do
        {
          uint64_t v150 = *--v148;
          uint64_t v149 = v150;
          *unint64_t v148 = 0;
          if (v150) {
            MEMORY[0x21667D390](v149, 0x1000C8077774924);
          }
        }
        while (v148 != v105);
LABEL_146:
        uint64_t v107 = v215;
        goto LABEL_147;
      }
    }
    else
    {
      uint64_t v196 = "expected result type to have strided layout but found ";
      __int16 v199 = 259;
      mlir::OpState::emitError((uint64_t *)this, (uint64_t)&v196, (uint64_t)v210);
      if (v210[0])
      {
        int64_t v98 = &v203;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v203, v201);
        int64_t v99 = (char *)v211;
        if (v212 >= v213)
        {
          unint64_t v159 = v212 + 1;
          if (v211 <= &v203 && (char *)v211 + 24 * v212 > (char *)&v203)
          {
            int64_t v184 = (char *)&v203 - (unsigned char *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v159, 24);
            int64_t v99 = (char *)v211;
            int64_t v98 = (int *)((char *)v211 + v184);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v159, 24);
            int64_t v98 = &v203;
            int64_t v99 = (char *)v211;
          }
        }
        int64_t v100 = &v99[24 * v212];
        long long v101 = *(_OWORD *)v98;
        *((void *)v100 + 2) = *((void *)v98 + 2);
        *(_OWORD *)int64_t v100 = v101;
        ++v212;
      }
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
      if (v210[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
      }
      if (v219)
      {
        uint64_t v102 = __p;
        if (__p)
        {
          uint64_t v103 = v218;
          unsigned int v104 = __p;
          if (v218 != __p)
          {
            do
              uint64_t v103 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v103 - 1);
            while (v103 != v102);
            unsigned int v104 = __p;
          }
          uint64_t v218 = v102;
          operator delete(v104);
        }
        __int16 v105 = v215;
        if (!v215) {
          goto LABEL_148;
        }
        uint64_t v106 = v216;
        uint64_t v107 = v215;
        if (v216 == v215) {
          goto LABEL_147;
        }
        do
        {
          uint64_t v109 = *--v106;
          uint64_t v108 = v109;
          *uint64_t v106 = 0;
          if (v109) {
            MEMORY[0x21667D390](v108, 0x1000C8077774924);
          }
        }
        while (v106 != v105);
        goto LABEL_146;
      }
    }
LABEL_150:
    BOOL v92 = (void *)v206;
    if (v206 == v208) {
      return v20;
    }
    goto LABEL_86;
  }
  uint64_t v54 = v53;
  __int16 v55 = 0;
  uint64_t v56 = 8 * v51;
  while (1)
  {
    uint64_t v57 = *(void *)(Value + 8 * (void)v55);
    if (v57 != 0x8000000000000000)
    {
      uint64_t v58 = *(void *)(v53 + 8 * (void)v55);
      if (v58 != 0x8000000000000000 && v57 != v58) {
        break;
      }
    }
    ++v55;
    v56 -= 8;
    if (!v56) {
      goto LABEL_88;
    }
  }
  uint64_t v206 = "expected result type with size = ";
  __int16 v209 = 259;
  mlir::OpState::emitError((uint64_t *)this, (uint64_t)&v206, (uint64_t)v210);
  if (v210[0])
  {
    int64_t v60 = *(const char **)(v54 + 8 * (void)v55);
    LODWORD(v196) = 2;
    uint64_t v197 = v60;
    char v61 = &v196;
    int64_t v62 = (char *)v211;
    if (v212 >= v213)
    {
      unint64_t v160 = v212 + 1;
      if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
      {
        int64_t v185 = (char *)&v196 - (unsigned char *)v211;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v160, 24);
        int64_t v62 = (char *)v211;
        char v61 = (const char **)((char *)v211 + v185);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v160, 24);
        char v61 = &v196;
        int64_t v62 = (char *)v211;
      }
    }
    uint64_t v63 = &v62[24 * v212];
    long long v64 = *(_OWORD *)v61;
    *((void *)v63 + 2) = v61[2];
    *(_OWORD *)uint64_t v63 = v64;
    uint64_t v65 = ++v212;
    if (v210[0])
    {
      LODWORD(v196) = 3;
      uint64_t v197 = " instead of ";
      uint64_t v198 = 12;
      uint64_t v66 = &v196;
      uint64_t v67 = (char *)v211;
      if (v65 >= v213)
      {
        unint64_t v161 = v65 + 1;
        BOOL v162 = (char *)v211 + 24 * v65 > (char *)&v196;
        if (v211 <= &v196 && v162)
        {
          int64_t v186 = (char *)&v196 - (unsigned char *)v211;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v161, 24);
          uint64_t v67 = (char *)v211;
          uint64_t v66 = (const char **)((char *)v211 + v186);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v161, 24);
          uint64_t v66 = &v196;
          uint64_t v67 = (char *)v211;
        }
      }
      int v68 = &v67[24 * v212];
      long long v69 = *(_OWORD *)v66;
      *((void *)v68 + 2) = v66[2];
      *(_OWORD *)int v68 = v69;
      uint64_t v70 = ++v212;
      if (v210[0])
      {
        uint64_t v71 = *(const char **)(Value + 8 * (void)v55);
        LODWORD(v196) = 2;
        uint64_t v197 = v71;
        int32x4_t v72 = &v196;
        int64x2_t v73 = (char *)v211;
        if (v70 >= v213)
        {
          unint64_t v163 = v70 + 1;
          BOOL v164 = (char *)v211 + 24 * v70 > (char *)&v196;
          if (v211 <= &v196 && v164)
          {
            int64_t v187 = (char *)&v196 - (unsigned char *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v163, 24);
            int64x2_t v73 = (char *)v211;
            int32x4_t v72 = (const char **)((char *)v211 + v187);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v163, 24);
            int32x4_t v72 = &v196;
            int64x2_t v73 = (char *)v211;
          }
        }
        unsigned int v74 = &v73[24 * v212];
        long long v75 = *(_OWORD *)v72;
        *((void *)v74 + 2) = v72[2];
        *(_OWORD *)unsigned int v74 = v75;
        uint64_t v76 = ++v212;
        if (v210[0])
        {
          LODWORD(v196) = 3;
          uint64_t v197 = " in dim = ";
          uint64_t v198 = 10;
          uint64_t v77 = &v196;
          uint64_t v78 = (char *)v211;
          if (v76 >= v213)
          {
            unint64_t v166 = v76 + 1;
            BOOL v167 = (char *)v211 + 24 * v76 > (char *)&v196;
            if (v211 <= &v196 && v167)
            {
              int64_t v189 = (char *)&v196 - (unsigned char *)v211;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v166, 24);
              uint64_t v78 = (char *)v211;
              uint64_t v77 = (const char **)((char *)v211 + v189);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v166, 24);
              uint64_t v77 = &v196;
              uint64_t v78 = (char *)v211;
            }
          }
          long long v79 = &v78[24 * v212];
          long long v80 = *(_OWORD *)v77;
          *((void *)v79 + 2) = v77[2];
          *(_OWORD *)long long v79 = v80;
          uint64_t v81 = ++v212;
          if (v210[0])
          {
            LODWORD(v196) = 5;
            uint64_t v197 = v55;
            uint64_t v82 = &v196;
            unint64_t v83 = (char *)v211;
            if (v81 >= v213)
            {
              unint64_t v170 = v81 + 1;
              BOOL v171 = (char *)v211 + 24 * v81 > (char *)&v196;
              if (v211 <= &v196 && v171)
              {
                int64_t v191 = (char *)&v196 - (unsigned char *)v211;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v170, 24);
                unint64_t v83 = (char *)v211;
                uint64_t v82 = (const char **)((char *)v211 + v191);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v170, 24);
                uint64_t v82 = &v196;
                unint64_t v83 = (char *)v211;
              }
            }
            unint64_t v84 = &v83[24 * v212];
            long long v85 = *(_OWORD *)v82;
            *((void *)v84 + 2) = v82[2];
            *(_OWORD *)unint64_t v84 = v85;
            ++v212;
          }
        }
      }
    }
  }
  uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
  if (v210[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
  }
  if (!v219) {
    return v20;
  }
  unint64_t v86 = __p;
  if (__p)
  {
    unint64_t v87 = v218;
    BOOL v88 = __p;
    if (v218 != __p)
    {
      do
        unint64_t v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
      while (v87 != v86);
      BOOL v88 = __p;
    }
    uint64_t v218 = v86;
    operator delete(v88);
  }
  char v24 = v215;
  if (v215)
  {
    unint64_t v89 = v216;
    char v26 = v215;
    if (v216 == v215) {
      goto LABEL_84;
    }
    do
    {
      uint64_t v91 = *--v89;
      uint64_t v90 = v91;
      *unint64_t v89 = 0;
      if (v91) {
        MEMORY[0x21667D390](v90, 0x1000C8077774924);
      }
    }
    while (v89 != v24);
LABEL_83:
    char v26 = v215;
LABEL_84:
    uint64_t v216 = v24;
    operator delete(v26);
  }
LABEL_85:
  BOOL v92 = v211;
  if (v211 != v214) {
LABEL_86:
  }
    free(v92);
  return v20;
}

uint64_t mlir::memref::ReinterpretCastOp::getStaticSizes(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  return mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v3);
}

uint64_t mlir::memref::ReinterpretCastOp::getStaticOffsets(mlir::memref::ReinterpretCastOp *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  return mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v2);
}

uint64_t mlir::InFlightDiagnostic::operator<<<long long &>(uint64_t a1, uint64_t *a2)
{
  if (*(void *)a1)
  {
    uint64_t v3 = a1 + 24;
    unint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *a2;
    int v14 = 2;
    uint64_t v15 = v5;
    uint64_t v6 = *(unsigned int *)(a1 + 32);
    unint64_t v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v11 = v6 + 1;
      BOOL v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        uint64_t v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        unint64_t v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        unint64_t v7 = &v14;
      }
    }
    uint64_t v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    long long v9 = *(_OWORD *)v7;
    *(void *)(v8 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::memref::ReinterpretCastOp::getStaticStrides(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  return mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v3);
}

uint64_t mlir::memref::ReinterpretCastOp::fold(uint64_t a1)
{
  v29[4] = *MEMORY[0x263EF8340];
  uint64_t v25 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v25);
  if (DefiningOp
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ReinterpretCastOp,void>::id
    || (uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v25)) != 0
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
  {
    uint64_t v13 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
    if (!v13) {
      goto LABEL_22;
    }
LABEL_36:
    uint64_t v21 = *(uint64_t **)(*(void *)a1 + 72);
    uint64_t v22 = (uint64_t *)v21[1];
    if (v22)
    {
      *uint64_t v22 = *v21;
      if (*v21) {
        *(void *)(*v21 + 8) = v21[1];
      }
    }
    v21[3] = (uint64_t)v13;
    v21[1] = (uint64_t)v13;
    uint64_t v23 = *v13;
    *uint64_t v21 = *v13;
    if (v23) {
      *(void *)(v23 + 8) = v21;
    }
    *uint64_t v13 = (uint64_t)v21;
    if (*(_DWORD *)(*(void *)a1 + 36)) {
      uint64_t v24 = *(void *)a1 - 16;
    }
    else {
      uint64_t v24 = 0;
    }
    return mlir::detail::OpResultImpl::getNextResultAtOffset(v24, 0) | 4;
  }
  uint64_t v3 = mlir::Value::getDefiningOp((mlir::Value *)&v25);
  if (!v3) {
    goto LABEL_22;
  }
  unint64_t v4 = *(void **)(*(void *)(v3 + 48) + 16);
  BOOL v5 = v4 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id;
  unint64_t v6 = v4 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id ? v3 : 0;
  unint64_t v26 = v6;
  if (!v5) {
    goto LABEL_22;
  }
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v26, (uint64_t)&v27);
  unint64_t v7 = (uint64_t *)v27;
  if (!v28)
  {
    int v12 = 1;
    if (v27 == v29) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v8 = 8 * v28 - 8;
  do
  {
    uint64_t v9 = *v7++;
    isunint64_t ConstantIntValue = mlir::isConstantIntValue(v9, 0);
    BOOL v11 = !isConstantIntValue || v8 == 0;
    v8 -= 8;
  }
  while (!v11);
  int v12 = isConstantIntValue;
  unint64_t v7 = (uint64_t *)v27;
  if (v27 != v29) {
LABEL_19:
  }
    free(v7);
LABEL_20:
  if (v12)
  {
    uint64_t v13 = *(uint64_t **)(*(void *)(v26 + 72) + 24);
    if (v13) {
      goto LABEL_36;
    }
  }
LABEL_22:
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v14 = *(void *)a1 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v26 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v26);
  if (v16)
  {
    uint64_t v17 = 8 * v16;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v17 -= 8;
      if (!v17) {
        goto LABEL_29;
      }
    }
    return 0;
  }
LABEL_29:
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v19 = *(void *)a1 - 16;
  }
  else {
    uint64_t v19 = 0;
  }
  unint64_t v18 = *(void *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v18 != (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  uint64_t v27 = *(void **)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  if (*(void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v27)) {
    return 0;
  }
  return v25 | 4;
}

void mlir::memref::ReinterpretCastOp::getConstifiedMixedSizes(mlir::memref::ReinterpretCastOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15[4] = *MEMORY[0x263EF8340];
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(this, (uint64_t)&__src);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x600000000;
  unsigned int v4 = v13;
  BOOL v5 = __src;
  if (v13) {
    BOOL v6 = &__src == (void **)a2;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (__src == v15)
    {
      unsigned int v8 = v13;
      if (v13 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v13, 8), unsigned int v8 = v13, v5 = __src, v13))
      {
        memcpy(*(void **)a2, v5, 8 * v8);
        BOOL v5 = __src;
      }
      *(_DWORD *)(a2 + 8) = v4;
    }
    else
    {
      *(void *)a2 = __src;
      int v7 = v14;
      *(_DWORD *)(a2 + 8) = v4;
      *(_DWORD *)(a2 + 12) = v7;
      __src = v15;
      int v14 = 0;
      BOOL v5 = v15;
    }
    unsigned int v13 = 0;
  }
  if (v5 != v15) {
    free(v5);
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v9 = *(void *)this - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  constifyIndexValues(a2, v10, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantSizes, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
}

void mlir::memref::ReinterpretCastOp::getConstifiedMixedStrides(mlir::memref::ReinterpretCastOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15[4] = *MEMORY[0x263EF8340];
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(this, (uint64_t)&__src);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x600000000;
  unsigned int v4 = v13;
  BOOL v5 = __src;
  if (v13) {
    BOOL v6 = &__src == (void **)a2;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (__src == v15)
    {
      unsigned int v8 = v13;
      if (v13 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v13, 8), unsigned int v8 = v13, v5 = __src, v13))
      {
        memcpy(*(void **)a2, v5, 8 * v8);
        BOOL v5 = __src;
      }
      *(_DWORD *)(a2 + 8) = v4;
    }
    else
    {
      *(void *)a2 = __src;
      int v7 = v14;
      *(_DWORD *)(a2 + 8) = v4;
      *(_DWORD *)(a2 + 12) = v7;
      __src = v15;
      int v14 = 0;
      BOOL v5 = v15;
    }
    unsigned int v13 = 0;
  }
  if (v5 != v15) {
    free(v5);
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v9 = *(void *)this - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  constifyIndexValues(a2, v10, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantStrides, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
}

uint64_t mlir::memref::ReinterpretCastOp::getConstifiedMixedOffset(mlir::memref::ReinterpretCastOp *this)
{
  v15[6] = *MEMORY[0x263EF8340];
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets(this, (uint64_t)&__src);
  __dst = v15;
  uint64_t v14 = 0x600000000;
  int v2 = v11;
  uint64_t v3 = __src;
  if (v11)
  {
    if (__src == v12)
    {
      unsigned int v4 = v11;
      if (v11 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v15, v11, 8),
            unsigned int v4 = v11,
            uint64_t v3 = __src,
            v11))
      {
        memcpy(__dst, v3, 8 * v4);
        uint64_t v3 = __src;
      }
      LODWORD(v14) = v2;
    }
    else
    {
      __dst = __src;
      uint64_t v14 = v11;
      __src = v12;
      HIDWORD(v11) = 0;
      uint64_t v3 = v12;
    }
    LODWORD(v11) = 0;
  }
  if (v3 != v12) {
    free(v3);
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v5 = *(void *)this - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  constifyIndexValues((uint64_t)&__dst, v6, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantOffset, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
  uint64_t v8 = *(void *)__dst;
  if (__dst != v15) {
    free(__dst);
  }
  return v8;
}

void mlir::memref::ReinterpretCastOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::memref::CollapseShapeOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v4 = *(void *)a1 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);

  return a2(a3, NextResultAtOffset, "collapse_shape", 14);
}

uint64_t mlir::memref::ExpandShapeOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v4 = *(void *)a1 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);

  return a2(a3, NextResultAtOffset, "expand_shape", 12);
}

void mlir::memref::CollapseShapeOp::getReassociationIndices(mlir::memref::CollapseShapeOp *this@<X0>, uint64_t a2@<X8>)
{
  v28[2] = *MEMORY[0x263EF8340];
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  uint64_t v24 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  uint64_t v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  for (uint64_t i = (uint64_t *)(v4 + 8 * v5); Value != i; ++Value)
  {
    uint64_t v23 = *Value;
    int v7 = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23);
    uint64_t v8 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23);
    unint64_t v10 = (char *)(v8 + 8 * v9);
    unint64_t v26 = v28;
    uint64_t v27 = 0x200000000;
    uint64_t v11 = v10 - v7;
    if ((unint64_t)(v10 - v7) < 0x11)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      if (v10 == v7) {
        goto LABEL_11;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v11 >> 3, 8);
      uint64_t v12 = v27;
      int v13 = v27;
      if (v10 == v7) {
        goto LABEL_11;
      }
    }
    uint64_t v14 = (char *)v26 + 8 * v12;
    do
    {
      uint64_t v15 = *(void *)v7;
      v7 += 8;
      uint64_t v25 = v15;
      *v14++ = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v25);
    }
    while (v7 != v10);
    int v13 = v27;
LABEL_11:
    LODWORD(v27) = v13 + ((unint64_t)v11 >> 3);
    uint64_t v16 = *(unsigned int *)(a2 + 8);
    unint64_t v17 = *(void *)a2;
    if (v16 >= *(_DWORD *)(a2 + 12))
    {
      unint64_t v20 = v16 + 1;
      BOOL v21 = v17 + 32 * v16 > (unint64_t)&v26;
      if (v17 <= (unint64_t)&v26 && v21)
      {
        uint64_t v22 = (char *)&v26 - v17;
        llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::grow(a2, v20);
        unint64_t v17 = *(void *)a2;
        unint64_t v18 = (void **)&v22[*(void *)a2];
        goto LABEL_13;
      }
      llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::grow(a2, v20);
      unint64_t v17 = *(void *)a2;
    }
    unint64_t v18 = &v26;
LABEL_13:
    uint64_t v19 = (void *)(v17 + 32 * *(unsigned int *)(a2 + 8));
    *uint64_t v19 = v19 + 2;
    v19[1] = 0x200000000;
    if (*((_DWORD *)v18 + 2)) {
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v19, (uint64_t)v18);
    }
    ++*(_DWORD *)(a2 + 8);
    if (v26 != v28) {
      free(v26);
    }
  }
}

char **llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 32 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 32];
      if (&v2[v4 - 16] != v5) {
        free(v5);
      }
      v4 -= 32;
    }
    while (v4);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

unint64_t mlir::memref::ExpandShapeOp::computeExpandedType(uint64_t a1, uint64_t *a2, unint64_t a3, const void **a4, uint64_t a5)
{
  v80[6] = *MEMORY[0x263EF8340];
  uint64_t v69 = a1;
  __dst = (void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v69);
  uint64_t v73 = v9;
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__dst))
  {
    uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v69);
    uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v69);
    uint64_t v12 = a2;
    int v13 = (mlir::AffineMap *)a3;
    uint64_t v14 = RHS;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
LABEL_67:
    uint64_t v64 = mlir::MemRefType::get(v12, v13, v14, v15, v16, LayerSchedule);
    unint64_t v65 = v64 & 0xFFFFFFFFFFFFFF00;
    return v65 | v64;
  }
  uint64_t v70 = 0;
  uint64_t v71 = v69;
  uint64_t v78 = v80;
  uint64_t v79 = 0x600000000;
  char StridesAndOffset = mlir::getStridesAndOffset(v69, (uint64_t)&v78, &v70);
  char v18 = StridesAndOffset;
  if (StridesAndOffset)
  {
    char v67 = StridesAndOffset;
    long long v75 = v77;
    uint64_t v76 = 0x600000000;
    if (a3 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v77, a3, 8);
    }
    unint64_t v68 = a3;
    if (a5 && v79)
    {
      uint64_t v19 = v78;
      unint64_t v20 = &v78[v79];
      BOOL v21 = &a4[4 * a5];
      int v22 = a3 - 1;
      while (1)
      {
        uint64_t v23 = v21 - 4;
        --v20;
        __dst = v74;
        uint64_t v73 = 0x200000000;
        if (&__dst != (void **)(v21 - 4))
        {
          unsigned int v24 = *((_DWORD *)v21 - 6);
          if (v24) {
            break;
          }
        }
LABEL_33:
        if (v23 != a4)
        {
          BOOL v21 = v23;
          if (v20 != v19) {
            continue;
          }
        }
        goto LABEL_35;
      }
      uint64_t v25 = v74;
      unsigned int v26 = *((_DWORD *)v21 - 6);
      if (v24 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v74, *((unsigned int *)v21 - 6), 8);
        unsigned int v26 = *((_DWORD *)v21 - 6);
        if (!v26) {
          goto LABEL_15;
        }
        uint64_t v25 = __dst;
      }
      memcpy(v25, *v23, 8 * v26);
LABEL_15:
      LODWORD(v73) = v24;
      unint64_t v27 = *v20;
      unsigned int v28 = v76;
      do
      {
        if (v28 >= HIDWORD(v76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v77, v28 + 1, 8);
          unsigned int v28 = v76;
        }
        *((void *)v75 + v28) = v27;
        if (v27 == 0x8000000000000000) {
          unint64_t v29 = 0;
        }
        else {
          unint64_t v29 = v27;
        }
        uint64_t v30 = a2[v22];
        BOOL v31 = v30 == 0x8000000000000000;
        if (v30 == 0x8000000000000000) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = a2[v22];
        }
        unsigned int v28 = v76 + 1;
        LODWORD(v76) = v76 + 1;
        BOOL v33 = v31 || v27 == 0x8000000000000000;
        unint64_t v34 = v32 * v29;
        if (v33) {
          unint64_t v27 = 0x8000000000000000;
        }
        else {
          unint64_t v27 = v34;
        }
        --v22;
        --v24;
      }
      while (v24);
      if (__dst != v74) {
        free(__dst);
      }
      goto LABEL_33;
    }
LABEL_35:
    uint64_t v35 = (char *)v75;
    uint64_t v36 = v76;
    __dst = v74;
    uint64_t v73 = 0x800000000;
    if (v76 < 9)
    {
      int v37 = 0;
      a3 = v68;
      if (!v76)
      {
        long long v38 = v74;
        char v18 = v67;
        unint64_t v53 = 0;
        LODWORD(v73) = 0;
        BOOL v54 = 1;
        unint64_t v55 = v68;
        if (!v68) {
          goto LABEL_55;
        }
        goto LABEL_49;
      }
      uint64_t v39 = 0;
      long long v38 = v74;
      int64_t v40 = (char *)v75 + 8 * v76;
      uint64_t v41 = v74;
      unint64_t v42 = (v76 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v42 < 0x17) {
        goto LABEL_37;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v74, v76, 8);
      int v37 = v73;
      long long v38 = __dst;
      uint64_t v39 = v73;
      a3 = v68;
      int64_t v40 = &v35[8 * v36];
      uint64_t v41 = (char *)__dst + 8 * v73;
      unint64_t v42 = (v36 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v42 < 0x17)
      {
LABEL_37:
        char v18 = v67;
        goto LABEL_47;
      }
    }
    char v18 = v67;
    if (v41 >= v40 || v35 >= &v38[8 * v39 + 8 * v36])
    {
      unint64_t v46 = v42 + 1;
      uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      v41 += v47;
      v40 -= v47;
      uint64_t v48 = (int8x16_t *)&v35[8 * v36 - 16];
      uint64_t v49 = (int8x16_t *)&v38[8 * v39 + 16];
      uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int8x16_t v51 = vextq_s8(v48[-1], v48[-1], 8uLL);
        v49[-1] = vextq_s8(*v48, *v48, 8uLL);
        *uint64_t v49 = v51;
        v48 -= 2;
        v49 += 2;
        v50 -= 4;
      }
      while (v50);
      if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        unint64_t v53 = (v37 + v36);
        LODWORD(v73) = v37 + v36;
        BOOL v54 = a3 >= v53;
        unint64_t v55 = a3 - v53;
        if (a3 == v53) {
          goto LABEL_55;
        }
LABEL_49:
        if (v54)
        {
          unint64_t v57 = v53;
          int v58 = v53;
          if (a3 > HIDWORD(v73))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v74, a3, 8);
            unint64_t v57 = v73;
            long long v38 = __dst;
            int v58 = v73;
          }
          memset_pattern16(&v38[8 * v57], &unk_211ED5510, 8 * v55);
          int v56 = a3 - v53 + v58;
        }
        else
        {
          int v56 = a3;
        }
        LODWORD(v73) = v56;
LABEL_55:
        uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v71);
        uint64_t v60 = mlir::StridedLayoutAttr::get(Context, v70, (uint64_t)__dst, v73);
        if (__dst != v74) {
          free(__dst);
        }
        unint64_t v44 = v60 & 0xFFFFFFFFFFFFFF00;
        if (v75 != v77) {
          free(v75);
        }
        uint64_t v43 = v60;
        uint64_t v45 = v78;
        if (v78 != v80) {
          goto LABEL_60;
        }
        goto LABEL_61;
      }
    }
    do
    {
LABEL_47:
      uint64_t v52 = *((void *)v40 - 1);
      v40 -= 8;
      *(void *)uint64_t v41 = v52;
      v41 += 8;
    }
    while (v40 != v35);
    goto LABEL_48;
  }
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  uint64_t v45 = v78;
  if (v78 != v80) {
LABEL_60:
  }
    free(v45);
LABEL_61:
  if (v18)
  {
    char v61 = (void *)(v44 | v43);
    uint64_t v62 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v69);
    if (v61) {
      uint64_t v63 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v61 + 8);
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v69);
    uint64_t v12 = a2;
    int v13 = (mlir::AffineMap *)a3;
    uint64_t v14 = v62;
    uint64_t v15 = v61;
    uint64_t v16 = v63;
    goto LABEL_67;
  }
  LOBYTE(v64) = 0;
  unint64_t v65 = 0;
  return v65 | v64;
}

uint64_t mlir::memref::ExpandShapeOp::verify(mlir::memref::ExpandShapeOp *this)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v97 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *(_DWORD *)(v2 + 36);
  uint64_t v4 = v2 - 16;
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v96 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v97);
  uint64_t v7 = v6;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v96);
  if (v7 >= v8)
  {
    v94[0] = (void **)"expected rank expansion, but found source rank ";
    __int16 v95 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v94, (uint64_t)&v101);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v97);
    if (v101)
    {
      int v98 = 2;
      int64_t v99 = v20;
      BOOL v21 = &v98;
      int v22 = (char *)v104;
      if (v105 >= v106)
      {
        unint64_t v80 = v105 + 1;
        if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
        {
          int64_t v88 = (char *)&v98 - (unsigned char *)v104;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v80, 24);
          int v22 = (char *)v104;
          BOOL v21 = (int *)((char *)v104 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v80, 24);
          BOOL v21 = &v98;
          int v22 = (char *)v104;
        }
      }
      uint64_t v23 = &v22[24 * v105];
      long long v24 = *(_OWORD *)v21;
      *((void *)v23 + 2) = *((void *)v21 + 2);
      *(_OWORD *)uint64_t v23 = v24;
      uint64_t v25 = ++v105;
      if (v101)
      {
        int v98 = 3;
        int64_t v99 = " >= result rank ";
        uint64_t v100 = 16;
        unsigned int v26 = &v98;
        unint64_t v27 = (char *)v104;
        if (v25 >= v106)
        {
          unint64_t v82 = v25 + 1;
          BOOL v83 = (char *)v104 + 24 * v25 > (char *)&v98;
          if (v104 <= &v98 && v83)
          {
            int64_t v90 = (char *)&v98 - (unsigned char *)v104;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v82, 24);
            unint64_t v27 = (char *)v104;
            unsigned int v26 = (int *)((char *)v104 + v90);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v82, 24);
            unsigned int v26 = &v98;
            unint64_t v27 = (char *)v104;
          }
        }
        unsigned int v28 = &v27[24 * v105];
        long long v29 = *(_OWORD *)v26;
        *((void *)v28 + 2) = *((void *)v26 + 2);
        *(_OWORD *)unsigned int v28 = v29;
        ++v105;
      }
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v96);
    if (v101)
    {
      int v98 = 2;
      int64_t v99 = v30;
      BOOL v31 = &v98;
      uint64_t v32 = (char *)v104;
      if (v105 >= v106)
      {
        unint64_t v81 = v105 + 1;
        if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
        {
          int64_t v89 = (char *)&v98 - (unsigned char *)v104;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v81, 24);
          uint64_t v32 = (char *)v104;
          BOOL v31 = (int *)((char *)v104 + v89);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v81, 24);
          BOOL v31 = &v98;
          uint64_t v32 = (char *)v104;
        }
      }
      BOOL v33 = &v32[24 * v105];
      long long v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = *((void *)v31 + 2);
      *(_OWORD *)BOOL v33 = v34;
      ++v105;
    }
    uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v101);
    if (v101) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
    }
    if (v112)
    {
      uint64_t v36 = __p;
      if (__p)
      {
        int v37 = v111;
        long long v38 = __p;
        if (v111 != __p)
        {
          do
            int v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          long long v38 = __p;
        }
        uint64_t v111 = v36;
        operator delete(v38);
      }
      uint64_t v39 = v108;
      if (!v108) {
        goto LABEL_84;
      }
      int64_t v40 = v109;
      uint64_t v41 = v108;
      if (v109 == v108) {
        goto LABEL_83;
      }
      do
      {
        uint64_t v43 = *--v40;
        uint64_t v42 = v43;
        *int64_t v40 = 0;
        if (v43) {
          MEMORY[0x21667D390](v42, 0x1000C8077774924);
        }
      }
      while (v40 != v39);
      goto LABEL_82;
    }
  }
  else
  {
    uint64_t v9 = *(void *)this;
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v97);
    uint64_t v12 = v11;
    int v13 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v96);
    uint64_t v15 = v14;
    mlir::memref::CollapseShapeOp::getReassociationIndices(this, (uint64_t)&v101);
    char v16 = verifyCollapsedShape(v9, Value, v12, v13, v15, (uint64_t)v101, (const char *)v102, 0);
    unint64_t v17 = (char *)v101;
    if (v102)
    {
      uint64_t v18 = 32 * v102;
      do
      {
        uint64_t v19 = *(char **)&v17[v18 - 32];
        if (&v17[v18 - 16] != v19) {
          free(v19);
        }
        v18 -= 32;
      }
      while (v18);
      unint64_t v17 = (char *)v101;
    }
    if (v17 != (char *)&v103) {
      free(v17);
    }
    if (!v16) {
      return 0;
    }
    uint64_t v44 = v97;
    uint64_t v45 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v96);
    unint64_t v47 = v46;
    mlir::memref::CollapseShapeOp::getReassociationIndices(this, (uint64_t)&v101);
    unint64_t v48 = mlir::memref::ExpandShapeOp::computeExpandedType(v44, v45, v47, (const void **)v101, v102);
    char v50 = v49;
    int8x16_t v51 = (char *)v101;
    if (v102)
    {
      uint64_t v52 = 32 * v102;
      do
      {
        unint64_t v53 = *(char **)&v51[v52 - 32];
        if (&v51[v52 - 16] != v53) {
          free(v53);
        }
        v52 -= 32;
      }
      while (v52);
      int8x16_t v51 = (char *)v101;
    }
    if (v51 != (char *)&v103) {
      free(v51);
    }
    if (v50)
    {
      if (v96 == v48) {
        return 1;
      }
      v94[0] = (void **)"expected expanded type to be ";
      __int16 v95 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v94, (uint64_t)&v101);
      if (v101)
      {
        BOOL v54 = &v98;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v98, v48);
        unint64_t v55 = (char *)v104;
        if (v105 >= v106)
        {
          unint64_t v84 = v105 + 1;
          if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
          {
            int64_t v91 = (char *)&v98 - (unsigned char *)v104;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v84, 24);
            unint64_t v55 = (char *)v104;
            BOOL v54 = (int *)((char *)v104 + v91);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v84, 24);
            BOOL v54 = &v98;
            unint64_t v55 = (char *)v104;
          }
        }
        int v56 = &v55[24 * v105];
        long long v57 = *(_OWORD *)v54;
        *((void *)v56 + 2) = *((void *)v54 + 2);
        *(_OWORD *)int v56 = v57;
        uint64_t v58 = ++v105;
        if (v101)
        {
          int v98 = 3;
          int64_t v99 = " but found ";
          uint64_t v100 = 11;
          int64_t v59 = &v98;
          uint64_t v60 = (char *)v104;
          if (v58 >= v106)
          {
            unint64_t v85 = v58 + 1;
            BOOL v86 = (char *)v104 + 24 * v58 > (char *)&v98;
            if (v104 <= &v98 && v86)
            {
              int64_t v92 = (char *)&v98 - (unsigned char *)v104;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v85, 24);
              uint64_t v60 = (char *)v104;
              int64_t v59 = (int *)((char *)v104 + v92);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v85, 24);
              int64_t v59 = &v98;
              uint64_t v60 = (char *)v104;
            }
          }
          char v61 = &v60[24 * v105];
          long long v62 = *(_OWORD *)v59;
          *((void *)v61 + 2) = *((void *)v59 + 2);
          *(_OWORD *)char v61 = v62;
          ++v105;
          if (v101)
          {
            uint64_t v63 = &v98;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v98, v96);
            uint64_t v64 = (char *)v104;
            if (v105 >= v106)
            {
              unint64_t v87 = v105 + 1;
              if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
              {
                int64_t v93 = (char *)&v98 - (unsigned char *)v104;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v87, 24);
                uint64_t v64 = (char *)v104;
                uint64_t v63 = (int *)((char *)v104 + v93);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v87, 24);
                uint64_t v63 = &v98;
                uint64_t v64 = (char *)v104;
              }
            }
            unint64_t v65 = &v64[24 * v105];
            long long v66 = *(_OWORD *)v63;
            *((void *)v65 + 2) = *((void *)v63 + 2);
            *(_OWORD *)unint64_t v65 = v66;
            ++v105;
          }
        }
      }
      uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v101);
      if (v101) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
      }
      if (v112)
      {
        char v67 = __p;
        if (__p)
        {
          unint64_t v68 = v111;
          uint64_t v69 = __p;
          if (v111 != __p)
          {
            do
              unint64_t v68 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v68 - 1);
            while (v68 != v67);
            uint64_t v69 = __p;
          }
          uint64_t v111 = v67;
          operator delete(v69);
        }
        uint64_t v39 = v108;
        if (!v108) {
          goto LABEL_84;
        }
        uint64_t v70 = v109;
        uint64_t v41 = v108;
        if (v109 == v108)
        {
LABEL_83:
          uint64_t v109 = v39;
          operator delete(v41);
LABEL_84:
          if (v104 != v107) {
            free(v104);
          }
          return v35;
        }
        do
        {
          uint64_t v72 = *--v70;
          uint64_t v71 = v72;
          *uint64_t v70 = 0;
          if (v72) {
            MEMORY[0x21667D390](v71, 0x1000C8077774924);
          }
        }
        while (v70 != v39);
LABEL_82:
        uint64_t v41 = v108;
        goto LABEL_83;
      }
    }
    else
    {
      v94[0] = (void **)"invalid source layout map";
      __int16 v95 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v94, (uint64_t)&v101);
      uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v101);
      if (v101) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
      }
      if (v112)
      {
        uint64_t v73 = __p;
        if (__p)
        {
          unsigned int v74 = v111;
          long long v75 = __p;
          if (v111 != __p)
          {
            do
              unsigned int v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
            while (v74 != v73);
            long long v75 = __p;
          }
          uint64_t v111 = v73;
          operator delete(v75);
        }
        uint64_t v39 = v108;
        if (!v108) {
          goto LABEL_84;
        }
        uint64_t v76 = v109;
        uint64_t v41 = v108;
        if (v109 == v108) {
          goto LABEL_83;
        }
        do
        {
          uint64_t v78 = *--v76;
          uint64_t v77 = v78;
          void *v76 = 0;
          if (v78) {
            MEMORY[0x21667D390](v77, 0x1000C8077774924);
          }
        }
        while (v76 != v39);
        goto LABEL_82;
      }
    }
  }
  return v35;
}

uint64_t verifyCollapsedShape(uint64_t a1, uint64_t a2, const char *a3, void *a4, const char *a5, uint64_t a6, const char *a7, char a8)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  if (a3 != a7)
  {
    v210[0] = (void **)"invalid number of reassociation groups: found ";
    __int16 v211 = 259;
    mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
    if (v218[0])
    {
      LODWORD(__dst) = 5;
      uint64_t v216 = a7;
      p_dst = &__dst;
      uint64_t v130 = (char *)v219;
      if (v220 >= v221)
      {
        unint64_t v187 = v220 + 1;
        if (v219 <= &__dst && (char *)v219 + 24 * v220 > (char *)&__dst)
        {
          int64_t v199 = (char *)&__dst - (unsigned char *)v219;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v187, 24);
          uint64_t v130 = (char *)v219;
          p_dst = (void **)((char *)v219 + v199);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v187, 24);
          p_dst = &__dst;
          uint64_t v130 = (char *)v219;
        }
      }
      unint64_t v131 = &v130[24 * v220];
      long long v132 = *(_OWORD *)p_dst;
      *((void *)v131 + 2) = p_dst[2];
      *(_OWORD *)unint64_t v131 = v132;
      uint64_t v133 = ++v220;
      if (v218[0])
      {
        LODWORD(__dst) = 3;
        uint64_t v216 = ", expected ";
        v217[0] = 11;
        long long v134 = &__dst;
        uint64_t v135 = (char *)v219;
        if (v133 >= v221)
        {
          unint64_t v188 = v133 + 1;
          BOOL v189 = (char *)v219 + 24 * v133 > (char *)&__dst;
          if (v219 <= &__dst && v189)
          {
            int64_t v200 = (char *)&__dst - (unsigned char *)v219;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v188, 24);
            uint64_t v135 = (char *)v219;
            long long v134 = (void **)((char *)v219 + v200);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v188, 24);
            long long v134 = &__dst;
            uint64_t v135 = (char *)v219;
          }
        }
        unsigned int v136 = &v135[24 * v220];
        long long v137 = *(_OWORD *)v134;
        *((void *)v136 + 2) = v134[2];
        *(_OWORD *)unsigned int v136 = v137;
        uint64_t v138 = ++v220;
        if (v218[0])
        {
          LODWORD(__dst) = 5;
          uint64_t v216 = a3;
          long long v139 = &__dst;
          uint64_t v140 = (char *)v219;
          if (v138 >= v221)
          {
            unint64_t v190 = v138 + 1;
            BOOL v191 = (char *)v219 + 24 * v138 > (char *)&__dst;
            if (v219 <= &__dst && v191)
            {
              int64_t v201 = (char *)&__dst - (unsigned char *)v219;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v190, 24);
              uint64_t v140 = (char *)v219;
              long long v139 = (void **)((char *)v219 + v201);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v190, 24);
              long long v139 = &__dst;
              uint64_t v140 = (char *)v219;
            }
          }
          int v141 = &v140[24 * v220];
          long long v142 = *(_OWORD *)v139;
          *((void *)v141 + 2) = v139[2];
          *(_OWORD *)int v141 = v142;
          ++v220;
        }
      }
    }
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
    if (v218[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
    }
    if (!v227) {
      return v8;
    }
    uint64_t v143 = __p;
    if (__p)
    {
      long long v144 = v226;
      uint64_t v145 = __p;
      if (v226 != __p)
      {
        do
          long long v144 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v144 - 1);
        while (v144 != v143);
        uint64_t v145 = __p;
      }
      uint64_t v226 = v143;
      operator delete(v145);
    }
    unint64_t v146 = v223;
    if (v223)
    {
      uint64_t v147 = v224;
      unint64_t v148 = v223;
      if (v224 == v223) {
        goto LABEL_227;
      }
      do
      {
        uint64_t v150 = *--v147;
        uint64_t v149 = v150;
        *uint64_t v147 = 0;
        if (v150) {
          MEMORY[0x21667D390](v149, 0x1000C8077774924);
        }
      }
      while (v147 != v146);
      goto LABEL_226;
    }
LABEL_228:
    BOOL v177 = v219;
    if (v219 == v222) {
      return v8;
    }
LABEL_229:
    free(v177);
    return v8;
  }
  if (a3)
  {
    uint64_t v12 = a6;
    int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v208 = a6 + 32 * (void)a3;
    while (1)
    {
      __dst = v217;
      uint64_t v216 = (const char *)0x200000000;
      unint64_t v15 = *(unsigned int *)(v12 + 8);
      if (&__dst != (void **)v12 && v15 != 0)
      {
        unsigned int v28 = v217;
        uint64_t v29 = *(unsigned int *)(v12 + 8);
        if (v15 < 3) {
          goto LABEL_19;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v217, *(unsigned int *)(v12 + 8), 8);
        uint64_t v29 = *(unsigned int *)(v12 + 8);
        if (v29)
        {
          unsigned int v28 = __dst;
LABEL_19:
          memcpy(v28, *(const void **)v12, 8 * v29);
        }
        char v30 = 0;
        LODWORD(v216) = v15;
        BOOL v31 = (const char **)__dst;
        uint64_t v32 = 8 * v15;
        do
        {
          BOOL v33 = v13++;
          if (v33 != *v31)
          {
            v210[0] = (void **)"reassociation indices must be contiguous";
            __int16 v211 = 259;
            mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
            uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
            if (v218[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
            }
            if (!v227) {
              goto LABEL_138;
            }
            uint64_t v42 = __p;
            if (__p)
            {
              uint64_t v43 = v226;
              uint64_t v44 = __p;
              if (v226 != __p)
              {
                do
                  uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
                while (v43 != v42);
                uint64_t v44 = __p;
              }
              uint64_t v226 = v42;
              operator delete(v44);
            }
            int v37 = v223;
            if (!v223) {
              goto LABEL_136;
            }
            uint64_t v45 = v224;
            uint64_t v39 = v223;
            if (v224 == v223) {
              goto LABEL_135;
            }
            do
            {
              uint64_t v47 = *--v45;
              uint64_t v46 = v47;
              *uint64_t v45 = 0;
              if (v47) {
                MEMORY[0x21667D390](v46, 0x1000C8077774924);
              }
            }
            while (v45 != v37);
            goto LABEL_134;
          }
          if ((uint64_t)v33 >= (uint64_t)a5)
          {
            v210[0] = (void **)"reassociation index ";
            __int16 v211 = 259;
            mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
            if (v218[0])
            {
              int v212 = 2;
              unsigned int v213 = v33;
              unint64_t v48 = (char *)v219;
              if (v220 >= v221)
              {
                unint64_t v110 = v220 + 1;
                if (v219 <= &v212 && (char *)v219 + 24 * v220 > (char *)&v212)
                {
                  int64_t v122 = (char *)&v212 - (unsigned char *)v219;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v110, 24);
                  unint64_t v48 = (char *)v219;
                  char v49 = (int *)((char *)v219 + v122);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v110, 24);
                  char v49 = &v212;
                  unint64_t v48 = (char *)v219;
                }
              }
              else
              {
                char v49 = &v212;
              }
              char v50 = &v48[24 * v220];
              long long v51 = *(_OWORD *)v49;
              *((void *)v50 + 2) = *((void *)v49 + 2);
              *(_OWORD *)char v50 = v51;
              uint64_t v52 = ++v220;
              if (v218[0])
              {
                int v212 = 3;
                unsigned int v213 = " is out of bounds";
                uint64_t v214 = 17;
                unint64_t v53 = (char *)v219;
                if (v52 >= v221)
                {
                  unint64_t v112 = v52 + 1;
                  BOOL v113 = (char *)v219 + 24 * v52 > (char *)&v212;
                  if (v219 <= &v212 && v113)
                  {
                    int64_t v124 = (char *)&v212 - (unsigned char *)v219;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v112, 24);
                    unint64_t v53 = (char *)v219;
                    BOOL v54 = (int *)((char *)v219 + v124);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v112, 24);
                    BOOL v54 = &v212;
                    unint64_t v53 = (char *)v219;
                  }
                }
                else
                {
                  BOOL v54 = &v212;
                }
                unint64_t v55 = &v53[24 * v220];
                long long v56 = *(_OWORD *)v54;
                *((void *)v55 + 2) = *((void *)v54 + 2);
                *(_OWORD *)unint64_t v55 = v56;
                ++v220;
              }
            }
            uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
            if (v218[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
            }
            if (!v227) {
              goto LABEL_138;
            }
            long long v57 = __p;
            if (__p)
            {
              uint64_t v58 = v226;
              int64_t v59 = __p;
              if (v226 != __p)
              {
                do
                  uint64_t v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
                while (v58 != v57);
                int64_t v59 = __p;
              }
              uint64_t v226 = v57;
              operator delete(v59);
            }
            int v37 = v223;
            if (!v223) {
              goto LABEL_136;
            }
            uint64_t v60 = v224;
            uint64_t v39 = v223;
            if (v224 == v223) {
              goto LABEL_135;
            }
            do
            {
              uint64_t v62 = *--v60;
              uint64_t v61 = v62;
              *uint64_t v60 = 0;
              if (v62) {
                MEMORY[0x21667D390](v61, 0x1000C8077774924);
              }
            }
            while (v60 != v37);
            goto LABEL_134;
          }
          if (a4[(void)v33] == 0x8000000000000000)
          {
            if (v30)
            {
              char v30 = 1;
              if ((a8 & 1) == 0)
              {
                v210[0] = (void **)"at most one dimension in a reassociation group may be dynamic";
                __int16 v211 = 259;
                mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
                uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
                if (v218[0]) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
                }
                if (!v227) {
                  goto LABEL_138;
                }
                long long v34 = __p;
                if (__p)
                {
                  uint64_t v35 = v226;
                  uint64_t v36 = __p;
                  if (v226 != __p)
                  {
                    do
                      uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
                    while (v35 != v34);
                    uint64_t v36 = __p;
                  }
                  uint64_t v226 = v34;
                  operator delete(v36);
                }
                int v37 = v223;
                if (!v223) {
                  goto LABEL_136;
                }
                long long v38 = v224;
                uint64_t v39 = v223;
                if (v224 == v223) {
                  goto LABEL_135;
                }
                do
                {
                  uint64_t v41 = *--v38;
                  uint64_t v40 = v41;
                  void *v38 = 0;
                  if (v41) {
                    MEMORY[0x21667D390](v40, 0x1000C8077774924);
                  }
                }
                while (v38 != v37);
                goto LABEL_134;
              }
            }
            else
            {
              char v30 = 1;
            }
          }
          ++v31;
          v32 -= 8;
        }
        while (v32);
        unint64_t v17 = (const char **)(a2 + 8 * (void)v14);
        uint64_t v18 = *v17;
        if ((v30 & 1) != (*v17 == (const char *)0x8000000000000000)) {
          goto LABEL_78;
        }
        if ((v30 & 1) == 0) {
          break;
        }
LABEL_105:
        int v79 = 1;
        unint64_t v80 = __dst;
        if (__dst == v217) {
          goto LABEL_140;
        }
LABEL_139:
        free(v80);
        goto LABEL_140;
      }
      unint64_t v17 = (const char **)(a2 + 8 * (void)v14);
      uint64_t v18 = *v17;
      if (*v17 != (const char *)0x8000000000000000) {
        break;
      }
LABEL_78:
      v210[0] = (void **)"collapsed dim (";
      __int16 v211 = 259;
      mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
      if (v218[0])
      {
        int v212 = 2;
        unsigned int v213 = v14;
        uint64_t v63 = (char *)v219;
        if (v220 >= v221)
        {
          unint64_t v107 = v220 + 1;
          if (v219 <= &v212 && (char *)v219 + 24 * v220 > (char *)&v212)
          {
            int64_t v120 = (char *)&v212 - (unsigned char *)v219;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v107, 24);
            uint64_t v63 = (char *)v219;
            uint64_t v64 = (int *)((char *)v219 + v120);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v107, 24);
            uint64_t v64 = &v212;
            uint64_t v63 = (char *)v219;
          }
        }
        else
        {
          uint64_t v64 = &v212;
        }
        unint64_t v65 = &v63[24 * v220];
        long long v66 = *(_OWORD *)v64;
        *((void *)v65 + 2) = *((void *)v64 + 2);
        *(_OWORD *)unint64_t v65 = v66;
        uint64_t v67 = ++v220;
        if (v218[0])
        {
          int v212 = 3;
          unsigned int v213 = ") must be dynamic if and only if reassociation group is dynamic";
          uint64_t v214 = 63;
          unint64_t v68 = (char *)v219;
          if (v67 >= v221)
          {
            unint64_t v108 = v67 + 1;
            BOOL v109 = (char *)v219 + 24 * v67 > (char *)&v212;
            if (v219 <= &v212 && v109)
            {
              int64_t v121 = (char *)&v212 - (unsigned char *)v219;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v108, 24);
              unint64_t v68 = (char *)v219;
              uint64_t v69 = (int *)((char *)v219 + v121);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v108, 24);
              uint64_t v69 = &v212;
              unint64_t v68 = (char *)v219;
            }
          }
          else
          {
            uint64_t v69 = &v212;
          }
          uint64_t v70 = &v68[24 * v220];
          long long v71 = *(_OWORD *)v69;
          *((void *)v70 + 2) = *((void *)v69 + 2);
          *(_OWORD *)uint64_t v70 = v71;
          ++v220;
        }
      }
      uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
      if (v218[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
      }
      if (v227)
      {
        uint64_t v72 = __p;
        if (__p)
        {
          uint64_t v73 = v226;
          unsigned int v74 = __p;
          if (v226 != __p)
          {
            do
              uint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
            while (v73 != v72);
            unsigned int v74 = __p;
          }
          uint64_t v226 = v72;
          operator delete(v74);
        }
        int v37 = v223;
        if (!v223) {
          goto LABEL_136;
        }
        long long v75 = v224;
        uint64_t v39 = v223;
        if (v224 == v223) {
          goto LABEL_135;
        }
        do
        {
          uint64_t v77 = *--v75;
          uint64_t v76 = v77;
          *long long v75 = 0;
          if (v77) {
            MEMORY[0x21667D390](v76, 0x1000C8077774924);
          }
        }
        while (v75 != v37);
        goto LABEL_134;
      }
LABEL_138:
      int v79 = 0;
      unint64_t v80 = __dst;
      if (__dst != v217) {
        goto LABEL_139;
      }
LABEL_140:
      if (!v79) {
        return v8;
      }
      ++v14;
      v12 += 32;
      if (v12 == v208)
      {
        if (v13 == a5) {
          return 1;
        }
        v210[0] = (void **)"expanded rank (";
        __int16 v211 = 259;
        mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
        if (v218[0])
        {
          LODWORD(__dst) = 5;
          uint64_t v216 = a5;
          unint64_t v152 = &__dst;
          BOOL v153 = (char *)v219;
          if (v220 >= v221)
          {
            unint64_t v192 = v220 + 1;
            if (v219 <= &__dst && (char *)v219 + 24 * v220 > (char *)&__dst)
            {
              int64_t v202 = (char *)&__dst - (unsigned char *)v219;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v192, 24);
              BOOL v153 = (char *)v219;
              unint64_t v152 = (void **)((char *)v219 + v202);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v192, 24);
              unint64_t v152 = &__dst;
              BOOL v153 = (char *)v219;
            }
          }
          unint64_t v154 = &v153[24 * v220];
          long long v155 = *(_OWORD *)v152;
          *((void *)v154 + 2) = v152[2];
          *(_OWORD *)unint64_t v154 = v155;
          uint64_t v156 = ++v220;
          if (v218[0])
          {
            LODWORD(__dst) = 3;
            uint64_t v216 = ") inconsistent with number of reassociation indices (";
            v217[0] = 53;
            BOOL v157 = &__dst;
            unint64_t v158 = (char *)v219;
            if (v156 >= v221)
            {
              unint64_t v193 = v156 + 1;
              BOOL v194 = (char *)v219 + 24 * v156 > (char *)&__dst;
              if (v219 <= &__dst && v194)
              {
                int64_t v203 = (char *)&__dst - (unsigned char *)v219;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v193, 24);
                unint64_t v158 = (char *)v219;
                BOOL v157 = (void **)((char *)v219 + v203);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v193, 24);
                BOOL v157 = &__dst;
                unint64_t v158 = (char *)v219;
              }
            }
            unint64_t v159 = &v158[24 * v220];
            long long v160 = *(_OWORD *)v157;
            *((void *)v159 + 2) = v157[2];
            *(_OWORD *)unint64_t v159 = v160;
            uint64_t v161 = ++v220;
            if (v218[0])
            {
              LODWORD(__dst) = 2;
              uint64_t v216 = v13;
              BOOL v162 = &__dst;
              unint64_t v163 = (char *)v219;
              if (v161 >= v221)
              {
                unint64_t v195 = v161 + 1;
                BOOL v196 = (char *)v219 + 24 * v161 > (char *)&__dst;
                if (v219 <= &__dst && v196)
                {
                  int64_t v204 = (char *)&__dst - (unsigned char *)v219;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v195, 24);
                  unint64_t v163 = (char *)v219;
                  BOOL v162 = (void **)((char *)v219 + v204);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v195, 24);
                  BOOL v162 = &__dst;
                  unint64_t v163 = (char *)v219;
                }
              }
              BOOL v164 = &v163[24 * v220];
              long long v165 = *(_OWORD *)v162;
              *((void *)v164 + 2) = v162[2];
              *(_OWORD *)BOOL v164 = v165;
              uint64_t v166 = ++v220;
              if (v218[0])
              {
                LODWORD(__dst) = 3;
                uint64_t v216 = ")";
                v217[0] = 1;
                BOOL v167 = &__dst;
                unint64_t v168 = (char *)v219;
                if (v166 >= v221)
                {
                  unint64_t v197 = v166 + 1;
                  BOOL v198 = (char *)v219 + 24 * v166 > (char *)&__dst;
                  if (v219 <= &__dst && v198)
                  {
                    int64_t v205 = (char *)&__dst - (unsigned char *)v219;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v197, 24);
                    unint64_t v168 = (char *)v219;
                    BOOL v167 = (void **)((char *)v219 + v205);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v197, 24);
                    BOOL v167 = &__dst;
                    unint64_t v168 = (char *)v219;
                  }
                }
                BOOL v169 = &v168[24 * v220];
                long long v170 = *(_OWORD *)v167;
                *((void *)v169 + 2) = v167[2];
                *(_OWORD *)BOOL v169 = v170;
                ++v220;
              }
            }
          }
        }
        uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
        if (v218[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
        }
        if (v227)
        {
          BOOL v171 = __p;
          if (__p)
          {
            unint64_t v172 = v226;
            BOOL v173 = __p;
            if (v226 != __p)
            {
              do
                unint64_t v172 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v172 - 1);
              while (v172 != v171);
              BOOL v173 = __p;
            }
            uint64_t v226 = v171;
            operator delete(v173);
          }
          unint64_t v146 = v223;
          if (v223)
          {
            unint64_t v174 = v224;
            unint64_t v148 = v223;
            if (v224 == v223)
            {
LABEL_227:
              uint64_t v224 = v146;
              operator delete(v148);
              goto LABEL_228;
            }
            do
            {
              uint64_t v176 = *--v174;
              uint64_t v175 = v176;
              *unint64_t v174 = 0;
              if (v176) {
                MEMORY[0x21667D390](v175, 0x1000C8077774924);
              }
            }
            while (v174 != v146);
LABEL_226:
            unint64_t v148 = v223;
            goto LABEL_227;
          }
          goto LABEL_228;
        }
        return v8;
      }
    }
    if (!v216)
    {
      uint64_t v27 = 1;
      goto LABEL_104;
    }
    uint64_t v19 = (v216 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v19)
    {
      uint64_t v20 = v19 + 1;
      uint64_t v21 = (v19 + 1) & 0x3FFFFFFFFFFFFFFELL;
      int v22 = (uint64_t *)((char *)__dst + 8 * v21);
      uint64_t v23 = (char *)__dst + 8;
      uint64_t v24 = v21;
      uint64_t v25 = 1;
      uint64_t v26 = 1;
      do
      {
        v25 *= a4[*(v23 - 1)];
        v26 *= a4[*v23];
        v23 += 2;
        v24 -= 2;
      }
      while (v24);
      uint64_t v27 = v26 * v25;
      if (v20 == v21)
      {
LABEL_104:
        if ((const char *)v27 == v18) {
          goto LABEL_105;
        }
        v210[0] = (void **)"collapsed dim size (";
        __int16 v211 = 259;
        mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
        if (v218[0])
        {
          unint64_t v81 = *v17;
          int v212 = 2;
          unsigned int v213 = v81;
          unint64_t v82 = (char *)v219;
          if (v220 >= v221)
          {
            unint64_t v111 = v220 + 1;
            if (v219 <= &v212 && (char *)v219 + 24 * v220 > (char *)&v212)
            {
              int64_t v123 = (char *)&v212 - (unsigned char *)v219;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v111, 24);
              unint64_t v82 = (char *)v219;
              BOOL v83 = (int *)((char *)v219 + v123);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v111, 24);
              BOOL v83 = &v212;
              unint64_t v82 = (char *)v219;
            }
          }
          else
          {
            BOOL v83 = &v212;
          }
          unint64_t v84 = &v82[24 * v220];
          long long v85 = *(_OWORD *)v83;
          *((void *)v84 + 2) = *((void *)v83 + 2);
          *(_OWORD *)unint64_t v84 = v85;
          uint64_t v86 = ++v220;
          if (v218[0])
          {
            int v212 = 3;
            unsigned int v213 = ") must equal reassociation group size (";
            uint64_t v214 = 39;
            unint64_t v87 = (char *)v219;
            if (v86 >= v221)
            {
              unint64_t v114 = v86 + 1;
              BOOL v115 = (char *)v219 + 24 * v86 > (char *)&v212;
              if (v219 <= &v212 && v115)
              {
                int64_t v125 = (char *)&v212 - (unsigned char *)v219;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v114, 24);
                unint64_t v87 = (char *)v219;
                int64_t v88 = (int *)((char *)v219 + v125);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v114, 24);
                int64_t v88 = &v212;
                unint64_t v87 = (char *)v219;
              }
            }
            else
            {
              int64_t v88 = &v212;
            }
            int64_t v89 = &v87[24 * v220];
            long long v90 = *(_OWORD *)v88;
            *((void *)v89 + 2) = *((void *)v88 + 2);
            *(_OWORD *)int64_t v89 = v90;
            uint64_t v91 = ++v220;
            if (v218[0])
            {
              int v212 = 2;
              unsigned int v213 = (const char *)v27;
              int64_t v92 = (char *)v219;
              if (v91 >= v221)
              {
                unint64_t v116 = v91 + 1;
                BOOL v117 = (char *)v219 + 24 * v91 > (char *)&v212;
                if (v219 <= &v212 && v117)
                {
                  int64_t v126 = (char *)&v212 - (unsigned char *)v219;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v116, 24);
                  int64_t v92 = (char *)v219;
                  int64_t v93 = (int *)((char *)v219 + v126);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v116, 24);
                  int64_t v93 = &v212;
                  int64_t v92 = (char *)v219;
                }
              }
              else
              {
                int64_t v93 = &v212;
              }
              uint64_t v94 = &v92[24 * v220];
              long long v95 = *(_OWORD *)v93;
              *((void *)v94 + 2) = *((void *)v93 + 2);
              *(_OWORD *)uint64_t v94 = v95;
              uint64_t v96 = ++v220;
              if (v218[0])
              {
                int v212 = 3;
                unsigned int v213 = ")";
                uint64_t v214 = 1;
                unint64_t v97 = (char *)v219;
                if (v96 >= v221)
                {
                  unint64_t v118 = v96 + 1;
                  BOOL v119 = (char *)v219 + 24 * v96 > (char *)&v212;
                  if (v219 <= &v212 && v119)
                  {
                    int64_t v127 = (char *)&v212 - (unsigned char *)v219;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v118, 24);
                    unint64_t v97 = (char *)v219;
                    int v98 = (int *)((char *)v219 + v127);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v118, 24);
                    int v98 = &v212;
                    unint64_t v97 = (char *)v219;
                  }
                }
                else
                {
                  int v98 = &v212;
                }
                int64_t v99 = &v97[24 * v220];
                long long v100 = *(_OWORD *)v98;
                *((void *)v99 + 2) = *((void *)v98 + 2);
                *(_OWORD *)int64_t v99 = v100;
                ++v220;
              }
            }
          }
        }
        uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
        if (v218[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
        }
        if (v227)
        {
          long long v101 = __p;
          if (__p)
          {
            unsigned int v102 = v226;
            uint64_t v103 = __p;
            if (v226 != __p)
            {
              do
                unsigned int v102 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v102 - 1);
              while (v102 != v101);
              uint64_t v103 = __p;
            }
            uint64_t v226 = v101;
            operator delete(v103);
          }
          int v37 = v223;
          if (!v223) {
            goto LABEL_136;
          }
          unsigned int v104 = v224;
          uint64_t v39 = v223;
          if (v224 == v223)
          {
LABEL_135:
            uint64_t v224 = v37;
            operator delete(v39);
LABEL_136:
            if (v219 != v222) {
              free(v219);
            }
            goto LABEL_138;
          }
          do
          {
            uint64_t v106 = *--v104;
            uint64_t v105 = v106;
            *unsigned int v104 = 0;
            if (v106) {
              MEMORY[0x21667D390](v105, 0x1000C8077774924);
            }
          }
          while (v104 != v37);
LABEL_134:
          uint64_t v39 = v223;
          goto LABEL_135;
        }
        goto LABEL_138;
      }
    }
    else
    {
      int v22 = (uint64_t *)__dst;
      uint64_t v27 = 1;
    }
    do
    {
      uint64_t v78 = *v22++;
      v27 *= a4[v78];
    }
    while (v22 != (uint64_t *)((char *)__dst + 8 * v216));
    goto LABEL_104;
  }
  if (!a5) {
    return 1;
  }
  uint64_t v151 = 8 * (void)a5;
  while (*a4 == 1)
  {
    ++a4;
    v151 -= 8;
    if (!v151) {
      return 1;
    }
  }
  v210[0] = (void **)"rank 0 memrefs can only be extended/collapsed with/from ones";
  __int16 v211 = 259;
  mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
  if (v218[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
  }
  if (v227)
  {
    int64_t v179 = __p;
    if (__p)
    {
      int64_t v180 = v226;
      int64_t v181 = __p;
      if (v226 != __p)
      {
        do
          int64_t v180 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v180 - 1);
        while (v180 != v179);
        int64_t v181 = __p;
      }
      uint64_t v226 = v179;
      operator delete(v181);
    }
    int64_t v182 = v223;
    if (v223)
    {
      int64_t v183 = v224;
      int64_t v184 = v223;
      if (v224 != v223)
      {
        do
        {
          uint64_t v186 = *--v183;
          uint64_t v185 = v186;
          *int64_t v183 = 0;
          if (v186) {
            MEMORY[0x21667D390](v185, 0x1000C8077774924);
          }
        }
        while (v183 != v182);
        int64_t v184 = v223;
      }
      uint64_t v224 = v182;
      operator delete(v184);
    }
    BOOL v177 = v219;
    if (v219 != v222) {
      goto LABEL_229;
    }
  }
  return v8;
}

void mlir::memref::ExpandShapeOp::getCanonicalizationPatterns()
{
}

unint64_t computeCollapsedLayoutMap(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  v61[6] = *MEMORY[0x263EF8340];
  uint64_t v55 = 0;
  uint64_t v56 = a1;
  v60[0] = v61;
  v60[1] = (void *)0x600000000;
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
  if (!mlir::getStridesAndOffset(v56, (uint64_t)v60, &v55))
  {
    unsigned __int8 v8 = 0;
    unint64_t v9 = 0;
    goto LABEL_69;
  }
  long long v57 = v59;
  uint64_t v58 = 0x600000000;
  if (a3 < 7)
  {
    if (!a3) {
      goto LABEL_40;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, a3, 8);
  }
  uint64_t v10 = a2 + 32 * a3;
  uint64_t v11 = a2;
  do
  {
    uint64_t v12 = *(unsigned int *)(v11 + 8) - 1;
    while (1)
    {
      uint64_t v13 = *(void *)(*(void *)v11 + 8 * v12);
      uint64_t v14 = *(void *)(Value + 8 * v13);
      if (v14 != 1) {
        break;
      }
      unint64_t v15 = v12-- + 1;
      if (v15 <= 1) {
        goto LABEL_14;
      }
    }
    if (v14 != 0x8000000000000000)
    {
LABEL_14:
      unint64_t v16 = v58;
      unint64_t v17 = HIDWORD(v58);
      goto LABEL_15;
    }
    unint64_t v16 = v58;
    unint64_t v17 = HIDWORD(v58);
    if (v12)
    {
      unint64_t v18 = 0x8000000000000000;
      goto LABEL_16;
    }
LABEL_15:
    unint64_t v18 = *((void *)v60[0] + v13);
LABEL_16:
    if (v16 >= v17)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v16 + 1, 8);
      unint64_t v16 = v58;
    }
    *((void *)v57 + v16) = v18;
    unsigned int v19 = v58;
    LODWORD(v58) = v58 + 1;
    v11 += 32;
  }
  while (v11 != v10);
  uint64_t v20 = v57;
  if ((a4 & 1) == 0)
  {
    do
    {
      uint64_t v22 = *(void *)(v10 - 32);
      v10 -= 32;
      uint64_t v21 = v22;
      uint64_t v23 = *((void *)v57 + v19);
      char v24 = v23 == 0x8000000000000000;
      if (v23 == 0x8000000000000000) {
        uint64_t v23 = 0;
      }
      uint64_t v25 = *(unsigned int *)(v10 + 8) - 1;
      while (v25)
      {
        uint64_t v26 = 8 * *(void *)(v21 + 8 * v25);
        uint64_t v27 = *(void *)(Value + v26);
        BOOL v28 = v27 == 0x8000000000000000;
        if (v27 == 0x8000000000000000) {
          uint64_t v27 = 0;
        }
        v24 |= v28;
        v23 *= v27;
        if (v24) {
          uint64_t v23 = 0;
        }
        uint64_t v29 = *(void *)((char *)v60[0] + v26 - 8);
        if (v29 == 0x8000000000000000) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = v29;
        }
        --v25;
        if ((v24 & 1) == 0 && v29 != 0x8000000000000000 && v30 != v23) {
          goto LABEL_67;
        }
      }
      --v19;
    }
    while (v10 != a2);
LABEL_40:
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v56);
    uint64_t v34 = mlir::StridedLayoutAttr::get(Context, v55, (uint64_t)v57, v58);
    unsigned __int8 v8 = v34;
    unint64_t v9 = v34 & 0xFFFFFFFFFFFFFF00;
    uint64_t v20 = v57;
    if (v57 != v59) {
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  while (1)
  {
    uint64_t v36 = *(void *)(v10 - 32);
    v10 -= 32;
    uint64_t v35 = v36;
    uint64_t v37 = *(unsigned int *)(v10 + 8);
    uint64_t v38 = *((void *)v57 + v19);
    uint64_t v39 = v38 == 0x8000000000000000 ? 0 : *((void *)v57 + v19);
    if (v37 != 1) {
      break;
    }
LABEL_42:
    --v19;
    if (v10 == a2) {
      goto LABEL_40;
    }
  }
  uint64_t v40 = 8 * *(void *)(v35 + 8 * v37 - 8);
  uint64_t v41 = *(void *)(Value + v40);
  uint64_t v42 = *(void *)((char *)v60[0] + v40 - 8);
  uint64_t v43 = v41 * v39;
  if (v38 != 0x8000000000000000 && v41 != 0x8000000000000000 && v42 != 0x8000000000000000 && v42 == v43)
  {
    uint64_t v47 = v37 - 2;
    while (v47)
    {
      uint64_t v48 = 8 * *(void *)(v35 + 8 * v47);
      uint64_t v49 = *(void *)(Value + v48);
      uint64_t v50 = v49 * v42;
      uint64_t v51 = *(void *)((char *)v60[0] + v48 - 8);
      --v47;
      BOOL v53 = v49 != 0x8000000000000000 && v51 != 0x8000000000000000 && v51 == v50;
      uint64_t v42 = v51;
      if (!v53) {
        goto LABEL_67;
      }
    }
    goto LABEL_42;
  }
LABEL_67:
  unsigned __int8 v8 = 0;
  unint64_t v9 = 0;
  if (v57 != v59) {
LABEL_68:
  }
    free(v20);
LABEL_69:
  if (v60[0] != v61) {
    free(v60[0]);
  }
  return v9 & 0xFFFFFFFFFFFFFF00 | v8;
}

uint64_t mlir::memref::CollapseShapeOp::computeCollapsedType(uint64_t a1, uint64_t a2, unint64_t a3)
{
  v34[6] = *MEMORY[0x263EF8340];
  uint64_t v31 = a1;
  uint64_t v32 = v34;
  uint64_t v33 = 0x600000000;
  if (a3 < 7)
  {
    if (!a3) {
      goto LABEL_19;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, a3, 8);
  }
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = *(unsigned int *)(v5 + 8);
    if (v6)
    {
      char v7 = 0;
      unsigned __int8 v8 = *(unsigned int **)v5;
      uint64_t v9 = 8 * v6;
      unint64_t v10 = 1;
      do
      {
        unsigned int v11 = *v8;
        v8 += 2;
        uint64_t v12 = *(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31) + 8 * v11);
        BOOL v13 = v12 == 0x8000000000000000;
        if (v12 == 0x8000000000000000) {
          uint64_t v12 = 0;
        }
        v7 |= v13;
        unint64_t v14 = v12 * v10;
        if (v7) {
          unint64_t v10 = 0;
        }
        else {
          unint64_t v10 = v14;
        }
        v9 -= 8;
      }
      while (v9);
      if (v7) {
        unint64_t v10 = 0x8000000000000000;
      }
    }
    else
    {
      unint64_t v10 = 1;
    }
    uint64_t v15 = v33;
    if (v33 >= (unint64_t)HIDWORD(v33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
      uint64_t v15 = v33;
    }
    *((void *)v32 + v15) = v10;
    LODWORD(v33) = v33 + 1;
    v5 += 32;
  }
  while (v5 != a2 + 32 * a3);
LABEL_19:
  v30[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v31);
  v30[1] = v16;
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v30))
  {
    unint64_t v17 = (uint64_t *)v32;
    unint64_t v18 = (mlir::AffineMap *)v33;
    uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v31);
    uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v31);
    uint64_t v21 = mlir::MemRefType::get(v17, v18, RHS, 0, 0, LayerSchedule);
    uint64_t v22 = v32;
    if (v32 == v34) {
      return v21;
    }
    goto LABEL_26;
  }
  uint64_t v23 = (void *)computeCollapsedLayoutMap(v31, a2, a3, 0);
  char v24 = (uint64_t *)v32;
  uint64_t v25 = (mlir::AffineMap *)v33;
  uint64_t v26 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v31);
  if (v23) {
    uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v23 + 8);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v31);
  uint64_t v21 = mlir::MemRefType::get(v24, v25, v26, v23, v27, v28);
  uint64_t v22 = v32;
  if (v32 != v34) {
LABEL_26:
  }
    free(v22);
  return v21;
}

void mlir::memref::CollapseShapeOp::build(uint64_t *a1, mlir::Attribute *a2, uint64_t a3, uint64_t a4, unint64_t a5, const void *a6, uint64_t a7)
{
  v22[2] = *MEMORY[0x263EF8340];
  uint64_t v18 = a3;
  uint64_t v17 = mlir::memref::CollapseShapeOp::computeCollapsedType(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8, a4, a5);
  BOOL v13 = mlir::ValueRange::ValueRange(v22, (uint64_t)&v17, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)a2, v22[0], v22[1], (uint64_t)&v18, 1, a6, a7);
  uint64_t ReassociationIndicesAttribute = mlir::getReassociationIndicesAttribute(a1, a4, a5);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  __int16 v20 = 261;
  v19[0] = "reassociation";
  v19[1] = 13;
  uint64_t v16 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v19);
  ZinMirCacheTensors::ZinMirCacheTensors(v21, v16, ReassociationIndicesAttribute);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, v21[0], v21[1]);
}

uint64_t mlir::memref::CollapseShapeOp::verify(mlir::memref::CollapseShapeOp *this)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v107 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *(_DWORD *)(v2 + 36);
  uint64_t v4 = v2 - 16;
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v106 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v107);
  uint64_t v7 = v6;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
  if (v7 <= v8)
  {
    v104[0] = (void **)"expected rank reduction, but found source rank ";
    __int16 v105 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v104, (uint64_t)&RawStringData);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v107);
    if (RawStringData)
    {
      int v108 = 2;
      BOOL v109 = v20;
      uint64_t v21 = &v108;
      uint64_t v22 = (char *)v114;
      if (v115 >= v116)
      {
        unint64_t v90 = v115 + 1;
        if (v114 <= &v108 && (char *)v114 + 24 * v115 > (char *)&v108)
        {
          int64_t v98 = (char *)&v108 - (unsigned char *)v114;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v90, 24);
          uint64_t v22 = (char *)v114;
          uint64_t v21 = (int *)((char *)v114 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v90, 24);
          uint64_t v21 = &v108;
          uint64_t v22 = (char *)v114;
        }
      }
      uint64_t v23 = &v22[24 * v115];
      long long v24 = *(_OWORD *)v21;
      *((void *)v23 + 2) = *((void *)v21 + 2);
      *(_OWORD *)uint64_t v23 = v24;
      uint64_t v25 = ++v115;
      if (RawStringData)
      {
        int v108 = 3;
        BOOL v109 = " <= result rank ";
        uint64_t v110 = 16;
        uint64_t v26 = &v108;
        uint64_t v27 = (char *)v114;
        if (v25 >= v116)
        {
          unint64_t v92 = v25 + 1;
          BOOL v93 = (char *)v114 + 24 * v25 > (char *)&v108;
          if (v114 <= &v108 && v93)
          {
            int64_t v100 = (char *)&v108 - (unsigned char *)v114;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v92, 24);
            uint64_t v27 = (char *)v114;
            uint64_t v26 = (int *)((char *)v114 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v92, 24);
            uint64_t v26 = &v108;
            uint64_t v27 = (char *)v114;
          }
        }
        uint64_t v28 = &v27[24 * v115];
        long long v29 = *(_OWORD *)v26;
        *((void *)v28 + 2) = *((void *)v26 + 2);
        *(_OWORD *)uint64_t v28 = v29;
        ++v115;
      }
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
    if (RawStringData)
    {
      int v108 = 2;
      BOOL v109 = v30;
      uint64_t v31 = &v108;
      uint64_t v32 = (char *)v114;
      if (v115 >= v116)
      {
        unint64_t v91 = v115 + 1;
        if (v114 <= &v108 && (char *)v114 + 24 * v115 > (char *)&v108)
        {
          int64_t v99 = (char *)&v108 - (unsigned char *)v114;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v91, 24);
          uint64_t v32 = (char *)v114;
          uint64_t v31 = (int *)((char *)v114 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v91, 24);
          uint64_t v31 = &v108;
          uint64_t v32 = (char *)v114;
        }
      }
      uint64_t v33 = &v32[24 * v115];
      long long v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = *((void *)v31 + 2);
      *(_OWORD *)uint64_t v33 = v34;
      ++v115;
    }
    uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v122)
    {
      uint64_t v36 = __p;
      if (__p)
      {
        uint64_t v37 = v121;
        uint64_t v38 = __p;
        if (v121 != __p)
        {
          do
            uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          uint64_t v38 = __p;
        }
        int64_t v121 = v36;
        operator delete(v38);
      }
      uint64_t v39 = v118;
      if (!v118) {
        goto LABEL_87;
      }
      uint64_t v40 = v119;
      uint64_t v41 = v118;
      if (v119 == v118) {
        goto LABEL_86;
      }
      do
      {
        uint64_t v43 = *--v40;
        uint64_t v42 = v43;
        *uint64_t v40 = 0;
        if (v43) {
          MEMORY[0x21667D390](v42, 0x1000C8077774924);
        }
      }
      while (v40 != v39);
      goto LABEL_85;
    }
    return v35;
  }
  uint64_t v9 = *(void *)this;
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
  uint64_t v12 = v11;
  BOOL v13 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v107);
  uint64_t v15 = v14;
  mlir::memref::CollapseShapeOp::getReassociationIndices(this, (uint64_t)&RawStringData);
  char v16 = verifyCollapsedShape(v9, Value, v12, v13, v15, (uint64_t)RawStringData, (const char *)v112, 1);
  uint64_t v17 = (char *)RawStringData;
  if (v112)
  {
    uint64_t v18 = 32 * v112;
    do
    {
      unsigned int v19 = *(char **)&v17[v18 - 32];
      if (&v17[v18 - 16] != v19) {
        free(v19);
      }
      v18 -= 32;
    }
    while (v18);
    uint64_t v17 = (char *)RawStringData;
  }
  if (v17 != (char *)&v113) {
    free(v17);
  }
  if (!v16) {
    return 0;
  }
  uint64_t RawStringData = (void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v107);
  uint64_t v112 = v44;
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData))
  {
    uint64_t v45 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
    uint64_t v47 = v46;
    uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v107);
    uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v107);
    uint64_t v50 = mlir::MemRefType::get(v45, v47, RHS, 0, 0, LayerSchedule);
    if (v106 != v50) {
      goto LABEL_38;
    }
    return 1;
  }
  uint64_t v70 = v107;
  mlir::memref::CollapseShapeOp::getReassociationIndices(this, (uint64_t)&RawStringData);
  long long v71 = (void *)computeCollapsedLayoutMap(v70, (uint64_t)RawStringData, v112, 0);
  char v73 = v72;
  unsigned int v74 = (char *)RawStringData;
  if (v112)
  {
    uint64_t v75 = 32 * v112;
    do
    {
      uint64_t v76 = *(char **)&v74[v75 - 32];
      if (&v74[v75 - 16] != v76) {
        free(v76);
      }
      v75 -= 32;
    }
    while (v75);
    unsigned int v74 = (char *)RawStringData;
  }
  if (v74 != (char *)&v113) {
    free(v74);
  }
  if (v73)
  {
    uint64_t v77 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
    int v79 = v78;
    uint64_t v80 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v107);
    if (v71) {
      uint64_t v81 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v71 + 8);
    }
    else {
      uint64_t v81 = 0;
    }
    uint64_t v89 = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v107);
    uint64_t v50 = mlir::MemRefType::get(v77, v79, v80, v71, v81, v89);
    if (v106 != v50)
    {
LABEL_38:
      v104[0] = (void **)"expected collapsed type to be ";
      __int16 v105 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v104, (uint64_t)&RawStringData);
      if (RawStringData)
      {
        uint64_t v51 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v50);
        uint64_t v52 = (char *)v114;
        if (v115 >= v116)
        {
          unint64_t v94 = v115 + 1;
          if (v114 <= &v108 && (char *)v114 + 24 * v115 > (char *)&v108)
          {
            int64_t v101 = (char *)&v108 - (unsigned char *)v114;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v94, 24);
            uint64_t v52 = (char *)v114;
            uint64_t v51 = (int *)((char *)v114 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v94, 24);
            uint64_t v51 = &v108;
            uint64_t v52 = (char *)v114;
          }
        }
        BOOL v53 = &v52[24 * v115];
        long long v54 = *(_OWORD *)v51;
        *((void *)v53 + 2) = *((void *)v51 + 2);
        *(_OWORD *)BOOL v53 = v54;
        uint64_t v55 = ++v115;
        if (RawStringData)
        {
          int v108 = 3;
          BOOL v109 = " but found ";
          uint64_t v110 = 11;
          uint64_t v56 = &v108;
          long long v57 = (char *)v114;
          if (v55 >= v116)
          {
            unint64_t v95 = v55 + 1;
            BOOL v96 = (char *)v114 + 24 * v55 > (char *)&v108;
            if (v114 <= &v108 && v96)
            {
              int64_t v102 = (char *)&v108 - (unsigned char *)v114;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v95, 24);
              long long v57 = (char *)v114;
              uint64_t v56 = (int *)((char *)v114 + v102);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v95, 24);
              uint64_t v56 = &v108;
              long long v57 = (char *)v114;
            }
          }
          uint64_t v58 = &v57[24 * v115];
          long long v59 = *(_OWORD *)v56;
          *((void *)v58 + 2) = *((void *)v56 + 2);
          *(_OWORD *)uint64_t v58 = v59;
          ++v115;
          if (RawStringData)
          {
            uint64_t v60 = &v108;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v106);
            uint64_t v61 = (char *)v114;
            if (v115 >= v116)
            {
              unint64_t v97 = v115 + 1;
              if (v114 <= &v108 && (char *)v114 + 24 * v115 > (char *)&v108)
              {
                int64_t v103 = (char *)&v108 - (unsigned char *)v114;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v97, 24);
                uint64_t v61 = (char *)v114;
                uint64_t v60 = (int *)((char *)v114 + v103);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v97, 24);
                uint64_t v60 = &v108;
                uint64_t v61 = (char *)v114;
              }
            }
            uint64_t v62 = &v61[24 * v115];
            long long v63 = *(_OWORD *)v60;
            *((void *)v62 + 2) = *((void *)v60 + 2);
            *(_OWORD *)uint64_t v62 = v63;
            ++v115;
          }
        }
      }
      uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      }
      if (v122)
      {
        uint64_t v64 = __p;
        if (__p)
        {
          unint64_t v65 = v121;
          long long v66 = __p;
          if (v121 != __p)
          {
            do
              unint64_t v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
            while (v65 != v64);
            long long v66 = __p;
          }
          int64_t v121 = v64;
          operator delete(v66);
        }
        uint64_t v39 = v118;
        if (!v118) {
          goto LABEL_87;
        }
        uint64_t v67 = v119;
        uint64_t v41 = v118;
        if (v119 == v118)
        {
LABEL_86:
          BOOL v119 = v39;
          operator delete(v41);
LABEL_87:
          if (v114 != v117) {
            free(v114);
          }
          return v35;
        }
        do
        {
          uint64_t v69 = *--v67;
          uint64_t v68 = v69;
          void *v67 = 0;
          if (v69) {
            MEMORY[0x21667D390](v68, 0x1000C8077774924);
          }
        }
        while (v67 != v39);
LABEL_85:
        uint64_t v41 = v118;
        goto LABEL_86;
      }
      return v35;
    }
    return 1;
  }
  v104[0] = (void **)"invalid source layout map or collapsing non-contiguous dims";
  __int16 v105 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v104, (uint64_t)&RawStringData);
  uint64_t v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
  if (RawStringData) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
  }
  if (v122)
  {
    unint64_t v82 = __p;
    if (__p)
    {
      BOOL v83 = v121;
      unint64_t v84 = __p;
      if (v121 != __p)
      {
        do
          BOOL v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        unint64_t v84 = __p;
      }
      int64_t v121 = v82;
      operator delete(v84);
    }
    uint64_t v39 = v118;
    if (!v118) {
      goto LABEL_87;
    }
    long long v85 = v119;
    uint64_t v41 = v118;
    if (v119 == v118) {
      goto LABEL_86;
    }
    do
    {
      uint64_t v87 = *--v85;
      uint64_t v86 = v87;
      *long long v85 = 0;
      if (v87) {
        MEMORY[0x21667D390](v86, 0x1000C8077774924);
      }
    }
    while (v85 != v39);
    goto LABEL_85;
  }
  return v35;
}

void mlir::memref::CollapseShapeOp::getCanonicalizationPatterns()
{
}

unint64_t mlir::memref::ExpandShapeOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  int v3 = *(uint64_t **)(a2 + 48);
  uint64_t v15 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp)
  {
    uint64_t v5 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id)
    {
      unint64_t v6 = *(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v7 = *(_DWORD *)(v2 + 36) ? v2 - 16 : 0;
      if (v6 == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
        return *(void *)(*(void *)(v5 + 72) + 24) | 4;
      }
    }
  }
  uint64_t v8 = *v3;
  if (!*v3) {
    return 0;
  }
  BOOL v9 = mlir::DenseElementsAttr::classof(*v3);
  uint64_t v10 = v9 ? v8 : 0;
  uint64_t v15 = v10;
  if (!v9) {
    return 0;
  }
  if (*(_DWORD *)(v2 + 36)) {
    uint64_t v11 = v2 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v12) {
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  return mlir::DenseElementsAttr::reshape(&v15, (uint64_t)v12, v13) & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::memref::CollapseShapeOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  int v3 = *(uint64_t **)(a2 + 48);
  uint64_t v15 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp)
  {
    uint64_t v5 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id)
    {
      unint64_t v6 = *(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v7 = *(_DWORD *)(v2 + 36) ? v2 - 16 : 0;
      if (v6 == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
        return *(void *)(*(void *)(v5 + 72) + 24) | 4;
      }
    }
  }
  uint64_t v8 = *v3;
  if (!*v3) {
    return 0;
  }
  BOOL v9 = mlir::DenseElementsAttr::classof(*v3);
  uint64_t v10 = v9 ? v8 : 0;
  uint64_t v15 = v10;
  if (!v9) {
    return 0;
  }
  if (*(_DWORD *)(v2 + 36)) {
    uint64_t v11 = v2 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v12) {
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  return mlir::DenseElementsAttr::reshape(&v15, (uint64_t)v12, v13) & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::memref::ReshapeOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v4 = *(void *)a1 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);

  return a2(a3, NextResultAtOffset, "reshape", 7);
}

uint64_t mlir::memref::ReshapeOp::verify(mlir::memref::ReshapeOp *this)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v3 = *(void *)this - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v3, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v2 + 8);
    unint64_t RawStringData = v2;
    uint64_t v46 = v5;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData);
    if (v4) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t RawStringData = 0;
    uint64_t v46 = 0;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData);
    if (v4)
    {
LABEL_6:
      uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v4 + 8);
      unint64_t RawStringData = v4;
      uint64_t v46 = v7;
      if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData)) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  unint64_t RawStringData = v4;
  uint64_t v46 = 0;
  if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData))
  {
LABEL_7:
    v43[0] = (void **)"element types of source and destination memref types should be the same";
    __int16 v44 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v43, (uint64_t)&RawStringData);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v53)
    {
      BOOL v9 = __p;
      if (__p)
      {
        uint64_t v10 = v52;
        uint64_t v11 = __p;
        if (v52 != __p)
        {
          do
            uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          uint64_t v11 = __p;
        }
        uint64_t v52 = v9;
        operator delete(v11);
      }
      uint64_t v12 = v49;
      if (!v49) {
        goto LABEL_78;
      }
      uint64_t v13 = v50;
      unint64_t v14 = v49;
      if (v50 == v49)
      {
LABEL_77:
        uint64_t v50 = v12;
        operator delete(v14);
LABEL_78:
        if (v47 != &v48) {
          free(v47);
        }
        return v8;
      }
      do
      {
        uint64_t v16 = *--v13;
        uint64_t v15 = v16;
        *uint64_t v13 = 0;
        if (v16) {
          MEMORY[0x21667D390](v15, 0x1000C8077774924);
        }
      }
      while (v13 != v12);
LABEL_76:
      unint64_t v14 = v49;
      goto LABEL_77;
    }
    return v8;
  }
LABEL_23:
  if (*(_UNKNOWN **)(*(void *)v2 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    unint64_t v17 = v2;
  }
  else {
    unint64_t v17 = 0;
  }
  unint64_t v42 = v17;
  if (v17)
  {
    unint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v42);
    uint64_t v46 = v18;
    if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
    {
      v43[0] = (void **)"source memref type should have identity affine map";
      __int16 v44 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v43, (uint64_t)&RawStringData);
      uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      }
      if (v53)
      {
        uint64_t v28 = __p;
        if (__p)
        {
          long long v29 = v52;
          uint64_t v30 = __p;
          if (v52 != __p)
          {
            do
              long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
            while (v29 != v28);
            uint64_t v30 = __p;
          }
          uint64_t v52 = v28;
          operator delete(v30);
        }
        uint64_t v12 = v49;
        if (!v49) {
          goto LABEL_78;
        }
        uint64_t v31 = v50;
        unint64_t v14 = v49;
        if (v50 == v49) {
          goto LABEL_77;
        }
        do
        {
          uint64_t v33 = *--v31;
          uint64_t v32 = v33;
          void *v31 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v31 != v12);
        goto LABEL_76;
      }
      return v8;
    }
  }
  unint64_t RawStringData = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&RawStringData);
  if (*(_UNKNOWN **)(*(void *)v4 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    unint64_t v20 = v4;
  }
  else {
    unint64_t v20 = 0;
  }
  unint64_t v42 = v20;
  if (!v20) {
    return 1;
  }
  unint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v42);
  uint64_t v46 = v21;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v43[0] = (void **)"result memref type should have identity affine map";
    __int16 v44 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v43, (uint64_t)&RawStringData);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v53)
    {
      long long v34 = __p;
      if (__p)
      {
        uint64_t v35 = v52;
        uint64_t v36 = __p;
        if (v52 != __p)
        {
          do
            uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
          while (v35 != v34);
          uint64_t v36 = __p;
        }
        uint64_t v52 = v34;
        operator delete(v36);
      }
      uint64_t v12 = v49;
      if (!v49) {
        goto LABEL_78;
      }
      uint64_t v37 = v50;
      unint64_t v14 = v49;
      if (v50 == v49) {
        goto LABEL_77;
      }
      do
      {
        uint64_t v39 = *--v37;
        uint64_t v38 = v39;
        void *v37 = 0;
        if (v39) {
          MEMORY[0x21667D390](v38, 0x1000C8077774924);
        }
      }
      while (v37 != v12);
      goto LABEL_76;
    }
    return v8;
  }
  if (v19 != 0x8000000000000000)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
    if (v19 != v40)
    {
      v43[0] = (void **)"length of shape operand differs from the result's memref rank";
      __int16 v44 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v43, (uint64_t)&RawStringData);
      uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&RawStringData);
      return v8;
    }
    return 1;
  }
  v43[0] = (void **)"cannot use shape operand with dynamic length to reshape to statically-ranked memref type";
  __int16 v44 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, v43, (uint64_t)&RawStringData);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
  if (RawStringData) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
  }
  if (v53)
  {
    uint64_t v22 = __p;
    if (__p)
    {
      uint64_t v23 = v52;
      long long v24 = __p;
      if (v52 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        long long v24 = __p;
      }
      uint64_t v52 = v22;
      operator delete(v24);
    }
    uint64_t v12 = v49;
    if (!v49) {
      goto LABEL_78;
    }
    uint64_t v25 = v50;
    unint64_t v14 = v49;
    if (v50 == v49) {
      goto LABEL_77;
    }
    do
    {
      uint64_t v27 = *--v25;
      uint64_t v26 = v27;
      void *v25 = 0;
      if (v27) {
        MEMORY[0x21667D390](v26, 0x1000C8077774924);
      }
    }
    while (v25 != v12);
    goto LABEL_76;
  }
  return v8;
}

uint64_t mlir::memref::StoreOp::verify(mlir::memref::StoreOp *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    uint64_t v3 = *(unsigned int *)(v2 + 68);
  }
  else {
    uint64_t v3 = 0;
  }
  v17[0] = *(void *)(*(void *)(*(void *)(v2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v17);
  if (v4 + 2 == v3) {
    return 1;
  }
  uint64_t v15 = (void **)"store index operand count not equal to memref rank";
  __int16 v16 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v15, (uint64_t)v17);
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v17[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
  }
  if (v24)
  {
    unint64_t v6 = __p;
    if (__p)
    {
      uint64_t v7 = v23;
      uint64_t v8 = __p;
      if (v23 != __p)
      {
        do
          uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        uint64_t v8 = __p;
      }
      uint64_t v23 = v6;
      operator delete(v8);
    }
    BOOL v9 = v20;
    if (v20)
    {
      uint64_t v10 = v21;
      uint64_t v11 = v20;
      if (v21 != v20)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          *uint64_t v10 = 0;
          if (v13) {
            MEMORY[0x21667D390](v12, 0x1000C8077774924);
          }
        }
        while (v10 != v9);
        uint64_t v11 = v20;
      }
      uint64_t v21 = v9;
      operator delete(v11);
    }
    if (v18 != &v19) {
      free(v18);
    }
  }
  return v5;
}

uint64_t mlir::memref::StoreOp::fold(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) != 0 && (uint64_t v2 = *(unsigned int *)(v1 + 68), v2))
  {
    char v3 = 0;
    uint64_t v4 = *(uint64_t **)(v1 + 72);
    uint64_t v5 = v4[3];
    uint64_t v6 = 32 * v2;
    do
    {
      uint64_t v12 = v4[3];
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (DefiningOp)
      {
        if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id
          && v4[3] != v5)
        {
          uint64_t v8 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
          if (*(_UNKNOWN **)(*(void *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
          {
            BOOL v9 = (uint64_t *)v4[1];
            if (v9)
            {
              uint64_t *v9 = *v4;
              if (*v4) {
                *(void *)(*v4 + 8) = v4[1];
              }
            }
            v4[3] = (uint64_t)v8;
            uint64_t v10 = *v8;
            uint64_t *v4 = *v8;
            v4[1] = (uint64_t)v8;
            if (v10) {
              *(void *)(v10 + 8) = v4;
            }
            *uint64_t v8 = (uint64_t)v4;
            char v3 = 1;
          }
        }
      }
      v4 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t mlir::memref::SubViewOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v4 = *(void *)a1 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);

  return a2(a3, NextResultAtOffset, "subview", 7);
}

uint64_t mlir::memref::SubViewOp::inferResultType(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, mlir::AffineMap *a5, uint64_t *a6, uint64_t a7)
{
  v50[7] = *MEMORY[0x263EF8340];
  uint64_t v44 = a1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44);
  mlir::getStridesAndOffset(v44, (uint64_t)&v48);
  uint64_t v13 = v50[6];
  unint64_t v14 = (uint64_t *)v48;
  uint64_t v15 = v49;
  if (a3 && v49)
  {
    uint64_t v16 = 8 * v49 - 8;
    uint64_t v17 = 8 * a3 - 8;
    uint64_t v18 = (uint64_t *)v48;
    do
    {
      uint64_t v20 = *a2++;
      uint64_t v19 = v20;
      uint64_t v22 = *v18++;
      uint64_t v21 = v22;
      BOOL v23 = v19 == 0x8000000000000000;
      if (v19 == 0x8000000000000000) {
        uint64_t v19 = 0;
      }
      if (v21 == 0x8000000000000000)
      {
        uint64_t v21 = 0;
        BOOL v23 = 1;
      }
      uint64_t v24 = v21 * v19;
      if (v23) {
        uint64_t v24 = 0;
      }
      if (v13 == 0x8000000000000000) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v13;
      }
      if (v13 == 0x8000000000000000) {
        BOOL v23 = 1;
      }
      uint64_t v26 = v24 + v25;
      if (v23) {
        uint64_t v13 = 0x8000000000000000;
      }
      else {
        uint64_t v13 = v26;
      }
      if (!v17) {
        break;
      }
      uint64_t v27 = v16;
      v16 -= 8;
      v17 -= 8;
    }
    while (v27);
  }
  uint64_t v45 = v47;
  uint64_t v46 = 0x400000000;
  if (a3 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, a3, 8);
    unint64_t v14 = (uint64_t *)v48;
    uint64_t v15 = v49;
  }
  if (v15 && a7)
  {
    unsigned int v28 = v46;
    uint64_t v29 = 8 * a7 - 8;
    uint64_t v30 = 8 * v15 - 8;
    do
    {
      uint64_t v31 = *a6;
      if (*v14 == 0x8000000000000000) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = *v14;
      }
      if (v31 == 0x8000000000000000)
      {
        uint64_t v31 = 0;
        BOOL v33 = 1;
      }
      else
      {
        BOOL v33 = *v14 == 0x8000000000000000;
      }
      if (v33) {
        unint64_t v34 = 0x8000000000000000;
      }
      else {
        unint64_t v34 = v31 * v32;
      }
      if (v28 >= HIDWORD(v46))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, v28 + 1, 8);
        *((void *)v45 + v46) = v34;
        unsigned int v28 = v46 + 1;
        LODWORD(v46) = v46 + 1;
        if (!v30) {
          break;
        }
      }
      else
      {
        *((void *)v45 + v28) = v34;
        unsigned int v28 = v46 + 1;
        LODWORD(v46) = v46 + 1;
        if (!v30) {
          break;
        }
      }
      ++v14;
      ++a6;
      uint64_t v35 = v29;
      v29 -= 8;
      v30 -= 8;
    }
    while (v35);
  }
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v44);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v44);
  uint64_t v38 = (void *)mlir::StridedLayoutAttr::get(Context, v13, (uint64_t)v45, v46);
  uint64_t v39 = v38;
  if (v38) {
    uint64_t v40 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v38 + 8);
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v44);
  uint64_t v42 = mlir::MemRefType::get(a4, a5, RHS, v39, v40, LayerSchedule);
  if (v45 != v47) {
    free(v45);
  }
  if (v48 != v50) {
    free(v48);
  }
  return v42;
}

uint64_t mlir::memref::SubViewOp::inferResultType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  v33[6] = *MEMORY[0x263EF8340];
  uint64_t v31 = v33;
  uint64_t v32 = 0x600000000;
  unsigned int v28 = (uint64_t *)v30;
  uint64_t v29 = 0x600000000;
  uint64_t v25 = v27;
  uint64_t v26 = 0x600000000;
  v23[0] = v24;
  v23[1] = (void *)0x600000000;
  v21[0] = v22;
  v21[1] = (void *)0x600000000;
  v19[0] = v20;
  v19[1] = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a2, a3, (uint64_t)v23, (uint64_t)&v31);
  mlir::dispatchIndexOpFoldResults(a4, a5, (uint64_t)v21, (uint64_t)&v28);
  mlir::dispatchIndexOpFoldResults(a6, a7, (uint64_t)v19, (uint64_t)&v25);
  if (!v32)
  {
LABEL_5:
    if (v29)
    {
      uint64_t v14 = 8 * v29;
      uint64_t v15 = v28;
      while ((unint64_t)*v15 < 0x8000000000000001)
      {
        ++v15;
        v14 -= 8;
        if (!v14) {
          goto LABEL_9;
        }
      }
      uint64_t v16 = 0;
      uint64_t v17 = (void *)v19[0];
      if ((unsigned char *)v19[0] == v20) {
        goto LABEL_13;
      }
    }
    else
    {
LABEL_9:
      uint64_t v16 = mlir::memref::SubViewOp::inferResultType(a1, v31, v32, v28, (mlir::AffineMap *)v29, (uint64_t *)v25, v26);
      uint64_t v17 = (void *)v19[0];
      if ((unsigned char *)v19[0] == v20) {
        goto LABEL_13;
      }
    }
LABEL_12:
    free(v17);
    goto LABEL_13;
  }
  uint64_t v12 = 8 * v32;
  uint64_t v13 = v31;
  while ((unint64_t)*v13 < 0x8000000000000001)
  {
    ++v13;
    v12 -= 8;
    if (!v12) {
      goto LABEL_5;
    }
  }
  uint64_t v16 = 0;
  uint64_t v17 = (void *)v19[0];
  if ((unsigned char *)v19[0] != v20) {
    goto LABEL_12;
  }
LABEL_13:
  if (v21[0] != v22) {
    free(v21[0]);
  }
  if (v23[0] != v24) {
    free(v23[0]);
  }
  if (v25 != v27) {
    free(v25);
  }
  if (v28 != (uint64_t *)v30) {
    free(v28);
  }
  if (v31 != v33) {
    free(v31);
  }
  return v16;
}

void mlir::memref::SubViewOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t a10, void *__src, uint64_t a12)
{
  v42[6] = *MEMORY[0x263EF8340];
  uint64_t v40 = v42;
  uint64_t v41 = 0x600000000;
  uint64_t v37 = (uint64_t *)v39;
  uint64_t v38 = 0x600000000;
  unint64_t v34 = v36;
  uint64_t v35 = 0x600000000;
  uint64_t v31 = v33;
  uint64_t v32 = 0x600000000;
  unsigned int v28 = v30;
  uint64_t v29 = 0x600000000;
  uint64_t v25 = v27;
  uint64_t v26 = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)&v31, (uint64_t)&v40);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)&v28, (uint64_t)&v37);
  mlir::dispatchIndexOpFoldResults(a9, a10, (uint64_t)&v25, (uint64_t)&v34);
  if (!a3) {
    a3 = mlir::memref::SubViewOp::inferResultType(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8, v40, v41, v37, (mlir::AffineMap *)v38, (uint64_t *)v34, v35);
  }
  mlir::ValueRange::ValueRange(v24, (uint64_t)v31, v32);
  mlir::ValueRange::ValueRange(v23, (uint64_t)v28, v29);
  mlir::ValueRange::ValueRange(v22, (uint64_t)v25, v26);
  uint64_t DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v40, v41);
  uint64_t v19 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v37, v38);
  uint64_t v20 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v34, v35);
  mlir::memref::SubViewOp::build(v20, a2, a3, a4, v24[0], v24[1], v23[0], v23[1], v22[0], v22[1], DenseI64ArrayAttr, v19, v20);
  *(void *)(a2 + 192) = 0;
  uint64_t v21 = *(unsigned int *)(a2 + 120);
  if (a12 + v21 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a12 + v21, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 120);
  }
  if (a12)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v21), __src, 16 * a12);
    LODWORD(v21) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v21 + a12;
  if (v25 != v27) {
    free(v25);
  }
  if (v28 != v30) {
    free(v28);
  }
  if (v31 != v33) {
    free(v31);
  }
  if (v34 != v36) {
    free(v34);
  }
  if (v37 != (uint64_t *)v39) {
    free(v37);
  }
  if (v40 != v42) {
    free(v40);
  }
}

void mlir::memref::SubViewOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v21 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9, a10);
  uint64_t v18 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  v18[6] = 1;
  void v18[7] = a6;
  v18[8] = a8;
  v18[9] = a10;
  *(void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2) = a11;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2)
            + 8) = a12;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2)
            + 16) = a13;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  if (v19 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v19) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::memref::SubViewOp::verify(mlir::memref::SubViewOp *this)
{
  uint64_t v178 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v154 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  int v3 = *(_DWORD *)(v2 + 36);
  uint64_t v4 = v2 - 16;
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v153 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v154);
  if (LayerSchedule != ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v153))
  {
    v164[0] = "different memory spaces specified for base memref type ";
    __int16 v166 = 259;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)v164, (uint64_t)v167);
    if (v167[0])
    {
      uint64_t v7 = &v161;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v161, v154);
      uint64_t v8 = (char *)v169;
      if (v170 >= v171)
      {
        unint64_t v127 = v170 + 1;
        if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
        {
          int64_t v142 = (char *)&v161 - (unsigned char *)v169;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v127, 24);
          uint64_t v8 = (char *)v169;
          uint64_t v7 = (void **)((char *)v169 + v142);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v127, 24);
          uint64_t v7 = &v161;
          uint64_t v8 = (char *)v169;
        }
      }
      BOOL v9 = &v8[24 * v170];
      long long v10 = *(_OWORD *)v7;
      *((void *)v9 + 2) = v7[2];
      *(_OWORD *)BOOL v9 = v10;
      uint64_t v11 = ++v170;
      if (v167[0])
      {
        LODWORD(v161) = 3;
        BOOL v162 = " and subview memref type ";
        uint64_t v163 = 25;
        uint64_t v12 = &v161;
        uint64_t v13 = (char *)v169;
        if (v11 >= v171)
        {
          unint64_t v128 = v11 + 1;
          BOOL v129 = (char *)v169 + 24 * v11 > (char *)&v161;
          if (v169 <= &v161 && v129)
          {
            int64_t v143 = (char *)&v161 - (unsigned char *)v169;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v128, 24);
            uint64_t v13 = (char *)v169;
            uint64_t v12 = (void **)((char *)v169 + v143);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v128, 24);
            uint64_t v12 = &v161;
            uint64_t v13 = (char *)v169;
          }
        }
        uint64_t v14 = &v13[24 * v170];
        long long v15 = *(_OWORD *)v12;
        *((void *)v14 + 2) = v12[2];
        *(_OWORD *)uint64_t v14 = v15;
        ++v170;
        if (v167[0])
        {
          uint64_t v16 = &v161;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v161, v153);
          uint64_t v17 = (char *)v169;
          if (v170 >= v171)
          {
            unint64_t v130 = v170 + 1;
            if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
            {
              int64_t v144 = (char *)&v161 - (unsigned char *)v169;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v130, 24);
              uint64_t v17 = (char *)v169;
              uint64_t v16 = (void **)((char *)v169 + v144);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v130, 24);
              uint64_t v16 = &v161;
              uint64_t v17 = (char *)v169;
            }
          }
          uint64_t v18 = &v17[24 * v170];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = v16[2];
          *(_OWORD *)uint64_t v18 = v19;
          ++v170;
        }
      }
    }
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v167);
    if (v167[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v167);
    }
    if (v177)
    {
      uint64_t v21 = __p;
      if (__p)
      {
        uint64_t v22 = v176;
        BOOL v23 = __p;
        if (v176 != __p)
        {
          do
            uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          BOOL v23 = __p;
        }
        uint64_t v176 = v21;
        operator delete(v23);
      }
      uint64_t v24 = v173;
      if (!v173) {
        goto LABEL_172;
      }
      uint64_t v25 = v174;
      uint64_t v26 = v173;
      if (v174 == v173)
      {
LABEL_171:
        unint64_t v174 = v24;
        operator delete(v26);
LABEL_172:
        if (v169 != v172) {
          free(v169);
        }
        return v20;
      }
      do
      {
        uint64_t v28 = *--v25;
        uint64_t v27 = v28;
        void *v25 = 0;
        if (v28) {
          MEMORY[0x21667D390](v27, 0x1000C8077774924);
        }
      }
      while (v25 != v24);
LABEL_170:
      uint64_t v26 = v173;
      goto LABEL_171;
    }
    return v20;
  }
  if (mlir::isStrided(v154))
  {
    uint64_t v29 = v154;
    v167[0] = *(void **)(*(void *)this
                       + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                       + 64);
    uint64_t v30 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v167);
    unint64_t v32 = v31;
    unint64_t v33 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v33 = 0;
    }
    v167[0] = *(void **)(v33 + 8);
    unint64_t v34 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v167);
    uint64_t v36 = v35;
    unint64_t v37 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
    if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
      unint64_t v37 = 0;
    }
    v167[0] = *(void **)(v37 + 16);
    uint64_t v38 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v167);
    uint64_t v40 = (void **)mlir::memref::SubViewOp::inferResultType(v29, v30, v32, v34, v36, v38, v39);
    uint64_t v41 = (void *)v153;
    mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(this, (uint64_t)&v161);
    uint64_t v42 = v161;
    uint64_t v43 = v162;
    long long v155 = v41;
    uint64_t v156 = v40;
    if (v40)
    {
      uint64_t v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v40 + 8);
      if (v41) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v44 = 0;
      if (v41)
      {
LABEL_33:
        mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v41 + 8);
        isRankReduceduint64_t Type = mlir::isRankReducedType(v40, v44, v41);
        if (!isRankReducedType)
        {
LABEL_56:
          computeMemRefRankReductionMask(&v158, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42, v43);
          if ((_BYTE)v159)
          {
            uint64_t v61 = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v156);
            if (v61 == ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v155))
            {
              uint64_t v62 = (uint64_t)v155;
              uint64_t v160 = 0;
              uint64_t v157 = 0;
              v167[0] = &v168;
              v167[1] = (void *)0x600000000;
              v164[0] = v165;
              v164[1] = (void *)0x600000000;
              int StridesAndOffset = mlir::getStridesAndOffset((uint64_t)v156, (uint64_t)v167, &v160);
              int v64 = mlir::getStridesAndOffset(v62, (uint64_t)v164, &v157);
              if (v160 != v157 || v64 == 0 || StridesAndOffset == 0) {
                isRankReduceduint64_t Type = 5;
              }
              else {
                isRankReduceduint64_t Type = 0;
              }
              if (v164[0] != v165) {
                free(v164[0]);
              }
              if (v167[0] != &v168) {
                free(v167[0]);
              }
            }
            else
            {
              isRankReduceduint64_t Type = 4;
            }
            uint64_t v67 = v158;
            if ((v158 & 1) == 0 && v158)
            {
              if (*v158 != v158 + 2) {
                free(*v158);
              }
              MEMORY[0x21667D3C0](v67, 0x1080C40EF38A13ELL);
            }
          }
          else
          {
            isRankReduceduint64_t Type = 5;
          }
        }
LABEL_78:
        if (v161 != &v163) {
          free(v161);
        }
        uint64_t v160 = *(void *)this;
        if (v40) {
          uint64_t v68 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v40 + 8);
        }
        else {
          uint64_t v68 = 0;
        }
        unint64_t v158 = v40;
        uint64_t v159 = v68;
        uint64_t v20 = 1;
        switch(isRankReducedType)
        {
          case 1:
            v164[0] = "expected result rank to be smaller or equal to ";
            __int16 v166 = 259;
            mlir::OpState::emitError(&v160, (uint64_t)v164, (uint64_t)v167);
            if (v167[0])
            {
              LODWORD(v161) = 3;
              BOOL v162 = "the source rank. ";
              uint64_t v163 = 17;
              uint64_t v69 = &v161;
              uint64_t v70 = (char *)v169;
              if (v170 >= v171)
              {
                unint64_t v134 = v170 + 1;
                if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
                {
                  int64_t v147 = (char *)&v161 - (unsigned char *)v169;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v134, 24);
                  uint64_t v70 = (char *)v169;
                  uint64_t v69 = (void **)((char *)v169 + v147);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v134, 24);
                  uint64_t v69 = &v161;
                  uint64_t v70 = (char *)v169;
                }
              }
              long long v71 = &v70[24 * v170];
              long long v72 = *(_OWORD *)v69;
              *((void *)v71 + 2) = v69[2];
              *(_OWORD *)long long v71 = v72;
              ++v170;
            }
            uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v167);
            if (v167[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v167);
            }
            if (v177)
            {
              char v73 = __p;
              if (__p)
              {
                unsigned int v74 = v176;
                uint64_t v75 = __p;
                if (v176 != __p)
                {
                  do
                    unsigned int v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
                  while (v74 != v73);
                  uint64_t v75 = __p;
                }
                uint64_t v176 = v73;
                operator delete(v75);
              }
              uint64_t v24 = v173;
              if (!v173) {
                goto LABEL_172;
              }
              uint64_t v76 = v174;
              uint64_t v26 = v173;
              if (v174 == v173) {
                goto LABEL_171;
              }
              do
              {
                uint64_t v78 = *--v76;
                uint64_t v77 = v78;
                void *v76 = 0;
                if (v78) {
                  MEMORY[0x21667D390](v77, 0x1000C8077774924);
                }
              }
              while (v76 != v24);
              goto LABEL_170;
            }
            break;
          case 2:
            v164[0] = "expected result type to be ";
            __int16 v166 = 259;
            mlir::OpState::emitError(&v160, (uint64_t)v164, (uint64_t)v167);
            if (v167[0])
            {
              int v79 = &v161;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v161, (uint64_t)v40);
              uint64_t v80 = (char *)v169;
              if (v170 >= v171)
              {
                unint64_t v135 = v170 + 1;
                if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
                {
                  int64_t v148 = (char *)&v161 - (unsigned char *)v169;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v135, 24);
                  uint64_t v80 = (char *)v169;
                  int v79 = (void **)((char *)v169 + v148);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v135, 24);
                  int v79 = &v161;
                  uint64_t v80 = (char *)v169;
                }
              }
              uint64_t v81 = &v80[24 * v170];
              long long v82 = *(_OWORD *)v79;
              *((void *)v81 + 2) = v79[2];
              *(_OWORD *)uint64_t v81 = v82;
              uint64_t v83 = ++v170;
              if (v167[0])
              {
                LODWORD(v161) = 3;
                BOOL v162 = " or a rank-reduced version. (mismatch of result sizes) ";
                uint64_t v163 = 55;
                unint64_t v84 = &v161;
                long long v85 = (char *)v169;
                if (v83 >= v171)
                {
                  unint64_t v138 = v83 + 1;
                  BOOL v139 = (char *)v169 + 24 * v83 > (char *)&v161;
                  if (v169 <= &v161 && v139)
                  {
                    int64_t v151 = (char *)&v161 - (unsigned char *)v169;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v138, 24);
                    long long v85 = (char *)v169;
                    unint64_t v84 = (void **)((char *)v169 + v151);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v138, 24);
                    unint64_t v84 = &v161;
                    long long v85 = (char *)v169;
                  }
                }
                uint64_t v86 = &v85[24 * v170];
                long long v87 = *(_OWORD *)v84;
                *((void *)v86 + 2) = v84[2];
                *(_OWORD *)uint64_t v86 = v87;
                ++v170;
              }
            }
            uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v167);
            if (v167[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v167);
            }
            if (v177)
            {
              int64_t v88 = __p;
              if (__p)
              {
                uint64_t v89 = v176;
                unint64_t v90 = __p;
                if (v176 != __p)
                {
                  do
                    uint64_t v89 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v89 - 1);
                  while (v89 != v88);
                  unint64_t v90 = __p;
                }
                uint64_t v176 = v88;
                operator delete(v90);
              }
              uint64_t v24 = v173;
              if (!v173) {
                goto LABEL_172;
              }
              unint64_t v91 = v174;
              uint64_t v26 = v173;
              if (v174 == v173) {
                goto LABEL_171;
              }
              do
              {
                uint64_t v93 = *--v91;
                uint64_t v92 = v93;
                *unint64_t v91 = 0;
                if (v93) {
                  MEMORY[0x21667D390](v92, 0x1000C8077774924);
                }
              }
              while (v91 != v24);
              goto LABEL_170;
            }
            break;
          case 3:
            v164[0] = "expected result element type to be ";
            __int16 v166 = 259;
            mlir::OpState::emitError(&v160, (uint64_t)v164, (uint64_t)v167);
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v158);
            if (v167[0])
            {
              unint64_t v95 = &v161;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v161, OperandRange);
              BOOL v96 = (char *)v169;
              if (v170 >= v171)
              {
                unint64_t v136 = v170 + 1;
                if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
                {
                  int64_t v149 = (char *)&v161 - (unsigned char *)v169;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v136, 24);
                  BOOL v96 = (char *)v169;
                  unint64_t v95 = (void **)((char *)v169 + v149);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v136, 24);
                  unint64_t v95 = &v161;
                  BOOL v96 = (char *)v169;
                }
              }
              unint64_t v97 = &v96[24 * v170];
              long long v98 = *(_OWORD *)v95;
              *((void *)v97 + 2) = v95[2];
              *(_OWORD *)unint64_t v97 = v98;
              ++v170;
            }
            uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v167);
            if (v167[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v167);
            }
            if (v177)
            {
              int64_t v99 = __p;
              if (__p)
              {
                int64_t v100 = v176;
                int64_t v101 = __p;
                if (v176 != __p)
                {
                  do
                    int64_t v100 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v100 - 1);
                  while (v100 != v99);
                  int64_t v101 = __p;
                }
                uint64_t v176 = v99;
                operator delete(v101);
              }
              uint64_t v24 = v173;
              if (!v173) {
                goto LABEL_172;
              }
              int64_t v102 = v174;
              uint64_t v26 = v173;
              if (v174 == v173) {
                goto LABEL_171;
              }
              do
              {
                uint64_t v104 = *--v102;
                uint64_t v103 = v104;
                *int64_t v102 = 0;
                if (v104) {
                  MEMORY[0x21667D390](v103, 0x1000C8077774924);
                }
              }
              while (v102 != v24);
              goto LABEL_170;
            }
            break;
          case 4:
            v164[0] = "expected result and source memory spaces to match.";
            __int16 v166 = 259;
            mlir::OpState::emitError(&v160, (uint64_t)v164, (uint64_t)v167);
            uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v167);
            if (v167[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v167);
            }
            if (v177)
            {
              __int16 v105 = __p;
              if (__p)
              {
                unint64_t v106 = v176;
                unint64_t v107 = __p;
                if (v176 != __p)
                {
                  do
                    unint64_t v106 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v106 - 1);
                  while (v106 != v105);
                  unint64_t v107 = __p;
                }
                uint64_t v176 = v105;
                operator delete(v107);
              }
              uint64_t v24 = v173;
              if (!v173) {
                goto LABEL_172;
              }
              int v108 = v174;
              uint64_t v26 = v173;
              if (v174 == v173) {
                goto LABEL_171;
              }
              do
              {
                uint64_t v110 = *--v108;
                uint64_t v109 = v110;
                *int v108 = 0;
                if (v110) {
                  MEMORY[0x21667D390](v109, 0x1000C8077774924);
                }
              }
              while (v108 != v24);
              goto LABEL_170;
            }
            break;
          case 5:
            v164[0] = "expected result type to be ";
            __int16 v166 = 259;
            mlir::OpState::emitError(&v160, (uint64_t)v164, (uint64_t)v167);
            if (v167[0])
            {
              unint64_t v111 = &v161;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v161, (uint64_t)v40);
              uint64_t v112 = (char *)v169;
              if (v170 >= v171)
              {
                unint64_t v137 = v170 + 1;
                if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
                {
                  int64_t v150 = (char *)&v161 - (unsigned char *)v169;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v137, 24);
                  uint64_t v112 = (char *)v169;
                  unint64_t v111 = (void **)((char *)v169 + v150);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v137, 24);
                  unint64_t v111 = &v161;
                  uint64_t v112 = (char *)v169;
                }
              }
              uint64_t v113 = &v112[24 * v170];
              long long v114 = *(_OWORD *)v111;
              *((void *)v113 + 2) = v111[2];
              *(_OWORD *)uint64_t v113 = v114;
              uint64_t v115 = ++v170;
              if (v167[0])
              {
                LODWORD(v161) = 3;
                BOOL v162 = " or a rank-reduced version. (mismatch of result layout) ";
                uint64_t v163 = 56;
                unsigned int v116 = &v161;
                BOOL v117 = (char *)v169;
                if (v115 >= v171)
                {
                  unint64_t v140 = v115 + 1;
                  BOOL v141 = (char *)v169 + 24 * v115 > (char *)&v161;
                  if (v169 <= &v161 && v141)
                  {
                    int64_t v152 = (char *)&v161 - (unsigned char *)v169;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v140, 24);
                    BOOL v117 = (char *)v169;
                    unsigned int v116 = (void **)((char *)v169 + v152);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v140, 24);
                    unsigned int v116 = &v161;
                    BOOL v117 = (char *)v169;
                  }
                }
                unint64_t v118 = &v117[24 * v170];
                long long v119 = *(_OWORD *)v116;
                *((void *)v118 + 2) = v116[2];
                *(_OWORD *)unint64_t v118 = v119;
                ++v170;
              }
            }
            uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v167);
            if (v167[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v167);
            }
            if (v177)
            {
              int64_t v120 = __p;
              if (__p)
              {
                int64_t v121 = v176;
                char v122 = __p;
                if (v176 != __p)
                {
                  do
                    int64_t v121 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v121 - 1);
                  while (v121 != v120);
                  char v122 = __p;
                }
                uint64_t v176 = v120;
                operator delete(v122);
              }
              uint64_t v24 = v173;
              if (!v173) {
                goto LABEL_172;
              }
              uint64_t v123 = v174;
              uint64_t v26 = v173;
              if (v174 == v173) {
                goto LABEL_171;
              }
              do
              {
                uint64_t v125 = *--v123;
                uint64_t v124 = v125;
                *uint64_t v123 = 0;
                if (v125) {
                  MEMORY[0x21667D390](v124, 0x1000C8077774924);
                }
              }
              while (v123 != v24);
              goto LABEL_170;
            }
            break;
          default:
            return v20;
        }
        return v20;
      }
    }
    isRankReduceduint64_t Type = mlir::isRankReducedType(v40, v44, v41);
    if (!isRankReducedType) {
      goto LABEL_56;
    }
    goto LABEL_78;
  }
  v164[0] = "base type ";
  __int16 v166 = 259;
  mlir::OpState::emitError((uint64_t *)this, (uint64_t)v164, (uint64_t)v167);
  if (v167[0])
  {
    uint64_t v46 = &v161;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v161, v154);
    uint64_t v47 = (char *)v169;
    if (v170 >= v171)
    {
      unint64_t v131 = v170 + 1;
      if (v169 <= &v161 && (char *)v169 + 24 * v170 > (char *)&v161)
      {
        int64_t v145 = (char *)&v161 - (unsigned char *)v169;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v131, 24);
        uint64_t v47 = (char *)v169;
        uint64_t v46 = (void **)((char *)v169 + v145);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v131, 24);
        uint64_t v46 = &v161;
        uint64_t v47 = (char *)v169;
      }
    }
    uint64_t v48 = &v47[24 * v170];
    long long v49 = *(_OWORD *)v46;
    *((void *)v48 + 2) = v46[2];
    *(_OWORD *)uint64_t v48 = v49;
    uint64_t v50 = ++v170;
    if (v167[0])
    {
      LODWORD(v161) = 3;
      BOOL v162 = " is not strided";
      uint64_t v163 = 15;
      uint64_t v51 = &v161;
      uint64_t v52 = (char *)v169;
      if (v50 >= v171)
      {
        unint64_t v132 = v50 + 1;
        BOOL v133 = (char *)v169 + 24 * v50 > (char *)&v161;
        if (v169 <= &v161 && v133)
        {
          int64_t v146 = (char *)&v161 - (unsigned char *)v169;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v132, 24);
          uint64_t v52 = (char *)v169;
          uint64_t v51 = (void **)((char *)v169 + v146);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, v172, v132, 24);
          uint64_t v51 = &v161;
          uint64_t v52 = (char *)v169;
        }
      }
      char v53 = &v52[24 * v170];
      long long v54 = *(_OWORD *)v51;
      *((void *)v53 + 2) = v51[2];
      *(_OWORD *)char v53 = v54;
      ++v170;
    }
  }
  uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v167);
  if (v167[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v167);
  }
  if (v177)
  {
    uint64_t v55 = __p;
    if (__p)
    {
      uint64_t v56 = v176;
      long long v57 = __p;
      if (v176 != __p)
      {
        do
          uint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
        while (v56 != v55);
        long long v57 = __p;
      }
      uint64_t v176 = v55;
      operator delete(v57);
    }
    uint64_t v24 = v173;
    if (!v173) {
      goto LABEL_172;
    }
    uint64_t v58 = v174;
    uint64_t v26 = v173;
    if (v174 == v173) {
      goto LABEL_171;
    }
    do
    {
      uint64_t v60 = *--v58;
      uint64_t v59 = v60;
      *uint64_t v58 = 0;
      if (v60) {
        MEMORY[0x21667D390](v59, 0x1000C8077774924);
      }
    }
    while (v58 != v24);
    goto LABEL_170;
  }
  return v20;
}

void mlir::memref::SubViewOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::memref::SubViewOp::fold(mlir::memref::ReinterpretCastOp *a1)
{
  v49[4] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v2 = *(void *)a1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  int v3 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  v37[0] = v3;
  v37[1] = v4;
  uint64_t v5 = (void *)(*(void *)(*(void *)(*(void *)(*(void *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v5) {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v37))
  {
    Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)v37);
    if (v7)
    {
      uint64_t v8 = 8 * v7;
      while (*Shape != 0x8000000000000000)
      {
        ++Shape;
        v8 -= 8;
        if (!v8) {
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      if ((void *)v37[0] == v5) {
        return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
      }
    }
  }
  uint64_t v47 = *(char **)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v47);
  if (!DefiningOp) {
    return 0;
  }
  long long v10 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id;
  uint64_t v12 = v10 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id ? DefiningOp : 0;
  uint64_t v36 = v12;
  if (!v11) {
    return 0;
  }
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v36, (uint64_t)&v47);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(a1, (uint64_t)&v44);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets(a1, (uint64_t)&v41);
  if (!v42)
  {
    int v18 = 0;
    mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(a1, (uint64_t)&v38);
    uint64_t v19 = v39;
    if (v39) {
      goto LABEL_29;
    }
LABEL_39:
    int v25 = 0;
    uint64_t v26 = v45;
    uint64_t v27 = v48;
    if (v45 != v48)
    {
LABEL_59:
      if (v38 != v40) {
        free(v38);
      }
      if (v41 != v43) {
        free(v41);
      }
      if (v44 != v46) {
        free(v44);
      }
      if (v47 != (char *)v49) {
        free(v47);
      }
      return 0;
    }
    goto LABEL_40;
  }
  uint64_t v13 = (uint64_t *)v41;
  uint64_t v14 = 8 * v42 - 8;
  do
  {
    uint64_t v15 = *v13++;
    isunint64_t ConstantIntValue = mlir::isConstantIntValue(v15, 0);
    BOOL v17 = !isConstantIntValue || v14 == 0;
    v14 -= 8;
  }
  while (!v17);
  int v18 = !isConstantIntValue;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(a1, (uint64_t)&v38);
  uint64_t v19 = v39;
  if (!v39) {
    goto LABEL_39;
  }
LABEL_29:
  uint64_t v20 = (uint64_t *)v38;
  uint64_t v21 = 8 * v19 - 8;
  do
  {
    uint64_t v22 = *v20++;
    BOOL v23 = mlir::isConstantIntValue(v22, 1);
    BOOL v24 = !v23 || v21 == 0;
    v21 -= 8;
  }
  while (!v24);
  int v25 = !v23;
  uint64_t v26 = v45;
  uint64_t v27 = v48;
  if (v45 != v48) {
    goto LABEL_59;
  }
LABEL_40:
  if (v26)
  {
    uint64_t v29 = 8 * v26 - 8;
    uint64_t v30 = 8 * v27 - 8;
    unint64_t v31 = v44;
    unint64_t v32 = v47;
    while (*v31 == *(void *)v32)
    {
      ++v31;
      v32 += 8;
      if (v29)
      {
        v29 -= 8;
        uint64_t v33 = v30;
        v30 -= 8;
        if (v33) {
          continue;
        }
      }
      goto LABEL_47;
    }
    goto LABEL_59;
  }
  unint64_t v32 = v47;
  unint64_t v31 = v44;
LABEL_47:
  if ((v18 | v25) == 1 || v31 != (void *)((char *)v44 + 8 * v26) || v32 != &v47[8 * v27] || (void *)v37[0] != v5) {
    goto LABEL_59;
  }
  uint64_t v34 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  if (v38 != v40) {
    free(v38);
  }
  if (v41 != v43) {
    free(v41);
  }
  if (v44 != v46) {
    free(v44);
  }
  uint64_t v28 = v34 | 4;
  if (v47 != (char *)v49) {
    free(v47);
  }
  return v28;
}

uint64_t mlir::memref::TransposeOp::getAsmResultNames(void *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "transpose", 9);
}

uint64_t inferTransposeResultType(uint64_t a1, uint64_t a2)
{
  void v34[7] = *MEMORY[0x263EF8340];
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  unint64_t v3 = v2;
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  mlir::getStridesAndOffset(v24, (uint64_t)&v33);
  uint64_t v29 = v32;
  int v31 = 6;
  if (v3 > 6)
  {
    unsigned int v30 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v32, v3, 8);
    size_t v5 = 8 * v3;
    bzero(v29, 8 * v3);
    unsigned int v30 = v3;
    uint64_t v26 = v28;
    uint64_t v27 = 0x600000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v3, 8);
    uint64_t v6 = v26;
    goto LABEL_5;
  }
  if (v3)
  {
    size_t v5 = 8 * v3;
    bzero(v32, 8 * v3);
    unsigned int v30 = v3;
    uint64_t v26 = v28;
    HIDWORD(v27) = 6;
    uint64_t v6 = v28;
LABEL_5:
    memset_pattern16(v6, &unk_211ED5510, v5);
    LODWORD(v27) = v3;
    uint64_t Results = mlir::AffineMap::getResults((mlir::AffineMap *)&v23);
    if (v8) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
  unsigned int v30 = 0;
  uint64_t v26 = v28;
  uint64_t v27 = 0x600000000;
  uint64_t Results = mlir::AffineMap::getResults((mlir::AffineMap *)&v23);
  if (v8)
  {
LABEL_6:
    uint64_t v9 = Results;
    uint64_t v10 = 0;
    uint64_t v11 = 8 * v8;
    do
    {
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v25, *(void *)(v9 + v10));
      uint64_t Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v25);
      *(void *)((char *)v29 + v10) = *(void *)(Value + Position * 8);
      *(void *)((char *)v26 + v10) = v33[Position];
      v10 += 8;
    }
    while (v11 != v10);
  }
LABEL_8:
  uint64_t v25 = v24;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v25);
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v25);
  mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v25);
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v25);
  uint64_t v15 = (uint64_t *)v29;
  uint64_t v16 = (mlir::AffineMap *)v30;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  int v18 = (void *)mlir::StridedLayoutAttr::get(Context, v34[6], (uint64_t)v26, v27);
  uint64_t v19 = v18;
  if (v18) {
    uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v18 + 8);
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = mlir::MemRefType::get(v15, v16, RHS, v19, v20, LayerSchedule);
  if (v26 != v28) {
    free(v26);
  }
  if (v29 != v32) {
    free(v29);
  }
  if (v33 != v34) {
    free(v33);
  }
  return v21;
}

uint64_t mlir::memref::TransposeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  size_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    unsigned char *v5 = 32;
    ++*((void *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, " ", 1uLL);
  }
  else
  {
    unsigned char *v7 = 32;
    ++*((void *)v6 + 4);
  }
  v19[0] = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
  uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  v19[0] = Value;
  mlir::AffineMap::print((mlir::AffineMap *)v19, v9);
  uint64_t v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v19[0] = mlir::Operation::getAttrDictionary(v10);
    uint64_t v11 = (mlir::ArrayAttr *)v19;
  }
  else
  {
    uint64_t v11 = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t v12 = mlir::ArrayAttr::getValue(v11);
  v19[0] = "permutation";
  v19[1] = 11;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, uint64_t))(*(void *)a2 + 192))(a2, v12, v13, v19, 1);
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = *((void *)v14 + 4);
  if ((unint64_t)(*((void *)v14 + 3) - v15) > 2)
  {
    *(unsigned char *)(v15 + 2) = 32;
    *(_WORD *)uint64_t v15 = 14880;
    *((void *)v14 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v14, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v17 = (_DWORD *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v17 > 3uLL)
  {
    *BOOL v17 = 544175136;
    *((void *)v16 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v16, " to ", 4uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *((void *)*this - 1) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::TransposeOp::parse(uint64_t a1, mlir::Attribute *a2)
{
  memset(v9, 0, 24);
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v6 = 0;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 672))()) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 472))(a1, &v8)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, (uint64_t)a2 + 112)) {
    return 0;
  }
  if (!mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v7)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, v7, (uint64_t)a2 + 16))return 0; {
  __int16 v11 = 257;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, unsigned char *))(*(void *)a1 + 368))(a1, "to", 2, v10)|| !(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)|| !mlir::AsmParser::addTypeToList(a1, v6, (uint64_t)a2 + 64))
  {
    return 0;
  }
  uint64_t v4 = mlir::AffineMapAttr::get(v8);
  mlir::OperationState::addAttribute(a2, (uint64_t)"permutation", 11, v4);
  return 1;
}

uint64_t mlir::AsmParser::addTypeToList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v5) = a2;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

uint64_t mlir::memref::TransposeOp::verify(mlir::memref::TransposeOp *this)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  v70[0] = *(void *)(*(void *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                     + 64);
  v70[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v70);
  if (mlir::AffineMap::isPermutation((mlir::AffineMap *)v70))
  {
    v70[0] = *(void *)(*(void *)this
                       + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                       + 64);
    v70[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v70);
    int NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)v70);
    v65[0] = (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v65);
    if (v3 == NumDims)
    {
      unint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v5 = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
      v70[0] = *(void *)(*(void *)this + 80);
      uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v70);
      uint64_t v7 = inferTransposeResultType(v4, Value);
      if (v5 == v7) {
        return 1;
      }
      uint64_t v8 = v7;
      v65[0] = (void **)"output type ";
      __int16 v66 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v65, (uint64_t)v70);
      if (v70[0])
      {
        uint64_t v9 = &v67;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v5);
        uint64_t v10 = (char *)v71;
        if (v72 >= v73)
        {
          unint64_t v53 = v72 + 1;
          if (v71 <= &v67 && (char *)v71 + 24 * v72 > (char *)&v67)
          {
            int64_t v60 = (char *)&v67 - (unsigned char *)v71;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v53, 24);
            uint64_t v10 = (char *)v71;
            uint64_t v9 = (int *)((char *)v71 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v53, 24);
            uint64_t v9 = &v67;
            uint64_t v10 = (char *)v71;
          }
        }
        __int16 v11 = &v10[24 * v72];
        long long v12 = *(_OWORD *)v9;
        *((void *)v11 + 2) = *((void *)v9 + 2);
        *(_OWORD *)__int16 v11 = v12;
        uint64_t v13 = ++v72;
        if (v70[0])
        {
          int v67 = 3;
          uint64_t v68 = " does not match transposed input type ";
          uint64_t v69 = 38;
          uint64_t v14 = &v67;
          uint64_t v15 = (char *)v71;
          if (v13 >= v73)
          {
            unint64_t v54 = v13 + 1;
            BOOL v55 = (char *)v71 + 24 * v13 > (char *)&v67;
            if (v71 <= &v67 && v55)
            {
              int64_t v61 = (char *)&v67 - (unsigned char *)v71;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v54, 24);
              uint64_t v15 = (char *)v71;
              uint64_t v14 = (int *)((char *)v71 + v61);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v54, 24);
              uint64_t v14 = &v67;
              uint64_t v15 = (char *)v71;
            }
          }
          uint64_t v16 = &v15[24 * v72];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = *((void *)v14 + 2);
          *(_OWORD *)uint64_t v16 = v17;
          ++v72;
          if (v70[0])
          {
            int v18 = &v67;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v4);
            uint64_t v19 = (char *)v71;
            if (v72 >= v73)
            {
              unint64_t v56 = v72 + 1;
              if (v71 <= &v67 && (char *)v71 + 24 * v72 > (char *)&v67)
              {
                int64_t v62 = (char *)&v67 - (unsigned char *)v71;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v56, 24);
                uint64_t v19 = (char *)v71;
                int v18 = (int *)((char *)v71 + v62);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v56, 24);
                int v18 = &v67;
                uint64_t v19 = (char *)v71;
              }
            }
            uint64_t v20 = &v19[24 * v72];
            long long v21 = *(_OWORD *)v18;
            *((void *)v20 + 2) = *((void *)v18 + 2);
            *(_OWORD *)uint64_t v20 = v21;
            uint64_t v22 = ++v72;
            if (v70[0])
            {
              int v67 = 3;
              uint64_t v68 = ", ";
              uint64_t v69 = 2;
              uint64_t v23 = &v67;
              uint64_t v24 = (char *)v71;
              if (v22 >= v73)
              {
                unint64_t v57 = v22 + 1;
                BOOL v58 = (char *)v71 + 24 * v22 > (char *)&v67;
                if (v71 <= &v67 && v58)
                {
                  int64_t v63 = (char *)&v67 - (unsigned char *)v71;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v57, 24);
                  uint64_t v24 = (char *)v71;
                  uint64_t v23 = (int *)((char *)v71 + v63);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v57, 24);
                  uint64_t v23 = &v67;
                  uint64_t v24 = (char *)v71;
                }
              }
              uint64_t v25 = &v24[24 * v72];
              long long v26 = *(_OWORD *)v23;
              *((void *)v25 + 2) = *((void *)v23 + 2);
              *(_OWORD *)uint64_t v25 = v26;
              ++v72;
              if (v70[0])
              {
                uint64_t v27 = &v67;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v8);
                uint64_t v28 = (char *)v71;
                if (v72 >= v73)
                {
                  unint64_t v59 = v72 + 1;
                  if (v71 <= &v67 && (char *)v71 + 24 * v72 > (char *)&v67)
                  {
                    int64_t v64 = (char *)&v67 - (unsigned char *)v71;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
                    uint64_t v28 = (char *)v71;
                    uint64_t v27 = (int *)((char *)v71 + v64);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
                    uint64_t v27 = &v67;
                    uint64_t v28 = (char *)v71;
                  }
                }
                uint64_t v29 = &v28[24 * v72];
                long long v30 = *(_OWORD *)v27;
                *((void *)v29 + 2) = *((void *)v27 + 2);
                *(_OWORD *)uint64_t v29 = v30;
                ++v72;
              }
            }
          }
        }
      }
      uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v70);
      if (v70[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
      }
      if (v79)
      {
        unint64_t v32 = __p;
        if (__p)
        {
          uint64_t v33 = v78;
          uint64_t v34 = __p;
          if (v78 != __p)
          {
            do
              uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            uint64_t v34 = __p;
          }
          uint64_t v78 = v32;
          operator delete(v34);
        }
        uint64_t v35 = v75;
        if (!v75) {
          goto LABEL_59;
        }
        uint64_t v36 = v76;
        unint64_t v37 = v75;
        if (v76 == v75)
        {
LABEL_58:
          uint64_t v76 = v35;
          operator delete(v37);
LABEL_59:
          if (v71 != v74) {
            free(v71);
          }
          return v31;
        }
        do
        {
          uint64_t v39 = *--v36;
          uint64_t v38 = v39;
          *uint64_t v36 = 0;
          if (v39) {
            MEMORY[0x21667D390](v38, 0x1000C8077774924);
          }
        }
        while (v36 != v35);
LABEL_57:
        unint64_t v37 = v75;
        goto LABEL_58;
      }
    }
    else
    {
      v65[0] = (void **)"expected a permutation map of same rank as the input";
      __int16 v66 = 259;
      mlir::OpState::emitOpError((uint64_t *)this, v65, (uint64_t)v70);
      uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v70);
      if (v70[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
      }
      if (v79)
      {
        uint64_t v46 = __p;
        if (__p)
        {
          uint64_t v47 = v78;
          unsigned int v48 = __p;
          if (v78 != __p)
          {
            do
              uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            unsigned int v48 = __p;
          }
          uint64_t v78 = v46;
          operator delete(v48);
        }
        uint64_t v35 = v75;
        if (!v75) {
          goto LABEL_59;
        }
        long long v49 = v76;
        unint64_t v37 = v75;
        if (v76 == v75) {
          goto LABEL_58;
        }
        do
        {
          uint64_t v51 = *--v49;
          uint64_t v50 = v51;
          *long long v49 = 0;
          if (v51) {
            MEMORY[0x21667D390](v50, 0x1000C8077774924);
          }
        }
        while (v49 != v35);
        goto LABEL_57;
      }
    }
  }
  else
  {
    v65[0] = (void **)"expected a permutation map";
    __int16 v66 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v65, (uint64_t)v70);
    uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v70);
    if (v70[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
    }
    if (v79)
    {
      uint64_t v40 = __p;
      if (__p)
      {
        uint64_t v41 = v78;
        unsigned int v42 = __p;
        if (v78 != __p)
        {
          do
            uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
          while (v41 != v40);
          unsigned int v42 = __p;
        }
        uint64_t v78 = v40;
        operator delete(v42);
      }
      uint64_t v35 = v75;
      if (!v75) {
        goto LABEL_59;
      }
      uint64_t v43 = v76;
      unint64_t v37 = v75;
      if (v76 == v75) {
        goto LABEL_58;
      }
      do
      {
        uint64_t v45 = *--v43;
        uint64_t v44 = v45;
        void *v43 = 0;
        if (v45) {
          MEMORY[0x21667D390](v44, 0x1000C8077774924);
        }
      }
      while (v43 != v35);
      goto LABEL_57;
    }
  }
  return v31;
}

uint64_t mlir::memref::TransposeOp::fold(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((*(unsigned char *)(*a1 + 46) & 0x80) == 0) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 68);
  if (!v2) {
    return 0;
  }
  char v4 = 0;
  unint64_t v5 = *(uint64_t **)(v1 + 72);
  uint64_t v6 = &v5[4 * v2];
  do
  {
    while (1)
    {
      uint64_t v12 = v5[3];
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (!DefiningOp) {
        break;
      }
      if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id) {
        break;
      }
      if (!v5[3]) {
        break;
      }
      uint64_t v8 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
      if (*(_UNKNOWN **)(*(void *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
        break;
      }
      uint64_t v9 = (uint64_t *)v5[1];
      if (v9)
      {
        uint64_t *v9 = *v5;
        if (*v5) {
          *(void *)(*v5 + 8) = v5[1];
        }
      }
      v5[3] = (uint64_t)v8;
      uint64_t v10 = *v8;
      uint64_t *v5 = *v8;
      v5[1] = (uint64_t)v8;
      if (v10) {
        *(void *)(v10 + 8) = v5;
      }
      *uint64_t v8 = (uint64_t)v5;
      v5 += 4;
      char v4 = 1;
      if (v5 == v6) {
        return (*a1 - 16) | 4;
      }
    }
    v5 += 4;
  }
  while (v5 != v6);
  if ((v4 & 1) == 0) {
    return 0;
  }
  return (*a1 - 16) | 4;
}

uint64_t mlir::memref::ViewOp::getAsmResultNames(void *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "view", 4);
}

uint64_t mlir::memref::ViewOp::verify(mlir::memref::ViewOp *this)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v89 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v88 = *(void *)(v2 - 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v89);
  uint64_t v94 = v3;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v86[0] = "unsupported map for base memref type ";
    __int16 v87 = 259;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)v86, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      uint64_t v28 = &v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v89);
      uint64_t v29 = (char *)v95;
      if (v96 >= v97)
      {
        unint64_t v73 = v96 + 1;
        if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
        {
          int64_t v80 = (char *)&v90 - (unsigned char *)v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v73, 24);
          uint64_t v29 = (char *)v95;
          uint64_t v28 = (int *)((char *)v95 + v80);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v73, 24);
          uint64_t v28 = &v90;
          uint64_t v29 = (char *)v95;
        }
      }
      long long v30 = &v29[24 * v96];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)long long v30 = v31;
      ++v96;
    }
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v103)
    {
      unint64_t v32 = __p;
      if (__p)
      {
        uint64_t v33 = v102;
        uint64_t v34 = __p;
        if (v102 != __p)
        {
          do
            uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          uint64_t v34 = __p;
        }
        int64_t v102 = v32;
        operator delete(v34);
      }
      uint64_t v23 = v99;
      if (!v99) {
        goto LABEL_92;
      }
      uint64_t v35 = v100;
      uint64_t v25 = v99;
      if (v100 == v99) {
        goto LABEL_91;
      }
      do
      {
        uint64_t v37 = *--v35;
        uint64_t v36 = v37;
        *uint64_t v35 = 0;
        if (v37) {
          MEMORY[0x21667D390](v36, 0x1000C8077774924);
        }
      }
      while (v35 != v23);
      goto LABEL_90;
    }
    return v19;
  }
  uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v88);
  uint64_t v94 = v4;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v86[0] = "unsupported map for result memref type ";
    __int16 v87 = 259;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)v86, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      uint64_t v38 = &v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v88);
      uint64_t v39 = (char *)v95;
      if (v96 >= v97)
      {
        unint64_t v74 = v96 + 1;
        if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
        {
          int64_t v81 = (char *)&v90 - (unsigned char *)v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v74, 24);
          uint64_t v39 = (char *)v95;
          uint64_t v38 = (int *)((char *)v95 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v74, 24);
          uint64_t v38 = &v90;
          uint64_t v39 = (char *)v95;
        }
      }
      uint64_t v40 = &v39[24 * v96];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = *((void *)v38 + 2);
      *(_OWORD *)uint64_t v40 = v41;
      ++v96;
    }
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v103)
    {
      unsigned int v42 = __p;
      if (__p)
      {
        uint64_t v43 = v102;
        uint64_t v44 = __p;
        if (v102 != __p)
        {
          do
            uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          uint64_t v44 = __p;
        }
        int64_t v102 = v42;
        operator delete(v44);
      }
      uint64_t v23 = v99;
      if (!v99) {
        goto LABEL_92;
      }
      uint64_t v45 = v100;
      uint64_t v25 = v99;
      if (v100 == v99) {
        goto LABEL_91;
      }
      do
      {
        uint64_t v47 = *--v45;
        uint64_t v46 = v47;
        *uint64_t v45 = 0;
        if (v47) {
          MEMORY[0x21667D390](v46, 0x1000C8077774924);
        }
      }
      while (v45 != v23);
      goto LABEL_90;
    }
    return v19;
  }
  uint64_t LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v89);
  if (LayerSchedule != ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v88))
  {
    v86[0] = "different memory spaces specified for base memref type ";
    __int16 v87 = 259;
    mlir::OpState::emitError((uint64_t *)this, (uint64_t)v86, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      uint64_t v6 = &v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v89);
      uint64_t v7 = (char *)v95;
      if (v96 >= v97)
      {
        unint64_t v75 = v96 + 1;
        if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
        {
          int64_t v82 = (char *)&v90 - (unsigned char *)v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v75, 24);
          uint64_t v7 = (char *)v95;
          uint64_t v6 = (int *)((char *)v95 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v75, 24);
          uint64_t v6 = &v90;
          uint64_t v7 = (char *)v95;
        }
      }
      uint64_t v8 = &v7[24 * v96];
      long long v9 = *(_OWORD *)v6;
      *((void *)v8 + 2) = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v8 = v9;
      uint64_t v10 = ++v96;
      if (RawStringData)
      {
        int v90 = 3;
        unint64_t v91 = " and view memref type ";
        uint64_t v92 = 22;
        __int16 v11 = &v90;
        uint64_t v12 = (char *)v95;
        if (v10 >= v97)
        {
          unint64_t v76 = v10 + 1;
          BOOL v77 = (char *)v95 + 24 * v10 > (char *)&v90;
          if (v95 <= &v90 && v77)
          {
            int64_t v83 = (char *)&v90 - (unsigned char *)v95;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v76, 24);
            uint64_t v12 = (char *)v95;
            __int16 v11 = (int *)((char *)v95 + v83);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v76, 24);
            __int16 v11 = &v90;
            uint64_t v12 = (char *)v95;
          }
        }
        uint64_t v13 = &v12[24 * v96];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = *((void *)v11 + 2);
        *(_OWORD *)uint64_t v13 = v14;
        ++v96;
        if (RawStringData)
        {
          uint64_t v15 = &v90;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v88);
          uint64_t v16 = (char *)v95;
          if (v96 >= v97)
          {
            unint64_t v78 = v96 + 1;
            if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
            {
              int64_t v84 = (char *)&v90 - (unsigned char *)v95;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v78, 24);
              uint64_t v16 = (char *)v95;
              uint64_t v15 = (int *)((char *)v95 + v84);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v78, 24);
              uint64_t v15 = &v90;
              uint64_t v16 = (char *)v95;
            }
          }
          long long v17 = &v16[24 * v96];
          long long v18 = *(_OWORD *)v15;
          *((void *)v17 + 2) = *((void *)v15 + 2);
          *(_OWORD *)long long v17 = v18;
          ++v96;
        }
      }
    }
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    }
    if (v103)
    {
      uint64_t v20 = __p;
      if (__p)
      {
        long long v21 = v102;
        uint64_t v22 = __p;
        if (v102 != __p)
        {
          do
            long long v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        int64_t v102 = v20;
        operator delete(v22);
      }
      uint64_t v23 = v99;
      if (!v99) {
        goto LABEL_92;
      }
      uint64_t v24 = v100;
      uint64_t v25 = v99;
      if (v100 == v99)
      {
LABEL_91:
        int64_t v100 = v23;
        operator delete(v25);
LABEL_92:
        if (v95 != v98) {
          free(v95);
        }
        return v19;
      }
      do
      {
        uint64_t v27 = *--v24;
        uint64_t v26 = v27;
        *uint64_t v24 = 0;
        if (v27) {
          MEMORY[0x21667D390](v26, 0x1000C8077774924);
        }
      }
      while (v24 != v23);
LABEL_90:
      uint64_t v25 = v99;
      goto LABEL_91;
    }
    return v19;
  }
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v88);
  if (v49)
  {
    unint64_t v50 = (v49 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v50 >= 3)
    {
      unint64_t v54 = v50 + 1;
      uint64_t v55 = (v50 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v52 = (uint64_t *)(Value + 8 * v55);
      unint64_t v56 = (int64x2_t *)(Value + 16);
      int64x2_t v57 = 0uLL;
      int64x2_t v58 = vdupq_n_s64(0x8000000000000000);
      uint64_t v59 = v55;
      int64x2_t v60 = 0uLL;
      do
      {
        int64x2_t v57 = vsubq_s64(v57, vceqq_s64(v56[-1], v58));
        int64x2_t v60 = vsubq_s64(v60, vceqq_s64(*v56, v58));
        v56 += 2;
        v59 -= 4;
      }
      while (v59);
      unsigned int v51 = vaddvq_s64(vaddq_s64(v60, v57));
      if (v54 == v55)
      {
LABEL_69:
        uint64_t v53 = v51;
        goto LABEL_70;
      }
    }
    else
    {
      unsigned int v51 = 0;
      uint64_t v52 = (uint64_t *)Value;
    }
    do
    {
      uint64_t v61 = *v52++;
      if (v61 == 0x8000000000000000) {
        ++v51;
      }
    }
    while (v52 != (uint64_t *)(Value + 8 * v49));
    goto LABEL_69;
  }
  uint64_t v53 = 0;
LABEL_70:
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0 && *(unsigned int *)(*(void *)this + 68) - 2 == v53) {
    return 1;
  }
  v86[0] = "incorrect number of size operands for type ";
  __int16 v87 = 259;
  mlir::OpState::emitError((uint64_t *)this, (uint64_t)v86, (uint64_t)&RawStringData);
  if (RawStringData)
  {
    int64_t v62 = &v90;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v88);
    int64_t v63 = (char *)v95;
    if (v96 >= v97)
    {
      unint64_t v79 = v96 + 1;
      if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
      {
        int64_t v85 = (char *)&v90 - (unsigned char *)v95;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v79, 24);
        int64_t v63 = (char *)v95;
        int64_t v62 = (int *)((char *)v95 + v85);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v79, 24);
        int64_t v62 = &v90;
        int64_t v63 = (char *)v95;
      }
    }
    int64_t v64 = &v63[24 * v96];
    long long v65 = *(_OWORD *)v62;
    *((void *)v64 + 2) = *((void *)v62 + 2);
    *(_OWORD *)int64_t v64 = v65;
    ++v96;
  }
  uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
  if (RawStringData) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
  }
  if (v103)
  {
    __int16 v66 = __p;
    if (__p)
    {
      int v67 = v102;
      uint64_t v68 = __p;
      if (v102 != __p)
      {
        do
          int v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        uint64_t v68 = __p;
      }
      int64_t v102 = v66;
      operator delete(v68);
    }
    uint64_t v23 = v99;
    if (!v99) {
      goto LABEL_92;
    }
    uint64_t v69 = v100;
    uint64_t v25 = v99;
    if (v100 == v99) {
      goto LABEL_91;
    }
    do
    {
      uint64_t v71 = *--v69;
      uint64_t v70 = v71;
      *uint64_t v69 = 0;
      if (v71) {
        MEMORY[0x21667D390](v70, 0x1000C8077774924);
      }
    }
    while (v69 != v23);
    goto LABEL_90;
  }
  return v19;
}

uint64_t mlir::memref::ViewOp::getSizes(mlir::memref::ViewOp *this)
{
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    return *(void *)(*(void *)this + 72) + 64;
  }
  else {
    return 64;
  }
}

void mlir::memref::ViewOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::memref::AtomicRMWOp::verify(mlir::memref::AtomicRMWOp *this)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  unint64_t v71 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  uint64_t v3 = *(void *)this;
  unint64_t v4 = *(unsigned int *)(*(void *)this + 44);
  if ((v4 & 0x800000) != 0)
  {
    if (v2 == *(_DWORD *)(v3 + 68) - 2) {
      goto LABEL_3;
    }
LABEL_74:
    int v67 = (void **)"expects the number of subscripts to be equal to memref rank";
    __int16 v70 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v67, (uint64_t)&v71);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if (v71) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    }
    if (v81)
    {
      unint64_t v50 = __p;
      if (__p)
      {
        unsigned int v51 = v80;
        uint64_t v52 = __p;
        if (v80 != __p)
        {
          do
            unsigned int v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          uint64_t v52 = __p;
        }
        int64_t v80 = v50;
        operator delete(v52);
      }
      long long v21 = v77;
      if (!v77) {
        goto LABEL_90;
      }
      uint64_t v53 = v78;
      uint64_t v23 = v77;
      if (v78 == v77) {
        goto LABEL_89;
      }
      do
      {
        uint64_t v55 = *--v53;
        uint64_t v54 = v55;
        void *v53 = 0;
        if (v55) {
          MEMORY[0x21667D390](v54, 0x1000C8077774924);
        }
      }
      while (v53 != v21);
      goto LABEL_88;
    }
    return v6;
  }
  if (v2 != 4294967294) {
    goto LABEL_74;
  }
LABEL_3:
  unint64_t v71 = *(void *)(v3 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t Value = mlir::arith::AtomicRMWKindAttr::getValue((mlir::arith::AtomicRMWKindAttr *)&v71);
  uint64_t v6 = 1;
  if (Value > 0xC) {
    return v6;
  }
  if (((1 << Value) & 0x1DB2) != 0)
  {
    if (*(_UNKNOWN **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      __int16 v66 = 257;
      mlir::OpState::emitOpError((uint64_t *)this, v65, (uint64_t)&v71);
      if (v71)
      {
        LODWORD(v67) = 3;
        uint64_t v68 = "with kind '";
        uint64_t v69 = 11;
        uint64_t v7 = &v67;
        uint64_t v8 = (char *)v73;
        if (v74 >= v75)
        {
          unint64_t v57 = v74 + 1;
          if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
          {
            int64_t v61 = (char *)&v67 - (unsigned char *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
            uint64_t v8 = (char *)v73;
            uint64_t v7 = (void ***)((char *)v73 + v61);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
            uint64_t v7 = &v67;
            uint64_t v8 = (char *)v73;
          }
        }
        long long v9 = &v8[24 * v74];
        long long v10 = *(_OWORD *)v7;
        *((void *)v9 + 2) = v7[2];
        *(_OWORD *)long long v9 = v10;
        ++v74;
      }
      int v67 = *(void ***)(*(void *)this
                      + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                      + 64);
      unint64_t v11 = mlir::arith::AtomicRMWKindAttr::getValue((mlir::arith::AtomicRMWKindAttr *)&v67);
      uint64_t v12 = mlir::arith::stringifyAtomicRMWKind(v11);
      if (v71)
      {
        __int16 v70 = 261;
        int v67 = (void **)v12;
        uint64_t v68 = v13;
        mlir::Diagnostic::operator<<((uint64_t)v72, &v67);
        if (v71)
        {
          LODWORD(v67) = 3;
          uint64_t v68 = "' expects an integer type";
          uint64_t v69 = 25;
          long long v14 = &v67;
          uint64_t v15 = (char *)v73;
          if (v74 >= v75)
          {
            unint64_t v58 = v74 + 1;
            if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
            {
              int64_t v62 = (char *)&v67 - (unsigned char *)v73;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v58, 24);
              uint64_t v15 = (char *)v73;
              long long v14 = (void ***)((char *)v73 + v62);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v58, 24);
              long long v14 = &v67;
              uint64_t v15 = (char *)v73;
            }
          }
          uint64_t v16 = &v15[24 * v74];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v74;
        }
      }
      uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
      if (v71) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
      }
      if (v81)
      {
        long long v18 = __p;
        if (__p)
        {
          uint64_t v19 = v80;
          uint64_t v20 = __p;
          if (v80 != __p)
          {
            do
              uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            uint64_t v20 = __p;
          }
          int64_t v80 = v18;
          operator delete(v20);
        }
        long long v21 = v77;
        if (!v77) {
          goto LABEL_90;
        }
        uint64_t v22 = v78;
        uint64_t v23 = v77;
        if (v78 == v77)
        {
LABEL_89:
          unint64_t v78 = v21;
          operator delete(v23);
LABEL_90:
          if (v73 != v76) {
            free(v73);
          }
          return v6;
        }
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
LABEL_88:
        uint64_t v23 = v77;
        goto LABEL_89;
      }
    }
  }
  else if (((1 << Value) & 0x249) != 0)
  {
    uint64_t v26 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                   + 136);
    if (v26 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      __int16 v66 = 257;
      mlir::OpState::emitOpError((uint64_t *)this, v65, (uint64_t)&v71);
      if (v71)
      {
        LODWORD(v67) = 3;
        uint64_t v68 = "with kind '";
        uint64_t v69 = 11;
        uint64_t v33 = &v67;
        uint64_t v34 = (char *)v73;
        if (v74 >= v75)
        {
          unint64_t v59 = v74 + 1;
          if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
          {
            int64_t v63 = (char *)&v67 - (unsigned char *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v59, 24);
            uint64_t v34 = (char *)v73;
            uint64_t v33 = (void ***)((char *)v73 + v63);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v59, 24);
            uint64_t v33 = &v67;
            uint64_t v34 = (char *)v73;
          }
        }
        uint64_t v35 = &v34[24 * v74];
        long long v36 = *(_OWORD *)v33;
        *((void *)v35 + 2) = v33[2];
        *(_OWORD *)uint64_t v35 = v36;
        ++v74;
      }
      int v67 = *(void ***)(*(void *)this
                      + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                      + 64);
      unint64_t v37 = mlir::arith::AtomicRMWKindAttr::getValue((mlir::arith::AtomicRMWKindAttr *)&v67);
      uint64_t v38 = mlir::arith::stringifyAtomicRMWKind(v37);
      if (v71)
      {
        __int16 v70 = 261;
        int v67 = (void **)v38;
        uint64_t v68 = v39;
        mlir::Diagnostic::operator<<((uint64_t)v72, &v67);
        if (v71)
        {
          LODWORD(v67) = 3;
          uint64_t v68 = "' expects a floating-point type";
          uint64_t v69 = 31;
          uint64_t v40 = &v67;
          long long v41 = (char *)v73;
          if (v74 >= v75)
          {
            unint64_t v60 = v74 + 1;
            if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
            {
              int64_t v64 = (char *)&v67 - (unsigned char *)v73;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v60, 24);
              long long v41 = (char *)v73;
              uint64_t v40 = (void ***)((char *)v73 + v64);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v60, 24);
              uint64_t v40 = &v67;
              long long v41 = (char *)v73;
            }
          }
          unsigned int v42 = &v41[24 * v74];
          long long v43 = *(_OWORD *)v40;
          *((void *)v42 + 2) = v40[2];
          *(_OWORD *)unsigned int v42 = v43;
          ++v74;
        }
      }
      uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
      if (v71) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
      }
      if (v81)
      {
        uint64_t v44 = __p;
        if (__p)
        {
          uint64_t v45 = v80;
          uint64_t v46 = __p;
          if (v80 != __p)
          {
            do
              uint64_t v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
            while (v45 != v44);
            uint64_t v46 = __p;
          }
          int64_t v80 = v44;
          operator delete(v46);
        }
        long long v21 = v77;
        if (!v77) {
          goto LABEL_90;
        }
        uint64_t v47 = v78;
        uint64_t v23 = v77;
        if (v78 == v77) {
          goto LABEL_89;
        }
        do
        {
          uint64_t v49 = *--v47;
          uint64_t v48 = v49;
          *uint64_t v47 = 0;
          if (v49) {
            MEMORY[0x21667D390](v48, 0x1000C8077774924);
          }
        }
        while (v47 != v21);
        goto LABEL_88;
      }
    }
  }
  return v6;
}

uint64_t mlir::memref::AtomicRMWOp::fold(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(*(void *)a1 + 68);
  if (!v1) {
    return 0;
  }
  char v3 = 0;
  unint64_t v4 = *(uint64_t **)(*(void *)a1 + 72);
  uint64_t v5 = v4[3];
  uint64_t v6 = &v4[4 * v1];
  do
  {
    while (1)
    {
      uint64_t v13 = v4[3];
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
      if (!DefiningOp) {
        break;
      }
      if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id) {
        break;
      }
      if (v4[3] == v5) {
        break;
      }
      uint64_t v8 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
      if (*(_UNKNOWN **)(*(void *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
        break;
      }
      long long v9 = (uint64_t *)v4[1];
      if (v9)
      {
        uint64_t *v9 = *v4;
        if (*v4) {
          *(void *)(*v4 + 8) = v4[1];
        }
      }
      v4[3] = (uint64_t)v8;
      uint64_t v10 = *v8;
      uint64_t *v4 = *v8;
      v4[1] = (uint64_t)v8;
      if (v10) {
        *(void *)(v10 + 8) = v4;
      }
      *uint64_t v8 = (uint64_t)v4;
      v4 += 4;
      char v3 = 1;
      if (v4 == v6) {
        goto LABEL_16;
      }
    }
    v4 += 4;
  }
  while (v4 != v6);
  if ((v3 & 1) == 0) {
    return 0;
  }
LABEL_16:
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v11 = *(void *)a1 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  return mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) | 4;
}

uint64_t mlir::memref::AssumeAlignmentOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    long long v30 = __p;
    if (__p)
    {
      long long v31 = v67;
      unint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        unint64_t v32 = __p;
      }
      int v67 = v30;
      operator delete(v32);
    }
    long long v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "alignment", 9uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected key entry for alignment in DictionaryAttr to set Properties.";
      uint64_t v58 = 69;
      long long v36 = &v56;
      unint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          unint64_t v37 = (char *)v60;
          long long v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          long long v36 = &v56;
          unint64_t v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v40 = __p;
    if (__p)
    {
      long long v41 = v67;
      unsigned int v42 = __p;
      if (v67 != __p)
      {
        do
          long long v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        unsigned int v42 = __p;
      }
      int v67 = v40;
      operator delete(v42);
    }
    long long v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    long long v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 54;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      long long v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      uint64_t v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          uint64_t v15 = (char *)v60;
          long long v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          long long v14 = &v56;
          uint64_t v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    long long v18 = __p;
    if (__p)
    {
      uint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      int v67 = v18;
      operator delete(v20);
    }
    long long v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      long long v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::memref::AssumeAlignmentOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"alignment", 9, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  uint64_t *v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::AssumeAlignmentOp::getInherentAttr(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 9 && (*(void *)a3 == 0x6E656D6E67696C61 ? (BOOL v4 = *(unsigned char *)(a3 + 8) == 116) : (BOOL v4 = 0), v4)) {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else {
    return 0;
  }
}

void *mlir::memref::AssumeAlignmentOp::setInherentAttr(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 9 && *(void *)a2 == 0x6E656D6E67696C61 && *(unsigned char *)(a2 + 8) == 116)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v5 = a4;
      }
      else {
        uint64_t v5 = 0;
      }
      *BOOL result = v5;
    }
    else
    {
      *BOOL result = 0;
    }
  }
  return result;
}

void mlir::memref::AssumeAlignmentOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"alignment", 9, *a2);
  }
}

BOOL mlir::memref::AssumeAlignmentOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(unint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(v6, (void **)"alignment", (const char *)9, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(uint64_t a1, void **a2, const char *a3, void (*a4)(unint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    goto LABEL_11;
  }
  uint64_t v37 = a1;
  unint64_t Value = (void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v37);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&Value, 32)) {
    goto LABEL_11;
  }
  uint64_t v36 = a1;
  mlir::IntegerAttr::getValue((uint64_t)&v36, (llvm::APInt *)&v42);
  unsigned int v10 = v43[0];
  unsigned int v11 = v43[0] - 1;
  if (v43[0] < 0x41)
  {
    if (((v42 >> v11) & 1) != 0 || !v42) {
      goto LABEL_11;
    }
    return 1;
  }
  unint64_t v12 = v42;
  if ((*(void *)(v42 + 8 * (v11 >> 6)) >> v11))
  {
    MEMORY[0x21667D390](v42, 0x1000C8000313F17);
  }
  else
  {
    int v13 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v42);
    MEMORY[0x21667D390](v12, 0x1000C8000313F17);
    if (v13 != v10) {
      return 1;
    }
  }
LABEL_11:
  a4(&v42, a5);
  if (v42)
  {
    LODWORD(Value) = 3;
    long long v39 = "attribute '";
    uint64_t v40 = 11;
    p_unint64_t Value = &Value;
    uint64_t v15 = (char *)v44;
    if (v45 >= v46)
    {
      unint64_t v32 = v45 + 1;
      if (v44 <= &Value && (char *)v44 + 24 * v45 > (char *)&Value)
      {
        int64_t v34 = (char *)&Value - (unsigned char *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
        uint64_t v15 = (char *)v44;
        p_unint64_t Value = (void ***)((char *)v44 + v34);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
        p_unint64_t Value = &Value;
        uint64_t v15 = (char *)v44;
      }
    }
    uint64_t v16 = &v15[24 * v45];
    long long v17 = *(_OWORD *)p_Value;
    *((void *)v16 + 2) = p_Value[2];
    *(_OWORD *)uint64_t v16 = v17;
    ++v45;
    if (v42)
    {
      __int16 v41 = 261;
      unint64_t Value = a2;
      long long v39 = a3;
      mlir::Diagnostic::operator<<((uint64_t)v43, &Value);
      if (v42)
      {
        LODWORD(Value) = 3;
        long long v39 = "' failed to satisfy constraint: 32-bit signless integer attribute whose value is positive";
        uint64_t v40 = 89;
        long long v18 = &Value;
        uint64_t v19 = (char *)v44;
        if (v45 >= v46)
        {
          unint64_t v33 = v45 + 1;
          if (v44 <= &Value && (char *)v44 + 24 * v45 > (char *)&Value)
          {
            int64_t v35 = (char *)&Value - (unsigned char *)v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            uint64_t v19 = (char *)v44;
            long long v18 = (void ***)((char *)v44 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            long long v18 = &Value;
            uint64_t v19 = (char *)v44;
          }
        }
        uint64_t v20 = &v19[24 * v45];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)uint64_t v20 = v21;
        ++v45;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v42);
  if (v42) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  }
  if (v52)
  {
    uint64_t v23 = __p;
    if (__p)
    {
      uint64_t v24 = v51;
      uint64_t v25 = __p;
      if (v51 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = __p;
      }
      int64_t v51 = v23;
      operator delete(v25);
    }
    uint64_t v26 = v48;
    if (v48)
    {
      uint64_t v27 = v49;
      uint64_t v28 = v48;
      if (v49 != v48)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        uint64_t v28 = v48;
      }
      unint64_t v49 = v26;
      operator delete(v28);
    }
    if (v44 != v47) {
      free(v44);
    }
  }
  return v22;
}

BOOL mlir::memref::AssumeAlignmentOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::memref::AssumeAlignmentOp::verifyInvariantsImpl(mlir::memref::AssumeAlignmentOp *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v16[0] = v2;
    return mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(v3, (void **)"alignment", (const char *)9, (void (*)(unint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
  }
  else
  {
    uint64_t v14 = (void **)"requires attribute 'alignment'";
    __int16 v15 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v14, (uint64_t)v16);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    }
    if (v23)
    {
      uint64_t v5 = __p;
      if (__p)
      {
        uint64_t v6 = v22;
        uint64_t v7 = __p;
        if (v22 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          uint64_t v7 = __p;
        }
        uint64_t v22 = v5;
        operator delete(v7);
      }
      BOOL v8 = v19;
      if (v19)
      {
        uint64_t v9 = v20;
        unsigned int v10 = v19;
        if (v20 != v19)
        {
          do
          {
            uint64_t v12 = *--v9;
            uint64_t v11 = v12;
            void *v9 = 0;
            if (v12) {
              MEMORY[0x21667D390](v11, 0x1000C8077774924);
            }
          }
          while (v9 != v8);
          unsigned int v10 = v19;
        }
        uint64_t v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18) {
        free(v17);
      }
    }
  }
  return v4;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)a2;
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v51[0] = a2;
    v51[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v6 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v51);
    return 1;
  }
  else
  {
    __int16 v47 = 261;
    v46[0] = a3;
    v46[1] = a4;
    mlir::Operation::emitOpError(a1, v46, (uint64_t)v51);
    if (v51[0])
    {
      int v48 = 3;
      unint64_t v49 = " #";
      uint64_t v50 = 2;
      BOOL v8 = &v48;
      uint64_t v9 = (char *)v52;
      if (v53 >= v54)
      {
        unint64_t v36 = v53 + 1;
        if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
        {
          int64_t v42 = (char *)&v48 - (unsigned char *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          uint64_t v9 = (char *)v52;
          BOOL v8 = (int *)((char *)v52 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          BOOL v8 = &v48;
          uint64_t v9 = (char *)v52;
        }
      }
      unsigned int v10 = &v9[24 * v53];
      long long v11 = *(_OWORD *)v8;
      *((void *)v10 + 2) = *((void *)v8 + 2);
      *(_OWORD *)unsigned int v10 = v11;
      uint64_t v12 = ++v53;
      if (v51[0])
      {
        int v48 = 5;
        unint64_t v49 = (const char *)a5;
        int v13 = &v48;
        uint64_t v14 = (char *)v52;
        if (v12 >= v54)
        {
          unint64_t v37 = v12 + 1;
          BOOL v38 = (char *)v52 + 24 * v12 > (char *)&v48;
          if (v52 <= &v48 && v38)
          {
            int64_t v43 = (char *)&v48 - (unsigned char *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            uint64_t v14 = (char *)v52;
            int v13 = (int *)((char *)v52 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            int v13 = &v48;
            uint64_t v14 = (char *)v52;
          }
        }
        __int16 v15 = &v14[24 * v53];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = *((void *)v13 + 2);
        *(_OWORD *)__int16 v15 = v16;
        uint64_t v17 = ++v53;
        if (v51[0])
        {
          int v48 = 3;
          unint64_t v49 = " must be memref of any type values, but got ";
          uint64_t v50 = 44;
          uint64_t v18 = &v48;
          uint64_t v19 = (char *)v52;
          if (v17 >= v54)
          {
            unint64_t v39 = v17 + 1;
            BOOL v40 = (char *)v52 + 24 * v17 > (char *)&v48;
            if (v52 <= &v48 && v40)
            {
              int64_t v44 = (char *)&v48 - (unsigned char *)v52;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              uint64_t v19 = (char *)v52;
              uint64_t v18 = (int *)((char *)v52 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              uint64_t v18 = &v48;
              uint64_t v19 = (char *)v52;
            }
          }
          uint64_t v20 = &v19[24 * v53];
          long long v21 = *(_OWORD *)v18;
          *((void *)v20 + 2) = *((void *)v18 + 2);
          *(_OWORD *)uint64_t v20 = v21;
          ++v53;
          if (v51[0])
          {
            uint64_t v22 = &v48;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v48, a2);
            char v23 = (char *)v52;
            if (v53 >= v54)
            {
              unint64_t v41 = v53 + 1;
              if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
              {
                int64_t v45 = (char *)&v48 - (unsigned char *)v52;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                char v23 = (char *)v52;
                uint64_t v22 = (int *)((char *)v52 + v45);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                uint64_t v22 = &v48;
                char v23 = (char *)v52;
              }
            }
            uint64_t v24 = &v23[24 * v53];
            long long v25 = *(_OWORD *)v22;
            *((void *)v24 + 2) = *((void *)v22 + 2);
            *(_OWORD *)uint64_t v24 = v25;
            ++v53;
          }
        }
      }
    }
    uint64_t v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    }
    if (v60)
    {
      uint64_t v27 = __p;
      if (__p)
      {
        uint64_t v28 = v59;
        uint64_t v29 = __p;
        if (v59 != __p)
        {
          do
            uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          uint64_t v29 = __p;
        }
        unint64_t v59 = v27;
        operator delete(v29);
      }
      uint64_t v30 = v56;
      if (v56)
      {
        long long v31 = v57;
        unint64_t v32 = v56;
        if (v57 != v56)
        {
          do
          {
            uint64_t v34 = *--v31;
            uint64_t v33 = v34;
            void *v31 = 0;
            if (v34) {
              MEMORY[0x21667D390](v33, 0x1000C8077774924);
            }
          }
          while (v31 != v30);
          unint64_t v32 = v56;
        }
        unint64_t v57 = v30;
        operator delete(v32);
      }
      if (v52 != v55) {
        free(v52);
      }
    }
  }
  return v26;
}

BOOL mlir::memref::AssumeAlignmentOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  uint64_t v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Integeruint64_t Type = mlir::Builder::getIntegerType(v5, 0x20u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v14, IntegerType)) {
    return 0;
  }
  if (v14)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(a2);
    void *v7 = v14;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  uint64_t v9 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v8 + 96));
  if (v9)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(v9, (void **)"alignment", (const char *)9, (void (*)(unint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AssumeAlignmentOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, v11)) {
    return 0;
  }
  uint64_t v16 = v11[0];
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

void mlir::memref::AssumeAlignmentOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v23[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    unsigned char *v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  long long v21 = v23;
  v23[0] = "alignment";
  v23[1] = 9;
  uint64_t v22 = 0x200000001;
  unsigned int v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v21, v22);
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *uint64_t v17 = 58;
    ++*((void *)v16 + 4);
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *uint64_t v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v21 != v23) {
    free(v21);
  }
}

uint64_t mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::AtomicRMWOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.atomic_rmw", 17, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::AtomicRMWOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v11 = &v56;
      uint64_t v12 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v12 = (char *)v60;
          uint64_t v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v11 = &v56;
          uint64_t v12 = (char *)v60;
        }
      }
      uint64_t v13 = &v12[24 * v61];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v13 = v14;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    __int16 v15 = __p;
    if (__p)
    {
      uint64_t v16 = v67;
      uint64_t v17 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      int v67 = v15;
      operator delete(v17);
    }
    uint64_t v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v19 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v22 = *--v19;
      uint64_t v21 = v22;
      *uint64_t v19 = 0;
      if (v22) {
        MEMORY[0x21667D390](v21, 0x1000C8077774924);
      }
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "kind", 4uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unint64_t v57 = "expected key entry for kind in DictionaryAttr to set Properties.";
      uint64_t v58 = 64;
      char v23 = &v56;
      uint64_t v24 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v52 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          uint64_t v24 = (char *)v60;
          char v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          char v23 = &v56;
          uint64_t v24 = (char *)v60;
        }
      }
      long long v25 = &v24[24 * v61];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = *((void *)v23 + 2);
      *(_OWORD *)long long v25 = v26;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v27 = __p;
    if (__p)
    {
      uint64_t v28 = v67;
      uint64_t v29 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        uint64_t v29 = __p;
      }
      int v67 = v27;
      operator delete(v29);
    }
    uint64_t v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v30 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v32 = *--v30;
      uint64_t v31 = v32;
      *uint64_t v30 = 0;
      if (v32) {
        MEMORY[0x21667D390](v31, 0x1000C8077774924);
      }
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  uint64_t v9 = v8;
  if (mlir::arith::AtomicRMWKindAttr::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 49;
    uint64_t v33 = &v56;
    uint64_t v34 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v53 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v34 = (char *)v60;
        uint64_t v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v33 = &v56;
        uint64_t v34 = (char *)v60;
      }
    }
    int64_t v35 = &v34[24 * v61];
    long long v36 = *(_OWORD *)v33;
    *((void *)v35 + 2) = *((void *)v33 + 2);
    *(_OWORD *)int64_t v35 = v36;
    ++v61;
    if (v59[0])
    {
      unint64_t v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      BOOL v38 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          BOOL v38 = (char *)v60;
          unint64_t v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v37 = &v56;
          BOOL v38 = (char *)v60;
        }
      }
      unint64_t v39 = &v38[24 * v61];
      long long v40 = *(_OWORD *)v37;
      *((void *)v39 + 2) = *((void *)v37 + 2);
      *(_OWORD *)unint64_t v39 = v40;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    unint64_t v41 = __p;
    if (__p)
    {
      int64_t v42 = v67;
      int64_t v43 = __p;
      if (v67 != __p)
      {
        do
          int64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        int64_t v43 = __p;
      }
      int v67 = v41;
      operator delete(v43);
    }
    uint64_t v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    int64_t v44 = v65;
    uint64_t v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      long long v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v46 = *--v44;
      uint64_t v45 = v46;
      void *v44 = 0;
      if (v46) {
        MEMORY[0x21667D390](v45, 0x1000C8077774924);
      }
    }
    while (v44 != v18);
LABEL_58:
    uint64_t v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::memref::AtomicRMWOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  uint64_t v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"kind", 4, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  uint64_t *v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::AtomicRMWOp::getInherentAttr(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1684957547) {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else {
    return 0;
  }
}

uint64_t mlir::memref::AtomicRMWOp::setInherentAttr(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 4 && *a2 == 1684957547)
  {
    unsigned int v5 = (void *)result;
    if (a4)
    {
      uint64_t result = mlir::arith::AtomicRMWKindAttr::classof(a4);
      if (result) {
        uint64_t v6 = a4;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    void *v5 = v6;
  }
  return result;
}

void mlir::memref::AtomicRMWOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"kind", 4, *a2);
  }
}

BOOL mlir::memref::AtomicRMWOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(v6, (void **)"kind", (const char *)4, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1 || (mlir::arith::AtomicRMWKindAttr::classof(a1) & 1) != 0) {
    return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    uint64_t v32 = "attribute '";
    uint64_t v33 = 11;
    uint64_t v11 = &v31;
    uint64_t v12 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v12 = (char *)v37;
        uint64_t v11 = (void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v11 = &v31;
        uint64_t v12 = (char *)v37;
      }
    }
    uint64_t v13 = &v12[24 * v38];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)uint64_t v13 = v14;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      uint64_t v31 = a2;
      uint64_t v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        uint64_t v32 = "' failed to satisfy constraint: allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14";
        uint64_t v33 = 119;
        __int16 v15 = &v31;
        uint64_t v16 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            uint64_t v16 = (char *)v37;
            __int16 v15 = (void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            __int16 v15 = &v31;
            uint64_t v16 = (char *)v37;
          }
        }
        uint64_t v17 = &v16[24 * v38];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)uint64_t v17 = v18;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    uint64_t v19 = __p;
    if (__p)
    {
      uint64_t v20 = v44;
      uint64_t v21 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      int64_t v44 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v41;
    if (v41)
    {
      char v23 = v42;
      uint64_t v24 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *char v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v41;
      }
      int64_t v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

BOOL mlir::memref::AtomicRMWOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::arith::AtomicRMWKindAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::arith::AtomicRMWKindAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::arith::AtomicRMWKindAttr::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    BOOL v8 = &v40;
    uint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v9 = (char *)v46;
        BOOL v8 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        BOOL v8 = &v40;
        uint64_t v9 = (char *)v46;
      }
    }
    unsigned int v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)unsigned int v10 = v11;
    ++v47;
  }
  long long v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::AtomicRMWKindAttr]";
  unint64_t v41 = 80;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    long long v40 = (void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      uint64_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v17 = (char *)v46;
          uint64_t v16 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          uint64_t v17 = (char *)v46;
        }
      }
      long long v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)long long v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v21 = (char *)v46;
            uint64_t v20 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            uint64_t v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v24 = __p;
    if (__p)
    {
      uint64_t v25 = v53;
      uint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      int64_t v53 = v24;
      operator delete(v26);
    }
    unint64_t v27 = v50;
    if (v50)
    {
      unint64_t v28 = v51;
      int64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        int64_t v29 = v50;
      }
      int64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::memref::AtomicRMWOp::verifyInvariantsImpl(mlir::memref::AtomicRMWOp *this)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v37[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(v3, (void **)"kind", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v37)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps2(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u))
    {
      return 0;
    }
    uint64_t v4 = *(void *)this;
    if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
    {
      uint64_t v6 = -2;
      uint64_t v7 = 64;
LABEL_8:
      uint64_t v8 = 0;
      uint64_t v9 = v7 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, (int)v8 + 2))
      {
        ++v8;
        v9 += 32;
        if (v6 == v8)
        {
          uint64_t v4 = *(void *)this;
          goto LABEL_12;
        }
      }
      return 0;
    }
    uint64_t v5 = *(unsigned int *)(v4 + 68);
    uint64_t v6 = v5 - 2;
    if (v5 != 2)
    {
      uint64_t v7 = *(void *)(v4 + 72) + 64;
      goto LABEL_8;
    }
LABEL_12:
    int v10 = *(_DWORD *)(v4 + 36);
    uint64_t v11 = v4 - 16;
    uint64_t v12 = v10 ? v11 : 0;
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
    if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0))return 0; {
    if (*(_DWORD *)(*(void *)this + 36))
    }
      uint64_t v15 = *(void *)this - 16;
    else {
      uint64_t v15 = 0;
    }
    unint64_t v14 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v14 == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v16 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
      uint64_t v17 = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0);
      uint64_t v18 = *(void *)(*(void *)this + 72);
      if ((*(void *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v18 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v37[0] = *(void *)(*(void *)(v18 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v37) == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
          return 1;
        v35[0] = (void **)"failed to verify that value type matches element type of memref";
        __int16 v36 = 259;
        mlir::OpState::emitOpError((uint64_t *)this, v35, (uint64_t)v37);
        uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v37);
        return v19;
      }
    }
    v35[0] = (void **)"failed to verify that all of {value, result} have same type";
    __int16 v36 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v35, (uint64_t)v37);
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      uint64_t v20 = __p;
      if (__p)
      {
        uint64_t v21 = v43;
        uint64_t v22 = __p;
        if (v43 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        __int16 v43 = v20;
        operator delete(v22);
      }
      long long v23 = v40;
      if (!v40) {
        goto LABEL_55;
      }
      uint64_t v24 = v41;
      uint64_t v25 = v40;
      if (v41 == v40)
      {
LABEL_54:
        unint64_t v41 = v23;
        operator delete(v25);
LABEL_55:
        if (v38 != &v39) {
          free(v38);
        }
        return v19;
      }
      do
      {
        uint64_t v27 = *--v24;
        uint64_t v26 = v27;
        *uint64_t v24 = 0;
        if (v27) {
          MEMORY[0x21667D390](v26, 0x1000C8077774924);
        }
      }
      while (v24 != v23);
LABEL_53:
      uint64_t v25 = v40;
      goto LABEL_54;
    }
  }
  else
  {
    v35[0] = (void **)"requires attribute 'kind'";
    __int16 v36 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v35, (uint64_t)v37);
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      unint64_t v28 = __p;
      if (__p)
      {
        int64_t v29 = v43;
        uint64_t v30 = __p;
        if (v43 != __p)
        {
          do
            int64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        __int16 v43 = v28;
        operator delete(v30);
      }
      long long v23 = v40;
      if (!v40) {
        goto LABEL_55;
      }
      uint64_t v31 = v41;
      uint64_t v25 = v40;
      if (v41 == v40) {
        goto LABEL_54;
      }
      do
      {
        uint64_t v33 = *--v31;
        uint64_t v32 = v33;
        void *v31 = 0;
        if (v33) {
          MEMORY[0x21667D390](v32, 0x1000C8077774924);
        }
      }
      while (v31 != v23);
      goto LABEL_53;
    }
  }
  return v19;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps1(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v56 = a2;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v56)) {
    return 1;
  }
  uint64_t v9 = *(void **)(*(void *)v56 + 136);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
  __int16 v55 = 261;
  v54[0] = a3;
  v54[1] = a4;
  mlir::Operation::emitOpError(a1, v54, (uint64_t)v60);
  if (v60[0])
  {
    int v57 = 3;
    uint64_t v58 = " #";
    uint64_t v59 = 2;
    uint64_t v18 = &v57;
    uint64_t v19 = (char *)v61;
    if (v62 >= v63)
    {
      unint64_t v44 = v62 + 1;
      if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
      {
        int64_t v50 = (char *)&v57 - (unsigned char *)v61;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
        uint64_t v19 = (char *)v61;
        uint64_t v18 = (int *)((char *)v61 + v50);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
        uint64_t v18 = &v57;
        uint64_t v19 = (char *)v61;
      }
    }
    uint64_t v20 = &v19[24 * v62];
    long long v21 = *(_OWORD *)v18;
    *((void *)v20 + 2) = *((void *)v18 + 2);
    *(_OWORD *)uint64_t v20 = v21;
    uint64_t v22 = ++v62;
    if (v60[0])
    {
      int v57 = 5;
      uint64_t v58 = (const char *)a5;
      long long v23 = &v57;
      uint64_t v24 = (char *)v61;
      if (v22 >= v63)
      {
        unint64_t v45 = v22 + 1;
        BOOL v46 = (char *)v61 + 24 * v22 > (char *)&v57;
        if (v61 <= &v57 && v46)
        {
          int64_t v51 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
          uint64_t v24 = (char *)v61;
          long long v23 = (int *)((char *)v61 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
          long long v23 = &v57;
          uint64_t v24 = (char *)v61;
        }
      }
      uint64_t v25 = &v24[24 * v62];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = *((void *)v23 + 2);
      *(_OWORD *)uint64_t v25 = v26;
      uint64_t v27 = ++v62;
      if (v60[0])
      {
        int v57 = 3;
        uint64_t v58 = " must be signless integer or floating-point, but got ";
        uint64_t v59 = 53;
        unint64_t v28 = &v57;
        int64_t v29 = (char *)v61;
        if (v27 >= v63)
        {
          unint64_t v47 = v27 + 1;
          BOOL v48 = (char *)v61 + 24 * v27 > (char *)&v57;
          if (v61 <= &v57 && v48)
          {
            int64_t v52 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            int64_t v29 = (char *)v61;
            unint64_t v28 = (int *)((char *)v61 + v52);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            unint64_t v28 = &v57;
            int64_t v29 = (char *)v61;
          }
        }
        uint64_t v30 = &v29[24 * v62];
        long long v31 = *(_OWORD *)v28;
        *((void *)v30 + 2) = *((void *)v28 + 2);
        *(_OWORD *)uint64_t v30 = v31;
        ++v62;
        if (v60[0])
        {
          uint64_t v32 = &v57;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, v56);
          uint64_t v33 = (char *)v61;
          if (v62 >= v63)
          {
            unint64_t v49 = v62 + 1;
            if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
            {
              int64_t v53 = (char *)&v57 - (unsigned char *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
              uint64_t v33 = (char *)v61;
              uint64_t v32 = (int *)((char *)v61 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
              uint64_t v32 = &v57;
              uint64_t v33 = (char *)v61;
            }
          }
          unint64_t v34 = &v33[24 * v62];
          long long v35 = *(_OWORD *)v32;
          *((void *)v34 + 2) = *((void *)v32 + 2);
          *(_OWORD *)unint64_t v34 = v35;
          ++v62;
        }
      }
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v60);
  if (v60[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
  }
  if (v69)
  {
    __int16 v36 = __p;
    if (__p)
    {
      int64_t v37 = v68;
      unsigned int v38 = __p;
      if (v68 != __p)
      {
        do
          int64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        unsigned int v38 = __p;
      }
      char v68 = v36;
      operator delete(v38);
    }
    uint64_t v39 = v65;
    if (v65)
    {
      long long v40 = v66;
      unint64_t v41 = v65;
      if (v66 != v65)
      {
        do
        {
          uint64_t v43 = *--v40;
          uint64_t v42 = v43;
          *long long v40 = 0;
          if (v43) {
            MEMORY[0x21667D390](v42, 0x1000C8077774924);
          }
        }
        while (v40 != v39);
        unint64_t v41 = v65;
      }
      __int16 v66 = v39;
      operator delete(v41);
    }
    if (v61 != v64) {
      free(v61);
    }
  }
  return v16;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps2(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)a2;
  if (*(_UNKNOWN **)(*(void *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    goto LABEL_2;
  }
  v65[0] = a2;
  v65[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v10 + 8);
  v60[0] = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
  if (mlir::Type::isSignlessInteger((mlir::Type *)v60)) {
    return 1;
  }
  unsigned int v38 = (void *)*((void *)*v60[0] + 17);
  BOOL v39 = v38 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v38 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v40 = v39 || v38 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v41 = v40 || v38 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v42 = v41 || v38 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v43 = v42 || v38 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v44 = v43 || v38 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v45 = v44 || v38 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v46 = v45 || v38 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  if (v46 || v38 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id) {
    return 1;
  }
  if (v38 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v38 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
LABEL_2:
  __int16 v61 = 261;
  v60[0] = a3;
  v60[1] = a4;
  mlir::Operation::emitOpError(a1, v60, (uint64_t)v65);
  if (v65[0])
  {
    int v62 = 3;
    unsigned int v63 = " #";
    uint64_t v64 = 2;
    uint64_t v11 = &v62;
    uint64_t v12 = (char *)v66;
    if (v67 >= v68)
    {
      unint64_t v50 = v67 + 1;
      if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
      {
        int64_t v56 = (char *)&v62 - (unsigned char *)v66;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v50, 24);
        uint64_t v12 = (char *)v66;
        uint64_t v11 = (int *)((char *)v66 + v56);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v50, 24);
        uint64_t v11 = &v62;
        uint64_t v12 = (char *)v66;
      }
    }
    unint64_t v13 = &v12[24 * v67];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = *((void *)v11 + 2);
    *(_OWORD *)unint64_t v13 = v14;
    uint64_t v15 = ++v67;
    if (v65[0])
    {
      int v62 = 5;
      unsigned int v63 = (const char *)a5;
      uint64_t v16 = &v62;
      uint64_t v17 = (char *)v66;
      if (v15 >= v68)
      {
        unint64_t v51 = v15 + 1;
        BOOL v52 = (char *)v66 + 24 * v15 > (char *)&v62;
        if (v66 <= &v62 && v52)
        {
          int64_t v57 = (char *)&v62 - (unsigned char *)v66;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v51, 24);
          uint64_t v17 = (char *)v66;
          uint64_t v16 = (int *)((char *)v66 + v57);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v51, 24);
          uint64_t v16 = &v62;
          uint64_t v17 = (char *)v66;
        }
      }
      uint64_t v18 = &v17[24 * v67];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v67;
      if (v65[0])
      {
        int v62 = 3;
        unsigned int v63 = " must be memref of signless integer or floating-point values, but got ";
        uint64_t v64 = 70;
        long long v21 = &v62;
        uint64_t v22 = (char *)v66;
        if (v20 >= v68)
        {
          unint64_t v53 = v20 + 1;
          BOOL v54 = (char *)v66 + 24 * v20 > (char *)&v62;
          if (v66 <= &v62 && v54)
          {
            int64_t v58 = (char *)&v62 - (unsigned char *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
            uint64_t v22 = (char *)v66;
            long long v21 = (int *)((char *)v66 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
            long long v21 = &v62;
            uint64_t v22 = (char *)v66;
          }
        }
        long long v23 = &v22[24 * v67];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)long long v23 = v24;
        ++v67;
        if (v65[0])
        {
          uint64_t v25 = &v62;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v62, a2);
          long long v26 = (char *)v66;
          if (v67 >= v68)
          {
            unint64_t v55 = v67 + 1;
            if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
            {
              int64_t v59 = (char *)&v62 - (unsigned char *)v66;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
              long long v26 = (char *)v66;
              uint64_t v25 = (int *)((char *)v66 + v59);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
              uint64_t v25 = &v62;
              long long v26 = (char *)v66;
            }
          }
          uint64_t v27 = &v26[24 * v67];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)uint64_t v27 = v28;
          ++v67;
        }
      }
    }
  }
  uint64_t v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
  if (v65[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
  }
  if (v74)
  {
    uint64_t v30 = __p;
    if (__p)
    {
      long long v31 = v73;
      uint64_t v32 = __p;
      if (v73 != __p)
      {
        do
          long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unint64_t v73 = v30;
      operator delete(v32);
    }
    uint64_t v33 = v70;
    if (v70)
    {
      unint64_t v34 = v71;
      long long v35 = v70;
      if (v71 != v70)
      {
        do
        {
          uint64_t v37 = *--v34;
          uint64_t v36 = v37;
          *unint64_t v34 = 0;
          if (v37) {
            MEMORY[0x21667D390](v36, 0x1000C8077774924);
          }
        }
        while (v34 != v33);
        long long v35 = v70;
      }
      unint64_t v71 = v33;
      operator delete(v35);
    }
    if (v66 != v69) {
      free(v66);
    }
  }
  return v29;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id) {
    return 1;
  }
  __int16 v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 3;
    BOOL v48 = " #";
    uint64_t v49 = 2;
    uint64_t v7 = &v47;
    uint64_t v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v41 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v8 = (char *)v51;
        uint64_t v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v7 = &v47;
        uint64_t v8 = (char *)v51;
      }
    }
    uint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 5;
      BOOL v48 = (const char *)a5;
      uint64_t v12 = &v47;
      unint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          int64_t v42 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          unint64_t v13 = (char *)v51;
          uint64_t v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          uint64_t v12 = &v47;
          unint64_t v13 = (char *)v51;
        }
      }
      long long v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)long long v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 3;
        BOOL v48 = " must be variadic of index, but got ";
        uint64_t v49 = 36;
        uint64_t v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            int64_t v43 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v18 = (char *)v51;
            uint64_t v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        long long v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)long long v19 = v20;
        ++v52;
        if (v50[0])
        {
          long long v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          uint64_t v22 = (char *)v51;
          if (v52 >= v53)
          {
            unint64_t v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              int64_t v44 = (char *)&v47 - (unsigned char *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v22 = (char *)v51;
              long long v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              long long v21 = &v47;
              uint64_t v22 = (char *)v51;
            }
          }
          long long v23 = &v22[24 * v52];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)long long v23 = v24;
          ++v52;
        }
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    long long v26 = __p;
    if (__p)
    {
      uint64_t v27 = v58;
      long long v28 = __p;
      if (v58 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        long long v28 = __p;
      }
      int64_t v58 = v26;
      operator delete(v28);
    }
    uint64_t v29 = v55;
    if (v55)
    {
      uint64_t v30 = v56;
      long long v31 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          *uint64_t v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        long long v31 = v55;
      }
      int64_t v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v25;
}

uint64_t mlir::memref::AtomicRMWOp::parse(uint64_t a1, void *a2)
{
  v79[4] = *MEMORY[0x263EF8340];
  memset(v79, 0, 24);
  v55[0] = (uint64_t)v79;
  v55[1] = 1;
  memset(v78, 0, 24);
  v54[0] = (uint64_t)v78;
  v54[1] = 1;
  uint64_t v75 = v77;
  uint64_t v76 = 0x400000000;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  v53[0] = &v74;
  v53[1] = 1;
  v52[0] = &v73;
  v52[1] = 1;
  uint64_t AttrData = 0;
  unint64_t v51 = 0;
  v70[0] = v71;
  v70[1] = (void *)0x400000000;
  v71[8] = 4;
  uint64_t __src = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  long long v67 = xmmword_26418D098;
  long long v68 = *(_OWORD *)&off_26418D0A8;
  long long v69 = xmmword_26418D0B8;
  *(_OWORD *)unsigned int v63 = xmmword_26418D058;
  long long v64 = *(_OWORD *)&off_26418D068;
  *(_OWORD *)__p = xmmword_26418D078;
  long long v66 = *(_OWORD *)&off_26418D088;
  v62[2] = xmmword_26418D018;
  v62[3] = *(_OWORD *)&off_26418D028;
  v62[4] = xmmword_26418D038;
  v62[5] = *(_OWORD *)&off_26418D048;
  long long v60 = xmmword_26418CFD8;
  *(_OWORD *)__int16 v61 = *(_OWORD *)&off_26418CFE8;
  v62[0] = xmmword_26418CFF8;
  v62[1] = *(_OWORD *)&off_26418D008;
  if ((*(unsigned __int8 (**)(uint64_t, void ***, long long *, uint64_t))(*(void *)a1 + 392))(a1, &AttrData, &v60, 15))
  {
    uint64_t v5 = (uint64_t)v51;
    if (!v51) {
      goto LABEL_3;
    }
  }
  else
  {
    v48[0] = 0;
    uint64_t v17 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    Noneuint64_t Type = mlir::Builder::getNoneType(v17, v18);
    unsigned __int16 v20 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 440))(a1, v48, NoneType);
    if (v20 >= 0x100u && (_BYTE)v20)
    {
      mlir::NamedAttrList::append((uint64_t)v70, (uint64_t)"kind", 4, v48[0]);
    }
    else
    {
      if (v20 < 0x100u)
      {
        int64_t v56 = (void **)"expected string or keyword containing one of the following enum values for attribute 'kind' [addf"
                       ", addi, assign, maximumf, maxs, maxu, minimumf, mins, minu, mulf, muli, ori, andi, maxnumf, minnumf]";
        __int16 v59 = 259;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void ***))(*(void *)a1 + 24))(&v60, a1, v4, &v56);
        uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v60);
        if ((void)v60) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
        }
        if (BYTE8(v66))
        {
          long long v21 = __p[0];
          if (__p[0])
          {
            uint64_t v22 = __p[1];
            long long v23 = __p[0];
            if (__p[1] != __p[0])
            {
              do
                uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
              while (v22 != v21);
              long long v23 = __p[0];
            }
            __p[1] = v21;
            operator delete(v23);
          }
          long long v24 = v63[1];
          if (!v63[1]) {
            goto LABEL_73;
          }
          uint64_t v25 = (void *)v64;
          long long v26 = v63[1];
          if ((void *)v64 == v63[1]) {
            goto LABEL_72;
          }
          do
          {
            uint64_t v28 = *--v25;
            uint64_t v27 = v28;
            void *v25 = 0;
            if (v28) {
              MEMORY[0x21667D390](v27, 0x1000C8077774924);
            }
          }
          while (v25 != v24);
          goto LABEL_71;
        }
LABEL_75:
        int64_t v44 = v70[0];
        if (v70[0] == v71) {
          goto LABEL_77;
        }
        goto LABEL_76;
      }
      if (!(_BYTE)v20)
      {
        uint64_t v16 = 0;
        int64_t v44 = v70[0];
        if (v70[0] == v71) {
          goto LABEL_77;
        }
LABEL_76:
        free(v44);
        goto LABEL_77;
      }
    }
    uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v48);
    unint64_t v51 = (const char *)v5;
    if (!v5)
    {
LABEL_3:
      uint64_t v6 = v70[0];
      if (v70[0] == v71) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v29 = mlir::arith::symbolizeAtomicRMWKind((uint64_t)AttrData, v5);
  if (!v30)
  {
    v48[0] = (uint64_t)"invalid ";
    __int16 v49 = 259;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(&v60, a1, v4, v48);
    if ((void)v60)
    {
      LODWORD(v56) = 3;
      int64_t v57 = "kind attribute specification: \"";
      uint64_t v58 = 31;
      unint64_t v34 = &v56;
      unint64_t v35 = (char *)v61[1];
      if (LODWORD(v62[0]) >= DWORD1(v62[0]))
      {
        unint64_t v46 = LODWORD(v62[0]) + 1;
        if (v61[1] <= &v56 && (char *)v61[1] + 24 * LODWORD(v62[0]) > (char *)&v56)
        {
          int64_t v47 = (char *)&v56 - (char *)v61[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61[1], (char *)v62 + 8, v46, 24);
          unint64_t v35 = (char *)v61[1];
          unint64_t v34 = (void ***)((char *)v61[1] + v47);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61[1], (char *)v62 + 8, v46, 24);
          unint64_t v34 = &v56;
          unint64_t v35 = (char *)v61[1];
        }
      }
      unint64_t v36 = &v35[24 * LODWORD(v62[0])];
      long long v37 = *(_OWORD *)v34;
      *((void *)v36 + 2) = v34[2];
      *(_OWORD *)unint64_t v36 = v37;
      ++LODWORD(v62[0]);
      if ((void)v60)
      {
        __int16 v59 = 261;
        int64_t v56 = AttrData;
        int64_t v57 = v51;
        mlir::Diagnostic::operator<<((uint64_t)&v60 + 8, &v56);
        if ((void)v60) {
          mlir::Diagnostic::operator<<((uint64_t)&v60 + 8, 34);
        }
      }
    }
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v60);
    if ((void)v60) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
    }
    if (BYTE8(v66))
    {
      unint64_t v38 = __p[0];
      if (__p[0])
      {
        BOOL v39 = __p[1];
        unint64_t v40 = __p[0];
        if (__p[1] != __p[0])
        {
          do
            BOOL v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          unint64_t v40 = __p[0];
        }
        __p[1] = v38;
        operator delete(v40);
      }
      long long v24 = v63[1];
      if (!v63[1]) {
        goto LABEL_73;
      }
      int64_t v41 = (void *)v64;
      long long v26 = v63[1];
      if ((void *)v64 == v63[1])
      {
LABEL_72:
        *(void *)&long long v64 = v24;
        operator delete(v26);
LABEL_73:
        if (v61[1] != (char *)v62 + 8) {
          free(v61[1]);
        }
        goto LABEL_75;
      }
      do
      {
        uint64_t v43 = *--v41;
        uint64_t v42 = v43;
        *int64_t v41 = 0;
        if (v43) {
          MEMORY[0x21667D390](v42, 0x1000C8077774924);
        }
      }
      while (v41 != v24);
LABEL_71:
      long long v26 = v63[1];
      goto LABEL_72;
    }
    goto LABEL_75;
  }
  unint64_t v31 = v29;
  uint64_t v32 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v33 = mlir::anec::BoxCoordinateModeAttr::get(*v32, v31);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>((uint64_t)a2) = v33;
  uint64_t v6 = v70[0];
  if (v70[0] != v71) {
LABEL_4:
  }
    free(v6);
LABEL_5:
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v79, 1)) {
    goto LABEL_28;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    goto LABEL_28;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v78, 1)) {
    goto LABEL_28;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 296))(a1)) {
    goto LABEL_28;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v75, 0, 1, 0xFFFFFFFFLL))goto LABEL_28; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1))
  }
    goto LABEL_28;
  v70[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14)) {
    goto LABEL_28;
  }
  uint64_t v9 = a2[1];
  *(void *)&long long v60 = a1;
  *((void *)&v60 + 1) = v70;
  v61[0] = a2;
  if (!mlir::memref::AtomicRMWOp::verifyInherentAttrs(v9, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AtomicRMWOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v60))goto LABEL_28; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    goto LABEL_28;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    goto LABEL_28;
  }
  *(void *)&long long v60 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a1 + 504))(a1, &v60)) {
    goto LABEL_28;
  }
  uint64_t v74 = v60;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    goto LABEL_28;
  }
  *(void *)&long long v60 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v60)
    || (uint64_t v73 = v60, !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
    || !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1)
    || (*(void *)&long long v60 = 0,
        !(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a1 + 504))(a1, &v60))
    || (uint64_t __src = v60,
        long long v10 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1),
        uint64_t IndexType = mlir::Builder::getIndexType(v10, v11),
        mlir::OperationState::addTypes((uint64_t)a2, &__src, 1),
        unint64_t v13 = a2 + 2,
        !mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v55, v53, v7, (uint64_t)(a2 + 2)))|| !mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v54, v52, v8, (uint64_t)(a2 + 2)))
  {
LABEL_28:
    uint64_t v16 = 0;
    goto LABEL_77;
  }
  if (v76)
  {
    long long v14 = (char *)v75;
    uint64_t v15 = 32 * v76;
    uint64_t v16 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, void *))(*(void *)a1 + 696))(a1, v14, IndexType, v13))
    {
      v14 += 32;
      v15 -= 32;
      if (!v15) {
        goto LABEL_77;
      }
    }
    goto LABEL_28;
  }
  uint64_t v16 = 1;
LABEL_77:
  if (v75 != v77) {
    free(v75);
  }
  return v16;
}

void mlir::memref::AtomicRMWOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v57[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  unint64_t v55 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  unint64_t Value = mlir::arith::AtomicRMWKindAttr::getValue((mlir::arith::AtomicRMWKindAttr *)&v55);
  uint64_t v7 = mlir::arith::stringifyAtomicRMWKind(Value);
  size_t v9 = v8;
  long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (void *)*((void *)v10 + 4);
  if (v9 <= *((void *)v10 + 3) - (void)v11)
  {
    if (v9)
    {
      memcpy(v11, v7, v9);
      *((void *)v10 + 4) += v9;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, v7, v9);
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    *unint64_t v13 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  long long v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ",", 1uLL);
  }
  else
  {
    unsigned char *v15 = 44;
    ++*((void *)v14 + 4);
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    *uint64_t v17 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v19 = (unsigned char *)*((void *)v18 + 4);
  if (*((unsigned char **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, "[", 1uLL);
    unsigned __int16 v20 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_19;
    }
  }
  else
  {
    *long long v19 = 91;
    ++*((void *)v18 + 4);
    unsigned __int16 v20 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_19:
      uint64_t v21 = *((unsigned int *)v20 + 17);
      uint64_t v22 = *((void *)v20 + 9);
      uint64_t v23 = v21 - 2;
      goto LABEL_20;
    }
  }
  uint64_t v22 = 0;
  uint64_t v23 = -2;
LABEL_20:
  uint64_t v24 = v22 + 64;
  uint64_t v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v55 = ", ";
  uint64_t v56 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v24, 0, v24, v23, (uint64_t)a2, v25, (uint64_t)&v55);
  long long v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if (*((unsigned char **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, "]", 1uLL);
  }
  else
  {
    unsigned char *v27 = 93;
    ++*((void *)v26 + 4);
  }
  unint64_t v55 = v57;
  v57[0] = "kind";
  v57[1] = 4;
  uint64_t v56 = 0x200000001;
  uint64_t v28 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v28);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v28 + 56);
  }
  uint64_t v30 = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, v30, v31, v55, v56);
  uint64_t v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v33 = (unsigned char *)*((void *)v32 + 4);
  if ((unint64_t)v33 >= *((void *)v32 + 3))
  {
    llvm::raw_ostream::write(v32, 32);
  }
  else
  {
    *((void *)v32 + 4) = v33 + 1;
    unsigned char *v33 = 32;
  }
  unint64_t v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v35 = (unsigned char *)*((void *)v34 + 4);
  if (*((unsigned char **)v34 + 3) == v35)
  {
    llvm::raw_ostream::write(v34, ":", 1uLL);
  }
  else
  {
    *unint64_t v35 = 58;
    ++*((void *)v34 + 4);
  }
  unint64_t v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v37 = (unsigned char *)*((void *)v36 + 4);
  if ((unint64_t)v37 >= *((void *)v36 + 3))
  {
    llvm::raw_ostream::write(v36, 32);
  }
  else
  {
    *((void *)v36 + 4) = v37 + 1;
    unsigned char *v37 = 32;
  }
  unint64_t v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v39 = (unsigned char *)*((void *)v38 + 4);
  if (*((unsigned char **)v38 + 3) == v39)
  {
    llvm::raw_ostream::write(v38, "(", 1uLL);
  }
  else
  {
    unsigned char *v39 = 40;
    ++*((void *)v38 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v40 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v41 = (unsigned char *)*((void *)v40 + 4);
  if (*((unsigned char **)v40 + 3) == v41)
  {
    llvm::raw_ostream::write(v40, ",", 1uLL);
  }
  else
  {
    *int64_t v41 = 44;
    ++*((void *)v40 + 4);
  }
  uint64_t v42 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v43 = (unsigned char *)*((void *)v42 + 4);
  if ((unint64_t)v43 >= *((void *)v42 + 3))
  {
    llvm::raw_ostream::write(v42, 32);
  }
  else
  {
    *((void *)v42 + 4) = v43 + 1;
    unsigned char *v43 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  int64_t v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v45 = (unsigned char *)*((void *)v44 + 4);
  if (*((unsigned char **)v44 + 3) == v45)
  {
    llvm::raw_ostream::write(v44, ")", 1uLL);
  }
  else
  {
    *BOOL v45 = 41;
    ++*((void *)v44 + 4);
  }
  unint64_t v46 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v47 = (unsigned char *)*((void *)v46 + 4);
  if ((unint64_t)v47 >= *((void *)v46 + 3))
  {
    llvm::raw_ostream::write(v46, 32);
  }
  else
  {
    *((void *)v46 + 4) = v47 + 1;
    *int64_t v47 = 32;
  }
  BOOL v48 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v49 = (_WORD *)*((void *)v48 + 4);
  if (*((void *)v48 + 3) - (void)v49 > 1uLL)
  {
    *__int16 v49 = 15917;
    *((void *)v48 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v48, "->", 2uLL);
  }
  unint64_t v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v51 = (unsigned char *)*((void *)v50 + 4);
  if ((unint64_t)v51 >= *((void *)v50 + 3))
  {
    llvm::raw_ostream::write(v50, 32);
  }
  else
  {
    *((void *)v50 + 4) = v51 + 1;
    *unint64_t v51 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v52 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v52, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v55 != v57) {
    free(v55);
  }
}

void mlir::memref::AtomicRMWOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
  uint64_t v6 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  {
    int64_t v44 = v6;
    uint64_t v6 = v44;
    if (v27)
    {
      {
        BOOL v45 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v46 = 84;
        unint64_t v30 = llvm::StringRef::find((uint64_t *)&v45, "DesiredTypeName = ", 0x12uLL, 0);
        if (v46 >= v30) {
          unint64_t v31 = v30;
        }
        else {
          unint64_t v31 = v46;
        }
        uint64_t v32 = &v45[v31];
        unint64_t v33 = v46 - v31;
        if (v46 - v31 >= 0x12) {
          uint64_t v34 = 18;
        }
        else {
          uint64_t v34 = v46 - v31;
        }
        unint64_t v35 = v33 - v34;
        if (v35 >= v35 - 1) {
          uint64_t v36 = v35 - 1;
        }
        else {
          uint64_t v36 = v35;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
      *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      uint64_t v6 = v44;
    }
  }
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12))
  {
    BOOL v45 = (const char *)v6;
    unint64_t v46 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v47 = v5 | 4;
    uint64_t v48 = 0;
    int v49 = 0;
    char v50 = 0;
    unint64_t v13 = v7 + 1;
    BOOL v14 = *(void *)a2 + 40 * (unint64_t)v7 > (unint64_t)&v45;
    if (*(void *)a2 <= (unint64_t)&v45 && v14)
    {
      uint64_t v28 = (char *)&v45 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v13, 40);
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = (const char **)&v28[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v13, 40);
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = &v45;
    }
    uint64_t v17 = v15 + 40 * *(unsigned int *)(a2 + 8);
    long long v18 = *(_OWORD *)v16;
    long long v19 = *((_OWORD *)v16 + 1);
    *(void *)(v17 + 32) = v16[4];
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  else
  {
    uint64_t v8 = *(void *)a2 + 40 * v7;
    *(void *)uint64_t v8 = v6;
    *(void *)(v8 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v8 + 16) = v5 | 4;
    *(void *)(v8 + 24) = 0;
    *(_DWORD *)(v8 + 32) = 0;
    *(unsigned char *)(v8 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
  long long v10 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  {
    {
      BOOL v45 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      unint64_t v46 = 84;
      unint64_t v37 = llvm::StringRef::find((uint64_t *)&v45, "DesiredTypeName = ", 0x12uLL, 0);
      if (v46 >= v37) {
        unint64_t v38 = v37;
      }
      else {
        unint64_t v38 = v46;
      }
      BOOL v39 = &v45[v38];
      unint64_t v40 = v46 - v38;
      if (v46 - v38 >= 0x12) {
        uint64_t v41 = 18;
      }
      else {
        uint64_t v41 = v46 - v38;
      }
      unint64_t v42 = v40 - v41;
      if (v42 >= v42 - 1) {
        uint64_t v43 = v42 - 1;
      }
      else {
        uint64_t v43 = v42;
      }
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
    *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
    __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 8);
  if (v11 >= *(_DWORD *)(a2 + 12))
  {
    BOOL v45 = (const char *)v10;
    unint64_t v46 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v47 = v9 | 4;
    uint64_t v48 = 0;
    int v49 = 0;
    char v50 = 0;
    unint64_t v20 = v11 + 1;
    BOOL v21 = *(void *)a2 + 40 * (unint64_t)v11 > (unint64_t)&v45;
    if (*(void *)a2 <= (unint64_t)&v45 && v21)
    {
      uint64_t v29 = (char *)&v45 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v20, 40);
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = (const char **)&v29[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v20, 40);
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = &v45;
    }
    uint64_t v24 = v22 + 40 * *(unsigned int *)(a2 + 8);
    long long v25 = *(_OWORD *)v23;
    long long v26 = *((_OWORD *)v23 + 1);
    *(void *)(v24 + 32) = v23[4];
    *(_OWORD *)uint64_t v24 = v25;
    *(_OWORD *)(v24 + 16) = v26;
  }
  else
  {
    uint64_t v12 = *(void *)a2 + 40 * v11;
    *(void *)uint64_t v12 = v10;
    *(void *)(v12 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v12 + 16) = v9 | 4;
    *(void *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

BOOL mlir::memref::AtomicYieldOp::parse(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  uint64_t v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  uint64_t v9 = v6;
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

void mlir::memref::AtomicYieldOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v19[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v17 = v19;
  uint64_t v18 = 0x200000000;
  uint64_t v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v9, v17, v18);
  long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *uint64_t v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    *unint64_t v13 = 58;
    ++*((void *)v12 + 4);
  }
  BOOL v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v17 != v19) {
    free(v17);
  }
}

uint64_t mlir::memref::detail::CopyOpGenericAdaptorBase::CopyOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.copy", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::CopyOp::verifyInvariantsImpl(mlir::memref::CopyOp *this)
{
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0)&& mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u) != 0;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void **)(*(void *)a2 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    v53[0] = a2;
    v53[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v6 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v53);
    return 1;
  }
  else
  {
    __int16 v49 = 261;
    v48[0] = a3;
    v48[1] = a4;
    mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
    if (v53[0])
    {
      int v50 = 3;
      uint64_t v51 = " #";
      uint64_t v52 = 2;
      uint64_t v11 = &v50;
      uint64_t v12 = (char *)v54;
      if (v55 >= v56)
      {
        unint64_t v38 = v55 + 1;
        if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
        {
          int64_t v44 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v12 = (char *)v54;
          uint64_t v11 = (int *)((char *)v54 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          uint64_t v11 = &v50;
          uint64_t v12 = (char *)v54;
        }
      }
      unint64_t v13 = &v12[24 * v55];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)unint64_t v13 = v14;
      uint64_t v15 = ++v55;
      if (v53[0])
      {
        int v50 = 5;
        uint64_t v51 = (const char *)a5;
        uint64_t v16 = &v50;
        uint64_t v17 = (char *)v54;
        if (v15 >= v56)
        {
          unint64_t v39 = v15 + 1;
          BOOL v40 = (char *)v54 + 24 * v15 > (char *)&v50;
          if (v54 <= &v50 && v40)
          {
            int64_t v45 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
            uint64_t v17 = (char *)v54;
            uint64_t v16 = (int *)((char *)v54 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
            uint64_t v16 = &v50;
            uint64_t v17 = (char *)v54;
          }
        }
        uint64_t v18 = &v17[24 * v55];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = *((void *)v16 + 2);
        *(_OWORD *)uint64_t v18 = v19;
        uint64_t v20 = ++v55;
        if (v53[0])
        {
          int v50 = 3;
          uint64_t v51 = " must be ranked or unranked memref of any type values, but got ";
          uint64_t v52 = 63;
          BOOL v21 = &v50;
          uint64_t v22 = (char *)v54;
          if (v20 >= v56)
          {
            unint64_t v41 = v20 + 1;
            BOOL v42 = (char *)v54 + 24 * v20 > (char *)&v50;
            if (v54 <= &v50 && v42)
            {
              int64_t v46 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
              uint64_t v22 = (char *)v54;
              BOOL v21 = (int *)((char *)v54 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
              BOOL v21 = &v50;
              uint64_t v22 = (char *)v54;
            }
          }
          uint64_t v23 = &v22[24 * v55];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)uint64_t v23 = v24;
          ++v55;
          if (v53[0])
          {
            long long v25 = &v50;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
            long long v26 = (char *)v54;
            if (v55 >= v56)
            {
              unint64_t v43 = v55 + 1;
              if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
              {
                int64_t v47 = (char *)&v50 - (unsigned char *)v54;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
                long long v26 = (char *)v54;
                long long v25 = (int *)((char *)v54 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
                long long v25 = &v50;
                long long v26 = (char *)v54;
              }
            }
            int v27 = &v26[24 * v55];
            long long v28 = *(_OWORD *)v25;
            *((void *)v27 + 2) = *((void *)v25 + 2);
            *(_OWORD *)int v27 = v28;
            ++v55;
          }
        }
      }
    }
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (v62)
    {
      uint64_t v29 = __p;
      if (__p)
      {
        unint64_t v30 = v61;
        unint64_t v31 = __p;
        if (v61 != __p)
        {
          do
            unint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          unint64_t v31 = __p;
        }
        __int16 v61 = v29;
        operator delete(v31);
      }
      uint64_t v32 = v58;
      if (v58)
      {
        unint64_t v33 = v59;
        uint64_t v34 = v58;
        if (v59 != v58)
        {
          do
          {
            uint64_t v36 = *--v33;
            uint64_t v35 = v36;
            void *v33 = 0;
            if (v36) {
              MEMORY[0x21667D390](v35, 0x1000C8077774924);
            }
          }
          while (v33 != v32);
          uint64_t v34 = v58;
        }
        __int16 v59 = v32;
        operator delete(v34);
      }
      if (v54 != v57) {
        free(v54);
      }
    }
  }
  return v9;
}

BOOL mlir::memref::CopyOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v11[0] = (uint64_t)v17;
  v11[1] = 1;
  memset(v16, 0, 24);
  v10[0] = (uint64_t)v16;
  v10[1] = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v9[0] = &v15;
  v9[1] = 1;
  v8[0] = &v14;
  v8[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v16, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (v12[0] = 0, mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, v12))
    && (uint64_t v15 = v12[0],
        __int16 v13 = 257,
        (*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, v12))&& (v12[0] = 0, mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, v12))&& (uint64_t v14 = v12[0], v6 = a2 + 16, mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v11, v9, v4, v6)))
  {
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v8, v5, v6) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::memref::CopyOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v29[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    unsigned char *v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  int v27 = v29;
  uint64_t v28 = 0x200000000;
  long long v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v27, v28);
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *uint64_t v17 = 58;
    ++*((void *)v16 + 4);
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *long long v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    *BOOL v21 = 32;
  }
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v23 = (_WORD *)*((void *)v22 + 4);
  if (*((void *)v22 + 3) - (void)v23 > 1uLL)
  {
    *uint64_t v23 = 28532;
    *((void *)v22 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v22, "to", 2uLL);
  }
  long long v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    unsigned char *v25 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v27 != v29) {
    free(v27);
  }
}

void mlir::memref::CopyOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t v6 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  {
    int64_t v44 = v6;
    uint64_t v6 = v44;
    if (v27)
    {
      {
        int64_t v45 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v46 = 84;
        unint64_t v30 = llvm::StringRef::find((uint64_t *)&v45, "DesiredTypeName = ", 0x12uLL, 0);
        if (v46 >= v30) {
          unint64_t v31 = v30;
        }
        else {
          unint64_t v31 = v46;
        }
        uint64_t v32 = &v45[v31];
        unint64_t v33 = v46 - v31;
        if (v46 - v31 >= 0x12) {
          uint64_t v34 = 18;
        }
        else {
          uint64_t v34 = v46 - v31;
        }
        unint64_t v35 = v33 - v34;
        if (v35 >= v35 - 1) {
          uint64_t v36 = v35 - 1;
        }
        else {
          uint64_t v36 = v35;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
      *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      uint64_t v6 = v44;
    }
  }
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12))
  {
    int64_t v45 = (const char *)v6;
    unint64_t v46 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v47 = v5 | 4;
    uint64_t v48 = 0;
    int v49 = 0;
    char v50 = 1;
    unint64_t v13 = v7 + 1;
    BOOL v14 = *(void *)a2 + 40 * (unint64_t)v7 > (unint64_t)&v45;
    if (*(void *)a2 <= (unint64_t)&v45 && v14)
    {
      uint64_t v28 = (char *)&v45 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v13, 40);
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = (const char **)&v28[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v13, 40);
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = &v45;
    }
    uint64_t v17 = v15 + 40 * *(unsigned int *)(a2 + 8);
    long long v18 = *(_OWORD *)v16;
    long long v19 = *((_OWORD *)v16 + 1);
    *(void *)(v17 + 32) = v16[4];
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  else
  {
    uint64_t v8 = *(void *)a2 + 40 * v7;
    *(void *)uint64_t v8 = v6;
    *(void *)(v8 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v8 + 16) = v5 | 4;
    *(void *)(v8 + 24) = 0;
    *(_DWORD *)(v8 + 32) = 0;
    *(unsigned char *)(v8 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
  long long v10 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  {
    {
      int64_t v45 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      unint64_t v46 = 84;
      unint64_t v37 = llvm::StringRef::find((uint64_t *)&v45, "DesiredTypeName = ", 0x12uLL, 0);
      if (v46 >= v37) {
        unint64_t v38 = v37;
      }
      else {
        unint64_t v38 = v46;
      }
      unint64_t v39 = &v45[v38];
      unint64_t v40 = v46 - v38;
      if (v46 - v38 >= 0x12) {
        uint64_t v41 = 18;
      }
      else {
        uint64_t v41 = v46 - v38;
      }
      unint64_t v42 = v40 - v41;
      if (v42 >= v42 - 1) {
        uint64_t v43 = v42 - 1;
      }
      else {
        uint64_t v43 = v42;
      }
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
    *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
    __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 8);
  if (v11 >= *(_DWORD *)(a2 + 12))
  {
    int64_t v45 = (const char *)v10;
    unint64_t v46 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v47 = v9 | 4;
    uint64_t v48 = 0;
    int v49 = 0;
    char v50 = 1;
    unint64_t v20 = v11 + 1;
    BOOL v21 = *(void *)a2 + 40 * (unint64_t)v11 > (unint64_t)&v45;
    if (*(void *)a2 <= (unint64_t)&v45 && v21)
    {
      uint64_t v29 = (char *)&v45 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v20, 40);
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = (const char **)&v29[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v20, 40);
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = &v45;
    }
    uint64_t v24 = v22 + 40 * *(unsigned int *)(a2 + 8);
    long long v25 = *(_OWORD *)v23;
    long long v26 = *((_OWORD *)v23 + 1);
    *(void *)(v24 + 32) = v23[4];
    *(_OWORD *)uint64_t v24 = v25;
    *(_OWORD *)(v24 + 16) = v26;
  }
  else
  {
    uint64_t v12 = *(void *)a2 + 40 * v11;
    *(void *)uint64_t v12 = v10;
    *(void *)(v12 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v12 + 16) = v9 | 4;
    *(void *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t mlir::memref::GenericAtomicRMWOp::verifyInvariantsImpl(mlir::memref::GenericAtomicRMWOp *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps2(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  uint64_t v2 = *(void *)this;
  }
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
  {
    uint64_t v4 = -1;
    uint64_t v5 = 32;
LABEL_5:
    uint64_t v6 = 0;
    uint64_t v7 = v5 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, (int)v6 + 1))
    {
      ++v6;
      v7 += 32;
      if (v4 == v6)
      {
        uint64_t v2 = *(void *)this;
        goto LABEL_9;
      }
    }
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(v2 + 68);
  uint64_t v4 = v3 - 1;
  if (v3 != 1)
  {
    uint64_t v5 = *(void *)(v2 + 72) + 32;
    goto LABEL_5;
  }
LABEL_9:
  int v8 = *(_DWORD *)(v2 + 36);
  uint64_t v9 = v2 - 16;
  uint64_t v10 = v8 ? v9 : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0))return 0; {
  v26[0] = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v26);
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v13 = *(void *)this - 16;
  }
  else {
    uint64_t v13 = 0;
  }
  if (RHS == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v24 = (void **)"failed to verify that result type matches element type of memref";
  __int16 v25 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v24, (uint64_t)v26);
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  }
  if (v33)
  {
    uint64_t v15 = __p;
    if (__p)
    {
      uint64_t v16 = v32;
      uint64_t v17 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      uint64_t v32 = v15;
      operator delete(v17);
    }
    long long v18 = v29;
    if (v29)
    {
      long long v19 = v30;
      unint64_t v20 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v22 = *--v19;
          uint64_t v21 = v22;
          *long long v19 = 0;
          if (v22) {
            MEMORY[0x21667D390](v21, 0x1000C8077774924);
          }
        }
        while (v19 != v18);
        unint64_t v20 = v29;
      }
      unint64_t v30 = v18;
      operator delete(v20);
    }
    if (v27 != &v28) {
      free(v27);
    }
  }
  return v14;
}

uint64_t mlir::memref::GenericAtomicRMWOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15[2] = *MEMORY[0x263EF8340];
  v15[0] = a4;
  v15[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  unint64_t v14 = *(void *)(mlir::ValueRange::dereference_iterator(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  **(void **)a11 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v14);
  return 1;
}

void mlir::memref::GenericAtomicRMWOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t v6 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  {
    int64_t v44 = v6;
    uint64_t v6 = v44;
    if (v27)
    {
      {
        int64_t v45 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v46 = 84;
        unint64_t v30 = llvm::StringRef::find((uint64_t *)&v45, "DesiredTypeName = ", 0x12uLL, 0);
        if (v46 >= v30) {
          unint64_t v31 = v30;
        }
        else {
          unint64_t v31 = v46;
        }
        uint64_t v32 = &v45[v31];
        unint64_t v33 = v46 - v31;
        if (v46 - v31 >= 0x12) {
          uint64_t v34 = 18;
        }
        else {
          uint64_t v34 = v46 - v31;
        }
        unint64_t v35 = v33 - v34;
        if (v35 >= v35 - 1) {
          uint64_t v36 = v35 - 1;
        }
        else {
          uint64_t v36 = v35;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
      *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      uint64_t v6 = v44;
    }
  }
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12))
  {
    int64_t v45 = (const char *)v6;
    unint64_t v46 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v47 = v5 | 4;
    uint64_t v48 = 0;
    int v49 = 0;
    char v50 = 0;
    unint64_t v13 = v7 + 1;
    BOOL v14 = *(void *)a2 + 40 * (unint64_t)v7 > (unint64_t)&v45;
    if (*(void *)a2 <= (unint64_t)&v45 && v14)
    {
      uint64_t v28 = (char *)&v45 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v13, 40);
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = (const char **)&v28[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v13, 40);
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = &v45;
    }
    uint64_t v17 = v15 + 40 * *(unsigned int *)(a2 + 8);
    long long v18 = *(_OWORD *)v16;
    long long v19 = *((_OWORD *)v16 + 1);
    *(void *)(v17 + 32) = v16[4];
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  else
  {
    uint64_t v8 = *(void *)a2 + 40 * v7;
    *(void *)uint64_t v8 = v6;
    *(void *)(v8 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v8 + 16) = v5 | 4;
    *(void *)(v8 + 24) = 0;
    *(_DWORD *)(v8 + 32) = 0;
    *(unsigned char *)(v8 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t v10 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  {
    {
      int64_t v45 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      unint64_t v46 = 84;
      unint64_t v37 = llvm::StringRef::find((uint64_t *)&v45, "DesiredTypeName = ", 0x12uLL, 0);
      if (v46 >= v37) {
        unint64_t v38 = v37;
      }
      else {
        unint64_t v38 = v46;
      }
      unint64_t v39 = &v45[v38];
      unint64_t v40 = v46 - v38;
      if (v46 - v38 >= 0x12) {
        uint64_t v41 = 18;
      }
      else {
        uint64_t v41 = v46 - v38;
      }
      unint64_t v42 = v40 - v41;
      if (v42 >= v42 - 1) {
        uint64_t v43 = v42 - 1;
      }
      else {
        uint64_t v43 = v42;
      }
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
    *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
    __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 8);
  if (v11 >= *(_DWORD *)(a2 + 12))
  {
    int64_t v45 = (const char *)v10;
    unint64_t v46 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v47 = v9 | 4;
    uint64_t v48 = 0;
    int v49 = 0;
    char v50 = 0;
    unint64_t v20 = v11 + 1;
    BOOL v21 = *(void *)a2 + 40 * (unint64_t)v11 > (unint64_t)&v45;
    if (*(void *)a2 <= (unint64_t)&v45 && v21)
    {
      uint64_t v29 = (char *)&v45 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v20, 40);
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = (const char **)&v29[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v20, 40);
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = &v45;
    }
    uint64_t v24 = v22 + 40 * *(unsigned int *)(a2 + 8);
    long long v25 = *(_OWORD *)v23;
    long long v26 = *((_OWORD *)v23 + 1);
    *(void *)(v24 + 32) = v23[4];
    *(_OWORD *)uint64_t v24 = v25;
    *(_OWORD *)(v24 + 16) = v26;
  }
  else
  {
    uint64_t v12 = *(void *)a2 + 40 * v11;
    *(void *)uint64_t v12 = v10;
    *(void *)(v12 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v12 + 16) = v9 | 4;
    *(void *)(v12 + 24) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    *(unsigned char *)(v12 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t mlir::memref::detail::LoadOpGenericAdaptorBase::LoadOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.load", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::LoadOp::getIndices(mlir::memref::LoadOp *this)
{
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    return *(void *)(*(void *)this + 72) + 32;
  }
  else {
    return 32;
  }
}

uint64_t mlir::memref::LoadOp::getIndicesMutable@<X0>(mlir::memref::LoadOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    int v3 = *(_DWORD *)(v2 + 68) - 1;
  }
  else {
    int v3 = -1;
  }
  return mlir::MutableOperandRange::MutableOperandRange(a2, v2, 1, v3, 0, 0);
}

uint64_t mlir::memref::LoadOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      int64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v11 = &v44;
      uint64_t v12 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v12 = (char *)v48;
          uint64_t v11 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v11 = &v44;
          uint64_t v12 = (char *)v48;
        }
      }
      unint64_t v13 = &v12[24 * v49];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)unint64_t v13 = v14;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v15 = __p;
    if (__p)
    {
      uint64_t v16 = v55;
      uint64_t v17 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      unsigned int v55 = v15;
      operator delete(v17);
    }
    long long v18 = v52;
    if (!v52) {
      goto LABEL_45;
    }
    long long v19 = v53;
    unint64_t v20 = v52;
    if (v53 == v52) {
      goto LABEL_44;
    }
    do
    {
      uint64_t v22 = *--v19;
      uint64_t v21 = v22;
      *long long v19 = 0;
      if (v22) {
        MEMORY[0x21667D390](v21, 0x1000C8077774924);
      }
    }
    while (v19 != v18);
    goto LABEL_43;
  }
  uint64_t v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v43, "nontemporal", 0xBuLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = (uint64_t)v8;
  if (mlir::BoolAttr::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 56;
    uint64_t v23 = &v44;
    uint64_t v24 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v24 = (char *)v48;
        uint64_t v23 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v23 = &v44;
        uint64_t v24 = (char *)v48;
      }
    }
    long long v25 = &v24[24 * v49];
    long long v26 = *(_OWORD *)v23;
    *((void *)v25 + 2) = *((void *)v23 + 2);
    *(_OWORD *)long long v25 = v26;
    ++v49;
    if (v47[0])
    {
      int v27 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v28 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v28 = (char *)v48;
          int v27 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          int v27 = &v44;
          uint64_t v28 = (char *)v48;
        }
      }
      uint64_t v29 = &v28[24 * v49];
      long long v30 = *(_OWORD *)v27;
      *((void *)v29 + 2) = *((void *)v27 + 2);
      *(_OWORD *)uint64_t v29 = v30;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (v56)
  {
    unint64_t v31 = __p;
    if (__p)
    {
      uint64_t v32 = v55;
      unint64_t v33 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        unint64_t v33 = __p;
      }
      unsigned int v55 = v31;
      operator delete(v33);
    }
    long long v18 = v52;
    if (!v52) {
      goto LABEL_45;
    }
    uint64_t v34 = v53;
    unint64_t v20 = v52;
    if (v53 == v52)
    {
LABEL_44:
      unsigned int v53 = v18;
      operator delete(v20);
LABEL_45:
      if (v48 != v51) {
        free(v48);
      }
      return 0;
    }
    do
    {
      uint64_t v36 = *--v34;
      uint64_t v35 = v36;
      *uint64_t v34 = 0;
      if (v36) {
        MEMORY[0x21667D390](v35, 0x1000C8077774924);
      }
    }
    while (v34 != v18);
LABEL_43:
    unint64_t v20 = v52;
    goto LABEL_44;
  }
  return 0;
}

uint64_t mlir::memref::LoadOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  unint64_t v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"nontemporal", 11, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  uint64_t *v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::LoadOp::getInherentAttr(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a4 == 11
    && (*a3 == 0x6F706D65746E6F6ELL ? (BOOL v4 = *(void *)((char *)a3 + 3) == 0x6C61726F706D6574) : (BOOL v4 = 0), v4))
  {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::memref::LoadOp::setInherentAttr(BOOL result, void *a2, uint64_t a3, void *a4)
{
  if (a3 == 11 && *a2 == 0x6F706D65746E6F6ELL && *(void *)((char *)a2 + 3) == 0x6C61726F706D6574)
  {
    uint64_t v6 = (void *)result;
    if (a4)
    {
      uint64_t result = mlir::BoolAttr::classof(a4);
      if (result) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    void *v6 = v7;
  }
  return result;
}

void mlir::memref::LoadOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"nontemporal", 11, *a2);
  }
}

BOOL mlir::memref::LoadOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = (void *)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v6, (void **)"nontemporal", (const char *)0xB, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(void *a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1 || mlir::BoolAttr::classof(a1)) {
    return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    uint64_t v32 = "attribute '";
    uint64_t v33 = 11;
    uint64_t v11 = &v31;
    uint64_t v12 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v12 = (char *)v37;
        uint64_t v11 = (void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v11 = &v31;
        uint64_t v12 = (char *)v37;
      }
    }
    unint64_t v13 = &v12[24 * v38];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)unint64_t v13 = v14;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      unint64_t v31 = a2;
      uint64_t v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        uint64_t v32 = "' failed to satisfy constraint: BOOL attribute";
        uint64_t v33 = 46;
        uint64_t v15 = &v31;
        uint64_t v16 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            uint64_t v16 = (char *)v37;
            uint64_t v15 = (void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            uint64_t v15 = &v31;
            uint64_t v16 = (char *)v37;
          }
        }
        uint64_t v17 = &v16[24 * v38];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)uint64_t v17 = v18;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    long long v19 = __p;
    if (__p)
    {
      unint64_t v20 = v44;
      uint64_t v21 = __p;
      if (v44 != __p)
      {
        do
          unint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      int v44 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v41;
    if (v41)
    {
      uint64_t v23 = v42;
      uint64_t v24 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v41;
      }
      int64_t v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

BOOL mlir::memref::LoadOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(uint64_t a1, void *a2)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  int64_t v40 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 56))(a1, &v40)) {
    return 0;
  }
  BOOL v4 = v40;
  if (!v40) {
    return 1;
  }
  BOOL v5 = mlir::BoolAttr::classof(v40);
  uint64_t v6 = v5 ? v4 : 0;
  *a2 = v6;
  if (v5) {
    return 1;
  }
  v39[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v45, a1, v39);
  if (v45)
  {
    LODWORD(v41) = 3;
    unint64_t v42 = (unint64_t)"expected ";
    uint64_t v43 = 9;
    uint64_t v9 = &v41;
    uint64_t v10 = (char *)v47;
    if (v48 >= v49)
    {
      unint64_t v33 = v48 + 1;
      if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
      {
        int64_t v36 = (char *)&v41 - (unsigned char *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
        uint64_t v10 = (char *)v47;
        uint64_t v9 = (void ***)((char *)v47 + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
        uint64_t v9 = &v41;
        uint64_t v10 = (char *)v47;
      }
    }
    uint64_t v11 = &v10[24 * v48];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v48;
  }
  int64_t v41 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::BoolAttr]";
  unint64_t v42 = 64;
  unint64_t v13 = llvm::StringRef::find((uint64_t *)&v41, "DesiredTypeName = ", 0x12uLL, 0);
  if (v45)
  {
    if (v42 >= v13) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = v42;
    }
    uint64_t v15 = 18;
    if (v42 - v14 < 0x12) {
      uint64_t v15 = v42 - v14;
    }
    unint64_t v16 = v42 - v14 - v15;
    if (v16 >= v16 - 1) {
      --v16;
    }
    __int16 v44 = 261;
    int64_t v41 = (void **)((char *)v41 + v14 + v15);
    unint64_t v42 = v16;
    mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
    if (v45)
    {
      LODWORD(v41) = 3;
      unint64_t v42 = (unint64_t)", but got: ";
      uint64_t v43 = 11;
      uint64_t v17 = &v41;
      long long v18 = (char *)v47;
      if (v48 >= v49)
      {
        unint64_t v34 = v48 + 1;
        if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
        {
          int64_t v37 = (char *)&v41 - (unsigned char *)v47;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
          long long v18 = (char *)v47;
          uint64_t v17 = (void ***)((char *)v47 + v37);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
          uint64_t v17 = &v41;
          long long v18 = (char *)v47;
        }
      }
      long long v19 = &v18[24 * v48];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = v17[2];
      *(_OWORD *)long long v19 = v20;
      ++v48;
      if (v45)
      {
        uint64_t v21 = &v41;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v41, (uint64_t)v40);
        uint64_t v22 = (char *)v47;
        if (v48 >= v49)
        {
          unint64_t v35 = v48 + 1;
          if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
          {
            int64_t v38 = (char *)&v41 - (unsigned char *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            uint64_t v22 = (char *)v47;
            uint64_t v21 = (void ***)((char *)v47 + v38);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            uint64_t v21 = &v41;
            uint64_t v22 = (char *)v47;
          }
        }
        uint64_t v23 = &v22[24 * v48];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = v21[2];
        *(_OWORD *)uint64_t v23 = v24;
        ++v48;
      }
    }
  }
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  }
  if (v55)
  {
    uint64_t v25 = __p;
    if (__p)
    {
      uint64_t v26 = v54;
      unint64_t v27 = __p;
      if (v54 != __p)
      {
        do
          uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        unint64_t v27 = __p;
      }
      BOOL v54 = v25;
      operator delete(v27);
    }
    unint64_t v28 = v51;
    if (v51)
    {
      int64_t v29 = v52;
      int64_t v30 = v51;
      if (v52 != v51)
      {
        do
        {
          uint64_t v32 = *--v29;
          uint64_t v31 = v32;
          void *v29 = 0;
          if (v32) {
            MEMORY[0x21667D390](v31, 0x1000C8077774924);
          }
        }
        while (v29 != v28);
        int64_t v30 = v51;
      }
      uint64_t v52 = v28;
      operator delete(v30);
    }
    if (v47 != v50) {
      free(v47);
    }
  }
  return v7;
}

void mlir::memref::LoadOp::build(mlir::BoolAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, mlir::MLIRContext *a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, a4, a5);
  uint64_t BoolAttr = mlir::Builder::getBoolAttr(a1, a6);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(a2) = BoolAttr;
  uint64_t __src = v25;
  uint64_t v24 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v22, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v21, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v26 = v22;
  if (v24 != 1)
  {
    if (!v24)
    {
      if (HIDWORD(v24))
      {
        unsigned int v13 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v13, 8 - 8 * v13);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v25, 1uLL, 8);
      unsigned int v13 = v24;
      if (v24 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    LODWORD(v24) = 1;
  }
  unint64_t v20 = *(void *)(mlir::ValueRange::dereference_iterator(&v26, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v20);
  *(void *)uint64_t __src = RHS;
  uint64_t v15 = __src;
  uint64_t v16 = v24;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + v24;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v25) {
    free(__src);
  }
}

uint64_t mlir::memref::LoadOp::verifyInvariantsImpl(mlir::memref::LoadOp *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  v27[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v3, (void **)"nontemporal", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v27)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  uint64_t v4 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
  {
    uint64_t v6 = -1;
    uint64_t v7 = 32;
LABEL_6:
    uint64_t v8 = 0;
    uint64_t v9 = v7 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, (int)v8 + 1))
    {
      ++v8;
      v9 += 32;
      if (v6 == v8)
      {
        uint64_t v4 = *(void *)this;
        goto LABEL_10;
      }
    }
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(v4 + 68);
  uint64_t v6 = v5 - 1;
  if (v5 != 1)
  {
    uint64_t v7 = *(void *)(v4 + 72) + 32;
    goto LABEL_6;
  }
LABEL_10:
  int v10 = *(_DWORD *)(v4 + 36);
  uint64_t v11 = v4 - 16;
  if (v10) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
  v27[0] = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v27);
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v14 = *(void *)this - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  if (RHS == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v25 = (void **)"failed to verify that result type matches element type of 'memref'";
  __int16 v26 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v25, (uint64_t)v27);
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  }
  if (v34)
  {
    uint64_t v16 = __p;
    if (__p)
    {
      uint64_t v17 = v33;
      unint64_t v18 = __p;
      if (v33 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        unint64_t v18 = __p;
      }
      unint64_t v33 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v30;
    if (v30)
    {
      unint64_t v20 = v31;
      unint64_t v21 = v30;
      if (v31 != v30)
      {
        do
        {
          uint64_t v23 = *--v20;
          uint64_t v22 = v23;
          *unint64_t v20 = 0;
          if (v23) {
            MEMORY[0x21667D390](v22, 0x1000C8077774924);
          }
        }
        while (v20 != v19);
        unint64_t v21 = v30;
      }
      uint64_t v31 = v19;
      operator delete(v21);
    }
    if (v28 != &v29) {
      free(v28);
    }
  }
  return v15;
}

uint64_t mlir::memref::LoadOp::parse(uint64_t a1, uint64_t a2)
{
  v33[4] = *MEMORY[0x263EF8340];
  memset(v33, 0, 24);
  v25[0] = (uint64_t)v33;
  v25[1] = 1;
  uint64_t v29 = 0;
  int64_t v30 = v32;
  uint64_t v31 = 0x400000000;
  v24[0] = &v29;
  v24[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v33, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 296))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, unsigned char **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v30, 0, 1, 0xFFFFFFFFLL))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1))
        {
          v21[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
          {
            uint64_t v5 = *(void *)(a2 + 8);
            uint64_t __src = a1;
            uint64_t v27 = v21;
            uint64_t v28 = a2;
            uint64_t v6 = (void *)mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
            if (!v6
              || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v6, (void **)"nontemporal", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::LoadOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&__src))
            {
              if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
              {
                uint64_t __src = 0;
                if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &__src))
                {
                  uint64_t v7 = __src;
                  uint64_t v29 = __src;
                  uint64_t v23 = __src;
                  if (*(_UNKNOWN **)(*(void *)__src + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
                  {
                    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                    __int16 v22 = 257;
                    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(&__src, a1, v8, v21);
                    uint64_t v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__src, "'memref' must be memref of any type values, but got ");
                    uint64_t v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v23);
                    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
                    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__src);
                    uint64_t v12 = v30;
                    if (v30 == v32) {
                      return v11;
                    }
                    goto LABEL_21;
                  }
                  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)__src + 8);
                  uint64_t __src = v7;
                  uint64_t v27 = (void *)v13;
                  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__src);
                  uint64_t v14 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                  uint64_t IndexType = mlir::Builder::getIndexType(v14, v15);
                  v21[0] = v29;
                  uint64_t __src = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v21);
                  mlir::OperationState::addTypes(a2, &__src, 1);
                  uint64_t v17 = a2 + 16;
                  if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v25, v24, v4, v17))
                  {
                    if (!v31)
                    {
                      uint64_t v11 = 1;
                      uint64_t v12 = v30;
                      if (v30 == v32) {
                        return v11;
                      }
                      goto LABEL_21;
                    }
                    unint64_t v18 = v30;
                    uint64_t v19 = 32 * v31;
                    uint64_t v11 = 1;
                    while ((*(unsigned __int8 (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, IndexType, v17))
                    {
                      v18 += 32;
                      v19 -= 32;
                      if (!v19) {
                        goto LABEL_20;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v11 = 0;
LABEL_20:
  uint64_t v12 = v30;
  if (v30 != v32) {
LABEL_21:
  }
    free(v12);
  return v11;
}

void mlir::memref::LoadOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
    uint64_t v8 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned char *v7 = 91;
    ++*((void *)v6 + 4);
    uint64_t v8 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_6:
      uint64_t v9 = *((unsigned int *)v8 + 17);
      uint64_t v10 = *((void *)v8 + 9);
      uint64_t v11 = v9 - 1;
      goto LABEL_7;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = -1;
LABEL_7:
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v30 = ", ";
  uint64_t v31 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v12, 0, v12, v11, (uint64_t)a2, v13, (uint64_t)&v30);
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "]", 1uLL);
  }
  else
  {
    unsigned char *v15 = 93;
    ++*((void *)v14 + 4);
  }
  int64_t v30 = v32;
  uint64_t v31 = 0x200000000;
  uint64_t Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v16 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v16 && v16 == mlir::Builder::getBoolAttr(&Context, 0))
  {
    unsigned int v19 = v31;
    if (v31 >= HIDWORD(v31))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 16);
      unsigned int v19 = v31;
    }
    unint64_t v20 = (char *)v30 + 16 * v19;
    *unint64_t v20 = "nontemporal";
    v20[1] = 11;
    LODWORD(v31) = v31 + 1;
    uint64_t v17 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v17 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_15:
      p_uint64_t Context = (mlir::Operation *)((char *)v17 + 56);
      goto LABEL_20;
    }
  }
  uint64_t Context = (mlir::BoolAttr *)mlir::Operation::getAttrDictionary(v17);
  p_uint64_t Context = (mlir::ArrayAttr *)&Context;
LABEL_20:
  uint64_t Value = mlir::ArrayAttr::getValue(p_Context);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v22, v30, v31);
  uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
  if ((unint64_t)v24 >= *((void *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((void *)v23 + 4) = v24 + 1;
    *uint64_t v24 = 32;
  }
  uint64_t v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v26 = (unsigned char *)*((void *)v25 + 4);
  if (*((unsigned char **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, ":", 1uLL);
  }
  else
  {
    unsigned char *v26 = 58;
    ++*((void *)v25 + 4);
  }
  uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = (unsigned char *)*((void *)v27 + 4);
  if ((unint64_t)v28 >= *((void *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((void *)v27 + 4) = v28 + 1;
    unsigned char *v28 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32) {
    free(v30);
  }
}

void mlir::memref::LoadOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t v4 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  {
    uint64_t v24 = v4;
    uint64_t v4 = v24;
    if (v15)
    {
      {
        uint64_t v25 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v26 = 84;
        unint64_t v17 = llvm::StringRef::find((uint64_t *)&v25, "DesiredTypeName = ", 0x12uLL, 0);
        if (v26 >= v17) {
          unint64_t v18 = v17;
        }
        else {
          unint64_t v18 = v26;
        }
        unsigned int v19 = &v25[v18];
        unint64_t v20 = v26 - v18;
        if (v26 - v18 >= 0x12) {
          uint64_t v21 = 18;
        }
        else {
          uint64_t v21 = v26 - v18;
        }
        unint64_t v22 = v20 - v21;
        if (v22 >= v22 - 1) {
          uint64_t v23 = v22 - 1;
        }
        else {
          uint64_t v23 = v22;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
      *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      uint64_t v4 = v24;
    }
  }
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    uint64_t v7 = (void *)(a2 + 16);
    uint64_t v25 = (const char *)v4;
    unint64_t v26 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v27 = v3 | 4;
    uint64_t v28 = 0;
    int v29 = 0;
    char v30 = 0;
    unint64_t v8 = v5 + 1;
    BOOL v9 = *(void *)a2 + 40 * (unint64_t)v5 > (unint64_t)&v25;
    if (*(void *)a2 <= (unint64_t)&v25 && v9)
    {
      uint64_t v16 = (char *)&v25 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v7, v8, 40);
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = (const char **)&v16[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v7, v8, 40);
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = &v25;
    }
    uint64_t v12 = v10 + 40 * *(unsigned int *)(a2 + 8);
    long long v13 = *(_OWORD *)v11;
    long long v14 = *((_OWORD *)v11 + 1);
    *(void *)(v12 + 32) = v11[4];
    *(_OWORD *)uint64_t v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
  }
  else
  {
    uint64_t v6 = *(void *)a2 + 40 * v5;
    *(void *)uint64_t v6 = v4;
    *(void *)(v6 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v6 + 16) = v3 | 4;
    *(void *)(v6 + 24) = 0;
    *(_DWORD *)(v6 + 32) = 0;
    *(unsigned char *)(v6 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

BOOL mlir::memref::AllocOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v56 = v6;
  if (!v6)
  {
    a3(v60, a4);
    if (v60[0])
    {
      int v57 = 3;
      uint64_t v58 = "expected DictionaryAttr to set properties";
      uint64_t v59 = 41;
      unint64_t v26 = &v57;
      uint64_t v27 = (char *)v61;
      if (v62 >= v63)
      {
        unint64_t v48 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          int64_t v52 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          uint64_t v27 = (char *)v61;
          unint64_t v26 = (int *)((char *)v61 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          unint64_t v26 = &v57;
          uint64_t v27 = (char *)v61;
        }
      }
      uint64_t v28 = &v27[24 * v62];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v62;
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
    }
    if (!v69) {
      return 0;
    }
    char v30 = __p;
    if (__p)
    {
      uint64_t v31 = v68;
      uint64_t v32 = __p;
      if (v68 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      long long v68 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v65;
    if (!v65) {
      goto LABEL_64;
    }
    unint64_t v33 = v66;
    uint64_t v23 = v65;
    if (v66 == v65)
    {
LABEL_63:
      long long v66 = v21;
      operator delete(v23);
LABEL_64:
      if (v61 != v64) {
        free(v61);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
LABEL_62:
    uint64_t v23 = v65;
    goto LABEL_63;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v56, "alignment", 9uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      a3(v60, a4);
      if (v60[0])
      {
        int v57 = 3;
        uint64_t v59 = 54;
        uint64_t v10 = &v57;
        uint64_t v11 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v49 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v53 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            uint64_t v11 = (char *)v61;
            uint64_t v10 = (int *)((char *)v61 + v53);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            uint64_t v10 = &v57;
            uint64_t v11 = (char *)v61;
          }
        }
        uint64_t v12 = &v11[24 * v62];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v62;
        if (v60[0])
        {
          long long v14 = &v57;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, v9);
          int v15 = (char *)v61;
          if (v62 >= v63)
          {
            unint64_t v50 = v62 + 1;
            if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
            {
              int64_t v54 = (char *)&v57 - (unsigned char *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              int v15 = (char *)v61;
              long long v14 = (int *)((char *)v61 + v54);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              long long v14 = &v57;
              int v15 = (char *)v61;
            }
          }
          uint64_t v16 = &v15[24 * v62];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = *((void *)v14 + 2);
          *(_OWORD *)uint64_t v16 = v17;
          ++v62;
          if (v60[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
          }
        }
      }
      if (!v69) {
        return 0;
      }
      unint64_t v18 = __p;
      if (__p)
      {
        unsigned int v19 = v68;
        unint64_t v20 = __p;
        if (v68 != __p)
        {
          do
            unsigned int v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          unint64_t v20 = __p;
        }
        long long v68 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v65;
      if (!v65) {
        goto LABEL_64;
      }
      unint64_t v22 = v66;
      uint64_t v23 = v65;
      if (v66 == v65) {
        goto LABEL_63;
      }
      do
      {
        uint64_t v25 = *--v22;
        uint64_t v24 = v25;
        *unint64_t v22 = 0;
        if (v25) {
          MEMORY[0x21667D390](v24, 0x1000C8077774924);
        }
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  int64_t v36 = (void *)mlir::DictionaryAttr::get((uint64_t)&v56, "operandSegmentSizes", 0x13uLL);
  if (!v36)
  {
    int64_t v36 = (void *)mlir::DictionaryAttr::get((uint64_t)&v56, "operand_segment_sizes", 0x15uLL);
    if (!v36)
    {
      a3(v60, a4);
      if (v60[0])
      {
        int v57 = 3;
        uint64_t v58 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        uint64_t v59 = 79;
        int64_t v38 = &v57;
        unsigned int v39 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v51 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v55 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            unsigned int v39 = (char *)v61;
            int64_t v38 = (int *)((char *)v61 + v55);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            int64_t v38 = &v57;
            unsigned int v39 = (char *)v61;
          }
        }
        int64_t v40 = &v39[24 * v62];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = *((void *)v38 + 2);
        *(_OWORD *)int64_t v40 = v41;
        ++v62;
        if (v60[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
        }
      }
      if (!v69) {
        return 0;
      }
      unint64_t v42 = __p;
      if (__p)
      {
        uint64_t v43 = v68;
        __int16 v44 = __p;
        if (v68 != __p)
        {
          do
            uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          __int16 v44 = __p;
        }
        long long v68 = v42;
        operator delete(v44);
      }
      uint64_t v21 = v65;
      if (!v65) {
        goto LABEL_64;
      }
      uint64_t v45 = v66;
      uint64_t v23 = v65;
      if (v66 == v65) {
        goto LABEL_63;
      }
      do
      {
        uint64_t v47 = *--v45;
        uint64_t v46 = v47;
        *uint64_t v45 = 0;
        if (v47) {
          MEMORY[0x21667D390](v46, 0x1000C8077774924);
        }
      }
      while (v45 != v21);
      goto LABEL_62;
    }
  }
  return mlir::convertFromAttribute(a1 + 1, (const char *)2, v36, a3, a4) != 0;
}

uint64_t mlir::memref::AllocOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v23[6] = *MEMORY[0x263EF8340];
  unint64_t v20 = a1;
  uint64_t v21 = v23;
  uint64_t v22 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v20, (uint64_t)"alignment", 9, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
      unsigned int v7 = v22;
    }
    uint64_t v8 = (uint64_t *)((char *)v21 + 16 * v7);
    *uint64_t v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v22) = v22 + 1;
  }
  uint64_t v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 1), 2);
  uint64_t v10 = mlir::Builder::getNamedAttr(&v20, (uint64_t)"operandSegmentSizes", 19, v9);
  uint64_t v12 = v11;
  unsigned int v13 = v22;
  if (v22 >= HIDWORD(v22))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
    unsigned int v13 = v22;
  }
  long long v14 = (uint64_t *)((char *)v21 + 16 * v13);
  *long long v14 = v10;
  v14[1] = v12;
  BOOL v15 = __CFADD__(v22, 1);
  uint64_t v16 = (v22 + 1);
  LODWORD(v22) = v22 + 1;
  if (v15)
  {
    uint64_t DictionaryAttr = 0;
    unint64_t v18 = v21;
    if (v21 == v23) {
      return DictionaryAttr;
    }
    goto LABEL_12;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v20, (uint64_t *)v21, v16);
  unint64_t v18 = v21;
  if (v21 != v23) {
LABEL_12:
  }
    free(v18);
  return DictionaryAttr;
}

unint64_t mlir::memref::AllocOp::computePropertiesHash(unint64_t *a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t v1 = *a1;
  uint64_t v2 = &unk_267770000;
  {
    uint64_t v23 = a1;
    unint64_t v26 = v1;
    uint64_t v2 = &unk_267770000;
    int v12 = v11;
    a1 = v23;
    unint64_t v1 = v26;
    if (v12)
    {
      unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v13 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a1 = v23;
      unint64_t v1 = v26;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  uint64_t v3 = v2[385];
  {
    uint64_t v24 = a1;
    unint64_t v27 = v1;
    uint64_t v21 = v3;
    unint64_t v1 = v27;
    uint64_t v2 = &unk_267770000;
    int v15 = v14;
    uint64_t v3 = v21;
    a1 = v24;
    if (v15)
    {
      unint64_t v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v16 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      uint64_t v3 = v21;
      a1 = v24;
      unint64_t v1 = v27;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  uint64_t v4 = v2[385];
  uint64_t v6 = *((unsigned int *)a1 + 2);
  uint64_t v5 = *((unsigned int *)a1 + 3);
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  memset(v30, 0, sizeof(v30));
  long long v29 = 0u;
  {
    uint64_t v25 = v4;
    unint64_t v28 = v1;
    uint64_t v20 = v5;
    uint64_t v22 = v3;
    uint64_t v19 = v6;
    uint64_t v6 = v19;
    uint64_t v5 = v20;
    uint64_t v3 = v22;
    uint64_t v4 = v25;
    unint64_t v1 = v28;
    uint64_t v2 = &unk_267770000;
    if (v17)
    {
      unint64_t v18 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v18 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v18;
      uint64_t v6 = v19;
      uint64_t v5 = v20;
      uint64_t v3 = v22;
      uint64_t v4 = v25;
      unint64_t v1 = v28;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v7 = 0x9DDFEA08EB382D69
     * (v4 ^ v5 ^ ((0x9DDFEA08EB382D69 * (v4 ^ v5 ^ (8 * v6 + 8))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                             * (v4 ^ v5 ^ (8 * v6 + 8))));
  unint64_t v8 = HIDWORD(v1);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((v3 + 8 * v1) ^ HIDWORD(v1));
  uint64_t v33 = v2[385];
  *(void *)&long long v29 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  *((void *)&v29 + 1) = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v29, 0, (char *)v30, (char *)v31);
}

uint64_t mlir::memref::AllocOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t a2, void *__s1, size_t __n)
{
  if (__n == 21)
  {
    if (!memcmp(__s1, "operand_segment_sizes", 0x15uLL)) {
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, a2 + 8, 2);
    }
    return 0;
  }
  if (__n != 19)
  {
    if (__n == 9 && *__s1 == 0x6E656D6E67696C61 && *((unsigned char *)__s1 + 8) == 116) {
      return *(void *)a2;
    }
    return 0;
  }
  if (memcmp(__s1, "operandSegmentSizes", 0x13uLL)) {
    return 0;
  }
  return mlir::detail::DenseArrayAttrImpl<int>::get(a1, a2 + 8, 2);
}

uint64_t mlir::memref::AllocOp::setInherentAttr(uint64_t result, void *__s1, uint64_t a3, void *a4)
{
  uint64_t v5 = result;
  if (a3 == 21)
  {
    uint64_t result = memcmp(__s1, "operand_segment_sizes", 0x15uLL);
    if (result) {
      return result;
    }
  }
  else
  {
    if (a3 != 19)
    {
      if (a3 == 9 && *__s1 == 0x6E656D6E67696C61 && *((unsigned char *)__s1 + 8) == 116)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            unint64_t v9 = a4;
          }
          else {
            unint64_t v9 = 0;
          }
          *(void *)uint64_t result = v9;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      return result;
    }
    uint64_t result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
    if (result) {
      return result;
    }
  }
  if (a4)
  {
    uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
    unint64_t v7 = result ? a4 : 0;
    uint64_t v10 = v7;
    if (result)
    {
      uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v10);
      if (result == 2)
      {
        uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v10);
        if (v8) {
          return (uint64_t)memmove((void *)(v5 + 8), (const void *)result, 4 * v8);
        }
      }
    }
  }
  return result;
}

void mlir::memref::AllocOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"alignment", 9, *a2);
  }
  uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 1), 2);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v6);
}

BOOL mlir::memref::AllocOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = (void **)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v6, (void **)"alignment", (const char *)9, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(void **a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v33 = a1;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v33);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64))
    {
      uint64_t v32 = a1;
      if ((mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v32) & 0x8000000000000000) == 0) {
        return 1;
      }
    }
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(v33) = 3;
    uint64_t v34 = "attribute '";
    uint64_t v35 = 11;
    int v11 = &v33;
    int v12 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v28 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        int64_t v30 = (char *)&v33 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        int v12 = (char *)v39;
        int v11 = (void ***)((char *)v39 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        int v11 = &v33;
        int v12 = (char *)v39;
      }
    }
    unint64_t v13 = &v12[24 * v40];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)unint64_t v13 = v14;
    ++v40;
    if (Value)
    {
      __int16 v36 = 261;
      uint64_t v33 = a2;
      uint64_t v34 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
      if (Value)
      {
        LODWORD(v33) = 3;
        uint64_t v34 = "' failed to satisfy constraint: 64-bit signless integer attribute whose minimum value is 0";
        uint64_t v35 = 90;
        int v15 = &v33;
        unint64_t v16 = (char *)v39;
        if (v40 >= v41)
        {
          unint64_t v29 = v40 + 1;
          if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
          {
            int64_t v31 = (char *)&v33 - (unsigned char *)v39;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            unint64_t v16 = (char *)v39;
            int v15 = (void ***)((char *)v39 + v31);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            int v15 = &v33;
            unint64_t v16 = (char *)v39;
          }
        }
        int v17 = &v16[24 * v40];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)int v17 = v18;
        ++v40;
      }
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  if (v47)
  {
    uint64_t v19 = __p;
    if (__p)
    {
      uint64_t v20 = v46;
      uint64_t v21 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v46 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v43;
    if (v43)
    {
      uint64_t v23 = v44;
      uint64_t v24 = v43;
      if (v44 != v43)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v43;
      }
      __int16 v44 = v22;
      operator delete(v24);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v10;
}

BOOL mlir::memref::AllocOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3)) {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 3)
    {
      int v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        uint64_t v4 = __p;
        if (__p)
        {
          uint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        unint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          unint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              *uint64_t v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            unint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    int v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 1, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 2, (const char *)2);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::memref::AllocOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)v4);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 8, 2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 8), 2);
  }
  return result;
}

void mlir::memref::AllocOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v16 = *(unsigned int *)(a2 + 72);
  if (v16 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v16) = a3;
  ++*(_DWORD *)(a2 + 72);
  mlir::OperationState::addOperands(a2, a4, a5);
  mlir::OperationState::addOperands(a2, a6, a7);
  v27[0] = a5;
  v27[1] = a7;
  uint64_t DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(a1, (uint64_t)v27, 2);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  __int16 v24 = 261;
  uint64_t v22 = "operandSegmentSizes";
  uint64_t v23 = 19;
  uint64_t v19 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v22);
  ZinMirCacheTensors::ZinMirCacheTensors(&v25, v19, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v25, v26);
  if (a8)
  {
    uint64_t v20 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
    __int16 v24 = 261;
    uint64_t v22 = "alignment";
    uint64_t v23 = 9;
    uint64_t v21 = mlir::StringAttr::get(v20, (mlir::MLIRContext *)&v22);
    ZinMirCacheTensors::ZinMirCacheTensors(&v25, v21, a8);
    mlir::NamedAttrList::push_back(a2 + 112, v25, v26);
  }
}

BOOL mlir::memref::AllocOp::verifyInvariantsImpl(mlir::memref::AllocOp *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void ***)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  uint64_t v25 = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v3, (void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v25))return 0; {
  uint64_t v4 = *(void *)this;
  }
  unint64_t v5 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v6 = (v5 >> 23) & 1;
  uint64_t v7 = *(void *)this + 16 * v6 + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v7 + 8);
  if ((v5 & 0x800000) != 0)
  {
    uint64_t v9 = *(void *)(v4 + 72);
    if (v8) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (v8)
    {
LABEL_6:
      uint64_t v10 = 0;
      uint64_t v11 = v9 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v11 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v10))
      {
        ++v10;
        v11 += 32;
        if (v8 == v10)
        {
          uint64_t v4 = *(void *)this;
          unint64_t v5 = *(unsigned int *)(*(void *)this + 44);
          uint64_t v6 = (v5 >> 23) & 1;
          int v12 = v5 & 0x800000;
          goto LABEL_12;
        }
      }
      return 0;
    }
  }
  int v12 = v5 & 0x800000;
LABEL_12:
  uint64_t v13 = v4 + 16 * v6 + 64;
  if (BYTE3(v5)) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = *(_DWORD *)(v14 + 12);
  if (v12)
  {
    uint64_t v16 = *(void *)(v4 + 72);
    if (v15) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if (v15)
    {
LABEL_17:
      uint64_t v17 = *(unsigned int *)(v14 + 8);
      uint64_t v18 = (v15 + v17) - v17;
      uint64_t v19 = v16 + 32 * v17 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v19 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v8))
      {
        LODWORD(v8) = v8 + 1;
        v19 += 32;
        if (!--v18)
        {
          uint64_t v4 = *(void *)this;
          goto LABEL_21;
        }
      }
      return 0;
    }
  }
LABEL_21:
  int v20 = *(_DWORD *)(v4 + 36);
  uint64_t v21 = v4 - 16;
  if (v20) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::memref::AllocOp::parse(uint64_t a1, uint64_t a2)
{
  unsigned char v26[16] = *MEMORY[0x263EF8340];
  __int16 v24 = v26;
  uint64_t v25 = 0x400000000;
  uint64_t v21 = v23;
  uint64_t v22 = 0x400000000;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 264))()) {
    goto LABEL_21;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v24, 0, 1, 0xFFFFFFFFLL))goto LABEL_21; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  }
    goto LABEL_21;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 304))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v21, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1))
    {
      goto LABEL_21;
    }
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = &v19;
  __src[2] = a2;
  unint64_t v5 = (void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v4 + 96));
  if (v5)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v5, (void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AllocOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_21; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    goto LABEL_21;
  }
  uint64_t v19 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v19)) {
    goto LABEL_21;
  }
  __src[0] = v19;
  uint64_t v6 = v25;
  uint64_t v7 = v22;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(a2)
            + 8) = v6 | (v7 << 32);
  uint64_t v8 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v8, v9);
  mlir::OperationState::addTypes(a2, __src, 1);
  uint64_t v11 = a2 + 16;
  if (v25)
  {
    int v12 = (char *)v24;
    uint64_t v13 = 32 * v25;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v12, IndexType, v11))
    {
      v12 += 32;
      v13 -= 32;
      if (!v13) {
        goto LABEL_16;
      }
    }
LABEL_21:
    uint64_t v16 = 0;
LABEL_22:
    uint64_t v17 = v21;
    if (v21 != v23) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }
LABEL_16:
  if (v22)
  {
    uint64_t v14 = (char *)v21;
    uint64_t v15 = 32 * v22;
    uint64_t v16 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v14, IndexType, v11))
    {
      v14 += 32;
      v15 -= 32;
      if (!v15) {
        goto LABEL_22;
      }
    }
    goto LABEL_21;
  }
  uint64_t v16 = 1;
  uint64_t v17 = v21;
  if (v21 != v23) {
LABEL_23:
  }
    free(v17);
LABEL_24:
  if (v24 != v26) {
    free(v24);
  }
  return v16;
}

void mlir::memref::AllocOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v41[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "(", 1uLL);
  }
  else
  {
    unsigned char *v5 = 40;
    ++*((void *)v4 + 4);
  }
  unint64_t v6 = *((unsigned int *)*this + 11);
  uint64_t v7 = (uint64_t)*this + 16 * ((v6 >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v7 + 8);
  if ((v6 & 0x800000) != 0) {
    uint64_t v9 = *((void *)*this + 9);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v39 = ", ";
  uint64_t v40 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v9, 0, v9, v8, (uint64_t)a2, v10, (uint64_t)&v39);
  uint64_t v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v12 = (unsigned char *)*((void *)v11 + 4);
  if (*((unsigned char **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ")", 1uLL);
  }
  else
  {
    *int v12 = 41;
    ++*((void *)v11 + 4);
  }
  unint64_t v13 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v13 = 0;
  }
  if (*(_DWORD *)(v13 + 12))
  {
    uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
    if (*((unsigned char **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, "[", 1uLL);
    }
    else
    {
      unsigned char *v15 = 91;
      ++*((void *)v14 + 4);
    }
    unint64_t v16 = *((unsigned int *)*this + 11);
    if (HIBYTE(*((_DWORD *)*this + 11))) {
      uint64_t v17 = (uint64_t)*this + 16 * ((v16 >> 23) & 1) + 64;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(unsigned int *)(v17 + 8);
    int v19 = *(_DWORD *)(v17 + 12);
    if ((v16 & 0x800000) != 0) {
      uint64_t v20 = *((void *)*this + 9);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = v20 + 32 * v18;
    uint64_t v22 = (v19 + v18) - v18;
    uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    unsigned int v39 = ", ";
    uint64_t v40 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v21, 0, v21, v22, (uint64_t)a2, v23, (uint64_t)&v39);
    __int16 v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
    if (*((unsigned char **)v24 + 3) == v25)
    {
      llvm::raw_ostream::write(v24, "]", 1uLL);
    }
    else
    {
      unsigned char *v25 = 93;
      ++*((void *)v24 + 4);
    }
  }
  unsigned int v39 = v41;
  v41[0] = "operandSegmentSizes";
  v41[1] = 19;
  uint64_t v40 = 0x200000001;
  uint64_t v26 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v26);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v26 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v29, v39, v40);
  int64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if ((unint64_t)v31 >= *((void *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((void *)v30 + 4) = v31 + 1;
    unsigned char *v31 = 32;
  }
  uint64_t v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v33 = (unsigned char *)*((void *)v32 + 4);
  if (*((unsigned char **)v32 + 3) == v33)
  {
    llvm::raw_ostream::write(v32, ":", 1uLL);
  }
  else
  {
    unsigned char *v33 = 58;
    ++*((void *)v32 + 4);
  }
  uint64_t v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v35 = (unsigned char *)*((void *)v34 + 4);
  if ((unint64_t)v35 >= *((void *)v34 + 3))
  {
    llvm::raw_ostream::write(v34, 32);
  }
  else
  {
    *((void *)v34 + 4) = v35 + 1;
    *uint64_t v35 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v36 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v36, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v39 != v41) {
    free(v39);
  }
}

void mlir::memref::AllocOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v3 = *(void *)a1 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, 0);
  unint64_t v5 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Allocate,mlir::MemoryEffects::Effect>::get();
  {
    uint64_t v25 = v5;
    unint64_t v5 = v25;
    if (v16)
    {
      {
        uint64_t v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v27 = 84;
        unint64_t v18 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
        if (v27 >= v18) {
          unint64_t v19 = v18;
        }
        else {
          unint64_t v19 = v27;
        }
        uint64_t v20 = &v26[v19];
        unint64_t v21 = v27 - v19;
        if (v27 - v19 >= 0x12) {
          uint64_t v22 = 18;
        }
        else {
          uint64_t v22 = v27 - v19;
        }
        unint64_t v23 = v21 - v22;
        if (v23 >= v23 - 1) {
          uint64_t v24 = v23 - 1;
        }
        else {
          uint64_t v24 = v23;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v20[v22], v24);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
      *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      unint64_t v5 = v25;
    }
  }
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    uint64_t v8 = (void *)(a2 + 16);
    uint64_t v26 = (const char *)v5;
    unint64_t v27 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v28 = NextResultAtOffset | 4;
    uint64_t v29 = 0;
    int v30 = 0;
    char v31 = 1;
    unint64_t v9 = v6 + 1;
    BOOL v10 = *(void *)a2 + 40 * (unint64_t)v6 > (unint64_t)&v26;
    if (*(void *)a2 <= (unint64_t)&v26 && v10)
    {
      uint64_t v17 = (char *)&v26 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      uint64_t v11 = *(void *)a2;
      int v12 = (const char **)&v17[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      uint64_t v11 = *(void *)a2;
      int v12 = &v26;
    }
    uint64_t v13 = v11 + 40 * *(unsigned int *)(a2 + 8);
    long long v14 = *(_OWORD *)v12;
    long long v15 = *((_OWORD *)v12 + 1);
    *(void *)(v13 + 32) = v12[4];
    *(_OWORD *)uint64_t v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
  }
  else
  {
    uint64_t v7 = *(void *)a2 + 40 * v6;
    *(void *)uint64_t v7 = v5;
    *(void *)(v7 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v7 + 16) = NextResultAtOffset | 4;
    *(void *)(v7 + 24) = 0;
    *(_DWORD *)(v7 + 32) = 0;
    *(unsigned char *)(v7 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

BOOL mlir::memref::AllocaOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3)) {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 3)
    {
      long long v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        uint64_t v4 = __p;
        if (__p)
        {
          unint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          uint64_t v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          unint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              *uint64_t v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            unint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    int v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 1, v12, 4 * v13);
    }
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 2, (const char *)2);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::memref::AllocaOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v10, 0, 0);
  uint64_t v8 = v10[0];
  uint64_t v9 = v10[1];
  mlir::ValueRange::ValueRange(v11, 0, 0);
  mlir::memref::AllocOp::build(a1, a2, a3, v8, v9, v11[0], v11[1], a4);
}

uint64_t mlir::memref::AllocaOp::parse(uint64_t a1, uint64_t a2)
{
  unsigned char v26[16] = *MEMORY[0x263EF8340];
  uint64_t v24 = v26;
  uint64_t v25 = 0x400000000;
  unint64_t v21 = v23;
  uint64_t v22 = 0x400000000;
  if (!(*(unsigned __int8 (**)(void))(*(void *)a1 + 264))()) {
    goto LABEL_21;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v24, 0, 1, 0xFFFFFFFFLL))goto LABEL_21; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1))
  }
    goto LABEL_21;
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 304))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v21, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1))
    {
      goto LABEL_21;
    }
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = &v19;
  __src[2] = a2;
  unint64_t v5 = (void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v4 + 96));
  if (v5)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v5, (void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AllocaOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_21; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    goto LABEL_21;
  }
  uint64_t v19 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v19)) {
    goto LABEL_21;
  }
  __src[0] = v19;
  uint64_t v6 = v25;
  uint64_t v7 = v22;
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(a2)
            + 8) = v6 | (v7 << 32);
  uint64_t v8 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v8, v9);
  mlir::OperationState::addTypes(a2, __src, 1);
  uint64_t v11 = a2 + 16;
  if (v25)
  {
    int v12 = (char *)v24;
    uint64_t v13 = 32 * v25;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v12, IndexType, v11))
    {
      v12 += 32;
      v13 -= 32;
      if (!v13) {
        goto LABEL_16;
      }
    }
LABEL_21:
    uint64_t v16 = 0;
LABEL_22:
    uint64_t v17 = v21;
    if (v21 != v23) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }
LABEL_16:
  if (v22)
  {
    long long v14 = (char *)v21;
    uint64_t v15 = 32 * v22;
    uint64_t v16 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v14, IndexType, v11))
    {
      v14 += 32;
      v15 -= 32;
      if (!v15) {
        goto LABEL_22;
      }
    }
    goto LABEL_21;
  }
  uint64_t v16 = 1;
  uint64_t v17 = v21;
  if (v21 != v23) {
LABEL_23:
  }
    free(v17);
LABEL_24:
  if (v24 != v26) {
    free(v24);
  }
  return v16;
}

void mlir::memref::AllocaOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v3 = *(void *)a1 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, 0);
  unint64_t v5 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Allocate,mlir::MemoryEffects::Effect>::get();
  {
    uint64_t v25 = v5;
    unint64_t v5 = v25;
    if (v16)
    {
      {
        uint64_t v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::AutomaticAllocationScopeResource]";
        unint64_t v27 = 101;
        unint64_t v18 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
        if (v27 >= v18) {
          unint64_t v19 = v18;
        }
        else {
          unint64_t v19 = v27;
        }
        uint64_t v20 = &v26[v19];
        unint64_t v21 = v27 - v19;
        if (v27 - v19 >= 0x12) {
          uint64_t v22 = 18;
        }
        else {
          uint64_t v22 = v27 - v19;
        }
        unint64_t v23 = v21 - v22;
        if (v23 >= v23 - 1) {
          uint64_t v24 = v23 - 1;
        }
        else {
          uint64_t v24 = v23;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v20[v22], v24);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::AutomaticAllocationScopeResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6F8;
      unk_2677729A0 = mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::AutomaticAllocationScopeResource::~AutomaticAllocationScopeResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::AutomaticAllocationScopeResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      unint64_t v5 = v25;
    }
  }
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    uint64_t v8 = (void *)(a2 + 16);
    uint64_t v26 = (const char *)v5;
    unint64_t v27 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::AutomaticAllocationScopeResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v28 = NextResultAtOffset | 4;
    uint64_t v29 = 0;
    int v30 = 0;
    char v31 = 1;
    unint64_t v9 = v6 + 1;
    BOOL v10 = *(void *)a2 + 40 * (unint64_t)v6 > (unint64_t)&v26;
    if (*(void *)a2 <= (unint64_t)&v26 && v10)
    {
      uint64_t v17 = (char *)&v26 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      uint64_t v11 = *(void *)a2;
      int v12 = (const char **)&v17[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      uint64_t v11 = *(void *)a2;
      int v12 = &v26;
    }
    uint64_t v13 = v11 + 40 * *(unsigned int *)(a2 + 8);
    long long v14 = *(_OWORD *)v12;
    long long v15 = *((_OWORD *)v12 + 1);
    *(void *)(v13 + 32) = v12[4];
    *(_OWORD *)uint64_t v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
  }
  else
  {
    uint64_t v7 = *(void *)a2 + 40 * v6;
    *(void *)uint64_t v7 = v5;
    *(void *)(v7 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::AutomaticAllocationScopeResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v7 + 16) = NextResultAtOffset | 4;
    *(void *)(v7 + 24) = 0;
    *(_DWORD *)(v7 + 32) = 0;
    *(unsigned char *)(v7 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

BOOL mlir::memref::AllocaScopeOp::verifyInvariantsImpl(unsigned int **this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *this;
  uint64_t v3 = v2[9];
  if (v2[9]) {
    uint64_t v4 = (uint64_t)(v2 - 4);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    uint64_t v2 = *this;
  }
  unint64_t v6 = (((unint64_t)&v2[4 * (((unint64_t)v2[11] >> 23) & 1) + 17]
       + (((unint64_t)v2[11] >> 21) & 0x7F8)
       + 3) & 0xFFFFFFFFFFFFFFF8)
     + 32 * v2[10];
  uint64_t v7 = *(void *)(v6 + 8);
  if (v7 != v6 && *(void *)(v7 + 8) == v6) {
    return 1;
  }
  uint64_t v35 = (void **)"region #";
  __int16 v36 = 259;
  mlir::Operation::emitOpError((uint64_t)v2, &v35, (uint64_t)&v40);
  if (v40)
  {
    LODWORD(v33[0]) = 5;
    v33[1] = 0;
    uint64_t v8 = v33;
    unint64_t v9 = (char *)v42;
    if (v43 >= v44)
    {
      unint64_t v27 = v43 + 1;
      if (v42 <= v33 && (char *)v42 + 24 * v43 > (char *)v33)
      {
        int64_t v29 = (char *)v33 - (unsigned char *)v42;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        unint64_t v9 = (char *)v42;
        uint64_t v8 = (void ***)((char *)v42 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        uint64_t v8 = v33;
        unint64_t v9 = (char *)v42;
      }
    }
    BOOL v10 = &v9[24 * v43];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)BOOL v10 = v11;
    ++v43;
    BOOL v12 = v40 == 0;
  }
  else
  {
    BOOL v12 = 1;
  }
  __int16 v32 = 1283;
  v31[0] = " ('";
  v31[2] = "bodyRegion";
  _OWORD v31[3] = 10;
  v33[0] = (void **)v31;
  v33[2] = (void **)"') ";
  __int16 v34 = 770;
  if (!v12)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v41, v33);
    if (v40)
    {
      int v37 = 3;
      uint64_t v38 = "failed to verify constraint: region with 1 blocks";
      uint64_t v39 = 49;
      uint64_t v13 = &v37;
      long long v14 = (char *)v42;
      if (v43 >= v44)
      {
        unint64_t v28 = v43 + 1;
        if (v42 <= &v37 && (char *)v42 + 24 * v43 > (char *)&v37)
        {
          int64_t v30 = (char *)&v37 - (unsigned char *)v42;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          long long v14 = (char *)v42;
          uint64_t v13 = (int *)((char *)v42 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          uint64_t v13 = &v37;
          long long v14 = (char *)v42;
        }
      }
      long long v15 = &v14[24 * v43];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)long long v15 = v16;
      ++v43;
    }
  }
  char v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  }
  if (v50)
  {
    unint64_t v18 = __p;
    if (__p)
    {
      unint64_t v19 = v49;
      uint64_t v20 = __p;
      if (v49 != __p)
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v49 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v46;
    if (v46)
    {
      uint64_t v22 = v47;
      unint64_t v23 = v46;
      if (v47 != v46)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v46;
      }
      char v47 = v21;
      operator delete(v23);
    }
    if (v42 != v45) {
      free(v42);
    }
  }
  return v17 != 0;
}

BOOL mlir::memref::AllocaScopeReturnOp::parse(uint64_t a1, uint64_t a2)
{
  v12[16] = *MEMORY[0x263EF8340];
  BOOL v10 = v12;
  uint64_t v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)
    || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    BOOL v5 = 0;
    unint64_t v6 = v8[0];
    if (v8[0] == &v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  BOOL v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  unint64_t v6 = v8[0];
  if (v8[0] != &v9) {
LABEL_9:
  }
    free(v6);
LABEL_10:
  if (v10 != v12) {
    free(v10);
  }
  return v5;
}

double mlir::memref::AllocaScopeReturnOp::getMutableSuccessorOperands@<D0>(mlir::Operation **a1@<X0>, mlir::MutableOperandRange *a2@<X8>)
{
  return mlir::MutableOperandRange::MutableOperandRange(a2, *a1);
}

uint64_t mlir::memref::detail::CastOpGenericAdaptorBase::CastOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.cast", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::CastOp::verifyInvariantsImpl(mlir::memref::CastOp *this)
{
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::memref::CastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::CollapseShapeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.collapse_shape", 21, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::CollapseShapeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v26 = &v56;
      unint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          unint64_t v27 = (char *)v60;
          uint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v26 = &v56;
          unint64_t v27 = (char *)v60;
        }
      }
      unint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)unint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    int64_t v30 = __p;
    if (__p)
    {
      char v31 = v67;
      __int16 v32 = __p;
      if (v67 != __p)
      {
        do
          char v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        __int16 v32 = __p;
      }
      long long v67 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    unint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "reassociation", 0xDuLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int v57 = "expected key entry for reassociation in DictionaryAttr to set Properties.";
      uint64_t v58 = 73;
      __int16 v36 = &v56;
      int v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int v37 = (char *)v60;
          __int16 v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          __int16 v36 = &v56;
          int v37 = (char *)v60;
        }
      }
      uint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v40 = __p;
    if (__p)
    {
      uint64_t v41 = v67;
      unint64_t v42 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        unint64_t v42 = __p;
      }
      long long v67 = v40;
      operator delete(v42);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unsigned int v43 = v65;
    unint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 58;
    BOOL v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        BOOL v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        BOOL v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    __int16 v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)__int16 v12 = v13;
    ++v61;
    if (v59[0])
    {
      long long v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      long long v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          long long v15 = (char *)v60;
          long long v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          long long v14 = &v56;
          long long v15 = (char *)v60;
        }
      }
      long long v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)long long v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    unint64_t v18 = __p;
    if (__p)
    {
      unint64_t v19 = v67;
      uint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      long long v67 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v22 = v65;
    unint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      long long v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    unint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::memref::CollapseShapeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  __int16 v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"reassociation", 13, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  uint64_t *v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::CollapseShapeOp::getInherentAttr(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a4 == 13
    && (*a3 == 0x69636F7373616572 ? (BOOL v4 = *(void *)((char *)a3 + 5) == 0x6E6F69746169636FLL) : (BOOL v4 = 0), v4))
  {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else
  {
    return 0;
  }
}

void *mlir::memref::CollapseShapeOp::setInherentAttr(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 13 && *a2 == 0x69636F7373616572 && *(void *)((char *)a2 + 5) == 0x6E6F69746169636FLL)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id) {
        uint64_t v5 = a4;
      }
      else {
        uint64_t v5 = 0;
      }
      *uint64_t result = v5;
    }
    else
    {
      *uint64_t result = 0;
    }
  }
  return result;
}

void mlir::memref::CollapseShapeOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"reassociation", 13, *a2);
  }
}

BOOL mlir::memref::CollapseShapeOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v6, (void **)"reassociation", (const char *)0xD, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    uint64_t v39 = a1;
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    uint64_t v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(void *)Value
           && *(_UNKNOWN **)(**(void **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      {
        uint64_t v40 = *(void *)Value;
        uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
        uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
        uint64_t v33 = v31 + 8 * v32;
        if (v33 != v30)
        {
          while (*(void *)v30)
          {
            if (*(_UNKNOWN **)(**(void **)v30 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
              break;
            }
            uint64_t v41 = *(void ***)v30;
            uint64_t v45 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
            if (!mlir::Type::isSignlessInteger((mlir::Type *)&v45, 64)) {
              break;
            }
            v30 += 8;
            if (v30 == v33) {
              goto LABEL_31;
            }
          }
          goto LABEL_3;
        }
LABEL_31:
        Value += 8;
        if (Value == v29) {
          return 1;
        }
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v45, a5);
  if (v45)
  {
    LODWORD(v41) = 3;
    unint64_t v42 = "attribute '";
    uint64_t v43 = 11;
    uint64_t v9 = &v41;
    BOOL v10 = (char *)v47;
    if (v48 >= v49)
    {
      unint64_t v35 = v48 + 1;
      if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
      {
        int64_t v37 = (char *)&v41 - (unsigned char *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
        BOOL v10 = (char *)v47;
        uint64_t v9 = (void ***)((char *)v47 + v37);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
        uint64_t v9 = &v41;
        BOOL v10 = (char *)v47;
      }
    }
    uint64_t v11 = &v10[24 * v48];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v48;
    if (v45)
    {
      __int16 v44 = 261;
      uint64_t v41 = a2;
      unint64_t v42 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
      if (v45)
      {
        LODWORD(v41) = 3;
        unint64_t v42 = "' failed to satisfy constraint: Array of 64-bit integer array attributes";
        uint64_t v43 = 72;
        long long v13 = &v41;
        uint64_t v14 = (char *)v47;
        if (v48 >= v49)
        {
          unint64_t v36 = v48 + 1;
          if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
          {
            int64_t v38 = (char *)&v41 - (unsigned char *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
            uint64_t v14 = (char *)v47;
            long long v13 = (void ***)((char *)v47 + v38);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
            long long v13 = &v41;
            uint64_t v14 = (char *)v47;
          }
        }
        long long v15 = &v14[24 * v48];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)long long v15 = v16;
        ++v48;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  }
  if (v55)
  {
    unint64_t v18 = __p;
    if (__p)
    {
      unint64_t v19 = v54;
      uint64_t v20 = __p;
      if (v54 != __p)
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      int64_t v54 = v18;
      operator delete(v20);
    }
    unint64_t v21 = v51;
    if (v51)
    {
      uint64_t v22 = v52;
      unint64_t v23 = v51;
      if (v52 != v51)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v51;
      }
      int64_t v52 = v21;
      operator delete(v23);
    }
    if (v47 != v50) {
      free(v47);
    }
  }
  return v17;
}

BOOL mlir::memref::CollapseShapeOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::memref::CollapseShapeOp::verifyInvariantsImpl(mlir::memref::CollapseShapeOp *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v18[0] = v2;
    if (mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v3, (void **)"reassociation", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v4 = *(void *)this - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    long long v16 = (void **)"requires attribute 'reassociation'";
    __int16 v17 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v16, (uint64_t)v18);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    }
    if (v25)
    {
      uint64_t v7 = __p;
      if (__p)
      {
        BOOL v8 = v24;
        uint64_t v9 = __p;
        if (v24 != __p)
        {
          do
            BOOL v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          uint64_t v9 = __p;
        }
        uint64_t v24 = v7;
        operator delete(v9);
      }
      BOOL v10 = v21;
      if (v21)
      {
        uint64_t v11 = v22;
        long long v12 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v14 = *--v11;
            uint64_t v13 = v14;
            *uint64_t v11 = 0;
            if (v14) {
              MEMORY[0x21667D390](v13, 0x1000C8077774924);
            }
          }
          while (v11 != v10);
          long long v12 = v21;
        }
        uint64_t v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20) {
        free(v19);
      }
    }
  }
  return v6;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)a2;
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v54[0] = a2;
    v54[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v10 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v54);
    if (mlir::isStrided(a2)) {
      return 1;
    }
  }
  __int16 v50 = 261;
  v49[0] = a3;
  v49[1] = a4;
  mlir::Operation::emitOpError(a1, v49, (uint64_t)v54);
  if (v54[0])
  {
    int v51 = 3;
    int64_t v52 = " #";
    uint64_t v53 = 2;
    long long v12 = &v51;
    uint64_t v13 = (char *)v55;
    if (v56 >= v57)
    {
      unint64_t v39 = v56 + 1;
      if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
      {
        int64_t v45 = (char *)&v51 - (unsigned char *)v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        uint64_t v13 = (char *)v55;
        long long v12 = (int *)((char *)v55 + v45);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        long long v12 = &v51;
        uint64_t v13 = (char *)v55;
      }
    }
    uint64_t v14 = &v13[24 * v56];
    long long v15 = *(_OWORD *)v12;
    *((void *)v14 + 2) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v14 = v15;
    uint64_t v16 = ++v56;
    if (v54[0])
    {
      int v51 = 5;
      int64_t v52 = (const char *)a5;
      __int16 v17 = &v51;
      unint64_t v18 = (char *)v55;
      if (v16 >= v57)
      {
        unint64_t v40 = v16 + 1;
        BOOL v41 = (char *)v55 + 24 * v16 > (char *)&v51;
        if (v55 <= &v51 && v41)
        {
          int64_t v46 = (char *)&v51 - (unsigned char *)v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          unint64_t v18 = (char *)v55;
          __int16 v17 = (int *)((char *)v55 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          __int16 v17 = &v51;
          unint64_t v18 = (char *)v55;
        }
      }
      unint64_t v19 = &v18[24 * v56];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = *((void *)v17 + 2);
      *(_OWORD *)unint64_t v19 = v20;
      uint64_t v21 = ++v56;
      if (v54[0])
      {
        int v51 = 3;
        int64_t v52 = " must be strided memref of any type values, but got ";
        uint64_t v53 = 52;
        uint64_t v22 = &v51;
        unint64_t v23 = (char *)v55;
        if (v21 >= v57)
        {
          unint64_t v42 = v21 + 1;
          BOOL v43 = (char *)v55 + 24 * v21 > (char *)&v51;
          if (v55 <= &v51 && v43)
          {
            int64_t v47 = (char *)&v51 - (unsigned char *)v55;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            unint64_t v23 = (char *)v55;
            uint64_t v22 = (int *)((char *)v55 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            uint64_t v22 = &v51;
            unint64_t v23 = (char *)v55;
          }
        }
        uint64_t v24 = &v23[24 * v56];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        ++v56;
        if (v54[0])
        {
          uint64_t v26 = &v51;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v51, a2);
          uint64_t v27 = (char *)v55;
          if (v56 >= v57)
          {
            unint64_t v44 = v56 + 1;
            if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
            {
              int64_t v48 = (char *)&v51 - (unsigned char *)v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              uint64_t v27 = (char *)v55;
              uint64_t v26 = (int *)((char *)v55 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              uint64_t v26 = &v51;
              uint64_t v27 = (char *)v55;
            }
          }
          uint64_t v28 = &v27[24 * v56];
          long long v29 = *(_OWORD *)v26;
          *((void *)v28 + 2) = *((void *)v26 + 2);
          *(_OWORD *)uint64_t v28 = v29;
          ++v56;
        }
      }
    }
  }
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
  if (v54[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
  }
  if (v63)
  {
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v62;
      uint64_t v32 = __p;
      if (v62 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      unsigned int v62 = v30;
      operator delete(v32);
    }
    uint64_t v33 = v59;
    if (v59)
    {
      uint64_t v34 = v60;
      unint64_t v35 = v59;
      if (v60 != v59)
      {
        do
        {
          uint64_t v37 = *--v34;
          uint64_t v36 = v37;
          *uint64_t v34 = 0;
          if (v37) {
            MEMORY[0x21667D390](v36, 0x1000C8077774924);
          }
        }
        while (v34 != v33);
        unint64_t v35 = v59;
      }
      long long v60 = v33;
      operator delete(v35);
    }
    if (v55 != v58) {
      free(v55);
    }
  }
  return v11;
}

BOOL mlir::memref::CollapseShapeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  uint64_t v5 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v7 = mlir::NoneType::get(*v5, v6);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v14, v7)) {
    return 0;
  }
  if (v14)
  {
    BOOL v8 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(a2);
    *BOOL v8 = v14;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = &v12;
  __src[2] = a2;
  uint64_t v10 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v9 + 96));
  if (v10)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v10, (void **)"reassociation", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::CollapseShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, __src)) {
    return 0;
  }
  uint64_t v16 = __src[0];
  __int16 v19 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "into", 4, __src))return 0; {
  uint64_t v12 = 0;
  }
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v12)) {
    return 0;
  }
  __src[0] = v12;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

void mlir::memref::CollapseShapeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v29[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v27 = v29;
  v29[0] = "reassociation";
  v29[1] = 13;
  uint64_t v28 = 0x200000001;
  BOOL v8 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v8);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v8 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v11, v27, v28);
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    *uint64_t v13 = 32;
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v15 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ":", 1uLL);
  }
  else
  {
    unsigned char *v15 = 58;
    ++*((void *)v14 + 4);
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    *__int16 v17 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *__int16 v19 = 32;
  }
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v21 = (_DWORD *)*((void *)v20 + 4);
  if (*((void *)v20 + 3) - (void)v21 > 3uLL)
  {
    *uint64_t v21 = 1869901417;
    *((void *)v20 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v20, "into", 4uLL);
  }
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((void *)v22 + 4) = v23 + 1;
    *unint64_t v23 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v24 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v24, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v27 != v29) {
    free(v27);
  }
}

uint64_t mlir::memref::detail::DeallocOpGenericAdaptorBase::DeallocOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.dealloc", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::DeallocOp::verifyInvariantsImpl(mlir::memref::DeallocOp *this)
{
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0) != 0;
}

BOOL mlir::memref::DeallocOp::parse(uint64_t a1, uint64_t a2)
{
  void v10[4] = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  uint64_t v6 = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, &v6)) {
    return 0;
  }
  uint64_t v9 = v6;
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

void mlir::memref::DeallocOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t v4 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Free,mlir::MemoryEffects::Effect>::get();
  {
    uint64_t v24 = v4;
    uint64_t v4 = v24;
    if (v15)
    {
      {
        long long v25 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v26 = 84;
        unint64_t v17 = llvm::StringRef::find((uint64_t *)&v25, "DesiredTypeName = ", 0x12uLL, 0);
        if (v26 >= v17) {
          unint64_t v18 = v17;
        }
        else {
          unint64_t v18 = v26;
        }
        __int16 v19 = &v25[v18];
        unint64_t v20 = v26 - v18;
        if (v26 - v18 >= 0x12) {
          uint64_t v21 = 18;
        }
        else {
          uint64_t v21 = v26 - v18;
        }
        unint64_t v22 = v20 - v21;
        if (v22 >= v22 - 1) {
          uint64_t v23 = v22 - 1;
        }
        else {
          uint64_t v23 = v22;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
      *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      uint64_t v4 = v24;
    }
  }
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    uint64_t v7 = (void *)(a2 + 16);
    long long v25 = (const char *)v4;
    unint64_t v26 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v27 = v3 | 4;
    uint64_t v28 = 0;
    int v29 = 0;
    char v30 = 1;
    unint64_t v8 = v5 + 1;
    BOOL v9 = *(void *)a2 + 40 * (unint64_t)v5 > (unint64_t)&v25;
    if (*(void *)a2 <= (unint64_t)&v25 && v9)
    {
      uint64_t v16 = (char *)&v25 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v7, v8, 40);
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = (const char **)&v16[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v7, v8, 40);
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = &v25;
    }
    uint64_t v12 = v10 + 40 * *(unsigned int *)(a2 + 8);
    long long v13 = *(_OWORD *)v11;
    long long v14 = *((_OWORD *)v11 + 1);
    *(void *)(v12 + 32) = v11[4];
    *(_OWORD *)uint64_t v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
  }
  else
  {
    uint64_t v6 = *(void *)a2 + 40 * v5;
    *(void *)uint64_t v6 = v4;
    *(void *)(v6 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v6 + 16) = v3 | 4;
    *(void *)(v6 + 24) = 0;
    *(_DWORD *)(v6 + 32) = 0;
    *(unsigned char *)(v6 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Free,mlir::MemoryEffects::Effect>::get()
{
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Free>(void)::instance;
  }
  {
    unint64_t v8 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Free]";
    unint64_t v9 = 75;
    unint64_t v1 = llvm::StringRef::find((uint64_t *)&v8, "DesiredTypeName = ", 0x12uLL, 0);
    if (v9 >= v1) {
      unint64_t v2 = v1;
    }
    else {
      unint64_t v2 = v9;
    }
    uint64_t v3 = &v8[v2];
    unint64_t v4 = v9 - v2;
    if (v9 - v2 >= 0x12) {
      uint64_t v5 = 18;
    }
    else {
      uint64_t v5 = v9 - v2;
    }
    unint64_t v6 = v4 - v5;
    if (v6 >= v6 - 1) {
      uint64_t v7 = v6 - 1;
    }
    else {
      uint64_t v7 = v6;
    }
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Free,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v3[v5], v7);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Free>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Free,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Free>(void)::instance;
}

uint64_t mlir::memref::detail::DimOpGenericAdaptorBase::DimOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.dim", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::DimOp::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v12 = *(_DWORD *)(a11 + 8);
  if (v12 != 1)
  {
    if (!v12)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v13 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v13), 8 - 8 * v13);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v13 = *(_DWORD *)(a11 + 8);
      if (v13 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  int v15 = a1;
  **(void **)a11 = mlir::Builder::getIndexType(&v15, a2);
  return 1;
}

BOOL mlir::memref::DimOp::verifyInvariantsImpl(mlir::memref::DimOp *this)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)v3;
  unint64_t v5 = *(void **)(*(void *)v3 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    v56[0] = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v56[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v4 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v56);
  }
  else
  {
    if (v5 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      goto LABEL_33;
    }
    unsigned int v49 = (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v4 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v49);
    uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8);
    unint64_t v53 = v3;
    int64_t v54 = (const char *)v6;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53)
      || (uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8),
          v52[0] = v3,
          v52[1] = v7,
          mlir::ShapedType::getShape((mlir::ShapedType *)v52),
          v8 < 1))
    {
LABEL_33:
      __int16 v51 = 261;
      unsigned int v49 = (void **)"operand";
      uint64_t v50 = 7;
      mlir::Operation::emitOpError(v2, &v49, (uint64_t)v56);
      if (v56[0])
      {
        LODWORD(v53) = 3;
        int64_t v54 = " #";
        uint64_t v55 = 2;
        unint64_t v9 = &v53;
        uint64_t v10 = (char *)v57;
        if (v58 >= v59)
        {
          unint64_t v39 = v58 + 1;
          if (v57 <= &v53 && (char *)v57 + 24 * v58 > (char *)&v53)
          {
            int64_t v45 = (char *)&v53 - (unsigned char *)v57;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v39, 24);
            uint64_t v10 = (char *)v57;
            unint64_t v9 = (unint64_t *)((char *)v57 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v39, 24);
            unint64_t v9 = &v53;
            uint64_t v10 = (char *)v57;
          }
        }
        uint64_t v11 = &v10[24 * v58];
        long long v12 = *(_OWORD *)v9;
        *((void *)v11 + 2) = v9[2];
        *(_OWORD *)uint64_t v11 = v12;
        uint64_t v13 = ++v58;
        if (v56[0])
        {
          LODWORD(v53) = 5;
          int64_t v54 = 0;
          long long v14 = &v53;
          int v15 = (char *)v57;
          if (v13 >= v59)
          {
            unint64_t v40 = v13 + 1;
            BOOL v41 = (char *)v57 + 24 * v13 > (char *)&v53;
            if (v57 <= &v53 && v41)
            {
              int64_t v46 = (char *)&v53 - (unsigned char *)v57;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v40, 24);
              int v15 = (char *)v57;
              long long v14 = (unint64_t *)((char *)v57 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v40, 24);
              long long v14 = &v53;
              int v15 = (char *)v57;
            }
          }
          uint64_t v16 = &v15[24 * v58];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          uint64_t v18 = ++v58;
          if (v56[0])
          {
            LODWORD(v53) = 3;
            int64_t v54 = " must be unranked.memref of any type values or non-0-ranked.memref of any type values, but got ";
            uint64_t v55 = 95;
            __int16 v19 = &v53;
            unint64_t v20 = (char *)v57;
            if (v18 >= v59)
            {
              unint64_t v42 = v18 + 1;
              BOOL v43 = (char *)v57 + 24 * v18 > (char *)&v53;
              if (v57 <= &v53 && v43)
              {
                int64_t v47 = (char *)&v53 - (unsigned char *)v57;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v42, 24);
                unint64_t v20 = (char *)v57;
                __int16 v19 = (unint64_t *)((char *)v57 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v42, 24);
                __int16 v19 = &v53;
                unint64_t v20 = (char *)v57;
              }
            }
            uint64_t v21 = &v20[24 * v58];
            long long v22 = *(_OWORD *)v19;
            *((void *)v21 + 2) = v19[2];
            *(_OWORD *)uint64_t v21 = v22;
            ++v58;
            if (v56[0])
            {
              uint64_t v23 = &v53;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v53, v3);
              uint64_t v24 = (char *)v57;
              if (v58 >= v59)
              {
                unint64_t v44 = v58 + 1;
                if (v57 <= &v53 && (char *)v57 + 24 * v58 > (char *)&v53)
                {
                  int64_t v48 = (char *)&v53 - (unsigned char *)v57;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v44, 24);
                  uint64_t v24 = (char *)v57;
                  uint64_t v23 = (unint64_t *)((char *)v57 + v48);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v44, 24);
                  uint64_t v23 = &v53;
                  uint64_t v24 = (char *)v57;
                }
              }
              long long v25 = &v24[24 * v58];
              long long v26 = *(_OWORD *)v23;
              *((void *)v25 + 2) = v23[2];
              *(_OWORD *)long long v25 = v26;
              ++v58;
            }
          }
        }
      }
      char v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v56);
      if (v56[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v56);
      }
      if (v65)
      {
        uint64_t v28 = __p;
        if (__p)
        {
          int v29 = v64;
          char v30 = __p;
          if (v64 != __p)
          {
            do
              int v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
            while (v29 != v28);
            char v30 = __p;
          }
          uint64_t v64 = v28;
          operator delete(v30);
        }
        uint64_t v31 = v61;
        if (v61)
        {
          uint64_t v32 = v62;
          uint64_t v33 = v61;
          if (v62 != v61)
          {
            do
            {
              uint64_t v35 = *--v32;
              uint64_t v34 = v35;
              void *v32 = 0;
              if (v35) {
                MEMORY[0x21667D390](v34, 0x1000C8077774924);
              }
            }
            while (v32 != v31);
            uint64_t v33 = v61;
          }
          unsigned int v62 = v31;
          operator delete(v33);
        }
        if (v57 != v60) {
          free(v57);
        }
      }
      if (!v27) {
        return 0;
      }
    }
  }
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v36 = *(void *)this - 16;
  else {
    uint64_t v36 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v36, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(uint64_t a1, uint64_t a2, void **a3, void **a4, unsigned int a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id) {
    return 1;
  }
  __int16 v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 3;
    int64_t v48 = " #";
    uint64_t v49 = 2;
    uint64_t v7 = &v47;
    uint64_t v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v41 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v8 = (char *)v51;
        uint64_t v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        uint64_t v7 = &v47;
        uint64_t v8 = (char *)v51;
      }
    }
    unint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)unint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 5;
      int64_t v48 = (const char *)a5;
      long long v12 = &v47;
      uint64_t v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v36 = v11 + 1;
        BOOL v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          int64_t v42 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          uint64_t v13 = (char *)v51;
          long long v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          long long v12 = &v47;
          uint64_t v13 = (char *)v51;
        }
      }
      long long v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)long long v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 3;
        int64_t v48 = " must be index, but got ";
        uint64_t v49 = 24;
        long long v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v38 = v16 + 1;
          BOOL v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            int64_t v43 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            uint64_t v18 = (char *)v51;
            long long v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            long long v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        __int16 v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)__int16 v19 = v20;
        ++v52;
        if (v50[0])
        {
          uint64_t v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          long long v22 = (char *)v51;
          if (v52 >= v53)
          {
            unint64_t v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              int64_t v44 = (char *)&v47 - (unsigned char *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              long long v22 = (char *)v51;
              uint64_t v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              uint64_t v21 = &v47;
              long long v22 = (char *)v51;
            }
          }
          uint64_t v23 = &v22[24 * v52];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)uint64_t v23 = v24;
          ++v52;
        }
      }
    }
  }
  uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    long long v26 = __p;
    if (__p)
    {
      char v27 = v58;
      uint64_t v28 = __p;
      if (v58 != __p)
      {
        do
          char v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        uint64_t v28 = __p;
      }
      unsigned int v58 = v26;
      operator delete(v28);
    }
    int v29 = v55;
    if (v55)
    {
      char v30 = v56;
      uint64_t v31 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          *char v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        uint64_t v31 = v55;
      }
      unsigned int v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v25;
}

BOOL mlir::memref::DimOp::parse(uint64_t a1, uint64_t a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  memset(v14, 0, 24);
  v11[0] = (uint64_t)v14;
  v11[1] = 1;
  memset(v13, 0, 24);
  uint64_t v12 = 0;
  v10[0] = &v12;
  v10[1] = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v14, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t __src = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &__src))
    && (uint64_t v12 = __src,
        unint64_t v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1),
        uint64_t __src = mlir::Builder::getIndexType(v5, v6),
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v7 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v11, v10, v4, v7)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, __src, v7) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::memref::DimOp::print(mlir::memref::DimOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v23[4] = *MEMORY[0x263EF8340];
  uint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  uint64_t v4 = *(unsigned char **)this;
  if (v4[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v7, v21, v22);
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  long long v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if (*((unsigned char **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, ",", 1uLL);
  }
  else
  {
    *uint64_t v11 = 44;
    ++*((void *)v10 + 4);
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    *uint64_t v13 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 56));
  long long v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *long long v17 = 58;
    ++*((void *)v16 + 4);
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *__int16 v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v21 != v23) {
    free(v21);
  }
}

uint64_t mlir::memref::detail::DmaStartOpGenericAdaptorBase::DmaStartOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.dma_start", 16, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::detail::DmaWaitOpGenericAdaptorBase::DmaWaitOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.dma_wait", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::DmaWaitOp::verifyInvariantsImpl(mlir::memref::DmaWaitOp *this)
{
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  uint64_t v2 = *(void *)this;
  }
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
  {
    uint64_t v4 = 4294967294;
    uint64_t v5 = 32;
LABEL_5:
    uint64_t v6 = 0;
    uint64_t v7 = v5 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, (int)v6 + 1))
    {
      ++v6;
      v7 += 32;
      if (v4 == v6)
      {
        uint64_t v2 = *(void *)this;
        unsigned int v8 = v6 + 1;
        if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
          goto LABEL_11;
        }
        uint64_t v9 = 0;
        int v10 = -3;
        goto LABEL_12;
      }
    }
    return 0;
  }
  uint64_t v3 = (*(_DWORD *)(v2 + 68) - 1);
  uint64_t v4 = v3 - 1;
  if (v3 != 1)
  {
    uint64_t v5 = *(void *)(v2 + 72) + 32;
    goto LABEL_5;
  }
  unsigned int v8 = 1;
LABEL_11:
  int v11 = *(_DWORD *)(v2 + 68);
  uint64_t v9 = *(void *)(v2 + 72);
  int v10 = v11 - 3;
LABEL_12:
  uint64_t v12 = (v10 + 2);
  uint64_t v13 = (v10 + 3) - v12;
  for (uint64_t i = v9 + 32 * v12 + 24;
        mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*(void *)this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v8);
        i += 32)
  {
    ++v8;
    if (!--v13) {
      return 1;
    }
  }
  return 0;
}

BOOL mlir::memref::DmaWaitOp::parse(uint64_t a1, uint64_t a2)
{
  void v21[4] = *MEMORY[0x263EF8340];
  memset(v21, 0, 24);
  v15[0] = (uint64_t)v21;
  v15[1] = 1;
  uint64_t v18 = v20;
  uint64_t v19 = 0x400000000;
  memset(v17, 0, 24);
  uint64_t v16 = 0;
  v14[0] = &v16;
  v14[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v21, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 296))(a1))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v18, 0, 1, 0xFFFFFFFFLL))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1))
        {
          if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1))
          {
            (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
            if ((*(unsigned __int8 (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 672))(a1, v17, 1))
            {
              (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
              if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
              {
                if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
                {
                  uint64_t v13 = 0;
                  if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v13))
                  {
                    uint64_t v16 = v13;
                    uint64_t v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                    uint64_t IndexType = mlir::Builder::getIndexType(v5, v6);
                    uint64_t v8 = a2 + 16;
                    if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v14, v4, v8))
                    {
                      if (!v19)
                      {
LABEL_15:
                        BOOL v11 = (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v17, IndexType, v8) != 0;
                        goto LABEL_17;
                      }
                      uint64_t v9 = (char *)v18;
                      uint64_t v10 = 32 * v19;
                      while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, IndexType, v8))
                      {
                        v9 += 32;
                        v10 -= 32;
                        if (!v10) {
                          goto LABEL_15;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  BOOL v11 = 0;
LABEL_17:
  if (v18 != v20) {
    free(v18);
  }
  return v11;
}

void mlir::memref::DmaWaitOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v33[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
    uint64_t v8 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned char *v7 = 91;
    ++*((void *)v6 + 4);
    uint64_t v8 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_6:
      int v9 = *((_DWORD *)v8 + 17);
      uint64_t v10 = *((void *)v8 + 9);
      uint64_t v11 = (v9 - 1) - 1;
      goto LABEL_7;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 4294967294;
LABEL_7:
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v31 = ", ";
  uint64_t v32 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v12, 0, v12, v11, (uint64_t)a2, v13, (uint64_t)&v31);
  long long v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v15 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "]", 1uLL);
  }
  else
  {
    unsigned char *v15 = 93;
    ++*((void *)v14 + 4);
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ",", 1uLL);
  }
  else
  {
    *long long v17 = 44;
    ++*((void *)v16 + 4);
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *uint64_t v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 32 * (*((_DWORD *)*this + 17) - 1) + 24));
  uint64_t v31 = v33;
  uint64_t v32 = 0x200000000;
  long long v20 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v20);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v23, v31, v32);
  long long v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    unsigned char *v25 = 32;
  }
  long long v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v27 = (unsigned char *)*((void *)v26 + 4);
  if (*((unsigned char **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, ":", 1uLL);
  }
  else
  {
    unsigned char *v27 = 58;
    ++*((void *)v26 + 4);
  }
  uint64_t v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v29 = (unsigned char *)*((void *)v28 + 4);
  if ((unint64_t)v29 >= *((void *)v28 + 3))
  {
    llvm::raw_ostream::write(v28, 32);
  }
  else
  {
    *((void *)v28 + 4) = v29 + 1;
    unsigned char *v29 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v31 != v33) {
    free(v31);
  }
}

uint64_t mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::ExpandShapeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.expand_shape", 19, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::ExpandShapeOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::memref::ExpandShapeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  v13[0] = &v16;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v17, 1)) {
    return 0;
  }
  uint64_t v5 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v7 = mlir::NoneType::get(*v5, v6);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v14, v7)) {
    return 0;
  }
  if (v14)
  {
    uint64_t v8 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v8 = v14;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = &v12;
  __src[2] = a2;
  uint64_t v10 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v9 + 96));
  if (v10)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v10, (void **)"reassociation", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ExpandShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, __src)) {
    return 0;
  }
  uint64_t v16 = __src[0];
  __int16 v19 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "into", 4, __src))return 0; {
  uint64_t v12 = 0;
  }
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v12)) {
    return 0;
  }
  __src[0] = v12;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, a2 + 16) != 0;
}

BOOL mlir::memref::ExtractAlignedPointerAsIndexOp::verifyInvariantsImpl(mlir::memref::ExtractAlignedPointerAsIndexOp *this)
{
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::memref::ExtractAlignedPointerAsIndexOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v15[4] = *MEMORY[0x263EF8340];
  memset(v15, 0, 24);
  v10[0] = (uint64_t)v15;
  v10[1] = 1;
  uint64_t v14 = 0;
  v9[0] = &v14;
  v9[1] = 1;
  uint64_t __src = &v13;
  uint64_t v12 = 0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v15, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
    {
      uint64_t v8 = 0;
      if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v8))
      {
        uint64_t v14 = v8;
        if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          if (mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
          {
            (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
            if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
            {
              mlir::OperationState::addTypes(a2, __src, v12);
              BOOL v5 = mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v9, v4, a2 + 16) != 0;
              unint64_t v6 = __src;
              if (__src == &v13) {
                return v5;
              }
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
  BOOL v5 = 0;
  unint64_t v6 = __src;
  if (__src != &v13) {
LABEL_10:
  }
    free(v6);
  return v5;
}

void mlir::memref::ExtractAlignedPointerAsIndexOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v28[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  BOOL v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  unint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if (*((unsigned char **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, ":", 1uLL);
  }
  else
  {
    unsigned char *v9 = 58;
    ++*((void *)v8 + 4);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *uint64_t v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    *uint64_t v13 = 32;
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v15 = (_WORD *)*((void *)v14 + 4);
  if (*((void *)v14 + 3) - (void)v15 > 1uLL)
  {
    _WORD *v15 = 15917;
    *((void *)v14 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v14, "->", 2uLL);
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    *long long v17 = 32;
  }
  uint64_t v18 = *((unsigned int *)*this + 9);
  __int16 v19 = (char *)*this - 16;
  if (!v18) {
    __int16 v19 = 0;
  }
  unint64_t AttrDictionary = v19;
  uint64_t v25 = v18;
  mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, (uint64_t *)&v26);
  unint64_t AttrDictionary = ", ";
  uint64_t v25 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v26, v27, v28[0], v28[1], (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  long long v26 = v28;
  uint64_t v27 = 0x200000000;
  uint64_t v20 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v20);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v23, v26, v27);
  if (v26 != v28) {
    free(v26);
  }
}

uint64_t mlir::memref::detail::ExtractStridedMetadataOpGenericAdaptorBase::ExtractStridedMetadataOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.extract_strided_metadata", 31, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)&long long v18 = a6;
  BYTE8(v18) = 0;
  LOBYTE(v19) = 0;
  *((void *)&v19 + 1) = a9;
  *(void *)&long long v20 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v18);
    if ((_BYTE)v19) {
      LOBYTE(v19) = 0;
    }
    mlir::OperationName::OperationName((char *)&v18 + 8, "memref.extract_strided_metadata", 31, Context);
    LOBYTE(v19) = 1;
  }
  *((void *)&v20 + 1) = a4;
  uint64_t v21 = a5;
  v16[0] = v18;
  v16[1] = v19;
  uint64_t v17 = a5;
  void v16[2] = v20;
  return mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(a1, a2, a3, (uint64_t)v16, a11);
}

uint64_t mlir::memref::ExtractStridedMetadataOp::verifyInvariantsImpl(mlir::memref::ExtractStridedMetadataOp *this)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  if (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    uint64_t v2 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
    uint64_t v4 = *(void *)this;
    unint64_t v5 = (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v6 = *v5;
    if (*((_UNKNOWN **)*v5 + 17) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      v76[0] = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      v76[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v6 + 8);
      mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v76);
      if (mlir::isStrided((uint64_t)v5))
      {
        uint64_t v7 = *v5;
        if (*((_UNKNOWN **)*v5 + 17) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        {
          uint64_t v69 = v5;
          uint64_t v70 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v7 + 8);
          mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69);
          uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
          uint64_t v73 = v5;
          uint64_t v74 = (const char *)v8;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v73))
          {
            uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
            v72[0] = v5;
            v72[1] = v9;
            mlir::ShapedType::getShape((mlir::ShapedType *)v72);
            if (!v10) {
              goto LABEL_78;
            }
          }
        }
      }
    }
    __int16 v71 = 261;
    uint64_t v69 = (void **)"result";
    uint64_t v70 = 6;
    mlir::Operation::emitOpError(v4, &v69, (uint64_t)v76);
    if (v76[0])
    {
      LODWORD(v73) = 3;
      uint64_t v74 = " #";
      uint64_t v75 = 2;
      uint64_t v11 = &v73;
      uint64_t v12 = (char *)v77;
      if (v78 >= v79)
      {
        unint64_t v59 = v78 + 1;
        if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
        {
          int64_t v65 = (char *)&v73 - (unsigned char *)v77;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v59, 24);
          uint64_t v12 = (char *)v77;
          uint64_t v11 = (void ***)((char *)v77 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v59, 24);
          uint64_t v11 = &v73;
          uint64_t v12 = (char *)v77;
        }
      }
      uint64_t v13 = &v12[24 * v78];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = v11[2];
      *(_OWORD *)uint64_t v13 = v14;
      uint64_t v15 = ++v78;
      if (v76[0])
      {
        LODWORD(v73) = 5;
        uint64_t v74 = 0;
        uint64_t v16 = &v73;
        uint64_t v17 = (char *)v77;
        if (v15 >= v79)
        {
          unint64_t v60 = v15 + 1;
          BOOL v61 = (char *)v77 + 24 * v15 > (char *)&v73;
          if (v77 <= &v73 && v61)
          {
            int64_t v66 = (char *)&v73 - (unsigned char *)v77;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v60, 24);
            uint64_t v17 = (char *)v77;
            uint64_t v16 = (void ***)((char *)v77 + v66);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v60, 24);
            uint64_t v16 = &v73;
            uint64_t v17 = (char *)v77;
          }
        }
        long long v18 = &v17[24 * v78];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = v16[2];
        *(_OWORD *)long long v18 = v19;
        uint64_t v20 = ++v78;
        if (v76[0])
        {
          LODWORD(v73) = 3;
          uint64_t v74 = " must be strided memref of any type values of rank 0, but got ";
          uint64_t v75 = 62;
          uint64_t v21 = &v73;
          uint64_t v22 = (char *)v77;
          if (v20 >= v79)
          {
            unint64_t v62 = v20 + 1;
            BOOL v63 = (char *)v77 + 24 * v20 > (char *)&v73;
            if (v77 <= &v73 && v63)
            {
              int64_t v67 = (char *)&v73 - (unsigned char *)v77;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v62, 24);
              uint64_t v22 = (char *)v77;
              uint64_t v21 = (void ***)((char *)v77 + v67);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v62, 24);
              uint64_t v21 = &v73;
              uint64_t v22 = (char *)v77;
            }
          }
          uint64_t v23 = &v22[24 * v78];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = v21[2];
          *(_OWORD *)uint64_t v23 = v24;
          ++v78;
          if (v76[0])
          {
            uint64_t v25 = &v73;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v73, (uint64_t)v5);
            long long v26 = (char *)v77;
            if (v78 >= v79)
            {
              unint64_t v64 = v78 + 1;
              if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
              {
                int64_t v68 = (char *)&v73 - (unsigned char *)v77;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v64, 24);
                long long v26 = (char *)v77;
                uint64_t v25 = (void ***)((char *)v77 + v68);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v64, 24);
                uint64_t v25 = &v73;
                long long v26 = (char *)v77;
              }
            }
            uint64_t v27 = &v26[24 * v78];
            long long v28 = *(_OWORD *)v25;
            *((void *)v27 + 2) = v25[2];
            *(_OWORD *)uint64_t v27 = v28;
            ++v78;
          }
        }
      }
    }
    char v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v76);
    if (v76[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v76);
    }
    if (v85)
    {
      char v30 = __p;
      if (__p)
      {
        uint64_t v31 = v84;
        uint64_t v32 = __p;
        if (v84 != __p)
        {
          do
            uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          uint64_t v32 = __p;
        }
        int64_t v84 = v30;
        operator delete(v32);
      }
      uint64_t v33 = v81;
      if (v81)
      {
        uint64_t v34 = v82;
        unint64_t v35 = v81;
        if (v82 != v81)
        {
          do
          {
            uint64_t v37 = *--v34;
            uint64_t v36 = v37;
            *uint64_t v34 = 0;
            if (v37) {
              MEMORY[0x21667D390](v36, 0x1000C8077774924);
            }
          }
          while (v34 != v33);
          unint64_t v35 = v81;
        }
        uint64_t v82 = v33;
        operator delete(v35);
      }
      if (v77 != v80) {
        free(v77);
      }
    }
    if (v29)
    {
LABEL_78:
      uint64_t v38 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
      uint64_t v39 = mlir::detail::OpResultImpl::getNextResultAtOffset(v38, 1);
      uint64_t v40 = mlir::detail::OpResultImpl::getNextResultAtOffset(v39, 0);
      if (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*(void *)this, *(void *)(v40 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 1u))
      {
        int v41 = *(_DWORD *)(*(void *)this + 36);
        unsigned int v42 = v41 - 2;
        if (v41) {
          uint64_t v43 = *(void *)this - 16;
        }
        else {
          uint64_t v43 = 0;
        }
        int v44 = 2;
        uint64_t v45 = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 2);
        if (v42 < 2)
        {
LABEL_50:
          int v49 = *(_DWORD *)(*(void *)this + 36);
          unsigned int v50 = v49 - 2;
          unsigned int v51 = (v49 - 2) >> 1;
          if (v49) {
            uint64_t v52 = *(void *)this - 16;
          }
          else {
            uint64_t v52 = 0;
          }
          uint64_t v53 = mlir::detail::OpResultImpl::getNextResultAtOffset(v52, v51 + 2);
          if (v50 < 2) {
            return 1;
          }
          uint64_t v54 = v53;
          uint64_t v55 = 0;
          unint64_t v56 = v51 + 2 + v51 - (unint64_t)(v51 + 2);
          while (1)
          {
            uint64_t v57 = mlir::detail::OpResultImpl::getNextResultAtOffset(v54, v55);
            if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(v57 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, v44 + (int)v55))break; {
            if (v56 == ++v55)
            }
              return 1;
          }
        }
        else
        {
          uint64_t v46 = v45;
          uint64_t v47 = 0;
          while (1)
          {
            uint64_t v48 = mlir::detail::OpResultImpl::getNextResultAtOffset(v46, v47);
            if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, (int)v47 + 2))break; {
            if (v42 >> 1 == ++v47)
            }
            {
              int v44 = v47 + 2;
              goto LABEL_50;
            }
          }
        }
      }
    }
  }
  return 0;
}

BOOL mlir::memref::ExtractStridedMetadataOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v15[4] = *MEMORY[0x263EF8340];
  memset(v15, 0, 24);
  v10[0] = (uint64_t)v15;
  v10[1] = 1;
  uint64_t v14 = 0;
  v9[0] = &v14;
  v9[1] = 1;
  uint64_t __src = &v13;
  uint64_t v12 = 0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v15, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
    {
      uint64_t v8 = 0;
      if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v8))
      {
        uint64_t v14 = v8;
        if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          if (mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
          {
            (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
            if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
            {
              mlir::OperationState::addTypes(a2, __src, v12);
              BOOL v5 = mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v9, v4, a2 + 16) != 0;
              unint64_t v6 = __src;
              if (__src == &v13) {
                return v5;
              }
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
  BOOL v5 = 0;
  unint64_t v6 = __src;
  if (__src != &v13) {
LABEL_10:
  }
    free(v6);
  return v5;
}

uint64_t mlir::memref::GetGlobalOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v59 = v6;
  if (!v6)
  {
    a3(v63, a4);
    if (v63[0])
    {
      int v60 = 3;
      BOOL v61 = "expected DictionaryAttr to set properties";
      uint64_t v62 = 41;
      char v30 = &v60;
      uint64_t v31 = (char *)v64;
      if (v65 >= v66)
      {
        unint64_t v51 = v65 + 1;
        if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
        {
          int64_t v55 = (char *)&v60 - (unsigned char *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
          uint64_t v31 = (char *)v64;
          char v30 = (int *)((char *)v64 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
          char v30 = &v60;
          uint64_t v31 = (char *)v64;
        }
      }
      uint64_t v32 = &v31[24 * v65];
      long long v33 = *(_OWORD *)v30;
      *((void *)v32 + 2) = *((void *)v30 + 2);
      *(_OWORD *)uint64_t v32 = v33;
      ++v65;
      if (v63[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
      }
    }
    if (!v72) {
      return 0;
    }
    uint64_t v34 = __p;
    if (__p)
    {
      unint64_t v35 = v71;
      uint64_t v36 = __p;
      if (v71 != __p)
      {
        do
          unint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        uint64_t v36 = __p;
      }
      __int16 v71 = v34;
      operator delete(v36);
    }
    uint64_t v25 = v68;
    if (!v68) {
      goto LABEL_64;
    }
    uint64_t v37 = v69;
    uint64_t v27 = v68;
    if (v69 == v68) {
      goto LABEL_63;
    }
    do
    {
      uint64_t v39 = *--v37;
      uint64_t v38 = v39;
      void *v37 = 0;
      if (v39) {
        MEMORY[0x21667D390](v38, 0x1000C8077774924);
      }
    }
    while (v37 != v25);
    goto LABEL_62;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v59, "name", 4uLL);
  if (!v8)
  {
    a3(v63, a4);
    if (v63[0])
    {
      int v60 = 3;
      BOOL v61 = "expected key entry for name in DictionaryAttr to set Properties.";
      uint64_t v62 = 64;
      uint64_t v40 = &v60;
      int v41 = (char *)v64;
      if (v65 >= v66)
      {
        unint64_t v53 = v65 + 1;
        if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
        {
          int64_t v57 = (char *)&v60 - (unsigned char *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v53, 24);
          int v41 = (char *)v64;
          uint64_t v40 = (int *)((char *)v64 + v57);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v53, 24);
          uint64_t v40 = &v60;
          int v41 = (char *)v64;
        }
      }
      unsigned int v42 = &v41[24 * v65];
      long long v43 = *(_OWORD *)v40;
      *((void *)v42 + 2) = *((void *)v40 + 2);
      *(_OWORD *)unsigned int v42 = v43;
      ++v65;
      if (v63[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
      }
    }
    if (!v72) {
      return 0;
    }
    int v44 = __p;
    if (__p)
    {
      uint64_t v45 = v71;
      uint64_t v46 = __p;
      if (v71 != __p)
      {
        do
          uint64_t v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        uint64_t v46 = __p;
      }
      __int16 v71 = v44;
      operator delete(v46);
    }
    uint64_t v25 = v68;
    if (!v68) {
      goto LABEL_64;
    }
    uint64_t v47 = v69;
    uint64_t v27 = v68;
    if (v69 == v68) {
      goto LABEL_63;
    }
    do
    {
      uint64_t v49 = *--v47;
      uint64_t v48 = v49;
      *uint64_t v47 = 0;
      if (v49) {
        MEMORY[0x21667D390](v48, 0x1000C8077774924);
      }
    }
    while (v47 != v25);
    goto LABEL_62;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(*(void *)v8 + 136);
  BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = 0;
  }
  v63[0] = v12;
  if (v11)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v63);
    if (!v13)
    {
      *a1 = v9;
      return 1;
    }
  }
  a3(v63, a4);
  if (v63[0])
  {
    int v60 = 3;
    uint64_t v62 = 49;
    uint64_t v14 = &v60;
    uint64_t v15 = (char *)v64;
    if (v65 >= v66)
    {
      unint64_t v52 = v65 + 1;
      if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
      {
        int64_t v56 = (char *)&v60 - (unsigned char *)v64;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v52, 24);
        uint64_t v15 = (char *)v64;
        uint64_t v14 = (int *)((char *)v64 + v56);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v52, 24);
        uint64_t v14 = &v60;
        uint64_t v15 = (char *)v64;
      }
    }
    uint64_t v16 = &v15[24 * v65];
    long long v17 = *(_OWORD *)v14;
    *((void *)v16 + 2) = *((void *)v14 + 2);
    *(_OWORD *)uint64_t v16 = v17;
    ++v65;
    if (v63[0])
    {
      long long v18 = &v60;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v60, v9);
      long long v19 = (char *)v64;
      if (v65 >= v66)
      {
        unint64_t v54 = v65 + 1;
        if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
        {
          int64_t v58 = (char *)&v60 - (unsigned char *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v54, 24);
          long long v19 = (char *)v64;
          long long v18 = (int *)((char *)v64 + v58);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v54, 24);
          long long v18 = &v60;
          long long v19 = (char *)v64;
        }
      }
      uint64_t v20 = &v19[24 * v65];
      long long v21 = *(_OWORD *)v18;
      *((void *)v20 + 2) = *((void *)v18 + 2);
      *(_OWORD *)uint64_t v20 = v21;
      ++v65;
      if (v63[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
      }
    }
  }
  if (v72)
  {
    uint64_t v22 = __p;
    if (__p)
    {
      uint64_t v23 = v71;
      long long v24 = __p;
      if (v71 != __p)
      {
        do
          uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        long long v24 = __p;
      }
      __int16 v71 = v22;
      operator delete(v24);
    }
    uint64_t v25 = v68;
    if (!v68) {
      goto LABEL_64;
    }
    long long v26 = v69;
    uint64_t v27 = v68;
    if (v69 == v68)
    {
LABEL_63:
      uint64_t v69 = v25;
      operator delete(v27);
LABEL_64:
      if (v64 != v67) {
        free(v64);
      }
      return 0;
    }
    do
    {
      uint64_t v29 = *--v26;
      uint64_t v28 = v29;
      void *v26 = 0;
      if (v29) {
        MEMORY[0x21667D390](v28, 0x1000C8077774924);
      }
    }
    while (v26 != v25);
LABEL_62:
    uint64_t v27 = v68;
    goto LABEL_63;
  }
  return 0;
}

uint64_t mlir::memref::GetGlobalOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  uint64_t v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"name", 4, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  uint64_t *v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::GetGlobalOp::getInherentAttr(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1701667182) {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else {
    return 0;
  }
}

uint64_t mlir::memref::GetGlobalOp::setInherentAttr(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 4)
  {
    unint64_t v10[3] = v4;
    void v10[4] = v5;
    if (*a2 == 1701667182)
    {
      uint64_t v7 = (void *)result;
      if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
          uint64_t v8 = a4;
        }
        else {
          uint64_t v8 = 0;
        }
        v10[0] = v8;
        if (v8)
        {
          uint64_t result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
          if (v9) {
            uint64_t v8 = 0;
          }
          else {
            uint64_t v8 = a4;
          }
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      void *v7 = v8;
    }
  }
  return result;
}

void mlir::memref::GetGlobalOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, *a2);
  }
}

BOOL mlir::memref::GetGlobalOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps0(v6, (void **)"name", (const char *)4, a3, a4);
}

BOOL mlir::memref::GetGlobalOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::FlatSymbolRefAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::memref::GetGlobalOp::verifyInvariantsImpl(mlir::memref::GetGlobalOp *this)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v66[0] = v2;
    if (mlir::func::__mlir_ods_local_attr_constraint_FuncOps0(v3, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v66))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v4 = *(void *)this - 16;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      uint64_t v6 = *(void *)this;
      uint64_t v7 = (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
      if (*((_UNKNOWN **)*v7 + 17) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v7 + 8);
        v66[0] = v7;
        v66[1] = v8;
        mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v66);
        uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v7 + 8);
        int v60 = v7;
        uint64_t v61 = v9;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v60))
        {
          Shape = (void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v60);
          if (!v11) {
            return 1;
          }
          uint64_t v12 = 8 * v11;
          while (*Shape != 0x8000000000000000)
          {
            ++Shape;
            v12 -= 8;
            if (!v12) {
              return 1;
            }
          }
        }
      }
      __int16 v62 = 261;
      int v60 = (void **)"result";
      uint64_t v61 = 6;
      mlir::Operation::emitOpError(v6, &v60, (uint64_t)v66);
      if (v66[0])
      {
        int v63 = 3;
        unint64_t v64 = " #";
        uint64_t v65 = 2;
        uint64_t v22 = &v63;
        uint64_t v23 = (char *)v67;
        if (v68 >= v69)
        {
          unint64_t v50 = v68 + 1;
          if (v67 <= &v63 && (char *)v67 + 24 * v68 > (char *)&v63)
          {
            int64_t v56 = (char *)&v63 - (unsigned char *)v67;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v50, 24);
            uint64_t v23 = (char *)v67;
            uint64_t v22 = (int *)((char *)v67 + v56);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v50, 24);
            uint64_t v22 = &v63;
            uint64_t v23 = (char *)v67;
          }
        }
        long long v24 = &v23[24 * v68];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)long long v24 = v25;
        uint64_t v26 = ++v68;
        if (v66[0])
        {
          int v63 = 5;
          unint64_t v64 = 0;
          uint64_t v27 = &v63;
          uint64_t v28 = (char *)v67;
          if (v26 >= v69)
          {
            unint64_t v51 = v26 + 1;
            BOOL v52 = (char *)v67 + 24 * v26 > (char *)&v63;
            if (v67 <= &v63 && v52)
            {
              int64_t v57 = (char *)&v63 - (unsigned char *)v67;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v51, 24);
              uint64_t v28 = (char *)v67;
              uint64_t v27 = (int *)((char *)v67 + v57);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v51, 24);
              uint64_t v27 = &v63;
              uint64_t v28 = (char *)v67;
            }
          }
          uint64_t v29 = &v28[24 * v68];
          long long v30 = *(_OWORD *)v27;
          *((void *)v29 + 2) = *((void *)v27 + 2);
          *(_OWORD *)uint64_t v29 = v30;
          uint64_t v31 = ++v68;
          if (v66[0])
          {
            int v63 = 3;
            unint64_t v64 = " must be statically shaped memref of any type values, but got ";
            uint64_t v65 = 62;
            uint64_t v32 = &v63;
            long long v33 = (char *)v67;
            if (v31 >= v69)
            {
              unint64_t v53 = v31 + 1;
              BOOL v54 = (char *)v67 + 24 * v31 > (char *)&v63;
              if (v67 <= &v63 && v54)
              {
                int64_t v58 = (char *)&v63 - (unsigned char *)v67;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v53, 24);
                long long v33 = (char *)v67;
                uint64_t v32 = (int *)((char *)v67 + v58);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v53, 24);
                uint64_t v32 = &v63;
                long long v33 = (char *)v67;
              }
            }
            uint64_t v34 = &v33[24 * v68];
            long long v35 = *(_OWORD *)v32;
            *((void *)v34 + 2) = *((void *)v32 + 2);
            *(_OWORD *)uint64_t v34 = v35;
            ++v68;
            if (v66[0])
            {
              uint64_t v36 = &v63;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v63, (uint64_t)v7);
              uint64_t v37 = (char *)v67;
              if (v68 >= v69)
              {
                unint64_t v55 = v68 + 1;
                if (v67 <= &v63 && (char *)v67 + 24 * v68 > (char *)&v63)
                {
                  int64_t v59 = (char *)&v63 - (unsigned char *)v67;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v55, 24);
                  uint64_t v37 = (char *)v67;
                  uint64_t v36 = (int *)((char *)v67 + v59);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v55, 24);
                  uint64_t v36 = &v63;
                  uint64_t v37 = (char *)v67;
                }
              }
              uint64_t v38 = &v37[24 * v68];
              long long v39 = *(_OWORD *)v36;
              *((void *)v38 + 2) = *((void *)v36 + 2);
              *(_OWORD *)uint64_t v38 = v39;
              ++v68;
            }
          }
        }
      }
      char v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v66);
      if (v66[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v66);
      }
      if (v75)
      {
        int v41 = __p;
        if (__p)
        {
          unsigned int v42 = v74;
          long long v43 = __p;
          if (v74 != __p)
          {
            do
              unsigned int v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            long long v43 = __p;
          }
          uint64_t v74 = v41;
          operator delete(v43);
        }
        int v44 = v71;
        if (v71)
        {
          uint64_t v45 = v72;
          uint64_t v46 = v71;
          if (v72 != v71)
          {
            do
            {
              uint64_t v48 = *--v45;
              uint64_t v47 = v48;
              *uint64_t v45 = 0;
              if (v48) {
                MEMORY[0x21667D390](v47, 0x1000C8077774924);
              }
            }
            while (v45 != v44);
            uint64_t v46 = v71;
          }
          char v72 = v44;
          operator delete(v46);
        }
        if (v67 != v70) {
          free(v67);
        }
      }
      if (v40) {
        return 1;
      }
    }
    return 0;
  }
  int v60 = (void **)"requires attribute 'name'";
  __int16 v62 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v60, (uint64_t)v66);
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v66);
  if (v66[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v66);
  }
  if (v75)
  {
    uint64_t v14 = __p;
    if (__p)
    {
      uint64_t v15 = v74;
      uint64_t v16 = __p;
      if (v74 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      uint64_t v74 = v14;
      operator delete(v16);
    }
    long long v17 = v71;
    if (v71)
    {
      long long v18 = v72;
      long long v19 = v71;
      if (v72 != v71)
      {
        do
        {
          uint64_t v21 = *--v18;
          uint64_t v20 = v21;
          *long long v18 = 0;
          if (v21) {
            MEMORY[0x21667D390](v20, 0x1000C8077774924);
          }
        }
        while (v18 != v17);
        long long v19 = v71;
      }
      char v72 = v17;
      operator delete(v19);
    }
    if (v67 != v70) {
      free(v67);
    }
  }
  return v13;
}

uint64_t mlir::memref::GetGlobalOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::FlatSymbolRefAttr>(a1, &v15, v6)) {
    return 0;
  }
  if (v15)
  {
    uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(a2);
    void *v7 = v15;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v13[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, v13)) {
    return 0;
  }
  uint64_t v8 = v13[0];
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  v13[0] = a1;
  v13[1] = &v14;
  void v13[2] = a2;
  uint64_t v10 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v9 + 96));
  if (v10)
  {
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps0(v10, (void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::GetGlobalOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v13))return 0; {
  }
    }
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = v8;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::memref::GetGlobalOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v21[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if (*((unsigned char **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, ":", 1uLL);
  }
  else
  {
    unsigned char *v9 = 58;
    ++*((void *)v8 + 4);
  }
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *uint64_t v11 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v12 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  long long v19 = v21;
  v21[0] = "name";
  v21[1] = 4;
  uint64_t v20 = 0x200000001;
  uint64_t v14 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v14);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v14 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v17, v19, v20);
  if (v19 != v21) {
    free(v19);
  }
}

uint64_t mlir::memref::GlobalOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v82 = v6;
  if (!v6)
  {
    a3(v86, a4);
    if (v86[0])
    {
      LODWORD(v83) = 3;
      int64_t v84 = "expected DictionaryAttr to set properties";
      uint64_t v85 = 41;
      uint64_t v26 = &v83;
      uint64_t v27 = (char *)v87;
      if (v88 >= v89)
      {
        unint64_t v69 = v88 + 1;
        if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
        {
          int64_t v75 = (char *)&v83 - (unsigned char *)v87;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v69, 24);
          uint64_t v27 = (char *)v87;
          uint64_t v26 = (uint64_t *)((char *)v87 + v75);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v69, 24);
          uint64_t v26 = &v83;
          uint64_t v27 = (char *)v87;
        }
      }
      uint64_t v28 = &v27[24 * v88];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)uint64_t v28 = v29;
      ++v88;
      if (v86[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
      }
    }
    if (!v95) {
      return 0;
    }
    long long v30 = __p;
    if (__p)
    {
      uint64_t v31 = v94;
      uint64_t v32 = __p;
      if (v94 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      uint64_t v94 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v91;
    if (!v91) {
      goto LABEL_86;
    }
    long long v33 = v92;
    uint64_t v23 = v91;
    if (v92 == v91)
    {
LABEL_85:
      uint64_t v92 = v21;
      operator delete(v23);
LABEL_86:
      if (v87 != v90) {
        free(v87);
      }
      return 0;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
LABEL_84:
    uint64_t v23 = v91;
    goto LABEL_85;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v82, "alignment", 9uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      a3(v86, a4);
      if (v86[0])
      {
        LODWORD(v83) = 3;
        uint64_t v85 = 54;
        uint64_t v10 = &v83;
        uint64_t v11 = (char *)v87;
        if (v88 >= v89)
        {
          unint64_t v70 = v88 + 1;
          if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
          {
            int64_t v76 = (char *)&v83 - (unsigned char *)v87;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v70, 24);
            uint64_t v11 = (char *)v87;
            uint64_t v10 = (uint64_t *)((char *)v87 + v76);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v70, 24);
            uint64_t v10 = &v83;
            uint64_t v11 = (char *)v87;
          }
        }
        uint64_t v12 = &v11[24 * v88];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        ++v88;
        if (v86[0])
        {
          uint64_t v14 = &v83;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v83, v9);
          uint64_t v15 = (char *)v87;
          if (v88 >= v89)
          {
            unint64_t v71 = v88 + 1;
            if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
            {
              int64_t v77 = (char *)&v83 - (unsigned char *)v87;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v71, 24);
              uint64_t v15 = (char *)v87;
              uint64_t v14 = (uint64_t *)((char *)v87 + v77);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v71, 24);
              uint64_t v14 = &v83;
              uint64_t v15 = (char *)v87;
            }
          }
          uint64_t v16 = &v15[24 * v88];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = v14[2];
          *(_OWORD *)uint64_t v16 = v17;
          ++v88;
          if (v86[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
          }
        }
      }
      if (!v95) {
        return 0;
      }
      long long v18 = __p;
      if (__p)
      {
        long long v19 = v94;
        uint64_t v20 = __p;
        if (v94 != __p)
        {
          do
            long long v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        uint64_t v94 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v91;
      if (!v91) {
        goto LABEL_86;
      }
      uint64_t v22 = v92;
      uint64_t v23 = v91;
      if (v92 == v91) {
        goto LABEL_85;
      }
      do
      {
        uint64_t v25 = *--v22;
        uint64_t v24 = v25;
        *uint64_t v22 = 0;
        if (v25) {
          MEMORY[0x21667D390](v24, 0x1000C8077774924);
        }
      }
      while (v22 != v21);
      goto LABEL_84;
    }
    *a1 = v8;
  }
  uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)&v82, "constant", 8uLL);
  if (v36)
  {
    uint64_t v37 = v36;
    if (*(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v86, a4);
      if (v86[0])
      {
        LODWORD(v83) = 3;
        uint64_t v85 = 53;
        uint64_t v38 = &v83;
        long long v39 = (char *)v87;
        if (v88 >= v89)
        {
          unint64_t v72 = v88 + 1;
          if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
          {
            int64_t v78 = (char *)&v83 - (unsigned char *)v87;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v72, 24);
            long long v39 = (char *)v87;
            uint64_t v38 = (uint64_t *)((char *)v87 + v78);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v72, 24);
            uint64_t v38 = &v83;
            long long v39 = (char *)v87;
          }
        }
        char v40 = &v39[24 * v88];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = v38[2];
        *(_OWORD *)char v40 = v41;
        ++v88;
        if (v86[0])
        {
          unsigned int v42 = &v83;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v83, v37);
          long long v43 = (char *)v87;
          if (v88 >= v89)
          {
            unint64_t v73 = v88 + 1;
            if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
            {
              int64_t v79 = (char *)&v83 - (unsigned char *)v87;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v73, 24);
              long long v43 = (char *)v87;
              unsigned int v42 = (uint64_t *)((char *)v87 + v79);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v73, 24);
              unsigned int v42 = &v83;
              long long v43 = (char *)v87;
            }
          }
          int v44 = &v43[24 * v88];
          long long v45 = *(_OWORD *)v42;
          *((void *)v44 + 2) = v42[2];
          *(_OWORD *)int v44 = v45;
          ++v88;
          if (v86[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
          }
        }
      }
      if (!v95) {
        return 0;
      }
      uint64_t v46 = __p;
      if (__p)
      {
        uint64_t v47 = v94;
        uint64_t v48 = __p;
        if (v94 != __p)
        {
          do
            uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          uint64_t v48 = __p;
        }
        uint64_t v94 = v46;
        operator delete(v48);
      }
      uint64_t v21 = v91;
      if (!v91) {
        goto LABEL_86;
      }
      uint64_t v49 = v92;
      uint64_t v23 = v91;
      if (v92 == v91) {
        goto LABEL_85;
      }
      do
      {
        uint64_t v51 = *--v49;
        uint64_t v50 = v51;
        *uint64_t v49 = 0;
        if (v51) {
          MEMORY[0x21667D390](v50, 0x1000C8077774924);
        }
      }
      while (v49 != v21);
      goto LABEL_84;
    }
    a1[1] = v36;
  }
  uint64_t v52 = mlir::DictionaryAttr::get((uint64_t)&v82, "initial_value", 0xDuLL);
  if (v52) {
    a1[2] = v52;
  }
  uint64_t v53 = mlir::DictionaryAttr::get((uint64_t)&v82, "sym_name", 8uLL);
  uint64_t v81 = v53;
  if (!v53)
  {
    a3(v86, a4);
    if (v86[0])
    {
      LODWORD(v83) = 3;
      int64_t v84 = "expected key entry for sym_name in DictionaryAttr to set Properties.";
      uint64_t v85 = 68;
      unint64_t v55 = &v83;
      int64_t v56 = (char *)v87;
      if (v88 >= v89)
      {
        unint64_t v74 = v88 + 1;
        if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
        {
          int64_t v80 = (char *)&v83 - (unsigned char *)v87;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v74, 24);
          int64_t v56 = (char *)v87;
          unint64_t v55 = (uint64_t *)((char *)v87 + v80);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v74, 24);
          unint64_t v55 = &v83;
          int64_t v56 = (char *)v87;
        }
      }
      int64_t v57 = &v56[24 * v88];
      long long v58 = *(_OWORD *)v55;
      *((void *)v57 + 2) = v55[2];
      *(_OWORD *)int64_t v57 = v58;
      ++v88;
      if (v86[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
      }
    }
    if (!v95) {
      return 0;
    }
    int64_t v59 = __p;
    if (__p)
    {
      int v60 = v94;
      uint64_t v61 = __p;
      if (v94 != __p)
      {
        do
          int v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
        while (v60 != v59);
        uint64_t v61 = __p;
      }
      uint64_t v94 = v59;
      operator delete(v61);
    }
    uint64_t v21 = v91;
    if (!v91) {
      goto LABEL_86;
    }
    __int16 v62 = v92;
    uint64_t v23 = v91;
    if (v92 == v91) {
      goto LABEL_85;
    }
    do
    {
      uint64_t v64 = *--v62;
      uint64_t v63 = v64;
      *__int16 v62 = 0;
      if (v64) {
        MEMORY[0x21667D390](v63, 0x1000C8077774924);
      }
    }
    while (v62 != v21);
    goto LABEL_84;
  }
  if (*(_UNKNOWN **)(*(void *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[3] = v53;
    uint64_t v65 = mlir::DictionaryAttr::get((uint64_t)&v82, "sym_visibility", 0xEuLL);
    uint64_t v83 = v65;
    if (v65)
    {
      if (*(_UNKNOWN **)(*(void *)v65 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
      {
        a3(v86, a4);
LABEL_95:
        mlir::InFlightDiagnostic::append<mlir::Attribute>(v66, &v83);
        goto LABEL_97;
      }
      a1[4] = v65;
    }
    uint64_t v67 = mlir::DictionaryAttr::get((uint64_t)&v82, "type", 4uLL);
    uint64_t v83 = v67;
    if (!v67)
    {
      a3(v86, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v86, "expected key entry for type in DictionaryAttr to set Properties.");
      goto LABEL_97;
    }
    if (*(_UNKNOWN **)(*(void *)v67 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      a1[5] = v67;
      return 1;
    }
    a3(v86, a4);
    goto LABEL_95;
  }
  a3(v86, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v54, &v81);
LABEL_97:
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v86);
  return 0;
}

uint64_t mlir::memref::GlobalOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v45[6] = *MEMORY[0x263EF8340];
  unsigned int v42 = a1;
  long long v43 = v45;
  uint64_t v44 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v42, (uint64_t)"alignment", 9, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
    unsigned int v6 = v44;
  }
  uint64_t v7 = (uint64_t *)((char *)v43 + 16 * v6);
  uint64_t *v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v44 + 1;
  LODWORD(v44) = v44 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"constant", 8, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v13 = v44;
    }
    uint64_t v14 = (uint64_t *)((char *)v43 + 16 * v13);
    *uint64_t v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"initial_value", 13, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v19 = v44;
    }
    uint64_t v20 = (uint64_t *)((char *)v43 + 16 * v19);
    *uint64_t v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v21 = a2[3];
  if (v21)
  {
    uint64_t v22 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"sym_name", 8, v21);
    uint64_t v24 = v23;
    unsigned int v25 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v25 = v44;
    }
    uint64_t v26 = (uint64_t *)((char *)v43 + 16 * v25);
    uint64_t *v26 = v22;
    v26[1] = v24;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"sym_visibility", 14, v27);
    uint64_t v30 = v29;
    unsigned int v31 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v31 = v44;
    }
    uint64_t v32 = (uint64_t *)((char *)v43 + 16 * v31);
    uint64_t *v32 = v28;
    v32[1] = v30;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  uint64_t v33 = a2[5];
  if (v33)
  {
    uint64_t v34 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"type", 4, v33);
    uint64_t v36 = v35;
    unsigned int v37 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      unsigned int v37 = v44;
    }
    uint64_t v38 = (uint64_t *)((char *)v43 + 16 * v37);
    uint64_t *v38 = v34;
    v38[1] = v36;
    unsigned int v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  long long v39 = v43;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v43 == v45) {
      return DictionaryAttr;
    }
    goto LABEL_28;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v42, (uint64_t *)v43, v8);
  long long v39 = v43;
  if (v43 != v45) {
LABEL_28:
  }
    free(v39);
  return DictionaryAttr;
}

unint64_t mlir::memref::GlobalOp::computePropertiesHash(unint64_t *a1)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  unint64_t v1 = *a1;
  uint64_t v2 = &unk_267770000;
  {
    unint64_t v40 = v1;
    long long v45 = a1;
    uint64_t v2 = &unk_267770000;
    int v22 = v21;
    unint64_t v1 = v40;
    a1 = v45;
    if (v22)
    {
      unint64_t v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v23 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      unint64_t v1 = v40;
      a1 = v45;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v1) ^ HIDWORD(v1));
  unint64_t v56 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v41 = v5;
    uint64_t v46 = a1;
    uint64_t v2 = &unk_267770000;
    int v25 = v24;
    unint64_t v5 = v41;
    a1 = v46;
    if (v25)
    {
      unint64_t v26 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v26 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v26;
      unint64_t v5 = v41;
      a1 = v46;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v5) ^ HIDWORD(v5));
  unint64_t v55 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v42 = v8;
    uint64_t v47 = a1;
    uint64_t v2 = &unk_267770000;
    int v28 = v27;
    unint64_t v8 = v42;
    a1 = v47;
    if (v28)
    {
      unint64_t v29 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v29 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v29;
      unint64_t v8 = v42;
      a1 = v47;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v8) ^ HIDWORD(v8));
  unint64_t v54 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  unint64_t v11 = a1[3];
  {
    unint64_t v43 = v11;
    uint64_t v48 = a1;
    uint64_t v2 = &unk_267770000;
    int v31 = v30;
    unint64_t v11 = v43;
    a1 = v48;
    if (v31)
    {
      unint64_t v32 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v32 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v32;
      unint64_t v11 = v43;
      a1 = v48;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v12 = HIDWORD(v11);
  unint64_t v13 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v11) ^ HIDWORD(v11));
  unint64_t v53 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
  unint64_t v14 = a1[4];
  {
    unint64_t v44 = v14;
    uint64_t v49 = a1;
    uint64_t v2 = &unk_267770000;
    int v34 = v33;
    unint64_t v14 = v44;
    a1 = v49;
    if (v34)
    {
      unint64_t v35 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v35 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v35;
      unint64_t v14 = v44;
      a1 = v49;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v15 = HIDWORD(v14);
  unint64_t v16 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v14) ^ HIDWORD(v14));
  unint64_t v52 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) ^ ((0x9DDFEA08EB382D69 * (v15 ^ (v16 >> 47) ^ v16)) >> 47));
  unint64_t v17 = a1[5];
  {
    unint64_t v50 = v17;
    unint64_t v17 = v50;
    uint64_t v2 = &unk_267770000;
    if (v36)
    {
      unint64_t v37 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v37 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v37;
      unint64_t v17 = v50;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v18 = HIDWORD(v17);
  unint64_t v19 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v17) ^ HIDWORD(v17));
  unint64_t v51 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) ^ ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) >> 47));
  uint64_t v59 = 0;
  memset(v58, 0, sizeof(v58));
  memset(v57, 0, sizeof(v57));
  {
    uint64_t v2 = &unk_267770000;
    if (v38)
    {
      unint64_t v39 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v39 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v39;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  uint64_t v60 = v2[385];
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v57, 0, v57, (char *)v58, (uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51);
}

uint64_t mlir::memref::GlobalOp::getInherentAttr(int a1, void *a2, void *__s1, size_t __n)
{
  switch(__n)
  {
    case 4uLL:
      if (memcmp(__s1, "type", __n)) {
        return 0;
      }
      return a2[5];
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
      return 0;
    case 8uLL:
      if (!memcmp(__s1, "constant", __n)) {
        return a2[1];
      }
      if (memcmp(__s1, "sym_name", __n)) {
        return 0;
      }
      return a2[3];
    case 9uLL:
      if (*__s1 != 0x6E656D6E67696C61 || *((unsigned char *)__s1 + 8) != 116) {
        return 0;
      }
      return *a2;
    case 0xDuLL:
      if (memcmp(__s1, "initial_value", __n)) {
        return 0;
      }
      return a2[2];
    case 0xEuLL:
      if (memcmp(__s1, "sym_visibility", __n)) {
        return 0;
      }
      return a2[4];
    default:
      return 0;
  }
}

uint64_t mlir::memref::GlobalOp::setInherentAttr(uint64_t result, void *__s1, size_t __n, uint64_t a4)
{
  unint64_t v7 = (void *)result;
  switch(__n)
  {
    case 4uLL:
      uint64_t result = memcmp(__s1, "type", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
            uint64_t v12 = a4;
          }
          else {
            uint64_t v12 = 0;
          }
          v7[5] = v12;
        }
        else
        {
          v7[5] = 0;
        }
      }
      break;
    case 8uLL:
      uint64_t result = memcmp(__s1, "constant", __n);
      if (result)
      {
        uint64_t result = memcmp(__s1, "sym_name", __n);
        if (!result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
              uint64_t v8 = a4;
            }
            else {
              uint64_t v8 = 0;
            }
            v7[3] = v8;
          }
          else
          {
            v7[3] = 0;
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
          uint64_t v13 = a4;
        }
        else {
          uint64_t v13 = 0;
        }
        v7[1] = v13;
      }
      else
      {
        v7[1] = 0;
      }
      break;
    case 9uLL:
      if (*__s1 == 0x6E656D6E67696C61 && *((unsigned char *)__s1 + 8) == 116)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
            uint64_t v10 = a4;
          }
          else {
            uint64_t v10 = 0;
          }
          *(void *)uint64_t result = v10;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      break;
    case 0xDuLL:
      uint64_t result = memcmp(__s1, "initial_value", __n);
      if (!result) {
        void v7[2] = a4;
      }
      break;
    case 0xEuLL:
      uint64_t result = memcmp(__s1, "sym_visibility", __n);
      if (!result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
            uint64_t v11 = a4;
          }
          else {
            uint64_t v11 = 0;
          }
          void v7[4] = v11;
        }
        else
        {
          void v7[4] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::memref::GlobalOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"alignment", 9, *a2);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"constant", 8, v5);
  }
  uint64_t v6 = a2[2];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"initial_value", 13, v6);
  }
  uint64_t v7 = a2[3];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, v7);
  }
  uint64_t v8 = a2[4];
  if (v8) {
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_visibility", 14, v8);
  }
  uint64_t v9 = a2[5];
  if (v9)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"type", 4, v9);
  }
}

BOOL mlir::memref::GlobalOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = (void **)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(v8, (void **)"alignment", (const char *)9, a3, a4))
  {
    uint64_t v9 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v9, (void **)"constant", (const char *)8, a3, a4))
    {
      mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      uint64_t v10 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 24));
      if (!v10
        || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v10, (void **)"sym_name", (const char *)8, a3, a4))
      {
        uint64_t v11 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 32));
        if (!v11
          || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v11, (void **)"sym_visibility", (const char *)0xE, a3, a4))
        {
          uint64_t v12 = mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 40));
          if (!v12
            || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(v12, (void **)"type", (const char *)4, a3, a4))
          {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(void **a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    int v31 = a1;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64)) {
      return 1;
    }
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(v31) = 3;
    unint64_t v32 = "attribute '";
    uint64_t v33 = 11;
    uint64_t v10 = &v31;
    uint64_t v11 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v11 = (char *)v37;
        uint64_t v10 = (void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v10 = &v31;
        uint64_t v11 = (char *)v37;
      }
    }
    uint64_t v12 = &v11[24 * v38];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = v10[2];
    *(_OWORD *)uint64_t v12 = v13;
    ++v38;
    if (Value)
    {
      __int16 v34 = 261;
      int v31 = a2;
      unint64_t v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (Value)
      {
        LODWORD(v31) = 3;
        unint64_t v32 = "' failed to satisfy constraint: 64-bit signless integer attribute";
        uint64_t v33 = 65;
        unint64_t v14 = &v31;
        unint64_t v15 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            unint64_t v15 = (char *)v37;
            unint64_t v14 = (void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            unint64_t v14 = &v31;
            unint64_t v15 = (char *)v37;
          }
        }
        unint64_t v16 = &v15[24 * v38];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = v14[2];
        *(_OWORD *)unint64_t v16 = v17;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  if (v45)
  {
    unint64_t v18 = __p;
    if (__p)
    {
      unint64_t v19 = v44;
      uint64_t v20 = __p;
      if (v44 != __p)
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      unint64_t v44 = v18;
      operator delete(v20);
    }
    int v21 = v41;
    if (v41)
    {
      int v22 = v42;
      unint64_t v23 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *int v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v41;
      }
      unint64_t v42 = v21;
      operator delete(v23);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a1 || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    int64_t v30 = "attribute '";
    uint64_t v31 = 11;
    uint64_t v7 = &v29;
    uint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v8 = (char *)v35;
        uint64_t v7 = (void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        uint64_t v7 = &v29;
        uint64_t v8 = (char *)v35;
      }
    }
    uint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)uint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      int64_t v29 = a2;
      int64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        int64_t v30 = "' failed to satisfy constraint: unit attribute";
        uint64_t v31 = 46;
        uint64_t v11 = &v29;
        uint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v12 = (char *)v35;
            uint64_t v11 = (void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            uint64_t v11 = &v29;
            uint64_t v12 = (char *)v35;
          }
        }
        long long v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)long long v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    unint64_t v16 = __p;
    if (__p)
    {
      long long v17 = v42;
      unint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          long long v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        unint64_t v18 = __p;
      }
      unint64_t v42 = v16;
      operator delete(v18);
    }
    unint64_t v19 = v39;
    if (v39)
    {
      uint64_t v20 = v40;
      int v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = *--v20;
          uint64_t v22 = v23;
          *uint64_t v20 = 0;
          if (v23) {
            MEMORY[0x21667D390](v22, 0x1000C8077774924);
          }
        }
        while (v20 != v19);
        int v21 = v39;
      }
      unint64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    uint64_t v35 = a1;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      return 1;
    }
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    __int16 v32 = "attribute '";
    uint64_t v33 = 11;
    uint64_t v9 = &v31;
    long long v10 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        long long v10 = (char *)v37;
        uint64_t v9 = (void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v9 = &v31;
        long long v10 = (char *)v37;
      }
    }
    uint64_t v11 = &v10[24 * v38];
    long long v12 = *(_OWORD *)v9;
    *((void *)v11 + 2) = v9[2];
    *(_OWORD *)uint64_t v11 = v12;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      uint64_t v31 = a2;
      __int16 v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        __int16 v32 = "' failed to satisfy constraint: memref type attribute";
        uint64_t v33 = 53;
        long long v13 = &v31;
        long long v14 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            long long v14 = (char *)v37;
            long long v13 = (void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            long long v13 = &v31;
            long long v14 = (char *)v37;
          }
        }
        uint64_t v15 = &v14[24 * v38];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = v13[2];
        *(_OWORD *)uint64_t v15 = v16;
        ++v38;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    unint64_t v18 = __p;
    if (__p)
    {
      unint64_t v19 = v44;
      uint64_t v20 = __p;
      if (v44 != __p)
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v44 = v18;
      operator delete(v20);
    }
    int v21 = v41;
    if (v41)
    {
      uint64_t v22 = v42;
      uint64_t v23 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v41;
      }
      unint64_t v42 = v21;
      operator delete(v23);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v17;
}

BOOL mlir::memref::GlobalOp::readProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 1)
      && (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 4)
      && mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3 + 5) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::memref::GlobalOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v3 = (void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v3 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *v3);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, v3[1]);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, v3[2]);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, v3[3]);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, v3[4]);
  uint64_t v4 = v3[5];
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16);

  return v5(a2, v4);
}

BOOL mlir::memref::GlobalOp::verifyInvariantsImpl(mlir::memref::GlobalOp *this)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 40);
    if (v5)
    {
      uint64_t v6 = *(void ***)v3;
      uint64_t v7 = *(void *)(v3 + 8);
      uint64_t v8 = *(void *)(v3 + 32);
      v30[0] = v2;
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v4, (void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
      v30[0] = *(void *)this;
      }
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v8, (void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
      v30[0] = *(void *)this;
      }
      if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(v5, (void **)"type", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
      v30[0] = *(void *)this;
      }
      if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (void **)"constant", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0; {
      v30[0] = *(void *)this;
      }
      return mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(v6, (void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30) != 0;
    }
    v28[0] = (void **)"requires attribute 'type'";
    __int16 v29 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v28, (uint64_t)v30);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    }
    if (v37)
    {
      unint64_t v18 = __p;
      if (__p)
      {
        unint64_t v19 = v36;
        uint64_t v20 = __p;
        if (v36 != __p)
        {
          do
            unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        uint64_t v36 = v18;
        operator delete(v20);
      }
      int v21 = v33;
      if (v33)
      {
        uint64_t v22 = v34;
        uint64_t v23 = v33;
        if (v34 != v33)
        {
          do
          {
            uint64_t v25 = *--v22;
            uint64_t v24 = v25;
            *uint64_t v22 = 0;
            if (v25) {
              MEMORY[0x21667D390](v24, 0x1000C8077774924);
            }
          }
          while (v22 != v21);
          uint64_t v23 = v33;
        }
        __int16 v34 = v21;
        operator delete(v23);
      }
      unint64_t v26 = v31;
      if (v31 != v32) {
LABEL_47:
      }
        free(v26);
    }
  }
  else
  {
    v28[0] = (void **)"requires attribute 'sym_name'";
    __int16 v29 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v28, (uint64_t)v30);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    }
    if (v37)
    {
      long long v10 = __p;
      if (__p)
      {
        uint64_t v11 = v36;
        long long v12 = __p;
        if (v36 != __p)
        {
          do
            uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          long long v12 = __p;
        }
        uint64_t v36 = v10;
        operator delete(v12);
      }
      long long v13 = v33;
      if (v33)
      {
        long long v14 = v34;
        uint64_t v15 = v33;
        if (v34 != v33)
        {
          do
          {
            uint64_t v17 = *--v14;
            uint64_t v16 = v17;
            *long long v14 = 0;
            if (v17) {
              MEMORY[0x21667D390](v16, 0x1000C8077774924);
            }
          }
          while (v14 != v13);
          uint64_t v15 = v33;
        }
        __int16 v34 = v13;
        operator delete(v15);
      }
      unint64_t v26 = v31;
      if (v31 != v32) {
        goto LABEL_47;
      }
    }
  }
  return v9;
}

uint64_t mlir::memref::GlobalOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  uint64_t v4 = (mlir::NoneType **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
  uint64_t v6 = mlir::NoneType::get(*v4, v5);
  unsigned __int16 v7 = (*(uint64_t (**)(mlir::AsmParser *, uint64_t *, uint64_t))(*(void *)a1 + 440))(a1, &v51, v6);
  if (v7 >= 0x100u)
  {
    if (!(_BYTE)v7) {
      return 0;
    }
    if (v51)
    {
      uint64_t v8 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2);
      *(void *)(v8 + 32) = v51;
    }
  }
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(void *)a1 + 376))(a1, "constant", 8))
  {
    uint64_t v9 = (mlir::UnitAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 32))(a1);
    uint64_t UnitAttr = mlir::Builder::getUnitAttr(v9, v10);
    *(void *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2)
              + 8) = UnitAttr;
  }
  if (!mlir::AsmParser::parseSymbolName(a1, (mlir::StringAttr *)&v50)) {
    return 0;
  }
  if (v50)
  {
    uint64_t v12 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2);
    *(void *)(v12 + 24) = v50;
  }
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  uint64_t v55 = 0;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t *))(*(void *)a1 + 504))(a1, &v55)) {
    return 0;
  }
  uint64_t v13 = v55;
  if (*(_UNKNOWN **)(*(void *)v55 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    uint64_t v13 = 0;
  }
  uint64_t v54 = v13;
  if (v13 && mlir::BaseMemRefType::hasRank((mlir::BaseMemRefType *)&v54))
  {
    uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
    if (!v15)
    {
LABEL_20:
      uint64_t v17 = mlir::TypeAttr::get(v55);
      if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(void *)a1 + 144))(a1))
      {
        if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(void *)a1 + 376))(a1, "uninitialized", 13))
        {
          uint64_t Context = (mlir::UnitAttr *)mlir::AsmParser::getContext(a1);
          uint64_t v49 = (void *)mlir::UnitAttr::get(Context, v19);
        }
        else
        {
          TensorTypeFromMemRefuint64_t Type = mlir::memref::getTensorTypeFromMemRefType(v54);
          if (!(*(unsigned __int8 (**)(mlir::AsmParser *, void **, uint64_t))(*(void *)a1 + 408))(a1, &v49, TensorTypeFromMemRefType))return 0; {
          if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v49 + 8))
          }
          {
            uint64_t v42 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 16))(a1);
            __int16 v53 = 257;
            (*(void (**)(void *__return_ptr, mlir::AsmParser *, uint64_t, void *))(*(void *)a1 + 24))(v59, a1, v42, v52);
            uint64_t v43 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v59, "initial value should be a unit or elements attribute");
            char v44 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v43);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v59);
            if (!v44) {
              return 0;
            }
          }
        }
      }
      goto LABEL_47;
    }
    uint64_t v16 = 8 * v15;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v16 -= 8;
      if (!v16) {
        goto LABEL_20;
      }
    }
  }
  uint64_t v20 = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 16))(a1);
  __int16 v53 = 257;
  (*(void (**)(void *__return_ptr, mlir::AsmParser *, uint64_t, void *))(*(void *)a1 + 24))(v59, a1, v20, v52);
  if (v59[0])
  {
    int v56 = 3;
    int64_t v57 = "type should be static shaped memref, but got ";
    uint64_t v58 = 45;
    int v21 = &v56;
    uint64_t v22 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v45 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v47 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
        uint64_t v22 = (char *)v60;
        int v21 = (int *)((char *)v60 + v47);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
        int v21 = &v56;
        uint64_t v22 = (char *)v60;
      }
    }
    uint64_t v23 = &v22[24 * v61];
    long long v24 = *(_OWORD *)v21;
    *((void *)v23 + 2) = *((void *)v21 + 2);
    *(_OWORD *)uint64_t v23 = v24;
    ++v61;
    if (v59[0])
    {
      uint64_t v25 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v55);
      unint64_t v26 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v46 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v48 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v46, 24);
          unint64_t v26 = (char *)v60;
          uint64_t v25 = (int *)((char *)v60 + v48);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v46, 24);
          uint64_t v25 = &v56;
          unint64_t v26 = (char *)v60;
        }
      }
      unint64_t v27 = &v26[24 * v61];
      long long v28 = *(_OWORD *)v25;
      *((void *)v27 + 2) = *((void *)v25 + 2);
      *(_OWORD *)unint64_t v27 = v28;
      ++v61;
    }
  }
  char v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
  if (v59[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
  }
  if (v68)
  {
    int64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v67;
      __int16 v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        __int16 v32 = __p;
      }
      uint64_t v67 = v30;
      operator delete(v32);
    }
    uint64_t v33 = v64;
    if (v64)
    {
      __int16 v34 = v65;
      uint64_t v35 = v64;
      if (v65 != v64)
      {
        do
        {
          uint64_t v37 = *--v34;
          uint64_t v36 = v37;
          *__int16 v34 = 0;
          if (v37) {
            MEMORY[0x21667D390](v36, 0x1000C8077774924);
          }
        }
        while (v34 != v33);
        uint64_t v35 = v64;
      }
      uint64_t v65 = v33;
      operator delete(v35);
    }
    if (v60 != v63) {
      free(v60);
    }
  }
  uint64_t v17 = 0;
  if (!v29) {
    return 0;
  }
LABEL_47:
  *(void *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2)
            + 40) = v17;
  if (v49)
  {
    uint64_t v38 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2);
    *(void *)(v38 + 16) = v49;
  }
  v52[0] = (*(uint64_t (**)(mlir::AsmParser *))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v39 = *(void *)(a2 + 8);
    v59[0] = a1;
    v59[1] = v52;
    v59[2] = a2;
    if (mlir::memref::GlobalOp::verifyInherentAttrs(v39, a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::GlobalOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v59))
    {
      return 1;
    }
  }
  return 0;
}

void mlir::memref::GlobalOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v50[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *this;
  unint64_t v5 = *((unsigned int *)*this + 11);
  uint64_t v6 = (v5 >> 23) & 1;
  uint64_t v7 = (uint64_t)*this + 16 * v6 + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v7 = 0;
  }
  if (*(void *)(v7 + 32))
  {
    uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v9 >= *((void *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((void *)v8 + 4) = v9 + 1;
      unsigned char *v9 = 32;
    }
    unint64_t v10 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      unint64_t v10 = 0;
    }
    (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 48))(a2, *(void *)(v10 + 32));
    uint64_t v4 = *this;
    unint64_t v5 = *((unsigned int *)*this + 11);
    uint64_t v6 = (v5 >> 23) & 1;
  }
  uint64_t v11 = (uint64_t)v4 + 16 * v6 + 64;
  if (!BYTE3(v5)) {
    uint64_t v11 = 0;
  }
  if (*(void *)(v11 + 8))
  {
    uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if ((unint64_t)v13 >= *((void *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((void *)v12 + 4) = v13 + 1;
      *uint64_t v13 = 32;
    }
    long long v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v15 = (void *)*((void *)v14 + 4);
    if (*((void *)v14 + 3) - (void)v15 > 7uLL)
    {
      void *v15 = 0x746E6174736E6F63;
      *((void *)v14 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v14, "constant", 8uLL);
    }
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    *uint64_t v17 = 32;
  }
  unint64_t v18 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v18 = 0;
  }
  int64_t v48 = *(void **)(v18 + 24);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v48);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, AttrData, v20);
  int v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v22 = (unsigned char *)*((void *)v21 + 4);
  if ((unint64_t)v22 >= *((void *)v21 + 3))
  {
    llvm::raw_ostream::write(v21, 32);
  }
  else
  {
    *((void *)v21 + 4) = v22 + 1;
    *uint64_t v22 = 32;
  }
  uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v24 = (unsigned char *)*((void *)v23 + 4);
  if (*((unsigned char **)v23 + 3) == v24)
  {
    llvm::raw_ostream::write(v23, ":", 1uLL);
  }
  else
  {
    *long long v24 = 58;
    ++*((void *)v23 + 4);
  }
  uint64_t v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v26 = (unsigned char *)*((void *)v25 + 4);
  if ((unint64_t)v26 >= *((void *)v25 + 3))
  {
    llvm::raw_ostream::write(v25, 32);
  }
  else
  {
    *((void *)v25 + 4) = v26 + 1;
    unsigned char *v26 = 32;
  }
  unint64_t v27 = *this;
  uint64_t v28 = (uint64_t)*this + 64;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v29 = v28 + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1);
  }
  else {
    unint64_t v29 = 0;
  }
  uint64_t v30 = *(void *)(v29 + 16);
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 40))(a2, *(void *)(v29 + 40));
  if (HIBYTE(*((_DWORD *)v27 + 11))) {
    unint64_t v31 = v28 + 16 * (((unint64_t)*((unsigned int *)v27 + 11) >> 23) & 1);
  }
  else {
    unint64_t v31 = 0;
  }
  if (*(void *)(v31 + 16))
  {
    __int16 v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
    uint64_t v33 = *((void *)v32 + 4);
    if ((unint64_t)(*((void *)v32 + 3) - v33) > 2)
    {
      *(unsigned char *)(v33 + 2) = 32;
      *(_WORD *)uint64_t v33 = 15648;
      *((void *)v32 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v32, " = ", 3uLL);
    }
    if (HIBYTE(*((_DWORD *)v27 + 11))) {
      unint64_t v34 = v28 + 16 * (((unint64_t)*((unsigned int *)v27 + 11) >> 23) & 1);
    }
    else {
      unint64_t v34 = 0;
    }
    uint64_t v35 = *(void *)(v34 + 16);
    if (v35 && *(_UNKNOWN **)(*(void *)v35 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      unint64_t v45 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      unint64_t v46 = (void *)*((void *)v45 + 4);
      if (*((void *)v45 + 3) - (void)v46 > 0xCuLL)
      {
        qmemcpy(v46, "uninitialized", 13);
        *((void *)v45 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v45, "uninitialized", 0xDuLL);
      }
    }
    else
    {
      (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(void *)a2 + 48))(a2, v30);
    }
  }
  int64_t v48 = v50;
  v50[0] = "sym_visibility";
  v50[1] = 14;
  v50[2] = "constant";
  void v50[3] = 8;
  uint64_t v49 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, 3uLL, 16);
  uint64_t v36 = (char *)v48 + 16 * v49;
  *uint64_t v36 = "sym_name";
  v36[1] = 8;
  uint64_t v37 = (v49 + 1);
  LODWORD(v49) = v37;
  if (v37 >= HIDWORD(v49))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v37 + 1, 16);
    LODWORD(v37) = v49;
  }
  uint64_t v38 = (char *)v48 + 16 * v37;
  void *v38 = "type";
  v38[1] = 4;
  uint64_t v39 = (v49 + 1);
  LODWORD(v49) = v39;
  if (v39 >= HIDWORD(v49))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v39 + 1, 16);
    LODWORD(v39) = v49;
  }
  unint64_t v40 = (char *)v48 + 16 * v39;
  *unint64_t v40 = "initial_value";
  v40[1] = 13;
  LODWORD(v49) = v49 + 1;
  mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  unint64_t v41 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v41);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v41 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v44, v48, v49);
  if (v48 != v50) {
    free(v48);
  }
}

uint64_t mlir::memref::detail::MemorySpaceCastOpGenericAdaptorBase::MemorySpaceCastOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.memory_space_cast", 24, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::MemorySpaceCastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::memref::detail::PrefetchOpGenericAdaptorBase::PrefetchOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v5;
  *(void *)(a1 + 40) = *(void *)(v5 + 16);
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v11;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.prefetch", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::PrefetchOp::getODSOperands(mlir::memref::PrefetchOp *this, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 8)
    {
      int32x4_t v4 = (int32x4_t)xmmword_211EE3A90;
      unsigned int v3 = a2 & 0xFFFFFFF8;
      int32x4_t v5 = 0uLL;
      v6.i64[0] = 0x300000003;
      v6.i64[1] = 0x300000003;
      v7.i64[0] = 0x800000008;
      v7.i64[1] = 0x800000008;
      unsigned int v8 = a2 & 0xFFFFFFF8;
      int32x4_t v9 = 0uLL;
      do
      {
        int32x4_t v5 = vsubq_s32(v5, vtstq_s32(v4, v4));
        int32x4_t v9 = vsubq_s32(v9, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v4, v6)));
        int32x4_t v4 = vaddq_s32(v4, v7);
        v8 -= 8;
      }
      while (v8);
      int v2 = vaddvq_s32(vaddq_s32(v9, v5));
      if (v3 == a2) {
        goto LABEL_11;
      }
    }
    else
    {
      int v2 = 0;
      unsigned int v3 = 0;
    }
    do
    {
      if (v3) {
        ++v2;
      }
      ++v3;
    }
    while (a2 != v3);
  }
  else
  {
    int v2 = 0;
  }
LABEL_11:
  uint64_t v10 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0)
  {
    int v11 = *(_DWORD *)(v10 + 68);
    uint64_t v12 = *(void *)(v10 + 72);
  }
  else
  {
    int v11 = 0;
    uint64_t v12 = 0;
  }
  return v12 + 32 * (a2 + (v11 - 2) * v2);
}

uint64_t mlir::memref::PrefetchOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v102 = v6;
  if (!v6)
  {
    a3(v106, a4);
    if (v106[0])
    {
      int v103 = 3;
      uint64_t v104 = "expected DictionaryAttr to set properties";
      uint64_t v105 = 41;
      long long v14 = &v103;
      uint64_t v15 = (char *)v107;
      if (v108 >= v109)
      {
        unint64_t v85 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          int64_t v93 = (char *)&v103 - (unsigned char *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v85, 24);
          uint64_t v15 = (char *)v107;
          long long v14 = (int *)((char *)v107 + v93);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v85, 24);
          long long v14 = &v103;
          uint64_t v15 = (char *)v107;
        }
      }
      uint64_t v16 = &v15[24 * v108];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v108;
      if (v106[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
      }
    }
    if (!v115) {
      return 0;
    }
    unint64_t v18 = __p;
    if (__p)
    {
      unint64_t v19 = v114;
      uint64_t v20 = __p;
      if (v114 != __p)
      {
        do
          unint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      long long v114 = v18;
      operator delete(v20);
    }
    int v21 = v111;
    if (!v111) {
      goto LABEL_114;
    }
    uint64_t v22 = v112;
    uint64_t v23 = v111;
    if (v112 == v111)
    {
LABEL_113:
      uint64_t v112 = v21;
      operator delete(v23);
LABEL_114:
      if (v107 != v110) {
        free(v107);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_112:
    uint64_t v23 = v111;
    goto LABEL_113;
  }
  unsigned int v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v102, "isDataCache", 0xBuLL);
  if (!v8)
  {
    a3(v106, a4);
    if (v106[0])
    {
      int v103 = 3;
      uint64_t v104 = "expected key entry for isDataCache in DictionaryAttr to set Properties.";
      uint64_t v105 = 71;
      unint64_t v26 = &v103;
      unint64_t v27 = (char *)v107;
      if (v108 >= v109)
      {
        unint64_t v86 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          int64_t v94 = (char *)&v103 - (unsigned char *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v86, 24);
          unint64_t v27 = (char *)v107;
          unint64_t v26 = (int *)((char *)v107 + v94);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v86, 24);
          unint64_t v26 = &v103;
          unint64_t v27 = (char *)v107;
        }
      }
      uint64_t v28 = &v27[24 * v108];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v108;
      if (v106[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
      }
    }
    if (!v115) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      unint64_t v31 = v114;
      __int16 v32 = __p;
      if (v114 != __p)
      {
        do
          unint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        __int16 v32 = __p;
      }
      long long v114 = v30;
      operator delete(v32);
    }
    int v21 = v111;
    if (!v111) {
      goto LABEL_114;
    }
    uint64_t v33 = v112;
    uint64_t v23 = v111;
    if (v112 == v111) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_112;
  }
  uint64_t v9 = (uint64_t)v8;
  if (!mlir::BoolAttr::classof(v8))
  {
    a3(v106, a4);
    if (v106[0])
    {
      int v103 = 3;
      uint64_t v105 = 56;
      uint64_t v36 = &v103;
      uint64_t v37 = (char *)v107;
      if (v108 >= v109)
      {
        unint64_t v87 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          int64_t v95 = (char *)&v103 - (unsigned char *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v87, 24);
          uint64_t v37 = (char *)v107;
          uint64_t v36 = (int *)((char *)v107 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v87, 24);
          uint64_t v36 = &v103;
          uint64_t v37 = (char *)v107;
        }
      }
      uint64_t v38 = &v37[24 * v108];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)uint64_t v38 = v39;
      ++v108;
      if (v106[0])
      {
        unint64_t v40 = &v103;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v103, v9);
        unint64_t v41 = (char *)v107;
        if (v108 >= v109)
        {
          unint64_t v88 = v108 + 1;
          if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
          {
            int64_t v96 = (char *)&v103 - (unsigned char *)v107;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v88, 24);
            unint64_t v41 = (char *)v107;
            unint64_t v40 = (int *)((char *)v107 + v96);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v88, 24);
            unint64_t v40 = &v103;
            unint64_t v41 = (char *)v107;
          }
        }
        uint64_t v42 = &v41[24 * v108];
        long long v43 = *(_OWORD *)v40;
        *((void *)v42 + 2) = *((void *)v40 + 2);
        *(_OWORD *)uint64_t v42 = v43;
        ++v108;
        if (v106[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
        }
      }
    }
    if (!v115) {
      return 0;
    }
    uint64_t v44 = __p;
    if (__p)
    {
      unint64_t v45 = v114;
      unint64_t v46 = __p;
      if (v114 != __p)
      {
        do
          unint64_t v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        unint64_t v46 = __p;
      }
      long long v114 = v44;
      operator delete(v46);
    }
    int v21 = v111;
    if (!v111) {
      goto LABEL_114;
    }
    int64_t v47 = v112;
    uint64_t v23 = v111;
    if (v112 == v111) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v49 = *--v47;
      uint64_t v48 = v49;
      *int64_t v47 = 0;
      if (v49) {
        MEMORY[0x21667D390](v48, 0x1000C8077774924);
      }
    }
    while (v47 != v21);
    goto LABEL_112;
  }
  *a1 = v9;
  uint64_t v10 = (void *)mlir::DictionaryAttr::get((uint64_t)&v102, "isWrite", 7uLL);
  if (!v10)
  {
    a3(v106, a4);
    if (v106[0])
    {
      int v103 = 3;
      uint64_t v104 = "expected key entry for isWrite in DictionaryAttr to set Properties.";
      uint64_t v105 = 67;
      uint64_t v50 = &v103;
      uint64_t v51 = (char *)v107;
      if (v108 >= v109)
      {
        unint64_t v89 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          int64_t v97 = (char *)&v103 - (unsigned char *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v89, 24);
          uint64_t v51 = (char *)v107;
          uint64_t v50 = (int *)((char *)v107 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v89, 24);
          uint64_t v50 = &v103;
          uint64_t v51 = (char *)v107;
        }
      }
      unint64_t v52 = &v51[24 * v108];
      long long v53 = *(_OWORD *)v50;
      *((void *)v52 + 2) = *((void *)v50 + 2);
      *(_OWORD *)unint64_t v52 = v53;
      ++v108;
      if (v106[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
      }
    }
    if (!v115) {
      return 0;
    }
    uint64_t v54 = __p;
    if (__p)
    {
      uint64_t v55 = v114;
      int v56 = __p;
      if (v114 != __p)
      {
        do
          uint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
        while (v55 != v54);
        int v56 = __p;
      }
      long long v114 = v54;
      operator delete(v56);
    }
    int v21 = v111;
    if (!v111) {
      goto LABEL_114;
    }
    int64_t v57 = v112;
    uint64_t v23 = v111;
    if (v112 == v111) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v59 = *--v57;
      uint64_t v58 = v59;
      *int64_t v57 = 0;
      if (v59) {
        MEMORY[0x21667D390](v58, 0x1000C8077774924);
      }
    }
    while (v57 != v21);
    goto LABEL_112;
  }
  uint64_t v11 = (uint64_t)v10;
  if (!mlir::BoolAttr::classof(v10))
  {
    a3(v106, a4);
    if (v106[0])
    {
      int v103 = 3;
      uint64_t v105 = 52;
      uint64_t v60 = &v103;
      unsigned int v61 = (char *)v107;
      if (v108 >= v109)
      {
        unint64_t v90 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          int64_t v98 = (char *)&v103 - (unsigned char *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v90, 24);
          unsigned int v61 = (char *)v107;
          uint64_t v60 = (int *)((char *)v107 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v90, 24);
          uint64_t v60 = &v103;
          unsigned int v61 = (char *)v107;
        }
      }
      unsigned int v62 = &v61[24 * v108];
      long long v63 = *(_OWORD *)v60;
      *((void *)v62 + 2) = *((void *)v60 + 2);
      *(_OWORD *)unsigned int v62 = v63;
      ++v108;
      if (v106[0])
      {
        uint64_t v64 = &v103;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v103, v11);
        uint64_t v65 = (char *)v107;
        if (v108 >= v109)
        {
          unint64_t v91 = v108 + 1;
          if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
          {
            int64_t v99 = (char *)&v103 - (unsigned char *)v107;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v91, 24);
            uint64_t v65 = (char *)v107;
            uint64_t v64 = (int *)((char *)v107 + v99);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v91, 24);
            uint64_t v64 = &v103;
            uint64_t v65 = (char *)v107;
          }
        }
        uint64_t v66 = &v65[24 * v108];
        long long v67 = *(_OWORD *)v64;
        *((void *)v66 + 2) = *((void *)v64 + 2);
        *(_OWORD *)uint64_t v66 = v67;
        ++v108;
        if (v106[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
        }
      }
    }
    if (!v115) {
      return 0;
    }
    char v68 = __p;
    if (__p)
    {
      uint64_t v69 = v114;
      unint64_t v70 = __p;
      if (v114 != __p)
      {
        do
          uint64_t v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
        while (v69 != v68);
        unint64_t v70 = __p;
      }
      long long v114 = v68;
      operator delete(v70);
    }
    int v21 = v111;
    if (!v111) {
      goto LABEL_114;
    }
    unint64_t v71 = v112;
    uint64_t v23 = v111;
    if (v112 == v111) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v73 = *--v71;
      uint64_t v72 = v73;
      void *v71 = 0;
      if (v73) {
        MEMORY[0x21667D390](v72, 0x1000C8077774924);
      }
    }
    while (v71 != v21);
    goto LABEL_112;
  }
  a1[1] = v11;
  uint64_t v12 = mlir::DictionaryAttr::get((uint64_t)&v102, "localityHint", 0xCuLL);
  uint64_t v101 = v12;
  if (!v12)
  {
    a3(v106, a4);
    if (v106[0])
    {
      int v103 = 3;
      uint64_t v104 = "expected key entry for localityHint in DictionaryAttr to set Properties.";
      uint64_t v105 = 72;
      unint64_t v74 = &v103;
      int64_t v75 = (char *)v107;
      if (v108 >= v109)
      {
        unint64_t v92 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          int64_t v100 = (char *)&v103 - (unsigned char *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v92, 24);
          int64_t v75 = (char *)v107;
          unint64_t v74 = (int *)((char *)v107 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v92, 24);
          unint64_t v74 = &v103;
          int64_t v75 = (char *)v107;
        }
      }
      int64_t v76 = &v75[24 * v108];
      long long v77 = *(_OWORD *)v74;
      *((void *)v76 + 2) = *((void *)v74 + 2);
      *(_OWORD *)int64_t v76 = v77;
      ++v108;
      if (v106[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
      }
    }
    if (!v115) {
      return 0;
    }
    int64_t v78 = __p;
    if (__p)
    {
      int64_t v79 = v114;
      int64_t v80 = __p;
      if (v114 != __p)
      {
        do
          int64_t v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
        while (v79 != v78);
        int64_t v80 = __p;
      }
      long long v114 = v78;
      operator delete(v80);
    }
    int v21 = v111;
    if (!v111) {
      goto LABEL_114;
    }
    uint64_t v81 = v112;
    uint64_t v23 = v111;
    if (v112 == v111) {
      goto LABEL_113;
    }
    do
    {
      uint64_t v83 = *--v81;
      uint64_t v82 = v83;
      *uint64_t v81 = 0;
      if (v83) {
        MEMORY[0x21667D390](v82, 0x1000C8077774924);
      }
    }
    while (v81 != v21);
    goto LABEL_112;
  }
  if (*(_UNKNOWN **)(*(void *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a1[2] = v12;
    return 1;
  }
  a3(v106, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v13, &v101);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v106);
  return 0;
}

uint64_t mlir::memref::PrefetchOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v27[6] = *MEMORY[0x263EF8340];
  uint64_t v24 = a1;
  uint64_t v25 = v27;
  uint64_t v26 = 0x300000000;
  if (!*a2)
  {
    unsigned int v8 = 0;
    uint64_t v9 = a2[1];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v24, (uint64_t)"isDataCache", 11, *a2);
  uint64_t v5 = v4;
  unsigned int v6 = v26;
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
    unsigned int v6 = v26;
  }
  int32x4_t v7 = (uint64_t *)((char *)v25 + 16 * v6);
  uint64_t *v7 = NamedAttr;
  v7[1] = v5;
  unsigned int v8 = v26 + 1;
  LODWORD(v26) = v26 + 1;
  uint64_t v9 = a2[1];
  if (v9)
  {
LABEL_7:
    uint64_t v10 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"isWrite", 7, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v13 = v26;
    }
    long long v14 = (uint64_t *)((char *)v25 + 16 * v13);
    *long long v14 = v10;
    v14[1] = v12;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
LABEL_10:
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"localityHint", 12, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      unsigned int v19 = v26;
    }
    uint64_t v20 = (uint64_t *)((char *)v25 + 16 * v19);
    *uint64_t v20 = v16;
    v20[1] = v18;
    unsigned int v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
  int v21 = v25;
  if (!v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v25 == v27) {
      return DictionaryAttr;
    }
    goto LABEL_16;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v24, (uint64_t *)v25, v8);
  int v21 = v25;
  if (v25 != v27) {
LABEL_16:
  }
    free(v21);
  return DictionaryAttr;
}

unint64_t mlir::memref::PrefetchOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  int v2 = &unk_267770000;
  {
    unint64_t v20 = v1;
    uint64_t v22 = a1;
    int v2 = &unk_267770000;
    int v13 = v12;
    unint64_t v1 = v20;
    a1 = v22;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      unint64_t v1 = v20;
      a1 = v22;
      int v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v1) ^ HIDWORD(v1));
  unint64_t v27 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v21 = v5;
    uint64_t v23 = a1;
    int v2 = &unk_267770000;
    int v16 = v15;
    unint64_t v5 = v21;
    a1 = v23;
    if (v16)
    {
      unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unint64_t v5 = v21;
      a1 = v23;
      int v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v5) ^ HIDWORD(v5));
  unint64_t v26 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v24 = v8;
    unint64_t v8 = v24;
    int v2 = &unk_267770000;
    if (v18)
    {
      unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v19 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v19;
      unint64_t v8 = v24;
      int v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v8) ^ HIDWORD(v8));
  unint64_t v25 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v27, (uint64_t *)&v26, (uint64_t *)&v25);
}

uint64_t mlir::memref::PrefetchOp::getInherentAttr(int a1, void *a2, char *__s1, size_t __n)
{
  if (__n == 7)
  {
    if (!memcmp(__s1, "isWrite", 7uLL)) {
      return a2[1];
    }
    return 0;
  }
  if (__n == 12)
  {
    if (!memcmp(__s1, "localityHint", 0xCuLL)) {
      return a2[2];
    }
    return 0;
  }
  if (__n != 11) {
    return 0;
  }
  if (*(void *)__s1 != 0x6143617461447369 || *(void *)(__s1 + 3) != 0x6568636143617461) {
    return 0;
  }
  return *a2;
}

uint64_t mlir::memref::PrefetchOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, void *a4)
{
  unint64_t v5 = (void *)result;
  if (a3 == 7)
  {
    uint64_t result = memcmp(__s1, "isWrite", 7uLL);
    if (!result)
    {
      if (a4)
      {
        uint64_t result = mlir::BoolAttr::classof(a4);
        if (result) {
          unint64_t v7 = a4;
        }
        else {
          unint64_t v7 = 0;
        }
        v5[1] = v7;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (a3 == 12)
  {
    uint64_t result = memcmp(__s1, "localityHint", 0xCuLL);
    if (!result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
          unint64_t v8 = a4;
        }
        else {
          unint64_t v8 = 0;
        }
        v5[2] = v8;
      }
      else
      {
        v5[2] = 0;
      }
    }
  }
  else if (a3 == 11 && *(void *)__s1 == 0x6143617461447369 && *(void *)(__s1 + 3) == 0x6568636143617461)
  {
    if (a4)
    {
      uint64_t result = mlir::BoolAttr::classof(a4);
      if (result) {
        unint64_t v9 = a4;
      }
      else {
        unint64_t v9 = 0;
      }
      void *v5 = v9;
    }
    else
    {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

void mlir::memref::PrefetchOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"isDataCache", 11, *a2);
  }
  uint64_t v5 = a2[1];
  if (v5) {
    mlir::NamedAttrList::append(a3, (uint64_t)"isWrite", 7, v5);
  }
  uint64_t v6 = a2[2];
  if (v6)
  {
    mlir::NamedAttrList::append(a3, (uint64_t)"localityHint", 12, v6);
  }
}

BOOL mlir::memref::PrefetchOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  unint64_t v8 = (void *)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v8, (void **)"isDataCache", (const char *)0xB, a3, a4))
  {
    unint64_t v9 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v9, (void **)"isWrite", (const char *)7, a3, a4))
    {
      unint64_t v10 = (void **)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v10, (void **)"localityHint", (const char *)0xC, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(void **a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v34 = a1;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v34);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 32))
    {
      uint64_t v33 = a1;
      if ((mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v33) & 0x8000000000000000) == 0)
      {
        __int16 v32 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v32) <= 3) {
          return 1;
        }
      }
    }
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(v34) = 3;
    uint64_t v35 = "attribute '";
    uint64_t v36 = 11;
    unint64_t v10 = &v34;
    uint64_t v11 = (char *)v40;
    if (v41 >= v42)
    {
      unint64_t v28 = v41 + 1;
      if (v40 <= &v34 && (char *)v40 + 24 * v41 > (char *)&v34)
      {
        int64_t v30 = (char *)&v34 - (unsigned char *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v28, 24);
        uint64_t v11 = (char *)v40;
        unint64_t v10 = (void ***)((char *)v40 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v28, 24);
        unint64_t v10 = &v34;
        uint64_t v11 = (char *)v40;
      }
    }
    int v12 = &v11[24 * v41];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = v10[2];
    *(_OWORD *)int v12 = v13;
    ++v41;
    if (Value)
    {
      __int16 v37 = 261;
      uint64_t v34 = a2;
      uint64_t v35 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v39, &v34);
      if (Value)
      {
        LODWORD(v34) = 3;
        uint64_t v35 = "' failed to satisfy constraint: 32-bit signless integer attribute whose minimum value is 0 whose maximum value is 3";
        uint64_t v36 = 115;
        unint64_t v14 = &v34;
        int v15 = (char *)v40;
        if (v41 >= v42)
        {
          unint64_t v29 = v41 + 1;
          if (v40 <= &v34 && (char *)v40 + 24 * v41 > (char *)&v34)
          {
            int64_t v31 = (char *)&v34 - (unsigned char *)v40;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
            int v15 = (char *)v40;
            unint64_t v14 = (void ***)((char *)v40 + v31);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
            unint64_t v14 = &v34;
            int v15 = (char *)v40;
          }
        }
        int v16 = &v15[24 * v41];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = v14[2];
        *(_OWORD *)int v16 = v17;
        ++v41;
      }
    }
  }
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  }
  if (v48)
  {
    unint64_t v19 = __p;
    if (__p)
    {
      unint64_t v20 = v47;
      unint64_t v21 = __p;
      if (v47 != __p)
      {
        do
          unint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        unint64_t v21 = __p;
      }
      int64_t v47 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v44;
    if (v44)
    {
      uint64_t v23 = v45;
      unint64_t v24 = v44;
      if (v45 != v44)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        unint64_t v24 = v44;
      }
      unint64_t v45 = v22;
      operator delete(v24);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
  return v18;
}

BOOL mlir::memref::PrefetchOp::readProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3 + 2) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  unint64_t v4 = v39;
  if (mlir::BoolAttr::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    unint64_t v8 = &v40;
    unint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v9 = (char *)v46;
        unint64_t v8 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v8 = &v40;
        unint64_t v9 = (char *)v46;
      }
    }
    unint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)unint64_t v10 = v11;
    ++v47;
  }
  unint64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::BoolAttr]";
  unint64_t v41 = 64;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    unint64_t v40 = (void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      int v16 = &v40;
      long long v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          long long v17 = (char *)v46;
          int v16 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          int v16 = &v40;
          long long v17 = (char *)v46;
        }
      }
      uint64_t v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      ++v47;
      if (v44)
      {
        unint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        unint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v21 = (char *)v46;
            unint64_t v20 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v20 = &v40;
            unint64_t v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v24 = __p;
    if (__p)
    {
      uint64_t v25 = v53;
      uint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      long long v53 = v24;
      operator delete(v26);
    }
    unint64_t v27 = v50;
    if (v50)
    {
      unint64_t v28 = v51;
      unint64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        unint64_t v29 = v50;
      }
      uint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::memref::PrefetchOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v3 = (void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v3 = 0;
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *v3);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, v3[1]);
  uint64_t v4 = v3[2];
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16);

  return v5(a2, v4);
}

uint64_t mlir::memref::PrefetchOp::verifyInvariantsImpl(mlir::memref::PrefetchOp *this)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void **)v3;
  if (!*(void *)v3)
  {
    v34[0] = (void **)"requires attribute 'isDataCache'";
    __int16 v35 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v34, (uint64_t)v36);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
    if (v36[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
    }
    if (!v43) {
      return v7;
    }
    unint64_t v13 = __p;
    if (__p)
    {
      uint64_t v14 = v42;
      unint64_t v15 = __p;
      if (v42 != __p)
      {
        do
          uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        unint64_t v15 = __p;
      }
      uint64_t v42 = v13;
      operator delete(v15);
    }
    int v16 = v39;
    if (v39)
    {
      long long v17 = v40;
      uint64_t v18 = v39;
      if (v40 == v39) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v20 = *--v17;
        uint64_t v19 = v20;
        *long long v17 = 0;
        if (v20) {
          MEMORY[0x21667D390](v19, 0x1000C8077774924);
        }
      }
      while (v17 != v16);
LABEL_59:
      uint64_t v18 = v39;
LABEL_60:
      unint64_t v40 = v16;
      operator delete(v18);
    }
LABEL_61:
    if (v37 != &v38) {
      free(v37);
    }
    return v7;
  }
  uint64_t v5 = *(void **)(v3 + 8);
  if (!v5)
  {
    v34[0] = (void **)"requires attribute 'isWrite'";
    __int16 v35 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v34, (uint64_t)v36);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
    if (v36[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
    }
    if (!v43) {
      return v7;
    }
    unint64_t v21 = __p;
    if (__p)
    {
      uint64_t v22 = v42;
      long long v23 = __p;
      if (v42 != __p)
      {
        do
          uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        long long v23 = __p;
      }
      uint64_t v42 = v21;
      operator delete(v23);
    }
    int v16 = v39;
    if (v39)
    {
      unint64_t v24 = v40;
      uint64_t v18 = v39;
      if (v40 == v39) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v26 = *--v24;
        uint64_t v25 = v26;
        *unint64_t v24 = 0;
        if (v26) {
          MEMORY[0x21667D390](v25, 0x1000C8077774924);
        }
      }
      while (v24 != v16);
      goto LABEL_59;
    }
    goto LABEL_61;
  }
  uint64_t v6 = *(void ***)(v3 + 16);
  if (!v6)
  {
    v34[0] = (void **)"requires attribute 'localityHint'";
    __int16 v35 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v34, (uint64_t)v36);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
    if (v36[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
    }
    if (!v43) {
      return v7;
    }
    unint64_t v27 = __p;
    if (__p)
    {
      unint64_t v28 = v42;
      unint64_t v29 = __p;
      if (v42 != __p)
      {
        do
          unint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        unint64_t v29 = __p;
      }
      uint64_t v42 = v27;
      operator delete(v29);
    }
    int v16 = v39;
    if (v39)
    {
      uint64_t v30 = v40;
      uint64_t v18 = v39;
      if (v40 == v39) {
        goto LABEL_60;
      }
      do
      {
        uint64_t v32 = *--v30;
        uint64_t v31 = v32;
        *uint64_t v30 = 0;
        if (v32) {
          MEMORY[0x21667D390](v31, 0x1000C8077774924);
        }
      }
      while (v30 != v16);
      goto LABEL_59;
    }
    goto LABEL_61;
  }
  v36[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (void **)"isWrite", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v36))return 0; {
  v36[0] = *(void *)this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v6, (void **)"localityHint", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v36))return 0; {
  v36[0] = *(void *)this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v4, (void **)"isDataCache", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v36)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))
  {
    return 0;
  }
  uint64_t v7 = 1;
  uint64_t ODSOperands = mlir::memref::PrefetchOp::getODSOperands(this, 1u);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = 0;
    for (uint64_t i = ODSOperands + 24;
          mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, (int)v11 + 1);
          i += 32)
    {
      if (v10 == ++v11) {
        return v7;
      }
    }
    return 0;
  }
  return v7;
}

uint64_t mlir::memref::detail::RankOpGenericAdaptorBase::RankOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(this);
  unint64_t v5 = *((unsigned int *)this + 11);
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.rank", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::RankOp::verifyInvariantsImpl(mlir::memref::RankOp *this)
{
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::memref::RankOp::parse(uint64_t a1, uint64_t a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  memset(v14, 0, 24);
  v12[0] = (uint64_t)v14;
  v12[1] = 1;
  uint64_t v13 = 0;
  v11[0] = &v13;
  v11[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v14, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  uint64_t v10 = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, &v10)) {
    return 0;
  }
  uint64_t v13 = v10;
  unint64_t v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v5, v6);
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = IndexType;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v12, v11, v4, a2 + 16) != 0;
}

uint64_t mlir::memref::ReallocOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      uint64_t v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      uint64_t v26 = &v44;
      unint64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          unint64_t v27 = (char *)v48;
          uint64_t v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v26 = &v44;
          unint64_t v27 = (char *)v48;
        }
      }
      unint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)unint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    uint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v55;
      uint64_t v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      uint64_t v55 = v30;
      operator delete(v32);
    }
    unint64_t v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    unint64_t v33 = v53;
    long long v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "alignment", 9uLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 54;
    uint64_t v10 = &v44;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v11 = (char *)v48;
        uint64_t v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v10 = &v44;
        uint64_t v11 = (char *)v48;
      }
    }
    unint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)unint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      uint64_t v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      unint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          unint64_t v15 = (char *)v48;
          uint64_t v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v14 = &v44;
          unint64_t v15 = (char *)v48;
        }
      }
      int v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)int v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  uint64_t v18 = __p;
  if (__p)
  {
    uint64_t v19 = v55;
    uint64_t v20 = __p;
    if (v55 != __p)
    {
      do
        uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      uint64_t v20 = __p;
    }
    uint64_t v55 = v18;
    operator delete(v20);
  }
  unint64_t v21 = v52;
  if (v52)
  {
    uint64_t v22 = v53;
    long long v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *uint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_41:
    long long v23 = v52;
LABEL_42:
    long long v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

BOOL mlir::memref::ReallocOp::readProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::memref::ReallocOp::verifyInvariantsImpl(mlir::memref::ReallocOp *this)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void ***)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  v50[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v3, (void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v50)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps12(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 0))
  {
    return 0;
  }
  uint64_t v4 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
  {
    uint64_t v6 = -1;
    goto LABEL_5;
  }
  uint64_t v5 = *(unsigned int *)(v4 + 68);
  uint64_t v6 = v5 - 1;
  if ((unint64_t)(v5 - 1) <= 1)
  {
    if (v5 == 1)
    {
LABEL_31:
      int v32 = *(_DWORD *)(v4 + 36);
      uint64_t v33 = v4 - 16;
      if (v32) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, 0);
      return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps12(*(void *)this, (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"result", 6, 0) != 0;
    }
    uint64_t v30 = *(void *)(v4 + 72) + 56;
    uint64_t v31 = 1;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*(void *)this, *(void *)(*(void *)v30 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v31))
    {
      ++v31;
      v30 += 32;
      if (v5 == v31)
      {
        uint64_t v4 = *(void *)this;
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_5:
  uint64_t v45 = (void **)"operand group starting at #";
  __int16 v46 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v45, (uint64_t)v50);
  if (v50[0])
  {
    int v47 = 5;
    uint64_t v48 = 1;
    uint64_t v7 = &v47;
    uint64_t v8 = (char *)v51;
    if (v52 >= v53)
    {
      unint64_t v37 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        int64_t v42 = (char *)&v47 - (unsigned char *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        uint64_t v8 = (char *)v51;
        uint64_t v7 = (int *)((char *)v51 + v42);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        uint64_t v7 = &v47;
        uint64_t v8 = (char *)v51;
      }
    }
    uint64_t v9 = &v8[24 * v52];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    uint64_t v11 = ++v52;
    if (v50[0])
    {
      int v47 = 3;
      uint64_t v48 = (uint64_t)" requires 0 or 1 element, but found ";
      uint64_t v49 = 36;
      unint64_t v12 = &v47;
      long long v13 = (char *)v51;
      if (v11 >= v53)
      {
        unint64_t v38 = v11 + 1;
        BOOL v39 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v39)
        {
          int64_t v43 = (char *)&v47 - (unsigned char *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          long long v13 = (char *)v51;
          unint64_t v12 = (int *)((char *)v51 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          unint64_t v12 = &v47;
          long long v13 = (char *)v51;
        }
      }
      uint64_t v14 = &v13[24 * v52];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)uint64_t v14 = v15;
      uint64_t v16 = ++v52;
      if (v50[0])
      {
        int v47 = 5;
        uint64_t v48 = v6;
        long long v17 = &v47;
        uint64_t v18 = (char *)v51;
        if (v16 >= v53)
        {
          unint64_t v40 = v16 + 1;
          BOOL v41 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v41)
          {
            int64_t v44 = (char *)&v47 - (unsigned char *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            uint64_t v18 = (char *)v51;
            long long v17 = (int *)((char *)v51 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            long long v17 = &v47;
            uint64_t v18 = (char *)v51;
          }
        }
        uint64_t v19 = &v18[24 * v52];
        long long v20 = *(_OWORD *)v17;
        *((void *)v19 + 2) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v19 = v20;
        ++v52;
      }
    }
  }
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  }
  if (v59)
  {
    uint64_t v22 = __p;
    if (__p)
    {
      long long v23 = v58;
      uint64_t v24 = __p;
      if (v58 != __p)
      {
        do
          long long v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      uint64_t v58 = v22;
      operator delete(v24);
    }
    uint64_t v25 = v55;
    if (v55)
    {
      uint64_t v26 = v56;
      unint64_t v27 = v55;
      if (v56 != v55)
      {
        do
        {
          uint64_t v29 = *--v26;
          uint64_t v28 = v29;
          void *v26 = 0;
          if (v29) {
            MEMORY[0x21667D390](v28, 0x1000C8077774924);
          }
        }
        while (v26 != v25);
        unint64_t v27 = v55;
      }
      char v56 = v25;
      operator delete(v27);
    }
    if (v51 != v54) {
      free(v51);
    }
  }
  return v21;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps12(uint64_t a1, void **a2, void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  long long v10 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    goto LABEL_5;
  }
  v58[0] = a2;
  v58[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v10 + 8);
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v58);
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
  unsigned int v52 = a2;
  uint64_t v53 = v11;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52)) {
    goto LABEL_5;
  }
  uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
  uint64_t v55 = a2;
  uint64_t v56 = v12;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v55);
  if (v13 == 1) {
    return 1;
  }
LABEL_5:
  __int16 v54 = 261;
  unsigned int v52 = a3;
  uint64_t v53 = a4;
  mlir::Operation::emitOpError(a1, &v52, (uint64_t)v58);
  if (v58[0])
  {
    LODWORD(v55) = 3;
    uint64_t v56 = (uint64_t)" #";
    uint64_t v57 = 2;
    long long v15 = &v55;
    uint64_t v16 = (char *)v59;
    if (v60 >= v61)
    {
      unint64_t v42 = v60 + 1;
      if (v59 <= &v55 && (char *)v59 + 24 * v60 > (char *)&v55)
      {
        int64_t v48 = (char *)&v55 - (unsigned char *)v59;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v42, 24);
        uint64_t v16 = (char *)v59;
        long long v15 = (void ***)((char *)v59 + v48);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v42, 24);
        long long v15 = &v55;
        uint64_t v16 = (char *)v59;
      }
    }
    long long v17 = &v16[24 * v60];
    long long v18 = *(_OWORD *)v15;
    *((void *)v17 + 2) = v15[2];
    *(_OWORD *)long long v17 = v18;
    uint64_t v19 = ++v60;
    if (v58[0])
    {
      LODWORD(v55) = 5;
      uint64_t v56 = a5;
      long long v20 = &v55;
      uint64_t v21 = (char *)v59;
      if (v19 >= v61)
      {
        unint64_t v43 = v19 + 1;
        BOOL v44 = (char *)v59 + 24 * v19 > (char *)&v55;
        if (v59 <= &v55 && v44)
        {
          int64_t v49 = (char *)&v55 - (unsigned char *)v59;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v43, 24);
          uint64_t v21 = (char *)v59;
          long long v20 = (void ***)((char *)v59 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v43, 24);
          long long v20 = &v55;
          uint64_t v21 = (char *)v59;
        }
      }
      uint64_t v22 = &v21[24 * v60];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)uint64_t v22 = v23;
      uint64_t v24 = ++v60;
      if (v58[0])
      {
        LODWORD(v55) = 3;
        uint64_t v56 = (uint64_t)" must be 1D memref of any type values, but got ";
        uint64_t v57 = 47;
        uint64_t v25 = &v55;
        uint64_t v26 = (char *)v59;
        if (v24 >= v61)
        {
          unint64_t v45 = v24 + 1;
          BOOL v46 = (char *)v59 + 24 * v24 > (char *)&v55;
          if (v59 <= &v55 && v46)
          {
            int64_t v50 = (char *)&v55 - (unsigned char *)v59;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v45, 24);
            uint64_t v26 = (char *)v59;
            uint64_t v25 = (void ***)((char *)v59 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v45, 24);
            uint64_t v25 = &v55;
            uint64_t v26 = (char *)v59;
          }
        }
        unint64_t v27 = &v26[24 * v60];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = v25[2];
        *(_OWORD *)unint64_t v27 = v28;
        ++v60;
        if (v58[0])
        {
          uint64_t v29 = &v55;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v55, (uint64_t)a2);
          uint64_t v30 = (char *)v59;
          if (v60 >= v61)
          {
            unint64_t v47 = v60 + 1;
            if (v59 <= &v55 && (char *)v59 + 24 * v60 > (char *)&v55)
            {
              int64_t v51 = (char *)&v55 - (unsigned char *)v59;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v47, 24);
              uint64_t v30 = (char *)v59;
              uint64_t v29 = (void ***)((char *)v59 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v47, 24);
              uint64_t v29 = &v55;
              uint64_t v30 = (char *)v59;
            }
          }
          uint64_t v31 = &v30[24 * v60];
          long long v32 = *(_OWORD *)v29;
          *((void *)v31 + 2) = v29[2];
          *(_OWORD *)uint64_t v31 = v32;
          ++v60;
        }
      }
    }
  }
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
  if (v58[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
  }
  if (v67)
  {
    uint64_t v33 = __p;
    if (__p)
    {
      uint64_t v34 = v66;
      uint64_t v35 = __p;
      if (v66 != __p)
      {
        do
          uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        uint64_t v35 = __p;
      }
      uint64_t v66 = v33;
      operator delete(v35);
    }
    int64_t v36 = v63;
    if (v63)
    {
      unint64_t v37 = v64;
      unint64_t v38 = v63;
      if (v64 != v63)
      {
        do
        {
          uint64_t v40 = *--v37;
          uint64_t v39 = v40;
          void *v37 = 0;
          if (v40) {
            MEMORY[0x21667D390](v39, 0x1000C8077774924);
          }
        }
        while (v37 != v36);
        unint64_t v38 = v63;
      }
      uint64_t v64 = v36;
      operator delete(v38);
    }
    if (v59 != v62) {
      free(v59);
    }
  }
  return v14;
}

uint64_t mlir::memref::ReallocOp::parse(uint64_t a1, uint64_t a2)
{
  v37[4] = *MEMORY[0x263EF8340];
  memset(v37, 0, 24);
  v25[0] = (uint64_t)v37;
  v25[1] = 1;
  uint64_t v33 = 0;
  uint64_t v34 = v36;
  uint64_t v35 = 0x400000000;
  v24[0] = &v33;
  v24[1] = 1;
  uint64_t __src = &v32;
  uint64_t v31 = 0x100000000;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v37, 1)) {
    goto LABEL_21;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    unsigned __int16 v5 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 680))(a1, &v26, 1);
    if (v5 >= 0x100u)
    {
      if (!(_BYTE)v5) {
        goto LABEL_21;
      }
      uint64_t v6 = &v26;
      uint64_t v7 = (char *)v34;
      if (v35 >= HIDWORD(v35))
      {
        unint64_t v21 = v35 + 1;
        if (v34 <= &v26 && (char *)v34 + 32 * v35 > (char *)&v26)
        {
          int64_t v22 = (char *)&v26 - (unsigned char *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v21, 32);
          uint64_t v7 = (char *)v34;
          uint64_t v6 = (uint64_t *)((char *)v34 + v22);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v21, 32);
          uint64_t v6 = &v26;
          uint64_t v7 = (char *)v34;
        }
      }
      uint64_t v8 = &v7[32 * v35];
      long long v9 = *((_OWORD *)v6 + 1);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v6;
      *((_OWORD *)v8 + 1) = v9;
      LODWORD(v35) = v35 + 1;
    }
    if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)) {
      goto LABEL_21;
    }
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_21;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v26 = a1;
  unint64_t v27 = &v23;
  uint64_t v28 = a2;
  uint64_t v11 = (void **)mlir::NamedAttrList::get(a2 + 112, **(void **)(v10 + 96));
  if (v11)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v11, (void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ReallocOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v26))goto LABEL_21; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    goto LABEL_21;
  }
  uint64_t v26 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v26)) {
    goto LABEL_21;
  }
  uint64_t v33 = v26;
  __int16 v29 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, &v26))goto LABEL_21; {
  if (!mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
  }
    goto LABEL_21;
  uint64_t v12 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v12, v13);
  mlir::OperationState::addTypes(a2, __src, v31);
  uint64_t v15 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v25, v24, v4, a2 + 16))goto LABEL_21; {
  if (v35)
  }
  {
    uint64_t v16 = (char *)v34;
    uint64_t v17 = 32 * v35;
    uint64_t v18 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v16, IndexType, v15))
    {
      v16 += 32;
      v17 -= 32;
      if (!v17) {
        goto LABEL_22;
      }
    }
LABEL_21:
    uint64_t v18 = 0;
LABEL_22:
    uint64_t v19 = __src;
    if (__src != &v32) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  uint64_t v18 = 1;
  uint64_t v19 = __src;
  if (__src != &v32) {
LABEL_23:
  }
    free(v19);
LABEL_24:
  if (v34 != v36) {
    free(v34);
  }
  return v18;
}

void mlir::memref::ReallocOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v34[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  if (*((_DWORD *)*this + 17) == 1 || !*(void *)(*((void *)*this + 9) + 56)) {
    goto LABEL_15;
  }
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "(", 1uLL);
    uint64_t v8 = *this;
    if (*((_DWORD *)*this + 17) == 1) {
      goto LABEL_12;
    }
LABEL_10:
    if (*(void *)(*((void *)v8 + 9) + 56)) {
      (*(void (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 160))(a2);
    }
    goto LABEL_12;
  }
  unsigned char *v7 = 40;
  ++*((void *)v6 + 4);
  uint64_t v8 = *this;
  if (*((_DWORD *)*this + 17) != 1) {
    goto LABEL_10;
  }
LABEL_12:
  long long v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v10 = (unsigned char *)*((void *)v9 + 4);
  if (*((unsigned char **)v9 + 3) == v10)
  {
    llvm::raw_ostream::write(v9, ")", 1uLL);
  }
  else
  {
    *uint64_t v10 = 41;
    ++*((void *)v9 + 4);
  }
LABEL_15:
  uint64_t v32 = v34;
  uint64_t v33 = 0x200000000;
  uint64_t v11 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v29[0] = mlir::Operation::getAttrDictionary(v11);
    uint64_t v12 = (mlir::ArrayAttr *)v29;
  }
  else
  {
    uint64_t v12 = (mlir::Operation *)((char *)v11 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v12);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v14, v32, v33);
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if ((unint64_t)v16 >= *((void *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 32);
  }
  else
  {
    *((void *)v15 + 4) = v16 + 1;
    *uint64_t v16 = 32;
  }
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if (*((unsigned char **)v17 + 3) == v18)
  {
    llvm::raw_ostream::write(v17, ":", 1uLL);
  }
  else
  {
    *uint64_t v18 = 58;
    ++*((void *)v17 + 4);
  }
  uint64_t v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v20 = (unsigned char *)*((void *)v19 + 4);
  if ((unint64_t)v20 >= *((void *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
  }
  else
  {
    *((void *)v19 + 4) = v20 + 1;
    *long long v20 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v22 = (unsigned char *)*((void *)v21 + 4);
  if ((unint64_t)v22 >= *((void *)v21 + 3))
  {
    llvm::raw_ostream::write(v21, 32);
  }
  else
  {
    *((void *)v21 + 4) = v22 + 1;
    *int64_t v22 = 32;
  }
  uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v24 = (_WORD *)*((void *)v23 + 4);
  if (*((void *)v23 + 3) - (void)v24 > 1uLL)
  {
    *uint64_t v24 = 28532;
    *((void *)v23 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v23, "to", 2uLL);
  }
  uint64_t v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
  if ((unint64_t)v26 >= *((void *)v25 + 3))
  {
    llvm::raw_ostream::write(v25, 32);
  }
  else
  {
    *((void *)v25 + 4) = v26 + 1;
    unsigned char *v26 = 32;
  }
  uint64_t v27 = *((unsigned int *)*this + 9);
  uint64_t v28 = (char *)*this - 16;
  if (!v27) {
    uint64_t v28 = 0;
  }
  uint64_t v30 = v28;
  uint64_t v31 = v27;
  mlir::OperandRange::getTypes((uint64_t *)&v30, v29);
  uint64_t v30 = ", ";
  uint64_t v31 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v29[0], v29[1], v29[2], v29[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)&v30);
  if (v32 != v34) {
    free(v32);
  }
}

void mlir::memref::ReallocOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t v6 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Free,mlir::MemoryEffects::Effect>::get();
  {
    unint64_t v47 = v6;
    uint64_t v6 = v47;
    if (v28)
    {
      {
        int64_t v48 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v49 = 84;
        unint64_t v33 = llvm::StringRef::find((uint64_t *)&v48, "DesiredTypeName = ", 0x12uLL, 0);
        if (v49 >= v33) {
          unint64_t v34 = v33;
        }
        else {
          unint64_t v34 = v49;
        }
        uint64_t v35 = &v48[v34];
        unint64_t v36 = v49 - v34;
        if (v49 - v34 >= 0x12) {
          uint64_t v37 = 18;
        }
        else {
          uint64_t v37 = v49 - v34;
        }
        unint64_t v38 = v36 - v37;
        if (v38 >= v38 - 1) {
          uint64_t v39 = v38 - 1;
        }
        else {
          uint64_t v39 = v38;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v35[v37], v39);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
      *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      uint64_t v6 = v47;
    }
  }
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12))
  {
    int64_t v48 = (const char *)v6;
    unint64_t v49 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v50 = v5 | 4;
    uint64_t v51 = 0;
    int v52 = 0;
    char v53 = 1;
    unint64_t v14 = v7 + 1;
    BOOL v15 = *(void *)a2 + 40 * (unint64_t)v7 > (unint64_t)&v48;
    if (*(void *)a2 <= (unint64_t)&v48 && v15)
    {
      uint64_t v31 = (char *)&v48 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v14, 40);
      uint64_t v16 = *(void *)a2;
      uint64_t v17 = (const char **)&v31[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v14, 40);
      uint64_t v16 = *(void *)a2;
      uint64_t v17 = &v48;
    }
    uint64_t v18 = v16 + 40 * *(unsigned int *)(a2 + 8);
    long long v19 = *(_OWORD *)v17;
    long long v20 = *((_OWORD *)v17 + 1);
    *(void *)(v18 + 32) = v17[4];
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
  }
  else
  {
    uint64_t v8 = *(void *)a2 + 40 * v7;
    *(void *)uint64_t v8 = v6;
    *(void *)(v8 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v8 + 16) = v5 | 4;
    *(void *)(v8 + 24) = 0;
    *(_DWORD *)(v8 + 32) = 0;
    *(unsigned char *)(v8 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v9 = *(void *)a1 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0);
  uint64_t v11 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Allocate,mlir::MemoryEffects::Effect>::get();
  {
    __int16 v29 = v11;
    uint64_t v11 = v29;
    if (v30)
    {
      {
        int64_t v48 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v49 = 84;
        unint64_t v40 = llvm::StringRef::find((uint64_t *)&v48, "DesiredTypeName = ", 0x12uLL, 0);
        if (v49 >= v40) {
          unint64_t v41 = v40;
        }
        else {
          unint64_t v41 = v49;
        }
        unint64_t v42 = &v48[v41];
        unint64_t v43 = v49 - v41;
        if (v49 - v41 >= 0x12) {
          uint64_t v44 = 18;
        }
        else {
          uint64_t v44 = v49 - v41;
        }
        unint64_t v45 = v43 - v44;
        if (v45 >= v45 - 1) {
          uint64_t v46 = v45 - 1;
        }
        else {
          uint64_t v46 = v45;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
      *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      uint64_t v11 = v29;
    }
  }
  uint64_t v12 = *(unsigned int *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12))
  {
    int64_t v48 = (const char *)v11;
    unint64_t v49 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v50 = NextResultAtOffset | 4;
    uint64_t v51 = 0;
    int v52 = 1;
    char v53 = 1;
    unint64_t v21 = v12 + 1;
    BOOL v22 = *(void *)a2 + 40 * (unint64_t)v12 > (unint64_t)&v48;
    if (*(void *)a2 <= (unint64_t)&v48 && v22)
    {
      uint64_t v32 = (char *)&v48 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v21, 40);
      uint64_t v23 = *(void *)a2;
      uint64_t v24 = (const char **)&v32[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v21, 40);
      uint64_t v23 = *(void *)a2;
      uint64_t v24 = &v48;
    }
    uint64_t v25 = v23 + 40 * *(unsigned int *)(a2 + 8);
    long long v26 = *(_OWORD *)v24;
    long long v27 = *((_OWORD *)v24 + 1);
    *(void *)(v25 + 32) = v24[4];
    *(_OWORD *)uint64_t v25 = v26;
    *(_OWORD *)(v25 + 16) = v27;
  }
  else
  {
    uint64_t v13 = *(void *)a2 + 40 * v12;
    *(void *)uint64_t v13 = v11;
    *(void *)(v13 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v13 + 16) = NextResultAtOffset | 4;
    *(void *)(v13 + 24) = 0;
    *(_DWORD *)(v13 + 32) = 1;
    *(unsigned char *)(v13 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::ReinterpretCastOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v12, v7, v6);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v5;
  long long v9 = *(_OWORD *)(v5 + 16);
  *(void *)(a1 + 56) = *(void *)(v5 + 32);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.reinterpret_cast", 23, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::ReinterpretCastOp::getODSOperands(mlir::memref::ReinterpretCastOp *this, unsigned int a2)
{
  unint64_t v2 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v3 = *(void *)this + 16 * ((v2 >> 23) & 1) + 64;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (a2 >= 8)
  {
    uint64_t v4 = a2 & 0xFFFFFFF8;
    uint64_t v7 = (int32x4_t *)(v3 + 40);
    int32x4_t v8 = 0uLL;
    uint64_t v9 = v4;
    int32x4_t v10 = 0uLL;
    do
    {
      int32x4_t v8 = vaddq_s32(v7[-1], v8);
      int32x4_t v10 = vaddq_s32(*v7, v10);
      v7 += 2;
      v9 -= 8;
    }
    while (v9);
    unsigned int v5 = vaddvq_s32(vaddq_s32(v10, v8));
    if (v4 == a2) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
  }
  uint64_t v11 = a2 - v4;
  uint64_t v12 = (int *)(v3 + 4 * v4 + 24);
  do
  {
    int v13 = *v12++;
    v5 += v13;
    --v11;
  }
  while (v11);
LABEL_13:
  uint64_t v6 = v5;
LABEL_14:
  if ((v2 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v6;
  }
  else {
    return 32 * v6;
  }
}

uint64_t mlir::memref::ReinterpretCastOp::getOffsets(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(unsigned int *)(v2 + 24);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::memref::ReinterpretCastOp::getSizes(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (*(_DWORD *)(v2 + 28) + *(_DWORD *)(v2 + 24));
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

uint64_t mlir::memref::ReinterpretCastOp::getStrides(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (v2[8] + v2[7] + v2[6]);
  if ((v1 & 0x800000) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * v3;
  }
  else {
    return 32 * v3;
  }
}

BOOL mlir::memref::ReinterpretCastOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v104 = v6;
  if (!v6)
  {
    a3(v108, a4);
    if (v108[0])
    {
      int v105 = 3;
      unint64_t v106 = "expected DictionaryAttr to set properties";
      uint64_t v107 = 41;
      uint64_t v16 = &v105;
      uint64_t v17 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v87 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v95 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          uint64_t v17 = (char *)v109;
          uint64_t v16 = (int *)((char *)v109 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          uint64_t v16 = &v105;
          uint64_t v17 = (char *)v109;
        }
      }
      uint64_t v18 = &v17[24 * v110];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      ++v110;
      if (v108[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117) {
      return 0;
    }
    long long v20 = __p;
    if (__p)
    {
      unint64_t v21 = v116;
      BOOL v22 = __p;
      if (v116 != __p)
      {
        do
          unint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        BOOL v22 = __p;
      }
      uint64_t v116 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v113;
    if (!v113) {
      goto LABEL_117;
    }
    uint64_t v24 = v114;
    uint64_t v25 = v113;
    if (v114 == v113)
    {
LABEL_116:
      long long v114 = v23;
      operator delete(v25);
LABEL_117:
      if (v109 != v112) {
        free(v109);
      }
      return 0;
    }
    do
    {
      uint64_t v27 = *--v24;
      uint64_t v26 = v27;
      *uint64_t v24 = 0;
      if (v27) {
        MEMORY[0x21667D390](v26, 0x1000C8077774924);
      }
    }
    while (v24 != v23);
LABEL_115:
    uint64_t v25 = v113;
    goto LABEL_116;
  }
  int32x4_t v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v104, "static_offsets", 0xEuLL);
  if (!v8)
  {
    a3(v108, a4);
    if (v108[0])
    {
      int v105 = 3;
      unint64_t v106 = "expected key entry for static_offsets in DictionaryAttr to set Properties.";
      uint64_t v107 = 74;
      int v28 = &v105;
      __int16 v29 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v88 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v96 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          __int16 v29 = (char *)v109;
          int v28 = (int *)((char *)v109 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          int v28 = &v105;
          __int16 v29 = (char *)v109;
        }
      }
      int v30 = &v29[24 * v110];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = *((void *)v28 + 2);
      *(_OWORD *)int v30 = v31;
      ++v110;
      if (v108[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117) {
      return 0;
    }
    uint64_t v32 = __p;
    if (__p)
    {
      unint64_t v33 = v116;
      unint64_t v34 = __p;
      if (v116 != __p)
      {
        do
          unint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        unint64_t v34 = __p;
      }
      uint64_t v116 = v32;
      operator delete(v34);
    }
    uint64_t v23 = v113;
    if (!v113) {
      goto LABEL_117;
    }
    uint64_t v35 = v114;
    uint64_t v25 = v113;
    if (v114 == v113) {
      goto LABEL_116;
    }
    do
    {
      uint64_t v37 = *--v35;
      uint64_t v36 = v37;
      *uint64_t v35 = 0;
      if (v37) {
        MEMORY[0x21667D390](v36, 0x1000C8077774924);
      }
    }
    while (v35 != v23);
    goto LABEL_115;
  }
  uint64_t v9 = (uint64_t)v8;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v8))
  {
    a3(v108, a4);
    if (v108[0])
    {
      int v105 = 3;
      uint64_t v107 = 59;
      unint64_t v38 = &v105;
      uint64_t v39 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v89 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v97 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          uint64_t v39 = (char *)v109;
          unint64_t v38 = (int *)((char *)v109 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          unint64_t v38 = &v105;
          uint64_t v39 = (char *)v109;
        }
      }
      unint64_t v40 = &v39[24 * v110];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = *((void *)v38 + 2);
      *(_OWORD *)unint64_t v40 = v41;
      ++v110;
      if (v108[0])
      {
        unint64_t v42 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v9);
        unint64_t v43 = (char *)v109;
        if (v110 >= v111)
        {
          unint64_t v90 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            int64_t v98 = (char *)&v105 - (unsigned char *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            unint64_t v43 = (char *)v109;
            unint64_t v42 = (int *)((char *)v109 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            unint64_t v42 = &v105;
            unint64_t v43 = (char *)v109;
          }
        }
        uint64_t v44 = &v43[24 * v110];
        long long v45 = *(_OWORD *)v42;
        *((void *)v44 + 2) = *((void *)v42 + 2);
        *(_OWORD *)uint64_t v44 = v45;
        ++v110;
        if (v108[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
        }
      }
    }
    if (!v117) {
      return 0;
    }
    uint64_t v46 = __p;
    if (__p)
    {
      unint64_t v47 = v116;
      int64_t v48 = __p;
      if (v116 != __p)
      {
        do
          unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        int64_t v48 = __p;
      }
      uint64_t v116 = v46;
      operator delete(v48);
    }
    uint64_t v23 = v113;
    if (!v113) {
      goto LABEL_117;
    }
    unint64_t v49 = v114;
    uint64_t v25 = v113;
    if (v114 == v113) {
      goto LABEL_116;
    }
    do
    {
      uint64_t v51 = *--v49;
      uint64_t v50 = v51;
      *unint64_t v49 = 0;
      if (v51) {
        MEMORY[0x21667D390](v50, 0x1000C8077774924);
      }
    }
    while (v49 != v23);
    goto LABEL_115;
  }
  *a1 = v9;
  int32x4_t v10 = (void *)mlir::DictionaryAttr::get((uint64_t)&v104, "static_sizes", 0xCuLL);
  if (!v10)
  {
    a3(v108, a4);
    if (v108[0])
    {
      int v105 = 3;
      unint64_t v106 = "expected key entry for static_sizes in DictionaryAttr to set Properties.";
      uint64_t v107 = 72;
      int v52 = &v105;
      char v53 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v91 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v99 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          char v53 = (char *)v109;
          int v52 = (int *)((char *)v109 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          int v52 = &v105;
          char v53 = (char *)v109;
        }
      }
      uint64_t v54 = &v53[24 * v110];
      long long v55 = *(_OWORD *)v52;
      *((void *)v54 + 2) = *((void *)v52 + 2);
      *(_OWORD *)uint64_t v54 = v55;
      ++v110;
      if (v108[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117) {
      return 0;
    }
    uint64_t v56 = __p;
    if (__p)
    {
      uint64_t v57 = v116;
      uint64_t v58 = __p;
      if (v116 != __p)
      {
        do
          uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        uint64_t v58 = __p;
      }
      uint64_t v116 = v56;
      operator delete(v58);
    }
    uint64_t v23 = v113;
    if (!v113) {
      goto LABEL_117;
    }
    char v59 = v114;
    uint64_t v25 = v113;
    if (v114 == v113) {
      goto LABEL_116;
    }
    do
    {
      uint64_t v61 = *--v59;
      uint64_t v60 = v61;
      void *v59 = 0;
      if (v61) {
        MEMORY[0x21667D390](v60, 0x1000C8077774924);
      }
    }
    while (v59 != v23);
    goto LABEL_115;
  }
  uint64_t v11 = (uint64_t)v10;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v10))
  {
    a3(v108, a4);
    if (v108[0])
    {
      int v105 = 3;
      uint64_t v107 = 57;
      unsigned int v62 = &v105;
      long long v63 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v92 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v100 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          long long v63 = (char *)v109;
          unsigned int v62 = (int *)((char *)v109 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          unsigned int v62 = &v105;
          long long v63 = (char *)v109;
        }
      }
      uint64_t v64 = &v63[24 * v110];
      long long v65 = *(_OWORD *)v62;
      *((void *)v64 + 2) = *((void *)v62 + 2);
      *(_OWORD *)uint64_t v64 = v65;
      ++v110;
      if (v108[0])
      {
        uint64_t v66 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v11);
        char v67 = (char *)v109;
        if (v110 >= v111)
        {
          unint64_t v93 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            int64_t v101 = (char *)&v105 - (unsigned char *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            char v67 = (char *)v109;
            uint64_t v66 = (int *)((char *)v109 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            uint64_t v66 = &v105;
            char v67 = (char *)v109;
          }
        }
        uint64_t v68 = &v67[24 * v110];
        long long v69 = *(_OWORD *)v66;
        *((void *)v68 + 2) = *((void *)v66 + 2);
        *(_OWORD *)uint64_t v68 = v69;
        ++v110;
        if (v108[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
        }
      }
    }
    if (!v117) {
      return 0;
    }
    unint64_t v70 = __p;
    if (__p)
    {
      unint64_t v71 = v116;
      uint64_t v72 = __p;
      if (v116 != __p)
      {
        do
          unint64_t v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
        while (v71 != v70);
        uint64_t v72 = __p;
      }
      uint64_t v116 = v70;
      operator delete(v72);
    }
    uint64_t v23 = v113;
    if (!v113) {
      goto LABEL_117;
    }
    uint64_t v73 = v114;
    uint64_t v25 = v113;
    if (v114 == v113) {
      goto LABEL_116;
    }
    do
    {
      uint64_t v75 = *--v73;
      uint64_t v74 = v75;
      *uint64_t v73 = 0;
      if (v75) {
        MEMORY[0x21667D390](v74, 0x1000C8077774924);
      }
    }
    while (v73 != v23);
    goto LABEL_115;
  }
  a1[1] = v11;
  uint64_t v12 = (void *)mlir::DictionaryAttr::get((uint64_t)&v104, "static_strides", 0xEuLL);
  int v103 = v12;
  if (!v12)
  {
    a3(v108, a4);
    if (v108[0])
    {
      int v105 = 3;
      unint64_t v106 = "expected key entry for static_strides in DictionaryAttr to set Properties.";
      uint64_t v107 = 74;
      int64_t v76 = &v105;
      long long v77 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v94 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          int64_t v102 = (char *)&v105 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          long long v77 = (char *)v109;
          int64_t v76 = (int *)((char *)v109 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          int64_t v76 = &v105;
          long long v77 = (char *)v109;
        }
      }
      int64_t v78 = &v77[24 * v110];
      long long v79 = *(_OWORD *)v76;
      *((void *)v78 + 2) = *((void *)v76 + 2);
      *(_OWORD *)int64_t v78 = v79;
      ++v110;
      if (v108[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117) {
      return 0;
    }
    int64_t v80 = __p;
    if (__p)
    {
      uint64_t v81 = v116;
      uint64_t v82 = __p;
      if (v116 != __p)
      {
        do
          uint64_t v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
        while (v81 != v80);
        uint64_t v82 = __p;
      }
      uint64_t v116 = v80;
      operator delete(v82);
    }
    uint64_t v23 = v113;
    if (!v113) {
      goto LABEL_117;
    }
    uint64_t v83 = v114;
    uint64_t v25 = v113;
    if (v114 == v113) {
      goto LABEL_116;
    }
    do
    {
      uint64_t v85 = *--v83;
      uint64_t v84 = v85;
      *uint64_t v83 = 0;
      if (v85) {
        MEMORY[0x21667D390](v84, 0x1000C8077774924);
      }
    }
    while (v83 != v23);
    goto LABEL_115;
  }
  int v13 = v12;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v12))
  {
    a3(v108, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v86, (uint64_t *)&v103);
LABEL_122:
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v108);
    return 0;
  }
  a1[2] = (uint64_t)v13;
  unint64_t v14 = (void *)mlir::DictionaryAttr::get((uint64_t)&v104, "operandSegmentSizes", 0x13uLL);
  if (!v14)
  {
    unint64_t v14 = (void *)mlir::DictionaryAttr::get((uint64_t)&v104, "operand_segment_sizes", 0x15uLL);
    if (!v14)
    {
      a3(v108, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v108, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_122;
    }
  }
  return mlir::convertFromAttribute(a1 + 3, (const char *)4, v14, a3, a4) != 0;
}

uint64_t mlir::memref::ReinterpretCastOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v35[6] = *MEMORY[0x263EF8340];
  uint64_t v32 = a1;
  unint64_t v33 = v35;
  uint64_t v34 = 0x300000000;
  if (*a2)
  {
    uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_offsets", 14, *a2);
    uint64_t v6 = v5;
    unsigned int v7 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      unsigned int v7 = v34;
    }
    int32x4_t v8 = (uint64_t *)((char *)v33 + 16 * v7);
    *int32x4_t v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v34) = v34 + 1;
  }
  uint64_t v9 = a2[1];
  if (v9)
  {
    uint64_t v10 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_sizes", 12, v9);
    uint64_t v12 = v11;
    unsigned int v13 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      unsigned int v13 = v34;
    }
    unint64_t v14 = (uint64_t *)((char *)v33 + 16 * v13);
    *unint64_t v14 = v10;
    v14[1] = v12;
    LODWORD(v34) = v34 + 1;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_strides", 14, v15);
    uint64_t v18 = v17;
    unsigned int v19 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      unsigned int v19 = v34;
    }
    long long v20 = (uint64_t *)((char *)v33 + 16 * v19);
    *long long v20 = v16;
    v20[1] = v18;
    LODWORD(v34) = v34 + 1;
  }
  uint64_t v21 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
  uint64_t v22 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"operandSegmentSizes", 19, v21);
  uint64_t v24 = v23;
  unsigned int v25 = v34;
  if (v34 >= HIDWORD(v34))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
    unsigned int v25 = v34;
  }
  uint64_t v26 = (uint64_t *)((char *)v33 + 16 * v25);
  uint64_t *v26 = v22;
  v26[1] = v24;
  BOOL v27 = __CFADD__(v34, 1);
  uint64_t v28 = (v34 + 1);
  LODWORD(v34) = v34 + 1;
  if (v27)
  {
    uint64_t DictionaryAttr = 0;
    int v30 = v33;
    if (v33 == v35) {
      return DictionaryAttr;
    }
    goto LABEL_20;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v32, (uint64_t *)v33, v28);
  int v30 = v33;
  if (v33 != v35) {
LABEL_20:
  }
    free(v30);
  return DictionaryAttr;
}

unint64_t mlir::memref::ReinterpretCastOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = &unk_267770000;
  {
    unint64_t v27 = v1;
    int v30 = a1;
    uint64_t v2 = &unk_267770000;
    int v16 = v15;
    unint64_t v1 = v27;
    a1 = v30;
    if (v16)
    {
      unint64_t v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v17 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v17;
      unint64_t v1 = v27;
      a1 = v30;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v3 = HIDWORD(v1);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v1) ^ HIDWORD(v1));
  unint64_t v37 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v5 = a1[1];
  {
    unint64_t v28 = v5;
    long long v31 = a1;
    uint64_t v2 = &unk_267770000;
    int v19 = v18;
    unint64_t v5 = v28;
    a1 = v31;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      unint64_t v5 = v28;
      a1 = v31;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v5) ^ HIDWORD(v5));
  unint64_t v36 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v8 = a1[2];
  {
    unint64_t v29 = v8;
    uint64_t v32 = a1;
    uint64_t v2 = &unk_267770000;
    int v22 = v21;
    unint64_t v8 = v29;
    a1 = v32;
    if (v22)
    {
      unint64_t v23 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v23 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      unint64_t v8 = v29;
      a1 = v32;
      uint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * ((v2[385] + 8 * v8) ^ HIDWORD(v8));
  unint64_t v35 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  {
    unint64_t v33 = a1;
    uint64_t v2 = &unk_267770000;
    int v25 = v24;
    a1 = v33;
    if (v25)
    {
      unint64_t v26 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v26 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v26;
      uint64_t v2 = (void *)&unk_267770000;
      a1 = v33;
    }
  }
  unint64_t v11 = a1[4];
  uint64_t v12 = __ROR8__(v11 + 16, 16);
  unint64_t v13 = 0x9DDFEA08EB382D69 * (a1[3] ^ v2[385] ^ v12);
  unint64_t v34 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47))) ^ v11;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v37, (uint64_t *)&v36, (uint64_t *)&v35, (uint64_t *)&v34);
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  {
    unint64_t v13 = a2;
    unint64_t v14 = a1;
    a2 = v13;
    a1 = v14;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a2 = v13;
      a1 = v14;
    }
  }
  uint64_t v6 = *a1;
  uint64_t v21 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v18[0] = v6;
  unint64_t v15 = 0;
  unint64_t v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v15, (void *)v18 + 1, (unint64_t)v19, *a2);
  unint64_t v16 = v15;
  unint64_t v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v16, v7, (unint64_t)v19, *a3);
  unint64_t v17 = v16;
  unint64_t v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v18, (uint64_t *)&v17, v8, (unint64_t)v19, *a4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v18, v17, v9, (char *)v19);
}

uint64_t mlir::memref::ReinterpretCastOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, char *__s1, size_t __n)
{
  uint64_t result = 0;
  switch(__n)
  {
    case 0xCuLL:
      if (memcmp(__s1, "static_sizes", __n)) {
        goto LABEL_11;
      }
      return a2[1];
    case 0xDuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xEuLL:
      if (*(void *)__s1 == 0x6F5F636974617473 && *(void *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        uint64_t result = *a2;
      }
      else if (!memcmp(__s1, "static_strides", __n))
      {
        uint64_t result = a2[2];
      }
      else
      {
LABEL_11:
        uint64_t result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n)) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n)) {
        goto LABEL_11;
      }
LABEL_13:
      uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::memref::ReinterpretCastOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, void *a4)
{
  unint64_t v5 = (void *)result;
  switch(a3)
  {
    case 0xCuLL:
      uint64_t result = memcmp(__s1, "static_sizes", a3);
      if (!result)
      {
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if (result) {
            unint64_t v10 = a4;
          }
          else {
            unint64_t v10 = 0;
          }
          v5[1] = v10;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xEuLL:
      if (*(void *)__s1 == 0x6F5F636974617473 && *(void *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if (result) {
            int v11 = a4;
          }
          else {
            int v11 = 0;
          }
          void *v5 = v11;
        }
        else
        {
          *(void *)uint64_t result = 0;
        }
      }
      else
      {
        uint64_t result = memcmp(__s1, "static_strides", a3);
        if (!result)
        {
          if (a4)
          {
            uint64_t result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if (result) {
              unint64_t v7 = a4;
            }
            else {
              unint64_t v7 = 0;
            }
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0x13uLL:
      uint64_t result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!result) {
        goto LABEL_17;
      }
      break;
    case 0x15uLL:
      uint64_t result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!result)
      {
LABEL_17:
        if (a4)
        {
          uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          unint64_t v8 = result ? a4 : 0;
          unint64_t v12 = v8;
          if (result)
          {
            uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 4)
            {
              uint64_t result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v9) {
                uint64_t result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v9);
              }
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::memref::ReinterpretCastOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"static_offsets", 14, *a2);
  }
  uint64_t v6 = a2[1];
  if (v6) {
    mlir::NamedAttrList::append(a3, (uint64_t)"static_sizes", 12, v6);
  }
  uint64_t v7 = a2[2];
  if (v7) {
    mlir::NamedAttrList::append(a3, (uint64_t)"static_strides", 14, v7);
  }
  uint64_t v8 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);

  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v8);
}

BOOL mlir::memref::ReinterpretCastOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8 = (void *)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  BOOL result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v8, (void **)"static_offsets", (const char *)0xE, a3, a4))
  {
    uint64_t v9 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v9, (void **)"static_sizes", (const char *)0xC, a3, a4))
    {
      unint64_t v10 = (void *)mlir::NamedAttrList::get(a2, *(void *)(*(void *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v10, (void **)"static_strides", (const char *)0xE, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(void *a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1 || mlir::detail::DenseArrayAttrImpl<long long>::classof(a1)) {
    return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    uint64_t v32 = "attribute '";
    uint64_t v33 = 11;
    int v11 = &v31;
    unint64_t v12 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        unint64_t v12 = (char *)v37;
        int v11 = (void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        int v11 = &v31;
        unint64_t v12 = (char *)v37;
      }
    }
    unint64_t v13 = &v12[24 * v38];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)unint64_t v13 = v14;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      long long v31 = a2;
      uint64_t v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        uint64_t v32 = "' failed to satisfy constraint: i64 dense array attribute";
        uint64_t v33 = 57;
        unint64_t v15 = &v31;
        unint64_t v16 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            unint64_t v16 = (char *)v37;
            unint64_t v15 = (void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            unint64_t v15 = &v31;
            unint64_t v16 = (char *)v37;
          }
        }
        unint64_t v17 = &v16[24 * v38];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)unint64_t v17 = v18;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    int v19 = __p;
    if (__p)
    {
      uint64_t v20 = v44;
      uint64_t v21 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v44 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v41;
    if (v41)
    {
      unint64_t v23 = v42;
      int v24 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          *unint64_t v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        int v24 = v41;
      }
      unint64_t v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

BOOL mlir::memref::ReinterpretCastOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) <= 5)
  {
    uint64_t v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17)) {
      return 0;
    }
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      unint64_t v15 = "size mismatch for operand/result_segment_size";
      __int16 v16 = 259;
      (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v18, a1, &v15);
      if (v18[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      }
      if (v25)
      {
        unint64_t v4 = __p;
        if (__p)
        {
          unint64_t v5 = v24;
          uint64_t v6 = __p;
          if (v24 != __p)
          {
            do
              unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            uint64_t v6 = __p;
          }
          int v24 = v4;
          operator delete(v6);
        }
        uint64_t v7 = v21;
        if (v21)
        {
          uint64_t v8 = v22;
          uint64_t v9 = v21;
          if (v22 != v21)
          {
            do
            {
              uint64_t v11 = *--v8;
              uint64_t v10 = v11;
              *uint64_t v8 = 0;
              if (v11) {
                MEMORY[0x21667D390](v10, 0x1000C8077774924);
              }
            }
            while (v8 != v7);
            uint64_t v9 = v21;
          }
          uint64_t v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20) {
          free(v19);
        }
      }
      return 0;
    }
    unint64_t v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13) {
      memmove(v3 + 3, v12, 4 * v13);
    }
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)4));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  unsigned int v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  unint64_t v4 = v39;
  if (mlir::detail::DenseArrayAttrImpl<long long>::classof(v39)) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v8 = &v40;
    uint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v9 = (char *)v46;
        uint64_t v8 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v8 = &v40;
        uint64_t v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  unint64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::DenseArrayAttrImpl<int64_t>]";
  unint64_t v41 = 91;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    unint64_t v40 = (void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      __int16 v16 = &v40;
      uint64_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v17 = (char *)v46;
          __int16 v16 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          __int16 v16 = &v40;
          uint64_t v17 = (char *)v46;
        }
      }
      long long v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)long long v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        uint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v21 = (char *)v46;
            uint64_t v20 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            uint64_t v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    int v24 = __p;
    if (__p)
    {
      char v25 = v53;
      uint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          char v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      char v53 = v24;
      operator delete(v26);
    }
    unint64_t v27 = v50;
    if (v50)
    {
      unint64_t v28 = v51;
      int64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        int64_t v29 = v50;
      }
      uint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::memref::ReinterpretCastOp::writeProperties(uint64_t a1, uint64_t a2)
{
  if (HIBYTE(*(_DWORD *)(*(void *)a1 + 44))) {
    unint64_t v4 = *(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v4 = 0;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2) <= 5)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
    uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 24, 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)v4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 8));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(v4 + 16));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  if (result >= 6)
  {
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 24), 4);
  }
  return result;
}

BOOL mlir::memref::ReinterpretCastOp::verifyInvariantsImpl(mlir::memref::ReinterpretCastOp *this)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v3 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *(void **)v3;
  if (!*(void *)v3)
  {
    v49[0] = (void **)"requires attribute 'static_offsets'";
    __int16 v50 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v49, (uint64_t)v51);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    }
    if (!v58) {
      return v27;
    }
    unint64_t v28 = __p;
    if (__p)
    {
      int64_t v29 = v57;
      uint64_t v30 = __p;
      if (v57 != __p)
      {
        do
          int64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        uint64_t v30 = __p;
      }
      uint64_t v57 = v28;
      operator delete(v30);
    }
    uint64_t v31 = v54;
    if (v54)
    {
      unint64_t v32 = v55;
      unint64_t v33 = v54;
      if (v55 == v54) {
        goto LABEL_77;
      }
      do
      {
        uint64_t v35 = *--v32;
        uint64_t v34 = v35;
        void *v32 = 0;
        if (v35) {
          MEMORY[0x21667D390](v34, 0x1000C8077774924);
        }
      }
      while (v32 != v31);
LABEL_76:
      unint64_t v33 = v54;
LABEL_77:
      uint64_t v55 = v31;
      operator delete(v33);
    }
LABEL_78:
    if (v52 != &v53) {
      free(v52);
    }
    return v27;
  }
  unint64_t v5 = *(void **)(v3 + 8);
  if (!v5)
  {
    v49[0] = (void **)"requires attribute 'static_sizes'";
    __int16 v50 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v49, (uint64_t)v51);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    }
    if (!v58) {
      return v27;
    }
    int64_t v36 = __p;
    if (__p)
    {
      int64_t v37 = v57;
      unsigned int v38 = __p;
      if (v57 != __p)
      {
        do
          int64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        unsigned int v38 = __p;
      }
      uint64_t v57 = v36;
      operator delete(v38);
    }
    uint64_t v31 = v54;
    if (v54)
    {
      unsigned int v39 = v55;
      unint64_t v33 = v54;
      if (v55 == v54) {
        goto LABEL_77;
      }
      do
      {
        uint64_t v41 = *--v39;
        uint64_t v40 = v41;
        void *v39 = 0;
        if (v41) {
          MEMORY[0x21667D390](v40, 0x1000C8077774924);
        }
      }
      while (v39 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  uint64_t v6 = *(void **)(v3 + 16);
  if (!v6)
  {
    v49[0] = (void **)"requires attribute 'static_strides'";
    __int16 v50 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v49, (uint64_t)v51);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    }
    if (!v58) {
      return v27;
    }
    uint64_t v42 = __p;
    if (__p)
    {
      __int16 v43 = v57;
      uint64_t v44 = __p;
      if (v57 != __p)
      {
        do
          __int16 v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        uint64_t v44 = __p;
      }
      uint64_t v57 = v42;
      operator delete(v44);
    }
    uint64_t v31 = v54;
    if (v54)
    {
      uint64_t v45 = v55;
      unint64_t v33 = v54;
      if (v55 == v54) {
        goto LABEL_77;
      }
      do
      {
        uint64_t v47 = *--v45;
        uint64_t v46 = v47;
        *uint64_t v45 = 0;
        if (v47) {
          MEMORY[0x21667D390](v46, 0x1000C8077774924);
        }
      }
      while (v45 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  v51[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (void **)"static_offsets", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0; {
  v51[0] = *(void *)this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (void **)"static_sizes", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0; {
  v51[0] = *(void *)this;
  }
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (void **)"static_strides", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0; {
  unint64_t v7 = *(unsigned int *)(*(void *)this + 44);
  }
  uint64_t v8 = *(void *)this + 16 * ((v7 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    uint64_t v10 = *(void *)(*(void *)this + 72);
    if (v9) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (v9)
    {
LABEL_14:
      uint64_t v11 = 0;
      uint64_t v12 = v10 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*(void *)this, *(void *)(*(void *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11) {
          goto LABEL_17;
        }
      }
      return 0;
    }
  }
LABEL_17:
  uint64_t ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands(this, 1u);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v16 += 32;
      if (!--v15) {
        goto LABEL_21;
      }
    }
    return 0;
  }
LABEL_21:
  uint64_t v17 = mlir::memref::ReinterpretCastOp::getODSOperands(this, 2u);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = v17 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v20 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v20 += 32;
      if (!--v19) {
        goto LABEL_25;
      }
    }
    return 0;
  }
LABEL_25:
  uint64_t v21 = mlir::memref::ReinterpretCastOp::getODSOperands(this, 3u);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = v21 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v24 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v24 += 32;
      if (!--v23) {
        goto LABEL_29;
      }
    }
    return 0;
  }
LABEL_29:
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v25 = *(void *)this - 16;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

uint64_t mlir::memref::ReinterpretCastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  memset(v42, 0, 24);
  v31[0] = (uint64_t)v42;
  v31[1] = 1;
  unsigned int v39 = v41;
  uint64_t v40 = 0x400000000;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int64_t v36 = v38;
  uint64_t v37 = 0x400000000;
  uint64_t v32 = 0;
  unint64_t v33 = v35;
  uint64_t v34 = 0x400000000;
  v27[1] = 1;
  uint64_t v28 = 0;
  v27[0] = &v32;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v42, 1)) {
    goto LABEL_34;
  }
  __int16 v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, __src))goto LABEL_34; {
  __int16 v44 = 257;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "offset", 6, __src))goto LABEL_34; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    goto LABEL_34;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v39, &v30, __src, 0)) {
    goto LABEL_34;
  }
  unint64_t v5 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  void *v5 = v30;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    goto LABEL_34;
  }
  __int16 v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "sizes", 5, __src))goto LABEL_34; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    goto LABEL_34;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v36, &v29, __src, 0)) {
    goto LABEL_34;
  }
  uint64_t v6 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  *(void *)(v6 + 8) = v29;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    goto LABEL_34;
  }
  __int16 v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "strides", 7, __src))goto LABEL_34; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    goto LABEL_34;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v33, &v28, __src, 0)) {
    goto LABEL_34;
  }
  uint64_t v7 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  *(void *)(v7 + 16) = v28;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    goto LABEL_34;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  __src[0] = a1;
  __src[1] = (uint64_t)&v26;
  __src[2] = a2;
  if (!mlir::memref::ReinterpretCastOp::verifyInherentAttrs(v8, a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ReinterpretCastOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_34; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    goto LABEL_34;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, __src)) {
    goto LABEL_34;
  }
  uint64_t v32 = __src[0];
  __int16 v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(void *)a1 + 368))(a1, "to", 2, __src))goto LABEL_34; {
  uint64_t v26 = 0;
  }
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v26)) {
    goto LABEL_34;
  }
  __src[0] = v26;
  int v9 = v40;
  int v10 = v37;
  int v11 = v34;
  uint64_t v12 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  v12[6] = 1;
  v12[7] = v9;
  v12[8] = v10;
  v12[9] = v11;
  unint64_t v13 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t IndexType = mlir::Builder::getIndexType(v13, v14);
  mlir::OperationState::addTypes(a2, __src, 1);
  uint64_t v15 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v31, v27, v4, v15))goto LABEL_34; {
  if (v40)
  }
  {
    uint64_t v16 = (char *)v39;
    uint64_t v17 = 32 * v40;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v16, IndexType, v15))
    {
      v16 += 32;
      v17 -= 32;
      if (!v17) {
        goto LABEL_25;
      }
    }
LABEL_34:
    uint64_t v22 = 0;
LABEL_35:
    uint64_t v23 = v33;
    if (v33 != v35) {
      goto LABEL_36;
    }
    goto LABEL_37;
  }
LABEL_25:
  if (v37)
  {
    uint64_t v18 = (char *)v36;
    uint64_t v19 = 32 * v37;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, IndexType, v15))
    {
      v18 += 32;
      v19 -= 32;
      if (!v19) {
        goto LABEL_29;
      }
    }
    goto LABEL_34;
  }
LABEL_29:
  if (v34)
  {
    uint64_t v20 = (char *)v33;
    uint64_t v21 = 32 * v34;
    uint64_t v22 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v20, IndexType, v15))
    {
      v20 += 32;
      v21 -= 32;
      if (!v21) {
        goto LABEL_35;
      }
    }
    goto LABEL_34;
  }
  uint64_t v22 = 1;
  uint64_t v23 = v33;
  if (v33 != v35) {
LABEL_36:
  }
    free(v23);
LABEL_37:
  if (v36 != v38) {
    free(v36);
  }
  if (v39 != v41) {
    free(v39);
  }
  return v22;
}

void mlir::memref::ReinterpretCastOp::print(mlir::memref::ReinterpretCastOp *this, mlir::OpAsmPrinter *a2)
{
  v97[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*(void *)(*(void *)this + 72) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    unsigned char *v7 = 32;
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    _WORD *v9 = 28532;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "to", 2uLL);
  }
  int v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *int v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 5)
  {
    *(_WORD *)(v13 + 4) = 29797;
    *(_DWORD *)uint64_t v13 = 1936090735;
    *((void *)v12 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v12, "offset", 6uLL);
  }
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ":", 1uLL);
  }
  else
  {
    unsigned char *v15 = 58;
    ++*((void *)v14 + 4);
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    *uint64_t v17 = 32;
  }
  uint64_t v18 = *(void *)this;
  unint64_t v19 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v20 = (void **)(*(void *)this + 16 * ((v19 >> 23) & 1) + 64);
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v21 = *(void *)this + 16 * ((v19 >> 23) & 1) + 64;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(unsigned int *)(v21 + 24);
  int v23 = *(_DWORD *)(v21 + 28);
  if ((v19 & 0x800000) != 0) {
    uint64_t v24 = *(void *)(v18 + 72);
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = v24 + 32 * v22;
  uint64_t v26 = (v23 + v22) - v22;
  unint64_t v92 = *v20;
  uint64_t v27 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v92);
  uint64_t v29 = v28;
  mlir::ValueRange::ValueRange(v97, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v18, v25, v26, v27, v29, v97[0], v97[1], 0, 0, 2);
  uint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if (*((unsigned char **)v30 + 3) == v31)
  {
    llvm::raw_ostream::write(v30, ",", 1uLL);
  }
  else
  {
    unsigned char *v31 = 44;
    ++*((void *)v30 + 4);
  }
  uint64_t v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v33 = (unsigned char *)*((void *)v32 + 4);
  if ((unint64_t)v33 >= *((void *)v32 + 3))
  {
    llvm::raw_ostream::write(v32, 32);
  }
  else
  {
    *((void *)v32 + 4) = v33 + 1;
    unsigned char *v33 = 32;
  }
  uint64_t v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v35 = *((void *)v34 + 4);
  if ((unint64_t)(*((void *)v34 + 3) - v35) > 4)
  {
    *(unsigned char *)(v35 + 4) = 115;
    *(_DWORD *)uint64_t v35 = 1702521203;
    *((void *)v34 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v34, "sizes", 5uLL);
  }
  int64_t v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v37 = (unsigned char *)*((void *)v36 + 4);
  if (*((unsigned char **)v36 + 3) == v37)
  {
    llvm::raw_ostream::write(v36, ":", 1uLL);
  }
  else
  {
    unsigned char *v37 = 58;
    ++*((void *)v36 + 4);
  }
  unsigned int v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned int v39 = (unsigned char *)*((void *)v38 + 4);
  if ((unint64_t)v39 >= *((void *)v38 + 3))
  {
    llvm::raw_ostream::write(v38, 32);
  }
  else
  {
    *((void *)v38 + 4) = v39 + 1;
    unsigned char *v39 = 32;
  }
  uint64_t v40 = *(void *)this;
  unint64_t v41 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v42 = *(void *)this + 16 * ((v41 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v42 = 0;
  }
  if ((v41 & 0x800000) != 0) {
    uint64_t v43 = *(void *)(v40 + 72);
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v44 = (*(_DWORD *)(v42 + 28) + *(_DWORD *)(v42 + 24));
  uint64_t v45 = v43 + 32 * v44;
  uint64_t v46 = (*(_DWORD *)(v42 + 32) + v44) - v44;
  unint64_t v92 = *(void **)(v42 + 8);
  uint64_t v47 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v92);
  uint64_t v49 = v48;
  mlir::ValueRange::ValueRange(v96, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v40, v45, v46, v47, v49, v96[0], v96[1], 0, 0, 2);
  __int16 v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v51 = (unsigned char *)*((void *)v50 + 4);
  if (*((unsigned char **)v50 + 3) == v51)
  {
    llvm::raw_ostream::write(v50, ",", 1uLL);
  }
  else
  {
    *uint64_t v51 = 44;
    ++*((void *)v50 + 4);
  }
  int v52 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v53 = (unsigned char *)*((void *)v52 + 4);
  if ((unint64_t)v53 >= *((void *)v52 + 3))
  {
    llvm::raw_ostream::write(v52, 32);
  }
  else
  {
    *((void *)v52 + 4) = v53 + 1;
    unsigned char *v53 = 32;
  }
  char v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v55 = (_DWORD *)*((void *)v54 + 4);
  if (*((void *)v54 + 3) - (void)v55 > 6uLL)
  {
    *(_DWORD *)((char *)v55 + 3) = 1936024681;
    _DWORD *v55 = 1769108595;
    *((void *)v54 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v54, "strides", 7uLL);
  }
  uint64_t v56 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v57 = (unsigned char *)*((void *)v56 + 4);
  if (*((unsigned char **)v56 + 3) == v57)
  {
    llvm::raw_ostream::write(v56, ":", 1uLL);
  }
  else
  {
    *uint64_t v57 = 58;
    ++*((void *)v56 + 4);
  }
  char v58 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v59 = (unsigned char *)*((void *)v58 + 4);
  if ((unint64_t)v59 >= *((void *)v58 + 3))
  {
    llvm::raw_ostream::write(v58, 32);
  }
  else
  {
    *((void *)v58 + 4) = v59 + 1;
    unsigned char *v59 = 32;
  }
  uint64_t v60 = *(void *)this;
  unint64_t v61 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v62 = *(void *)this + 16 * ((v61 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v62 = 0;
  }
  if ((v61 & 0x800000) != 0) {
    uint64_t v63 = *(void *)(v60 + 72);
  }
  else {
    uint64_t v63 = 0;
  }
  uint64_t v64 = (*(_DWORD *)(v62 + 28) + *(_DWORD *)(v62 + 24) + *(_DWORD *)(v62 + 32));
  uint64_t v65 = v63 + 32 * v64;
  uint64_t v66 = (*(_DWORD *)(v62 + 36) + v64) - v64;
  unint64_t v92 = *(void **)(v62 + 16);
  char v67 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v92);
  uint64_t v69 = v68;
  mlir::ValueRange::ValueRange(v95, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v60, v65, v66, v67, v69, v95[0], v95[1], 0, 0, 2);
  unint64_t v92 = v94;
  v94[0] = "operandSegmentSizes";
  v94[1] = 19;
  v94[2] = "static_offsets";
  v94[3] = 14;
  uint64_t v93 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, 3uLL, 16);
  unint64_t v70 = (char *)v92 + 16 * v93;
  *unint64_t v70 = "static_sizes";
  v70[1] = 12;
  uint64_t v71 = (v93 + 1);
  LODWORD(v93) = v71;
  if (v71 >= HIDWORD(v93))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, v71 + 1, 16);
    LODWORD(v71) = v93;
  }
  uint64_t v72 = (char *)v92 + 16 * v71;
  void *v72 = "static_strides";
  v72[1] = 14;
  LODWORD(v93) = v93 + 1;
  uint64_t v73 = *(mlir::Operation **)this;
  if (*(unsigned char *)(*(void *)this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v73);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v73 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v76, v92, v93);
  long long v77 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v78 = (unsigned char *)*((void *)v77 + 4);
  if ((unint64_t)v78 >= *((void *)v77 + 3))
  {
    llvm::raw_ostream::write(v77, 32);
  }
  else
  {
    *((void *)v77 + 4) = v78 + 1;
    *int64_t v78 = 32;
  }
  long long v79 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v80 = (unsigned char *)*((void *)v79 + 4);
  if (*((unsigned char **)v79 + 3) == v80)
  {
    llvm::raw_ostream::write(v79, ":", 1uLL);
  }
  else
  {
    unsigned char *v80 = 58;
    ++*((void *)v79 + 4);
  }
  uint64_t v81 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v82 = (unsigned char *)*((void *)v81 + 4);
  if ((unint64_t)v82 >= *((void *)v81 + 3))
  {
    llvm::raw_ostream::write(v81, 32);
  }
  else
  {
    *((void *)v81 + 4) = v82 + 1;
    *uint64_t v82 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v83 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v84 = (unsigned char *)*((void *)v83 + 4);
  if ((unint64_t)v84 >= *((void *)v83 + 3))
  {
    llvm::raw_ostream::write(v83, 32);
  }
  else
  {
    *((void *)v83 + 4) = v84 + 1;
    unsigned char *v84 = 32;
  }
  uint64_t v85 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v86 = (_WORD *)*((void *)v85 + 4);
  if (*((void *)v85 + 3) - (void)v86 > 1uLL)
  {
    *uint64_t v86 = 28532;
    *((void *)v85 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v85, "to", 2uLL);
  }
  unint64_t v87 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v88 = (unsigned char *)*((void *)v87 + 4);
  if ((unint64_t)v88 >= *((void *)v87 + 3))
  {
    llvm::raw_ostream::write(v87, 32);
  }
  else
  {
    *((void *)v87 + 4) = v88 + 1;
    unsigned char *v88 = 32;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v89 = *(void *)this - 16;
  }
  else {
    uint64_t v89 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v89, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v92 != v94) {
    free(v92);
  }
}

BOOL mlir::memref::ReshapeOp::verifyInvariantsImpl(mlir::memref::ReshapeOp *this)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 0))return 0; {
  uint64_t v2 = *(void *)this;
  }
  unint64_t v3 = (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    goto LABEL_35;
  }
  v55[0] = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v55[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v4 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v55);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange)
    && *(_UNKNOWN **)(*(void *)OperandRange + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    goto LABEL_35;
  }
  uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8);
  uint64_t v48 = v3;
  uint64_t v49 = v32;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v48)
    || (uint64_t v33 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8),
        int v52 = v3,
        uint64_t v53 = v33,
        mlir::ShapedType::getShape((mlir::ShapedType *)&v52),
        v34 != 1))
  {
LABEL_35:
    __int16 v50 = 261;
    uint64_t v48 = (void **)"operand";
    uint64_t v49 = 7;
    mlir::Operation::emitOpError(v2, &v48, (uint64_t)v55);
    if (v55[0])
    {
      LODWORD(v52) = 3;
      uint64_t v53 = (uint64_t)" #";
      uint64_t v54 = 2;
      unint64_t v5 = &v52;
      uint64_t v6 = (char *)v56;
      if (v57 >= v58)
      {
        unint64_t v38 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          int64_t v44 = (char *)&v52 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v38, 24);
          uint64_t v6 = (char *)v56;
          unint64_t v5 = (void ***)((char *)v56 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v38, 24);
          unint64_t v5 = &v52;
          uint64_t v6 = (char *)v56;
        }
      }
      uint64_t v7 = &v6[24 * v57];
      long long v8 = *(_OWORD *)v5;
      *((void *)v7 + 2) = v5[2];
      *(_OWORD *)uint64_t v7 = v8;
      uint64_t v9 = ++v57;
      if (v55[0])
      {
        LODWORD(v52) = 5;
        uint64_t v53 = 1;
        int v10 = &v52;
        int v11 = (char *)v56;
        if (v9 >= v58)
        {
          unint64_t v39 = v9 + 1;
          BOOL v40 = (char *)v56 + 24 * v9 > (char *)&v52;
          if (v56 <= &v52 && v40)
          {
            int64_t v45 = (char *)&v52 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
            int v11 = (char *)v56;
            int v10 = (void ***)((char *)v56 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
            int v10 = &v52;
            int v11 = (char *)v56;
          }
        }
        uint64_t v12 = &v11[24 * v57];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v10[2];
        *(_OWORD *)uint64_t v12 = v13;
        uint64_t v14 = ++v57;
        if (v55[0])
        {
          LODWORD(v52) = 3;
          uint64_t v53 = (uint64_t)" must be 1D memref of signless integer or index values, but got ";
          uint64_t v54 = 64;
          uint64_t v15 = &v52;
          uint64_t v16 = (char *)v56;
          if (v14 >= v58)
          {
            unint64_t v41 = v14 + 1;
            BOOL v42 = (char *)v56 + 24 * v14 > (char *)&v52;
            if (v56 <= &v52 && v42)
            {
              int64_t v46 = (char *)&v52 - (unsigned char *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
              uint64_t v16 = (char *)v56;
              uint64_t v15 = (void ***)((char *)v56 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
              uint64_t v15 = &v52;
              uint64_t v16 = (char *)v56;
            }
          }
          uint64_t v17 = &v16[24 * v57];
          long long v18 = *(_OWORD *)v15;
          *((void *)v17 + 2) = v15[2];
          *(_OWORD *)uint64_t v17 = v18;
          ++v57;
          if (v55[0])
          {
            unint64_t v19 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)v3);
            uint64_t v20 = (char *)v56;
            if (v57 >= v58)
            {
              unint64_t v43 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                int64_t v47 = (char *)&v52 - (unsigned char *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
                uint64_t v20 = (char *)v56;
                unint64_t v19 = (void ***)((char *)v56 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
                unint64_t v19 = &v52;
                uint64_t v20 = (char *)v56;
              }
            }
            uint64_t v21 = &v20[24 * v57];
            long long v22 = *(_OWORD *)v19;
            *((void *)v21 + 2) = v19[2];
            *(_OWORD *)uint64_t v21 = v22;
            ++v57;
          }
        }
      }
    }
    char v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    }
    if (v64)
    {
      uint64_t v24 = __p;
      if (__p)
      {
        uint64_t v25 = v63;
        uint64_t v26 = __p;
        if (v63 != __p)
        {
          do
            uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          uint64_t v26 = __p;
        }
        uint64_t v63 = v24;
        operator delete(v26);
      }
      uint64_t v27 = v60;
      if (v60)
      {
        uint64_t v28 = v61;
        uint64_t v29 = v60;
        if (v61 != v60)
        {
          do
          {
            uint64_t v31 = *--v28;
            uint64_t v30 = v31;
            void *v28 = 0;
            if (v31) {
              MEMORY[0x21667D390](v30, 0x1000C8077774924);
            }
          }
          while (v28 != v27);
          uint64_t v29 = v60;
        }
        unint64_t v61 = v27;
        operator delete(v29);
      }
      if (v56 != v59) {
        free(v56);
      }
    }
    if (!v23) {
      return 0;
    }
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v35 = *(void *)this - 16;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v35, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", (void **)6, 0) != 0;
}

BOOL mlir::memref::ReshapeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v15[4] = *MEMORY[0x263EF8340];
  memset(v15, 0, 24);
  v13[0] = v15;
  v13[1] = 1;
  memset(v14, 0, 24);
  v12[0] = v14;
  v12[1] = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v15, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 264))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v14, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 280))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  uint64_t v10 = 0;
  if (!mlir::AsmParser::parseType<mlir::FunctionType>(a1, &v10)) {
    return 0;
  }
  v11[0] = mlir::FunctionType::getInputs((mlir::FunctionType *)&v10);
  v11[1] = v4;
  uint64_t Results = (void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v10);
  mlir::OperationState::addTypes(a2, Results, v6);
  v9[0] = v13;
  v9[1] = v12;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return mlir::OpAsmParser::resolveOperands<llvm::detail::concat_range<mlir::OpAsmParser::UnresolvedOperand const,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &>,llvm::ArrayRef<mlir::Type> &>(a1, v9, v11, v7, a2 + 16) != 0;
}

void mlir::memref::ReshapeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v30[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "(", 1uLL);
  }
  else
  {
    unsigned char *v7 = 40;
    ++*((void *)v6 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  long long v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if (*((unsigned char **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, ")", 1uLL);
  }
  else
  {
    unsigned char *v9 = 41;
    ++*((void *)v8 + 4);
  }
  uint64_t v28 = v30;
  uint64_t v29 = 0x200000000;
  uint64_t v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v26[0] = mlir::Operation::getAttrDictionary(v10);
    int v11 = (mlir::ArrayAttr *)v26;
  }
  else
  {
    int v11 = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v11);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v28, v29);
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *uint64_t v17 = 58;
    ++*((void *)v16 + 4);
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *unint64_t v19 = 32;
  }
  uint64_t v20 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0)
  {
    uint64_t v21 = *((void *)v20 + 9);
    uint64_t v22 = *((unsigned int *)v20 + 17);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
  }
  v25[0] = v21;
  v25[1] = v22;
  mlir::OperandRange::getTypes(v25, v26);
  uint64_t v23 = *((unsigned int *)*this + 9);
  uint64_t v24 = (uint64_t)*this - 16;
  if (!v23) {
    uint64_t v24 = 0;
  }
  v27[0] = v24;
  v27[1] = v23;
  mlir::OperandRange::getTypes(v27, v25);
  mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>((uint64_t)a2, v26, v25);
  if (v28 != v30) {
    free(v28);
  }
}

uint64_t mlir::memref::detail::StoreOpGenericAdaptorBase::StoreOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.store", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::StoreOp::getIndicesMutable@<X0>(mlir::memref::StoreOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    int v3 = *(_DWORD *)(v2 + 68) - 2;
  }
  else {
    int v3 = -2;
  }
  return mlir::MutableOperandRange::MutableOperandRange(a2, v2, 2, v3, 0, 0);
}

BOOL mlir::memref::StoreOp::readProperties(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::memref::StoreOp::verifyInvariantsImpl(mlir::memref::StoreOp *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  int v3 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  v22[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v3, (void **)"nontemporal", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, 1u))
  {
    return 0;
  }
  uint64_t v4 = *(void *)this;
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) == 0)
  {
    uint64_t v6 = -2;
    uint64_t v7 = 64;
LABEL_6:
    uint64_t v8 = 0;
    uint64_t v9 = v7 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*(void *)this, *(void *)(*(void *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", (void **)7, (int)v8 + 2))
    {
      ++v8;
      v9 += 32;
      if (v6 == v8)
      {
        uint64_t v4 = *(void *)this;
        goto LABEL_10;
      }
    }
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(v4 + 68);
  uint64_t v6 = v5 - 2;
  if (v5 != 2)
  {
    uint64_t v7 = *(void *)(v4 + 72) + 64;
    goto LABEL_6;
  }
LABEL_10:
  v22[0] = *(void *)(*(void *)(*(void *)(v4 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v22) == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24)
                                                                                       + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  uint64_t v20 = (void **)"failed to verify that type of 'value' matches element type of 'memref'";
  __int16 v21 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v20, (uint64_t)v22);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  }
  if (v29)
  {
    uint64_t v11 = __p;
    if (__p)
    {
      uint64_t v12 = v28;
      uint64_t v13 = __p;
      if (v28 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      uint64_t v28 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v25;
    if (v25)
    {
      uint64_t v15 = v26;
      uint64_t v16 = v25;
      if (v26 != v25)
      {
        do
        {
          uint64_t v18 = *--v15;
          uint64_t v17 = v18;
          void *v15 = 0;
          if (v18) {
            MEMORY[0x21667D390](v17, 0x1000C8077774924);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v25;
      }
      uint64_t v26 = v14;
      operator delete(v16);
    }
    if (v23 != &v24) {
      free(v23);
    }
  }
  return v10;
}

uint64_t mlir::memref::StoreOp::parse(uint64_t a1, uint64_t a2)
{
  v34[4] = *MEMORY[0x263EF8340];
  memset(v34, 0, 24);
  memset(v33, 0, 24);
  v25[0] = (uint64_t)v33;
  v25[1] = 1;
  uint64_t v29 = 0;
  uint64_t v30 = v32;
  uint64_t v31 = 0x400000000;
  v24[0] = &v29;
  v24[1] = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v34, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v33, 1))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 296))(a1))
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, &v30, 0, 1, 0xFFFFFFFFLL))
          {
            if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 312))(a1))
            {
              v21[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
              if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
              {
                uint64_t v5 = *(void *)(a2 + 8);
                uint64_t v26 = a1;
                uint64_t v27 = v21;
                uint64_t v28 = a2;
                if (mlir::memref::LoadOp::verifyInherentAttrs(v5, a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::StoreOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v26))
                {
                  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
                  {
                    uint64_t v26 = 0;
                    if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v26))
                    {
                      uint64_t v6 = v26;
                      uint64_t v29 = v26;
                      uint64_t v23 = v26;
                      if (*(_UNKNOWN **)(*(void *)v26 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
                      {
                        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                        __int16 v22 = 257;
                        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(&v26, a1, v7, v21);
                        uint64_t v8 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v26, "'memref' must be memref of any type values, but got ");
                        uint64_t v9 = mlir::InFlightDiagnostic::append<mlir::Type &>(v8, &v23);
                        uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
                        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v26);
                        uint64_t v11 = v30;
                        if (v30 == v32) {
                          return v10;
                        }
                        goto LABEL_23;
                      }
                      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v26 + 8);
                      uint64_t v26 = v6;
                      uint64_t v27 = (void *)v12;
                      mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
                      uint64_t v13 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
                      uint64_t IndexType = mlir::Builder::getIndexType(v13, v14);
                      uint64_t v26 = v29;
                      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26);
                      uint64_t v17 = a2 + 16;
                      if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v34, RHS, v17))
                      {
                        if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v25, v24, v4, v17))
                        {
                          if (!v31)
                          {
                            uint64_t v10 = 1;
                            uint64_t v11 = v30;
                            if (v30 == v32) {
                              return v10;
                            }
                            goto LABEL_23;
                          }
                          uint64_t v18 = (char *)v30;
                          uint64_t v19 = 32 * v31;
                          uint64_t v10 = 1;
                          while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v18, IndexType, v17))
                          {
                            v18 += 32;
                            v19 -= 32;
                            if (!v19) {
                              goto LABEL_22;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v10 = 0;
LABEL_22:
  uint64_t v11 = v30;
  if (v30 != v32) {
LABEL_23:
  }
    free(v11);
  return v10;
}

void mlir::memref::StoreOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v36[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    unsigned char *v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if (*((unsigned char **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "[", 1uLL);
    uint64_t v12 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *uint64_t v11 = 91;
    ++*((void *)v10 + 4);
    uint64_t v12 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_12:
      uint64_t v13 = *((unsigned int *)v12 + 17);
      uint64_t v14 = *((void *)v12 + 9);
      uint64_t v15 = v13 - 2;
      goto LABEL_13;
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = -2;
LABEL_13:
  uint64_t v16 = v14 + 64;
  uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v34 = ", ";
  uint64_t v35 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v16, 0, v16, v15, (uint64_t)a2, v17, (uint64_t)&v34);
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if (*((unsigned char **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, "]", 1uLL);
  }
  else
  {
    *uint64_t v19 = 93;
    ++*((void *)v18 + 4);
  }
  uint64_t v34 = v36;
  uint64_t v35 = 0x200000000;
  uint64_t Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v20 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v20 && v20 == mlir::Builder::getBoolAttr(&Context, 0))
  {
    unsigned int v23 = v35;
    if (v35 >= HIDWORD(v35))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 16);
      unsigned int v23 = v35;
    }
    uint64_t v24 = (char *)v34 + 16 * v23;
    *uint64_t v24 = "nontemporal";
    v24[1] = 11;
    LODWORD(v35) = v35 + 1;
    __int16 v21 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_21;
    }
  }
  else
  {
    __int16 v21 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_21:
      p_uint64_t Context = (mlir::Operation *)((char *)v21 + 56);
      goto LABEL_26;
    }
  }
  uint64_t Context = (mlir::BoolAttr *)mlir::Operation::getAttrDictionary(v21);
  p_uint64_t Context = (mlir::ArrayAttr *)&Context;
LABEL_26:
  uint64_t Value = mlir::ArrayAttr::getValue(p_Context);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v26, v34, v35);
  uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = (unsigned char *)*((void *)v27 + 4);
  if ((unint64_t)v28 >= *((void *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((void *)v27 + 4) = v28 + 1;
    unsigned char *v28 = 32;
  }
  uint64_t v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v30 = (unsigned char *)*((void *)v29 + 4);
  if (*((unsigned char **)v29 + 3) == v30)
  {
    llvm::raw_ostream::write(v29, ":", 1uLL);
  }
  else
  {
    *uint64_t v30 = 58;
    ++*((void *)v29 + 4);
  }
  uint64_t v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v32 = (unsigned char *)*((void *)v31 + 4);
  if ((unint64_t)v32 >= *((void *)v31 + 3))
  {
    llvm::raw_ostream::write(v31, 32);
  }
  else
  {
    *((void *)v31 + 4) = v32 + 1;
    unsigned char *v32 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v34 != v36) {
    free(v34);
  }
}

void mlir::memref::StoreOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
  uint64_t v4 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  {
    uint64_t v24 = v4;
    uint64_t v4 = v24;
    if (v15)
    {
      {
        uint64_t v25 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        unint64_t v26 = 84;
        unint64_t v17 = llvm::StringRef::find((uint64_t *)&v25, "DesiredTypeName = ", 0x12uLL, 0);
        if (v26 >= v17) {
          unint64_t v18 = v17;
        }
        else {
          unint64_t v18 = v26;
        }
        uint64_t v19 = &v25[v18];
        unint64_t v20 = v26 - v18;
        if (v26 - v18 >= 0x12) {
          uint64_t v21 = 18;
        }
        else {
          uint64_t v21 = v26 - v18;
        }
        unint64_t v22 = v20 - v21;
        if (v22 >= v22 - 1) {
          uint64_t v23 = v22 - 1;
        }
        else {
          uint64_t v23 = v22;
        }
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_26C35C6D0;
      *(void *)algn_267771CD8 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      __cxa_atexit((void (*)(void *))mlir::SideEffects::DefaultResource::~DefaultResource, &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance, &dword_210C72000);
      uint64_t v4 = v24;
    }
  }
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 >= *(_DWORD *)(a2 + 12))
  {
    uint64_t v7 = (void *)(a2 + 16);
    uint64_t v25 = (const char *)v4;
    unint64_t v26 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    uint64_t v27 = v3 | 4;
    uint64_t v28 = 0;
    int v29 = 0;
    char v30 = 0;
    unint64_t v8 = v5 + 1;
    BOOL v9 = *(void *)a2 + 40 * (unint64_t)v5 > (unint64_t)&v25;
    if (*(void *)a2 <= (unint64_t)&v25 && v9)
    {
      uint64_t v16 = (char *)&v25 - *(void *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v7, v8, 40);
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = (const char **)&v16[*(void *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v7, v8, 40);
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = &v25;
    }
    uint64_t v12 = v10 + 40 * *(unsigned int *)(a2 + 8);
    long long v13 = *(_OWORD *)v11;
    long long v14 = *((_OWORD *)v11 + 1);
    *(void *)(v12 + 32) = v11[4];
    *(_OWORD *)uint64_t v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
  }
  else
  {
    uint64_t v6 = *(void *)a2 + 40 * v5;
    *(void *)uint64_t v6 = v4;
    *(void *)(v6 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(void *)(v6 + 16) = v3 | 4;
    *(void *)(v6 + 24) = 0;
    *(_DWORD *)(v6 + 32) = 0;
    *(unsigned char *)(v6 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t mlir::memref::detail::TransposeOpGenericAdaptorBase::TransposeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "memref.transpose", 16, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::TransposeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unsigned int v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      unint64_t v26 = &v56;
      uint64_t v27 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v27 = (char *)v60;
          unint64_t v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          unint64_t v26 = &v56;
          uint64_t v27 = (char *)v60;
        }
      }
      uint64_t v28 = &v27[24 * v61];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    char v30 = __p;
    if (__p)
    {
      uint64_t v31 = v67;
      uint64_t v32 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p;
      }
      char v67 = v30;
      operator delete(v32);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    uint64_t v33 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "permutation", 0xBuLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      unsigned int v57 = "expected key entry for permutation in DictionaryAttr to set Properties.";
      uint64_t v58 = 71;
      int64_t v36 = &v56;
      uint64_t v37 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v53 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          uint64_t v37 = (char *)v60;
          int64_t v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          int64_t v36 = &v56;
          uint64_t v37 = (char *)v60;
        }
      }
      unint64_t v38 = &v37[24 * v61];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = *((void *)v36 + 2);
      *(_OWORD *)unint64_t v38 = v39;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    BOOL v40 = __p;
    if (__p)
    {
      unint64_t v41 = v67;
      BOOL v42 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        BOOL v42 = __p;
      }
      char v67 = v40;
      operator delete(v42);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unint64_t v43 = v65;
    uint64_t v23 = v64;
    if (v65 == v64) {
      goto LABEL_58;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      void *v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 56;
    uint64_t v10 = &v56;
    uint64_t v11 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v52 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v11 = (char *)v60;
        uint64_t v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        uint64_t v10 = &v56;
        uint64_t v11 = (char *)v60;
      }
    }
    uint64_t v12 = &v11[24 * v61];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v61;
    if (v59[0])
    {
      long long v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      int v15 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          int v15 = (char *)v60;
          long long v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          long long v14 = &v56;
          int v15 = (char *)v60;
        }
      }
      uint64_t v16 = &v15[24 * v61];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    unint64_t v18 = __p;
    if (__p)
    {
      uint64_t v19 = v67;
      unint64_t v20 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        unint64_t v20 = __p;
      }
      char v67 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v64;
    if (!v64) {
      goto LABEL_59;
    }
    unint64_t v22 = v65;
    uint64_t v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      uint64_t v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *unint64_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_57:
    uint64_t v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::memref::TransposeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"permutation", 11, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  uint64_t *v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::TransposeOp::getInherentAttr(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a4 == 11
    && (*a3 == 0x746174756D726570 ? (BOOL v4 = *(void *)((char *)a3 + 3) == 0x6E6F69746174756DLL) : (BOOL v4 = 0), v4))
  {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else
  {
    return 0;
  }
}

void *mlir::memref::TransposeOp::setInherentAttr(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 11 && *a2 == 0x746174756D726570 && *(void *)((char *)a2 + 3) == 0x6E6F69746174756DLL)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id) {
        uint64_t v5 = a4;
      }
      else {
        uint64_t v5 = 0;
      }
      *uint64_t result = v5;
    }
    else
    {
      *uint64_t result = 0;
    }
  }
  return result;
}