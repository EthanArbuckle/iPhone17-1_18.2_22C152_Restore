void sub_2111D1660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a68;
  void *a71;
  void *a72;
  uint64_t v72;
  void *v74;
  void *v75;

  v74 = (void *)STACK[0x4F0];
  if (STACK[0x4F0])
  {
    STACK[0x4F8] = (unint64_t)v74;
    operator delete(v74);
  }
  v75 = (void *)STACK[0x440];
  if (STACK[0x440])
  {
    STACK[0x448] = (unint64_t)v75;
    operator delete(v75);
  }
  if (a68) {
    operator delete(a68);
  }
  if (a71) {
    operator delete(a71);
  }
  *(void *)(v72 - 144) = &unk_26C34DA98;
  if (*(char *)(v72 - 113) < 0) {
    operator delete(*(void **)(v72 - 136));
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a72);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinConvPoolLargeStride::DecomposeLargeStridePoolNoSeparatePaddingLayer(int a1, uint64_t a2, void *a3, uint64_t **a4, uint64_t *a5)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a5;
  for (uint64_t i = a5[1];
        i != v10;
  a5[1] = v10;
  a4[1] = *a4;
  uint64_t v11 = *(void *)(a2 + 88);
  uint64_t v139 = *(int *)(a2 + 124);
  uint64_t v12 = *(int *)(a2 + 128) + v139 + a3[3];
  uint64_t v126 = *(int *)(a2 + 112);
  uint64_t v127 = (v12 - v11) / v126;
  if (v127 < 0 || v12 < v11)
  {
    uint64_t v148 = 1;
    uint64_t v13 = 1;
    uint64_t v147 = 1;
    uint64_t v146 = 1;
    goto LABEL_117;
  }
  uint64_t v125 = *(int *)(a2 + 128) + v139 + a3[3];
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(a2 + 96);
  uint64_t v16 = *(int *)(a2 + 132);
  uint64_t v138 = *(int *)(a2 + 136) + v16 + a3[2];
  uint64_t v132 = 0;
  uint64_t v133 = *(int *)(a2 + 116);
  uint64_t v140 = (v138 - v15) / v133;
  uint64_t v144 = v15;
  uint64_t v136 = v16;
  int v130 = v15 - v16;
  uint64_t v134 = (uint64_t)(a4 + 2);
  int v129 = v11 - v139;
  v131 = (std::string *)(a2 + 8);
  v17 = (long long *)(a2 + 80);
  uint64_t v135 = a2;
  uint64_t v148 = 1;
  uint64_t v147 = 1;
  uint64_t v146 = 1;
  int v18 = a1;
  uint64_t v141 = v11;
  do
  {
    uint64_t v142 = v14;
    if ((v140 & 0x8000000000000000) == 0 && v138 >= v144)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v128 = v132 - v139;
      while (1)
      {
        memset(&v162[1], 0, 24);
        uint64_t v165 = 0;
        uint64_t v166 = 0;
        uint64_t v164 = 0;
        uint64_t v169 = -1;
        v162[0] = &unk_26C34F860;
        int v172 = 1;
        int v21 = *((_DWORD *)a3 + 4);
        if (v20)
        {
          if (v19 >= v136)
          {
            int v22 = v19 - v136;
            int v24 = v21 - (v19 - v136);
            if (v24 >= (int)v144) {
              int v23 = v144;
            }
            else {
              int v23 = v24;
            }
          }
          else
          {
            int v22 = 0;
            if ((int)v136 - (int)v19 + v21 >= (int)v144) {
              int v23 = v19 - v136 + v144;
            }
            else {
              int v23 = *((_DWORD *)a3 + 4);
            }
          }
        }
        else
        {
          int v22 = 0;
          if ((int)v136 + v21 >= (int)v144) {
            int v23 = v130;
          }
          else {
            int v23 = *((_DWORD *)a3 + 4);
          }
        }
        int v171 = v23;
        int v173 = 3;
        int v163 = 17;
        int v167 = v18;
        int v170 = v22;
        int v168 = v18;
        ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v174, (ZinIrInputViewUnitInfo *)v162);
        unint64_t v25 = a5[1];
        if (v25 >= a5[2])
        {
          uint64_t v26 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v174);
        }
        else
        {
          LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v174);
          uint64_t v26 = v25 + 344;
          a5[1] = v25 + 344;
        }
        a5[1] = v26;
        LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v174);
        uint64_t v146 = *a3;
        uint64_t v147 = a3[1];
        uint64_t v27 = a3[3];
        uint64_t v148 = a3[4];
        uint64_t v145 = v171;
        v28 = a4[1];
        v29 = a4[2];
        if (v28 >= v29)
        {
          unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * (v28 - *a4);
          unint64_t v34 = v33 + 1;
          if (v33 + 1 > 0x666666666666666) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * (v29 - *a4);
          if (2 * v35 > v34) {
            unint64_t v34 = 2 * v35;
          }
          if (v35 >= 0x333333333333333) {
            unint64_t v36 = 0x666666666666666;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36) {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v134, v36);
          }
          else {
            v37 = 0;
          }
          v38 = &v37[40 * v33];
          long long v39 = *(_OWORD *)a3;
          long long v40 = *((_OWORD *)a3 + 1);
          *((void *)v38 + 4) = a3[4];
          *(_OWORD *)v38 = v39;
          *((_OWORD *)v38 + 1) = v40;
          v42 = *a4;
          v41 = (char *)a4[1];
          v43 = v38;
          if (v41 != (char *)*a4)
          {
            do
            {
              long long v44 = *(_OWORD *)(v41 - 40);
              long long v45 = *(_OWORD *)(v41 - 24);
              *((void *)v43 - 1) = *((void *)v41 - 1);
              *(_OWORD *)(v43 - 24) = v45;
              *(_OWORD *)(v43 - 40) = v44;
              v43 -= 40;
              v41 -= 40;
            }
            while (v41 != (char *)v42);
            v41 = (char *)*a4;
          }
          v32 = v38 + 40;
          *a4 = (uint64_t *)v43;
          a4[1] = (uint64_t *)(v38 + 40);
          a4[2] = (uint64_t *)&v37[40 * v36];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          long long v30 = *(_OWORD *)a3;
          long long v31 = *((_OWORD *)a3 + 1);
          v28[4] = a3[4];
          *(_OWORD *)v28 = v30;
          *((_OWORD *)v28 + 1) = v31;
          v32 = (char *)(v28 + 5);
        }
        a4[1] = (uint64_t *)v32;
        int v46 = *((_DWORD *)a3 + 6);
        int v47 = v142;
        if (v142)
        {
          if (v132 >= v139)
          {
            if (v46 - v128 >= (int)v141) {
              int v50 = v141;
            }
            else {
              int v50 = v46 - v128;
            }
            int v47 = v132 - v139;
            goto LABEL_52;
          }
          int v47 = 0;
          BOOL v48 = (int)v139 - (int)v132 + v46 < (int)v141;
          int v49 = v132 - v139 + v141;
        }
        else
        {
          BOOL v48 = (int)v139 + v46 < (int)v141;
          int v49 = v129;
        }
        if (v48) {
          int v50 = *((_DWORD *)a3 + 6);
        }
        else {
          int v50 = v49;
        }
LABEL_52:
        int v170 = v47;
        int v171 = v50;
        int v173 = 4;
        ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v174, (ZinIrInputViewUnitInfo *)v162);
        unint64_t v51 = a5[1];
        if (v51 >= a5[2])
        {
          uint64_t v52 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v174);
        }
        else
        {
          LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v174);
          uint64_t v52 = v51 + 344;
          a5[1] = v51 + 344;
        }
        a5[1] = v52;
        LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v174);
        uint64_t v143 = v171;
        v54 = a4[1];
        unint64_t v53 = (unint64_t)a4[2];
        if ((unint64_t)v54 >= v53)
        {
          v56 = *a4;
          unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * (v54 - *a4);
          unint64_t v58 = v57 + 1;
          if (v57 + 1 > 0x666666666666666) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - (void)v56) >> 3);
          if (2 * v59 > v58) {
            unint64_t v58 = 2 * v59;
          }
          if (v59 >= 0x333333333333333) {
            unint64_t v60 = 0x666666666666666;
          }
          else {
            unint64_t v60 = v58;
          }
          if (v60)
          {
            v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v134, v60);
            v56 = *a4;
            v54 = a4[1];
          }
          else
          {
            v61 = 0;
          }
          v62 = (uint64_t *)&v61[40 * v57];
          uint64_t *v62 = v146;
          v62[1] = v147;
          v62[2] = v145;
          v62[3] = v27;
          v62[4] = v148;
          v63 = v62;
          if (v54 != v56)
          {
            do
            {
              long long v64 = *(_OWORD *)(v54 - 5);
              long long v65 = *(_OWORD *)(v54 - 3);
              *(v63 - 1) = *(v54 - 1);
              *(_OWORD *)(v63 - 3) = v65;
              *(_OWORD *)(v63 - 5) = v64;
              v63 -= 5;
              v54 -= 5;
            }
            while (v54 != v56);
            v56 = *a4;
          }
          v55 = v62 + 5;
          *a4 = v63;
          a4[1] = v62 + 5;
          a4[2] = (uint64_t *)&v61[40 * v60];
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          uint64_t *v54 = v146;
          v54[1] = v147;
          v54[2] = v145;
          v54[3] = v27;
          v55 = v54 + 5;
          v54[4] = v148;
        }
        a4[1] = v55;
        v149 = &unk_26C345B80;
        if (*(char *)(v135 + 31) < 0) {
          std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)(v135 + 8), *(void *)(v135 + 16));
        }
        else {
          std::string v150 = *v131;
        }
        int v151 = *(_DWORD *)(v135 + 32);
        *(void *)&long long v153 = 0;
        long long v152 = 0uLL;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v152, *(long long **)(v135 + 40), *(long long **)(v135 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v135 + 48) - *(void *)(v135 + 40)) >> 3));
        v149 = &unk_26C34AB58;
        int v161 = *((_DWORD *)v17 + 20);
        long long v66 = v17[4];
        *(_OWORD *)&v160[4] = v17[3];
        *(_OWORD *)&v160[20] = v66;
        long long v155 = *v17;
        uint64_t v158 = 0x100000001;
        int v159 = 1;
        uint64_t v156 = v23;
        uint64_t v157 = 1;
        memset(v160, 0, 25);
        int v18 = a1;
        HIDWORD(v153) = a1;
        uint64_t v67 = a3[1];
        *((void *)&v155 + 1) = v50;
        uint64_t v154 = v67;
        DWORD2(v153) = a1;
        int v151 = 2;
        ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v174, (ZinIrPoolUnitInfo *)&v149);
        unint64_t v68 = a5[1];
        if (v68 >= a5[2])
        {
          uint64_t v69 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v174);
        }
        else
        {
          LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v174);
          uint64_t v69 = v68 + 344;
          a5[1] = v68 + 344;
        }
        a5[1] = v69;
        LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v174);
        v71 = a4[1];
        unint64_t v70 = (unint64_t)a4[2];
        if ((unint64_t)v71 >= v70)
        {
          v73 = *a4;
          unint64_t v74 = 0xCCCCCCCCCCCCCCCDLL * (v71 - *a4);
          unint64_t v75 = v74 + 1;
          if (v74 + 1 > 0x666666666666666) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v76 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v70 - (void)v73) >> 3);
          if (2 * v76 > v75) {
            unint64_t v75 = 2 * v76;
          }
          if (v76 >= 0x333333333333333) {
            unint64_t v77 = 0x666666666666666;
          }
          else {
            unint64_t v77 = v75;
          }
          if (v77)
          {
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v134, v77);
            v73 = *a4;
            v71 = a4[1];
          }
          else
          {
            v78 = 0;
          }
          v79 = (uint64_t *)&v78[40 * v74];
          uint64_t *v79 = v146;
          v79[1] = v147;
          v79[2] = v145;
          v79[3] = v143;
          v79[4] = v148;
          v80 = v79;
          if (v71 != v73)
          {
            do
            {
              long long v81 = *(_OWORD *)(v71 - 5);
              long long v82 = *(_OWORD *)(v71 - 3);
              *(v80 - 1) = *(v71 - 1);
              *(_OWORD *)(v80 - 3) = v82;
              *(_OWORD *)(v80 - 5) = v81;
              v80 -= 5;
              v71 -= 5;
            }
            while (v71 != v73);
            v73 = *a4;
          }
          v72 = v79 + 5;
          *a4 = v80;
          a4[1] = v79 + 5;
          a4[2] = (uint64_t *)&v78[40 * v77];
          if (v73) {
            operator delete(v73);
          }
        }
        else
        {
          uint64_t *v71 = v146;
          v71[1] = v147;
          v71[2] = v145;
          v71[3] = v143;
          v72 = v71 + 5;
          v71[4] = v148;
        }
        a4[1] = v72;
        ZinIrUnitInfo::~ZinIrUnitInfo(&v149);
        ZinIrUnitInfo::~ZinIrUnitInfo(v162);
        if (v140 >= ++v20)
        {
          uint64_t v19 = v20 * v133;
          if (v138 - v20 * v133 >= v144) {
            continue;
          }
        }
        break;
      }
    }
    memset(&v150, 0, sizeof(v150));
    *(void *)&long long v153 = 0;
    long long v152 = 0uLL;
    uint64_t v154 = -1;
    v149 = &unk_26C34C998;
    BYTE4(v155) = 0;
    int v151 = 3;
    DWORD2(v153) = v18;
    LODWORD(v155) = 3;
    HIDWORD(v153) = v18;
    ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v174, (ZinIrConcatUnitInfo *)&v149);
    unint64_t v83 = a5[1];
    if (v83 >= a5[2])
    {
      uint64_t v84 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v174);
    }
    else
    {
      LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v174);
      uint64_t v84 = v83 + 344;
      a5[1] = v83 + 344;
    }
    a5[1] = v84;
    LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v174);
    v86 = (int64x2_t *)a4[1];
    unint64_t v85 = (unint64_t)a4[2];
    if ((unint64_t)v86 >= v85)
    {
      v88 = (int64x2_t *)*a4;
      unint64_t v89 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v86 - (char *)*a4) >> 3);
      unint64_t v90 = v89 + 1;
      if (v89 + 1 > 0x666666666666666) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v91 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v85 - (void)v88) >> 3);
      if (2 * v91 > v90) {
        unint64_t v90 = 2 * v91;
      }
      if (v91 >= 0x333333333333333) {
        unint64_t v92 = 0x666666666666666;
      }
      else {
        unint64_t v92 = v90;
      }
      if (v92)
      {
        v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v134, v92);
        v88 = (int64x2_t *)*a4;
        v86 = (int64x2_t *)a4[1];
      }
      else
      {
        v93 = 0;
      }
      v94 = (int64x2_t *)&v93[40 * v89];
      v94->i64[0] = v146;
      v94->i64[1] = v147;
      v94[1] = vdupq_n_s64(1uLL);
      v94[2].i64[0] = v148;
      v95 = v94;
      if (v86 != v88)
      {
        do
        {
          int64x2_t v96 = *(int64x2_t *)((char *)v86 - 40);
          int64x2_t v97 = *(int64x2_t *)((char *)v86 - 24);
          v95[-1].i64[1] = v86[-1].i64[1];
          *(int64x2_t *)((char *)v95 - 24) = v97;
          *(int64x2_t *)((char *)v95 - 40) = v96;
          v95 = (int64x2_t *)((char *)v95 - 40);
          v86 = (int64x2_t *)((char *)v86 - 40);
        }
        while (v86 != v88);
        v88 = (int64x2_t *)*a4;
      }
      v87 = &v94[2].i8[8];
      *a4 = (uint64_t *)v95;
      a4[1] = &v94[2].i64[1];
      a4[2] = (uint64_t *)&v93[40 * v92];
      if (v88) {
        operator delete(v88);
      }
    }
    else
    {
      v86->i64[0] = v146;
      v86->i64[1] = v147;
      v86[1] = vdupq_n_s64(1uLL);
      v86[2].i64[0] = v148;
      v87 = &v86[2].i8[8];
    }
    a4[1] = (uint64_t *)v87;
    ZinIrUnitInfo::~ZinIrUnitInfo(&v149);
    uint64_t v14 = v142 + 1;
    if (v127 < (v142 + 1)) {
      break;
    }
    uint64_t v132 = v14 * v126;
  }
  while (v125 - v14 * v126 >= v141);
  uint64_t v13 = v140 + 1;
LABEL_117:
  memset(&v150, 0, sizeof(v150));
  long long v152 = 0u;
  long long v153 = 0u;
  uint64_t v154 = -1;
  v149 = &unk_26C34C998;
  BYTE4(v155) = 0;
  int v151 = 3;
  LODWORD(v155) = 4;
  ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)v174, (ZinIrConcatUnitInfo *)&v149);
  unint64_t v98 = a5[1];
  if (v98 >= a5[2])
  {
    uint64_t v99 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a5, (const LargeStrideConvPoolDecomposedDesc *)v174);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a5[1], (const LargeStrideConvPoolDecomposedDesc *)v174);
    uint64_t v99 = v98 + 344;
    a5[1] = v98 + 344;
  }
  a5[1] = v99;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)v174);
  v100 = a4[2];
  v101 = a4[1];
  if (v101 < v100)
  {
    uint64_t *v101 = v146;
    v101[1] = v147;
    v101[2] = v13;
    v101[3] = 1;
    v102 = v101 + 5;
    v101[4] = v148;
    goto LABEL_136;
  }
  v103 = *a4;
  unint64_t v104 = 0xCCCCCCCCCCCCCCCDLL * (v101 - *a4);
  unint64_t v105 = v104 + 1;
  if (v104 + 1 > 0x666666666666666) {
    goto LABEL_157;
  }
  unint64_t v106 = 0xCCCCCCCCCCCCCCCDLL * (v100 - v103);
  if (2 * v106 > v105) {
    unint64_t v105 = 2 * v106;
  }
  if (v106 >= 0x333333333333333) {
    unint64_t v107 = 0x666666666666666;
  }
  else {
    unint64_t v107 = v105;
  }
  if (v107)
  {
    v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v107);
    v103 = *a4;
    v101 = a4[1];
  }
  else
  {
    v108 = 0;
  }
  v109 = (uint64_t *)&v108[40 * v104];
  v100 = (uint64_t *)&v108[40 * v107];
  uint64_t *v109 = v146;
  v109[1] = v147;
  v109[2] = v13;
  v109[3] = 1;
  v109[4] = v148;
  v102 = v109 + 5;
  if (v101 != v103)
  {
    do
    {
      long long v110 = *(_OWORD *)(v101 - 5);
      long long v111 = *(_OWORD *)(v101 - 3);
      *(v109 - 1) = *(v101 - 1);
      *(_OWORD *)(v109 - 3) = v111;
      *(_OWORD *)(v109 - 5) = v110;
      v109 -= 5;
      v101 -= 5;
    }
    while (v101 != v103);
    v103 = *a4;
  }
  *a4 = v109;
  a4[1] = v102;
  a4[2] = v100;
  if (v103)
  {
    operator delete(v103);
    v100 = a4[2];
  }
LABEL_136:
  uint64_t v112 = v127 + 1;
  a4[1] = v102;
  if (v102 < v100)
  {
    uint64_t *v102 = v146;
    v102[1] = v147;
    v102[2] = v13;
    v102[3] = v112;
    v113 = v102 + 5;
    v102[4] = v148;
    goto LABEL_152;
  }
  v114 = *a4;
  unint64_t v115 = 0xCCCCCCCCCCCCCCCDLL * (v102 - *a4);
  unint64_t v116 = v115 + 1;
  if (v115 + 1 > 0x666666666666666) {
LABEL_157:
  }
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  unint64_t v117 = 0xCCCCCCCCCCCCCCCDLL * (v100 - v114);
  if (2 * v117 > v116) {
    unint64_t v116 = 2 * v117;
  }
  if (v117 >= 0x333333333333333) {
    unint64_t v118 = 0x666666666666666;
  }
  else {
    unint64_t v118 = v116;
  }
  if (v118)
  {
    v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v118);
    v114 = *a4;
    v102 = a4[1];
  }
  else
  {
    v119 = 0;
  }
  v120 = (uint64_t *)&v119[40 * v115];
  uint64_t *v120 = v146;
  v120[1] = v147;
  v120[2] = v13;
  v121 = &v119[40 * v118];
  v120[3] = v112;
  v120[4] = v148;
  v113 = v120 + 5;
  if (v102 != v114)
  {
    do
    {
      long long v122 = *(_OWORD *)(v102 - 5);
      long long v123 = *(_OWORD *)(v102 - 3);
      *(v120 - 1) = *(v102 - 1);
      *(_OWORD *)(v120 - 3) = v123;
      *(_OWORD *)(v120 - 5) = v122;
      v120 -= 5;
      v102 -= 5;
    }
    while (v102 != v114);
    v114 = *a4;
  }
  *a4 = v120;
  a4[1] = v113;
  a4[2] = (uint64_t *)v121;
  if (v114) {
    operator delete(v114);
  }
LABEL_152:
  a4[1] = v113;
  ZinIrUnitInfo::~ZinIrUnitInfo(&v149);
  return 0;
}

void sub_2111D2C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
}

uint64_t ZinConvPoolLargeStride::DecomposeLargeStridePool(int a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v247 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a3 + 1880)) {
    ZinAssertImpl("Large stride pool requires transpose but is not supported.");
  }
  uint64_t v12 = *a7;
  for (uint64_t i = a7[1];
        i != v12;
  a7[1] = v12;
  *(void *)(a6 + 8) = *(void *)a6;
  if (*(unsigned char *)(a2 + 148))
  {
    ZinConvPoolLargeStride::DecomposeLargeStridePoolNoSeparatePaddingLayer(a1, a2, a4, (uint64_t **)a6, a7);
    return 0;
  }
  uint64_t v196 = *(void *)(a2 + 96);
  uint64_t v197 = *(void *)(a2 + 88);
  uint64_t v179 = *(int *)(a2 + 112);
  uint64_t v183 = *(int *)(a2 + 116);
  unsigned int v14 = *(_DWORD *)(a2 + 124);
  unsigned int v13 = *(_DWORD *)(a2 + 128);
  int v15 = *(_DWORD *)(a2 + 132);
  int v16 = *(_DWORD *)(a2 + 136);
  int v17 = *(_DWORD *)(a2 + 140);
  int v18 = *(_DWORD *)(a2 + 144);
  int v19 = *(_DWORD *)(a2 + 152);
  uint64_t v201 = *a4;
  uint64_t v200 = a4[1];
  int v187 = v15;
  uint64_t v189 = a4[2];
  unsigned int v193 = v13;
  uint64_t v195 = a4[3];
  uint64_t v199 = a4[4];
  int v184 = v16;
  unsigned int v192 = v14;
  if (__PAIR64__(v13, v14) || v15 || v16 || v18 || v17)
  {
    if (v19 == 4 || v19 == 2) {
      ZinAssertImpl("Large stride Min/Max pool with padding is not supported");
    }
    long long v237 = 0u;
    *(_OWORD *)&v234[4] = 0u;
    *(void *)v225 = 0;
    long long v224 = 0u;
    long long v223 = 0u;
    long long v222 = 0u;
    *(void *)&v225[16] = -1;
    long long v226 = 0u;
    long long v227 = 0u;
    memset(v228, 0, 44);
    v221 = &unk_26C3499A0;
    *(void *)&v234[8] = 0;
    *(void *)v234 = 0;
    v236 = 0;
    __p = 0;
    WORD4(v237) = 0;
    *(void *)&long long v237 = 0;
    unsigned int v229 = v13;
    int v230 = v15;
    int v231 = v16;
    int v232 = v17;
    int v233 = v18;
    DWORD2(v223) = 44;
    *(_DWORD *)&v225[8] = a1;
    *(_DWORD *)&v228[44] = v14;
    *(_DWORD *)&v225[12] = a1;
    __src[0] = 4;
    __src[1] = v19;
    LODWORD(v239) = 3;
    HIDWORD(v239) = v19;
    LODWORD(v240.__r_.__value_.__l.__data_) = 2;
    HIDWORD(v240.__r_.__value_.__r.__words[0]) = v19;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__p, (char *)__src, (uint64_t)&v240.__r_.__value_.__l.__size_, 3uLL);
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src, (ZinIrPadUnitInfo *)&v221);
    unint64_t v20 = a7[1];
    if (v20 >= a7[2])
    {
      uint64_t v21 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
    }
    else
    {
      LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
      uint64_t v21 = v20 + 344;
      a7[1] = v20 + 344;
    }
    a7[1] = v21;
    LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
    uint64_t v22 = *(int *)&v228[44];
    uint64_t v23 = (int)v229;
    uint64_t v24 = v230;
    uint64_t v25 = v231;
    unint64_t v26 = *(void *)(a6 + 16);
    unint64_t v27 = *(void *)(a6 + 8);
    if (v27 >= v26)
    {
      uint64_t v190 = *(int *)&v228[44];
      unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - *(void *)a6) >> 3);
      unint64_t v32 = v31 + 1;
      if (v31 + 1 > 0x666666666666666) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - *(void *)a6) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x333333333333333) {
        unint64_t v34 = 0x666666666666666;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34) {
        unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(a6 + 16, v34);
      }
      else {
        unint64_t v35 = 0;
      }
      unint64_t v36 = &v35[40 * v31];
      v37 = &v35[40 * v34];
      long long v38 = *(_OWORD *)a4;
      long long v39 = *((_OWORD *)a4 + 1);
      *((void *)v36 + 4) = a4[4];
      *(_OWORD *)unint64_t v36 = v38;
      *((_OWORD *)v36 + 1) = v39;
      long long v30 = v36 + 40;
      v41 = *(uint64_t **)a6;
      long long v40 = *(uint64_t **)(a6 + 8);
      if (v40 != *(uint64_t **)a6)
      {
        do
        {
          long long v42 = *(_OWORD *)(v40 - 5);
          long long v43 = *(_OWORD *)(v40 - 3);
          *((void *)v36 - 1) = *(v40 - 1);
          *(_OWORD *)(v36 - 24) = v43;
          *(_OWORD *)(v36 - 40) = v42;
          v36 -= 40;
          v40 -= 5;
        }
        while (v40 != v41);
        long long v40 = *(uint64_t **)a6;
      }
      *(void *)a6 = v36;
      *(void *)(a6 + 8) = v30;
      *(void *)(a6 + 16) = v37;
      if (v40) {
        operator delete(v40);
      }
      uint64_t v22 = v190;
    }
    else
    {
      long long v28 = *(_OWORD *)a4;
      long long v29 = *((_OWORD *)a4 + 1);
      *(void *)(v27 + 32) = a4[4];
      *(_OWORD *)unint64_t v27 = v28;
      *(_OWORD *)(v27 + 16) = v29;
      long long v30 = (char *)(v27 + 40);
    }
    v195 += v23 + v22;
    v189 += v25 + v24;
    *(void *)(a6 + 8) = v30;
    v221 = &unk_26C3499A0;
    if (__p)
    {
      v236 = __p;
      operator delete(__p);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v221);
  }
  memset(&v213[1], 0, 24);
  long long v215 = 0u;
  uint64_t v216 = 0;
  *((void *)&v217 + 1) = -1;
  v218 = 0;
  v213[0] = &unk_26C34F988;
  v219 = 0;
  uint64_t v220 = 0;
  long long v44 = (char *)operator new(0x10uLL);
  *(_OWORD *)long long v44 = xmmword_211ED4940;
  v176 = v44;
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v218, v176, (uint64_t)(v176 + 16), 2uLL);
  int v214 = 21;
  LODWORD(v217) = a1;
  DWORD1(v217) = a1;
  __src[0] = 21;
  v239 = &unk_26C345B80;
  if (SHIBYTE(v213[3]) < 0)
  {
    std::string::__init_copy_ctor_external(&v240, (const std::string::value_type *)v213[1], (std::string::size_type)v213[2]);
    int v45 = v214;
  }
  else
  {
    std::string v240 = *(std::string *)&v213[1];
    int v45 = 21;
  }
  int v241 = v45;
  memset(&v242, 0, sizeof(v242));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v242, (long long *)v215, *((long long **)&v215 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v215 + 1) - v215) >> 3));
  long long v243 = v217;
  v239 = &unk_26C34F988;
  uint64_t v244 = 0;
  uint64_t v246 = 0;
  uint64_t v245 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v244, v218, (uint64_t)v219, (v219 - (unsigned char *)v218) >> 3);
  unint64_t v46 = a7[1];
  if (v46 >= a7[2])
  {
    uint64_t v47 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
    uint64_t v47 = v46 + 344;
    a7[1] = v46 + 344;
  }
  a7[1] = v47;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
  unint64_t v48 = *(void *)(a6 + 16);
  v186 = (uint64_t **)(a6 + 16);
  int v49 = *(uint64_t **)(a6 + 8);
  if ((unint64_t)v49 >= v48)
  {
    unint64_t v51 = *(uint64_t **)a6;
    unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v49 - *(void *)a6) >> 3);
    unint64_t v53 = v52 + 1;
    if (v52 + 1 > 0x666666666666666) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - (void)v51) >> 3);
    if (2 * v54 > v53) {
      unint64_t v53 = 2 * v54;
    }
    if (v54 >= 0x333333333333333) {
      unint64_t v55 = 0x666666666666666;
    }
    else {
      unint64_t v55 = v53;
    }
    if (v55)
    {
      v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v186, v55);
      unint64_t v51 = *(uint64_t **)a6;
      int v49 = *(uint64_t **)(a6 + 8);
    }
    else
    {
      v56 = 0;
    }
    unint64_t v57 = (uint64_t *)&v56[40 * v52];
    *unint64_t v57 = v201;
    v57[1] = v200;
    unint64_t v58 = &v56[40 * v55];
    v57[2] = v189;
    v57[3] = v195;
    v57[4] = v199;
    int v50 = v57 + 5;
    if (v49 != v51)
    {
      do
      {
        long long v59 = *(_OWORD *)(v49 - 5);
        long long v60 = *(_OWORD *)(v49 - 3);
        *(v57 - 1) = *(v49 - 1);
        *(_OWORD *)(v57 - 3) = v60;
        *(_OWORD *)(v57 - 5) = v59;
        v57 -= 5;
        v49 -= 5;
      }
      while (v49 != v51);
      unint64_t v51 = *(uint64_t **)a6;
    }
    *(void *)a6 = v57;
    *(void *)(a6 + 8) = v50;
    *(void *)(a6 + 16) = v58;
    if (v51) {
      operator delete(v51);
    }
  }
  else
  {
    *int v49 = v201;
    v49[1] = v200;
    v49[2] = v189;
    v49[3] = v195;
    int v50 = v49 + 5;
    v49[4] = v199;
  }
  *(void *)(a6 + 8) = v50;
  uint64_t v61 = (int)v193 + (uint64_t)(int)v192 + a4[3];
  uint64_t v62 = (v61 - v197) / v179;
  uint64_t v177 = v62;
  if (v62 < 0 || v61 < v197)
  {
    uint64_t v185 = 1;
    uint64_t v182 = 1;
    uint64_t v181 = 1;
    uint64_t v63 = 1;
  }
  else
  {
    int v191 = 0;
    uint64_t v64 = 0;
    uint64_t v188 = v184 + (uint64_t)v187 + a4[2];
    uint64_t v194 = (v188 - v196) / v183;
    uint64_t v185 = 1;
    uint64_t v182 = 1;
    uint64_t v181 = 1;
    uint64_t v178 = v61;
    do
    {
      uint64_t v180 = v64;
      if ((v194 & 0x8000000000000000) == 0 && v188 >= v196)
      {
        int v65 = 0;
        uint64_t v66 = 0;
        uint64_t v67 = v196;
        do
        {
          uint64_t v203 = 0;
          uint64_t v204 = 0;
          uint64_t v205 = 0;
          *(void *)&long long v208 = 0;
          long long v207 = 0uLL;
          uint64_t v209 = -1;
          v202 = &unk_26C34F860;
          int v210 = v65;
          int v211 = v67;
          uint64_t v212 = 0x300000001;
          int v206 = 17;
          DWORD2(v208) = a1;
          HIDWORD(v208) = a1;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)&v202);
          uint64_t v68 = v67;
          unint64_t v69 = a7[1];
          if (v69 >= a7[2])
          {
            uint64_t v70 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
            uint64_t v70 = v69 + 344;
            a7[1] = v69 + 344;
          }
          a7[1] = v70;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          v72 = *(uint64_t **)(a6 + 8);
          unint64_t v71 = *(void *)(a6 + 16);
          if ((unint64_t)v72 >= v71)
          {
            unint64_t v74 = *(uint64_t **)a6;
            unint64_t v75 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v72 - *(void *)a6) >> 3);
            unint64_t v76 = v75 + 1;
            if (v75 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v77 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - (void)v74) >> 3);
            if (2 * v77 > v76) {
              unint64_t v76 = 2 * v77;
            }
            if (v77 >= 0x333333333333333) {
              unint64_t v78 = 0x666666666666666;
            }
            else {
              unint64_t v78 = v76;
            }
            if (v78)
            {
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v186, v78);
              unint64_t v74 = *(uint64_t **)a6;
              v72 = *(uint64_t **)(a6 + 8);
            }
            else
            {
              v79 = 0;
            }
            v80 = (uint64_t *)&v79[40 * v75];
            uint64_t *v80 = v201;
            v80[1] = v200;
            v80[2] = v189;
            v80[3] = v195;
            v80[4] = v199;
            long long v81 = v80;
            if (v72 != v74)
            {
              do
              {
                long long v82 = *(_OWORD *)(v72 - 5);
                long long v83 = *(_OWORD *)(v72 - 3);
                *(v81 - 1) = *(v72 - 1);
                *(_OWORD *)(v81 - 3) = v83;
                *(_OWORD *)(v81 - 5) = v82;
                v81 -= 5;
                v72 -= 5;
              }
              while (v72 != v74);
              unint64_t v74 = *(uint64_t **)a6;
            }
            v73 = v80 + 5;
            *(void *)a6 = v81;
            *(void *)(a6 + 8) = v80 + 5;
            *(void *)(a6 + 16) = &v79[40 * v78];
            if (v74) {
              operator delete(v74);
            }
          }
          else
          {
            uint64_t *v72 = v201;
            v72[1] = v200;
            v72[2] = v189;
            v72[3] = v195;
            v73 = v72 + 5;
            v72[4] = v199;
          }
          *(void *)(a6 + 8) = v73;
          int v210 = v191;
          int v211 = v197;
          HIDWORD(v212) = 2;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)&v202);
          unint64_t v84 = a7[1];
          if (v84 >= a7[2])
          {
            uint64_t v85 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
            uint64_t v85 = v84 + 344;
            a7[1] = v84 + 344;
          }
          a7[1] = v85;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          v87 = *(uint64_t **)(a6 + 8);
          unint64_t v86 = *(void *)(a6 + 16);
          if ((unint64_t)v87 >= v86)
          {
            unint64_t v89 = *(uint64_t **)a6;
            unint64_t v90 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v87 - *(void *)a6) >> 3);
            unint64_t v91 = v90 + 1;
            if (v90 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v92 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v86 - (void)v89) >> 3);
            if (2 * v92 > v91) {
              unint64_t v91 = 2 * v92;
            }
            if (v92 >= 0x333333333333333) {
              unint64_t v93 = 0x666666666666666;
            }
            else {
              unint64_t v93 = v91;
            }
            if (v93)
            {
              v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v186, v93);
              unint64_t v89 = *(uint64_t **)a6;
              v87 = *(uint64_t **)(a6 + 8);
            }
            else
            {
              v94 = 0;
            }
            v95 = (uint64_t *)&v94[40 * v90];
            uint64_t *v95 = v201;
            v95[1] = v195;
            v95[2] = v68;
            v95[3] = v200;
            v95[4] = v199;
            int64x2_t v96 = v95;
            if (v87 != v89)
            {
              do
              {
                long long v97 = *(_OWORD *)(v87 - 5);
                long long v98 = *(_OWORD *)(v87 - 3);
                *(v96 - 1) = *(v87 - 1);
                *(_OWORD *)(v96 - 3) = v98;
                *(_OWORD *)(v96 - 5) = v97;
                v96 -= 5;
                v87 -= 5;
              }
              while (v87 != v89);
              unint64_t v89 = *(uint64_t **)a6;
            }
            v88 = v95 + 5;
            *(void *)a6 = v96;
            *(void *)(a6 + 8) = v95 + 5;
            *(void *)(a6 + 16) = &v94[40 * v93];
            if (v89) {
              operator delete(v89);
            }
          }
          else
          {
            uint64_t *v87 = v201;
            v87[1] = v195;
            v87[2] = v68;
            v87[3] = v200;
            v88 = v87 + 5;
            v87[4] = v199;
          }
          *(void *)(a6 + 8) = v88;
          v221 = &unk_26C345B80;
          if (*(char *)(a2 + 31) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v222, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
          }
          else
          {
            long long v222 = *(_OWORD *)(a2 + 8);
            *(void *)&long long v223 = *(void *)(a2 + 24);
          }
          DWORD2(v223) = *(_DWORD *)(a2 + 32);
          *(void *)v225 = 0;
          long long v224 = 0uLL;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v224, *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
          v221 = &unk_26C34AB58;
          long long v99 = *(_OWORD *)(a2 + 96);
          long long v226 = *(_OWORD *)(a2 + 80);
          long long v227 = v99;
          unsigned int v229 = *(_DWORD *)(a2 + 160);
          *(_OWORD *)&v228[32] = *(_OWORD *)(a2 + 144);
          *(void *)&long long v227 = v68;
          *((void *)&v227 + 1) = 1;
          *(void *)v228 = 0x100000001;
          *(_DWORD *)&v228[8] = 1;
          memset(&v228[12], 0, 24);
          *(_DWORD *)&v225[12] = a1;
          *((void *)&v226 + 1) = 1;
          *(void *)&v225[16] = 1;
          *(_DWORD *)&v225[8] = a1;
          DWORD2(v223) = 2;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrPoolUnitInfo *)&v221);
          unint64_t v100 = a7[1];
          if (v100 >= a7[2])
          {
            uint64_t v101 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
            uint64_t v101 = v100 + 344;
            a7[1] = v100 + 344;
          }
          a7[1] = v101;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          v103 = *(uint64_t **)(a6 + 8);
          unint64_t v102 = *(void *)(a6 + 16);
          if ((unint64_t)v103 >= v102)
          {
            unint64_t v105 = *(uint64_t **)a6;
            unint64_t v106 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v103 - *(void *)a6) >> 3);
            unint64_t v107 = v106 + 1;
            if (v106 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v108 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v102 - (void)v105) >> 3);
            if (2 * v108 > v107) {
              unint64_t v107 = 2 * v108;
            }
            if (v108 >= 0x333333333333333) {
              unint64_t v109 = 0x666666666666666;
            }
            else {
              unint64_t v109 = v107;
            }
            if (v109)
            {
              long long v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v186, v109);
              unint64_t v105 = *(uint64_t **)a6;
              v103 = *(uint64_t **)(a6 + 8);
            }
            else
            {
              long long v110 = 0;
            }
            long long v111 = (uint64_t *)&v110[40 * v106];
            *long long v111 = v201;
            v111[1] = v197;
            v111[2] = v196;
            v111[3] = v200;
            v111[4] = v199;
            uint64_t v112 = v111;
            if (v103 != v105)
            {
              do
              {
                long long v113 = *(_OWORD *)(v103 - 5);
                long long v114 = *(_OWORD *)(v103 - 3);
                *(v112 - 1) = *(v103 - 1);
                *(_OWORD *)(v112 - 3) = v114;
                *(_OWORD *)(v112 - 5) = v113;
                v112 -= 5;
                v103 -= 5;
              }
              while (v103 != v105);
              unint64_t v105 = *(uint64_t **)a6;
            }
            unint64_t v104 = v111 + 5;
            *(void *)a6 = v112;
            *(void *)(a6 + 8) = v111 + 5;
            *(void *)(a6 + 16) = &v110[40 * v109];
            if (v105) {
              operator delete(v105);
            }
          }
          else
          {
            uint64_t *v103 = v201;
            v103[1] = v197;
            v103[2] = v196;
            v103[3] = v200;
            unint64_t v104 = v103 + 5;
            v103[4] = v199;
          }
          *(void *)(a6 + 8) = v104;
          ZinIrUnitInfo::~ZinIrUnitInfo(&v221);
          ZinIrUnitInfo::~ZinIrUnitInfo(&v202);
          if (v194 < ++v66) {
            break;
          }
          int v65 = v66 * v183;
          uint64_t v67 = v196;
        }
        while (v188 - v66 * v183 >= v196);
        uint64_t v185 = v199;
        uint64_t v181 = v201;
        uint64_t v182 = v200;
        uint64_t v62 = v177;
      }
      long long v222 = 0uLL;
      *(void *)&long long v223 = 0;
      *(void *)v225 = 0;
      long long v224 = 0uLL;
      *(void *)&v225[16] = -1;
      v221 = &unk_26C34C998;
      BYTE4(v226) = 0;
      DWORD2(v223) = 3;
      *(_DWORD *)&v225[8] = a1;
      LODWORD(v226) = 3;
      *(_DWORD *)&v225[12] = a1;
      ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v221);
      unint64_t v115 = a7[1];
      if (v115 >= a7[2])
      {
        uint64_t v116 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
      }
      else
      {
        LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
        uint64_t v116 = v115 + 344;
        a7[1] = v115 + 344;
      }
      a7[1] = v116;
      LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
      unint64_t v118 = *(void *)(a6 + 8);
      unint64_t v117 = *(void *)(a6 + 16);
      if (v118 >= v117)
      {
        v120 = *(uint64_t **)a6;
        unint64_t v121 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v118 - *(void *)a6) >> 3);
        unint64_t v122 = v121 + 1;
        if (v121 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v123 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v117 - (void)v120) >> 3);
        if (2 * v123 > v122) {
          unint64_t v122 = 2 * v123;
        }
        if (v123 >= 0x333333333333333) {
          unint64_t v124 = 0x666666666666666;
        }
        else {
          unint64_t v124 = v122;
        }
        if (v124)
        {
          uint64_t v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v186, v124);
          v120 = *(uint64_t **)a6;
          unint64_t v118 = *(void *)(a6 + 8);
        }
        else
        {
          uint64_t v125 = 0;
        }
        uint64_t v126 = &v125[40 * v121];
        *(void *)uint64_t v126 = v181;
        *(int64x2_t *)(v126 + 8) = vdupq_n_s64(1uLL);
        *((void *)v126 + 3) = v182;
        *((void *)v126 + 4) = v185;
        uint64_t v127 = v126;
        if ((uint64_t *)v118 != v120)
        {
          do
          {
            long long v128 = *(_OWORD *)(v118 - 40);
            long long v129 = *(_OWORD *)(v118 - 24);
            *((void *)v127 - 1) = *(void *)(v118 - 8);
            *(_OWORD *)(v127 - 24) = v129;
            *(_OWORD *)(v127 - 40) = v128;
            v127 -= 40;
            v118 -= 40;
          }
          while ((uint64_t *)v118 != v120);
          v120 = *(uint64_t **)a6;
        }
        v119 = v126 + 40;
        *(void *)a6 = v127;
        *(void *)(a6 + 8) = v126 + 40;
        *(void *)(a6 + 16) = &v125[40 * v124];
        if (v120) {
          operator delete(v120);
        }
      }
      else
      {
        *(void *)unint64_t v118 = v181;
        *(int64x2_t *)(v118 + 8) = vdupq_n_s64(1uLL);
        *(void *)(v118 + 24) = v182;
        *(void *)(v118 + 32) = v185;
        v119 = (char *)(v118 + 40);
      }
      *(void *)(a6 + 8) = v119;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v221);
      uint64_t v64 = v180 + 1;
      if (v62 < (v180 + 1)) {
        break;
      }
      int v191 = v64 * v179;
    }
    while (v178 - v64 * v179 >= v197);
    uint64_t v63 = v194 + 1;
  }
  uint64_t v203 = 0;
  uint64_t v204 = 0;
  uint64_t v205 = 0;
  long long v207 = 0u;
  long long v208 = 0u;
  uint64_t v209 = -1;
  v202 = &unk_26C34C998;
  LOBYTE(v211) = 0;
  int v206 = 3;
  int v210 = 2;
  ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v202);
  unint64_t v130 = a7[1];
  if (v130 >= a7[2])
  {
    uint64_t v131 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
    uint64_t v131 = v130 + 344;
    a7[1] = v130 + 344;
  }
  a7[1] = v131;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
  uint64_t v133 = *(uint64_t **)(a6 + 8);
  uint64_t v132 = *(uint64_t **)(a6 + 16);
  if (v133 >= v132)
  {
    uint64_t v135 = *(uint64_t **)a6;
    unint64_t v136 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v133 - *(void *)a6) >> 3);
    unint64_t v137 = v136 + 1;
    if (v136 + 1 > 0x666666666666666) {
      goto LABEL_222;
    }
    unint64_t v138 = 0xCCCCCCCCCCCCCCCDLL * (v132 - v135);
    if (2 * v138 > v137) {
      unint64_t v137 = 2 * v138;
    }
    if (v138 >= 0x333333333333333) {
      unint64_t v139 = 0x666666666666666;
    }
    else {
      unint64_t v139 = v137;
    }
    if (v139)
    {
      uint64_t v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v186, v139);
      uint64_t v135 = *(uint64_t **)a6;
      uint64_t v133 = *(uint64_t **)(a6 + 8);
    }
    else
    {
      uint64_t v140 = 0;
    }
    uint64_t v141 = (uint64_t *)&v140[40 * v136];
    *uint64_t v141 = v181;
    v141[1] = 1;
    uint64_t v132 = (uint64_t *)&v140[40 * v139];
    v141[2] = v63;
    v141[3] = v182;
    v141[4] = v185;
    uint64_t v134 = v141 + 5;
    if (v133 != v135)
    {
      do
      {
        long long v142 = *(_OWORD *)(v133 - 5);
        long long v143 = *(_OWORD *)(v133 - 3);
        *(v141 - 1) = *(v133 - 1);
        *(_OWORD *)(v141 - 3) = v143;
        *(_OWORD *)(v141 - 5) = v142;
        v141 -= 5;
        v133 -= 5;
      }
      while (v133 != v135);
      uint64_t v135 = *(uint64_t **)a6;
    }
    *(void *)a6 = v141;
    *(void *)(a6 + 8) = v134;
    *(void *)(a6 + 16) = v132;
    if (v135)
    {
      operator delete(v135);
      uint64_t v132 = *v186;
    }
  }
  else
  {
    *uint64_t v133 = v181;
    v133[1] = 1;
    v133[2] = v63;
    v133[3] = v182;
    uint64_t v134 = v133 + 5;
    v133[4] = v185;
  }
  uint64_t v144 = v177 + 1;
  *(void *)(a6 + 8) = v134;
  if (v134 >= v132)
  {
    uint64_t v147 = *(uint64_t **)a6;
    unint64_t v148 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v134 - *(void *)a6) >> 3);
    unint64_t v149 = v148 + 1;
    if (v148 + 1 <= 0x666666666666666)
    {
      unint64_t v150 = 0xCCCCCCCCCCCCCCCDLL * (v132 - v147);
      if (2 * v150 > v149) {
        unint64_t v149 = 2 * v150;
      }
      if (v150 >= 0x333333333333333) {
        unint64_t v151 = 0x666666666666666;
      }
      else {
        unint64_t v151 = v149;
      }
      if (v151)
      {
        long long v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v186, v151);
        uint64_t v147 = *(uint64_t **)a6;
        uint64_t v134 = *(uint64_t **)(a6 + 8);
      }
      else
      {
        long long v152 = 0;
      }
      long long v153 = (uint64_t *)&v152[40 * v148];
      *long long v153 = v181;
      v153[1] = v144;
      uint64_t v154 = &v152[40 * v151];
      v153[2] = v63;
      v153[3] = v182;
      v153[4] = v185;
      uint64_t v146 = v153 + 5;
      if (v134 != v147)
      {
        do
        {
          long long v155 = *(_OWORD *)(v134 - 5);
          long long v156 = *(_OWORD *)(v134 - 3);
          *(v153 - 1) = *(v134 - 1);
          *(_OWORD *)(v153 - 3) = v156;
          *(_OWORD *)(v153 - 5) = v155;
          v153 -= 5;
          v134 -= 5;
        }
        while (v134 != v147);
        uint64_t v147 = *(uint64_t **)a6;
      }
      *(void *)a6 = v153;
      *(void *)(a6 + 8) = v146;
      *(void *)(a6 + 16) = v154;
      uint64_t v145 = v63;
      if (v147) {
        operator delete(v147);
      }
      goto LABEL_186;
    }
LABEL_222:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  *uint64_t v134 = v181;
  v134[1] = v144;
  uint64_t v145 = v63;
  v134[2] = v63;
  v134[3] = v182;
  uint64_t v146 = v134 + 5;
  v134[4] = v185;
LABEL_186:
  *(void *)(a6 + 8) = v146;
  long long v222 = 0uLL;
  DWORD2(v223) = 0;
  *(void *)&long long v223 = 0;
  long long v224 = 0u;
  *(_OWORD *)v225 = 0u;
  *(void *)&v225[16] = -1;
  long long v226 = 0uLL;
  v221 = &unk_26C34F988;
  *(void *)&long long v227 = 0;
  uint64_t v157 = (char *)operator new(0x10uLL);
  *(_OWORD *)uint64_t v157 = xmmword_211ED4940;
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v226, v157, (uint64_t)(v157 + 16), 2uLL);
  DWORD2(v223) = 21;
  *(_DWORD *)&v225[8] = a1;
  *(_DWORD *)&v225[12] = a1;
  __src[0] = 21;
  v239 = &unk_26C345B80;
  if (SBYTE7(v223) < 0)
  {
    std::string::__init_copy_ctor_external(&v240, (const std::string::value_type *)v222, *((std::string::size_type *)&v222 + 1));
    int v158 = DWORD2(v223);
  }
  else
  {
    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v222;
    v240.__r_.__value_.__r.__words[2] = v223;
    int v158 = 21;
  }
  int v241 = v158;
  memset(&v242, 0, sizeof(v242));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v242, (long long *)v224, *((long long **)&v224 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v224 + 1) - v224) >> 3));
  long long v243 = *(_OWORD *)&v225[8];
  v239 = &unk_26C34F988;
  uint64_t v244 = 0;
  uint64_t v246 = 0;
  uint64_t v245 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v244, (const void *)v226, *((uint64_t *)&v226 + 1), (uint64_t)(*((void *)&v226 + 1) - v226) >> 3);
  unint64_t v159 = a7[1];
  if (v159 >= a7[2])
  {
    uint64_t v160 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)a7[1], (const LargeStrideConvPoolDecomposedDesc *)__src);
    uint64_t v160 = v159 + 344;
    a7[1] = v159 + 344;
  }
  a7[1] = v160;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
  v162 = *(uint64_t **)(a6 + 8);
  unint64_t v161 = *(void *)(a6 + 16);
  if ((unint64_t)v162 >= v161)
  {
    uint64_t v165 = *(uint64_t **)a6;
    unint64_t v166 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v162 - *(void *)a6) >> 3);
    unint64_t v167 = v166 + 1;
    if (v166 + 1 > 0x666666666666666) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v168 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v161 - (void)v165) >> 3);
    if (2 * v168 > v167) {
      unint64_t v167 = 2 * v168;
    }
    if (v168 >= 0x333333333333333) {
      unint64_t v169 = 0x666666666666666;
    }
    else {
      unint64_t v169 = v167;
    }
    if (v169)
    {
      int v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v186, v169);
      uint64_t v165 = *(uint64_t **)a6;
      v162 = *(uint64_t **)(a6 + 8);
    }
    else
    {
      int v170 = 0;
    }
    int v171 = (uint64_t *)&v170[40 * v166];
    *int v171 = v181;
    v171[1] = v182;
    int v172 = &v170[40 * v169];
    v171[2] = v145;
    v171[3] = v144;
    v171[4] = v185;
    int v163 = v171 + 5;
    if (v162 == v165)
    {
      uint64_t v164 = v176;
    }
    else
    {
      uint64_t v164 = v176;
      do
      {
        long long v173 = *(_OWORD *)(v162 - 5);
        long long v174 = *(_OWORD *)(v162 - 3);
        *(v171 - 1) = *(v162 - 1);
        *(_OWORD *)(v171 - 3) = v174;
        *(_OWORD *)(v171 - 5) = v173;
        v171 -= 5;
        v162 -= 5;
      }
      while (v162 != v165);
      uint64_t v165 = *(uint64_t **)a6;
    }
    *(void *)a6 = v171;
    *(void *)(a6 + 8) = v163;
    *(void *)(a6 + 16) = v172;
    if (v165) {
      operator delete(v165);
    }
  }
  else
  {
    uint64_t *v162 = v181;
    v162[1] = v182;
    v162[2] = v145;
    v162[3] = v144;
    int v163 = v162 + 5;
    v162[4] = v185;
    uint64_t v164 = v176;
  }
  *(void *)(a6 + 8) = v163;
  operator delete(v157);
  v221 = &unk_26C34F988;
  if ((void)v226)
  {
    *((void *)&v226 + 1) = v226;
    operator delete((void *)v226);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(&v221);
  ZinIrUnitInfo::~ZinIrUnitInfo(&v202);
  operator delete(v164);
  v213[0] = &unk_26C34F988;
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v213);
  return 0;
}

void sub_2111D4444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t ZinConvPoolLargeStride::DecomposeLargeStrideConv(int a1, ZinConvLayerUtils *this, uint64_t a3, int64x2_t *a4, uint64_t a5, int64x2_t **a6, uint64_t a7)
{
  uint64_t v11 = this;
  uint64_t v202 = *MEMORY[0x263EF8340];
  uint64_t v13 = *(void *)a7;
  for (uint64_t i = *(void *)(a7 + 8);
        i != v13;
  *(void *)(a7 + 8) = v13;
  a6[1] = *a6;
  if (!*(unsigned char *)(a3 + 1880)) {
    ZinAssertImpl("Error: decomposition failed as transpose is not supported");
  }
  uint64_t v157 = *((void *)v11 + 32);
  uint64_t v142 = *((int *)v11 + 73);
  unsigned int v14 = *((_DWORD *)v11 + 76);
  unsigned int v15 = *((_DWORD *)v11 + 77);
  unsigned int v16 = *((_DWORD *)v11 + 78);
  int v153 = *((_DWORD *)v11 + 79);
  int v17 = *((_DWORD *)v11 + 80);
  int v18 = *((_DWORD *)v11 + 81);
  int v19 = *((_DWORD *)v11 + 82);
  uint64_t v160 = a4->i64[0];
  uint64_t v161 = *((void *)v11 + 33);
  uint64_t v150 = a4[1].i64[0];
  uint64_t v151 = *((int *)v11 + 74);
  uint64_t v155 = a4[1].i64[1];
  uint64_t v158 = a4[2].i64[0];
  uint64_t v159 = a4->i64[1];
  ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides(v11, this);
  uint64_t v147 = v11;
  if (__PAIR64__(v15, v14) || v16 || v153 || v18 || v17)
  {
    long long v179 = 0u;
    *(_OWORD *)&v176[4] = 0u;
    *(void *)&long long v166 = 0;
    long long v165 = 0u;
    long long v164 = 0u;
    long long v163 = 0u;
    uint64_t v167 = -1;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    memset(v171, 0, 28);
    v162 = &unk_26C3499A0;
    *(void *)&v176[8] = 0;
    *(void *)v176 = 0;
    __p = 0;
    uint64_t v178 = 0;
    WORD4(v179) = 0;
    *(void *)&long long v179 = 0;
    unint64_t v172 = __PAIR64__(v16, v15);
    int v173 = v153;
    int v174 = v17;
    int v175 = v18;
    DWORD2(v164) = 44;
    DWORD2(v166) = a1;
    *(_DWORD *)&v171[28] = v14;
    HIDWORD(v166) = a1;
    __src[0] = 4;
    __src[1] = v19;
    LODWORD(v197) = 3;
    HIDWORD(v197) = v19;
    int v198 = 2;
    int v199 = v19;
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__p, (char *)__src, (uint64_t)v200, 3uLL);
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src, (ZinIrPadUnitInfo *)&v162);
    unint64_t v20 = *(LargeStrideConvPoolDecomposedDesc **)(a7 + 8);
    if ((unint64_t)v20 >= *(void *)(a7 + 16))
    {
      uint64_t v21 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>((uint64_t *)a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
    }
    else
    {
      LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(v20, (const LargeStrideConvPoolDecomposedDesc *)__src);
      uint64_t v21 = (uint64_t)v20 + 344;
      *(void *)(a7 + 8) = (char *)v20 + 344;
    }
    *(void *)(a7 + 8) = v21;
    LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
    uint64_t v22 = *(int *)&v171[28];
    uint64_t v23 = (int)v172;
    uint64_t v24 = SHIDWORD(v172);
    uint64_t v25 = v173;
    unint64_t v26 = a6[2];
    unint64_t v27 = a6[1];
    if (v27 >= v26)
    {
      uint64_t v148 = *(int *)&v171[28];
      unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v27 - (char *)*a6) >> 3);
      unint64_t v32 = v31 + 1;
      if (v31 + 1 > 0x666666666666666) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v26 - (char *)*a6) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x333333333333333) {
        unint64_t v34 = 0x666666666666666;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34) {
        unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a6 + 2), v34);
      }
      else {
        unint64_t v35 = 0;
      }
      unint64_t v36 = (int64x2_t *)&v35[40 * v31];
      v37 = (int64x2_t *)&v35[40 * v34];
      int64x2_t v38 = *a4;
      int64x2_t v39 = a4[1];
      v36[2].i64[0] = a4[2].i64[0];
      *unint64_t v36 = v38;
      v36[1] = v39;
      long long v30 = (int64x2_t *)((char *)v36 + 40);
      v41 = *a6;
      long long v40 = a6[1];
      if (v40 != *a6)
      {
        do
        {
          int64x2_t v42 = *(int64x2_t *)((char *)v40 - 40);
          int64x2_t v43 = *(int64x2_t *)((char *)v40 - 24);
          v36[-1].i64[1] = v40[-1].i64[1];
          *(int64x2_t *)((char *)v36 - 24) = v43;
          *(int64x2_t *)((char *)v36 - 40) = v42;
          unint64_t v36 = (int64x2_t *)((char *)v36 - 40);
          long long v40 = (int64x2_t *)((char *)v40 - 40);
        }
        while (v40 != v41);
        long long v40 = *a6;
      }
      *a6 = v36;
      a6[1] = v30;
      a6[2] = v37;
      if (v40) {
        operator delete(v40);
      }
      uint64_t v22 = v148;
    }
    else
    {
      int64x2_t v28 = *a4;
      int64x2_t v29 = a4[1];
      v27[2].i64[0] = a4[2].i64[0];
      *unint64_t v27 = v28;
      v27[1] = v29;
      long long v30 = (int64x2_t *)((char *)v27 + 40);
    }
    v155 += v23 + v22;
    v150 += v25 + v24;
    a6[1] = v30;
    v162 = &unk_26C3499A0;
    if (__p)
    {
      uint64_t v178 = __p;
      operator delete(__p);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v162);
    uint64_t v11 = v147;
  }
  uint64_t v44 = (int)v15 + (uint64_t)(int)v14 + a4[1].i64[1];
  uint64_t v143 = (v44 - v157) / v142;
  if (v143 < 0 || v44 < v157)
  {
    uint64_t v45 = 1;
  }
  else
  {
    uint64_t v46 = 0;
    uint64_t v47 = v161;
    uint64_t v149 = v153 + (uint64_t)(int)v16 + a4[1].i64[0];
    int v152 = 0;
    uint64_t v154 = (v149 - v161) / v151;
    uint64_t v145 = (uint64_t)(a6 + 2);
    int64x2_t v140 = vdupq_n_s64(1uLL);
    uint64_t v141 = (int)v15 + (uint64_t)(int)v14 + a4[1].i64[1];
    do
    {
      uint64_t v144 = v46;
      if ((v154 & 0x8000000000000000) == 0)
      {
        uint64_t v48 = 0;
        do
        {
          if (v149 - v48 * v151 < v47) {
            break;
          }
          memset(&v185[1], 0, 24);
          uint64_t v188 = 0;
          uint64_t v189 = 0;
          uint64_t v187 = 0;
          uint64_t v192 = -1;
          v185[0] = &unk_26C34F860;
          int v194 = v47;
          uint64_t v195 = 0x300000001;
          int v186 = 17;
          int v190 = a1;
          int v193 = v48 * v151;
          int v191 = a1;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)v185);
          unint64_t v49 = *(void *)(a7 + 8);
          if (v49 >= *(void *)(a7 + 16))
          {
            uint64_t v50 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>((uint64_t *)a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(*(LargeStrideConvPoolDecomposedDesc **)(a7 + 8), (const LargeStrideConvPoolDecomposedDesc *)__src);
            uint64_t v50 = v49 + 344;
            *(void *)(a7 + 8) = v49 + 344;
          }
          *(void *)(a7 + 8) = v50;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          unint64_t v52 = a6[1];
          unint64_t v51 = (unint64_t)a6[2];
          if ((unint64_t)v52 >= v51)
          {
            unint64_t v54 = *a6;
            unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v52 - (char *)*a6) >> 3);
            unint64_t v56 = v55 + 1;
            if (v55 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - (void)v54) >> 3);
            if (2 * v57 > v56) {
              unint64_t v56 = 2 * v57;
            }
            if (v57 >= 0x333333333333333) {
              unint64_t v58 = 0x666666666666666;
            }
            else {
              unint64_t v58 = v56;
            }
            if (v58)
            {
              long long v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v145, v58);
              unint64_t v54 = *a6;
              unint64_t v52 = a6[1];
            }
            else
            {
              long long v59 = 0;
            }
            long long v60 = &v59[40 * v55];
            *(void *)long long v60 = v160;
            *((void *)v60 + 1) = v159;
            *((void *)v60 + 2) = v150;
            *((void *)v60 + 3) = v155;
            *((void *)v60 + 4) = v158;
            uint64_t v61 = (int64x2_t *)v60;
            if (v52 != v54)
            {
              do
              {
                int64x2_t v62 = *(int64x2_t *)((char *)v52 - 40);
                int64x2_t v63 = *(int64x2_t *)((char *)v52 - 24);
                v61[-1].i64[1] = v52[-1].i64[1];
                *(int64x2_t *)((char *)v61 - 24) = v63;
                *(int64x2_t *)((char *)v61 - 40) = v62;
                uint64_t v61 = (int64x2_t *)((char *)v61 - 40);
                unint64_t v52 = (int64x2_t *)((char *)v52 - 40);
              }
              while (v52 != v54);
              unint64_t v54 = *a6;
            }
            unint64_t v53 = (int64x2_t *)(v60 + 40);
            *a6 = v61;
            a6[1] = (int64x2_t *)(v60 + 40);
            a6[2] = (int64x2_t *)&v59[40 * v58];
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            v52->i64[0] = v160;
            v52->i64[1] = v159;
            v52[1].i64[0] = v150;
            v52[1].i64[1] = v155;
            unint64_t v53 = (int64x2_t *)((char *)v52 + 40);
            v52[2].i64[0] = v158;
          }
          a6[1] = v53;
          int v193 = v152;
          int v194 = v157;
          HIDWORD(v195) = 4;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrInputViewUnitInfo *)v185);
          unint64_t v64 = *(void *)(a7 + 8);
          if (v64 >= *(void *)(a7 + 16))
          {
            uint64_t v65 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>((uint64_t *)a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(*(LargeStrideConvPoolDecomposedDesc **)(a7 + 8), (const LargeStrideConvPoolDecomposedDesc *)__src);
            uint64_t v65 = v64 + 344;
            *(void *)(a7 + 8) = v64 + 344;
          }
          *(void *)(a7 + 8) = v65;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          uint64_t v67 = a6[1];
          unint64_t v66 = (unint64_t)a6[2];
          if ((unint64_t)v67 >= v66)
          {
            unint64_t v69 = *a6;
            unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v67 - (char *)*a6) >> 3);
            unint64_t v71 = v70 + 1;
            if (v70 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v72 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (void)v69) >> 3);
            if (2 * v72 > v71) {
              unint64_t v71 = 2 * v72;
            }
            if (v72 >= 0x333333333333333) {
              unint64_t v73 = 0x666666666666666;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              unint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v145, v73);
              unint64_t v69 = *a6;
              uint64_t v67 = a6[1];
            }
            else
            {
              unint64_t v74 = 0;
            }
            unint64_t v75 = &v74[40 * v70];
            *(void *)unint64_t v75 = v160;
            *((void *)v75 + 1) = v159;
            *((void *)v75 + 2) = v161;
            *((void *)v75 + 3) = v155;
            *((void *)v75 + 4) = v158;
            unint64_t v76 = (int64x2_t *)v75;
            if (v67 != v69)
            {
              do
              {
                int64x2_t v77 = *(int64x2_t *)((char *)v67 - 40);
                int64x2_t v78 = *(int64x2_t *)((char *)v67 - 24);
                v76[-1].i64[1] = v67[-1].i64[1];
                *(int64x2_t *)((char *)v76 - 24) = v78;
                *(int64x2_t *)((char *)v76 - 40) = v77;
                unint64_t v76 = (int64x2_t *)((char *)v76 - 40);
                uint64_t v67 = (int64x2_t *)((char *)v67 - 40);
              }
              while (v67 != v69);
              unint64_t v69 = *a6;
            }
            uint64_t v68 = (int64x2_t *)(v75 + 40);
            *a6 = v76;
            a6[1] = (int64x2_t *)(v75 + 40);
            a6[2] = (int64x2_t *)&v74[40 * v73];
            if (v69) {
              operator delete(v69);
            }
          }
          else
          {
            v67->i64[0] = v160;
            v67->i64[1] = v159;
            v67[1].i64[0] = v161;
            v67[1].i64[1] = v155;
            uint64_t v68 = (int64x2_t *)((char *)v67 + 40);
            v67[2].i64[0] = v158;
          }
          a6[1] = v68;
          ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v162, v147);
          v162 = &unk_26C34A9B8;
          *(void *)&long long v183 = *((void *)v11 + 36);
          long long v79 = *((_OWORD *)v11 + 16);
          long long v180 = *((_OWORD *)v11 + 15);
          long long v181 = v79;
          long long v182 = *((_OWORD *)v11 + 17);
          DWORD1(v183) = 1;
          *((void *)&v183 + 1) = 0x100000001;
          memset(v184, 0, 24);
          *(_DWORD *)&v184[24] = *((_DWORD *)v147 + 82);
          DWORD2(v164) = 1;
          DWORD2(v166) = a1;
          uint64_t v167 = a5;
          *(void *)&long long v182 = *((void *)v11 + 34);
          long long v181 = *((_OWORD *)v11 + 16);
          __src[0] = 1;
          ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v197, (const ZinIrKernelUnitInfo *)&v162);
          uint64_t v197 = &unk_26C34A9B8;
          v200[16] = v182;
          v200[17] = v183;
          v201[0] = *(_OWORD *)v184;
          *(_OWORD *)((char *)v201 + 12) = *(_OWORD *)&v184[12];
          v200[14] = v180;
          v200[15] = v181;
          unint64_t v80 = *(void *)(a7 + 8);
          if (v80 >= *(void *)(a7 + 16))
          {
            uint64_t v81 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>((uint64_t *)a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
          }
          else
          {
            LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(*(LargeStrideConvPoolDecomposedDesc **)(a7 + 8), (const LargeStrideConvPoolDecomposedDesc *)__src);
            uint64_t v81 = v80 + 344;
            *(void *)(a7 + 8) = v80 + 344;
          }
          *(void *)(a7 + 8) = v81;
          LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
          long long v83 = a6[1];
          unint64_t v82 = (unint64_t)a6[2];
          if ((unint64_t)v83 >= v82)
          {
            uint64_t v85 = *a6;
            unint64_t v86 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v83 - (char *)*a6) >> 3);
            unint64_t v87 = v86 + 1;
            if (v86 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v88 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v82 - (void)v85) >> 3);
            if (2 * v88 > v87) {
              unint64_t v87 = 2 * v88;
            }
            if (v88 >= 0x333333333333333) {
              unint64_t v89 = 0x666666666666666;
            }
            else {
              unint64_t v89 = v87;
            }
            if (v89)
            {
              unint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v145, v89);
              uint64_t v85 = *a6;
              long long v83 = a6[1];
            }
            else
            {
              unint64_t v90 = 0;
            }
            unint64_t v91 = &v90[40 * v86];
            *(void *)unint64_t v91 = v160;
            *((void *)v91 + 1) = v159;
            *((void *)v91 + 2) = v161;
            *((void *)v91 + 3) = v157;
            *((void *)v91 + 4) = v158;
            unint64_t v92 = (int64x2_t *)v91;
            if (v83 != v85)
            {
              do
              {
                int64x2_t v93 = *(int64x2_t *)((char *)v83 - 40);
                int64x2_t v94 = *(int64x2_t *)((char *)v83 - 24);
                v92[-1].i64[1] = v83[-1].i64[1];
                *(int64x2_t *)((char *)v92 - 24) = v94;
                *(int64x2_t *)((char *)v92 - 40) = v93;
                unint64_t v92 = (int64x2_t *)((char *)v92 - 40);
                long long v83 = (int64x2_t *)((char *)v83 - 40);
              }
              while (v83 != v85);
              uint64_t v85 = *a6;
            }
            unint64_t v84 = (int64x2_t *)(v91 + 40);
            *a6 = v92;
            a6[1] = (int64x2_t *)(v91 + 40);
            a6[2] = (int64x2_t *)&v90[40 * v89];
            if (v85) {
              operator delete(v85);
            }
          }
          else
          {
            v83->i64[0] = v160;
            v83->i64[1] = v159;
            v83[1].i64[0] = v161;
            v83[1].i64[1] = v157;
            unint64_t v84 = (int64x2_t *)((char *)v83 + 40);
            v83[2].i64[0] = v158;
          }
          a6[1] = v84;
          v162 = &unk_26C34CC70;
          if (*(void *)&v171[24])
          {
            unint64_t v172 = *(void *)&v171[24];
            operator delete(*(void **)&v171[24]);
          }
          if (*(void *)v171)
          {
            *(void *)&v171[8] = *(void *)v171;
            operator delete(*(void **)v171);
          }
          ZinIrUnitInfo::~ZinIrUnitInfo(&v162);
          ZinIrUnitInfo::~ZinIrUnitInfo(v185);
          ++v48;
          uint64_t v47 = v161;
        }
        while (v154 >= v48);
      }
      long long v163 = 0uLL;
      *(void *)&long long v164 = 0;
      *(void *)&long long v166 = 0;
      long long v165 = 0uLL;
      uint64_t v167 = -1;
      v162 = &unk_26C34C998;
      BYTE4(v168) = 0;
      DWORD2(v164) = 3;
      DWORD2(v166) = a1;
      LODWORD(v168) = 3;
      HIDWORD(v166) = a1;
      ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v162);
      unint64_t v95 = *(void *)(a7 + 8);
      if (v95 >= *(void *)(a7 + 16))
      {
        uint64_t v96 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>((uint64_t *)a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
      }
      else
      {
        LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(*(LargeStrideConvPoolDecomposedDesc **)(a7 + 8), (const LargeStrideConvPoolDecomposedDesc *)__src);
        uint64_t v96 = v95 + 344;
        *(void *)(a7 + 8) = v95 + 344;
      }
      *(void *)(a7 + 8) = v96;
      LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
      long long v98 = a6[1];
      long long v97 = a6[2];
      if (v98 >= v97)
      {
        unint64_t v100 = *a6;
        unint64_t v101 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v98 - (char *)*a6) >> 3);
        unint64_t v102 = v101 + 1;
        if (v101 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v103 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v97 - (char *)v100) >> 3);
        if (2 * v103 > v102) {
          unint64_t v102 = 2 * v103;
        }
        if (v103 >= 0x333333333333333) {
          unint64_t v104 = 0x666666666666666;
        }
        else {
          unint64_t v104 = v102;
        }
        if (v104)
        {
          unint64_t v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v145, v104);
          unint64_t v100 = *a6;
          long long v98 = a6[1];
        }
        else
        {
          unint64_t v105 = 0;
        }
        int64x2_t v106 = vdupq_n_s64(1uLL);
        unint64_t v107 = (int64x2_t *)&v105[40 * v101];
        *unint64_t v107 = v106;
        v107[1] = v106;
        v107[2].i64[0] = 1;
        unint64_t v108 = v107;
        if (v98 != v100)
        {
          do
          {
            int64x2_t v109 = *(int64x2_t *)((char *)v98 - 40);
            int64x2_t v110 = *(int64x2_t *)((char *)v98 - 24);
            v108[-1].i64[1] = v98[-1].i64[1];
            *(int64x2_t *)((char *)v108 - 24) = v110;
            *(int64x2_t *)((char *)v108 - 40) = v109;
            unint64_t v108 = (int64x2_t *)((char *)v108 - 40);
            long long v98 = (int64x2_t *)((char *)v98 - 40);
          }
          while (v98 != v100);
          unint64_t v100 = *a6;
        }
        long long v99 = (int64x2_t *)((char *)v107 + 40);
        *a6 = v108;
        a6[1] = (int64x2_t *)((char *)v107 + 40);
        a6[2] = (int64x2_t *)&v105[40 * v104];
        if (v100) {
          operator delete(v100);
        }
      }
      else
      {
        *long long v98 = v140;
        v98[1] = v140;
        long long v99 = (int64x2_t *)((char *)v98 + 40);
        v98[2].i64[0] = 1;
      }
      a6[1] = v99;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v162);
      uint64_t v46 = v144 + 1;
      if (v143 < (v144 + 1)) {
        break;
      }
      int v152 = v46 * v142;
      uint64_t v47 = v161;
    }
    while (v141 - v46 * v142 >= v157);
    uint64_t v45 = v154 + 1;
  }
  long long v163 = 0uLL;
  *(void *)&long long v164 = 0;
  long long v165 = 0u;
  long long v166 = 0u;
  uint64_t v167 = -1;
  v162 = &unk_26C34C998;
  BYTE4(v168) = 0;
  DWORD2(v164) = 3;
  LODWORD(v168) = 4;
  ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)__src, (ZinIrConcatUnitInfo *)&v162);
  unint64_t v111 = *(void *)(a7 + 8);
  if (v111 >= *(void *)(a7 + 16))
  {
    uint64_t v112 = std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>((uint64_t *)a7, (const LargeStrideConvPoolDecomposedDesc *)__src);
  }
  else
  {
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(*(LargeStrideConvPoolDecomposedDesc **)(a7 + 8), (const LargeStrideConvPoolDecomposedDesc *)__src);
    uint64_t v112 = v111 + 344;
    *(void *)(a7 + 8) = v111 + 344;
  }
  *(void *)(a7 + 8) = v112;
  LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)__src);
  long long v113 = a6[2];
  long long v114 = a6[1];
  if (v114 >= v113)
  {
    unint64_t v117 = *a6;
    unint64_t v118 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v114 - (char *)*a6) >> 3);
    unint64_t v119 = v118 + 1;
    if (v118 + 1 > 0x666666666666666) {
      goto LABEL_165;
    }
    unint64_t v120 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v113 - (char *)v117) >> 3);
    if (2 * v120 > v119) {
      unint64_t v119 = 2 * v120;
    }
    if (v120 >= 0x333333333333333) {
      unint64_t v121 = 0x666666666666666;
    }
    else {
      unint64_t v121 = v119;
    }
    if (v121)
    {
      unint64_t v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a6 + 2), v121);
      unint64_t v117 = *a6;
      long long v114 = a6[1];
    }
    else
    {
      unint64_t v122 = 0;
    }
    unint64_t v123 = &v122[40 * v118];
    int64x2_t v124 = vdupq_n_s64(1uLL);
    *(int64x2_t *)unint64_t v123 = v124;
    long long v113 = (int64x2_t *)&v122[40 * v121];
    *((void *)v123 + 2) = v45;
    *(int64x2_t *)(v123 + 24) = v124;
    uint64_t v116 = (int64x2_t *)(v123 + 40);
    if (v114 != v117)
    {
      do
      {
        long long v125 = *(long long *)((char *)&v114[-3] + 8);
        long long v126 = *(long long *)((char *)&v114[-2] + 8);
        *((void *)v123 - 1) = v114[-1].i64[1];
        *(_OWORD *)(v123 - 24) = v126;
        *(_OWORD *)(v123 - 40) = v125;
        v123 -= 40;
        long long v114 = (int64x2_t *)((char *)v114 - 40);
      }
      while (v114 != v117);
      unint64_t v117 = *a6;
    }
    *a6 = (int64x2_t *)v123;
    a6[1] = v116;
    a6[2] = v113;
    if (v117)
    {
      operator delete(v117);
      long long v113 = a6[2];
    }
  }
  else
  {
    int64x2_t v115 = vdupq_n_s64(1uLL);
    int64x2_t *v114 = v115;
    v114[1].i64[0] = v45;
    *(int64x2_t *)((char *)v114 + 24) = v115;
    uint64_t v116 = (int64x2_t *)((char *)v114 + 40);
  }
  uint64_t v127 = v143 + 1;
  a6[1] = v116;
  if (v116 < v113)
  {
    *uint64_t v116 = vdupq_n_s64(1uLL);
    v116[1].i64[0] = v45;
    v116[1].i64[1] = v127;
    v116[2].i64[0] = 1;
    long long v128 = (int64x2_t *)((char *)v116 + 40);
    goto LABEL_159;
  }
  long long v129 = *a6;
  unint64_t v130 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v116 - (char *)*a6) >> 3);
  unint64_t v131 = v130 + 1;
  if (v130 + 1 > 0x666666666666666) {
LABEL_165:
  }
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  unint64_t v132 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v113 - (char *)v129) >> 3);
  if (2 * v132 > v131) {
    unint64_t v131 = 2 * v132;
  }
  if (v132 >= 0x333333333333333) {
    unint64_t v133 = 0x666666666666666;
  }
  else {
    unint64_t v133 = v131;
  }
  if (v133)
  {
    uint64_t v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a6 + 2), v133);
    long long v129 = *a6;
    uint64_t v116 = a6[1];
  }
  else
  {
    uint64_t v134 = 0;
  }
  uint64_t v135 = (int64x2_t *)&v134[40 * v130];
  *uint64_t v135 = vdupq_n_s64(1uLL);
  unint64_t v136 = (int64x2_t *)&v134[40 * v133];
  v135[1].i64[0] = v45;
  v135[1].i64[1] = v127;
  v135[2].i64[0] = 1;
  long long v128 = (int64x2_t *)((char *)v135 + 40);
  if (v116 != v129)
  {
    do
    {
      int64x2_t v137 = *(int64x2_t *)((char *)v116 - 40);
      int64x2_t v138 = *(int64x2_t *)((char *)v116 - 24);
      v135[-1].i64[1] = v116[-1].i64[1];
      *(int64x2_t *)((char *)v135 - 24) = v138;
      *(int64x2_t *)((char *)v135 - 40) = v137;
      uint64_t v135 = (int64x2_t *)((char *)v135 - 40);
      uint64_t v116 = (int64x2_t *)((char *)v116 - 40);
    }
    while (v116 != v129);
    long long v129 = *a6;
  }
  *a6 = v135;
  a6[1] = v128;
  a6[2] = v136;
  if (v129) {
    operator delete(v129);
  }
LABEL_159:
  a6[1] = v128;
  ZinIrUnitInfo::~ZinIrUnitInfo(&v162);
  return 0;
}

void sub_2111D56B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void ZinLargeStridePoolTransform::~ZinLargeStridePoolTransform(ZinLargeStridePoolTransform *this)
{
  *(void *)this = &unk_26C3523D8;
  v3 = (void **)((char *)this + 208);
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 1);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_26C3523D8;
  v3 = (void **)((char *)this + 208);
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 1);
  MEMORY[0x21667D3C0](this, 0x10B3C4053614EC0);
}

void ZinLargeStridePoolTransform::ZinLargeStridePoolTransform(ZinLargeStridePoolTransform *this, const ZinLargeStridePoolTransform *a2)
{
  *(void *)this = &unk_26C3523D8;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 1);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 10);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *((void *)this + 1) = &unk_26C34AB58;
  long long v6 = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 88) = v6;
  long long v7 = *(_OWORD *)((char *)a2 + 120);
  long long v8 = *(_OWORD *)((char *)a2 + 136);
  long long v9 = *(_OWORD *)((char *)a2 + 152);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *(_OWORD *)((char *)this + 152) = v9;
  *(_OWORD *)((char *)this + 136) = v8;
  *(_OWORD *)((char *)this + 120) = v7;
  char v10 = *((unsigned char *)a2 + 176);
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 176) = v10;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  std::vector<ZinTensorDimensions>::__init_with_size[abi:ne180100]<std::__wrap_iter<ZinTensorDimensions const*>,std::__wrap_iter<ZinTensorDimensions const*>>((void *)this + 23, *((const void **)a2 + 23), *((void *)a2 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3));
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__init_with_size[abi:ne180100]<LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*>((void *)this + 26, *((void *)a2 + 26), *((void *)a2 + 27), 0x82FA0BE82FA0BE83 * ((uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3));
}

void sub_2111D59A4(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 192) = v5;
    operator delete(v5);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v1);
  _Unwind_Resume(a1);
}

void *std::vector<LargeStrideConvPoolDecomposedDesc>::__init_with_size[abi:ne180100]<LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<LargeStrideConvPoolDecomposedDesc>::__vallocate[abi:ne180100](result, a4);
    result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<LargeStrideConvPoolDecomposedDesc>,LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2111D5A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<LargeStrideConvPoolDecomposedDesc>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xBE82FA0BE82FA1) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[344 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<LargeStrideConvPoolDecomposedDesc>,LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*,LargeStrideConvPoolDecomposedDesc*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)(a4 + v7), (const LargeStrideConvPoolDecomposedDesc *)(a2 + v7));
      v7 += 344;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2111D5B28(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 344;
    do
    {
      LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)(v4 + v2));
      v2 -= 344;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<LargeStrideConvPoolDecomposedDesc>::__push_back_slow_path<LargeStrideConvPoolDecomposedDesc>(uint64_t *a1, const LargeStrideConvPoolDecomposedDesc *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x5F417D05F417D0) {
    unint64_t v9 = 0xBE82FA0BE82FA0;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unsigned int v14 = (LargeStrideConvPoolDecomposedDesc *)&v10[344 * v4];
  unsigned int v16 = &v10[344 * v9];
  LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(v14, a2);
  unsigned int v15 = (char *)v14 + 344;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<LargeStrideConvPoolDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2111D5C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LargeStrideConvPoolDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<LargeStrideConvPoolDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LargeStrideConvPoolDecomposedDesc>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<LargeStrideConvPoolDecomposedDesc>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>,std::reverse_iterator<LargeStrideConvPoolDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (LargeStrideConvPoolDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(v12, (const LargeStrideConvPoolDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<LargeStrideConvPoolDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 344;
    LargeStrideConvPoolDecomposedDesc::~LargeStrideConvPoolDecomposedDesc((LargeStrideConvPoolDecomposedDesc *)(i - 344));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void LargeStrideConvPoolDecomposedDesc::LargeStrideConvPoolDecomposedDesc(LargeStrideConvPoolDecomposedDesc *this, ZinIrPadUnitInfo *a2)
{
  *(_DWORD *)this = 44;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((LargeStrideConvPoolDecomposedDesc *)((char *)this + 8), a2);
  *((void *)this + 1) = &unk_26C3499A0;
  long long v4 = *(_OWORD *)((char *)a2 + 156);
  long long v5 = *(_OWORD *)((char *)a2 + 172);
  uint64_t v6 = *(void *)((char *)a2 + 188);
  *((void *)this + 26) = 0;
  *(void *)((char *)this + 196) = v6;
  *(_OWORD *)((char *)this + 180) = v5;
  *(_OWORD *)((char *)this + 164) = v4;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)this + 26, *((const void **)a2 + 25), *((void *)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3);
  *((_WORD *)this + 116) = *((_WORD *)a2 + 112);
}

void sub_2111D5E64(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v1);
  _Unwind_Resume(a1);
}

void ZinConvPoolLargeStride::LargeStridePoolLower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Large Stride Pool Lower, invalid state\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Large Stride Pool Lower, ref_layer is NULL\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Large Stride Pool Lower, ref_inputview2_layer is NULL\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Large Stride Pool Lower, state should be InputView2State\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Large Stride Pool Lower, concat state is wrong\n", a5, a6, a7, a8, 0);
}

void ZinConvPoolLargeStride::LargeStridePoolLower(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_0_3(a1, a2);
  OUTLINED_FUNCTION_1_3(&dword_210C72000, &_os_log_internal, v2, "Large Stride Pool Lower, concat1_layers is invalid\n", v3);
}

{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_0_3(a1, a2);
  OUTLINED_FUNCTION_1_3(&dword_210C72000, &_os_log_internal, v2, "Large Stride Pool Lower, concat2_layers is invalid\n", v3);
}

uint64_t MirOpt::ReassignTensorDimension::InsertNCTransposesForGlobalReductionPEEW(MirOpt::ReassignTensorDimension *this, uint64_t **a2, ZinIrOpLayer *a3)
{
  v66[8] = *MEMORY[0x263EF8340];
  Hal = ZinIrTarget::GetHal(a2[2], (ZinIrTarget *)a2[2][20]);
  uint64_t v6 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  if (*((_DWORD *)a2[8] + 2) != 81) {
    return 0;
  }
  uint64_t v7 = v6;
  if (a2[63])
  {
    ((void (*)(_OWORD *__return_ptr, uint64_t **))(*a2)[48])(v64, a2);
    if (*(void *)&v64[0] / *(void *)(v7 + 960) < *((void *)&v64[0] + 1) / *(void *)(v7 + 960)
      && (*((_DWORD *)a2[8] + 2) != 81
       || (uint64_t v8 = a2[25]) == 0
       || ((*(uint64_t (**)(uint64_t *))(*v8 + 304))(v8) & 1) == 0)
      && (((uint64_t (*)(uint64_t **))(*a2)[82])(a2) & 1) == 0
      && (((uint64_t (*)(uint64_t **))(*a2)[80])(a2) & 1) == 0
      && (((uint64_t (*)(uint64_t **))(*a2)[83])(a2) & 1) == 0
      && (((uint64_t (*)(uint64_t **))(*a2)[81])(a2) & 1) == 0
      && (((uint64_t (*)(uint64_t **))(*a2)[51])(a2) & 1) == 0)
    {
      unint64_t v27 = a2[14];
      if (a2[15] == v27)
      {
LABEL_34:
        unint64_t v31 = (char *)operator new(8uLL);
        *(void *)unint64_t v31 = 2;
        int64x2_t v62 = v31 + 8;
        int64x2_t v63 = v31 + 8;
        uint64_t v61 = v31;
        unint64_t v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v63, 2uLL);
        v32[1] = 0x200000000;
        unint64_t v33 = (char *)(v32 + 1);
        unint64_t v35 = (char *)&v32[v34];
        unint64_t v36 = (char *)(v32 + 2);
        v37 = v61;
        int64x2_t v38 = v62;
        if (v62 != v61)
        {
          do
          {
            uint64_t v39 = *((void *)v38 - 1);
            v38 -= 8;
            *((void *)v33 - 1) = v39;
            v33 -= 8;
          }
          while (v38 != v37);
          v37 = v61;
        }
        uint64_t v61 = v33;
        int64x2_t v62 = v36;
        int64x2_t v63 = v35;
        if (v37) {
          operator delete(v37);
        }
        int64x2_t v62 = v36;
        if (*((char *)a2 + 47) >= 0) {
          size_t v40 = *((unsigned __int8 *)a2 + 47);
        }
        else {
          size_t v40 = (size_t)a2[4];
        }
        v41 = &v55;
        std::string::basic_string[abi:ne180100]((uint64_t)&v55, v40 + 1);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v41 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if (v40)
        {
          if (*((char *)a2 + 47) >= 0) {
            int64x2_t v42 = (uint64_t *)(a2 + 3);
          }
          else {
            int64x2_t v42 = a2[3];
          }
          memmove(v41, v42, v40);
        }
        *(_WORD *)((char *)&v41->__r_.__value_.__l.__data_ + v40) = 95;
        std::string::basic_string[abi:ne180100]<0>(&v58, "ntoc");
        int64x2_t v43 = std::string::append(&v58, "_xfm", 4uLL);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        int64_t v60 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v59 = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (v60 >= 0) {
          uint64_t v45 = v59;
        }
        else {
          uint64_t v45 = (void **)v59[0];
        }
        if (v60 >= 0) {
          std::string::size_type v46 = HIBYTE(v60);
        }
        else {
          std::string::size_type v46 = (std::string::size_type)v59[1];
        }
        uint64_t v47 = std::string::append(&v55, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        *(void *)&long long v57 = *((void *)&v47->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        __n128 v49 = ZinObjectNameFactory::ZinObjectNameFactory(v64, __p);
        if (SBYTE7(v57) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v60) < 0) {
          operator delete(v59[0]);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        v59[0] = 0;
        v59[1] = 0;
        int64_t v60 = 0;
        memset(&v58, 0, sizeof(v58));
        uint64_t v50 = a2[11];
        uint64_t v51 = *v50;
        (*(void (**)(uint64_t, void, void, __n128))(*(void *)*v50 + 32))(*v50, 0, 0, v49);
        (*(void (**)(uint64_t, void, void))(*(void *)v51 + 32))(v51, 0, 0);
        ZinBuilder::CreateTranspose();
      }
      unint64_t v28 = 0;
      while (1)
      {
        int64x2_t v29 = (ZinIrOpLayer *)v27[v28];
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v57 = 0;
        char IsNoOp = ZinIrOpLayer::IsNoOp(v29, (uint64_t *)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (IsNoOp) {
          break;
        }
        ++v28;
        unint64_t v27 = a2[14];
        if (v28 >= a2[15] - v27) {
          goto LABEL_34;
        }
      }
    }
  }
  ((void (*)(_OWORD *__return_ptr, uint64_t **))(*a2)[48])(v64, a2);
  if (!a2[63]
    || *((void *)&v64[0] + 1) <= *(void *)(v7 + 960)
    || !*((unsigned char *)a2[2] + 668)
    && ((uint64_t (*)(uint64_t **, uint64_t))(*a2)[46])(a2, 3) <= 32
    && ((uint64_t (*)(uint64_t **, uint64_t))(*a2)[46])(a2, 4) <= 32
    && ((uint64_t (*)(uint64_t **, uint64_t))(*a2)[46])(a2, 1) == 1)
  {
    return 0;
  }
  uint64_t v9 = ((uint64_t (*)(uint64_t **, void, void))(*a2)[4])(a2, 0, 0);
  long long v10 = *(_OWORD *)(v9 + 64);
  v64[0] = *(_OWORD *)(v9 + 48);
  v64[1] = v10;
  uint64_t v65 = *(void *)(v9 + 80);
  uint64_t v11 = *(ZinANELayer **)(v7 + 960);
  v66[0] = &unk_26C32CF70;
  v66[1] = ZinMirChannelSplit::ComputeOutDims_Default;
  v66[3] = v66;
  uint64_t v12 = (ZinIrOpLayer *)ZinMirChannelSplit::ZinSplitLayerByInputChannel(this, (ZinMirChannelSplit *)a2, v11, (uint64_t)v64, (uint64_t)v66);
  std::__function::__value_func<ZinTensorDimensions ()(ZinTensorDimensions const&,long,ZinANELayer const*)>::~__value_func[abi:ne180100](v66);
  if (!v12) {
    return 3;
  }
  uint64_t v13 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v12 + 32))(v12, 0, 0);
  uint64_t v14 = ((uint64_t (*)(uint64_t **, void, void))(*a2)[4])(a2, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v14, &v54);
  ZinIrTensor::SetTensorMirInfo(v13, &v54);
  unsigned int v15 = v54;
  unint64_t v54 = 0;
  if (v15) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v54, v15);
  }
  memset(v52, 0, sizeof(v52));
  int v53 = 1065353216;
  char v16 = ZinIrOpLayerGraph::MoveOutgoingEdges(this, a2, v12, v52);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v52);
  if ((v16 & 1) == 0)
  {
    BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v19) {
      std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    return 3;
  }
  if (!ZinIrOpLayerGraph::RemoveNode(this, (ZinIrOpLayer *)a2, 0)) {
    return 3;
  }
  return 0;
}

void sub_2111D6F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a43) {
    operator delete(a43);
  }
  *(void *)(v48 - 208) = &unk_26C34DA98;
  if (*(char *)(v48 - 177) < 0) {
    operator delete(*(void **)(v48 - 200));
  }
  uint64_t v50 = *(void **)(v48 - 232);
  if (v50)
  {
    *(void *)(v48 - 224) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::ReassignTensorDimension::OptimizePatchHeightForOutputReductionForPEEW(MirOpt::ReassignTensorDimension *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*((void *)a2 + 8) + 8) == 81)
  {
    uint64_t v4 = *((void *)a2 + 63);
    if (v4)
    {
      if ((*(_DWORD *)(*(void *)(v4 + 64) + 12) - 4) >= 3)
      {
        uint64_t v5 = *((void *)a2 + 11);
        if (*((void *)a2 + 12) - v5 == 8
          && *(void *)(*(void *)v5 + 120) - *(void *)(*(void *)v5 + 112) == 8
          && (*(uint64_t (**)(ZinIrOpLayerGraph *, uint64_t, ZinIrOpLayer *))(*(void *)a2 + 360))(a2, 3, a3) == 1&& (*(uint64_t (**)(ZinIrOpLayerGraph *, uint64_t))(*(void *)a2 + 360))(a2, 4) >= 2)
        {
          (*(void (**)(_OWORD *__return_ptr, ZinIrOpLayerGraph *))(*(void *)a2 + 376))(v24, a2);
          uint64_t v6 = (ZinIrRegAllocUtil *)(*(uint64_t (**)(void, void, void))(***((void ***)a2 + 11) + 32))(**((void **)a2 + 11), 0, 0);
          Hal = ZinIrTarget::GetHal(*((uint64_t **)a2 + 2), *(ZinIrTarget **)(*((void *)a2 + 2) + 160));
          uint64_t v8 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
          if (!ZinIrRegAllocUtil::IsChainable(v6, v8, v9))
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_", (const void **)a2 + 3, (void **)&v19);
            std::string::basic_string[abi:ne180100]<0>(&v17, "pe_lowerengine");
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_xfm", &v17, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            uint64_t v12 = std::string::append((std::string *)&v19, (const std::string::value_type *)p_p, size);
            long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
            *(void *)&long long v27 = *((void *)&v12->__r_.__value_.__l + 2);
            long long v26 = v13;
            v12->__r_.__value_.__l.__size_ = 0;
            v12->__r_.__value_.__r.__words[2] = 0;
            v12->__r_.__value_.__r.__words[0] = 0;
            ZinObjectNameFactory::ZinObjectNameFactory(v22, &v26);
            if (SBYTE7(v27) < 0) {
              operator delete((void *)v26);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v17.__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v20) < 0) {
              operator delete((void *)v19);
            }
            ZinIrOpLayer::GetInputTensor(a2, 0);
            long long v19 = v24[0];
            long long v20 = v24[1];
            uint64_t v21 = v25;
            DimensionOrderHint::DimensionOrderHint(&__p, 2);
            if ((unint64_t)v20 <= 3 && (BYTE8(v20) & 1) == 0)
            {
              *(void *)&long long v20 = 2 * v20;
              *((uint64_t *)&v20 + 1) /= 2;
              uint64_t v14 = *((void *)a2 + 2);
              unsigned int v15 = operator new(0x14uLL);
              v17.__r_.__value_.__l.__size_ = (std::string::size_type)(v15 + 5);
              v17.__r_.__value_.__r.__words[2] = (std::string::size_type)(v15 + 5);
              v15[4] = 4;
              *(_OWORD *)unsigned int v15 = xmmword_211EFC880;
              v17.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
              DimensionOrderHint::DimensionOrderHint(&v26, &v17);
              ZinBuilder::CreateReshape(v14, (uint64_t)v22);
            }
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            v22[0] = &unk_26C34DA98;
            if (v23 < 0) {
              operator delete((void *)v22[1]);
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_2111D7BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (__p) {
    operator delete(__p);
  }
  if (a41) {
    operator delete(a41);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::ReassignTensorDimension::Execute(void *a1, uint64_t a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  v9[0] = &unk_26C380F58;
  v9[1] = MirOpt::ReassignTensorDimension::OptimizePatchHeightForOutputReductionForPEEW;
  v9[3] = v9;
  int v4 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v9, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v9);
  if (v4) {
    return 3;
  }
  v8[0] = &unk_26C380F58;
  v8[1] = MirOpt::ReassignTensorDimension::InsertNCTransposesForGlobalReductionPEEW;
  v8[3] = v8;
  int v5 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v8, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v8);
  if (v5) {
    return 3;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  if (!*(unsigned char *)(v7 + 492))
  {
    if (*(unsigned char *)(v7 + 535)) {
      operator new();
    }
  }
  return 0;
}

void sub_2111D8008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  uint64_t v13 = a10;
  a10 = 0;
  if (v13) {
    std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)&a10, v13);
  }
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::RunGlobalOptimizationForCWTranspose(MirOpt::CWTransposeUtil *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  MirOpt::CWTransposeUtil::CreateORToolsGraph(this);
}

void sub_2111D8560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v58 - 192);
  std::unique_ptr<CpTransposeGraph>::reset[abi:ne180100]((CpTransposeGraph **)(v58 - 152), 0);
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::MaterializeCWTranspose(MirOpt::CWTransposeUtil *this)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)*((void *)this + 87);
  v4[0] = &unk_26C32FDC8;
  v4[1] = this;
  v4[3] = v4;
  int v2 = ZinIrControlFlowGraph::TraverseForward(v1, (uint64_t)v4, 0);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v4);
  if (v2) {
    ZinAssertImpl("Failed to materialize transpose optimization results");
  }
  return 1;
}

void sub_2111D86FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t MirOpt::CWTransposeUtil::CWTransposeUtil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = MEMORY[0x263F8C310] + 64;
  *(void *)(a1 + 416) = MEMORY[0x263F8C310] + 64;
  uint64_t v11 = a1 + 8;
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v13 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *(void *)a1 = v13;
  *(void *)(a1 + *(void *)(v13 - 24)) = v12;
  uint64_t v14 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v14, (void *)(a1 + 8));
  uint64_t v15 = MEMORY[0x263F8C310] + 24;
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  *(void *)a1 = v15;
  *(void *)(a1 + 416) = v10;
  MEMORY[0x21667CDD0](v11);
  *(void *)(a1 + 568) = a5;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 1065353216;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = a1 + 624;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = a1 + 648;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = a1 + 672;
  uint64_t v16 = *a4;
  *a4 = 0;
  *(void *)(a1 + 688) = v16;
  *(void *)(a1 + 696) = a2;
  *(void *)(a1 + 704) = a3;
  MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap((MirOpt::CWTransposeUtil *)a1);
  return a1;
}

void sub_2111D88E4(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  *int v4 = 0;
  if (v6) {
    std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)v4, v6);
  }
  CpTransposeUtils::CpTransposeOptimizationResult::~CpTransposeOptimizationResult(v3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2);
  std::ofstream::~ofstream(v1);
  _Unwind_Resume(a1);
}

void *MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(MirOpt::CWTransposeUtil *this)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)*((void *)this + 87);
  v4[0] = &unk_26C32FE20;
  v4[1] = this;
  v4[3] = v4;
  int v2 = ZinIrControlFlowGraph::TraverseForward(v1, (uint64_t)v4, 1);
  uint64_t result = std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v4);
  if (v2) {
    ZinAssertImpl("Failed to create transpose utils");
  }
  return result;
}

void sub_2111D89E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void CpTransposeUtils::CpTransposeOptimizationResult::~CpTransposeOptimizationResult(CpTransposeUtils::CpTransposeOptimizationResult *this)
{
}

void MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings(char **a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = a1 + 2;
  int v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), 1uLL);
  uint64_t v6 = &v4[8 * v5];
  *(void *)int v4 = 0x200000004;
  uint64_t v7 = v4 + 8;
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = v4;
  if (v8 != *a1)
  {
    do
    {
      uint64_t v11 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v10 - 1) = v11;
      v10 -= 8;
    }
    while (v8 != v9);
    uint64_t v8 = *a1;
  }
  *a1 = v10;
  a1[1] = v7;
  a1[2] = v6;
  if (v8)
  {
    operator delete(v8);
    uint64_t v6 = *v3;
  }
  a1[1] = v7;
  if (v7 >= v6)
  {
    uint64_t v13 = (v7 - *a1) >> 3;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v6 - *a1;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      std::string v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v16);
    }
    else {
      std::string v17 = 0;
    }
    int v18 = &v17[8 * v13];
    long long v19 = &v17[8 * v16];
    *(void *)int v18 = 0x400000002;
    uint64_t v12 = v18 + 8;
    uint64_t v21 = *a1;
    long long v20 = a1[1];
    if (v20 != *a1)
    {
      do
      {
        uint64_t v22 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      long long v20 = *a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *((void *)v4 + 1) = 0x400000002;
    uint64_t v12 = v4 + 16;
  }
  a1[1] = v12;
}

void sub_2111D8BA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::CWTransposeUtil::CalculatePerfAndMemCosts(ZinTensorFamilyUtil **a1, ZinIrOpLayer *this, uint64_t a3)
{
  if (*((void *)this + 12) - *((void *)this + 11) != 8) {
    goto LABEL_29;
  }
  if (*(_DWORD *)a3 == 1)
  {
    uint64_t v6 = a1[86];
    InputTensor = (const ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 0);
    RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v6, InputTensor);
    char IsTransposeDisqualified = MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, RootTensor);
    if (*(_DWORD *)(a3 + 8) != 1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (*(_DWORD *)(a3 + 8) == 1)
  {
    char IsTransposeDisqualified = 0;
LABEL_7:
    uint64_t v10 = a1[86];
    uint64_t v11 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
    uint64_t v12 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v10, v11);
    if (MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, v12)) {
      goto LABEL_29;
    }
LABEL_8:
    if (IsTransposeDisqualified) {
      goto LABEL_29;
    }
  }
  unsigned int v13 = *(_DWORD *)(*((void *)this + 8) + 8) - 81;
  BOOL v14 = v13 > 0xB;
  int v15 = (1 << v13) & 0x905;
  if (!v14 && v15 != 0)
  {
    if (ZinIrOpLayer::IsNELayer(this))
    {
      int v17 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)this + 408))(this) ^ (*(_DWORD *)(a3 + 8) == 1);
      if ((((*(_DWORD *)a3 == 1) ^ v17) & 1) == 0)
      {
        char v18 = v17 ^ 1;
        if (*(_DWORD *)a3 != 1) {
          char v18 = 1;
        }
        if (v18) {
          goto LABEL_21;
        }
        MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings(&v35);
        char v19 = (*(uint64_t (**)(ZinIrOpLayer *, char **))(*(void *)this + 424))(this, &v35);
        if (v35)
        {
          unint64_t v36 = v35;
          operator delete(v35);
        }
        if (v19)
        {
LABEL_21:
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          v37 = &v38;
          MirOpt::CollectLayersNeededForAnalysis((uint64_t)this, (uint64_t)&v37);
          std::string::basic_string[abi:ne180100]<0>(&v34, "cw_opt_ne_dce_candidacy");
          ZinIrOpLayerGraph::CloneSubGraph((uint64_t)&v35);
        }
      }
    }
    else
    {
      if (!ZinIrOpLayer::IsPELayer(this)) {
        ZinAssertImpl("Only NE and PE engine layers are supported\n");
      }
      int v20 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)this + 640))(this);
      int v21 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)this + 408))(this);
      int v22 = v20 ^ (*(_DWORD *)a3 == 1);
      int v23 = v21 ^ (*(_DWORD *)(a3 + 8) == 1);
      if (v22 == v23)
      {
        if ((v22 & v23) != 1) {
          goto LABEL_28;
        }
        MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings(&v35);
        char v24 = (*(uint64_t (**)(ZinIrOpLayer *, char **))(*(void *)this + 424))(this, &v35);
        if (v35)
        {
          unint64_t v36 = v35;
          operator delete(v35);
        }
        if (v24)
        {
LABEL_28:
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          v37 = &v38;
          MirOpt::CollectLayersNeededForAnalysis((uint64_t)this, (uint64_t)&v37);
          std::string::basic_string[abi:ne180100]<0>(&v32, "cw_opt_pe_dce_candidacy");
          ZinIrOpLayerGraph::CloneSubGraph((uint64_t)&v35);
        }
      }
    }
  }
LABEL_29:
  (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(void *)this + 512))(v33, this);
  uint64_t v25 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(a1[86], *(const ZinIrTensor **)v33[0]);
  if (*(_DWORD *)a3 == 1) {
    int v26 = MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, v25);
  }
  else {
    int v26 = 0;
  }
  if (*(unsigned char *)(a3 + 12))
  {
    long long v27 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(a1[86], *((const ZinIrTensor **)v33[0] + 1));
    if (*(_DWORD *)(a3 + 4) == 1) {
      v26 |= MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, v27);
    }
  }
  uint64_t v28 = a1[86];
  int64x2_t v29 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  long long v30 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v28, v29);
  if (*(_DWORD *)(a3 + 8) == 1)
  {
    if (((MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, v30) | v26) & 1) == 0) {
      goto LABEL_37;
    }
  }
  else if ((v26 & 1) == 0)
  {
LABEL_37:
    MirOpt::CWTransposeUtil::CalculatePerfCosts((uint64_t)a1, (uint64_t)this);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  return -1;
}

void sub_2111D96E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40)
{
  int64x2_t v42 = *(std::__shared_weak_count **)(v40 - 208);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  ZinIrClonedGraphInfo::~ZinIrClonedGraphInfo((ZinIrClonedGraphInfo *)(v40 - 176));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v40 - 120, *(void **)(v40 - 112));
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::IsTransposeDisqualified(ZinTensorFamilyUtil **this, const ZinIrTensor *a2)
{
  int v2 = a2;
  uint64_t v3 = this;
  TensorFamily = (uint64_t **)ZinTensorFamilyUtil::GetTensorFamily(this[86], a2);
  uint64_t v6 = *TensorFamily;
  uint64_t v5 = TensorFamily[1];
  if (*TensorFamily == v5) {
    return 0;
  }
  uint64_t v7 = (const ZinIrTensor *)((char *)v2 + 48);
  while (1)
  {
    uint64_t v8 = *v6;
    char IsIntermediate = ZinIrOpLayer::IsIntermediate(*(ZinIrOpLayer **)(*v6 + 96));
    int v10 = *(_DWORD *)(*(void *)(*(void *)(v8 + 96) + 64) + 8);
    if (IsIntermediate)
    {
      if (v10 != 29) {
        goto LABEL_10;
      }
    }
    else if (v10 != 29)
    {
      return 1;
    }
    BOOL v11 = IsVector(v7);
    uint64_t result = 1;
    if (!v11 || *((void *)v2 + 9) != 1) {
      return result;
    }
    int v10 = 29;
LABEL_10:
    uint64_t v73 = 0;
    if (ZinTensorFormatGetSizeInBits(*(_DWORD *)(v8 + 88), &v73)) {
      ZinAssertImpl("Tensor format should be valid");
    }
    if ((v73 & 7) != 0) {
      return 1;
    }
    uint64_t v13 = (v10 - 33);
    if (v13 > 0x2F) {
      goto LABEL_28;
    }
    if (v13 != 3)
    {
      if (v13 == 4)
      {
        uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*(ZinReshapeLayer **)(v8 + 96));
        if (ZinIrTransposeInfo::HasDimension(ReshapeInfo, 2)) {
          return 1;
        }
        goto LABEL_62;
      }
      if (((1 << (v10 - 33)) & 0xE00000000007) != 0) {
        return 1;
      }
LABEL_28:
      if (v10 == 7)
      {
        uint64_t v28 = *(void **)(v8 + 96);
        int v29 = *(_DWORD *)(v28[8] + 12);
        if (v29)
        {
          if (v29 == 1 || v29 == 6) {
            return 1;
          }
        }
        else
        {
          uint64_t v67 = v7;
          unint64_t v69 = v5;
          uint64_t v64 = *(void *)(v8 + 96);
          uint64_t v65 = v3;
          int64x2_t v63 = v2;
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v71 = 0;
          unint64_t v31 = (void *)v28[11];
          unint64_t v32 = (void *)v28[12];
          while (v31 != v32)
          {
            unint64_t v33 = (void *)(*(uint64_t (**)(void, void, void))(*(void *)*v31 + 32))(*v31, 0, 0);
            uint64_t v35 = v33[6];
            uint64_t v34 = v33[7];
            uint64_t v37 = v33[8];
            uint64_t v36 = v33[9];
            uint64_t v38 = v33[10];
            uint64_t v39 = __p[1];
            if (__p[1] >= (void *)v71)
            {
              v41 = __p[0];
              unint64_t v42 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
              unint64_t v43 = v42 + 1;
              if (v42 + 1 > 0x666666666666666) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              if (0x999999999999999ALL * ((uint64_t)(v71 - (unint64_t)__p[0]) >> 3) > v43) {
                unint64_t v43 = 0x999999999999999ALL * ((uint64_t)(v71 - (unint64_t)__p[0]) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v71 - (unint64_t)__p[0]) >> 3) >= 0x333333333333333) {
                unint64_t v44 = 0x666666666666666;
              }
              else {
                unint64_t v44 = v43;
              }
              if (v44)
              {
                uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v71, v44);
                v41 = __p[0];
                uint64_t v39 = __p[1];
              }
              else
              {
                uint64_t v45 = 0;
              }
              std::string::size_type v46 = &v45[40 * v42];
              *(void *)std::string::size_type v46 = v35;
              *((void *)v46 + 1) = v36;
              *((void *)v46 + 2) = v37;
              *((void *)v46 + 3) = v34;
              *((void *)v46 + 4) = v38;
              if (v39 == v41)
              {
                uint64_t v50 = &v45[40 * v42];
              }
              else
              {
                uint64_t v47 = &v45[40 * v42];
                do
                {
                  long long v48 = *(_OWORD *)(v39 - 5);
                  long long v49 = *(_OWORD *)(v39 - 3);
                  uint64_t v50 = v47 - 40;
                  *((void *)v47 - 1) = *(v39 - 1);
                  *(_OWORD *)(v47 - 24) = v49;
                  *(_OWORD *)(v47 - 40) = v48;
                  v39 -= 5;
                  v47 -= 40;
                }
                while (v39 != v41);
              }
              uint64_t v40 = v46 + 40;
              __p[0] = v50;
              __p[1] = v46 + 40;
              *(void *)&long long v71 = &v45[40 * v44];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(void *)__p[1] = v35;
              v39[1] = v36;
              v39[2] = v37;
              v39[3] = v34;
              uint64_t v40 = v39 + 5;
              v39[4] = v38;
            }
            __p[1] = v40;
            ++v31;
          }
          uint64_t v51 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v64 + 32))(v64, 0, 0);
          uint64_t v3 = v65;
          BOOL IsWidthAlign = ZinConcatLayerUtils::IsWidthAlign(__p, *(_DWORD *)(v51 + 88), *(void *)(*(void *)v65[88] + 528));
          int v2 = v63;
          uint64_t v7 = v67;
          uint64_t v5 = v69;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (!IsWidthAlign) {
            return 1;
          }
        }
      }
      else if (v10 == 105)
      {
        return 1;
      }
      goto LABEL_62;
    }
    unint64_t v66 = v7;
    uint64_t v68 = v5;
    int v15 = v3;
    unint64_t v16 = v2;
    uint64_t v17 = *(void *)(v8 + 96);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v17 + 32))(v17, 0, 0);
    uint64_t DimensionValue = ZinIrTensor::GetDimensionValue(v18, 2);
    uint64_t v20 = *(void *)(v17 + 64);
    uint64_t v21 = *(void *)(v20 + 24);
    uint64_t v22 = *(void *)(v20 + 64);
    int v23 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v17 + 32))(v17, 0, 0) + 88);
    Hal = ZinIrTarget::GetHal(*(uint64_t **)(v17 + 16), *(ZinIrTarget **)(*(void *)(v17 + 16) + 160));
    unint64_t v25 = *(void *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal) + 528);
    __p[0] = 0;
    if (ZinTensorFormatGetSizeInBytes(v23, (uint64_t *)__p)) {
      return 1;
    }
    int64_t v26 = v25 / (unint64_t)__p[0];
    if ((uint64_t)(v25 / (unint64_t)__p[0]) <= 1) {
      int64_t v26 = 1;
    }
    if (v21 % v26) {
      return 1;
    }
    if (DimensionValue % v26 || v22 != 1) {
      return 1;
    }
    int v2 = v16;
    uint64_t v3 = v15;
    uint64_t v7 = v66;
    uint64_t v5 = v68;
LABEL_62:
    int v53 = *(ZinIrTensor::MirInfo **)(v8 + 104);
    if (v53
      && (ZinIrTensor::MirInfo::HasCustomStrides(v53) || !ZinIrTensor::HasFlexDimensionOrderHint((ZinIrTensor *)v8)))
    {
      return 1;
    }
    uint64_t v54 = *(void *)(v8 + 96);
    std::string v55 = *(ZinIrOpLayer ***)(v54 + 112);
    unint64_t v56 = *(ZinIrOpLayer ***)(v54 + 120);
    while (v55 != v56)
    {
      long long v57 = *v55;
      if (ZinIrOpLayer::IsANELayer(*v55)
        && ((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)v57 + 496))(v57) & 1) != 0)
      {
        return 1;
      }
      ++v55;
    }
    unint64_t Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v8);
    if (v59)
    {
      if (Interleave > 1) {
        return 1;
      }
    }
    else
    {
      long long v60 = *((_OWORD *)v7 + 1);
      *(_OWORD *)std::string __p = *(_OWORD *)v7;
      long long v71 = v60;
      uint64_t v61 = *((void *)v7 + 4);
      int64x2_t v62 = __p[1];
      __p[1] = *((void **)&v60 + 1);
      *((void *)&v71 + 1) = v62;
      uint64_t v72 = v61;
      if (!IsValidTensorDims((unint64_t *)__p, *(void **)v3[88])) {
        return 1;
      }
    }
    if (++v6 == v5) {
      return 0;
    }
  }
}

void sub_2111D9E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::CalculatePerfCosts(uint64_t a1, uint64_t a2)
{
  v5[91] = *MEMORY[0x263EF8340];
  v5[0] = a2;
  std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t)__dst, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(&v2, "cw_opt_perf_cost");
  ZinIrOpLayerGraph::CloneSubGraph((uint64_t)v3);
}

void sub_2111DAAD4(_Unwind_Exception *a1)
{
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&STACK[0x6C0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0x610]);
  uint64_t v3 = *(void **)(v1 + 632);
  if (v3)
  {
    *(void *)(v1 + 640) = v3;
    operator delete(v3);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0x650]);
  ZinIrClonedGraphInfo::~ZinIrClonedGraphInfo((ZinIrClonedGraphInfo *)&STACK[0x690]);
  _Unwind_Resume(a1);
}

void MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayer(ZinTensorFamilyUtil **a1, ZinIrOpLayer *this, uint64_t a3)
{
  if (ZinIrOpLayer::IsNELayer(this))
  {
    MirOpt::CWTransposeUtil::ApplyCWTransposeToNELayer(a1, this, a3);
  }
  if (ZinIrOpLayer::IsPELayer(this))
  {
    MirOpt::CWTransposeUtil::ApplyCWTransposeToPELayer(a1, this, a3);
  }
  ZinAssertImpl("Only NE and PE engine layers are supported\n");
}

void MirOpt::CWTransposeUtil::CreateLayerConstraint(uint64_t a1@<X0>, ZinIrOpLayer *a2@<X1>, long long *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, std::string *a7@<X8>)
{
  int64x2_t v93 = a2;
  uint64_t v15 = *((void *)a2 + 11);
  uint64_t v14 = *((void *)a2 + 12);
  (*(void (**)(const ZinIrTensor ***__return_ptr, ZinIrOpLayer *))(*(void *)a2 + 512))(&v91, a2);
  int64_t v16 = (char *)v92 - (char *)v91;
  BOOL v64 = (char *)v92 - (char *)v91 == 16;
  uint64_t RootTensor = ZinTensorFamilyUtil::GetRootTensor(*(ZinTensorFamilyUtil **)(a1 + 688), *v91);
  unint64_t v18 = v14 - v15;
  uint64_t v19 = *(void *)(RootTensor + 8);
  unint64_t v65 = v18;
  if (v16 == 16)
  {
    uint64_t v20 = *(ZinTensorFamilyUtil **)(a1 + 688);
    uint64_t v21 = v91[1];
LABEL_5:
    uint64_t v22 = *(void *)(ZinTensorFamilyUtil::GetRootTensor(v20, v21) + 8);
    goto LABEL_7;
  }
  if (v18 >= 9)
  {
    uint64_t v20 = *(ZinTensorFamilyUtil **)(a1 + 688);
    uint64_t v21 = (const ZinIrTensor *)(*(uint64_t (**)(void, void, void))(**(void **)(*((void *)a2 + 11)
                                                                                               + 8)
                                                                                 + 32))(*(void *)(*((void *)a2 + 11) + 8), 0, 0);
    goto LABEL_5;
  }
  uint64_t v22 = -1;
LABEL_7:
  uint64_t v62 = v22;
  int v23 = *(ZinTensorFamilyUtil **)(a1 + 688);
  char v24 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v93 + 32))(v93, 0, 0);
  uint64_t v63 = *(void *)(ZinTensorFamilyUtil::GetRootTensor(v23, v24) + 8);
  unint64_t v25 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((void *)(a1 + 576), &v93);
  long long v60 = a3;
  uint64_t v61 = v19;
  char v59 = a7;
  if (!v25) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v26 = v25[24];
  int v27 = v25[25];
  int v28 = v25[26];
  int v29 = v93;
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)&__p);
  int v30 = (*(uint64_t (**)(ZinIrOpLayer *, void **))(*(void *)v29 + 424))(v29, &__p);
  if (__p)
  {
    unint64_t v75 = __p;
    operator delete(__p);
  }
  if (ZinIrOpLayer::IsNELayer(v93))
  {
    if (a5 | a4) {
      BOOL v31 = v65 == 8;
    }
    else {
      BOOL v31 = 1;
    }
    int v32 = v31;
    if ((a4 == 1) != (a6 == 1)) {
      int v33 = v28;
    }
    else {
      int v33 = 1;
    }
    int v34 = v32 & v33;
    if (a4 == 1)
    {
      int v35 = MirOpt::CWTransposeUtil::UseTransposedDomain(a1, v93, 1, a5, a6);
      if (!v34) {
        int v30 = 0;
      }
      if (v65 == 8) {
        int v36 = v35;
      }
      else {
        int v36 = 0;
      }
    }
    else
    {
      int v36 = 0;
      int v30 = v34 != 0;
    }
  }
  else
  {
    BOOL v38 = a4 != 1 || v26 != 0;
    if (v27) {
      BOOL v39 = v38;
    }
    else {
      BOOL v39 = 0;
    }
    if (a5 == 1) {
      BOOL v38 = v39;
    }
    if (v28) {
      BOOL v40 = v38;
    }
    else {
      BOOL v40 = 0;
    }
    if (a6 == 1) {
      int v30 = v40;
    }
    else {
      int v30 = v38;
    }
    int v36 = MirOpt::CWTransposeUtil::UseTransposedDomain(a1, v93, a4, a5, a6);
  }
  BOOL IsNELayer = ZinIrOpLayer::IsNELayer(v93);
  unint64_t v42 = v93;
  uint64_t v43 = *(void *)v93;
  if (IsNELayer)
  {
    std::string::value_type v44 = (a4 == 1) ^ (a6 == 1) ^ (*(uint64_t (**)(ZinIrOpLayer *))(v43 + 408))(v93);
    goto LABEL_53;
  }
  unsigned __int8 v45 = (*(uint64_t (**)(ZinIrOpLayer *))(v43 + 640))(v93);
  char v46 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)v42 + 648))(v42);
  char v47 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)v42 + 408))(v42);
  char v48 = (a5 == 1) ^ v46;
  char v49 = (a6 == 1) ^ v47;
  if (!v36)
  {
    if ((((a4 == 1) ^ v45) & 1) == 0) {
      goto LABEL_52;
    }
LABEL_51:
    std::string::value_type v44 = 1;
    goto LABEL_53;
  }
  if ((((a4 == 1) ^ v45) & 1) == 0) {
    goto LABEL_51;
  }
  v48 ^= 1u;
  v49 ^= 1u;
LABEL_52:
  std::string::value_type v44 = v48 | v49;
LABEL_53:
  v76[56] = 0;
  LOBYTE(v77) = 0;
  BYTE8(v77) = 0;
  BYTE12(v78) = 0;
  memset(&v76[8], 0, 42);
  long long v79 = 0uLL;
  int v80 = 0;
  *(_DWORD *)uint64_t v81 = 0;
  v81[56] = 0;
  LOBYTE(v82) = 0;
  BYTE8(v82) = 0;
  BYTE12(v83) = 0;
  memset(&v81[8], 0, 42);
  long long v84 = 0uLL;
  int v85 = 0;
  *(_DWORD *)unint64_t v86 = 0;
  v86[56] = 0;
  LOBYTE(v87) = 0;
  BYTE8(v87) = 0;
  BYTE12(v88) = 0;
  memset(&v86[8], 0, 42);
  int v90 = 0;
  long long v89 = 0uLL;
  *(_DWORD *)unint64_t v76 = 0;
  LODWORD(__p) = a4;
  (*(void (**)(void **__return_ptr))(**((void **)*v91 + 12) + 80))(v66);
  long long v77 = v70;
  long long v78 = v71;
  long long v79 = v72;
  int v80 = v73;
  *(_OWORD *)unint64_t v76 = *(_OWORD *)v66;
  *(_OWORD *)&v76[16] = v67;
  *(_OWORD *)&v76[32] = v68;
  *(_OWORD *)&v76[48] = v69;
  if (a4 == 1)
  {
    uint64_t v50 = *(void *)&v76[16];
    *(void *)&v76[16] = *(void *)&v76[32];
    *(void *)&v76[32] = v50;
  }
  if (v16 == 16)
  {
    HIDWORD(__p) = a5;
    (*(void (**)(void **__return_ptr))(**((void **)v91[1] + 12) + 80))(v66);
    long long v82 = v70;
    long long v83 = v71;
    long long v84 = v72;
    int v85 = v73;
    *(_OWORD *)uint64_t v81 = *(_OWORD *)v66;
    *(_OWORD *)&v81[16] = v67;
    *(_OWORD *)&v81[32] = v68;
    *(_OWORD *)&v81[48] = v69;
    if (a5 == 1)
    {
      uint64_t v51 = *(void *)&v81[16];
      *(void *)&v81[16] = *(void *)&v81[32];
      *(void *)&v81[32] = v51;
    }
  }
  LODWORD(v75) = a6;
  (*(void (**)(void **__return_ptr))(*(void *)v93 + 80))(v66);
  long long v87 = v70;
  long long v88 = v71;
  long long v89 = v72;
  int v90 = v73;
  *(_OWORD *)unint64_t v86 = *(_OWORD *)v66;
  *(_OWORD *)&v86[16] = v67;
  *(_OWORD *)&v86[32] = v68;
  *(_OWORD *)&v86[48] = v69;
  if (a6 == 1)
  {
    uint64_t v52 = *(void *)&v86[16];
    *(void *)&v86[16] = *(void *)&v86[32];
    *(void *)&v86[32] = v52;
  }
  BYTE4(v75) = v64;
  BYTE5(v75) = v36;
  if ((v30 | v36) == 1)
  {
    std::string::size_type v53 = MirOpt::CWTransposeUtil::CalculatePerfAndMemCosts((ZinTensorFamilyUtil **)a1, v93, (uint64_t)&__p);
    std::string::size_type v55 = v54;
  }
  else
  {
    std::string::size_type v53 = -1;
    std::string::size_type v55 = -1;
  }
  if (v65 == 8)
  {
    unint64_t v56 = "src1/dst id cannot be -1";
    if (v61 != -1 && v63 != -1)
    {
      long long v57 = operator new(0x20uLL);
      v66[1] = v57 + 8;
      *(void *)&long long v67 = v57 + 8;
      *(void *)long long v57 = v61;
      v57[2] = a4;
      *((void *)v57 + 2) = v63;
      v57[6] = a6;
      v66[0] = v57;
      CpTransposeUtils::LayerConstraint::LayerConstraint(v59, (long long **)v66, v30, v36, v44, v53, v55, v60);
      goto LABEL_71;
    }
LABEL_77:
    ZinAssertImpl(v56, v59, v60);
  }
  unint64_t v56 = "src1/src2/dst id cannot be -1";
  if (v61 == -1 || v62 == -1 || v63 == -1) {
    goto LABEL_77;
  }
  uint64_t v58 = operator new(0x30uLL);
  v66[1] = v58 + 12;
  *(void *)&long long v67 = v58 + 12;
  *(void *)uint64_t v58 = v61;
  v58[2] = a4;
  *((void *)v58 + 2) = v62;
  v58[6] = a5;
  *((void *)v58 + 4) = v63;
  v58[10] = a6;
  v66[0] = v58;
  CpTransposeUtils::LayerConstraint::LayerConstraint(v59, (long long **)v66, v30, v36, v44, v53, v55, v60);
LABEL_71:
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  if (v91)
  {
    unint64_t v92 = v91;
    operator delete(v91);
  }
}

void sub_2111DB4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  int v34 = *(void **)(v32 - 120);
  if (v34)
  {
    *(void *)(v32 - 112) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::CWTransposeUtil::UseTransposedDomain(uint64_t a1, ZinIrOpLayer *a2, int a3, int a4, int a5)
{
  uint64_t v15 = a2;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((void *)(a1 + 576), &v15);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  BOOL v11 = a3 == 1 && v9[24] == 0;
  if (a4 == 1 && !v9[25]) {
    BOOL v11 = 1;
  }
  if (v9[26]) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = a5 == 1;
  }
  if (!v12 && !v11) {
    return MirOpt::CWTransposeUtil::IsBetterWithTransposedDomain(a1, v15, a3, a4, a5);
  }
  else {
    return MirOpt::CWTransposeUtil::IsCompatibleWithTransposedDomain(a1, v15, a3, a4, a5);
  }
}

void MirOpt::CWTransposeUtil::CreateLayerConstraint(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, std::string *a7@<X8>)
{
  uint64_t v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v32, *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
  if ((unint64_t)(((v33 - (unsigned char *)v32) >> 3) - 1) >= 2)
  {
    int v28 = (const char *)(a2 + 24);
    if (*(char *)(a2 + 47) < 0) {
      int v28 = *(const char **)v28;
    }
    ZinAssertImpl("[MirOpt::CWTranspose] Unsupported SNE layer with number of inputs not 2: %s", v28);
  }
  uint64_t v14 = *(ZinTensorFamilyUtil **)(a1 + 688);
  uint64_t v15 = (const ZinIrTensor *)(*(uint64_t (**)(void, void, void))(***(void ***)(a2 + 88) + 32))(**(void **)(a2 + 88), 0, 0);
  uint64_t v16 = *(void *)(ZinTensorFamilyUtil::GetRootTensor(v14, v15) + 8);
  uint64_t v17 = *(ZinTensorFamilyUtil **)(a1 + 688);
  unint64_t v18 = (const ZinIrTensor *)(*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a2 + 88) + 8)
                                                                               + 32))(*(void *)(*(void *)(a2 + 88) + 8), 0, 0);
  uint64_t v19 = *(void *)(ZinTensorFamilyUtil::GetRootTensor(v17, v18) + 8);
  uint64_t v20 = *(ZinTensorFamilyUtil **)(a1 + 688);
  uint64_t v21 = (const ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  uint64_t v22 = *(void *)(ZinTensorFamilyUtil::GetRootTensor(v20, v21) + 8);
  int v23 = a5 | a4 | a6;
  if (v23) {
    std::string::size_type v24 = -1;
  }
  else {
    std::string::size_type v24 = 1;
  }
  if (v16 == -1 || v19 == -1 || v22 == -1) {
    ZinAssertImpl("src1/src2/dst id cannot be -1");
  }
  int v27 = operator new(0x30uLL);
  int v30 = v27 + 12;
  BOOL v31 = (char *)(v27 + 12);
  *(void *)int v27 = v16;
  v27[2] = a4;
  *((void *)v27 + 2) = v19;
  v27[6] = a5;
  *((void *)v27 + 4) = v22;
  v27[10] = a6;
  std::string __p = v27;
  CpTransposeUtils::LayerConstraint::LayerConstraint(a7, (long long **)&__p, v23 == 0, 0, 0, v24, v24, a3);
  if (__p)
  {
    int v30 = __p;
    operator delete(__p);
  }
  if (v32)
  {
    int v33 = v32;
    operator delete(v32);
  }
}

void sub_2111DB824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::CreateORToolsGraph(MirOpt::CWTransposeUtil *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2111DBAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::unique_ptr<CpTransposeGraph>::reset[abi:ne180100](v21, 0);
  _Unwind_Resume(a1);
}

void MirOpt::CWTransposeUtil::CollectBoundaryNodes(int a1, CpGraph **this, uint64_t a3)
{
  CpGraph::GetTensors(this, &v8);
  uint64_t v5 = v8;
  uint64_t v6 = v9;
  if (v8 != v9)
  {
    do
    {
      unint64_t v7 = *v5;
      if (*(unsigned char *)CpTransposeGraph::GetRootTensorConstraint((CpTransposeGraph *)this, v7)) {
        std::__hash_table<ZinNamedType<unsigned long,AneIndexTag>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::allocator<ZinNamedType<unsigned long,AneIndexTag>>>::__emplace_unique_key_args<ZinNamedType<unsigned long,AneIndexTag>,ZinNamedType<unsigned long,AneIndexTag> const&>(a3, &v7, &v7);
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v5 = v8;
  }
  if (v5)
  {
    uint64_t v9 = v5;
    operator delete(v5);
  }
}

void sub_2111DBC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::CreateCpTransposeGraphDotFile(uint64_t a1, uint64_t a2, void *a3)
{
  v64[19] = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    uint64_t v4 = a1;
    uint64_t v5 = *(const void ***)(a1 + 568);
    if (*((char *)v5 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)v5 + 23);
    }
    else {
      size_t v6 = (size_t)v5[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v59, v6 + 9);
    if (v59[23] >= 0) {
      unint64_t v7 = v59;
    }
    else {
      unint64_t v7 = *(unsigned char **)v59;
    }
    if (v6)
    {
      if (*((char *)v5 + 23) >= 0) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = *v5;
      }
      memmove(v7, v8, v6);
    }
    strcpy(&v7[v6], ".CpGraph.");
    if (*(char *)(a2 + 255) < 0) {
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a2 + 232), *(void *)(a2 + 240));
    }
    else {
      std::string v56 = *(std::string *)(a2 + 232);
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v56;
    }
    else {
      uint64_t v9 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    BOOL v11 = std::string::append((std::string *)v59, (const std::string::value_type *)v9, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = std::string::append(&v63, ".dot", 4uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v58 = v13->__r_.__value_.__r.__words[2];
    long long __p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if ((v59[23] & 0x80000000) != 0) {
      operator delete(*(void **)v59);
    }
    uint64_t v15 = MEMORY[0x263F8C310] + 64;
    v64[0] = MEMORY[0x263F8C310] + 64;
    std::string::size_type v16 = *(void *)(MEMORY[0x263F8C2B0] + 16);
    v63.__r_.__value_.__r.__words[0] = *(void *)(MEMORY[0x263F8C2B0] + 8);
    std::string::size_type v50 = v63.__r_.__value_.__r.__words[0];
    std::string::size_type v49 = v16;
    *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words
                              + *(void *)(v63.__r_.__value_.__r.__words[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = v16;
    uint64_t v17 = (std::ios_base *)((char *)&v63 + *(void *)(v63.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v17, &v63.__r_.__value_.__r.__words[1]);
    uint64_t v18 = MEMORY[0x263F8C310] + 24;
    v17[1].__vftable = 0;
    v17[1].__fmtflags_ = -1;
    v63.__r_.__value_.__r.__words[0] = v18;
    v64[0] = v15;
    MEMORY[0x21667CDD0](&v63.__r_.__value_.__r.__words[1]);
    std::ofstream::open();
    memset(v59, 0, sizeof(v59));
    v60[0] = 1065353216;
    CpTransposeGraph::CreateDotString((CpTransposeGraph *)a2, v59, &v56);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v56;
    }
    else {
      uint64_t v19 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v56.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v19, v20);
    uint64_t v21 = (CpTransposeGraph *)a2;
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v59);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&v63 + *(void *)(v63.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v63 + *(void *)(v63.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
    }
    if (a3[1] != *a3)
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      uint64_t v47 = *(void *)(MEMORY[0x263F8C2B0] + 24);
      uint64_t v48 = *MEMORY[0x263F8C2B0];
      do
      {
        std::string::size_type v24 = a3;
        uint64_t v25 = v4;
        int v26 = *(const void ***)(v4 + 568);
        if (*((char *)v26 + 23) >= 0) {
          size_t v27 = *((unsigned __int8 *)v26 + 23);
        }
        else {
          size_t v27 = (size_t)v26[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v54, v27 + 9);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v28 = &v54;
        }
        else {
          int v28 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if (v27)
        {
          if (*((char *)v26 + 23) >= 0) {
            int v29 = v26;
          }
          else {
            int v29 = *v26;
          }
          memmove(v28, v29, v27);
        }
        uint64_t v21 = (CpTransposeGraph *)a2;
        strcpy((char *)v28 + v27, ".CpGraph.");
        if (*(char *)(a2 + 255) < 0) {
          std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a2 + 232), *(void *)(a2 + 240));
        }
        else {
          std::string v53 = *(std::string *)(a2 + 232);
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v30 = &v53;
        }
        else {
          int v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v31 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v31 = v53.__r_.__value_.__l.__size_;
        }
        uint64_t v32 = std::string::append(&v54, (const std::string::value_type *)v30, v31);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v55.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        uint64_t v34 = std::string::append(&v55, ".G", 2uLL);
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v52, v23);
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v36 = &v52;
        }
        else {
          int v36 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v37 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v37 = v52.__r_.__value_.__l.__size_;
        }
        BOOL v38 = std::string::append(&v62, (const std::string::value_type *)v36, v37);
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        *(void *)&v59[16] = *((void *)&v38->__r_.__value_.__l + 2);
        *(_OWORD *)char v59 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        BOOL v40 = std::string::append((std::string *)v59, ".dot", 4uLL);
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        if ((v59[23] & 0x80000000) != 0) {
          operator delete(*(void **)v59);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        uint64_t v42 = MEMORY[0x263F8C310] + 64;
        v61[0] = MEMORY[0x263F8C310] + 64;
        *(void *)char v59 = v50;
        *(void *)&v59[*(void *)(v50 - 24)] = v49;
        uint64_t v43 = (std::ios_base *)&v59[*(void *)(*(void *)v59 - 24)];
        std::ios_base::init(v43, &v59[8]);
        uint64_t v44 = MEMORY[0x263F8C310] + 24;
        v43[1].__vftable = 0;
        v43[1].__fmtflags_ = -1;
        *(void *)char v59 = v44;
        v61[0] = v42;
        MEMORY[0x21667CDD0](&v59[8]);
        std::ofstream::open();
        uint64_t v4 = v25;
        a3 = v24;
        CpTransposeGraph::CreateDotString((CpTransposeGraph *)a2, (void *)(*v24 + v22), &v62);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v45 = &v62;
        }
        else {
          unsigned __int8 v45 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v62.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v45, v46);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (!std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)&v59[*(void *)(*(void *)v59 - 24)], *(_DWORD *)((char *)v60 + *(void *)(*(void *)v59 - 24)) | 4);
        }
        *(void *)char v59 = v48;
        *(void *)&v59[*(void *)(v48 - 24)] = v47;
        MEMORY[0x21667CDE0](&v59[8]);
        std::ostream::~ostream();
        MEMORY[0x21667D2B0](v61);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        ++v23;
        v22 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24[1] - *v24) >> 3) > v23);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v56, "cp_transpose_graph");
      CpTransposeGraph::DebugPrint(v21, (uint64_t)&v56, v59);
      MirOpt::CWTransposeUtil::CreateCpTransposeGraphDotFile(v59, (uint8_t *)&v62, (uint64_t)&v56);
    }
    v63.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B0];
    *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words
                              + *(void *)(v63.__r_.__value_.__r.__words[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B0]
                                                                                                + 24);
    MEMORY[0x21667CDE0](&v63.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x21667D2B0](v64);
    if (SHIBYTE(v58) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_2111DC52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::IsRegionWithTrivialSolution(uint64_t a1, CpTransposeGraph *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 16);
  if (!v3) {
    return 1;
  }
  uint64_t v5 = (void *)((char *)a2 + 192);
  while (1)
  {
    unint64_t v6 = v3[2];
    unint64_t v8 = v6;
    if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v5, &v8))
    {
      if (!*(unsigned char *)CpTransposeGraph::GetRootTensorConstraint(a2, v6)) {
        break;
      }
    }
    uint64_t v3 = (void *)*v3;
    if (!v3) {
      return 1;
    }
  }
  return 0;
}

uint64_t MirOpt::CWTransposeUtil::UpdateResultWithTrivialSolution(uint64_t **a1, CpTransposeGraph *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 16);
  if (!v3) {
    return 1;
  }
  uint64_t v5 = (void *)((char *)a2 + 192);
  unint64_t v6 = a1 + 77;
  unint64_t v7 = (void *)((char *)a2 + 152);
  unint64_t v8 = a1 + 83;
  uint64_t v9 = a1 + 80;
  while (1)
  {
    unint64_t v23 = v3[2];
    std::string::size_type v24 = (uint64_t *)v23;
    if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v5, (unint64_t *)&v24))break; {
    if (!*(unsigned char *)CpTransposeGraph::GetRootTensorConstraint(a2, v23))
    }
    {
      BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!v15) {
        return 0;
      }
      goto LABEL_17;
    }
    std::string::size_type v24 = (uint64_t *)&v23;
    *((_DWORD *)std::__tree<std::__value_type<ZinIrOpLayer *,int>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,int>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,int>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v6, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 10) = 0;
LABEL_12:
    uint64_t v3 = (void *)*v3;
    if (!v3) {
      return 1;
    }
  }
  std::string::size_type v24 = (uint64_t *)v23;
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(v7, (unint64_t *)&v24))goto LABEL_12; {
  LayerTruthTable = (uint64_t **)CpTransposeGraph::GetLayerTruthTable(a2, v23);
  }
  BOOL v11 = *LayerTruthTable;
  for (uint64_t i = **LayerTruthTable; ; i += 16)
  {
    if (i == (*LayerTruthTable)[1])
    {
      std::string::size_type v24 = (uint64_t *)&v23;
      std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v8, &v23, (uint64_t)&std::piecewise_construct, &v24)[5] = 0;
      int v13 = *((unsigned __int8 *)v11 + 25);
      std::string::size_type v24 = (uint64_t *)&v23;
      *((_DWORD *)std::__tree<std::__value_type<ZinIrOpLayer *,int>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,int>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,int>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v9, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 10) = v13;
      goto LABEL_12;
    }
    if (*(_DWORD *)(i + 8)) {
      break;
    }
  }
  BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v15) {
LABEL_17:
  }
    MirOpt::CWTransposeUtil::UpdateResultWithTrivialSolution(v15, v16, v17, v18, v19, v20, v21, v22);
  return 0;
}

BOOL MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose(MirOpt::CWTransposeUtil *this, const ZinIrTensor *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v9 = v2;
  uint64_t v3 = (void *)*((void *)this + 78);
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v4 = (void *)((char *)this + 624);
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= v2;
    if (v5 >= v2) {
      unint64_t v7 = v3;
    }
    else {
      unint64_t v7 = v3 + 1;
    }
    if (v6) {
      uint64_t v4 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (void *)((char *)this + 624) || v2 < v4[4]) {
LABEL_13:
  }
    ZinAssertImpl("Failed to interpret transpose optimization results");
  return *(_DWORD *)std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)this + 616, &v9) == 1;
}

BOOL MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose(ZinTensorFamilyUtil **this, const ZinIrOpLayer *a2)
{
  if (ZinIrOpLayer::IsANELayer(a2))
  {
    BOOL IsSelectedFromGlobalOptimizationForCWTransposedDomain = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTransposedDomain((MirOpt::CWTransposeUtil *)this, a2);
    (*(void (**)(void **__return_ptr, const ZinIrOpLayer *))(*(void *)a2 + 512))(&__p, a2);
    uint64_t RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(this[86], *(const ZinIrTensor **)__p);
    BOOL IsSelectedFromGlobalOptimizationForCWTranspose = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, RootTensor);
    if (v18 - (unsigned char *)__p == 16)
    {
      unint64_t v7 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(this[86], *((const ZinIrTensor **)__p + 1));
      BOOL v8 = MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v7);
    }
    else
    {
      BOOL v8 = 0;
    }
    int v13 = this[86];
    long long v14 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    BOOL v15 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v13, v14);
    uint64_t v16 = (IsSelectedFromGlobalOptimizationForCWTransposedDomain || IsSelectedFromGlobalOptimizationForCWTranspose || v8) | MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v15);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
    return v16;
  }
  else
  {
    unint64_t v9 = this[86];
    int v10 = (const ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    BOOL v11 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v9, v10);
    return MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v11);
  }
}

void sub_2111DCB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTransposedDomain(MirOpt::CWTransposeUtil *this, const ZinANELayer *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v12 = v2;
  uint64_t v3 = (void *)*((void *)this + 81);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = (char *)this + 640;
  BOOL v6 = (char *)this + 648;
  unint64_t v7 = v6;
  do
  {
    unint64_t v8 = v3[4];
    BOOL v9 = v8 >= v2;
    if (v8 >= v2) {
      int v10 = v3;
    }
    else {
      int v10 = v3 + 1;
    }
    if (v9) {
      unint64_t v7 = (char *)v3;
    }
    uint64_t v3 = (void *)*v10;
  }
  while (*v10);
  return v7 != v6
      && v2 >= *((void *)v7 + 4)
      && *(_DWORD *)std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v5, &v12) == 1;
}

void MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayerTensors(MirOpt::CWTransposeUtil *this, ZinIrTensor *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v3 = (ZinIrOpLayer *)*((void *)a2 + 12);
  long long v4 = *((_OWORD *)a2 + 4);
  long long v27 = *((_OWORD *)a2 + 3);
  long long v28 = v4;
  uint64_t v5 = *((void *)a2 + 10);
  uint64_t v6 = *((void *)&v27 + 1);
  *((void *)&v27 + 1) = *((void *)&v4 + 1);
  *((void *)&v28 + 1) = v6;
  uint64_t v29 = v5;
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_211F4AA5D);
  if (ZinIrOpLayer::IsNELayer(v3)) {
    std::string::basic_string[abi:ne180100]<0>(&v17, "cw_ne");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&v17, "cw_pe");
  }
  unint64_t v7 = std::string::append(&v17, "_xfm", 4uLL);
  unint64_t v8 = (void *)v7->__r_.__value_.__r.__words[0];
  *(void *)&long long v30 = v7->__r_.__value_.__l.__size_;
  *(void *)((char *)&v30 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  long long __p = v8;
  *(void *)uint64_t v25 = v30;
  *(void *)&v25[7] = *(void *)((char *)&v30 + 7);
  unsigned __int8 v26 = v9;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (*((char *)a2 + 47) >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 47);
  }
  else {
    size_t v10 = *((void *)a2 + 4);
  }
  BOOL v11 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v10 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)a2 + 47) >= 0) {
      unint64_t v12 = (char *)a2 + 24;
    }
    else {
      unint64_t v12 = (char *)*((void *)a2 + 3);
    }
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 95;
  if ((v26 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v14 = v26;
  }
  else {
    std::string::size_type v14 = *(void *)v25;
  }
  BOOL v15 = std::string::append(&v23, p_p, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v31 = v15->__r_.__value_.__r.__words[2];
  long long v30 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  ZinIrTensor::CopyTensorMirInfo((uint64_t)a2, &v22);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  LODWORD(v17.__r_.__value_.__l.__data_) = 0;
  uint64_t v18 = 0;
  *(_OWORD *)&v17.__r_.__value_.__r.__words[1] = 0uLL;
  int v19 = 0;
  ZinIrTensor::CreateTensor();
}

void sub_2111DCE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::ApplyCWTransposeToNELayer(ZinTensorFamilyUtil **this, ZinANELayer *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 376))
  {
    MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTransposedDomain((MirOpt::CWTransposeUtil *)this, a2);
    (*(void (**)(void **__return_ptr, ZinANELayer *))(*(void *)a2 + 512))(__p, a2);
    uint64_t RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(this[86], *(const ZinIrTensor **)__p[0]);
    MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, RootTensor);
    uint64_t v6 = this[86];
    unint64_t v7 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    unint64_t v8 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v6, v7);
    MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  unsigned __int8 v9 = (MirOpt::CWTransposeUtil *)(*(uint64_t (**)(ZinANELayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayerTensors(v9, v9);
}

void sub_2111DD7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (__p) {
    operator delete(__p);
  }
  std::string v53 = *(void **)(v51 - 128);
  if (v53)
  {
    *(void *)(v51 - 120) = v53;
    operator delete(v53);
  }
  std::string v54 = *(std::__shared_weak_count **)(v51 - 96);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  _Unwind_Resume(exception_object);
}

void sub_2111DD9BC()
{
}

void sub_2111DD9C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x2111DD9B4);
}

void MirOpt::CWTransposeUtil::ApplyCWTransposeToPELayer(ZinTensorFamilyUtil **this, ZinANELayer *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a3 + 376))
  {
    MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTransposedDomain((MirOpt::CWTransposeUtil *)this, a2);
    (*(void (**)(void **__return_ptr, ZinANELayer *))(*(void *)a2 + 512))(__p, a2);
    uint64_t RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(this[86], *(const ZinIrTensor **)__p[0]);
    MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, RootTensor);
    if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)16)
    {
      uint64_t v6 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(this[86], *((const ZinIrTensor **)__p[0] + 1));
      MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v6);
    }
    unint64_t v7 = this[86];
    unint64_t v8 = (const ZinIrTensor *)(*(uint64_t (**)(ZinANELayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    unsigned __int8 v9 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v7, v8);
    MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)this, v9);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)&v11);
  size_t v10 = (MirOpt::CWTransposeUtil *)(*(uint64_t (**)(ZinANELayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayerTensors(v10, v10);
}

void sub_2111DEE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v74 = (void *)a15;
  a15 = 0;
  if (v74) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a15, v74);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a35);
  a41 = &unk_26C34DA98;
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a72) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a72);
  }
  unint64_t v75 = a73;
  if (a73)
  {
    STACK[0x200] = (unint64_t)a73;
    operator delete(v75);
  }
  _Unwind_Resume(a1);
}

void sub_2111DF178()
{
}

void sub_2111DF180()
{
}

void sub_2111DF188()
{
  if (STACK[0x210])
  {
    STACK[0x218] = STACK[0x210];
    JUMPOUT(0x2111DF16CLL);
  }
  JUMPOUT(0x2111DF170);
}

uint64_t MirOpt::CWTransposeUtil::ReplaceCWTransposedLayer(uint64_t this, ZinIrOpLayer *a2, ZinIrOpLayer *a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = this;
    uint64_t v6 = (uint64_t **)*((void *)a2 + 19);
    unint64_t v7 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    unint64_t v8 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a3 + 32))(a3, 0, 0);
    unsigned __int8 v9 = *(ZinTensorFamilyUtil **)(v5 + 688);
    size_t v10 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
    unint64_t v11 = *(void *)(ZinTensorFamilyUtil::GetRootTensor(v9, v10) + 8);
    uint64_t v19 = 0;
    unint64_t v20 = v11;
    long long v16 = (unint64_t *)&unk_26C359A08;
    long long __p = 0;
    uint64_t v18 = 0;
    char v12 = ZinIrOpLayerGraph::ReplaceNode(v6, a2, a3, (const Layer2TDMapper::SourceLayer *)&v16);
    long long v16 = (unint64_t *)&unk_26C359A08;
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
    if ((v12 & 1) == 0) {
      ZinAssertImpl("[MirOpt::CWTranspose] Failed to replace with transposed layer");
    }
    ZinTensorFamilyUtil::DeleteTensorFromFamilyAttributesAndRootTensorMap(*(ZinTensorFamilyUtil **)(v5 + 688), v7);
    ZinTensorFamilyUtil::UpdateFamilyAttributesAndRootTensorMap(*(uint64_t ***)(v5 + 688), v8, 0);
    this = ZinTensorFamilyUtil::GetRootTensor(*(ZinTensorFamilyUtil **)(v5 + 688), v8);
    unint64_t v15 = *(void *)(this + 8);
    if (v11 != v15)
    {
      uint64_t v13 = (uint64_t **)(v5 + 616);
      int v14 = *(_DWORD *)std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v13, &v20);
      long long v16 = &v15;
      *((_DWORD *)std::__tree<std::__value_type<ZinIrOpLayer *,int>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,int>,std::less<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,int>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(v13, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 10) = v14;
      return std::__tree<std::__value_type<unsigned long long,ZinIrIrObject *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ZinIrIrObject *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ZinIrIrObject *>>>::__erase_unique<unsigned long long>((uint64_t)v13, &v20);
    }
  }
  return this;
}

void sub_2111DF384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::CWTransposeUtil::ApplyCWTransposeToNonEngineLayer(MirOpt::CWTransposeUtil *this, ZinIrOpLayer *a2)
{
  uint64_t v3 = (char *)a2 + 24;
  if (*((char *)a2 + 47) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 47);
  }
  else {
    size_t v4 = *((void *)a2 + 4);
  }
  uint64_t v5 = v41;
  std::string::basic_string[abi:ne180100]((uint64_t)v41, v4 + 1);
  if (v41[23] < 0) {
    uint64_t v5 = *(unsigned char **)v41;
  }
  if (v4)
  {
    if (*((char *)a2 + 47) >= 0) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = (const char *)*((void *)a2 + 3);
    }
    memmove(v5, v6, v4);
  }
  *(_WORD *)&v5[v4] = 95;
  unint64_t v7 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v47, "cw_noop");
  unint64_t v8 = std::string::append(v7, "_xfm", 4uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(void *)&long long v39 = *((void *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)long long __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v39) & 0x80u) == 0) {
    size_t v10 = __p;
  }
  else {
    size_t v10 = (void **)__p[0];
  }
  if ((SBYTE7(v39) & 0x80u) == 0) {
    std::string::size_type v11 = BYTE7(v39);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  char v12 = std::string::append((std::string *)v41, (const std::string::value_type *)v10, v11);
  int64x2_t v13 = *(int64x2_t *)&v12->__r_.__value_.__l.__data_;
  v45.i64[0] = v12->__r_.__value_.__r.__words[2];
  int64x2_t v44 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  __n128 v14 = ZinObjectNameFactory::ZinObjectNameFactory(v48, &v44);
  if (v45.i8[7] < 0) {
    operator delete((void *)v44.i64[0]);
  }
  if (SBYTE7(v39) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if ((v41[23] & 0x80000000) != 0) {
    operator delete(*(void **)v41);
  }
  uint64_t v15 = *((void *)a2 + 8);
  int v16 = *(_DWORD *)(v15 + 8);
  if (v16 <= 35)
  {
    if (v16 == 7)
    {
      int v24 = *(_DWORD *)(v15 + 12);
      if (v24)
      {
        if (v24 == 3) {
          int v24 = 0;
        }
      }
      else
      {
        int v24 = 3;
      }
      int64x2_t v44 = vdupq_n_s64(1uLL);
      int64x2_t v45 = v44;
      uint64_t v46 = 1;
      Hal = ZinIrTarget::GetHal(*((uint64_t **)a2 + 2), *(ZinIrTarget **)(*((void *)a2 + 2) + 160));
      (*(void (**)(uint64_t *))(*Hal + 16))(Hal);
      ZinConcatLayerUtils::ComputeConcatViewAndStep(v24, (void **)a2 + 11, (uint64_t)&v44, __p);
      operator new();
    }
    if (v16 == 29)
    {
      uint64_t v17 = (*(uint64_t (**)(ZinIrOpLayer *, void, void, __n128))(*(void *)a2 + 32))(a2, 0, 0, v14);
      int64x2_t v18 = *(int64x2_t *)(v17 + 64);
      int64x2_t v44 = *(int64x2_t *)(v17 + 48);
      int64x2_t v45 = v18;
      uint64_t v19 = *(void *)(v17 + 80);
      uint64_t v20 = v44.i64[1];
      v44.i64[1] = v18.i64[1];
      v45.i64[1] = v20;
      uint64_t v46 = v19;
      uint64_t v21 = *(void *)(v17 + 120);
      if (v21)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      ZinBuilder::CreateConstLayer();
    }
    goto LABEL_51;
  }
  if (v16 != 36)
  {
    if (v16 == 37)
    {
      uint64_t v22 = (*(uint64_t (**)(void, void, void, __n128))(***((void ***)a2 + 11) + 32))(**((void **)a2 + 11), 0, 0, v14);
      uint64_t v46 = *(void *)(v22 + 80);
      int64x2_t v23 = *(int64x2_t *)(v22 + 64);
      int64x2_t v44 = *(int64x2_t *)(v22 + 48);
      int64x2_t v45 = v23;
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
      ZinReshapeLayer::GetReshapeInfo(a2);
      ZinBuilder::CreateTranspose();
    }
LABEL_51:
    if (*((char *)a2 + 47) < 0) {
      uint64_t v3 = *(const char **)v3;
    }
    ZinAssertImpl("[MirOpt::CWTranspose] Unsupported Non-Engine layer type: %s", v3);
  }
  uint64_t v25 = (*(uint64_t (**)(ZinIrOpLayer *, void, void, __n128))(*(void *)a2 + 32))(a2, 0, 0, v14);
  int64x2_t v26 = *(int64x2_t *)(v25 + 64);
  int64x2_t v44 = *(int64x2_t *)(v25 + 48);
  int64x2_t v45 = v26;
  uint64_t v27 = *(void *)(v25 + 80);
  uint64_t v28 = v44.i64[1];
  v44.i64[1] = v26.i64[1];
  v45.i64[1] = v28;
  uint64_t v46 = v27;
  uint64_t v29 = *((void *)a2 + 8);
  long long v30 = *(_OWORD *)(v29 + 32);
  *(_OWORD *)long long v41 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)&v41[16] = v30;
  uint64_t v42 = *(void *)(v29 + 48);
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)__p);
  std::string::size_type v31 = (int *)__p[0];
  uint64_t v32 = (int *)__p[1];
  if (__p[0] == __p[1]) {
    goto LABEL_40;
  }
  while (1)
  {
    int v33 = v31[1];
    uint64_t ValueAt = GetValueAtDimension<ZinTensorPosition>((uint64_t *)(v29 + 16), *v31);
    if (SetValueAtDimension<ZinTensorPosition>(v41, v33, ValueAt)) {
      break;
    }
    v31 += 2;
    if (v31 == v32)
    {
      std::string::size_type v31 = (int *)__p[0];
LABEL_40:
      if (v31)
      {
        __p[1] = v31;
        operator delete(v31);
      }
      *(_OWORD *)long long __p = *(_OWORD *)v41;
      long long v39 = *(_OWORD *)&v41[16];
      uint64_t v40 = v42;
      ZinObjectNameFactory::CreateName((uint64_t)v48, 1u, &v47);
      long long v35 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
      ZinIrTensor::GetParentTensor(v35, &v43);
      ZinBuilder::CreateView();
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v48[0] = &unk_26C34DA98;
  if (v49 < 0) {
    operator delete((void *)v48[1]);
  }
  return 1;
}

void sub_2111DFE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v48 = a14;
  a14 = 0;
  if (v48) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a14, v48);
  }
  *(void *)(v46 - 120) = &unk_26C34DA98;
  if (*(char *)(v46 - 89) < 0) {
    operator delete(*(void **)(v46 - 112));
  }
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::CheckTransposableAndSetRootTensorConstraint(ZinTensorFamilyUtil **a1, uint64_t *a2, ZinIrOpLayer **a3)
{
  if ((ZinIrOpLayer::IsIntermediate(a3[12]) & 1) != 0 || *(_DWORD *)(*((void *)a3[12] + 8) + 8) == 29)
  {
    AllUsages = ZinTensorFamilyUtil::GetAllUsages(a1[86], (const ZinIrTensor *)a3);
    std::set<LayerAndUsageInfo>::set[abi:ne180100]<std::__wrap_iter<LayerAndUsageInfo const*>>((uint64_t)v14, (_DWORD *)*AllUsages, (_DWORD *)AllUsages[1]);
    if (v16)
    {
      if (MirOpt::CWTransposeUtil::IsTransposeDisqualified(a1, (const ZinIrTensor *)a3))
      {
        std::string::basic_string[abi:ne180100]<0>(v10, ":has_sw_constraint");
        MirOpt::CWTransposeUtil::SetRootTensorConstraint((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)v10, 0);
        if (v11 < 0)
        {
          unint64_t v7 = (void **)v10;
LABEL_13:
          operator delete(*v7);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v8, ":has_no_constraint");
        MirOpt::CWTransposeUtil::SetRootTensorConstraint((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)v8, 1);
        if (v9 < 0)
        {
          unint64_t v7 = (void **)v8;
          goto LABEL_13;
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v12, ":has_no_usage");
      MirOpt::CWTransposeUtil::SetRootTensorConstraint((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)v12, 0);
      if (v13 < 0)
      {
        unint64_t v7 = (void **)v12;
        goto LABEL_13;
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v14, v15);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, ":is_not_intermediate_or_1d_const_in");
  MirOpt::CWTransposeUtil::SetRootTensorConstraint((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)v17, 0);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_2111E0220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,void *a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

void MirOpt::CWTransposeUtil::SetRootTensorConstraint(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  char v9 = *(unint64_t **)(a3 + 8);
  if (*(char *)(a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else {
    std::string v25 = *(std::string *)(a3 + 24);
  }
  std::to_string(&v22, (unint64_t)v9);
  size_t v10 = std::string::insert(&v22, 0, "T", 1uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  char v12 = std::string::append(&v23, ":", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)long long __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __n128 v14 = &v25;
  }
  else {
    __n128 v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = std::string::append((std::string *)__p, (const std::string::value_type *)v14, size);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    int v18 = *(char *)(a4 + 23);
    if (v18 >= 0) {
      uint64_t v19 = (const std::string::value_type *)a4;
    }
    else {
      uint64_t v19 = *(const std::string::value_type **)a4;
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v20 = *(void *)(a4 + 8);
    }
    std::string::append(&v24, v19, v20);
  }
  if (a5)
  {
    __p[0] = 0;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(std::string *)&__p[8] = v24;
      goto LABEL_30;
    }
  }
  else
  {
    __p[0] = 1;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *(std::string *)&__p[8] = v24;
      goto LABEL_30;
    }
  }
  std::string::__init_copy_ctor_external((std::string *)&__p[8], v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
LABEL_30:
  CpTransposeGraph::SetRootTensorConstraint(*a2, v9, __p);
  if ((__p[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__p[8]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_2111E04C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 57) < 0) {
    operator delete(*(void **)(v38 - 80));
  }
  _Unwind_Resume(exception_object);
}

void MirOpt::CWTransposeUtil::CheckTransposableAndSetLayerTruthTable(uint64_t a1, CpTransposeGraph **a2, ZinIrOpLayer *this)
{
  if (ZinIrOpLayer::IsNELayer(this))
  {
    MirOpt::CWTransposeUtil::SetNELayerTruthTable(a1, a2, this);
  }
  else if (ZinIrOpLayer::IsPELayer(this))
  {
    MirOpt::CWTransposeUtil::SetPELayerTruthTable(a1, a2, this);
  }
  else
  {
    if (!(*(unsigned int (**)(ZinIrOpLayer *))(*(void *)this + 112))(this)) {
      ZinAssertImpl("[MirOpt::CWTranspose] Engine layer should be NE or PE or SNE.");
    }
    MirOpt::CWTransposeUtil::SetSNELayerTruthTable(a1, a2, (uint64_t)this);
  }
}

void MirOpt::CWTransposeUtil::SetNELayerTruthTable(uint64_t a1, CpTransposeGraph **a2, ZinIrOpLayer *a3)
{
  v154[1] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v113, &byte_211F4AA5D);
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    unsigned int v6 = *(_DWORD *)(*((void *)a3 + 8) + 8) - 85;
    if (v6 >= 9)
    {
      unint64_t v7 = ":is_nelayer";
      std::string::size_type v8 = 11;
    }
    else
    {
      unint64_t v7 = off_26418C248[v6];
      std::string::size_type v8 = *(void *)&asc_211EFCE08[8 * v6];
    }
    std::string::append(&v113, v7, v8);
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a3 + 408))(a3)) {
      std::string::append(&v113, ":has_output_transpose", 0x15uLL);
    }
    if (*((void *)a3 + 33)) {
      std::string::append(&v113, ":has_mir_info", 0xDuLL);
    }
    if (*(void *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a3 + 32))(a3, 0, 0)
                   + 104))
      std::string::append(&v113, ":has_tensor_mir_info", 0x14uLL);
    if (*((void *)a3 + 25)) {
      std::string::append(&v113, ":has_texture", 0xCuLL);
    }
    if (*((void *)a3 + 46)) {
      std::string::append(&v113, ":has_input_broadcast", 0x14uLL);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    char v9 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((void *)(a1 + 576), &__p);
    if (!v9) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    int v10 = *((unsigned __int8 *)v9 + 26);
    MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings(&__p.__r_.__value_.__l.__data_);
    int v11 = (*(uint64_t (**)(ZinIrOpLayer *, std::string *))(*(void *)a3 + 424))(a3, &__p);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v11) {
      std::string::append(&v113, ":transposed_domain_available", 0x1CuLL);
    }
    if (v10) {
      char v12 = ":output_transpose_available";
    }
    else {
      char v12 = ":no_transpose_available";
    }
    if (v10) {
      std::string::size_type v13 = 27;
    }
    else {
      std::string::size_type v13 = 23;
    }
    std::string::append(&v113, v12, v13);
  }
  unint64_t v14 = *((void *)a3 + 1);
  uint64_t v15 = (char *)a3 + 24;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v112, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    *(_OWORD *)&v112.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
    v112.__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
  }
  int64x2_t v110 = 0;
  int64x2_t v109 = 0;
  uint64_t v111 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v109, *((const void **)a3 + 11), *((void *)a3 + 12), (uint64_t)(*((void *)a3 + 12) - *((void *)a3 + 11)) >> 3);
  uint64_t v16 = v110;
  long long v17 = v109;
  std::to_string(&v100, v14);
  int v18 = std::string::insert(&v100, 0, "L", 1uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v20 = std::string::append(&v104, ":", 1uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v22 = &v112;
  }
  else {
    std::string v22 = (std::string *)v112.__r_.__value_.__r.__words[0];
  }
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v112.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v112.__r_.__value_.__l.__size_;
  }
  std::string v24 = std::string::append(&__p, (const std::string::value_type *)v22, size);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64x2_t v26 = &v113;
    }
    else {
      int64x2_t v26 = (std::string *)v113.__r_.__value_.__r.__words[0];
    }
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v113.__r_.__value_.__l.__size_;
    }
    std::string::append(&v108, (const std::string::value_type *)v26, v27);
  }
  if ((unint64_t)(v110 - (unsigned char *)v109) >= 0x20)
  {
    if (*((char *)a3 + 47) < 0) {
      uint64_t v15 = *(const char **)v15;
    }
    ZinAssertImpl("[MirOpt::CWTranspose] Unsupported NE layer with more than two inputs: %s", v15);
  }
  if (v16 - v17 == 8)
  {
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = v108.__r_.__value_.__l.__size_;
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v28 + 10);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v28)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v30 = &v108;
      }
      else {
        long long v30 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v30, v28);
    }
    strcpy((char *)p_p + v28, ":orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 0, 0, &v104);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v108.__r_.__value_.__l.__size_;
    }
    uint64_t v32 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v31 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v31)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v33 = &v108;
      }
      else {
        int v33 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, ":orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 0, 1, &v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v108.__r_.__value_.__l.__size_;
    }
    long long v35 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v34 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v34)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v36 = &v108;
      }
      else {
        int v36 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v35, v36, v34);
    }
    strcpy((char *)v35 + v34, ":trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 0, 0, &v96);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v37 = v108.__r_.__value_.__l.__size_;
    }
    uint64_t v38 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v37 + 12);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v37)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v39 = &v108;
      }
      else {
        long long v39 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v38, v39, v37);
    }
    strcpy((char *)v38 + v37, ":trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 0, 1, &v92);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&__p, (long long *)v104.__r_.__value_.__l.__data_, (long long *)v104.__r_.__value_.__l.__size_, (uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 4);
    long long v117 = v105;
    uint64_t v118 = v106;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v119, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v119 = __s;
    }
    uint64_t v121 = 0;
    uint64_t v120 = 0;
    uint64_t v122 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v120, (long long *)v100.__r_.__value_.__l.__data_, (long long *)v100.__r_.__value_.__l.__size_, (uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 4);
    long long v123 = v101;
    uint64_t v124 = v102;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v125, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
    }
    else {
      std::string v125 = v103;
    }
    uint64_t v127 = 0;
    uint64_t v126 = 0;
    uint64_t v128 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v126, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 4);
    long long v129 = v97;
    uint64_t v130 = v98;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v131, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
    }
    else {
      std::string v131 = v99;
    }
    uint64_t v133 = 0;
    uint64_t v132 = 0;
    uint64_t v134 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v132, (long long *)v92.__r_.__value_.__l.__data_, (long long *)v92.__r_.__value_.__l.__size_, (uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 4);
    long long v135 = v93;
    uint64_t v136 = v94;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v137, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    }
    else {
      std::string v137 = v95;
    }
    memset(&v84, 0, sizeof(v84));
    v80.__r_.__value_.__s.__data_[8] = 0;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x120uLL);
    v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
    v84.__r_.__value_.__r.__words[2] = v84.__r_.__value_.__r.__words[0] + 288;
    v84.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v84.__r_.__value_.__r.__words[2], (uint64_t)&__p, (uint64_t)v138, (uint64_t)v84.__r_.__value_.__l.__data_);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v88, (uint64_t *)&v84, (long long *)&v108);
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    unint64_t v64 = 288;
    do
    {
      unint64_t v65 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v64);
      if (__p.__r_.__value_.__s.__data_[v64 - 1] < 0) {
        operator delete(*(v65 - 3));
      }
      unint64_t v66 = *(v65 - 9);
      if (v66)
      {
        v112.__r_.__value_.__r.__words[v64 / 8] = (std::string::size_type)v66;
        operator delete(v66);
      }
      v64 -= 72;
    }
    while (v64);
    CpTransposeGraph::SetLayerTruthTable(*a2, v14, &v88);
    if (SHIBYTE(v90) < 0) {
      operator delete((void *)v89);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = v108.__r_.__value_.__l.__size_;
    }
    long long v41 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v40 + 15);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v40)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v42 = &v108;
      }
      else {
        uint64_t v42 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v41, v42, v40);
    }
    strcpy((char *)v41 + v40, ":orig_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 0, 0, &v104);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v108.__r_.__value_.__l.__size_;
    }
    int64x2_t v44 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v43 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64x2_t v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v43)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64x2_t v45 = &v108;
      }
      else {
        int64x2_t v45 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v44, v45, v43);
    }
    strcpy((char *)v44 + v43, ":orig_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 0, 1, &v100);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v46 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v46 = v108.__r_.__value_.__l.__size_;
    }
    std::string v47 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v46 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v46)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v48 = &v108;
      }
      else {
        uint64_t v48 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v47, v48, v46);
    }
    strcpy((char *)v47 + v46, ":orig_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 1, 0, &v96);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v49 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v49 = v108.__r_.__value_.__l.__size_;
    }
    std::string::size_type v50 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v49 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v49)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v51 = &v108;
      }
      else {
        uint64_t v51 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v50, v51, v49);
    }
    strcpy((char *)v50 + v49, ":orig_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 1, 1, &v92);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v52 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v52 = v108.__r_.__value_.__l.__size_;
    }
    std::string v53 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v52 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v52)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v54 = &v108;
      }
      else {
        std::string v54 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v53, v54, v52);
    }
    strcpy((char *)v53 + v52, ":trans_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 0, 0, &v88);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v55 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v55 = v108.__r_.__value_.__l.__size_;
    }
    std::string v56 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v55 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v55)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v57 = &v108;
      }
      else {
        long long v57 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v56, v57, v55);
    }
    strcpy((char *)v56 + v55, ":trans_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 0, 1, &v84);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v58 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v58 = v108.__r_.__value_.__l.__size_;
    }
    char v59 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v58 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v58)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v60 = &v108;
      }
      else {
        long long v60 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v59, v60, v58);
    }
    strcpy((char *)v59 + v58, ":trans_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 1, 0, &v80);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v61 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v61 = v108.__r_.__value_.__l.__size_;
    }
    std::string v62 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v61 + 18);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v61)
    {
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v63 = &v108;
      }
      else {
        std::string v63 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      memmove(v62, v63, v61);
    }
    strcpy((char *)v62 + v61, ":trans_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 1, 1, &v76);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&__p, (long long *)v104.__r_.__value_.__l.__data_, (long long *)v104.__r_.__value_.__l.__size_, (uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 4);
    long long v117 = v105;
    uint64_t v118 = v106;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v119, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v119 = __s;
    }
    uint64_t v121 = 0;
    uint64_t v120 = 0;
    uint64_t v122 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v120, (long long *)v100.__r_.__value_.__l.__data_, (long long *)v100.__r_.__value_.__l.__size_, (uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 4);
    long long v123 = v101;
    uint64_t v124 = v102;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v125, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
    }
    else {
      std::string v125 = v103;
    }
    uint64_t v127 = 0;
    uint64_t v126 = 0;
    uint64_t v128 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v126, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 4);
    long long v129 = v97;
    uint64_t v130 = v98;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v131, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
    }
    else {
      std::string v131 = v99;
    }
    uint64_t v133 = 0;
    uint64_t v132 = 0;
    uint64_t v134 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v132, (long long *)v92.__r_.__value_.__l.__data_, (long long *)v92.__r_.__value_.__l.__size_, (uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 4);
    long long v135 = v93;
    uint64_t v136 = v94;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v137, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    }
    else {
      std::string v137 = v95;
    }
    memset(v138, 0, sizeof(v138));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v138, (long long *)v88.__r_.__value_.__l.__data_, (long long *)v88.__r_.__value_.__l.__size_, (uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 4);
    long long v139 = v89;
    uint64_t v140 = v90;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v141, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    }
    else {
      std::string v141 = v91;
    }
    memset(v142, 0, sizeof(v142));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v142, (long long *)v84.__r_.__value_.__l.__data_, (long long *)v84.__r_.__value_.__l.__size_, (uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 4);
    long long v143 = v85;
    uint64_t v144 = v86;
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v145, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    }
    else {
      std::string v145 = v87;
    }
    memset(v146, 0, sizeof(v146));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v146, (long long *)v80.__r_.__value_.__l.__data_, (long long *)v80.__r_.__value_.__l.__size_, (uint64_t)(v80.__r_.__value_.__l.__size_ - v80.__r_.__value_.__r.__words[0]) >> 4);
    long long v147 = v81;
    uint64_t v148 = v82;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v149, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    }
    else {
      std::string v149 = v83;
    }
    memset(v150, 0, sizeof(v150));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v150, (long long *)v76.__r_.__value_.__l.__data_, (long long *)v76.__r_.__value_.__l.__size_, (uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 4);
    long long v151 = v77;
    uint64_t v152 = v78;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v153, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    }
    else {
      std::string v153 = v79;
    }
    long long v70 = 0;
    uint64_t v71 = 0;
    long long v72 = 0;
    long long v114 = &v70;
    char v115 = 0;
    long long v70 = (char *)operator new(0x240uLL);
    uint64_t v71 = (uint64_t)v70;
    long long v72 = v70 + 576;
    uint64_t v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v72, (uint64_t)&__p, (uint64_t)v154, (uint64_t)v70);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v73, (uint64_t *)&v70, (long long *)&v108);
    long long v114 = &v70;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
    unint64_t v67 = 576;
    do
    {
      long long v68 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v67);
      if (__p.__r_.__value_.__s.__data_[v67 - 1] < 0) {
        operator delete(*(v68 - 3));
      }
      long long v69 = *(v68 - 9);
      if (v69)
      {
        v112.__r_.__value_.__r.__words[v67 / 8] = (std::string::size_type)v69;
        operator delete(v69);
      }
      v67 -= 72;
    }
    while (v67);
    CpTransposeGraph::SetLayerTruthTable(*a2, v14, &v73);
    if (v75 < 0) {
      operator delete(v74);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (v76.__r_.__value_.__r.__words[0])
    {
      v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (v80.__r_.__value_.__r.__words[0])
    {
      v80.__r_.__value_.__l.__size_ = v80.__r_.__value_.__r.__words[0];
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (v84.__r_.__value_.__r.__words[0])
    {
      v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (v88.__r_.__value_.__r.__words[0])
    {
      v88.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
      operator delete(v88.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (v92.__r_.__value_.__r.__words[0])
  {
    v92.__r_.__value_.__l.__size_ = v92.__r_.__value_.__r.__words[0];
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (v96.__r_.__value_.__r.__words[0])
  {
    v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (v100.__r_.__value_.__r.__words[0])
  {
    v100.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v104.__r_.__value_.__r.__words[0])
  {
    v104.__r_.__value_.__l.__size_ = v104.__r_.__value_.__r.__words[0];
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  if (v109)
  {
    int64x2_t v110 = v109;
    operator delete(v109);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
}

void sub_2111E1A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v67 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v67;
    operator delete(v67);
  }
  do
  {
    v65 -= 9;
    CpTransposeUtils::LayerConstraint::~LayerConstraint(v65);
  }
  while (v65 != (void **)&STACK[0x310]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a20);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&a29);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a38);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a47);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a56);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a65);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x208]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x250]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  long long v68 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  _Unwind_Resume(a1);
}

void MirOpt::CWTransposeUtil::SetPELayerTruthTable(uint64_t a1, CpTransposeGraph **a2, ZinIrOpLayer *a3)
{
  v156[1] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v115, &byte_211F4AA5D);
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 704) + 8) + 99) & 0x10) == 0) {
    goto LABEL_42;
  }
  int v6 = *(_DWORD *)(*((void *)a3 + 8) + 8) - 81;
  if (v6 >= 4)
  {
    unint64_t v7 = ":is_pelayer";
    std::string::size_type v8 = 11;
  }
  else
  {
    unint64_t v7 = off_26418C290[v6];
    std::string::size_type v8 = qword_211EFCE50[v6];
  }
  std::string::append(&v115, v7, v8);
  std::string::append(&v115, ":has_", 5uLL);
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a3 + 640))(a3)) {
    std::string::append(&v115, "src1_", 5uLL);
  }
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a3 + 648))(a3)) {
    std::string::append(&v115, "src2_", 5uLL);
  }
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a3 + 408))(a3)) {
    std::string::append(&v115, "dst_", 4uLL);
  }
  if (((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a3 + 640))(a3) & 1) == 0
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a3 + 648))(a3) & 1) == 0
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a3 + 408))(a3) & 1) == 0)
  {
    std::string::append(&v115, "no_", 3uLL);
  }
  std::string::append(&v115, "transpose", 9uLL);
  if (*((void *)a3 + 33)) {
    std::string::append(&v115, ":has_mir_info", 0xDuLL);
  }
  if (*(void *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a3 + 32))(a3, 0, 0) + 104)) {
    std::string::append(&v115, ":has_tensor_mir_info", 0x14uLL);
  }
  if (*((void *)a3 + 25)) {
    std::string::append(&v115, ":has_texture", 0xCuLL);
  }
  std::string::append(&v115, ":has_", 5uLL);
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a3 + 656))(a3)) {
    std::string::append(&v115, "src1_", 5uLL);
  }
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)a3 + 664))(a3)) {
    std::string::append(&v115, "src2_", 5uLL);
  }
  if (((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a3 + 656))(a3) & 1) == 0
    && ((*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a3 + 664))(a3) & 1) == 0)
  {
    std::string::append(&v115, "no_", 3uLL);
  }
  std::string::append(&v115, "broadcast", 9uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  char v9 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((void *)(a1 + 576), &__p);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v10 = v9[24];
  int v11 = v9[25];
  int v12 = v9[26];
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings(&__p.__r_.__value_.__l.__data_);
  int v13 = (*(uint64_t (**)(ZinIrOpLayer *, std::string *))(*(void *)a3 + 424))(a3, &__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13) {
    std::string::append(&v115, ":transposed_domain_available", 0x1CuLL);
  }
  std::string::append(&v115, ":", 1uLL);
  if (v10) {
    std::string::append(&v115, "src1_", 5uLL);
  }
  if (v11) {
    std::string::append(&v115, "src2_", 5uLL);
  }
  if (v12)
  {
    unint64_t v14 = "dst_";
    std::string::size_type v15 = 4;
  }
  else
  {
    if (v11 | v10) {
      goto LABEL_41;
    }
    unint64_t v14 = "no_";
    std::string::size_type v15 = 3;
  }
  std::string::append(&v115, v14, v15);
LABEL_41:
  std::string::append(&v115, "transpose_available", 0x13uLL);
LABEL_42:
  unint64_t v16 = *((void *)a3 + 1);
  long long v17 = (char *)a3 + 24;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v114, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
    v114.__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
  }
  std::string v112 = 0;
  uint64_t v111 = 0;
  uint64_t v113 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v111, *((const void **)a3 + 11), *((void *)a3 + 12), (uint64_t)(*((void *)a3 + 12) - *((void *)a3 + 11)) >> 3);
  int v18 = v112;
  long long v19 = v111;
  std::to_string(&v102, v16);
  std::string::size_type v20 = std::string::insert(&v102, 0, "L", 1uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v106.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::string v22 = std::string::append(&v106, ":", 1uLL);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v24 = &v114;
  }
  else {
    std::string v24 = (std::string *)v114.__r_.__value_.__r.__words[0];
  }
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v114.__r_.__value_.__l.__size_;
  }
  int64x2_t v26 = std::string::append(&__p, (const std::string::value_type *)v24, size);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v110.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = &v115;
    }
    else {
      std::string::size_type v28 = (std::string *)v115.__r_.__value_.__r.__words[0];
    }
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = v115.__r_.__value_.__l.__size_;
    }
    std::string::append(&v110, (const std::string::value_type *)v28, v29);
  }
  if ((unint64_t)(v112 - (unsigned char *)v111) >= 0x20)
  {
    if (*((char *)a3 + 47) < 0) {
      long long v17 = *(const char **)v17;
    }
    ZinAssertImpl("[MirOpt::CWTranspose] Unsupported PE layer with more than three inputs: %s", v17);
  }
  if (v18 - v19 == 8)
  {
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v110.__r_.__value_.__l.__size_;
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v30 + 10);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v30)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v32 = &v110;
      }
      else {
        uint64_t v32 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v32, v30);
    }
    strcpy((char *)p_p + v30, ":orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 0, 0, &v106);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v33 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v34 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v33 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v33)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v35 = &v110;
      }
      else {
        long long v35 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ":orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 0, 1, &v102);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v37 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v36 + 11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v36)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = &v110;
      }
      else {
        uint64_t v38 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v37, v38, v36);
    }
    strcpy((char *)v37 + v36, ":trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 0, 0, &v98);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v39 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v39 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v40 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v39 + 12);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v39)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v41 = &v110;
      }
      else {
        long long v41 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v40, v41, v39);
    }
    strcpy((char *)v40 + v39, ":trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 0, 1, &v94);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&__p, (long long *)v106.__r_.__value_.__l.__data_, (long long *)v106.__r_.__value_.__l.__size_, (uint64_t)(v106.__r_.__value_.__l.__size_ - v106.__r_.__value_.__r.__words[0]) >> 4);
    long long v119 = v107;
    uint64_t v120 = v108;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v121, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v121 = __s;
    }
    uint64_t v123 = 0;
    uint64_t v122 = 0;
    uint64_t v124 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v122, (long long *)v102.__r_.__value_.__l.__data_, (long long *)v102.__r_.__value_.__l.__size_, (uint64_t)(v102.__r_.__value_.__l.__size_ - v102.__r_.__value_.__r.__words[0]) >> 4);
    long long v125 = v103;
    uint64_t v126 = v104;
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v127, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
    }
    else {
      std::string v127 = v105;
    }
    uint64_t v129 = 0;
    uint64_t v128 = 0;
    uint64_t v130 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v128, (long long *)v98.__r_.__value_.__l.__data_, (long long *)v98.__r_.__value_.__l.__size_, (uint64_t)(v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]) >> 4);
    long long v131 = v99;
    uint64_t v132 = v100;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v133, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
    }
    else {
      std::string v133 = v101;
    }
    uint64_t v135 = 0;
    uint64_t v134 = 0;
    uint64_t v136 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v134, (long long *)v94.__r_.__value_.__l.__data_, (long long *)v94.__r_.__value_.__l.__size_, (uint64_t)(v94.__r_.__value_.__l.__size_ - v94.__r_.__value_.__r.__words[0]) >> 4);
    long long v137 = v95;
    uint64_t v138 = v96;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v139, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
    }
    else {
      std::string v139 = v97;
    }
    memset(&v86, 0, sizeof(v86));
    v82.__r_.__value_.__s.__data_[8] = 0;
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x120uLL);
    v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
    v86.__r_.__value_.__r.__words[2] = v86.__r_.__value_.__r.__words[0] + 288;
    v86.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v86.__r_.__value_.__r.__words[2], (uint64_t)&__p, (uint64_t)v140, (uint64_t)v86.__r_.__value_.__l.__data_);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v90, (uint64_t *)&v86, (long long *)&v110);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    unint64_t v66 = 288;
    do
    {
      unint64_t v67 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v66);
      if (__p.__r_.__value_.__s.__data_[v66 - 1] < 0) {
        operator delete(*(v67 - 3));
      }
      long long v68 = *(v67 - 9);
      if (v68)
      {
        v114.__r_.__value_.__r.__words[v66 / 8] = (std::string::size_type)v68;
        operator delete(v68);
      }
      v66 -= 72;
    }
    while (v66);
    CpTransposeGraph::SetLayerTruthTable(*a2, v16, &v90);
    if (SHIBYTE(v92) < 0) {
      operator delete((void *)v91);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v43 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v42 + 15);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v42)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64x2_t v44 = &v110;
      }
      else {
        int64x2_t v44 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v43, v44, v42);
    }
    strcpy((char *)v43 + v42, ":orig_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 0, 0, &v106);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v45 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v46 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v45 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v47 = &v110;
      }
      else {
        std::string v47 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }
    strcpy((char *)v46 + v45, ":orig_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 0, 1, &v102);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v49 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v48 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v48)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v50 = &v110;
      }
      else {
        std::string::size_type v50 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, ":orig_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 1, 0, &v98);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v51 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v51 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v52 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v51 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v51)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v53 = &v110;
      }
      else {
        std::string v53 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v52, v53, v51);
    }
    strcpy((char *)v52 + v51, ":orig_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 0, 1, 1, &v94);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v54 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v54 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v55 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v54 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v54)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v56 = &v110;
      }
      else {
        std::string v56 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v55, v56, v54);
    }
    strcpy((char *)v55 + v54, ":trans_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 0, 0, &v90);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v57 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v57 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v58 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v57 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v57)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v59 = &v110;
      }
      else {
        char v59 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v58, v59, v57);
    }
    strcpy((char *)v58 + v57, ":trans_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 0, 1, &v86);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v60 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v60 = v110.__r_.__value_.__l.__size_;
    }
    std::string::size_type v61 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v60 + 17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v61 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v60)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v62 = &v110;
      }
      else {
        std::string v62 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v61, v62, v60);
    }
    strcpy((char *)v61 + v60, ":trans_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 1, 0, &v82);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v63 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v63 = v110.__r_.__value_.__l.__size_;
    }
    unint64_t v64 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v63 + 18);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v63)
    {
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v65 = &v110;
      }
      else {
        unint64_t v65 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      memmove(v64, v65, v63);
    }
    strcpy((char *)v64 + v63, ":trans_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&__p, 1, 1, 1, &v78);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&__p, (long long *)v106.__r_.__value_.__l.__data_, (long long *)v106.__r_.__value_.__l.__size_, (uint64_t)(v106.__r_.__value_.__l.__size_ - v106.__r_.__value_.__r.__words[0]) >> 4);
    long long v119 = v107;
    uint64_t v120 = v108;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v121, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v121 = __s;
    }
    uint64_t v123 = 0;
    uint64_t v122 = 0;
    uint64_t v124 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v122, (long long *)v102.__r_.__value_.__l.__data_, (long long *)v102.__r_.__value_.__l.__size_, (uint64_t)(v102.__r_.__value_.__l.__size_ - v102.__r_.__value_.__r.__words[0]) >> 4);
    long long v125 = v103;
    uint64_t v126 = v104;
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v127, v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_);
    }
    else {
      std::string v127 = v105;
    }
    uint64_t v129 = 0;
    uint64_t v128 = 0;
    uint64_t v130 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v128, (long long *)v98.__r_.__value_.__l.__data_, (long long *)v98.__r_.__value_.__l.__size_, (uint64_t)(v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]) >> 4);
    long long v131 = v99;
    uint64_t v132 = v100;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v133, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
    }
    else {
      std::string v133 = v101;
    }
    uint64_t v135 = 0;
    uint64_t v134 = 0;
    uint64_t v136 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v134, (long long *)v94.__r_.__value_.__l.__data_, (long long *)v94.__r_.__value_.__l.__size_, (uint64_t)(v94.__r_.__value_.__l.__size_ - v94.__r_.__value_.__r.__words[0]) >> 4);
    long long v137 = v95;
    uint64_t v138 = v96;
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v139, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
    }
    else {
      std::string v139 = v97;
    }
    memset(v140, 0, sizeof(v140));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v140, (long long *)v90.__r_.__value_.__l.__data_, (long long *)v90.__r_.__value_.__l.__size_, (uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 4);
    long long v141 = v91;
    uint64_t v142 = v92;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v143, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
    }
    else {
      std::string v143 = v93;
    }
    memset(v144, 0, sizeof(v144));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v144, (long long *)v86.__r_.__value_.__l.__data_, (long long *)v86.__r_.__value_.__l.__size_, (uint64_t)(v86.__r_.__value_.__l.__size_ - v86.__r_.__value_.__r.__words[0]) >> 4);
    long long v145 = v87;
    uint64_t v146 = v88;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v147, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
    }
    else {
      std::string v147 = v89;
    }
    memset(v148, 0, sizeof(v148));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v148, (long long *)v82.__r_.__value_.__l.__data_, (long long *)v82.__r_.__value_.__l.__size_, (uint64_t)(v82.__r_.__value_.__l.__size_ - v82.__r_.__value_.__r.__words[0]) >> 4);
    long long v149 = v83;
    uint64_t v150 = v84;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v151, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
    }
    else {
      std::string v151 = v85;
    }
    memset(v152, 0, sizeof(v152));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v152, (long long *)v78.__r_.__value_.__l.__data_, (long long *)v78.__r_.__value_.__l.__size_, (uint64_t)(v78.__r_.__value_.__l.__size_ - v78.__r_.__value_.__r.__words[0]) >> 4);
    long long v153 = v79;
    uint64_t v154 = v80;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v155, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
    }
    else {
      std::string v155 = v81;
    }
    long long v72 = 0;
    uint64_t v73 = 0;
    unint64_t v74 = 0;
    uint64_t v116 = &v72;
    char v117 = 0;
    long long v72 = (char *)operator new(0x240uLL);
    uint64_t v73 = (uint64_t)v72;
    unint64_t v74 = v72 + 576;
    uint64_t v73 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v74, (uint64_t)&__p, (uint64_t)v156, (uint64_t)v72);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v75, (uint64_t *)&v72, (long long *)&v110);
    uint64_t v116 = &v72;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    unint64_t v69 = 576;
    do
    {
      long long v70 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v69);
      if (__p.__r_.__value_.__s.__data_[v69 - 1] < 0) {
        operator delete(*(v70 - 3));
      }
      uint64_t v71 = *(v70 - 9);
      if (v71)
      {
        v114.__r_.__value_.__r.__words[v69 / 8] = (std::string::size_type)v71;
        operator delete(v71);
      }
      v69 -= 72;
    }
    while (v69);
    CpTransposeGraph::SetLayerTruthTable(*a2, v16, &v75);
    if (v77 < 0) {
      operator delete(v76);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (v78.__r_.__value_.__r.__words[0])
    {
      v78.__r_.__value_.__l.__size_ = v78.__r_.__value_.__r.__words[0];
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (v82.__r_.__value_.__r.__words[0])
    {
      v82.__r_.__value_.__l.__size_ = v82.__r_.__value_.__r.__words[0];
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (v86.__r_.__value_.__r.__words[0])
    {
      v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    if (v90.__r_.__value_.__r.__words[0])
    {
      v90.__r_.__value_.__l.__size_ = v90.__r_.__value_.__r.__words[0];
      operator delete(v90.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v94.__r_.__value_.__r.__words[0])
  {
    v94.__r_.__value_.__l.__size_ = v94.__r_.__value_.__r.__words[0];
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (v98.__r_.__value_.__r.__words[0])
  {
    v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (v102.__r_.__value_.__r.__words[0])
  {
    v102.__r_.__value_.__l.__size_ = v102.__r_.__value_.__r.__words[0];
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v106.__r_.__value_.__r.__words[0])
  {
    v106.__r_.__value_.__l.__size_ = v106.__r_.__value_.__r.__words[0];
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  if (v111)
  {
    std::string v112 = v111;
    operator delete(v111);
  }
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
}

void sub_2111E3524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v67 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v67;
    operator delete(v67);
  }
  do
  {
    v65 -= 9;
    CpTransposeUtils::LayerConstraint::~LayerConstraint(v65);
  }
  while (v65 != (void **)&STACK[0x310]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a20);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&a29);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a38);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a47);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a56);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a65);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x208]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x250]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  long long v68 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  _Unwind_Resume(a1);
}

void MirOpt::CWTransposeUtil::SetSNELayerTruthTable(uint64_t a1, CpTransposeGraph **a2, uint64_t a3)
{
  v146[1] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v105, &byte_211F4AA5D);
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 704) + 8) + 99) & 0x10) != 0) {
    std::string::append(&v105, ":is_sne", 7uLL);
  }
  unint64_t v6 = *(void *)(a3 + 8);
  unint64_t v7 = (const char *)(a3 + 24);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v104.__r_.__value_.__r.__words[2] = *(void *)(a3 + 40);
  }
  std::string v102 = 0;
  std::string v101 = 0;
  uint64_t v103 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v101, *(const void **)(a3 + 88), *(void *)(a3 + 96), (uint64_t)(*(void *)(a3 + 96) - *(void *)(a3 + 88)) >> 3);
  std::string::size_type v8 = v102;
  char v9 = v101;
  std::to_string(&v92, v6);
  int v10 = std::string::insert(&v92, 0, "L", 1uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = std::string::append(&v96, ":", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &v104;
  }
  else {
    unint64_t v14 = (std::string *)v104.__r_.__value_.__r.__words[0];
  }
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v104.__r_.__value_.__l.__size_;
  }
  unint64_t v16 = std::string::append(&v108, (const std::string::value_type *)v14, size);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 704) + 8) + 99) & 0x10) != 0)
  {
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &v105;
    }
    else {
      int v18 = (std::string *)v105.__r_.__value_.__r.__words[0];
    }
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v105.__r_.__value_.__l.__size_;
    }
    std::string::append(&v100, (const std::string::value_type *)v18, v19);
  }
  if ((unint64_t)(((v8 - v9) >> 3) - 1) >= 2)
  {
    if (*(char *)(a3 + 47) < 0) {
      unint64_t v7 = *(const char **)v7;
    }
    ZinAssertImpl("[MirOpt::CWTranspose] Unsupported SNE layer with number of inputs not 2: %s", v7);
  }
  if (v8 - v9 == 8)
  {
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v100.__r_.__value_.__l.__size_;
    }
    long long v21 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v20 + 10);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v21 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v20)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v22 = &v100;
      }
      else {
        std::string v22 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, ":orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 0, 0, 0, &v96);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v100.__r_.__value_.__l.__size_;
    }
    std::string v24 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v23 + 11);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v24 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v23)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v25 = &v100;
      }
      else {
        long long v25 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v24, v25, v23);
    }
    strcpy((char *)v24 + v23, ":orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 0, 0, 1, &v92);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = v100.__r_.__value_.__l.__size_;
    }
    long long v27 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v26 + 11);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v27 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v26)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v28 = &v100;
      }
      else {
        std::string::size_type v28 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v27, v28, v26);
    }
    strcpy((char *)v27 + v26, ":trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 1, 0, 0, &v88);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = v100.__r_.__value_.__l.__size_;
    }
    std::string::size_type v30 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v29 + 12);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v30 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v29)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v31 = &v100;
      }
      else {
        std::string::size_type v31 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v30, v31, v29);
    }
    strcpy((char *)v30 + v29, ":trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 1, 0, 1, &v84);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    memset(&v108, 0, sizeof(v108));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v108, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 4);
    long long v109 = v97;
    uint64_t v110 = v98;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v111, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v111 = __s;
    }
    uint64_t v113 = 0;
    uint64_t v112 = 0;
    uint64_t v114 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v112, (long long *)v92.__r_.__value_.__l.__data_, (long long *)v92.__r_.__value_.__l.__size_, (uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 4);
    long long v115 = v93;
    uint64_t v116 = v94;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v117, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    }
    else {
      std::string v117 = v95;
    }
    uint64_t v119 = 0;
    uint64_t v118 = 0;
    uint64_t v120 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v118, (long long *)v88.__r_.__value_.__l.__data_, (long long *)v88.__r_.__value_.__l.__size_, (uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 4);
    long long v121 = v89;
    uint64_t v122 = v90;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v123, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    }
    else {
      std::string v123 = v91;
    }
    uint64_t v125 = 0;
    uint64_t v124 = 0;
    uint64_t v126 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v124, (long long *)v84.__r_.__value_.__l.__data_, (long long *)v84.__r_.__value_.__l.__size_, (uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 4);
    long long v127 = v85;
    uint64_t v128 = v86;
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v87;
    }
    memset(&v76, 0, sizeof(v76));
    v72.__r_.__value_.__s.__data_[8] = 0;
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x120uLL);
    v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
    v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[0] + 288;
    v76.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v76.__r_.__value_.__r.__words[2], (uint64_t)&v108, (uint64_t)v130, (uint64_t)v76.__r_.__value_.__l.__data_);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v80, (uint64_t *)&v76, (long long *)&v100);
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    unint64_t v56 = 288;
    do
    {
      std::string::size_type v57 = (void **)((char *)&v108.__r_.__value_.__l.__data_ + v56);
      if (v108.__r_.__value_.__s.__data_[v56 - 1] < 0) {
        operator delete(*(v57 - 3));
      }
      std::string::size_type v58 = *(v57 - 9);
      if (v58)
      {
        v104.__r_.__value_.__r.__words[v56 / 8] = (std::string::size_type)v58;
        operator delete(v58);
      }
      v56 -= 72;
    }
    while (v56);
    CpTransposeGraph::SetLayerTruthTable(*a2, v6, &v80);
    if (SHIBYTE(v82) < 0) {
      operator delete((void *)__p);
    }
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  }
  else
  {
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v100.__r_.__value_.__l.__size_;
    }
    std::string::size_type v33 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v32 + 15);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v33 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v32)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = &v100;
      }
      else {
        std::string::size_type v34 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v33, v34, v32);
    }
    strcpy((char *)v33 + v32, ":orig_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 0, 0, 0, &v96);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v100.__r_.__value_.__l.__size_;
    }
    std::string::size_type v36 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v35 + 16);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v36 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v35)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = &v100;
      }
      else {
        std::string::size_type v37 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v36, v37, v35);
    }
    strcpy((char *)v36 + v35, ":orig_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 0, 0, 1, &v92);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v38 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v38 = v100.__r_.__value_.__l.__size_;
    }
    std::string::size_type v39 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v38 + 16);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v39 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v38)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = &v100;
      }
      else {
        std::string::size_type v40 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v39, v40, v38);
    }
    strcpy((char *)v39 + v38, ":orig_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 0, 1, 0, &v88);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v41 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v41 = v100.__r_.__value_.__l.__size_;
    }
    std::string::size_type v42 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v41 + 17);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v42 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v41)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v43 = &v100;
      }
      else {
        std::string::size_type v43 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v42, v43, v41);
    }
    strcpy((char *)v42 + v41, ":orig_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 0, 1, 1, &v84);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v44 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v44 = v100.__r_.__value_.__l.__size_;
    }
    std::string::size_type v45 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v44 + 16);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v45 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v44)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = &v100;
      }
      else {
        std::string::size_type v46 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v45, v46, v44);
    }
    strcpy((char *)v45 + v44, ":trans_orig_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 1, 0, 0, &v80);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v47 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v47 = v100.__r_.__value_.__l.__size_;
    }
    std::string::size_type v48 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v47 + 17);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v48 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v47)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = &v100;
      }
      else {
        std::string::size_type v49 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v48, v49, v47);
    }
    strcpy((char *)v48 + v47, ":trans_orig_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 1, 0, 1, &v76);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v50 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v50 = v100.__r_.__value_.__l.__size_;
    }
    std::string::size_type v51 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v50 + 17);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v51 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v50)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v52 = &v100;
      }
      else {
        std::string::size_type v52 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v51, v52, v50);
    }
    strcpy((char *)v51 + v50, ":trans_trans_orig");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 1, 1, 0, &v72);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v53 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v53 = v100.__r_.__value_.__l.__size_;
    }
    std::string::size_type v54 = &v108;
    std::string::basic_string[abi:ne180100]((uint64_t)&v108, v53 + 18);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v54 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if (v53)
    {
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v55 = &v100;
      }
      else {
        std::string::size_type v55 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      memmove(v54, v55, v53);
    }
    strcpy((char *)v54 + v53, ":trans_trans_trans");
    MirOpt::CWTransposeUtil::CreateLayerConstraint(a1, a3, (long long *)&v108, 1, 1, 1, &v68);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    memset(&v108, 0, sizeof(v108));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v108, (long long *)v96.__r_.__value_.__l.__data_, (long long *)v96.__r_.__value_.__l.__size_, (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 4);
    long long v109 = v97;
    uint64_t v110 = v98;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v111, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v111 = __s;
    }
    uint64_t v113 = 0;
    uint64_t v112 = 0;
    uint64_t v114 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v112, (long long *)v92.__r_.__value_.__l.__data_, (long long *)v92.__r_.__value_.__l.__size_, (uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 4);
    long long v115 = v93;
    uint64_t v116 = v94;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v117, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    }
    else {
      std::string v117 = v95;
    }
    uint64_t v119 = 0;
    uint64_t v118 = 0;
    uint64_t v120 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v118, (long long *)v88.__r_.__value_.__l.__data_, (long long *)v88.__r_.__value_.__l.__size_, (uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 4);
    long long v121 = v89;
    uint64_t v122 = v90;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v123, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    }
    else {
      std::string v123 = v91;
    }
    uint64_t v125 = 0;
    uint64_t v124 = 0;
    uint64_t v126 = 0;
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)&v124, (long long *)v84.__r_.__value_.__l.__data_, (long long *)v84.__r_.__value_.__l.__size_, (uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 4);
    long long v127 = v85;
    uint64_t v128 = v86;
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v87;
    }
    memset(v130, 0, sizeof(v130));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v130, (long long *)v80.__r_.__value_.__l.__data_, (long long *)v80.__r_.__value_.__l.__size_, (uint64_t)(v80.__r_.__value_.__l.__size_ - v80.__r_.__value_.__r.__words[0]) >> 4);
    long long v131 = __p;
    uint64_t v132 = v82;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v133, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    }
    else {
      std::string v133 = v83;
    }
    memset(v134, 0, sizeof(v134));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v134, (long long *)v76.__r_.__value_.__l.__data_, (long long *)v76.__r_.__value_.__l.__size_, (uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 4);
    long long v135 = v77;
    uint64_t v136 = v78;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v137, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    }
    else {
      std::string v137 = v79;
    }
    memset(v138, 0, sizeof(v138));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v138, (long long *)v72.__r_.__value_.__l.__data_, (long long *)v72.__r_.__value_.__l.__size_, (uint64_t)(v72.__r_.__value_.__l.__size_ - v72.__r_.__value_.__r.__words[0]) >> 4);
    long long v139 = v73;
    uint64_t v140 = v74;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v141, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
    }
    else {
      std::string v141 = v75;
    }
    memset(v142, 0, sizeof(v142));
    std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)v142, (long long *)v68.__r_.__value_.__l.__data_, (long long *)v68.__r_.__value_.__l.__size_, (uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 4);
    long long v143 = v69;
    uint64_t v144 = v70;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v145, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    }
    else {
      std::string v145 = v71;
    }
    std::string v62 = 0;
    uint64_t v63 = 0;
    unint64_t v64 = 0;
    std::string v106 = &v62;
    char v107 = 0;
    std::string v62 = (char *)operator new(0x240uLL);
    uint64_t v63 = (uint64_t)v62;
    unint64_t v64 = v62 + 576;
    uint64_t v63 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>((uint64_t)&v64, (uint64_t)&v108, (uint64_t)v146, (uint64_t)v62);
    CpTransposeUtils::LayerTruthTable::LayerTruthTable(&v65, (uint64_t *)&v62, (long long *)&v100);
    std::string v106 = &v62;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    unint64_t v59 = 576;
    do
    {
      std::string::size_type v60 = (void **)((char *)&v108.__r_.__value_.__l.__data_ + v59);
      if (v108.__r_.__value_.__s.__data_[v59 - 1] < 0) {
        operator delete(*(v60 - 3));
      }
      std::string::size_type v61 = *(v60 - 9);
      if (v61)
      {
        v104.__r_.__value_.__r.__words[v59 / 8] = (std::string::size_type)v61;
        operator delete(v61);
      }
      v59 -= 72;
    }
    while (v59);
    CpTransposeGraph::SetLayerTruthTable(*a2, v6, &v65);
    if (v67 < 0) {
      operator delete(v66);
    }
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
    std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (v68.__r_.__value_.__r.__words[0])
    {
      v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (v72.__r_.__value_.__r.__words[0])
    {
      v72.__r_.__value_.__l.__size_ = v72.__r_.__value_.__r.__words[0];
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (v76.__r_.__value_.__r.__words[0])
    {
      v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (v80.__r_.__value_.__r.__words[0])
    {
      v80.__r_.__value_.__l.__size_ = v80.__r_.__value_.__r.__words[0];
      operator delete(v80.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (v84.__r_.__value_.__r.__words[0])
  {
    v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (v88.__r_.__value_.__r.__words[0])
  {
    v88.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (v92.__r_.__value_.__r.__words[0])
  {
    v92.__r_.__value_.__l.__size_ = v92.__r_.__value_.__r.__words[0];
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v96.__r_.__value_.__r.__words[0])
  {
    v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (v101)
  {
    std::string v102 = v101;
    operator delete(v101);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
}

void sub_2111E4B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char v67 = (void *)STACK[0x508];
  if (STACK[0x508])
  {
    STACK[0x510] = (unint64_t)v67;
    operator delete(v67);
  }
  do
  {
    v65 -= 9;
    CpTransposeUtils::LayerConstraint::~LayerConstraint(v65);
  }
  while (v65 != (void **)&STACK[0x310]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a20);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&a29);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a38);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a47);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a56);
  CpTransposeUtils::LayerConstraint::~LayerConstraint(&a65);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x208]);
  CpTransposeUtils::LayerConstraint::~LayerConstraint((void **)&STACK[0x250]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  std::string v68 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::UpdateTransposeFeasibility(uint64_t a1, CpTransposeGraph **a2, uint64_t a3)
{
  LayerTruthTable = (uint64_t **)CpTransposeGraph::GetLayerTruthTable(*a2, *(void *)(a3 + 8));
  long long v22 = 0u;
  long long v23 = 0u;
  int v24 = 1065353216;
  unint64_t v6 = *LayerTruthTable;
  unint64_t v7 = LayerTruthTable[1];
  if (*LayerTruthTable != v7)
  {
    do
    {
      if (*((unsigned __int8 *)v6 + 24) | *((unsigned __int8 *)v6 + 25)) {
        BOOL v8 = v6[4] == -1;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8 && v6[5] != -1)
      {
        uint64_t v10 = *v6;
        uint64_t v11 = v6[1];
        while (v10 != v11)
        {
          v19.__r_.__value_.__r.__words[0] = 0;
          v19.__r_.__value_.__r.__words[0] = *(void *)v10;
          __p[0] = &v19;
          int v12 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)&v22, (unint64_t *)&v19, (uint64_t)&std::piecewise_construct, (void **)__p)+ 3;
          LOBYTE(__p[0]) = *(_DWORD *)(v10 + 8) == 1;
          std::__hash_table<BOOL,std::hash<BOOL>,std::equal_to<BOOL>,std::allocator<BOOL>>::__emplace_unique_key_args<BOOL,BOOL>((uint64_t)v12, (unsigned __int8 *)__p, __p);
          v10 += 16;
        }
      }
      v6 += 9;
    }
    while (v6 != v7);
    for (uint64_t i = (void *)v23; i; uint64_t i = (void *)*i)
    {
      if (i[6] == 1)
      {
        unint64_t v14 = i[2];
        std::string::size_type v15 = *a2;
        std::to_string(&v19, *(void *)(a3 + 8));
        unint64_t v16 = std::string::insert(&v19, 0, "presolved_with_L", 0x10uLL);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        std::string::size_type v21 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long __p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        CpTransposeGraph::DisqualifyTranspose((uint64_t)v15, v14);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)&v22);
}

void sub_2111E50F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t MirOpt::CWTransposeUtil::IsCompatibleWithTransposedDomain(uint64_t a1, ZinIrOpLayer *a2, int a3, int a4, int a5)
{
  std::string::size_type v20 = a2;
  MirOpt::CWTransposeUtil::GetCWTransposeDimensionMappings((char **)__p);
  char v10 = (*(uint64_t (**)(ZinIrOpLayer *, void **))(*(void *)a2 + 424))(a2, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v10 & 1) == 0 || *((void *)a2 + 33)) {
    return 0;
  }
  if (ZinIrOpLayer::IsNELayer(a2))
  {
    long long v13 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>((void *)(a1 + 576), &v20);
    if (!v13) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    return *((unsigned char *)v13 + 26) != 0;
  }
  else
  {
    if (!ZinIrOpLayer::IsPELayer(a2)) {
      return 0;
    }
    LOBYTE(__p[0]) = 0;
    *(_WORD *)int v18 = 0;
    MirOpt::GetPELayerTransposeAvailability(a2, (const ZinPELayer *)__p, &v18[1], v18, (BOOL *)1);
    int v14 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a2 + 640))(a2);
    int v15 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a2 + 648))(a2);
    int v16 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)a2 + 408))(a2);
    uint64_t v11 = 0;
    if (((a3 != 1) == v14 || LOBYTE(__p[0]) != 0)
      && (*((void *)a2 + 12) - *((void *)a2 + 11) < 9uLL || (((a4 == 1) ^ v15) & 1) != 0 || (uint64_t v11 = v18[1]) != 0))
    {
      LODWORD(v11) = (a5 == 1) ^ v16;
      if (v18[0]) {
        return 1;
      }
      else {
        return v11;
      }
    }
  }
  return v11;
}

void sub_2111E536C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MirOpt::GetPELayerTransposeAvailability(MirOpt *this, const ZinPELayer *a2, BOOL *a3, BOOL *a4, BOOL *a5)
{
  int v5 = (int)a5;
  (*(void (**)(unsigned char **__return_ptr))(*(void *)this + 512))(&v36);
  unint64_t v10 = v37 - v36;
  if (v36)
  {
    std::string::size_type v37 = v36;
    operator delete(v36);
  }
  int v11 = *(_DWORD *)(*((void *)this + 8) + 8);
  TensorFromLayerAndUsage = (void *)GetTensorFromLayerAndUsage(this, 0);
  uint64_t v13 = TensorFromLayerAndUsage[8];
  if (v5) {
    uint64_t v14 = TensorFromLayerAndUsage[9];
  }
  else {
    uint64_t v14 = TensorFromLayerAndUsage[7];
  }
  if (v5) {
    uint64_t v15 = TensorFromLayerAndUsage[7];
  }
  else {
    uint64_t v15 = TensorFromLayerAndUsage[9];
  }
  if ((*(unsigned int (**)(MirOpt *))(*(void *)this + 640))(this)) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v15;
  }
  BOOL v18 = v13 == 1 && v16 == 1;
  *(unsigned char *)a2 = v18;
  if (v10 >= 9)
  {
    std::string v19 = (void *)GetTensorFromLayerAndUsage(this, 1);
    uint64_t v20 = v19[8];
    if (v5) {
      uint64_t v21 = v19[9];
    }
    else {
      uint64_t v21 = v19[7];
    }
    if (v5) {
      uint64_t v22 = v19[7];
    }
    else {
      uint64_t v22 = v19[9];
    }
    if ((*(unsigned int (**)(MirOpt *))(*(void *)this + 648))(this)) {
      uint64_t v23 = v21;
    }
    else {
      uint64_t v23 = v22;
    }
    if (v11 == 84) {
      uint64_t v24 = 2;
    }
    else {
      uint64_t v24 = 1;
    }
    BOOL v26 = v20 == v24 && v23 == 1;
    *a3 = v26;
  }
  long long v27 = (void *)GetTensorFromLayerAndUsage(this, 3);
  uint64_t v28 = v27[8];
  BOOL v29 = v5 == 0;
  if (v5) {
    uint64_t v30 = v27[7];
  }
  else {
    uint64_t v30 = v27[9];
  }
  if (v29) {
    uint64_t v31 = v27[7];
  }
  else {
    uint64_t v31 = v27[9];
  }
  uint64_t result = (*(uint64_t (**)(MirOpt *))(*(void *)this + 408))(this);
  if (result) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = v30;
  }
  BOOL v35 = v28 == 1 && v33 == 1;
  *a4 = v35;
  if (v11 == 83)
  {
    *(unsigned char *)a2 = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t MirOpt::CWTransposeUtil::IsBetterWithTransposedDomain(uint64_t a1, ZinIrOpLayer *this, int a3, int a4, int a5)
{
  if (ZinIrOpLayer::IsNELayer(this))
  {
    return MirOpt::CWTransposeUtil::IsCompatibleWithTransposedDomain(a1, this, a3, a4, a5);
  }
  else
  {
    uint64_t result = ZinIrOpLayer::IsPELayer(this);
    if (result)
    {
      uint64_t result = MirOpt::CWTransposeUtil::IsCompatibleWithTransposedDomain(a1, this, a3, a4, a5);
      if (result)
      {
        (*(void (**)(void *__return_ptr, ZinIrOpLayer *))(*(void *)this + 376))(v11, this);
        return v11[1] > v11[3];
      }
    }
  }
  return result;
}

void CpTransposeUtils::LayerConstraint::~LayerConstraint(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  unint64_t v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void CpTransposeUtils::LayerTruthTable::~LayerTruthTable(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  unint64_t v2 = this;
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void MirOpt::CWTransposeUtil::~CWTransposeUtil(MirOpt::CWTransposeUtil *this)
{
  uint64_t v2 = *((void *)this + 86);
  *((void *)this + 86) = 0;
  if (v2) {
    std::default_delete<ZinTensorFamilyUtil>::operator()[abi:ne180100]((uint64_t)this + 688, v2);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 664, *((void **)this + 84));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 640, *((void **)this + 81));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 616, *((void **)this + 78));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 576);
  uint64_t v3 = MEMORY[0x263F8C2B0];
  uint64_t v4 = *MEMORY[0x263F8C2B0];
  *(void *)this = *MEMORY[0x263F8C2B0];
  *(void *)((char *)this + *(void *)(v4 - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(v3 + 24);
  MEMORY[0x21667CDE0]((char *)this + 8);
  std::ostream::~ostream();
  MEMORY[0x21667D2B0]((char *)this + 416);
}

BOOL MirOpt::CollectLayersNeededForAnalysis(uint64_t a1, uint64_t a2)
{
  BOOL result = MirOpt::CollectLayersNeededForAnalysis(ZinIrOpLayer const*,std::set<ZinIrOpLayer*,ZinIrIdComparator<ZinIrOpLayer*>,std::allocator<ZinIrOpLayer*>> &)::$_0::operator()(a1, a2);
  unint64_t v6 = *(uint64_t **)(a1 + 88);
  int v5 = *(uint64_t **)(a1 + 96);
  while (v6 != v5)
  {
    uint64_t v7 = *v6++;
    BOOL result = MirOpt::CollectLayersNeededForAnalysis(ZinIrOpLayer const*,std::set<ZinIrOpLayer*,ZinIrIdComparator<ZinIrOpLayer*>,std::allocator<ZinIrOpLayer*>> &)::$_0::operator()(v7, a2);
  }
  return result;
}

BOOL MirOpt::CollectLayersNeededForAnalysis(ZinIrOpLayer const*,std::set<ZinIrOpLayer*,ZinIrIdComparator<ZinIrOpLayer*>,std::allocator<ZinIrOpLayer*>> &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  BOOL v8 = (ZinIrTensor *)*((void *)v3 + 12);
  std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)a2, (uint64_t *)&v8, (uint64_t *)&v8);
  for (BOOL result = ZinIrTensor::HasParent(v3); result; BOOL result = ZinIrTensor::HasParent(v3))
  {
    int v5 = (void *)*((void *)v3 + 12);
    if (*(_DWORD *)(v5[8] + 8) == 75)
    {
      unint64_t v6 = (uint64_t *)v5[11];
      uint64_t v7 = (uint64_t *)v5[12];
      while (v6 != v7)
      {
        std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::__emplace_hint_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a2, (void *)(a2 + 8), v6, v6);
        ++v6;
      }
    }
    ZinIrTensor::GetParentTensor(v3, &v8);
    uint64_t v3 = v8;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    BOOL v8 = (ZinIrTensor *)*((void *)v3 + 12);
    std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>((uint64_t **)a2, (uint64_t *)&v8, (uint64_t *)&v8);
  }
  return result;
}

std::string *CpTransposeUtils::LayerConstraint::LayerConstraint(std::string *a1, long long **a2, std::string::value_type a3, std::string::value_type a4, std::string::value_type a5, std::string::size_type a6, std::string::size_type a7, long long *a8)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)a1, *a2, a2[1], a2[1] - *a2);
  a1[1].__r_.__value_.__s.__data_[0] = a3;
  a1[1].__r_.__value_.__s.__data_[1] = a4;
  a1[1].__r_.__value_.__s.__data_[2] = a5;
  a1[1].__r_.__value_.__l.__size_ = a6;
  a1[1].__r_.__value_.__r.__words[2] = a7;
  uint64_t v15 = a1 + 2;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v16 = *a8;
    a1[2].__r_.__value_.__r.__words[2] = *((void *)a8 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  return a1;
}

void sub_2111E5A28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint const*,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,CpTransposeUtils::LayerConstraint const&,CpTransposeUtils::LayerConstraint*>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2111E5AA4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,CpTransposeUtils::LayerConstraint const&,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)a1, *(long long **)a2, *(long long **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  int v5 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2111E5B48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *CpTransposeUtils::LayerTruthTable::LayerTruthTable(std::string *a1, uint64_t *a2, long long *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<CpTransposeUtils::LayerConstraint>::__init_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(a1, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  int v5 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    a1[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2111E5CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<CpTransposeUtils::LayerConstraint>::__init_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ANEDebugInfo::DebugInfoInMem::TD>::__vallocate[abi:ne180100](result, a4);
    BOOL result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2111E5D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,CpTransposeUtils::LayerConstraint&,CpTransposeUtils::LayerConstraint*>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2111E5DC8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,CpTransposeUtils::LayerConstraint&,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,unsigned long>*,std::pair<unsigned long,unsigned long>*>((char *)a1, *(long long **)a2, *(long long **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  int v5 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2111E5E6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinIrTensorInfo>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    int v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (*((void *)v13 + 2) == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = (char *)operator new(0x90uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((void *)v13 + 2) = **a4;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *((void *)v13 + 17) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)uint64_t v13 = *v22;
LABEL_38:
    *uint64_t v22 = v13;
    goto LABEL_39;
  }
  *(void *)uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v23 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_2111E60F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<LayerAndUsageInfo>::set[abi:ne180100]<std::__wrap_iter<LayerAndUsageInfo const*>>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      std::__tree<LayerAndUsageInfo>::__emplace_hint_unique_key_args<LayerAndUsageInfo,LayerAndUsageInfo const&>((uint64_t **)a1, v4, v6, v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2111E6170(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<LayerAndUsageInfo>::__emplace_hint_unique_key_args<LayerAndUsageInfo,LayerAndUsageInfo const&>(uint64_t **a1, uint64_t *a2, _DWORD *a3, _OWORD *a4)
{
  long long v6 = std::__tree<LayerAndUsageInfo>::__find_equal<LayerAndUsageInfo>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<LayerAndUsageInfo>::__find_equal<LayerAndUsageInfo>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, _DWORD *a5)
{
  unint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !LayerAndUsageInfo::operator<(a5, (_DWORD *)a2 + 8))
  {
    if (!LayerAndUsageInfo::operator<((_DWORD *)a2 + 8, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (uint64_t *)a2[1];
      do
      {
        float v15 = v14;
        unint64_t v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = a2;
      do
      {
        float v15 = (uint64_t *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!LayerAndUsageInfo::operator<(a5, (_DWORD *)v15 + 8)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    int v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint8x8_t v11 = (uint64_t *)*a2;
  if (*a2)
  {
    do
    {
      int v12 = v11;
      uint8x8_t v11 = (uint64_t *)v11[1];
    }
    while (v11);
  }
  else
  {
    float v16 = a2;
    do
    {
      int v12 = (uint64_t *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      float v16 = v12;
    }
    while (v17);
  }
  if (LayerAndUsageInfo::operator<((_DWORD *)v12 + 8, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return std::__tree<LayerAndUsageInfo>::__find_equal<LayerAndUsageInfo>((uint64_t)a1, a3, a5);
}

void *std::__tree<LayerAndUsageInfo>::__find_equal<LayerAndUsageInfo>(uint64_t a1, void *a2, _DWORD *a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        unint64_t v8 = (_DWORD *)(v4 + 32);
        if (!LayerAndUsageInfo::operator<(a3, (_DWORD *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!LayerAndUsageInfo::operator<(v8, a3)) {
        break;
      }
      int v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

CpTransposeGraph *std::unique_ptr<CpTransposeGraph>::reset[abi:ne180100](CpTransposeGraph **a1, CpTransposeGraph *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    CpTransposeGraph::~CpTransposeGraph(result);
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

void std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C32FDC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32FDC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(ZinTensorFamilyUtil ***)(a1 + 8);
  if (ZinIrOpLayer::IsANELayer(*a3))
  {
    if (MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose(v4, v3))
    {
      v9[0] = 0;
      v9[376] = 0;
      MirOpt::CWTransposeUtil::ApplyCWTransposeToEngineLayer(v4, v3, (uint64_t)v9);
    }
  }
  else
  {
    int v5 = v4[86];
    long long v6 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v3 + 32))(v3, 0, 0);
    uint64_t RootTensor = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v5, v6);
    if (MirOpt::CWTransposeUtil::IsSelectedFromGlobalOptimizationForCWTranspose((MirOpt::CWTransposeUtil *)v4, RootTensor))
    {
      MirOpt::CWTransposeUtil::ApplyCWTransposeToNonEngineLayer((MirOpt::CWTransposeUtil *)v4, v3);
    }
  }
  return 0;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::MaterializeCWTranspose(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C32FE20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32FE20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8);
  if (ZinIrOpLayer::IsANELayer(*a3))
  {
    long long v25 = v3;
    uint64_t v5 = (uint64_t)(*((void *)v3 + 12) - *((void *)v3 + 11)) >> 3;
    uint64_t v6 = v5 - (*(unsigned int (**)(MirOpt *))(*(void *)v3 + 496))(v3);
    unsigned int v7 = (*(uint64_t (**)(MirOpt *))(*(void *)v3 + 120))(v3);
    char v24 = 1;
    BOOL v8 = v6 - (unint64_t)v7 > 1;
    BOOL v23 = v8;
    BOOL v22 = 1;
    if (ZinIrOpLayer::IsNELayer(v3))
    {
      Hal = ZinIrTarget::GetHal(v9, *(ZinIrTarget **)(*((void *)v3 + 2) + 160));
      (*(void (**)(uint64_t *))(*Hal + 16))(Hal);
      if (!*((void *)v3 + 33)) {
        operator new();
      }
      BOOL v13 = (*(uint64_t (**)(MirOpt *))(*(void *)v3 + 344))(v3) != 0x100000001 || v11 != 1;
      uint64_t v14 = (*(uint64_t (**)(MirOpt *, void, void))(*(void *)v3 + 32))(v3, 0, 0) + 48;
      uint64_t v15 = *(unsigned int *)((*(uint64_t (**)(MirOpt *, void, void))(*(void *)v3 + 32))(v3, 0, 0)
                            + 88);
      float v16 = ZinIrTarget::GetHal(*((uint64_t **)v3 + 2), *(ZinIrTarget **)(*((void *)v3 + 2) + 160));
      uint64_t v17 = (*(uint64_t (**)(uint64_t *))(*v16 + 16))(v16);
      char v18 = (*(uint64_t (**)(MirOpt *, uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(*(void *)v3 + 600))(v3, v14, v15, (uint64_t)v3 + 264, v17, v13);
      char v19 = 1;
    }
    else
    {
      MirOpt::GetPELayerTransposeAvailability(v3, (const ZinPELayer *)&v24, &v23, &v22, 0);
      char v19 = v24;
      BOOL v8 = v23;
      char v18 = v22;
    }
    BOOL v26 = (ZinEngineLayerMirInfo *)&v25;
    size_t v20 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const* const&>,std::tuple<>>(v4 + 576, &v25, (uint64_t)&std::piecewise_construct, (void **)&v26);
    v20[24] = v19;
    v20[25] = v8;
    v20[26] = v18;
  }
  return 0;
}

void sub_2111E69E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, ZinEngineLayerMirInfo *a12)
{
  if (a12) {
    std::__function::__func<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPETensorConstraint::Execute(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateTransposeAvailabilityMap(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void *std::__hash_table<std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,MirOpt::CWTransposeUtil::TransposeAvailability>>>::__emplace_unique_key_args<ZinANELayer const*,std::piecewise_construct_t const&,std::tuple<ZinANELayer const* const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    int v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      BOOL v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          BOOL v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  BOOL v13 = operator new(0x20uLL);
  *BOOL v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_WORD *)v13 + 12) = 0;
  *((unsigned char *)v13 + 26) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *BOOL v13 = *v22;
LABEL_38:
    *BOOL v22 = v13;
    goto LABEL_39;
  }
  *BOOL v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_2111E6CB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C387D38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C387D38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  unint64_t v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 8);
  if (ZinIrOpLayer::IsEngineLayer(*a3))
  {
    std::string v83 = 0;
    std::string v84 = 0;
    long long v85 = 0;
    uint64_t v80 = 0;
    std::string v81 = 0;
    unint64_t v82 = 0;
    uint64_t v6 = (void *)*((void *)v4 + 11);
    for (uint64_t i = (void *)*((void *)v4 + 12); v6 != i; ++v6)
    {
      unint64_t v8 = *(ZinTensorFamilyUtil **)(v5 + 688);
      unint64_t v9 = (const ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*v6 + 32))(*v6, 0, 0);
      uint64_t RootTensor = ZinTensorFamilyUtil::GetRootTensor(v8, v9);
      unint64_t v11 = *(void *)(RootTensor + 8);
      std::to_string(&v76, v11);
      int v12 = std::string::insert(&v76, 0, "T", 1uLL);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      unint64_t v14 = std::string::append(&v77, ":", 1uLL);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      unint64_t v18 = *(const std::string::value_type **)(RootTensor + 24);
      uint64_t v17 = RootTensor + 24;
      float v16 = v18;
      int v19 = *(char *)(v17 + 23);
      if (v19 >= 0) {
        size_t v20 = (const std::string::value_type *)v17;
      }
      else {
        size_t v20 = v16;
      }
      if (v19 >= 0) {
        std::string::size_type v21 = *(unsigned __int8 *)(v17 + 23);
      }
      else {
        std::string::size_type v21 = *(void *)(v17 + 8);
      }
      BOOL v22 = std::string::append(&v78, v20, v21);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      char v24 = v84;
      if (v84 >= v85)
      {
        BOOL v26 = v83;
        uint64_t v27 = v84 - v83;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = (char *)v85 - (char *)v83;
        if (((char *)v85 - (char *)v83) >> 2 > v28) {
          unint64_t v28 = v29 >> 2;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v85, v30);
          BOOL v26 = v83;
          char v24 = v84;
        }
        else
        {
          uint64_t v31 = 0;
        }
        std::string::size_type v32 = (unint64_t *)&v31[8 * v27];
        unint64_t *v32 = v11;
        long long v25 = v32 + 1;
        while (v24 != v26)
        {
          unint64_t v33 = *--v24;
          *--std::string::size_type v32 = v33;
        }
        std::string v83 = v32;
        std::string v84 = v25;
        long long v85 = (unint64_t *)&v31[8 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *std::string v84 = v11;
        long long v25 = v24 + 1;
      }
      std::string v84 = v25;
      std::string::size_type v34 = v81;
      if ((unint64_t)v81 >= v82)
      {
        std::string::size_type v36 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v80, (uint64_t)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v81, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v81->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
        }
        std::string::size_type v36 = v34 + 1;
      }
      std::string v81 = v36;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type v37 = *(ZinTensorFamilyUtil **)(v5 + 688);
    std::string::size_type v38 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v4 + 32))(v4, 0, 0);
    std::string::size_type v39 = (const ZinIrTensor *)ZinTensorFamilyUtil::GetRootTensor(v37, v38);
    unint64_t v40 = *((void *)v4 + 1);
    std::to_string(&v76, v40);
    std::string::size_type v41 = std::string::insert(&v76, 0, "L", 1uLL);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v43 = std::string::append(&v77, ":", 1uLL);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v47 = (const std::string::value_type *)*((void *)v4 + 3);
    std::string::size_type v46 = (char *)v4 + 24;
    std::string::size_type v45 = v47;
    int v48 = v46[23];
    if (v48 >= 0) {
      std::string::size_type v49 = v46;
    }
    else {
      std::string::size_type v49 = v45;
    }
    if (v48 >= 0) {
      std::string::size_type v50 = v46[23];
    }
    else {
      std::string::size_type v50 = *((void *)v46 + 1);
    }
    std::string::size_type v51 = std::string::append(&v78, v49, v50);
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    unint64_t v53 = *(void *)(ZinTensorFamilyUtil::GetRootTensor(*(ZinTensorFamilyUtil **)(v5 + 688), v39) + 8);
    std::to_string(&v75, v53);
    std::string::size_type v54 = std::string::insert(&v75, 0, "T", 1uLL);
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    unint64_t v56 = std::string::append(&v76, ":", 1uLL);
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    uint64_t v58 = ZinTensorFamilyUtil::GetRootTensor(*(ZinTensorFamilyUtil **)(v5 + 688), v39);
    std::string::size_type v61 = *(const std::string::value_type **)(v58 + 24);
    uint64_t v59 = v58 + 24;
    std::string::size_type v60 = v61;
    int v62 = *(char *)(v59 + 23);
    if (v62 >= 0) {
      uint64_t v63 = (const std::string::value_type *)v59;
    }
    else {
      uint64_t v63 = v60;
    }
    if (v62 >= 0) {
      std::string::size_type v64 = *(unsigned __int8 *)(v59 + 23);
    }
    else {
      std::string::size_type v64 = *(void *)(v59 + 8);
    }
    std::string v65 = std::string::append(&v77, v63, v64);
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    CpGraph::AddLayer(**(void **)(a1 + 16), v40, &__p, (uint64_t *)&v83, &v80, v53, &v78);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v83)
    {
      std::string v84 = v83;
      operator delete(v83);
    }
  }
  else
  {
    int v67 = *(_DWORD *)(*((void *)v4 + 8) + 8);
    if (v67 == 31)
    {
      std::string v71 = *(ZinTensorFamilyUtil **)(v5 + 688);
      std::string v72 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v4 + 32))(v4, 0, 0);
      uint64_t v73 = ZinTensorFamilyUtil::GetRootTensor(v71, v72);
      CpTransposeGraph::SetLiveOutTensor(**(CpTransposeGraph ***)(a1 + 16), *(void *)(v73 + 8));
    }
    else if (v67 == 28)
    {
      std::string v68 = *(ZinTensorFamilyUtil **)(v5 + 688);
      long long v69 = (const ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v4 + 32))(v4, 0, 0);
      uint64_t v70 = ZinTensorFamilyUtil::GetRootTensor(v68, v69);
      CpTransposeGraph::SetLiveInTensor(**(CpTransposeGraph ***)(a1 + 16), *(void *)(v70 + 8));
    }
  }
  return 0;
}

void sub_2111E7354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  a37 = (void *)(v42 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  long long v44 = *(void **)(v42 - 112);
  if (v44)
  {
    *(void *)(v42 - 104) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C387D90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C387D90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  unint64_t v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 8);
  if (ZinIrOpLayer::IsEngineLayer(*a3)) {
    MirOpt::CWTransposeUtil::CheckTransposableAndSetLayerTruthTable(v5, *(CpTransposeGraph ***)(a1 + 16), v4);
  }
  return 0;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C323328;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C323328;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, ZinIrOpLayer **a3)
{
  unint64_t v4 = *a3;
  uint64_t IsEngineLayer = ZinIrOpLayer::IsEngineLayer(*a3);
  if (IsEngineLayer) {
    MirOpt::CWTransposeUtil::UpdateTransposeFeasibility(IsEngineLayer, *(CpTransposeGraph ***)(a1 + 16), (uint64_t)v4);
  }
  return 0;
}

uint64_t std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2,std::allocator<MirOpt::CWTransposeUtil::CreateORToolsGraph(void)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void *std::__hash_table<BOOL,std::hash<BOOL>,std::equal_to<BOOL>,std::allocator<BOOL>>::__emplace_unique_key_args<BOOL,BOOL>(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    uint64_t v9 = v7 <= v6 ? *(void *)(a1 + 8) : 0;
    uint64_t v10 = v6 - v9;
    unint64_t v3 = v8.u32[0] <= 1uLL ? (v7 + 1) & v6 : v10;
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v6)
          {
            if (*((unsigned __int8 *)v12 + 16) == v6) {
              return v12;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v13 >= v7) {
                v13 %= v7;
              }
            }
            else
            {
              v13 &= v7 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  int v12 = operator new(0x18uLL);
  *int v12 = 0;
  v12[1] = v6;
  *((unsigned char *)v12 + 16) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 + 1) & v6;
    }
  }
  uint64_t v20 = *(void *)a1;
  std::string::size_type v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *int v12 = *v21;
LABEL_39:
    *std::string::size_type v21 = v12;
    goto LABEL_40;
  }
  *int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    std::string::size_type v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_2111E7904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void MirOpt::ReassignTensorDimension::OptimizePatchHeightForOutputReductionForPEEW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void MirOpt::ReassignTensorDimension::Execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void MirOpt::CWTransposeUtil::RunGlobalOptimizationForCWTranspose(uint8_t *buf, int a2, _DWORD *a3)
{
  *(_DWORD *)buf = 67109120;
  *a3 = a2;
  _os_log_debug_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "Global optimization region %d is trivial", buf, 8u);
}

{
  *(_DWORD *)buf = 67109120;
  *a3 = a2;
  _os_log_debug_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "Global optimization region %d uses solver", buf, 8u);
}

void MirOpt::CWTransposeUtil::CreateCpTransposeGraphDotFile(char *a1, uint8_t *buf, uint64_t a3)
{
  if (a1[23] >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(char **)a1;
  }
  *(_DWORD *)buf = 136315138;
  *(void *)(buf + 4) = v5;
  _os_log_debug_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  if (a1[23] < 0) {
    operator delete(*(void **)a1);
  }
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
}

void MirOpt::CWTransposeUtil::UpdateResultWithTrivialSolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t ZinViewLayerUtils::GetOffsetRemainderForViewAlongWidth(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  if (*(_DWORD *)(a1 + 92) != 4) {
    return 0;
  }
  uint64_t v9 = 0;
  if (ZinTensorFormatGetSizeInBytes(a2, &v9)) {
    ZinAssertImpl("Error in getting tensor format size in bytes");
  }
  if (*a4 == 1) {
    unint64_t v7 = (uint64_t *)(a3 + 416);
  }
  else {
    unint64_t v7 = (uint64_t *)(a3 + 528);
  }
  return *(int *)(a1 + 80) % (uint64_t)vcvtps_s32_f32((float)*v7 / (float)v9);
}

void ZinViewLayerUtils::CreateTransposeViewTransposeDecomposition(uint64_t a1, uint64_t *a2)
{
  v28[32] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 92) == 4)
  {
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v14, 4u, 2u, *(_DWORD *)(a1 + 68));
    int v22 = 21;
    long long v23 = &unk_26C345B80;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v24, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    }
    else {
      std::string v24 = v15;
    }
    int v25 = v16;
    memset(&v26, 0, sizeof(v26));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, v17, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
    long long v27 = v19;
    long long v23 = &unk_26C34F988;
    memset(v28, 0, 24);
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v28, __p, (uint64_t)v21, (v21 - (unsigned char *)__p) >> 3);
    float v14 = &unk_26C34F988;
    if (__p)
    {
      std::string::size_type v21 = __p;
      operator delete(__p);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(&v14);
    uint8x8_t v8 = &unk_26C345B80;
    if (*(char *)(a1 + 31) < 0) {
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    }
    else {
      std::string v9 = *(std::string *)(a1 + 8);
    }
    int v10 = *(_DWORD *)(a1 + 32);
    memset(&v11, 0, sizeof(v11));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, *(long long **)(a1 + 40), *(long long **)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
    long long v12 = *(_OWORD *)(a1 + 64);
    uint8x8_t v8 = &unk_26C34F860;
    long long v13 = *(_OWORD *)(a1 + 80);
    HIDWORD(v13) = 2;
    ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)&v14, (ZinIrInputViewUnitInfo *)&v8);
    unint64_t v4 = a2[1];
    if (v4 >= a2[2])
    {
      uint64_t v5 = (ZinViewLayerUtils::ViewDecomposedDesc *)std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a2, (const ZinViewLayerUtils::ViewDecomposedDesc *)&v22);
    }
    else
    {
      ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)a2[1], (const ZinViewLayerUtils::ViewDecomposedDesc *)&v22);
      uint64_t v5 = (ZinViewLayerUtils::ViewDecomposedDesc *)(v4 + 344);
      a2[1] = (uint64_t)v5;
    }
    a2[1] = (uint64_t)v5;
    if ((unint64_t)v5 >= a2[2])
    {
      unint64_t v6 = (ZinViewLayerUtils::ViewDecomposedDesc *)std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a2, (const ZinViewLayerUtils::ViewDecomposedDesc *)&v14);
    }
    else
    {
      ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v5, (const ZinViewLayerUtils::ViewDecomposedDesc *)&v14);
      unint64_t v6 = (ZinViewLayerUtils::ViewDecomposedDesc *)((char *)v5 + 344);
      a2[1] = (uint64_t)v6;
    }
    a2[1] = (uint64_t)v6;
    if ((unint64_t)v6 >= a2[2])
    {
      uint64_t v7 = std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a2, (const ZinViewLayerUtils::ViewDecomposedDesc *)&v22);
    }
    else
    {
      ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v6, (const ZinViewLayerUtils::ViewDecomposedDesc *)&v22);
      uint64_t v7 = (uint64_t)v6 + 344;
      a2[1] = (uint64_t)v6 + 344;
    }
    a2[1] = v7;
    ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)&v14);
    ZinIrUnitInfo::~ZinIrUnitInfo(&v8);
    ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)&v22);
  }
}

void sub_2111E7EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)&a65);
  _Unwind_Resume(a1);
}

uint64_t ZinViewLayerUtils::CreateViewDecomposition(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  int v36 = a7;
  int v37 = a2;
  std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*>(a6, 0, 0, 0);
  if (*(_DWORD *)(a1 + 92) != 4) {
    return 1;
  }
  int64_t OffsetRemainderForViewAlongWidth = ZinViewLayerUtils::GetOffsetRemainderForViewAlongWidth(a1, a2, *a5, &v36);
  if (ZinViewLayerUtils::DecomposeWidthViewFromOffsetRemainder(OffsetRemainderForViewAlongWidth, a5, &v37, a1, (uint64_t)a3, (uint64_t *)a6))
  {
    return 1;
  }
  uint64_t v15 = a3[4] * *a3 * a3[1] * a3[2];
  unint64_t v16 = ZinAlign(a3[3], *(void *)(*a5 + 416));
  uint64_t v17 = *a5;
  if (v15 * v16 > *(void *)(*a5 + 408)) {
    return 0;
  }
  v38[0] = 1;
  int64_t v18 = ZinViewLayerUtils::GetOffsetRemainderForViewAlongWidth(a1, a2, v17, v38);
  memset(&v21[1], 0, 24);
  int v22 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v25 = -1;
  v21[0] = &unk_26C349940;
  __int16 v26 = 0;
  uint64_t v27 = 1065353216;
  __int16 v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  uint64_t v31 = -1;
  uint64_t v32 = -1;
  char v33 = 0;
  uint64_t v34 = -1;
  uint64_t v35 = -1;
  ZinElementWiseLayerUtils::ElementWiseDecomposedDesc::ElementWiseDecomposedDesc((ZinElementWiseLayerUtils::ElementWiseDecomposedDesc *)v38, (ZinIrGOCUnitInfo *)v21);
  unint64_t v19 = *(void *)(a6 + 8);
  if (v19 >= *(void *)(a6 + 16))
  {
    uint64_t v20 = std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>((uint64_t *)a6, (const ZinViewLayerUtils::ViewDecomposedDesc *)v38);
  }
  else
  {
    ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(*(ZinViewLayerUtils::ViewDecomposedDesc **)(a6 + 8), (const ZinViewLayerUtils::ViewDecomposedDesc *)v38);
    uint64_t v20 = v19 + 344;
    *(void *)(a6 + 8) = v19 + 344;
  }
  *(void *)(a6 + 8) = v20;
  ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)v38);
  BOOL v13 = ZinViewLayerUtils::DecomposeWidthViewFromOffsetRemainder(v18, a5, &v37, a1, (uint64_t)a3, (uint64_t *)a6);
  ZinIrUnitInfo::~ZinIrUnitInfo(v21);
  return v13;
}

void sub_2111E8164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

BOOL ZinViewLayerUtils::DecomposeWidthViewFromOffsetRemainder(int64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v9 = *a2;
  if (!*(unsigned char *)(a2[1] + 492))
  {
    int64_t MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(v9, *a3);
    int v14 = *(_DWORD *)(a4 + 88);
    if (*(unsigned char *)(*a2 + 1327)) {
      BOOL v15 = v14 == 1;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15) {
      return 1;
    }
    if (*(unsigned char *)(a2[1] + 488)) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = MaxLogicalKernelWidthForLargeKernelMode <= a1;
    }
    if (!v16 && v14 == 1)
    {
      if ((a1 & 0x8000000000000000) == 0 && *(int *)(a4 + 80) >= a1)
      {
        if (a1)
        {
          int v18 = *a3;
          long long v55 = &unk_26C345B80;
          if (*(char *)(a4 + 31) < 0) {
            std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
          }
          else {
            std::string v56 = *(std::string *)(a4 + 8);
          }
          int v57 = *(_DWORD *)(a4 + 32);
          memset(&v58, 0, sizeof(v58));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v58, *(long long **)(a4 + 40), *(long long **)(a4 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 48) - *(void *)(a4 + 40)) >> 3));
          long long v59 = *(_OWORD *)(a4 + 64);
          long long v55 = &unk_26C34F860;
          long long v60 = *(_OWORD *)(a4 + 80);
          LODWORD(v60) = v60 - a1;
          DWORD1(v60) += a1;
          ZinMirPoolUtils::PoolDecomposedDesc::PoolDecomposedDesc((ZinMirPoolUtils::PoolDecomposedDesc *)buf, (ZinIrInputViewUnitInfo *)&v55);
          memset(&v28[1], 0, 24);
          int v29 = 0;
          long long v30 = 0u;
          long long v31 = 0u;
          int v34 = -1;
          uint64_t v35 = -1;
          int v36 = -1;
          uint64_t v37 = -1;
          *(_OWORD *)std::string::size_type v38 = 0u;
          long long v39 = 0u;
          long long __p = 0u;
          uint64_t v41 = 0;
          int v42 = 1;
          char v43 = 0;
          __int16 v44 = 0;
          int v45 = -1;
          uint64_t v46 = -1;
          int v47 = -1;
          uint64_t v48 = -1;
          uint64_t v49 = 0x3F80000000000006;
          int v50 = 0;
          v28[0] = &unk_26C34A9B8;
          *(void *)&long long v20 = 0x100000001;
          *((void *)&v20 + 1) = 0x100000001;
          *(_OWORD *)&v53[8] = v20;
          *(void *)&v53[24] = 0x100000001;
          memset(v54, 0, 24);
          *(_DWORD *)&v54[24] = 1;
          LODWORD(v51) = 1;
          DWORD2(v31) = v18;
          uint64_t v33 = 0x1E00000002;
          *((void *)&v52 + 1) = 1;
          *(void *)unint64_t v53 = 1;
          *((void *)&v51 + 1) = *(void *)(a5 + 8);
          *(void *)&long long v52 = a1 + 1;
          BYTE4(v51) = 1;
          uint64_t v32 = *((void *)&v51 + 1);
          int v61 = 1;
          ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&v62, (const ZinIrKernelUnitInfo *)v28);
          long long v21 = *(_OWORD *)v53;
          long long v22 = *(_OWORD *)v54;
          v23[18] = *(_OWORD *)&v53[16];
          v23[19] = v22;
          long long v64 = *(_OWORD *)&v54[12];
          long long v24 = v51;
          v23[16] = v52;
          v23[17] = v21;
          int v62 = &unk_26C34A9B8;
          long long v63 = v24;
          unint64_t v25 = a6[1];
          if (v25 >= a6[2])
          {
            __int16 v26 = (ZinViewLayerUtils::ViewDecomposedDesc *)std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a6, (const ZinViewLayerUtils::ViewDecomposedDesc *)buf);
          }
          else
          {
            ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)a6[1], (const ZinViewLayerUtils::ViewDecomposedDesc *)buf);
            __int16 v26 = (ZinViewLayerUtils::ViewDecomposedDesc *)(v25 + 344);
            a6[1] = (uint64_t)v26;
          }
          a6[1] = (uint64_t)v26;
          if ((unint64_t)v26 >= a6[2])
          {
            uint64_t v27 = std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(a6, (const ZinViewLayerUtils::ViewDecomposedDesc *)&v61);
          }
          else
          {
            ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v26, (const ZinViewLayerUtils::ViewDecomposedDesc *)&v61);
            uint64_t v27 = (uint64_t)v26 + 344;
            a6[1] = (uint64_t)v26 + 344;
          }
          a6[1] = v27;
          ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)&v61);
          v28[0] = &unk_26C34CC70;
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (v38[1])
          {
            *(void **)&long long v39 = v38[1];
            operator delete(v38[1]);
          }
          ZinIrUnitInfo::~ZinIrUnitInfo(v28);
          ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)buf);
          ZinIrUnitInfo::~ZinIrUnitInfo(&v55);
        }
        return 1;
      }
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Error in input view decomposition", buf, 2u);
    }
    else if (*(unsigned char *)(*a2 + 1880))
    {
      goto LABEL_3;
    }
    return 0;
  }
  if (!*(unsigned char *)(v9 + 1880)) {
    return 0;
  }
LABEL_3:
  ZinViewLayerUtils::CreateTransposeViewTransposeDecomposition(a4, a6);
  return 1;
}

void sub_2111E85C8(_Unwind_Exception *a1)
{
}

void sub_2111E861C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2111E8614);
}

void ZinViewLayerUtils::GetAxesOfView(ZinViewLayerUtils *this@<X0>, const ZinTensorDimensions *a2@<X1>, char **a3@<X8>)
{
  uint64_t v7 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((void *)this + 3) != *((void *)a2 + 3))
  {
    uint8x8_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), 1uLL);
    uint64_t v9 = *a3;
    int v10 = a3[1];
    long long v12 = &v8[4 * v11];
    *(_DWORD *)uint8x8_t v8 = 4;
    uint64_t v7 = v8 + 4;
    while (v10 != v9)
    {
      int v13 = *((_DWORD *)v10 - 1);
      v10 -= 4;
      *((_DWORD *)v8 - 1) = v13;
      v8 -= 4;
    }
    *a3 = v8;
    a3[1] = v7;
    a3[2] = v12;
    if (v9) {
      operator delete(v9);
    }
    a3[1] = v7;
  }
  if (*((void *)this + 2) != *((void *)a2 + 2))
  {
    unint64_t v14 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v14)
    {
      BOOL v16 = *a3;
      uint64_t v17 = (v7 - *a3) >> 2;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v14 - (void)v16;
      if (v19 >> 1 > v18) {
        unint64_t v18 = v19 >> 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        long long v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v20);
        BOOL v16 = *a3;
        uint64_t v7 = a3[1];
      }
      else
      {
        long long v21 = 0;
      }
      long long v22 = &v21[4 * v17];
      long long v23 = &v21[4 * v20];
      *(_DWORD *)long long v22 = 3;
      BOOL v15 = v22 + 4;
      while (v7 != v16)
      {
        int v24 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v22 - 1) = v24;
        v22 -= 4;
      }
      *a3 = v22;
      a3[1] = v15;
      a3[2] = v23;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v7 = 3;
      BOOL v15 = v7 + 4;
    }
    a3[1] = v15;
    uint64_t v7 = v15;
  }
  if (*((void *)this + 1) != *((void *)a2 + 1))
  {
    unint64_t v25 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v25)
    {
      uint64_t v27 = *a3;
      uint64_t v28 = (v7 - *a3) >> 2;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = v25 - (void)v27;
      if (v30 >> 1 > v29) {
        unint64_t v29 = v30 >> 1;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v31);
        uint64_t v27 = *a3;
        uint64_t v7 = a3[1];
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v33 = &v32[4 * v28];
      int v34 = &v32[4 * v31];
      *(_DWORD *)uint64_t v33 = 2;
      __int16 v26 = v33 + 4;
      while (v7 != v27)
      {
        int v35 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v33 - 1) = v35;
        v33 -= 4;
      }
      *a3 = v33;
      a3[1] = v26;
      a3[2] = v34;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v7 = 2;
      __int16 v26 = v7 + 4;
    }
    a3[1] = v26;
    uint64_t v7 = v26;
  }
  if (*((void *)this + 4) != *((void *)a2 + 4))
  {
    unint64_t v36 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v36)
    {
      std::string::size_type v38 = *a3;
      uint64_t v39 = (v7 - *a3) >> 2;
      unint64_t v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v41 = v36 - (void)v38;
      if (v41 >> 1 > v40) {
        unint64_t v40 = v41 >> 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42)
      {
        char v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v42);
        std::string::size_type v38 = *a3;
        uint64_t v7 = a3[1];
      }
      else
      {
        char v43 = 0;
      }
      __int16 v44 = &v43[4 * v39];
      int v45 = &v43[4 * v42];
      *(_DWORD *)__int16 v44 = 1;
      uint64_t v37 = v44 + 4;
      while (v7 != v38)
      {
        int v46 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }
      *a3 = v44;
      a3[1] = v37;
      a3[2] = v45;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v7 = 1;
      uint64_t v37 = v7 + 4;
    }
    a3[1] = v37;
    uint64_t v7 = v37;
  }
  if (*(void *)this != *(void *)a2)
  {
    unint64_t v47 = (unint64_t)a3[2];
    if ((unint64_t)v7 >= v47)
    {
      uint64_t v49 = *a3;
      uint64_t v50 = (v7 - *a3) >> 2;
      unint64_t v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 62) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v52 = v47 - (void)v49;
      if (v52 >> 1 > v51) {
        unint64_t v51 = v52 >> 1;
      }
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53)
      {
        std::string::size_type v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v53);
        uint64_t v49 = *a3;
        uint64_t v7 = a3[1];
      }
      else
      {
        std::string::size_type v54 = 0;
      }
      long long v55 = &v54[4 * v50];
      std::string v56 = &v54[4 * v53];
      *(_DWORD *)long long v55 = 0;
      uint64_t v48 = v55 + 4;
      while (v7 != v49)
      {
        int v57 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v55 - 1) = v57;
        v55 -= 4;
      }
      *a3 = v55;
      a3[1] = v48;
      a3[2] = v56;
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v7 = 0;
      uint64_t v48 = v7 + 4;
    }
    a3[1] = v48;
  }
}

void sub_2111E8A08(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinViewLayerUtils::CheckInterleaveCompatibility(uint64_t a1, unint64_t a2)
{
  return *(void *)(a1 + 8) % a2 == 0;
}

void ZinViewLayerUtils::GetSortedAxesByDimensionOrder(uint64_t *a1@<X0>, int **a2@<X1>, char **a3@<X8>)
{
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    int v13 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint8x8_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      int v10 = *v4;
      uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>(a1, *v4);
      uint64_t v12 = ValueAt;
      if (v8 >= v7)
      {
        uint64_t v14 = v8 - v9;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v7 - (char *)v9) >> 3 > v15) {
          unint64_t v15 = ((char *)v7 - (char *)v9) >> 3;
        }
        if ((unint64_t)((char *)v7 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          if (v16 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v17 = (char *)operator new(16 * v16);
        }
        else
        {
          uint64_t v17 = 0;
        }
        unint64_t v18 = &v17[16 * v14];
        *(_DWORD *)unint64_t v18 = v10;
        *((void *)v18 + 1) = v12;
        if (v8 == v9)
        {
          uint64_t v9 = (long long *)&v17[16 * v14];
        }
        else
        {
          uint64_t v19 = &v17[16 * v14];
          do
          {
            *((_OWORD *)v19 - 1) = *(v8 - 1);
            v19 -= 16;
            --v8;
          }
          while (v8 != v9);
          uint8x8_t v8 = v9;
          uint64_t v9 = (long long *)v19;
        }
        uint64_t v7 = (long long *)&v17[16 * v16];
        int v13 = (long long *)(v18 + 16);
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(_DWORD *)uint8x8_t v8 = v10;
        *((void *)v8 + 1) = ValueAt;
        int v13 = v8 + 1;
      }
      ++v4;
      uint8x8_t v8 = v13;
    }
    while (v4 != v5);
  }
  unint64_t v20 = v13 - v9;
  unint64_t v21 = 126 - 2 * __clz(v20);
  if (v13 == v9) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*,false>((unint64_t)v9, v13, v22, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v13 != v9)
  {
    long long v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = a3 + 2;
    if (v20 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v13 - v9;
    }
    do
    {
      uint64_t v27 = &v9[v24];
      if ((unint64_t)v23 >= *v25)
      {
        unint64_t v29 = *a3;
        uint64_t v30 = (v23 - *a3) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = *v25 - (void)v29;
        if (v32 >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)(a3 + 2), v33);
          unint64_t v29 = *a3;
          long long v23 = a3[1];
        }
        else
        {
          int v34 = 0;
        }
        int v35 = &v34[4 * v30];
        *(_DWORD *)int v35 = *(_DWORD *)v27;
        uint64_t v28 = v35 + 4;
        while (v23 != v29)
        {
          int v36 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        *a3 = v35;
        a3[1] = v28;
        a3[2] = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(_DWORD *)long long v23 = *(_DWORD *)v27;
        uint64_t v28 = v23 + 4;
      }
      a3[1] = v28;
      ++v24;
      long long v23 = v28;
    }
    while (v24 != v26);
  }
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_2111E8CF8(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void ZinViewLayerUtils::ComputeViewSpanSpaceRanges(ZinIrTensor *a1@<X0>, void *a2@<X1>, long long *i@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint8x8_t v8 = a1;
  v119[4] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(**((void **)a1 + 12) + 208))(v118);
  ZinIrTensor::GetParentTensor(v8, v99);
  uint64_t v9 = (ZinIrTensor *)v99[0];
  if (v99[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99[1]);
  }
  char v89 = a4;
  long long v115 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  unint64_t v114 = 0;
  if (v9)
  {
    std::string v88 = i;
    uint64_t v10 = 0;
    uint64_t DstDimension = 5;
    unint64_t v93 = 1;
    unint64_t v94 = -1;
    do
    {
      uint64_t v12 = v9;
      if (ZinIrTensor::IsView(v8))
      {
        (*(void (**)(void *__return_ptr))(**((void **)v8 + 12) + 208))(v99);
        std::string v91 = v9;
        (*(void (**)(long long *__return_ptr))(**((void **)v9 + 12) + 208))(&v106);
        ZinViewLayerUtils::GetAxesOfView((ZinViewLayerUtils *)v99, (const ZinTensorDimensions *)&v106, &v109);
        int v13 = (int *)v109;
        uint64_t v14 = (int *)v110;
        if (v109 != v110)
        {
          do
          {
            ZinIrTensor::GetMemorySharingInfo(v8, (uint64_t)v99);
            v108[0] = *(_OWORD *)&v99[5];
            v108[1] = *(_OWORD *)&v99[7];
            v108[2] = *(_OWORD *)&v99[9];
            long long v106 = *(_OWORD *)&v99[1];
            long long v107 = *(_OWORD *)&v99[3];
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v100 + 8, (void *)v101);
            uint64_t v15 = *((void *)v8 + 13);
            if (v15 && (unint64_t v16 = *(uint64_t **)(v15 + 40), v16 != *(uint64_t **)(v15 + 48)) && (v17 = *v16) != 0)
            {
              uint64_t v105 = *(void *)(v17 + 328);
              long long v18 = *(_OWORD *)(v17 + 312);
              *(_OWORD *)long long __p = *(_OWORD *)(v17 + 296);
              long long v104 = v18;
            }
            else
            {
              v119[3] = 0;
              ZinIrTensor::InferDescriptor(v8, (uint64_t)v119, (uint64_t)v99);
              *(_OWORD *)long long __p = v100;
              long long v104 = v101;
              uint64_t v105 = v102;
              std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100](v119);
            }
            uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)__p, *v13);
            uint64_t v20 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v108 + 1, *v13);
            uint64_t v21 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)&v106, *v13);
            if (v94 <= ValueAt)
            {
              if (v94 == ValueAt) {
                uint64_t v22 = v20;
              }
              else {
                uint64_t v22 = 1;
              }
              v93 *= v22;
            }
            else
            {
              uint64_t DstDimension = *v13;
              std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v115, v112, (uint64_t)v113, (v113 - v112) >> 3);
              unint64_t v93 = v20;
              unint64_t v94 = ValueAt;
            }
            v10 += ValueAt / v20 * v21;
            ++v13;
          }
          while (v13 != v14);
          int v13 = (int *)v109;
        }
        if (v13)
        {
          uint64_t v110 = (char *)v13;
          operator delete(v13);
        }
        uint64_t v12 = v91;
      }
      uint64_t v23 = *((void *)v8 + 12);
      if (*(_DWORD *)(*(void *)(v23 + 64) + 8) == 37)
      {
        uint64_t v24 = v113;
        if ((unint64_t)v113 >= v114)
        {
          uint64_t v26 = (v113 - v112) >> 3;
          if ((unint64_t)(v26 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = (uint64_t)(v114 - (void)v112) >> 2;
          if (v27 <= v26 + 1) {
            unint64_t v27 = v26 + 1;
          }
          if (v114 - (unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28) {
            unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v114, v28);
          }
          else {
            unint64_t v29 = 0;
          }
          uint64_t v30 = &v29[8 * v26];
          *(void *)uint64_t v30 = v23;
          unint64_t v25 = v30 + 8;
          uint64_t v32 = v112;
          unint64_t v31 = v113;
          if (v113 != v112)
          {
            do
            {
              uint64_t v33 = *((void *)v31 - 1);
              v31 -= 8;
              *((void *)v30 - 1) = v33;
              v30 -= 8;
            }
            while (v31 != v32);
            unint64_t v31 = v112;
          }
          uint64_t v112 = v30;
          uint64_t v113 = v25;
          unint64_t v114 = (unint64_t)&v29[8 * v28];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(void *)uint64_t v113 = v23;
          unint64_t v25 = v24 + 8;
        }
        uint64_t v113 = v25;
      }
      ZinIrTensor::GetParentTensor(v12, v99);
      uint64_t v9 = (ZinIrTensor *)v99[0];
      if (v99[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99[1]);
      }
      uint8x8_t v8 = v12;
    }
    while (v9);
    int v34 = v115;
    int v35 = v116;
    for (uint64_t i = v88; v34 != v35; ++v34)
    {
      uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*v34);
      uint64_t DstDimension = ZinIrTransposeInfo::GetDstDimension(ReshapeInfo, DstDimension);
    }
  }
  else
  {
    uint64_t v10 = 0;
    LODWORD(DstDimension) = 5;
    unint64_t v93 = 1;
    unint64_t v94 = -1;
  }
  long long v37 = i[1];
  long long v106 = *i;
  long long v107 = v37;
  *(void *)&v108[0] = *((void *)i + 4);
  uint64_t v38 = a2[22];
  if (v38 > 1 && (v38 + a2[7] - 1) / v38 == 1)
  {
    uint64_t v39 = a2[17] * v38;
    *((void *)&v106 + 1) = v39;
    unint64_t v40 = v94;
    if (DstDimension == 2) {
      unint64_t v40 = v39;
    }
    unint64_t v94 = v40;
  }
  uint64_t v41 = operator new(0x14uLL);
  v99[1] = v41 + 5;
  v99[2] = v41 + 5;
  v41[4] = 4;
  *(_OWORD *)uint64_t v41 = xmmword_211EFCE78;
  v99[0] = v41;
  ZinViewLayerUtils::GetSortedAxesByDimensionOrder((uint64_t *)&v106, (int **)v99, (char **)__p);
  operator delete(v41);
  long long v109 = 0;
  uint64_t v110 = 0;
  std::string v111 = 0;
  unint64_t v42 = (int *)__p[0];
  for (j = (int *)__p[1]; v42 != j; ++v42)
  {
    uint64_t v44 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v106, *v42);
    if (v44 >= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&v106, DstDimension))
    {
      int v45 = v110;
      if (v110 >= v111)
      {
        unint64_t v47 = v109;
        uint64_t v48 = (v110 - v109) >> 2;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = v111 - v109;
        if ((v111 - v109) >> 1 > v49) {
          unint64_t v49 = v50 >> 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v111, v51);
          unint64_t v47 = v109;
          int v45 = v110;
        }
        else
        {
          uint64_t v52 = 0;
        }
        unint64_t v53 = &v52[4 * v48];
        *(_DWORD *)unint64_t v53 = *v42;
        int v46 = v53 + 4;
        while (v45 != v47)
        {
          int v54 = *((_DWORD *)v45 - 1);
          v45 -= 4;
          *((_DWORD *)v53 - 1) = v54;
          v53 -= 4;
        }
        long long v109 = v53;
        uint64_t v110 = v46;
        std::string v111 = &v52[4 * v51];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v110 = *v42;
        int v46 = v45 + 4;
      }
      uint64_t v110 = v46;
    }
  }
  if (v89)
  {
    unint64_t v55 = a2[22];
    memset(v99, 0, 40);
    std::string v56 = (int *)v109;
    int v57 = (int *)v110;
    if (v109 == v110)
    {
      long long v92 = 0uLL;
      uint64_t v60 = 0;
      uint64_t v62 = 0;
      uint64_t v61 = 0;
    }
    else
    {
      do
      {
        int v58 = *v56;
        if (*v56 == 2)
        {
          unint64_t v59 = (v55 - 1 + v118[1]) / v55;
        }
        else
        {
          unint64_t v59 = GetValueAtDimension<ZinTensorDimensions>(v118, v58);
          int v58 = *v56;
        }
        if (SetValueAtDimension<ZinTensorPosition>(v99, v58, v59 - 1)) {
          ZinAssertImpl("Error");
        }
        ++v56;
      }
      while (v56 != v57);
      uint64_t v60 = v99[1];
      uint64_t v61 = v99[0];
      uint64_t v62 = v99[4];
      long long v92 = *(_OWORD *)&v99[2];
    }
    uint64_t v84 = *((void *)&v107 + 1);
    uint64_t v83 = *(void *)&v108[0];
    long long v85 = v106;
    uint64_t v86 = v107;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    std::string v87 = operator new(0x18uLL);
    a5[1] = v87 + 3;
    a5[2] = v87 + 3;
    void *v87 = v10;
    v87[1] = v10
           + v85 * v61
           + v83 * v62
           + *((void *)&v85 + 1) * v60
           + v86 * v92
           + v84 * *((void *)&v92 + 1)
           + v94 / v93;
    v87[2] = v85 * v61 + v83 * v62 + *((void *)&v85 + 1) * v60 + v86 * v92 + v84 * *((void *)&v92 + 1) + v94 / v93;
    *a5 = v87;
  }
  else
  {
    int v98 = 0;
    memset(v99, 0, 40);
    std::string v95 = 0;
    std::string v96 = 0;
    uint64_t v97 = 0;
    ZinViewLayerUtils::ComputeIntervals((uint64_t *)&v109, v118, &v106, v94, v93, a2[22], &v98, v10, v99, (uint64_t)&v95);
    long long v63 = (char **)a5;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    std::string v65 = v95;
    long long v64 = v96;
    if (v95 != v96)
    {
      uint64_t v66 = 0;
      int v67 = a5 + 2;
      do
      {
        uint64_t v70 = *v65;
        std::string v68 = v65 + 3;
        uint64_t v69 = v70;
        while (1)
        {
          uint64_t v71 = *(v68 - 2);
          if (v68 == v64) {
            break;
          }
          std::string v72 = v68 + 3;
          uint64_t v73 = *v68;
          v68 += 3;
          if (v71 != v73)
          {
            std::string v65 = v72 - 3;
            goto LABEL_88;
          }
        }
        std::string v65 = v64;
LABEL_88:
        uint64_t v74 = v71 - v69;
        if ((unint64_t)v66 >= *v67)
        {
          std::string v75 = *v63;
          unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((v66 - *v63) >> 3);
          unint64_t v77 = v76 + 1;
          if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*v67 - (void)v75) >> 3) > v77) {
            unint64_t v77 = 0x5555555555555556 * ((uint64_t)(*v67 - (void)v75) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v67 - (void)v75) >> 3) >= 0x555555555555555) {
            unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v78 = v77;
          }
          if (v78)
          {
            std::string v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v67, v78);
            std::string v75 = (char *)*a5;
            uint64_t v66 = (char *)a5[1];
          }
          else
          {
            std::string v79 = 0;
          }
          uint64_t v80 = &v79[24 * v76];
          *(void *)uint64_t v80 = v69;
          *((void *)v80 + 1) = v71;
          *((void *)v80 + 2) = v74;
          std::string v81 = v80;
          if (v66 == v75)
          {
            long long v63 = (char **)a5;
          }
          else
          {
            long long v63 = (char **)a5;
            do
            {
              long long v82 = *(_OWORD *)(v66 - 24);
              *((void *)v81 - 1) = *((void *)v66 - 1);
              *(_OWORD *)(v81 - 24) = v82;
              v81 -= 24;
              v66 -= 24;
            }
            while (v66 != v75);
            std::string v75 = (char *)*a5;
          }
          uint64_t v66 = v80 + 24;
          const std::string::value_type *v63 = v81;
          v63[1] = v80 + 24;
          v63[2] = &v79[24 * v78];
          if (v75) {
            operator delete(v75);
          }
        }
        else
        {
          *(void *)uint64_t v66 = v69;
          *((void *)v66 + 1) = v71;
          *((void *)v66 + 2) = v74;
          v66 += 24;
        }
        v63[1] = v66;
        long long v64 = v96;
      }
      while (v65 != v96);
      std::string v65 = v95;
    }
    if (v65)
    {
      std::string v96 = v65;
      operator delete(v65);
    }
  }
  if (v109)
  {
    uint64_t v110 = v109;
    operator delete(v109);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v112)
  {
    uint64_t v113 = v112;
    operator delete(v112);
  }
  if (v115)
  {
    uint64_t v116 = v115;
    operator delete(v115);
  }
}

void sub_2111E95DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  int v54 = *(void **)(v52 - 240);
  if (v54)
  {
    *(void *)(v52 - 232) = v54;
    operator delete(v54);
  }
  if (__p) {
    operator delete(__p);
  }
  unint64_t v55 = *(void **)(v52 - 216);
  if (v55)
  {
    *(void *)(v52 - 208) = v55;
    operator delete(v55);
  }
  std::string v56 = *(void **)(v52 - 192);
  if (v56)
  {
    *(void *)(v52 - 184) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(exception_object);
}

void ZinViewLayerUtils::ComputeIntervals(uint64_t *a1, uint64_t *a2, void *a3, unint64_t a4, unint64_t a5, unint64_t a6, int *a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v12 = a10;
  unint64_t v13 = *a7;
  uint64_t v14 = *a1;
  unint64_t v15 = (a1[1] - *a1) >> 2;
  if (v15 == v13)
  {
    uint64_t v16 = a8 + *a9 * *a3 + a9[4] * a3[4] + a9[1] * a3[1] + a9[2] * a3[2] + a9[3] * a3[3];
    unint64_t v17 = a4 / a5;
    unint64_t v18 = v16 + a4 / a5;
    unint64_t v19 = *(void *)(a10 + 16);
    uint64_t v20 = *(uint64_t **)(a10 + 8);
    if ((unint64_t)v20 >= v19)
    {
      uint64_t v30 = *(uint64_t **)a10;
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - *(void *)a10) >> 3);
      unint64_t v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)v30) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x555555555555555) {
        unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        int v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a10 + 16, v34);
        uint64_t v12 = a10;
        int v36 = v35;
        uint64_t v30 = *(uint64_t **)a10;
        uint64_t v20 = *(uint64_t **)(a10 + 8);
      }
      else
      {
        int v36 = 0;
      }
      uint64_t v38 = &v36[24 * v31];
      uint64_t v39 = &v36[24 * v34];
      *(void *)uint64_t v38 = v16;
      *((void *)v38 + 1) = v18;
      *((void *)v38 + 2) = v17;
      uint64_t v21 = v38 + 24;
      if (v20 != v30)
      {
        do
        {
          long long v40 = *(_OWORD *)(v20 - 3);
          *((void *)v38 - 1) = *(v20 - 1);
          *(_OWORD *)(v38 - 24) = v40;
          v38 -= 24;
          v20 -= 3;
        }
        while (v20 != v30);
        uint64_t v30 = *(uint64_t **)v12;
      }
      *(void *)uint64_t v12 = v38;
      *(void *)(v12 + 8) = v21;
      *(void *)(v12 + 16) = v39;
      if (v30)
      {
        uint64_t v41 = v12;
        operator delete(v30);
        uint64_t v12 = v41;
      }
    }
    else
    {
      *uint64_t v20 = v16;
      v20[1] = v18;
      uint64_t v21 = v20 + 3;
      v20[2] = v17;
    }
    *(void *)(v12 + 8) = v21;
    return;
  }
  *a7 = v13 + 1;
  if (v15 <= v13) {
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  }
  int v25 = *(_DWORD *)(v14 + 4 * v13);
  uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>(a2, v25);
  if (v25 == 2)
  {
    unint64_t v28 = a2;
    unint64_t v29 = (a6 + a2[1] - 1) / a6;
    if (!v29) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v29 = ValueAt;
    unint64_t v28 = a2;
    if (!ValueAt)
    {
LABEL_20:
      --*a7;
      return;
    }
  }
  uint64_t v37 = 0;
  while (!SetValueAtDimension<ZinTensorPosition>(a9, v25, v37))
  {
    ZinViewLayerUtils::ComputeIntervals(a1, v28, a3, a4, a5, a6, a7, a8, a9, a10);
    if (v29 == ++v37) {
      goto LABEL_20;
    }
  }
}

uint64_t ZinViewLayerUtils::CascadeMultiDimensionalViews(ZinViewLayerUtils *this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*((void *)a2 + 8) + 8) != 36) {
    return 0;
  }
  uint64_t v5 = (ZinIrOpLayer *)**((void **)a2 + 11);
  uint64_t v6 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0);
  long long v7 = *(_OWORD *)(v6 + 64);
  v59[0] = *(_OWORD *)(v6 + 48);
  v59[1] = v7;
  uint64_t v60 = *(void *)(v6 + 80);
  uint64_t v8 = (*(uint64_t (**)(ZinIrOpLayerGraph *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  long long v9 = *(_OWORD *)(v8 + 64);
  v57[0] = *(_OWORD *)(v8 + 48);
  v57[1] = v9;
  uint64_t v58 = *(void *)(v8 + 80);
  ZinViewLayerUtils::GetAxesOfView((ZinViewLayerUtils *)v59, (const ZinTensorDimensions *)v57, (char **)&v55);
  uint64_t v10 = (int *)v55;
  if ((unint64_t)((char *)v56 - (unsigned char *)v55) < 8)
  {
    uint64_t v11 = 0;
    if (!v55) {
      return v11;
    }
    goto LABEL_50;
  }
  uint64_t v12 = (*(uint64_t (**)(ZinIrOpLayerGraph *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  uint64_t v13 = v12;
  if (*(char *)(v12 + 47) >= 0) {
    size_t v14 = *(unsigned __int8 *)(v12 + 47);
  }
  else {
    size_t v14 = *(void *)(v12 + 32);
  }
  unint64_t v15 = v61;
  std::string::basic_string[abi:ne180100]((uint64_t)v61, v14 + 1);
  if (v61[23] < 0) {
    unint64_t v15 = *(unsigned char **)v61;
  }
  if (v14)
  {
    if (*(char *)(v13 + 47) >= 0) {
      uint64_t v16 = (const void *)(v13 + 24);
    }
    else {
      uint64_t v16 = *(const void **)(v13 + 24);
    }
    memmove(v15, v16, v14);
  }
  *(_WORD *)&v15[v14] = 95;
  std::string::basic_string[abi:ne180100]<0>(&v52, "cascaded_view");
  unint64_t v17 = std::string::append(&v52, "_xfm", 4uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v47.i64[0] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v46 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v47.i8[7] >= 0) {
    unint64_t v19 = v46;
  }
  else {
    unint64_t v19 = (void **)v46[0];
  }
  if (v47.i8[7] >= 0) {
    std::string::size_type v20 = v47.u8[7];
  }
  else {
    std::string::size_type v20 = (std::string::size_type)v46[1];
  }
  uint64_t v21 = std::string::append((std::string *)v61, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  *(void *)&long long v50 = *((void *)&v21->__r_.__value_.__l + 2);
  *(_OWORD *)long long __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v53, __p);
  if (SBYTE7(v50) < 0) {
    operator delete(__p[0]);
  }
  if (v47.i8[7] < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if ((v61[23] & 0x80000000) != 0) {
    operator delete(*(void **)v61);
  }
  *(void *)uint64_t v61 = a2;
  __p[0] = v61;
  __p[1] = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v52, __p);
  uint64_t v23 = (int *)v55;
  uint64_t v24 = v56;
  if (v55 == v56)
  {
    unint64_t v27 = v5;
LABEL_42:
    memset(v37, 0, sizeof(v37));
    int v38 = 1065353216;
    int v34 = ZinIrOpLayerGraph::MoveOutgoingEdges(this, (uint64_t **)a2, v27, v37);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v37);
    if (!v34 || !ZinIrOpLayerGraph::RemoveNode(this, a2, 0)) {
      ZinAssertImpl("View Creation Internal Error", *(_OWORD *)&v36);
    }
    uint64_t v11 = 0;
  }
  else
  {
    int64x2_t v36 = vdupq_n_s64(1uLL);
    while (1)
    {
      int v25 = *v23;
      uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v59, *v23);
      if (ValueAt != GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v57, v25)) {
        break;
      }
      unint64_t v27 = v5;
      if (++v23 == v24) {
        goto LABEL_42;
      }
    }
    uint64_t v28 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0);
    long long v29 = *(_OWORD *)(v28 + 64);
    *(_OWORD *)long long __p = *(_OWORD *)(v28 + 48);
    long long v50 = v29;
    uint64_t v51 = *(void *)(v28 + 80);
    uint64_t v62 = 0;
    memset(v61, 0, sizeof(v61));
    *(int64x2_t *)int v46 = v36;
    int64x2_t v47 = v36;
    uint64_t v30 = (uint64_t *)(*((void *)a2 + 8) + 16);
    uint64_t v48 = 1;
    uint64_t v31 = GetValueAtDimension<ZinTensorPosition>(v30, v25);
    if (!SetValueAtDimension<ZinTensorPosition>(v61, v25, v31))
    {
      uint64_t v32 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(*((void *)a2 + 8) + 56), v25);
      if (!SetValueAtDimension<ZinTensorDimensions>(v46, v25, v32))
      {
        uint64_t v33 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v57, v25);
        if (!SetValueAtDimension<ZinTensorDimensions>(__p, v25, v33))
        {
          ZinObjectNameFactory::CreateName((uint64_t)v53, 0, &v45);
          (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0);
          long long v39 = *(_OWORD *)v61;
          long long v40 = *(_OWORD *)&v61[16];
          uint64_t v41 = v62;
          long long v42 = *(_OWORD *)v46;
          int64x2_t v43 = v47;
          uint64_t v44 = v48;
          ZinBuilder::CreateView();
        }
      }
    }
    uint64_t v11 = 3;
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C359A08;
  if (v52.__r_.__value_.__l.__size_)
  {
    v52.__r_.__value_.__r.__words[2] = v52.__r_.__value_.__l.__size_;
    operator delete((void *)v52.__r_.__value_.__l.__size_);
  }
  v53[0] = &unk_26C34DA98;
  if (v54 < 0) {
    operator delete((void *)v53[1]);
  }
  uint64_t v10 = (int *)v55;
  if (v55)
  {
LABEL_50:
    std::string v56 = v10;
    operator delete(v10);
  }
  return v11;
}

void sub_2111E9F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56)
{
  a43 = &unk_26C359A08;
  if (__p)
  {
    a45 = (uint64_t)__p;
    operator delete(__p);
  }
  a47 = (uint64_t)&unk_26C34DA98;
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__push_back_slow_path<ZinViewLayerUtils::ViewDecomposedDesc const&>(uint64_t *a1, const ZinViewLayerUtils::ViewDecomposedDesc *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x5F417D05F417D0) {
    unint64_t v9 = 0xBE82FA0BE82FA0;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  size_t v14 = (ZinViewLayerUtils::ViewDecomposedDesc *)&v10[344 * v4];
  uint64_t v16 = &v10[344 * v9];
  ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v14, a2);
  unint64_t v15 = (char *)v14 + 344;
  std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ZinViewLayerUtils::ViewDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2111EA1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinViewLayerUtils::ViewDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

ZinViewLayerUtils::ViewDecomposedDesc *ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(ZinViewLayerUtils::ViewDecomposedDesc *this, const ZinViewLayerUtils::ViewDecomposedDesc *a2)
{
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 > 16)
  {
    if (v4 == 17)
    {
      *((void *)this + 1) = &unk_26C345B80;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long v11 = *((_OWORD *)a2 + 1);
        *((void *)this + 4) = *((void *)a2 + 4);
        *((_OWORD *)this + 1) = v11;
      }
      int v16 = *((_DWORD *)a2 + 10);
      *((void *)this + 6) = 0;
      *((_DWORD *)this + 10) = v16;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      *((void *)this + 1) = &unk_26C34F860;
      *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
    }
    else if (v4 == 21)
    {
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((ZinViewLayerUtils::ViewDecomposedDesc *)((char *)this + 8), (const ZinViewLayerUtils::ViewDecomposedDesc *)((char *)a2 + 8));
    }
  }
  else if (v4 == 1)
  {
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinViewLayerUtils::ViewDecomposedDesc *)((char *)this + 8), (const ZinViewLayerUtils::ViewDecomposedDesc *)((char *)a2 + 8));
    *((void *)this + 1) = &unk_26C34A9B8;
    long long v6 = *(_OWORD *)((char *)a2 + 248);
    v7[16] = *(_OWORD *)((char *)a2 + 264);
    *(_OWORD *)((char *)this + 248) = v6;
    long long v8 = *(_OWORD *)((char *)a2 + 280);
    long long v9 = *(_OWORD *)((char *)a2 + 296);
    long long v10 = *(_OWORD *)((char *)a2 + 312);
    *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
    v7[18] = v9;
    v7[19] = v10;
    v7[17] = v8;
  }
  else if (v4 == 8)
  {
    *((void *)this + 1) = &unk_26C345B80;
    if (*((char *)a2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
    }
    else
    {
      long long v5 = *((_OWORD *)a2 + 1);
      *((void *)this + 4) = *((void *)a2 + 4);
      *((_OWORD *)this + 1) = v5;
    }
    int v12 = *((_DWORD *)a2 + 10);
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 10) = v12;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
    *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 1) = &unk_26C349940;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
    long long v13 = *(_OWORD *)((char *)a2 + 104);
    long long v14 = *(_OWORD *)((char *)a2 + 120);
    long long v15 = *(_OWORD *)((char *)a2 + 136);
    *((void *)this + 19) = *((void *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v15;
    *(_OWORD *)((char *)this + 120) = v14;
    *(_OWORD *)((char *)this + 104) = v13;
  }
  return this;
}

void sub_2111EA40C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>,std::reverse_iterator<ZinViewLayerUtils::ViewDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    int v12 = (ZinViewLayerUtils::ViewDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc(v12, (const ZinViewLayerUtils::ViewDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinViewLayerUtils::ViewDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 344;
    ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(i - 344));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__vdeallocate((void **)a1);
    if (a4 > 0xBE82FA0BE82FA0) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5F417D05F417D06 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x5F417D05F417D0) {
      unint64_t v11 = 0xBE82FA0BE82FA0;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<LargeStrideConvPoolDecomposedDesc>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(v16 - 344));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_2111EA704(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2111EA70C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<ZinViewLayerUtils::ViewDecomposedDesc>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = v1;
    if (v3 != v1)
    {
      do
        ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(v3 - 344));
      while (v3 != v1);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinViewLayerUtils::ViewDecomposedDesc>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      ZinViewLayerUtils::ViewDecomposedDesc::ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(a4 + v7), (const ZinViewLayerUtils::ViewDecomposedDesc *)(a2 + v7));
      v7 += 344;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2111EA7D4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 344;
    do
    {
      ZinViewLayerUtils::ViewDecomposedDesc::~ViewDecomposedDesc((ZinViewLayerUtils::ViewDecomposedDesc *)(v4 + v2));
      v2 -= 344;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc const*,ZinViewLayerUtils::ViewDecomposedDesc*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      ZinViewLayerUtils::ViewDecomposedDesc::operator=(a3, v4);
      v4 += 344;
      a3 += 344;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t ZinViewLayerUtils::ViewDecomposedDesc::operator=(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (v4 > 16)
  {
    if (v4 == 17)
    {
      std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      if (a1 != a2) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), *(std::string **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
      }
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      goto LABEL_17;
    }
    if (v4 == 21)
    {
      std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      if (a1 != a2)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), *(std::string **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a1 + 88), *(char **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
      }
    }
  }
  else if (v4 == 1)
  {
    std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    if (a1 != a2)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), *(std::string **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      long long v8 = *(_OWORD *)(a2 + 88);
      long long v9 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v9;
      *(_OWORD *)(a1 + 88) = v8;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 136), *(char **)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 2);
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a1 + 160), *(char **)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 3);
    }
    long long v10 = *(_OWORD *)(a2 + 184);
    long long v11 = *(_OWORD *)(a2 + 200);
    long long v12 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 228);
    *(_OWORD *)(a1 + 216) = v12;
    *(_OWORD *)(a1 + 200) = v11;
    *(_OWORD *)(a1 + 184) = v10;
    long long v14 = *(_OWORD *)(a2 + 296);
    long long v13 = *(_OWORD *)(a2 + 312);
    long long v15 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
    *(_OWORD *)(a1 + 296) = v14;
    *(_OWORD *)(a1 + 312) = v13;
    *(_OWORD *)(a1 + 280) = v15;
    long long v16 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = v16;
  }
  else if (v4 == 8)
  {
    std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    if (a1 != a2) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), *(std::string **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
    }
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    long long v5 = *(_OWORD *)(a2 + 120);
    long long v6 = *(_OWORD *)(a2 + 136);
    uint64_t v7 = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 152) = v7;
    *(_OWORD *)(a1 + 136) = v6;
    *(_OWORD *)(a1 + 120) = v5;
LABEL_17:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*,false>(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*,0>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  int64_t v11 = a5->n128_i64[1];
  int64_t v12 = a4->n128_i64[1];
  BOOL v13 = v11 == v12;
  if (v11 < v12) {
    int v14 = -16777216;
  }
  else {
    int v14 = 0x1000000;
  }
  if (!v13
    || ((signed __int32)a5->n128_u32[0] < (signed __int32)a4->n128_u32[0] ? (int v14 = -16777216) : (int v14 = 0x1000000),
        a5->n128_u32[0] != a4->n128_u32[0]))
  {
    if (v14 >= 1)
    {
      __n128 result = *a4;
      *a4 = *a5;
      *a5 = result;
      int64_t v15 = a4->n128_i64[1];
      int64_t v16 = a3->n128_i64[1];
      BOOL v17 = v15 == v16;
      int v18 = v15 < v16 ? -16777216 : 0x1000000;
      if (!v17
        || ((signed __int32)a4->n128_u32[0] < (signed __int32)a3->n128_u32[0] ? (int v18 = -16777216) : (int v18 = 0x1000000),
            a4->n128_u32[0] != a3->n128_u32[0]))
      {
        if (v18 >= 1)
        {
          __n128 result = *a3;
          *a3 = *a4;
          *a4 = result;
          int64_t v19 = a3->n128_i64[1];
          int64_t v20 = a2->n128_i64[1];
          BOOL v21 = v19 == v20;
          int v22 = v19 < v20 ? -16777216 : 0x1000000;
          if (!v21
            || ((signed __int32)a3->n128_u32[0] < (signed __int32)a2->n128_u32[0]
              ? (int v22 = -16777216)
              : (int v22 = 0x1000000),
                a3->n128_u32[0] != a2->n128_u32[0]))
          {
            if (v22 >= 1)
            {
              __n128 result = *a2;
              *a2 = *a3;
              *a3 = result;
              int64_t v23 = a2->n128_i64[1];
              int64_t v24 = a1->n128_i64[1];
              BOOL v25 = v23 == v24;
              int v26 = v23 < v24 ? -16777216 : 0x1000000;
              if (!v25
                || ((signed __int32)a2->n128_u32[0] < (signed __int32)a1->n128_u32[0]
                  ? (int v26 = -16777216)
                  : (int v26 = 0x1000000),
                    a2->n128_u32[0] != a1->n128_u32[0]))
              {
                if (v26 >= 1)
                {
                  __n128 result = *a1;
                  *a1 = *a2;
                  *a2 = result;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>(long long *result, long long *a2, long long *a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = *((void *)result + 1);
  BOOL v5 = v3 == v4;
  if (v3 < v4) {
    int v6 = -16777216;
  }
  else {
    int v6 = 0x1000000;
  }
  if (v5
    && (*(_DWORD *)a2 < *(_DWORD *)result ? (int v6 = -16777216) : (int v6 = 0x1000000), *(_DWORD *)a2 == *(_DWORD *)result)
    || v6 <= 0)
  {
    uint64_t v11 = *((void *)a3 + 1);
    BOOL v12 = v11 == v3;
    if (v11 < v3) {
      int v13 = -16777216;
    }
    else {
      int v13 = 0x1000000;
    }
    if (!v12 || (*(_DWORD *)a3 < *(_DWORD *)a2 ? (int v13 = -16777216) : (int v13 = 0x1000000), *(_DWORD *)a3 != *(_DWORD *)a2))
    {
      if (v13 >= 1)
      {
        long long v14 = *a2;
        *a2 = *a3;
        *a3 = v14;
        uint64_t v15 = *((void *)a2 + 1);
        uint64_t v16 = *((void *)result + 1);
        BOOL v17 = v15 == v16;
        int v18 = v15 < v16 ? -16777216 : 0x1000000;
        if (!v17
          || (*(_DWORD *)a2 < *(_DWORD *)result ? (int v18 = -16777216) : (int v18 = 0x1000000),
              *(_DWORD *)a2 != *(_DWORD *)result))
        {
          if (v18 >= 1)
          {
            long long v19 = *result;
            void *result = *a2;
            *a2 = v19;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)a3 + 1);
    BOOL v8 = v7 == v3;
    if (v7 < v3) {
      int v9 = -16777216;
    }
    else {
      int v9 = 0x1000000;
    }
    if (!v8 || (*(_DWORD *)a3 < *(_DWORD *)a2 ? (int v9 = -16777216) : (int v9 = 0x1000000), *(_DWORD *)a3 != *(_DWORD *)a2))
    {
      if (v9 >= 1)
      {
        long long v10 = *result;
        void *result = *a3;
LABEL_54:
        *a3 = v10;
        return result;
      }
    }
    long long v20 = *result;
    void *result = *a2;
    *a2 = v20;
    uint64_t v21 = *((void *)a3 + 1);
    uint64_t v22 = *((void *)a2 + 1);
    BOOL v23 = v21 == v22;
    if (v21 < v22) {
      int v24 = -16777216;
    }
    else {
      int v24 = 0x1000000;
    }
    if (!v23 || (*(_DWORD *)a3 < *(_DWORD *)a2 ? (int v24 = -16777216) : (int v24 = 0x1000000), *(_DWORD *)a3 != *(_DWORD *)a2))
    {
      if (v24 >= 1)
      {
        long long v10 = *a2;
        *a2 = *a3;
        goto LABEL_54;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>(uint64_t a1, long long *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = a2 - 1;
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)(a1 + 8);
      BOOL v9 = v7 == v8;
      if (v7 < v8) {
        int v10 = -16777216;
      }
      else {
        int v10 = 0x1000000;
      }
      if (!v9
        || (*(_DWORD *)v6 < *(_DWORD *)a1 ? (int v10 = -16777216) : (int v10 = 0x1000000), *(_DWORD *)v6 != *(_DWORD *)a1))
      {
        if (v10 >= 1)
        {
          long long v11 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v6;
          *int v6 = v11;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>((long long *)a1, (long long *)(a1 + 16), a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*,0>((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      BOOL v12 = (long long *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>((long long *)a1, (long long *)(a1 + 16), (long long *)(a1 + 32));
      int v13 = (long long *)(a1 + 48);
      if ((long long *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    uint64_t v16 = *((void *)v13 + 1);
    uint64_t v17 = *((void *)v12 + 1);
    BOOL v18 = v16 == v17;
    int v19 = v16 < v17 ? -16777216 : 0x1000000;
    if (!v18
      || (*(_DWORD *)v13 < *(_DWORD *)v12 ? (int v19 = -16777216) : (int v19 = 0x1000000), *(_DWORD *)v13 != *(_DWORD *)v12))
    {
      if (v19 >= 1)
      {
        uint64_t v20 = *(void *)v13;
        int v21 = *(void *)v13;
        uint64_t v22 = v14;
        while (1)
        {
          uint64_t v23 = a1 + v22;
          *(_OWORD *)(a1 + v22 + 48) = *(_OWORD *)(a1 + v22 + 32);
          if (v22 == -32)
          {
            int v24 = (void *)a1;
            goto LABEL_40;
          }
          int v24 = v12;
          uint64_t v25 = *(void *)(v23 + 24);
          BOOL v26 = v16 == v25;
          int v27 = v16 < v25 ? -16777216 : 0x1000000;
          if (v26)
          {
            int v28 = *(_DWORD *)(v23 + 16);
            BOOL v29 = v21 == v28;
            int v27 = v21 < v28 ? -16777216 : 0x1000000;
            if (v29) {
              break;
            }
          }
          --v12;
          v22 -= 16;
          if (v27 <= 0) {
            goto LABEL_40;
          }
        }
        int v24 = (void *)(a1 + v22 + 32);
LABEL_40:
        *int v24 = v20;
        v24[1] = v16;
        if (++v15 == 8) {
          return v13 + 1 == a2;
        }
      }
    }
    BOOL v12 = v13;
    v14 += 16;
    if (++v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info> &,ZinViewLayerUtils::GetSortedAxesByDimensionOrder(ZinTensorDimensions const&,std::vector<ZinIrDimension> const&)::Info*>((long long *)a1, (long long *)a2, (long long *)a3);
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a3 + 8);
  BOOL v11 = v9 == v10;
  if (v9 < v10) {
    int v12 = -16777216;
  }
  else {
    int v12 = 0x1000000;
  }
  if (!v11 || (*(_DWORD *)a4 < *(_DWORD *)a3 ? (int v12 = -16777216) : (int v12 = 0x1000000), *(_DWORD *)a4 != *(_DWORD *)a3))
  {
    if (v12 >= 1)
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(__n128 *)a4 = result;
      uint64_t v13 = *(void *)(a3 + 8);
      uint64_t v14 = *(void *)(a2 + 8);
      BOOL v15 = v13 == v14;
      int v16 = v13 < v14 ? -16777216 : 0x1000000;
      if (!v15
        || (*(_DWORD *)a3 < *(_DWORD *)a2 ? (int v16 = -16777216) : (int v16 = 0x1000000), *(_DWORD *)a3 != *(_DWORD *)a2))
      {
        if (v16 >= 1)
        {
          __n128 result = *(__n128 *)a2;
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(__n128 *)a3 = result;
          uint64_t v17 = *(void *)(a2 + 8);
          uint64_t v18 = *(void *)(a1 + 8);
          BOOL v19 = v17 == v18;
          int v20 = v17 < v18 ? -16777216 : 0x1000000;
          if (!v19
            || (*(_DWORD *)a2 < *(_DWORD *)a1 ? (int v20 = -16777216) : (int v20 = 0x1000000), *(_DWORD *)a2 != *(_DWORD *)a1))
          {
            if (v20 >= 1)
            {
              __n128 result = *(__n128 *)a1;
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(__n128 *)a2 = result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ZinDeconvLargeStrides::ApplyStride4SamePadDecomposition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void **)(a1 + 200);
  uint64_t v8 = *(void *)(a1 + 208);
  if ((ZinConvLayer::HasLargeKernelStrides((ZinConvLayer *)v9) & 1) == 0) {
    ZinAssertImpl("Error: large kernel stride is not supported for lowering");
  }
  uint64_t v10 = **(void **)(a1 + 88);
  uint64_t v86 = *(void *)(a1 + 16);
  if (*((char *)v9 + 47) >= 0) {
    size_t v11 = *((unsigned __int8 *)v9 + 47);
  }
  else {
    size_t v11 = v9[4];
  }
  int v12 = &v125;
  std::string::basic_string[abi:ne180100]((uint64_t)&v125, v11 + 1);
  uint64_t v13 = v9 + 3;
  if (SBYTE7(v126) < 0) {
    int v12 = (long long *)v125;
  }
  if (v11)
  {
    if (*((char *)v9 + 47) >= 0) {
      uint64_t v14 = v9 + 3;
    }
    else {
      uint64_t v14 = (const void *)v9[3];
    }
    memmove(v12, v14, v11);
  }
  *(_WORD *)((char *)v12 + v11) = 95;
  BOOL v15 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v133, "lkss_s4");
  int v16 = std::string::append(v15, "_xfm", 4uLL);
  uint64_t DecomposedPartition = v10;
  long long v18 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(void *)&v110[16] = *((void *)&v16->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v110 = v18;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (v110[23] >= 0) {
    BOOL v19 = v110;
  }
  else {
    BOOL v19 = *(const std::string::value_type **)v110;
  }
  if (v110[23] >= 0) {
    std::string::size_type v20 = v110[23];
  }
  else {
    std::string::size_type v20 = *(void *)&v110[8];
  }
  int v21 = std::string::append((std::string *)&v125, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v90 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  __n128 v23 = ZinObjectNameFactory::ZinObjectNameFactory(v107, __p);
  if (SHIBYTE(v90) < 0) {
    operator delete(__p[0]);
  }
  if ((v110[23] & 0x80000000) != 0) {
    operator delete(*(void **)v110);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v126) < 0) {
    operator delete((void *)v125);
  }
  (*(void (**)(uint64_t *__return_ptr, void *, __n128))(*v9 + 136))(v102, v9, v23);
  if (v106)
  {
    uint64_t v24 = *a4;
    if (a4[1] != *a4)
    {
      uint64_t v25 = 0;
      if (v105 == 4) {
        int v26 = 2;
      }
      else {
        int v26 = 1;
      }
      if (v104 == 4) {
        char v27 = (v103 == 4) + 1;
      }
      else {
        char v27 = v103 == 4;
      }
      uint64_t v84 = (v26 << v27);
      do
      {
        ZinDeconvLargeStrides::DeconvStride4SamePad::DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)__p, (const ZinDeconvLargeStrides::DeconvStride4SamePad *)(v24 + 344 * v25));
        if (LODWORD(__p[0]) == 31)
        {
          (*(void (**)(long long *__return_ptr, uint64_t, void, void))(*(void *)DecomposedPartition + 80))(&v125, DecomposedPartition, 0, 0);
          uint64_t v55 = operator new(0x78uLL);
          *(void *)&v110[16] = v55 + 30;
          v55[28] = v132;
          long long v56 = v131;
          long long v57 = v129;
          *((_OWORD *)v55 + 5) = v130;
          *((_OWORD *)v55 + 6) = v56;
          long long v58 = v126;
          *(_OWORD *)uint64_t v55 = v125;
          *((_OWORD *)v55 + 1) = v58;
          long long v59 = v128;
          *((_OWORD *)v55 + 2) = v127;
          *((_OWORD *)v55 + 3) = v59;
          *((_OWORD *)v55 + 4) = v57;
          *(void *)uint64_t v110 = v55;
          *(void *)&v110[8] = v55 + 30;
          uint64_t v60 = *(void *)(a5 + 8);
          uint64_t v61 = (*(uint64_t (**)(void *, void, void))(*v9 + 32))(v9, 0, 0);
          ZinBuilder::CreatePixelShuffleLayer(v86, (uint64_t)v107, (uint64_t)v110, v60 - 40, *(unsigned int *)(v61 + 88), v91, v92);
        }
        if (LODWORD(__p[0]) != 1) {
          ZinAssertImpl("Error: the decomposed unit is unknown");
        }
        uint64_t v87 = DecomposedPartition;
        *((void *)&v129 + 1) = 0x100000001;
        DWORD1(v131) = 0;
        long long v125 = v95;
        *(void *)&long long v126 = v96;
        long long v128 = v99;
        *(void *)&long long v129 = v100;
        *((void *)&v126 + 1) = 0x100000001;
        LODWORD(v127) = 1;
        *(void *)((char *)&v127 + 4) = v97;
        HIDWORD(v127) = v98;
        LOBYTE(v131) = v93;
        BYTE1(v131) = 1;
        *((void *)&v130 + 1) = v94;
        LODWORD(v130) = 1;
        DWORD1(v130) = v101;
        if (*((char *)v9 + 47) >= 0) {
          size_t v28 = *((unsigned __int8 *)v9 + 47);
        }
        else {
          size_t v28 = v9[4];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v133, v28 + 1);
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v29 = &v133;
        }
        else {
          BOOL v29 = (std::string *)v133.__r_.__value_.__r.__words[0];
        }
        if (v28)
        {
          if (*((char *)v9 + 47) >= 0) {
            int v30 = v13;
          }
          else {
            int v30 = (const void *)v9[3];
          }
          memmove(v29, v30, v28);
        }
        *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v28) = 95;
        std::string::basic_string[abi:ne180100]<0>(&v124, "lkss_s2");
        BOOL v31 = std::string::append(&v124, "_xfm", 4uLL);
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v123 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v122 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (v123 >= 0) {
          uint64_t v33 = v122;
        }
        else {
          uint64_t v33 = (ZinIrKernel **)v122[0];
        }
        if (v123 >= 0) {
          std::string::size_type v34 = HIBYTE(v123);
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v122[1];
        }
        BOOL v35 = std::string::append(&v133, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        *(void *)&v110[16] = *((void *)&v35->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v110 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        __n128 v37 = ZinObjectNameFactory::ZinObjectNameFactory(v120, v110);
        if ((v110[23] & 0x80000000) != 0) {
          operator delete(*(void **)v110);
        }
        if (SHIBYTE(v123) < 0) {
          operator delete(v122[0]);
        }
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        (*(void (**)(std::string *__return_ptr, void *, __n128))(*v9 + 136))(&v133, v9, v37);
        if (v137)
        {
          uint64_t v39 = v134;
          uint64_t v38 = v135;
          uint64_t v40 = v136;
          int64_t v41 = v133.__r_.__value_.__l.__size_ + v135 - 1;
          int64_t v42 = (int64_t)(v133.__r_.__value_.__r.__words[2] + v40 - 1) % v40;
          uint64_t v43 = v39 - 1 - (int64_t)(v133.__r_.__value_.__r.__words[0] + v39 - 1) % v39;
          if (v39 - (int64_t)(v133.__r_.__value_.__r.__words[0] + v39 - 1) % v39 >= 0) {
            unint64_t v44 = v134 - (int64_t)(v133.__r_.__value_.__r.__words[0] + v134 - 1) % v134;
          }
          else {
            unint64_t v44 = v43 + 2;
          }
          unint64_t v45 = v44 >> 1;
          if (v43 < 0) {
            uint64_t v43 = v134 - (int64_t)(v133.__r_.__value_.__r.__words[0] + v134 - 1) % v134;
          }
          v119[0] = v45;
          v119[1] = (unint64_t)v43 >> 1;
          uint64_t v46 = v135 - 1 - v41 % v135;
          if (v135 - v41 % v135 >= 0) {
            unint64_t v47 = v135 - v41 % v135;
          }
          else {
            unint64_t v47 = v46 + 2;
          }
          unint64_t v48 = v47 >> 1;
          if (v46 < 0) {
            uint64_t v46 = v135 - v41 % v135;
          }
          v119[2] = v48;
          v119[3] = (unint64_t)v46 >> 1;
          uint64_t v49 = v136 - 1 - v42;
          if (v136 - v42 >= 0) {
            unint64_t v50 = v136 - v42;
          }
          else {
            unint64_t v50 = v49 + 2;
          }
          unint64_t v51 = v50 >> 1;
          if (v49 < 0) {
            uint64_t v49 = v136 - v42;
          }
          v119[4] = v51;
          v119[5] = (unint64_t)v49 >> 1;
          uint64_t v118 = 0;
          uint64_t v52 = v9[17];
          if (v52)
          {
            uint64_t v53 = *(void *)(v52 + 584);
            if (!v53)
            {
              if ((*(_DWORD *)(v52 + 176) - 28) <= 2)
              {
                if (!ZinIrKernel::HasZeroPoint((ZinIrKernel *)v52))
                {
                  int UnderlyingType = ZinKernelFormatGetUnderlyingType(*(_DWORD *)(v9[17] + 176));
                  ZinIrWeight::FillWeight(UnderlyingType, (uint64_t *)(v9[17] + 248), v110, 1.0);
                }
                ZinAssertImpl("Invalid configuration.");
              }
              uint64_t v53 = 0;
            }
          }
          else
          {
            uint64_t v53 = MEMORY[0x248];
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)v53 + 32))(v110, v53, v119, 1262703187, v52 + 592);
          uint64_t v62 = *(void *)v110;
          *(void *)uint64_t v110 = 0;
          uint64_t v63 = v118;
          uint64_t v118 = v62;
          if (v63)
          {
            (*(void (**)(uint64_t))(*(void *)v63 + 16))(v63);
            uint64_t v64 = *(void *)v110;
            *(void *)uint64_t v110 = 0;
            if (v64) {
              (*(void (**)(uint64_t))(*(void *)v64 + 16))(v64);
            }
          }
          ZinObjectNameFactory::CreateName((uint64_t)v120, 2u, (std::string *)v110);
          BOOL v65 = std::string::append((std::string *)v110, "_padded_kernel", 0xEuLL);
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          std::string::size_type v117 = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v116 = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          if ((v110[23] & 0x80000000) != 0) {
            operator delete(*(void **)v110);
          }
          uint64_t v115 = v131;
          long long v113 = v129;
          long long v114 = v130;
          *(_OWORD *)uint64_t v110 = v125;
          *(_OWORD *)&v110[16] = v126;
          long long v111 = v127;
          long long v112 = v128;
          BYTE1(v115) = 0;
          int64_t v67 = v133.__r_.__value_.__r.__words[0];
          if (v39 == 4) {
            int64_t v67 = (int64_t)(v133.__r_.__value_.__r.__words[0] + v39 - 1) / v39 * v39;
          }
          std::string::size_type size = v133.__r_.__value_.__l.__size_;
          if (v38 == 4) {
            std::string::size_type size = (int64_t)(v133.__r_.__value_.__l.__size_ + v38 - 1) / v38 * v38;
          }
          int64_t v69 = v133.__r_.__value_.__r.__words[2];
          if (v40 == 4) {
            int64_t v69 = (int64_t)(v133.__r_.__value_.__r.__words[2] + v40 - 1) / v40 * v40;
          }
          *(void *)uint64_t v110 = v67;
          *(void *)&v110[8] = size;
          *(void *)&v110[16] = v69;
          if (HIDWORD(v91) == 6) {
            int v70 = 4;
          }
          else {
            int v70 = *(_DWORD *)(v118 + 8);
          }
          int v109 = v70;
          v122[0] = 0;
          v124.__r_.__value_.__r.__words[0] = 0;
          std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat &,ZinIrConvInfo &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr)>();
        }
        BOOL v88 = 0;
        v120[0] = &unk_26C34DA98;
        if (v121 < 0) {
          operator delete((void *)v120[1]);
        }
        uint64_t v71 = v25;
        long long v72 = *(_OWORD *)((char *)v88 + 472);
        long long v125 = *(_OWORD *)((char *)v88 + 456);
        long long v126 = v72;
        *(void *)&long long v131 = *((void *)v88 + 69);
        long long v73 = *(_OWORD *)((char *)v88 + 520);
        long long v130 = *(_OWORD *)((char *)v88 + 536);
        long long v129 = v73;
        long long v74 = *(_OWORD *)((char *)v88 + 504);
        long long v127 = *(_OWORD *)((char *)v88 + 488);
        long long v128 = v74;
        uint64_t v75 = *(void *)((*(uint64_t (**)(void *, void, void))(*v9 + 32))(v9, 0, 0) + 56);
        int v76 = DWORD1(v127);
        int v77 = DWORD2(v127);
        uint64_t v78 = SHIDWORD(v127);
        uint64_t v79 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v87 + 32))(v87, 0, 0);
        v133.__r_.__value_.__r.__words[0] = 0x100000001;
        LODWORD(v133.__r_.__value_.__r.__words[1]) = 1;
        ZinGetOutputTensorDimension(v79 + 48, &v125, (unsigned int *)&v126 + 2, (unsigned int *)&v127 + 1, (int *)&v128, v75 * v77 * (uint64_t)v76 * v78, (int *)&v133, (uint64_t)v110);
        uint64_t v13 = v9 + 3;
        if (!ZinTensorDimensions::IsValid((ZinTensorDimensions *)v110)) {
          ZinAssertImpl("Invalid output dimension");
        }
        if (v8 && (uint64_t v80 = *(void *)(v8 + 136)) != 0)
        {
          ZinObjectNameFactory::CreateName((uint64_t)v107, 2u, &v133);
          ZinIrKernel::DuplicateChannels(v80, v84, v122);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v122[0] = 0;
        }
        uint64_t DecomposedPartition = ZinConvCompositeLayer::CreateDecomposedPartition(a1, (uint64_t)&v88, (uint64_t)v122, 0, 0, (uint64_t)v110, v86, a2, (uint64_t)v107);
        if (!DecomposedPartition) {
          ZinAssertImpl("Unexpected null partition!!!");
        }
        int v81 = v122[0];
        v122[0] = 0;
        if (v81)
        {
          ZinIrKernel::~ZinIrKernel(v81);
          MEMORY[0x21667D3C0]();
        }
        uint64_t v82 = v88;
        BOOL v88 = 0;
        if (v82)
        {
          ZinIrKernel::~ZinIrKernel(v82);
          MEMORY[0x21667D3C0]();
        }
        ZinDeconvLargeStrides::DeconvStride4SamePad::~DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)__p);
        uint64_t v25 = v71 + 1;
        uint64_t v24 = *a4;
      }
      while (0x82FA0BE82FA0BE83 * ((a4[1] - *a4) >> 3) > v71 + 1);
    }
    ZinAssertImpl("Error: decomposition of Deconv with large stride fails. A pixel shuffle unit is expected");
  }
  v107[0] = &unk_26C34DA98;
  if (v108 < 0) {
    operator delete((void *)v107[1]);
  }
  return 3;
}

void sub_2111ECA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  STACK[0x308] = (unint64_t)&unk_26C34DA98;
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  _Unwind_Resume(a1);
}

ZinDeconvLargeStrides::DeconvStride3And4 *ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(ZinDeconvLargeStrides::DeconvStride3And4 *this, ZinIrConcatUnitInfo *a2)
{
  *(_DWORD *)this = 3;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C34C998;
  int v6 = *((_DWORD *)a2 + 20);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 84);
  *((_DWORD *)this + 22) = v6;
  return this;
}

void sub_2111ECE9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ZinDeconvLargeStrides::DeconvStride3And4 *ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(ZinDeconvLargeStrides::DeconvStride3And4 *this, ZinIrInputViewUnitInfo *a2)
{
  *(_DWORD *)this = 17;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C34F860;
  *(_OWORD *)((char *)this + 88) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_2111ECF9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4(ZinDeconvLargeStrides::DeconvStride3And4 *this)
{
  int v2 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = (void **)((char *)this + 8);
    *((void *)this + 1) = &unk_26C34CC70;
    long long v4 = (void *)*((void *)this + 20);
    if (v4)
    {
      *((void *)this + 21) = v4;
      operator delete(v4);
    }
    int v5 = (void *)*((void *)this + 17);
    if (v5)
    {
      *((void *)this + 18) = v5;
      operator delete(v5);
    }
    goto LABEL_9;
  }
  if (v2 == 17 || v2 == 3)
  {
    uint64_t v3 = (void **)((char *)this + 8);
LABEL_9:
    ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  }
}

ZinDeconvLargeStrides::DeconvStride3And4 *ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(ZinDeconvLargeStrides::DeconvStride3And4 *this, const ZinDeconvLargeStrides::DeconvStride3And4 *a2)
{
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  switch(v4)
  {
    case 1:
      ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinDeconvLargeStrides::DeconvStride3And4 *)((char *)this + 8), (const ZinDeconvLargeStrides::DeconvStride3And4 *)((char *)a2 + 8));
      *((void *)this + 1) = &unk_26C34A9B8;
      long long v6 = *(_OWORD *)((char *)a2 + 248);
      v7[16] = *(_OWORD *)((char *)a2 + 264);
      *(_OWORD *)((char *)this + 248) = v6;
      long long v8 = *(_OWORD *)((char *)a2 + 280);
      long long v9 = *(_OWORD *)((char *)a2 + 296);
      long long v10 = *(_OWORD *)((char *)a2 + 312);
      *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
      v7[18] = v9;
      v7[19] = v10;
      v7[17] = v8;
      break;
    case 17:
      *((void *)this + 1) = &unk_26C345B80;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long v11 = *((_OWORD *)a2 + 1);
        *((void *)this + 4) = *((void *)a2 + 4);
        *((_OWORD *)this + 1) = v11;
      }
      int v14 = *((_DWORD *)a2 + 10);
      *((void *)this + 6) = 0;
      *((_DWORD *)this + 10) = v14;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      *((void *)this + 1) = &unk_26C34F860;
      *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
      break;
    case 3:
      *((void *)this + 1) = &unk_26C345B80;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long v5 = *((_OWORD *)a2 + 1);
        *((void *)this + 4) = *((void *)a2 + 4);
        *((_OWORD *)this + 1) = v5;
      }
      int v12 = *((_DWORD *)a2 + 10);
      *((void *)this + 6) = 0;
      *((_DWORD *)this + 10) = v12;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      *((void *)this + 1) = &unk_26C34C998;
      int v13 = *((_DWORD *)a2 + 22);
      *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
      *((_DWORD *)this + 22) = v13;
      break;
  }
  return this;
}

void sub_2111ED260(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(uint64_t a1, void *a2, int a3, uint64_t a4, int a5, uint64_t a6, char **a7, uint64_t *a8)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  uint64_t v13 = *a8;
  for (uint64_t i = a8[1];
        i != v13;
  a8[1] = v13;
  int v14 = *a7;
  a7[1] = *a7;
  uint64_t v16 = (uint64_t)(a7 + 2);
  unint64_t v15 = (unint64_t)a7[2];
  if ((unint64_t)v14 >= v15)
  {
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - (void)v14) >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= 1) {
      uint64_t v21 = 1;
    }
    if (v20 >= 0x333333333333333) {
      unint64_t v22 = 0x666666666666666;
    }
    else {
      unint64_t v22 = v21;
    }
    __n128 v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a7 + 2), v22);
    uint64_t v25 = &v23[40 * v24];
    long long v26 = *(_OWORD *)a1;
    long long v27 = *(_OWORD *)(a1 + 16);
    *((void *)v23 + 4) = *(void *)(a1 + 32);
    *(_OWORD *)__n128 v23 = v26;
    *((_OWORD *)v23 + 1) = v27;
    BOOL v19 = v23 + 40;
    BOOL v29 = *a7;
    size_t v28 = a7[1];
    if (v28 != *a7)
    {
      do
      {
        long long v30 = *(_OWORD *)(v28 - 40);
        long long v31 = *(_OWORD *)(v28 - 24);
        *((void *)v23 - 1) = *((void *)v28 - 1);
        *(_OWORD *)(v23 - 24) = v31;
        *(_OWORD *)(v23 - 40) = v30;
        v23 -= 40;
        v28 -= 40;
      }
      while (v28 != v29);
      size_t v28 = *a7;
    }
    *a7 = v23;
    a7[1] = v19;
    a7[2] = v25;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    long long v17 = *(_OWORD *)a1;
    long long v18 = *(_OWORD *)(a1 + 16);
    *((void *)v14 + 4) = *(void *)(a1 + 32);
    *(_OWORD *)int v14 = v17;
    *((_OWORD *)v14 + 1) = v18;
    BOOL v19 = v14 + 40;
  }
  a7[1] = v19;
  if ((*(unsigned char *)(a4 + 272) & 0x40) == 0) {
    ZinAssertImpl("Error: only deconv is supported");
  }
  int v32 = *(_DWORD *)(a4 + 168);
  uint64_t v167 = *(int *)(a4 + 164);
  if ((int)v167 <= 2 && v32 <= 2) {
    ZinAssertImpl("Error: deconv does not have large kernel stride in width or height axis");
  }
  if (*(_DWORD *)(a4 + 172) != 1) {
    ZinAssertImpl("Error: deconv with stride > 1 is not supported along depth axis");
  }
  if (*(void *)(a4 + 104) != 1) {
    ZinAssertImpl("Error: deconv with stride > 2 does not support kernel depth > 1");
  }
  if (*(_DWORD *)(a4 + 208) != 1 || *(_DWORD *)(a4 + 212) != 1 || *(_DWORD *)(a4 + 216) != 1) {
    ZinAssertImpl("Dilation factor should be 1 for Deconv with stride > 2");
  }
  uint64_t v33 = v32;
  uint64_t v34 = a2[2];
  uint64_t v35 = a2[3];
  uint64_t v36 = *(int *)(a4 + 164);
  uint64_t v37 = v167 - v35 % v167;
  if (v35 % v167) {
    int v38 = v167 - v35 % v167;
  }
  else {
    int v38 = 0;
  }
  if (!(v35 % v167)) {
    uint64_t v37 = 0;
  }
  uint64_t v39 = v33 - v34 % v33;
  if (v34 % v33) {
    int v40 = v33 - v34 % v33;
  }
  else {
    int v40 = 0;
  }
  if (!(v34 % v33)) {
    uint64_t v39 = 0;
  }
  if ((int)v33 >= 1)
  {
    BOOL v148 = a2;
    uint64_t v149 = (uint64_t)(a7 + 2);
    int v41 = 0;
    uint64_t v161 = a2[4];
    uint64_t v162 = *a2;
    int v168 = *(_DWORD *)(a4 + 184);
    int v160 = *(_DWORD *)(a4 + 192);
    int v159 = *(_DWORD *)(a4 + 196);
    int v151 = *(_DWORD *)(a4 + 200);
    uint64_t v150 = *(void *)(a4 + 224);
    int v42 = *(_DWORD *)(a4 + 176);
    int v158 = v38 + *(_DWORD *)(a4 + 180);
    uint64_t v43 = v35 + v37;
    int v157 = v40 + *(_DWORD *)(a4 + 188);
    uint64_t v163 = *(void *)(a4 + 88);
    int v44 = v167 + ~(v42 % (int)v167);
    uint64_t v156 = *(void *)(a4 + 96) + v44;
    int v155 = v44 + v42;
    *((void *)&v153 + 1) = v43 / v167;
    uint64_t v154 = a2[1] * v167;
    uint64_t v152 = a2[1];
    *(void *)&long long v153 = (v34 + v39) / v33;
    uint64_t v45 = *(int *)(a4 + 164);
    do
    {
      uint64_t v176 = 0;
      uint64_t v177 = 0;
      int v179 = 0;
      uint64_t v178 = 0;
      long long v180 = 0u;
      long long v181 = 0u;
      uint64_t v183 = 0;
      LODWORD(v184) = -1;
      uint64_t v185 = -1;
      int v186 = -1;
      uint64_t v187 = -1;
      long long v188 = 0u;
      long long v189 = 0u;
      long long __p = 0u;
      uint64_t v191 = 0;
      int v192 = 1;
      char v193 = 0;
      __int16 v194 = 0;
      int v195 = -1;
      uint64_t v196 = -1;
      int v197 = -1;
      uint64_t v198 = -1;
      uint64_t v199 = 0x3F80000000000006;
      uint64_t v182 = -1;
      int v175 = &unk_26C34A9B8;
      v201[4] = 0;
      *(int64x2_t *)&v201[8] = vdupq_n_s64(1uLL);
      memset(v202, 0, 24);
      *(_DWORD *)&v202[24] = 1;
      int v200 = 0;
      *(_DWORD *)uint64_t v201 = 1;
      *(void *)&long long v46 = 0x100000001;
      *((void *)&v46 + 1) = 0x100000001;
      *(_OWORD *)&v201[24] = *(_OWORD *)&v201[8];
      *(_OWORD *)&v201[40] = v46;
      *(void *)&v201[56] = 0x100000001;
      int AbsMod = GetAbsMod(-v156, v45);
      int v48 = v33 + ~(v168 % (int)v33);
      uint64_t v49 = v163 + v48;
      int v50 = GetAbsMod(-v49, v33);
      int v51 = GetAbsMod(-1, 1);
      uint64_t v52 = v49 + v50;
      uint64_t v45 = v167;
      *(void *)&v201[16] = (v156 + AbsMod) / v167;
      *(void *)&v201[24] = v52 / v33;
      *(void *)&v201[32] = v51 + 1;
      *(_DWORD *)uint64_t v202 = v155 / (int)v167;
      *(_DWORD *)&v202[4] = (v158 + AbsMod) / (int)v167;
      *(_DWORD *)&v202[8] = (v48 + v168) / (int)v33;
      *(_DWORD *)&v202[12] = (v157 + v50) / (int)v33;
      *(_DWORD *)&v202[16] = v160;
      *(_DWORD *)&v202[20] = v51 + v159;
      long long v173 = v153;
      uint64_t v174 = v161;
      *(void *)&long long v172 = v162;
      *((void *)&v172 + 1) = v154;
      *(void *)&long long v203 = 0x100000001;
      DWORD2(v203) = 1;
      uint64_t v169 = 0x100000001;
      int v170 = 1;
      ZinGetOutputTensorDimension(a1, &v201[16], (unsigned int *)&v201[52], (unsigned int *)&v203, (int *)v202, v154, (int *)&v169, (uint64_t)v171);
      if (!ZinTensorDimensionsEqual(v171, &v172)) {
        ZinAssertImpl("Error: large kernel stride decomposition fails");
      }
      HIDWORD(v183) = a5;
      uint64_t v182 = v152 * *(int *)&v201[52];
      *(void *)&v201[8] = v150;
      *(_DWORD *)&v202[24] = v151;
      DWORD2(v181) = a3;
      unint64_t v53 = (unint64_t)a7[1];
      unint64_t v54 = (unint64_t)a7[2];
      if (v53 >= v54)
      {
        unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - (void)*a7) >> 3);
        unint64_t v59 = v58 + 1;
        if (v58 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - (void)*a7) >> 3);
        if (2 * v60 > v59) {
          unint64_t v59 = 2 * v60;
        }
        if (v60 >= 0x333333333333333) {
          unint64_t v61 = 0x666666666666666;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61) {
          uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v149, v61);
        }
        else {
          uint64_t v62 = 0;
        }
        uint64_t v63 = &v62[40 * v58];
        long long v64 = v172;
        long long v65 = v173;
        *((void *)v63 + 4) = v174;
        *(_OWORD *)uint64_t v63 = v64;
        *((_OWORD *)v63 + 1) = v65;
        int64_t v67 = *a7;
        long long v66 = a7[1];
        std::string v68 = v63;
        if (v66 == *a7)
        {
          uint64_t v71 = a7;
        }
        else
        {
          do
          {
            long long v69 = *(_OWORD *)(v66 - 40);
            long long v70 = *(_OWORD *)(v66 - 24);
            *((void *)v68 - 1) = *((void *)v66 - 1);
            *(_OWORD *)(v68 - 24) = v70;
            *(_OWORD *)(v68 - 40) = v69;
            v68 -= 40;
            v66 -= 40;
          }
          while (v66 != v67);
          uint64_t v71 = a7;
          long long v66 = *a7;
        }
        long long v57 = v63 + 40;
        ZinTensorFamilyUtil *v71 = v68;
        v71[1] = v63 + 40;
        v71[2] = &v62[40 * v61];
        if (v66) {
          operator delete(v66);
        }
      }
      else
      {
        long long v55 = v172;
        long long v56 = v173;
        *(void *)(v53 + 32) = v174;
        *(_OWORD *)unint64_t v53 = v55;
        *(_OWORD *)(v53 + 16) = v56;
        long long v57 = (char *)(v53 + 40);
      }
      a7[1] = v57;
      LODWORD(v203) = 1;
      ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)((char *)&v203 + 8), (const ZinIrKernelUnitInfo *)&v175);
      *((void *)&v203 + 1) = &unk_26C34A9B8;
      long long v207 = *(_OWORD *)&v201[32];
      long long v208 = *(_OWORD *)&v201[48];
      v209[0] = *(_OWORD *)v202;
      *(_OWORD *)((char *)v209 + 12) = *(_OWORD *)&v202[12];
      long long v205 = *(_OWORD *)v201;
      long long v206 = *(_OWORD *)&v201[16];
      unint64_t v72 = a8[1];
      if (v72 >= a8[2])
      {
        uint64_t v73 = std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(a8, (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
        long long v74 = a8;
      }
      else
      {
        ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)a8[1], (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
        uint64_t v73 = v72 + 344;
        long long v74 = a8;
        a8[1] = v72 + 344;
      }
      v74[1] = v73;
      ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
      int v175 = &unk_26C34CC70;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (*((void *)&v188 + 1))
      {
        *(void *)&long long v189 = *((void *)&v188 + 1);
        operator delete(*((void **)&v188 + 1));
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(&v175);
      ++v41;
    }
    while (v41 != v33);
    uint64_t v36 = v167;
    a2 = v148;
    uint64_t v16 = (uint64_t)(a7 + 2);
    if ((int)v33 > 1)
    {
      uint64_t v176 = 0;
      uint64_t v177 = 0;
      long long v180 = 0u;
      long long v181 = 0u;
      uint64_t v178 = 0;
      uint64_t v182 = -1;
      int v175 = &unk_26C34C998;
      BYTE4(v183) = 0;
      int v179 = 3;
      LODWORD(v183) = 3;
      ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v203, (ZinIrConcatUnitInfo *)&v175);
      unint64_t v75 = a8[1];
      if (v75 >= a8[2])
      {
        uint64_t v76 = std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(a8, (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
      }
      else
      {
        ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)a8[1], (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
        uint64_t v76 = v75 + 344;
        a8[1] = v75 + 344;
      }
      a8[1] = v76;
      ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
      unint64_t v77 = (unint64_t)a7[1];
      unint64_t v78 = (unint64_t)a7[2];
      long long v203 = *(_OWORD *)(v77 - 40);
      uint64_t v79 = *(void *)(v77 - 24);
      long long v172 = *(_OWORD *)(v77 - 16);
      uint64_t v80 = v79 * v33;
      if (v77 >= v78)
      {
        unint64_t v82 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v77 - (void)*a7) >> 3);
        unint64_t v83 = v82 + 1;
        if (v82 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v84 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v78 - (void)*a7) >> 3);
        if (2 * v84 > v83) {
          unint64_t v83 = 2 * v84;
        }
        if (v84 >= 0x333333333333333) {
          unint64_t v85 = 0x666666666666666;
        }
        else {
          unint64_t v85 = v83;
        }
        if (v85) {
          uint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v149, v85);
        }
        else {
          uint64_t v86 = 0;
        }
        uint64_t v87 = &v86[40 * v82];
        BOOL v88 = &v86[40 * v85];
        *(_OWORD *)uint64_t v87 = v203;
        *((void *)v87 + 2) = v80;
        *(_OWORD *)(v87 + 24) = v172;
        int v81 = v87 + 40;
        std::string::size_type v90 = *a7;
        uint64_t v89 = a7[1];
        if (v89 != *a7)
        {
          do
          {
            long long v91 = *(_OWORD *)(v89 - 40);
            long long v92 = *(_OWORD *)(v89 - 24);
            *((void *)v87 - 1) = *((void *)v89 - 1);
            *(_OWORD *)(v87 - 24) = v92;
            *(_OWORD *)(v87 - 40) = v91;
            v87 -= 40;
            v89 -= 40;
          }
          while (v89 != v90);
          uint64_t v89 = *a7;
        }
        *a7 = v87;
        a7[1] = v81;
        a7[2] = v88;
        if (v89) {
          operator delete(v89);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v77 = *(_OWORD *)(v77 - 40);
        *(void *)(v77 + 16) = v80;
        *(_OWORD *)(v77 + 24) = *(_OWORD *)(v77 - 16);
        int v81 = (char *)(v77 + 40);
      }
      a7[1] = v81;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v175);
      uint64_t v36 = v167;
    }
  }
  unint64_t v93 = (unint64_t)a7[1];
  unint64_t v94 = (unint64_t)a7[2];
  long long v172 = *(_OWORD *)(v93 - 40);
  uint64_t v95 = *(void *)(v93 - 24);
  uint64_t v96 = *(void *)(v93 - 8);
  uint64_t v97 = *(void *)(v93 - 16) * v36;
  if (v93 >= v94)
  {
    unint64_t v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v93 - (void)*a7) >> 3);
    unint64_t v100 = v99 + 1;
    if (v99 + 1 > 0x666666666666666) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v101 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v94 - (void)*a7) >> 3);
    if (2 * v101 > v100) {
      unint64_t v100 = 2 * v101;
    }
    if (v101 >= 0x333333333333333) {
      unint64_t v102 = 0x666666666666666;
    }
    else {
      unint64_t v102 = v100;
    }
    if (v102) {
      int v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v16, v102);
    }
    else {
      int v103 = 0;
    }
    int v104 = &v103[40 * v99];
    int v105 = &v103[40 * v102];
    *(_OWORD *)int v104 = v172;
    *((void *)v104 + 2) = v95;
    *((void *)v104 + 3) = v97;
    *((void *)v104 + 4) = v96;
    int v98 = v104 + 40;
    int64_t v107 = *a7;
    char v106 = a7[1];
    if (v106 != *a7)
    {
      do
      {
        long long v108 = *(_OWORD *)(v106 - 40);
        long long v109 = *(_OWORD *)(v106 - 24);
        *((void *)v104 - 1) = *((void *)v106 - 1);
        *(_OWORD *)(v104 - 24) = v109;
        *(_OWORD *)(v104 - 40) = v108;
        v104 -= 40;
        v106 -= 40;
      }
      while (v106 != v107);
      char v106 = *a7;
    }
    *a7 = v104;
    a7[1] = v98;
    a7[2] = v105;
    if (v106) {
      operator delete(v106);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v93 = *(_OWORD *)(v93 - 40);
    *(void *)(v93 + 16) = v95;
    *(void *)(v93 + 24) = v97;
    *(void *)(v93 + 32) = v96;
    int v98 = (char *)(v93 + 40);
  }
  a7[1] = v98;
  uint64_t v110 = a2[3];
  if (v97 != v110)
  {
    uint64_t v176 = 0;
    uint64_t v177 = 0;
    int v179 = 0;
    uint64_t v178 = 0;
    long long v180 = 0u;
    long long v181 = 0u;
    uint64_t v182 = -1;
    int v175 = &unk_26C34F860;
    uint64_t v184 = 0x400000001;
    LODWORD(v183) = 0;
    HIDWORD(v183) = v110;
    ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v203, (ZinIrInputViewUnitInfo *)&v175);
    unint64_t v111 = a8[1];
    if (v111 >= a8[2])
    {
      uint64_t v112 = std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(a8, (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
    }
    else
    {
      ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)a8[1], (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
      uint64_t v112 = v111 + 344;
      a8[1] = v111 + 344;
    }
    a8[1] = v112;
    ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
    unint64_t v113 = (unint64_t)a7[1];
    unint64_t v114 = (unint64_t)a7[2];
    long long v203 = *(_OWORD *)(v113 - 40);
    uint64_t v204 = *(void *)(v113 - 24);
    uint64_t v115 = *(void *)(v113 - 8);
    uint64_t v116 = a2[3];
    if (v113 >= v114)
    {
      unint64_t v118 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v113 - (void)*a7) >> 3);
      unint64_t v119 = v118 + 1;
      if (v118 + 1 > 0x666666666666666) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v120 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v114 - (void)*a7) >> 3);
      if (2 * v120 > v119) {
        unint64_t v119 = 2 * v120;
      }
      if (v120 >= 0x333333333333333) {
        unint64_t v121 = 0x666666666666666;
      }
      else {
        unint64_t v121 = v119;
      }
      if (v121) {
        uint64_t v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v16, v121);
      }
      else {
        uint64_t v122 = 0;
      }
      int64_t v123 = &v122[40 * v118];
      std::string v124 = &v122[40 * v121];
      *((void *)v123 + 2) = v204;
      *(_OWORD *)int64_t v123 = v203;
      *((void *)v123 + 3) = v116;
      *((void *)v123 + 4) = v115;
      std::string::size_type v117 = v123 + 40;
      long long v126 = *a7;
      long long v125 = a7[1];
      if (v125 != *a7)
      {
        do
        {
          long long v127 = *(_OWORD *)(v125 - 40);
          long long v128 = *(_OWORD *)(v125 - 24);
          *((void *)v123 - 1) = *((void *)v125 - 1);
          *(_OWORD *)(v123 - 24) = v128;
          *(_OWORD *)(v123 - 40) = v127;
          v123 -= 40;
          v125 -= 40;
        }
        while (v125 != v126);
        long long v125 = *a7;
      }
      *a7 = v123;
      a7[1] = v117;
      a7[2] = v124;
      if (v125) {
        operator delete(v125);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v113 = *(_OWORD *)(v113 - 40);
      *(void *)(v113 + 16) = *(void *)(v113 - 24);
      *(void *)(v113 + 24) = v116;
      *(void *)(v113 + 32) = v115;
      std::string::size_type v117 = (char *)(v113 + 40);
    }
    a7[1] = v117;
    ZinIrUnitInfo::~ZinIrUnitInfo(&v175);
  }
  uint64_t v129 = a2[2];
  if (v95 != v129)
  {
    uint64_t v176 = 0;
    uint64_t v177 = 0;
    int v179 = 0;
    uint64_t v178 = 0;
    long long v180 = 0u;
    long long v181 = 0u;
    uint64_t v182 = -1;
    int v175 = &unk_26C34F860;
    uint64_t v184 = 0x300000001;
    LODWORD(v183) = 0;
    HIDWORD(v183) = v129;
    ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v203, (ZinIrInputViewUnitInfo *)&v175);
    unint64_t v130 = a8[1];
    if (v130 >= a8[2])
    {
      uint64_t v131 = std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(a8, (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
    }
    else
    {
      ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)a8[1], (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
      uint64_t v131 = v130 + 344;
      a8[1] = v130 + 344;
    }
    a8[1] = v131;
    ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v203);
    unint64_t v132 = (unint64_t)a7[1];
    unint64_t v133 = (unint64_t)a7[2];
    long long v203 = *(_OWORD *)(v132 - 40);
    v171[0] = *(_OWORD *)(v132 - 16);
    uint64_t v134 = a2[2];
    if (v132 >= v133)
    {
      unint64_t v136 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v132 - (void)*a7) >> 3);
      unint64_t v137 = v136 + 1;
      if (v136 + 1 > 0x666666666666666) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v138 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v133 - (void)*a7) >> 3);
      if (2 * v138 > v137) {
        unint64_t v137 = 2 * v138;
      }
      if (v138 >= 0x333333333333333) {
        unint64_t v139 = 0x666666666666666;
      }
      else {
        unint64_t v139 = v137;
      }
      if (v139) {
        BOOL v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v16, v139);
      }
      else {
        BOOL v140 = 0;
      }
      int v141 = &v140[40 * v136];
      int v142 = &v140[40 * v139];
      *(_OWORD *)int v141 = v203;
      *((void *)v141 + 2) = v134;
      *(_OWORD *)(v141 + 24) = v171[0];
      int v135 = v141 + 40;
      unint64_t v144 = *a7;
      uint64_t v143 = a7[1];
      if (v143 != *a7)
      {
        do
        {
          long long v145 = *(_OWORD *)(v143 - 40);
          long long v146 = *(_OWORD *)(v143 - 24);
          *((void *)v141 - 1) = *((void *)v143 - 1);
          *(_OWORD *)(v141 - 24) = v146;
          *(_OWORD *)(v141 - 40) = v145;
          v141 -= 40;
          v143 -= 40;
        }
        while (v143 != v144);
        uint64_t v143 = *a7;
      }
      *a7 = v141;
      a7[1] = v135;
      a7[2] = v142;
      if (v143) {
        operator delete(v143);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v132 = *(_OWORD *)(v132 - 40);
      *(void *)(v132 + 16) = v134;
      *(_OWORD *)(v132 + 24) = *(_OWORD *)(v132 - 16);
      int v135 = (char *)(v132 + 40);
    }
    a7[1] = v135;
    ZinIrUnitInfo::~ZinIrUnitInfo(&v175);
  }
  return 0;
}

void sub_2111EE0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
}

void ZinDeconvLargeStrides::ApplyDRAMDecomposition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v210 = *MEMORY[0x263EF8340];
  if (a4[1] == *a4) {
    ZinAssertImpl("Error: failed to get the decomposed conv info");
  }
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t v144 = **(void **)(a1 + 88);
  uint64_t v145 = *(void *)(a1 + 16);
  if (*(char *)(a1 + 47) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    size_t v6 = *(void *)(a1 + 32);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v203, v6 + 2);
  if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v203;
  }
  else {
    uint64_t v7 = (std::string *)v203.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a1 + 47) >= 0) {
      long long v8 = (const void *)(a1 + 24);
    }
    else {
      long long v8 = *(const void **)(a1 + 24);
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "__");
  std::string::basic_string[abi:ne180100]<0>(&v200, "stride_3_4");
  long long v9 = std::string::append((std::string *)&v200, "_xfm", 4uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v186 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v185 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v186 >= 0) {
    long long v11 = v185;
  }
  else {
    long long v11 = (void **)v185[0];
  }
  if (v186 >= 0) {
    std::string::size_type v12 = HIBYTE(v186);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v185[1];
  }
  uint64_t v13 = std::string::append(&v203, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(void *)&v194[16] = *((void *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)__int16 v194 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  unint64_t v15 = std::string::append((std::string *)v194, "_", 1uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)&long long v158 = *((void *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)long long __p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  __n128 v17 = ZinObjectNameFactory::ZinObjectNameFactory(&v191, __p);
  if (SBYTE7(v158) < 0) {
    operator delete(__p[0]);
  }
  if ((v194[23] & 0x80000000) != 0) {
    operator delete(*(void **)v194);
  }
  if (SHIBYTE(v186) < 0) {
    operator delete(v185[0]);
  }
  if (v201.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v200.i64[0]);
  }
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v203.__r_.__value_.__l.__data_);
  }
  (*(void (**)(void **__return_ptr, uint64_t, __n128))(*(void *)v5 + 136))(v185, v5, v17);
  if (!v190) {
    ZinAssertImpl("Error: failed to get the conv kernel info");
  }
  uint64_t v146 = v188;
  if (v188 <= 2) {
    int v18 = 1;
  }
  else {
    int v18 = v188;
  }
  unint64_t v133 = (uint64_t *)(v5 + 136);
  ZinLargeKernelUtils::CreatePaddedWeight((uint64_t *)(v5 + 136), &v187, v189, 0, &v184);
  uint64_t v19 = v184;
  if (!v184) {
    ZinAssertImpl("Failed to create padded weight");
  }
  uint64_t v20 = *a4;
  uint64_t v184 = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)v144 + 32))(v144, 0, 0);
  long long v182 = 0uLL;
  uint64_t v183 = 0;
  uint64_t v163 = 0x100000001;
  int v169 = 0;
  *(_OWORD *)long long __p = *(_OWORD *)(v20 + 264);
  uint64_t v21 = *(void *)(v20 + 280);
  long long v161 = *(_OWORD *)(v20 + 312);
  uint64_t v162 = *(void *)(v20 + 328);
  uint64_t v22 = *(void *)(v20 + 300);
  *(void *)&long long v158 = v21;
  *((void *)&v158 + 1) = v22;
  LODWORD(v22) = *(_DWORD *)(v20 + 308);
  *(void *)&v159[4] = 0x100000001;
  *(_DWORD *)int v159 = v22;
  int v160 = 1;
  char v167 = *(unsigned char *)(v20 + 252);
  char v168 = 0;
  uint64_t v166 = *(void *)(v20 + 256);
  LODWORD(v22) = *(_DWORD *)(v20 + 336);
  int v164 = 1;
  int v165 = v22;
  uint64_t v143 = a1;
  int v135 = (const void *)(a1 + 24);
  uint64_t v23 = v146;
  uint64_t v148 = v5;
  if ((int)v146 >= 1)
  {
    uint64_t v24 = *v133;
    uint64_t v25 = (const void *)(v5 + 24);
    memset(v194, 0, sizeof(v194));
    *(void *)int v195 = 0;
    *(_OWORD *)&v195[8] = *(_OWORD *)(v19 + 56);
    *(void *)&v195[24] = *(void *)(v19 + 72) / v146;
    long long v196 = *(_OWORD *)(v19 + 80);
    int64x2_t v200 = vdupq_n_s64(1uLL);
    v201.__r_.__value_.__r.__words[0] = v146;
    *(int64x2_t *)&v201.__r_.__value_.__r.__words[1] = v200;
    if (*(char *)(v5 + 47) >= 0) {
      size_t v26 = *(unsigned __int8 *)(v5 + 47);
    }
    else {
      size_t v26 = *(void *)(v5 + 32);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v26 + 1);
    if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v27 = &v192;
    }
    else {
      long long v27 = (std::string *)v192.__r_.__value_.__r.__words[0];
    }
    if (v26)
    {
      if (*(char *)(v148 + 47) >= 0) {
        size_t v28 = v25;
      }
      else {
        size_t v28 = *(const void **)(v148 + 24);
      }
      memmove(v27, v28, v26);
    }
    *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 95;
    std::to_string(&v155, 0);
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v29 = &v155;
    }
    else {
      BOOL v29 = (std::string *)v155.__r_.__value_.__r.__words[0];
    }
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v155.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v155.__r_.__value_.__l.__size_;
    }
    long long v31 = std::string::append(&v192, (const std::string::value_type *)v29, size);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v206.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    uint64_t v33 = std::string::append(&v206, "_", 1uLL);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v203.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v209, &v203);
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v203.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v206.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v155.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v192.__r_.__value_.__l.__data_);
    }
    ZinObjectNameFactory::CreateName((uint64_t)&v209, 2u, &v206);
    ZinIrWeight::SliceWeight(v19, (uint64_t *)v194, v200.i64, &v192);
    if (v192.__r_.__value_.__r.__words[0])
    {
      if (*(void *)(v24 + 568)) {
        std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>();
      }
      v155.__r_.__value_.__r.__words[0] = 0;
      if (*(void *)(v24 + 592)) {
        std::make_unique[abi:ne180100]<ZinIrVector,ZinIrVector&>();
      }
      v199.__r_.__value_.__r.__words[0] = 0;
      operator new();
    }
    ZinAssertImpl("Failed to create sliced padded weight");
  }
  (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
  if (v146 != (uint64_t)(*((void *)&v182 + 1) - v182) >> 3) {
    ZinAssertImpl("Error: failed to slice the kernel");
  }
  long long v180 = 0;
  int v179 = 0;
  unint64_t v181 = 0;
  uint64_t v35 = *a4;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  if (a4[1] != *a4)
  {
    unint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v136 = *(void *)(v143 + 208);
    unint64_t v137 = (const void **)(v5 + 24);
    uint64_t v134 = v18;
    int64x2_t v149 = vdupq_n_s64(1uLL);
    __format = "Invalid output dimension";
    do
    {
      int v40 = *(_DWORD *)(v35 + 344 * v38);
      *(void *)__val = v38;
      if (v40 == 3)
      {
        if (v23 == ((unsigned char *)v180 - (unsigned char *)v179) >> 3)
        {
          memset(&v192, 0, sizeof(v192));
          memset(&v155, 0, sizeof(v155));
          uint64_t v81 = (*(uint64_t (**)(void, void, void))(**(void **)v179 + 32))(*(void *)v179, 0, 0);
          int64x2_t v82 = *(int64x2_t *)(v81 + 48);
          *(_OWORD *)&v201.__r_.__value_.__l.__data_ = *(_OWORD *)(v81 + 64);
          int64x2_t v200 = v82;
          v201.__r_.__value_.__r.__words[2] = *(void *)(v81 + 80);
          v201.__r_.__value_.__r.__words[0] = 0;
          if ((int)v23 >= 1)
          {
            uint64_t v83 = 0;
            do
            {
              std::string::size_type v84 = v155.__r_.__value_.__l.__size_;
              if (v155.__r_.__value_.__l.__size_ >= v155.__r_.__value_.__r.__words[2])
              {
                unint64_t v86 = 0xCCCCCCCCCCCCCCCDLL
                    * ((uint64_t)(v155.__r_.__value_.__l.__size_ - v155.__r_.__value_.__r.__words[0]) >> 4);
                unint64_t v87 = v86 + 1;
                if (v86 + 1 > 0x333333333333333) {
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                }
                if (0x999999999999999ALL
                   * ((uint64_t)(v155.__r_.__value_.__r.__words[2] - v155.__r_.__value_.__r.__words[0]) >> 4) > v87)
                  unint64_t v87 = 0x999999999999999ALL
                      * ((uint64_t)(v155.__r_.__value_.__r.__words[2] - v155.__r_.__value_.__r.__words[0]) >> 4);
                if (0xCCCCCCCCCCCCCCCDLL
                   * ((uint64_t)(v155.__r_.__value_.__r.__words[2] - v155.__r_.__value_.__r.__words[0]) >> 4) >= 0x199999999999999)
                  unint64_t v88 = 0x333333333333333;
                else {
                  unint64_t v88 = v87;
                }
                if (v88) {
                  uint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v155.__r_.__value_.__r.__words[2], v88);
                }
                else {
                  uint64_t v89 = 0;
                }
                std::string::size_type v90 = &v89[80 * v86];
                *(void *)std::string::size_type v90 = 0;
                *((void *)v90 + 1) = 0;
                *((void *)v90 + 3) = 0;
                *((void *)v90 + 4) = 0;
                *((void *)v90 + 2) = v83;
                int64x2_t v91 = vdupq_n_s64(1uLL);
                *(int64x2_t *)(v90 + 40) = v91;
                *((void *)v90 + 7) = v23;
                *((int64x2_t *)v90 + 4) = v91;
                long long v92 = (char *)v155.__r_.__value_.__l.__size_;
                std::string::size_type v93 = v155.__r_.__value_.__r.__words[0];
                std::string::size_type v94 = (std::string::size_type)v90;
                if (v155.__r_.__value_.__l.__size_ != v155.__r_.__value_.__r.__words[0])
                {
                  do
                  {
                    *(_OWORD *)(v94 - 80) = *((_OWORD *)v92 - 5);
                    long long v95 = *((_OWORD *)v92 - 4);
                    long long v96 = *((_OWORD *)v92 - 3);
                    long long v97 = *((_OWORD *)v92 - 1);
                    *(_OWORD *)(v94 - 32) = *((_OWORD *)v92 - 2);
                    *(_OWORD *)(v94 - 16) = v97;
                    *(_OWORD *)(v94 - 64) = v95;
                    *(_OWORD *)(v94 - 48) = v96;
                    v94 -= 80;
                    v92 -= 80;
                  }
                  while (v92 != (char *)v93);
                  long long v92 = (char *)v93;
                }
                std::string::size_type v85 = (std::string::size_type)(v90 + 80);
                v155.__r_.__value_.__r.__words[0] = v94;
                v155.__r_.__value_.__l.__size_ = (std::string::size_type)(v90 + 80);
                v155.__r_.__value_.__r.__words[2] = (std::string::size_type)&v89[80 * v88];
                if (v92) {
                  operator delete(v92);
                }
              }
              else
              {
                *(_OWORD *)v155.__r_.__value_.__l.__size_ = 0uLL;
                *(void *)(v84 + 24) = 0;
                *(void *)(v84 + 32) = 0;
                *(void *)(v84 + 16) = v83;
                *(int64x2_t *)(v84 + 40) = v149;
                *(void *)(v84 + 56) = v23;
                std::string::size_type v85 = v84 + 80;
                *(int64x2_t *)(v84 + 64) = v149;
              }
              v155.__r_.__value_.__l.__size_ = v85;
              uint64_t v98 = (*(uint64_t (**)(void, void, void))(**(void **)v179 + 32))(*(void *)v179, 0, 0);
              v201.__r_.__value_.__r.__words[0] += *(void *)(v98 + 64);
              ++v83;
            }
            while (v83 != v146);
          }
          unint64_t v99 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(**(void **)v179 + 32))(*(void *)v179, 0, 0);
          uint64_t Interleave = ZinIrTensor::GetInterleave(v99);
          char v102 = v101;
          DimensionOrderHint::DimensionOrderHint(&v206, 2);
          uint64_t v103 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 32))(v5, 0, 0);
          ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)&v200, *(_DWORD *)(v103 + 88), 2, (uint64_t)&v206, *(void *)(a3 + 528), Interleave, v102, (int64x2_t *)&v209);
          operator new();
        }
        ZinAssertImpl("Error: failed to slice the kernel");
      }
      if (v40 == 1)
      {
        int v41 = (_OWORD *)(v35 + 344 * v38 + 8);
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)__p, (const ZinIrKernelUnitInfo *)v41);
        __p[0] = &unk_26C34A9B8;
        long long v42 = v41[16];
        long long v174 = v41[15];
        long long v175 = v42;
        long long v43 = v41[17];
        long long v44 = v41[18];
        long long v45 = v41[19];
        *(_OWORD *)&v178[12] = *(_OWORD *)((char *)v41 + 316);
        long long v177 = v44;
        *(_OWORD *)uint64_t v178 = v45;
        long long v176 = v43;
        if (*(char *)(v36 + 47) >= 0) {
          size_t v46 = *(unsigned __int8 *)(v36 + 47);
        }
        else {
          size_t v46 = *(void *)(v36 + 32);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v206, v46 + 2);
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v47 = &v206;
        }
        else {
          unint64_t v47 = (std::string *)v206.__r_.__value_.__r.__words[0];
        }
        if (v46)
        {
          if (*(char *)(v36 + 47) >= 0) {
            int v48 = v135;
          }
          else {
            int v48 = *(const void **)(v36 + 24);
          }
          memmove(v47, v48, v46);
        }
        strcpy((char *)v47 + v46, "__");
        std::string::basic_string[abi:ne180100]<0>(&v199, "stride_3_4_conv");
        uint64_t v49 = std::string::append(&v199, "_xfm", 4uLL);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v192.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v51 = &v192;
        }
        else {
          int v51 = (std::string *)v192.__r_.__value_.__r.__words[0];
        }
        if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v52 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v52 = v192.__r_.__value_.__l.__size_;
        }
        unint64_t v53 = std::string::append(&v206, (const std::string::value_type *)v51, v52);
        long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v209.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        long long v55 = std::string::append(&v209, "_", 1uLL);
        int64x2_t v56 = *(int64x2_t *)&v55->__r_.__value_.__l.__data_;
        v201.__r_.__value_.__r.__words[0] = v55->__r_.__value_.__r.__words[2];
        int64x2_t v200 = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v154, __val[0]);
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v57 = &v154;
        }
        else {
          long long v57 = (std::string *)v154.__r_.__value_.__r.__words[0];
        }
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v58 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v58 = v154.__r_.__value_.__l.__size_;
        }
        unint64_t v59 = std::string::append((std::string *)&v200, (const std::string::value_type *)v57, v58);
        long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v203.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        unint64_t v61 = std::string::append(&v203, "_", 1uLL);
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        *(void *)&v194[16] = *((void *)&v61->__r_.__value_.__l + 2);
        *(_OWORD *)__int16 v194 = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        ZinObjectNameFactory::ZinObjectNameFactory(&v155, v194);
        unint64_t v63 = *(void *)__val;
        if ((v194[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v194);
          unint64_t v63 = *(void *)__val;
        }
        if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v203.__r_.__value_.__l.__data_);
          unint64_t v63 = *(void *)__val;
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v154.__r_.__value_.__l.__data_);
          unint64_t v63 = *(void *)__val;
        }
        if (v201.__r_.__value_.__s.__data_[7] < 0)
        {
          operator delete((void *)v200.i64[0]);
          unint64_t v63 = *(void *)__val;
        }
        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v209.__r_.__value_.__l.__data_);
          unint64_t v63 = *(void *)__val;
        }
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v192.__r_.__value_.__l.__data_);
          unint64_t v63 = *(void *)__val;
        }
        if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v199.__r_.__value_.__l.__data_);
          unint64_t v63 = *(void *)__val;
        }
        if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v206.__r_.__value_.__l.__data_);
          unint64_t v63 = *(void *)__val;
        }
        long long v64 = *(const void ***)(v182 + 8 * v63);
        *(void *)(v182 + 8 * v63) = 0;
        *((void *)&v196 + 1) = 0x100000001;
        HIDWORD(v198) = 0;
        *(_OWORD *)__int16 v194 = v175;
        *(void *)&v194[16] = v176;
        *(_OWORD *)&v195[16] = *(_OWORD *)v178;
        *(void *)&long long v196 = *(void *)&v178[16];
        *(void *)&v194[24] = *(void *)((char *)&v177 + 4);
        *(_DWORD *)int v195 = HIDWORD(v177);
        *(void *)&v195[4] = 0x100000001;
        *(_DWORD *)&v195[12] = 1;
        LOWORD(v198) = BYTE4(v174);
        *((void *)&v197 + 1) = *((void *)&v174 + 1);
        int v65 = *(_DWORD *)&v178[24];
        LODWORD(v197) = 1;
        DWORD1(v197) = *(_DWORD *)&v178[24];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v137, v64, (uint64_t)&v203);
        __n128 v66 = ZinObjectNameFactory::ZinObjectNameFactory(&v192, &v203);
        if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v203.__r_.__value_.__l.__data_);
        }
        (*(void (**)(std::string *__return_ptr, uint64_t, __n128))(*(void *)v5 + 136))(&v203, v5, v66);
        if (v205)
        {
          int v140 = v65;
          int v67 = HIDWORD(v204);
          uint64_t v68 = *(void *)(*(void *)(v5 + 136) + 248);
          KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v5 + 16));
          ZinIrKernel::GetWeightDimensions((ZinIrKernel *)v64, (uint64_t)&v209);
          uint64_t v69 = v67;
          uint64_t v70 = v68 * v67;
          v206.__r_.__value_.__r.__words[0] = v70;
          v206.__r_.__value_.__l.__size_ = v209.__r_.__value_.__l.__size_;
          uint64_t v71 = *(void *)&v194[8];
          v206.__r_.__value_.__r.__words[2] = *(void *)&v194[8];
          uint64_t v207 = *(void *)v194;
          uint64_t v208 = *(void *)&v194[16];
          int64_t v152 = v209.__r_.__value_.__l.__size_;
          uint64_t v153 = *(void *)v194;
          details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)&v200, v209.__r_.__value_.__l.__size_ * v70 * *(void *)&v194[8] * *(void *)v194 * *(void *)&v194[16]);
          uint64_t v138 = (uint64_t)v64;
          uint64_t v72 = v153;
          if (v70 >= 1)
          {
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            uint64_t v150 = v70;
            do
            {
              if (v152 >= 1)
              {
                for (uint64_t i = 0; i != v152; ++i)
                {
                  if (v71 >= 1)
                  {
                    for (uint64_t j = 0; j != v71; ++j)
                    {
                      if (v72 >= 1)
                      {
                        uint64_t v77 = 40 * v74;
                        uint64_t v78 = (v153 - 1) * v69;
                        do
                        {
                          int v79 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v80 = (int64x2_t *)(v202 + v77);
                          if (!v79) {
                            uint64_t v80 = &v200;
                          }
                          ++v74;
                          v80->i64[0] = v73 / v69;
                          v80->i64[1] = i;
                          v80[1].i64[0] = v71 + ~j;
                          v80[1].i64[1] = v78 + v73 % v69;
                          v80[2].i64[0] = 0;
                          v78 -= v69;
                          v77 += 40;
                          --v72;
                        }
                        while (v72);
                      }
                      uint64_t v72 = v153;
                    }
                  }
                }
              }
              ++v73;
            }
            while (v73 != v150);
          }
          (*(void (**)(std::string *__return_ptr, std::string *, uint64_t))(v192.__r_.__value_.__r.__words[0]
                                                                                    + 16))(&v199, &v192, 2);
          long long v64 = (const void **)v138;
          ZinIrKernel::ShuffleKernel(v138, (uint64_t)&v200, *(int *)&v194[24], *(int *)&v194[28], *(int *)v195, 1, 1, &v154, 1, (uint64_t)&v206, a3, KernelSparsityCache, (long long *)&v195[16], 0, v140);
          uint64_t v36 = v143;
          uint64_t v37 = a2;
          uint64_t v5 = v148;
          uint64_t v23 = v146;
          if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v199.__r_.__value_.__l.__data_);
          }
          details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)&v200);
        }
        else
        {
          v154.__r_.__value_.__r.__words[0] = 0;
        }
        v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C34DA98;
        if (v193 < 0) {
          operator delete((void *)v192.__r_.__value_.__l.__size_);
        }
        ZinIrKernel::~ZinIrKernel((ZinIrKernel *)v64);
        MEMORY[0x21667D3C0]();
        uint64_t v104 = *(void *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 32))(v5, 0, 0) + 56);
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v5 + 136))(v194, v5);
        uint64_t v105 = *(int *)&v195[4];
        long long v106 = *(_OWORD *)(v154.__r_.__value_.__r.__words[0] + 536);
        long long v196 = *(_OWORD *)(v154.__r_.__value_.__r.__words[0] + 520);
        long long v197 = v106;
        uint64_t v198 = *(void *)(v154.__r_.__value_.__r.__words[0] + 552);
        long long v107 = *(_OWORD *)(v154.__r_.__value_.__r.__words[0] + 472);
        *(_OWORD *)__int16 v194 = *(_OWORD *)(v154.__r_.__value_.__r.__words[0] + 456);
        *(_OWORD *)&v194[16] = v107;
        long long v108 = *(_OWORD *)(v154.__r_.__value_.__r.__words[0] + 488);
        *(_OWORD *)&v195[16] = *(_OWORD *)(v154.__r_.__value_.__r.__words[0] + 504);
        *(_OWORD *)int v195 = v108;
        uint64_t v109 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v144 + 32))(v144, 0, 0);
        v203.__r_.__value_.__r.__words[0] = 0x100000001;
        LODWORD(v203.__r_.__value_.__r.__words[1]) = 1;
        ZinGetOutputTensorDimension(v109 + 48, v194, (unsigned int *)&v194[24], (unsigned int *)&v195[4], (int *)&v195[16], v104 * v105, (int *)&v203, (uint64_t)&v200);
        if (!ZinTensorDimensions::IsValid((ZinTensorDimensions *)&v200)) {
          goto LABEL_198;
        }
        if (!v154.__r_.__value_.__r.__words[0])
        {
          __format = "Error: failed to create the shuffled kernel";
LABEL_198:
          ZinAssertImpl(__format);
        }
        if (v136)
        {
          uint64_t v110 = *(void *)(v136 + 136);
          ZinObjectNameFactory::CreateName((uint64_t)&v191, 2u, &v203);
          ZinIrKernel::DuplicateChannels(v110, v134, &v209);
          if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v203.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v209.__r_.__value_.__r.__words[0] = 0;
        }
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v5 + 136))(&v203, v5);
        uint64_t DecomposedPartition = ZinConvCompositeLayer::CreateDecomposedPartition(v36, (uint64_t)&v154, (uint64_t)&v209, SHIDWORD(v204), 1, (uint64_t)&v200, v145, v37, (uint64_t)&v191);
        uint64_t v39 = DecomposedPartition;
        if (!DecomposedPartition) {
          ZinAssertImpl("Unexpected null partition!!!");
        }
        uint64_t v112 = (char *)v180;
        if ((unint64_t)v180 >= v181)
        {
          int64_t v114 = ((unsigned char *)v180 - (unsigned char *)v179) >> 3;
          if ((unint64_t)(v114 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v115 = (uint64_t)(v181 - (void)v179) >> 2;
          if (v115 <= v114 + 1) {
            unint64_t v115 = v114 + 1;
          }
          if (v181 - (unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v116 = v115;
          }
          if (v116) {
            std::string::size_type v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v181, v116);
          }
          else {
            std::string::size_type v117 = 0;
          }
          unint64_t v118 = (uint64_t *)&v117[8 * v114];
          *unint64_t v118 = v39;
          unint64_t v113 = v118 + 1;
          unint64_t v119 = (char *)v180;
          unint64_t v120 = (char *)v179;
          if (v180 != v179)
          {
            do
            {
              uint64_t v121 = *((void *)v119 - 1);
              v119 -= 8;
              *--unint64_t v118 = v121;
            }
            while (v119 != v120);
            unint64_t v119 = (char *)v179;
          }
          int v179 = v118;
          long long v180 = v113;
          unint64_t v181 = (unint64_t)&v117[8 * v116];
          if (v119) {
            operator delete(v119);
          }
        }
        else
        {
          *(void *)long long v180 = DecomposedPartition;
          unint64_t v113 = v112 + 8;
        }
        long long v180 = v113;
        uint64_t v122 = (ZinIrKernel *)v209.__r_.__value_.__r.__words[0];
        v209.__r_.__value_.__r.__words[0] = 0;
        if (v122)
        {
          ZinIrKernel::~ZinIrKernel(v122);
          MEMORY[0x21667D3C0]();
        }
        int64_t v123 = (ZinIrKernel *)v154.__r_.__value_.__r.__words[0];
        v154.__r_.__value_.__r.__words[0] = 0;
        if (v123)
        {
          ZinIrKernel::~ZinIrKernel(v123);
          MEMORY[0x21667D3C0]();
        }
        v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C34DA98;
        if (v156 < 0) {
          operator delete((void *)v155.__r_.__value_.__l.__size_);
        }
        __p[0] = &unk_26C34CC70;
        if (v172)
        {
          long long v173 = v172;
          operator delete(v172);
        }
        if (v170)
        {
          long long v171 = v170;
          operator delete(v170);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(__p);
        unint64_t v38 = *(void *)__val;
      }
      ++v38;
      uint64_t v35 = *a4;
    }
    while (0x82FA0BE82FA0BE83 * ((a4[1] - *a4) >> 3) > v38);
    if (v39)
    {
      uint64_t v124 = *(int *)(*v133 + 340);
      uint64_t v125 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v39 + 32))(v39, 0, 0);
      long long v126 = *(_OWORD *)(v125 + 64);
      *(_OWORD *)long long __p = *(_OWORD *)(v125 + 48);
      long long v158 = v126;
      *(void *)int v159 = *(void *)(v125 + 80);
      *(void **)__int16 v194 = __p[0];
      *(void *)&v194[8] = (uint64_t)__p[1] / v124;
      *(void *)&v194[16] = v126;
      *(void *)&v194[24] = *((void *)&v126 + 1) * v124;
      *(void *)int v195 = *(void *)v159;
      if (ZinIrTensor::HasInterleaveOtherThanOne((ZinIrTensor *)v125))
      {
        uint64_t v127 = ZinIrTensor::GetInterleave((ZinIrTensor *)v125);
        if (v128 && v127 == v124)
        {
          uint64_t v129 = operator new(0x14uLL);
          v201.__r_.__value_.__r.__words[0] = (std::string::size_type)(v129 + 5);
          v129[4] = 4;
          *(_OWORD *)uint64_t v129 = xmmword_211EFCE98;
          v200.i64[0] = (uint64_t)v129;
          v200.i64[1] = (uint64_t)(v129 + 5);
          DimensionOrderHint::DimensionOrderHint(&v203, &v200);
          ZinBuilder::CreateReshape(v145, (uint64_t)&v191);
        }
        uint64_t v130 = ZinIrTensor::GetInterleave((ZinIrTensor *)v125);
        if (!v131) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        ZinAssertImpl("Input has unexpected interleave for NOOP Reshape. Expects: %d; Actual: %lu", v124, v130);
      }
      ZinAssertImpl("Input not interleaved for NOOP Reshape.");
    }
  }
  ZinAssertImpl("Error: failed to apply the decomposed components");
}

void sub_2111F0448(_Unwind_Exception *a1)
{
  int v2 = (void *)STACK[0x418];
  if (STACK[0x418])
  {
    STACK[0x420] = (unint64_t)v2;
    operator delete(v2);
  }
  STACK[0x2C0] = (unint64_t)&STACK[0x430];
  std::vector<std::unique_ptr<ZinIrKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  if (STACK[0x448]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x448] + 16))(STACK[0x448]);
  }
  STACK[0x4B8] = (unint64_t)&unk_26C34DA98;
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  _Unwind_Resume(a1);
}

void *ZinLargeKernelUtils::CreatePaddedWeight@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, int *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  size_t v6 = a1;
  long long v8 = (void *)*a1;
  char v9 = *(unsigned char *)(*a1 + 448);
  unint64_t v38 = 0;
  unint64_t v39 = 0;
  unint64_t v40 = 0;
  uint64_t v10 = v8[33];
  uint64_t v11 = v8[34];
  if ((v9 & 0x40) != 0)
  {
    uint64_t v19 = a5;
    uint64_t v20 = v8[35];
    int v21 = *a2;
    uint64_t v22 = a2[1];
    uint64_t v23 = a2[2];
    int v24 = *a2 - 1;
    unsigned int AbsMod = GetAbsMod(-(v11 + v24 + *a3 / v21 * v21 - *a3), *a2);
    int v18 = v24 + *a3 / v21 * v21 - *a3;
    unsigned int v25 = GetAbsMod(-(v10 + (int)v22 - 1 + a3[2] / (int)v22 * (int)v22 - a3[2]), v22);
    unsigned int v26 = v22 - 1 + a3[2] / (int)v22 * v22 - a3[2];
    uint64_t v27 = v20 + (int)v23 - 1 + a3[4] / (int)v23 * (int)v23 - a3[4];
    a5 = v19;
    size_t v6 = a1;
    unsigned int v28 = GetAbsMod(-v27, v23);
    unsigned int v29 = v23 - 1 + a3[4] / (int)v23 * v23 - a3[4];
  }
  else
  {
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    if ((int)v13 <= 2 && a4 == 0)
    {
      unsigned int AbsMod = 0;
      int v18 = 0;
    }
    else
    {
      unsigned int AbsMod = GetAbsMod(-(uint64_t)*a3, *a2);
      int v17 = GetAbsMod(-(uint64_t)*a3, v13);
      int v18 = GetAbsMod(-(v11 + v17), v13);
    }
    if ((int)v14 <= 2 && a4 == 0)
    {
      unsigned int v25 = 0;
      unsigned int v26 = 0;
    }
    else
    {
      unsigned int v25 = GetAbsMod(-(uint64_t)a3[2], v14);
      int v31 = GetAbsMod(-(uint64_t)a3[2], v14);
      unsigned int v26 = GetAbsMod(-(v10 + v31), v14);
    }
    unsigned int v28 = 0;
    unsigned int v29 = 0;
  }
  unint64_t v38 = __PAIR64__(v18, AbsMod);
  unint64_t v39 = __PAIR64__(v26, v25);
  unint64_t v40 = __PAIR64__(v29, v28);
  *a5 = 0;
  uint64_t v32 = *v6;
  if (*v6)
  {
    uint64_t v33 = *(void *)(v32 + 584);
    if (!v33)
    {
      if ((*(_DWORD *)(v32 + 176) - 28) <= 2)
      {
        if (!ZinIrKernel::HasZeroPoint((ZinIrKernel *)v32))
        {
          int UnderlyingType = ZinKernelFormatGetUnderlyingType(*(_DWORD *)(*v6 + 176));
          ZinIrWeight::FillWeight(UnderlyingType, (uint64_t *)(*v6 + 248), &v37, 1.0);
        }
        ZinAssertImpl("Zero point is not supported for unity kernel.");
      }
      uint64_t v33 = 0;
    }
  }
  else
  {
    uint64_t v33 = MEMORY[0x248];
  }
  __n128 result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v33 + 32))(&v37, v33, &v38, 1262703187, v32 + 592);
  *a5 = v37;
  return result;
}

void sub_2111F0E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = a11;
  a11 = 0;
  if (v15) {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a11, v15);
  }
  uint64_t v16 = a13;
  a13 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  *uint64_t v13 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(ZinDeconvLargeStrides *this, ZinConvCompositeLayer *a2, ZinIrOpLayerGraph *a3, const ZinIrHalParameters *a4)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  int64x2_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v7 = (*(uint64_t (**)(void, void, void, const ZinIrHalParameters *))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0, a4);
  uint64_t v8 = (*(uint64_t (**)(ZinDeconvLargeStrides *, void, void))(*(void *)this + 32))(this, 0, 0);
  uint64_t v81 = a3;
  if (*((void *)a3 + 52) == 1)
  {
    uint64_t v9 = (*(uint64_t (**)(void, void, void))(***((void ***)this + 11) + 32))(**((void **)this + 11), 0, 0);
    unsigned int v10 = *(_DWORD *)(v9 + 88);
    uint64_t v79 = (*(uint64_t (**)(ZinDeconvLargeStrides *, void, void))(*(void *)this + 32))(this, 0, 0);
    uint64_t v11 = *((void *)this + 2);
    uint64_t v77 = *((void *)this + 25);
    std::string::size_type v12 = *(int32x2_t **)(v77 + 136);
    int32x2_t v13 = v12[34];
    if (*((char *)this + 47) >= 0) {
      size_t v14 = *((unsigned __int8 *)this + 47);
    }
    else {
      size_t v14 = *((void *)this + 4);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v110, v14 + 2);
    uint64_t v80 = this;
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v110;
    }
    else {
      uint64_t v15 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    if (v14)
    {
      if (*((char *)v80 + 47) >= 0) {
        uint64_t v16 = (char *)v80 + 24;
      }
      else {
        uint64_t v16 = (const void *)*((void *)v80 + 3);
      }
      memmove(v15, v16, v14);
    }
    strcpy((char *)v15 + v14, "__");
    std::string::basic_string[abi:ne180100]<0>(&v103, "u1_stride_gt_2");
    int v17 = std::string::append((std::string *)&v103, "_xfm", 4uLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    int64_t v115 = v17->__r_.__value_.__r.__words[2];
    long long v114 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (v115 >= 0) {
      uint64_t v19 = (const std::string::value_type *)&v114;
    }
    else {
      uint64_t v19 = (const std::string::value_type *)v114;
    }
    if (v115 >= 0) {
      std::string::size_type v20 = HIBYTE(v115);
    }
    else {
      std::string::size_type v20 = *((void *)&v114 + 1);
    }
    int v21 = std::string::append(&v110, v19, v20);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v108.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = std::string::append(&v108, "_", 1uLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    uint64_t v94 = v23->__r_.__value_.__r.__words[2];
    long long __p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v106, &__p);
    if (SHIBYTE(v94) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v115) < 0) {
      operator delete((void *)v114);
    }
    if (SBYTE7(v104) < 0) {
      operator delete((void *)v103);
    }
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v110.__r_.__value_.__l.__data_);
    }
    if (*(void *)(v9 + 64) == 1 && *(void *)(v79 + 56) == 1 && *(void *)&v12[50] == 1)
    {
      uint64_t v25 = v12[42].i32[1];
      if (*(void *)&v13 / v25 == 2)
      {
        *(int32x2_t *)v26.i8 = vrev64_s32(v12[44]);
        v26.u64[1] = (unint64_t)v12[46];
        v27.i32[0] = 0;
        v27.i32[3] = 0;
        *(uint64_t *)((char *)v27.i64 + 4) = (v25 - 1);
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v26, v27)), 0xFuLL))) & 1) != 0
          || !v12[45].i32[0]
          || !v12[45].i32[1])
        {
          long long v60 = *(_OWORD *)(v79 + 64);
          long long v103 = *(_OWORD *)(v79 + 48);
          long long v104 = v60;
          uint64_t v105 = *(void *)(v79 + 80);
          *((void *)&v104 + 1) = *(void *)(v79 + 72) / v25;
          *((void *)&v103 + 1) = v25;
          *(void *)&long long v60 = 0x100000001;
          *((void *)&v60 + 1) = 0x100000001;
          long long v95 = v60;
          uint64_t v96 = 0x100000001;
          long long v97 = 0uLL;
          long long v99 = v60;
          uint64_t v98 = 0;
          uint64_t v100 = 1;
          *(_WORD *)char v101 = 0;
          int v102 = 0;
          long long __p = xmmword_211ED2790;
          uint64_t v94 = 1;
          unint64_t v61 = *(unint64_t *)((char *)&v12[42] + 4);
          __int32 v62 = v12[43].i32[1];
          uint64_t KernelSparsityCache = ZinIrContext::GetKernelSparsityCache(*((ZinIrContext **)v80 + 2));
          double WeightDimensions = ZinIrKernel::GetWeightDimensions(*(ZinIrKernel **)(v77 + 136), (uint64_t)&v110);
          if (HIDWORD(v61) == 1 && v62 == 1)
          {
            int64_t size = v110.__r_.__value_.__l.__size_;
            *(void *)&long long v114 = v110.__r_.__value_.__r.__words[0] * (int)v61;
            *((void *)&v114 + 1) = v110.__r_.__value_.__l.__size_;
            uint64_t v66 = v111 / (int)v61;
            int64_t v115 = *((void *)&__p + 1);
            uint64_t v116 = v66;
            uint64_t v117 = v94;
            uint64_t v78 = v114;
            std::string::size_type v67 = v110.__r_.__value_.__l.__size_ * v114 * v66;
            details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)&v108, v67 * *((void *)&__p + 1) * v94);
            uint64_t v76 = (ZinKernelSparsityCache *)KernelSparsityCache;
            if (v67 == v110.__r_.__value_.__l.__size_ * v110.__r_.__value_.__r.__words[0] * v111)
            {
              if (v78 >= 1)
              {
                uint64_t v68 = 0;
                uint64_t v69 = 0;
                do
                {
                  ++v68;
                  if (size >= 1)
                  {
                    for (std::string::size_type i = 0; i != size; ++i)
                    {
                      if (v66 >= 1)
                      {
                        uint64_t v71 = 0;
                        uint64_t v72 = 40 * v69;
                        do
                        {
                          int v73 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_
                                                                   + 24))(details::ZinIrMappedDataBase_Impl::backing_);
                          uint64_t v74 = (std::string *)(v109 + v72);
                          if (!v73) {
                            uint64_t v74 = &v108;
                          }
                          v74->__r_.__value_.__r.__words[0] = 0;
                          v74->__r_.__value_.__l.__size_ = i;
                          v74->__r_.__value_.__r.__words[2] = 0;
                          v74[1].__r_.__value_.__r.__words[0] = ((uint64_t)(int)v61 << (v71 & 1)) - v68;
                          v74[1].__r_.__value_.__l.__size_ = 0;
                          ++v71;
                          v72 += 40;
                        }
                        while (v66 != v71);
                        v69 += v71;
                      }
                    }
                  }
                }
                while (v68 != v78);
              }
              (*(void (**)(void **__return_ptr, void *, uint64_t))(v106[0] + 16))(&v112, v106, 2);
              ZinIrKernel::ShuffleKernel(*(void *)(v77 + 136), (uint64_t)&v108, v95, SDWORD1(v95), SDWORD2(v95), SHIDWORD(v95), v96, &v92, SHIDWORD(v96), (uint64_t)&v114, (uint64_t)v81, v76, &v97, v101[1], SHIDWORD(v99));
              if (v113 < 0) {
                operator delete(v112);
              }
              details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)&v108);
              uint64_t v75 = *(unsigned int *)(v79 + 88);
              int64x2_t v91 = v92;
              long long v92 = 0;
              ZinBuilder::CreateConv(v11, (uint64_t)v106, (uint64_t)&v103, v10, v75, &v91);
            }
            ZinAssertImpl("Mismatch in shuffled kernel dims\n");
          }
          ZinAssertImpl("Only W can have large stride\n", WeightDimensions);
        }
      }
    }
    BOOL v28 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v28) {
      ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    uint64_t v36 = 3;
    v106[0] = &unk_26C34DA98;
    if (v107 < 0) {
      operator delete((void *)v106[1]);
    }
  }
  else
  {
    uint64_t v37 = v8;
    uint64_t v38 = *((void *)this + 25);
    int v39 = *(_DWORD *)(v7 + 88);
    unint64_t v40 = *(ZinIrKernel **)(v38 + 136);
    int WeightFormat = ZinIrKernel::GetWeightFormat(v40);
    uint64_t v42 = v7 + 48;
    long long v43 = (void *)(v37 + 48);
    if (ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride((long long *)(v7 + 48), (uint64_t)v43, v39, (uint64_t)v40 + 176, WeightFormat, v44, (char **)&v82, &v88)|| (v50 = v88, uint64_t v49 = v89, v89 == v88))
    {
      int v45 = *(_DWORD *)(v7 + 88);
      size_t v46 = *(ZinIrKernel **)(v38 + 136);
      int v47 = ZinIrKernel::GetWeightFormat(v46);
      ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(v42, v43, v45, (uint64_t)v46 + 176, v47, v48, (char **)&v82, &v85);
      uint64_t v50 = v88;
      uint64_t v49 = v89;
    }
    if (v49 == v50)
    {
      if (v86 != v85) {
        ZinDeconvLargeStrides::ApplyDRAMDecomposition((uint64_t)this, (uint64_t)a2, (uint64_t)v81, &v85);
      }
      BOOL v51 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v51) {
        ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(v51, v52, v53, v54, v55, v56, v57, v58);
      }
      uint64_t v36 = 3;
    }
    else
    {
      uint64_t v36 = ZinDeconvLargeStrides::ApplyStride4SamePadDecomposition((uint64_t)this, (uint64_t)a2, (uint64_t)v81, &v88, (uint64_t)&v82);
    }
  }
  if (v82)
  {
    uint64_t v83 = v82;
    operator delete(v82);
  }
  *(void *)&long long __p = &v85;
  std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)&long long __p = &v88;
  std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v36;
}

void sub_2111F1A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,ZinIrKernel *a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v68 - 192);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a42, 0);
  a62 = (uint64_t)&unk_26C34DA98;
  if (a68 < 0) {
    operator delete(a63);
  }
  a57 = &a29;
  std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  a57 = &a32;
  std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  _Unwind_Resume(a1);
}

ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this, ZinIrPadUnitInfo *a2)
{
  *(_DWORD *)this = 44;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)this + 8), a2);
  *((void *)this + 1) = &unk_26C3499A0;
  long long v4 = *(_OWORD *)((char *)a2 + 156);
  long long v5 = *(_OWORD *)((char *)a2 + 172);
  uint64_t v6 = *(void *)((char *)a2 + 188);
  *((void *)this + 26) = 0;
  *(void *)((char *)this + 196) = v6;
  *(_OWORD *)((char *)this + 180) = v5;
  *(_OWORD *)((char *)this + 164) = v4;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)this + 26, *((const void **)a2 + 25), *((void *)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3);
  *((_WORD *)this + 116) = *((_WORD *)a2 + 112);
  return this;
}

void sub_2111F1D78(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v1);
  _Unwind_Resume(a1);
}

ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this, ZinIrInputViewUnitInfo *a2)
{
  *(_DWORD *)this = 17;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C34F860;
  *(_OWORD *)((char *)this + 88) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_2111F1E70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this, ZinIrPixelUnshuffleUnitInfo *a2)
{
  *(_DWORD *)this = 32;
  *((void *)this + 1) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((void *)this + 1) = &unk_26C352340;
  uint64_t v6 = *((void *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((void *)this + 11) = v6;
  return this;
}

void sub_2111F1F78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this)
{
  int v2 = *(_DWORD *)this;
  if (*(int *)this <= 31)
  {
    if (v2 == 1)
    {
      *((void *)this + 1) = &unk_26C34CC70;
      int v5 = (void *)*((void *)this + 20);
      if (v5)
      {
        *((void *)this + 21) = v5;
        operator delete(v5);
      }
      uint64_t v6 = (void *)*((void *)this + 17);
      if (v6)
      {
        *((void *)this + 18) = v6;
        operator delete(v6);
      }
      long long v4 = (void **)((char *)this + 8);
      goto LABEL_16;
    }
    if (v2 != 17) {
      return;
    }
LABEL_10:
    long long v4 = (void **)((char *)this + 8);
LABEL_16:
    ZinIrUnitInfo::~ZinIrUnitInfo(v4);
    return;
  }
  if (v2 == 32) {
    goto LABEL_10;
  }
  if (v2 == 44)
  {
    *((void *)this + 1) = &unk_26C3499A0;
    uint64_t v3 = (void *)*((void *)this + 26);
    if (v3)
    {
      *((void *)this + 27) = v3;
      operator delete(v3);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)this + 8));
  }
}

ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *this, const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *a2)
{
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 > 31)
  {
    if (v4 == 32)
    {
      *((void *)this + 1) = &unk_26C345B80;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long v14 = *((_OWORD *)a2 + 1);
        *((void *)this + 4) = *((void *)a2 + 4);
        *((_OWORD *)this + 1) = v14;
      }
      int v16 = *((_DWORD *)a2 + 10);
      *((void *)this + 6) = 0;
      *((_DWORD *)this + 10) = v16;
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      *((void *)this + 1) = &unk_26C352340;
      uint64_t v17 = *((void *)a2 + 11);
      *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
      *((void *)this + 11) = v17;
    }
    else if (v4 == 44)
    {
      ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)this + 8), (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)a2 + 8));
      *((void *)this + 1) = &unk_26C3499A0;
      long long v6 = *(_OWORD *)((char *)a2 + 164);
      long long v7 = *(_OWORD *)((char *)a2 + 180);
      uint64_t v8 = *(void *)((char *)a2 + 196);
      *((void *)this + 26) = 0;
      *(void *)((char *)this + 196) = v8;
      *(_OWORD *)((char *)this + 180) = v7;
      *(_OWORD *)((char *)this + 164) = v6;
      *((void *)this + 27) = 0;
      *((void *)this + 28) = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)this + 26, *((const void **)a2 + 26), *((void *)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3);
      *((_WORD *)this + 116) = *((_WORD *)a2 + 116);
    }
  }
  else if (v4 == 1)
  {
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)this + 8), (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)((char *)a2 + 8));
    *((void *)this + 1) = &unk_26C34A9B8;
    long long v9 = *(_OWORD *)((char *)a2 + 248);
    v10[16] = *(_OWORD *)((char *)a2 + 264);
    *(_OWORD *)((char *)this + 248) = v9;
    long long v11 = *(_OWORD *)((char *)a2 + 280);
    long long v12 = *(_OWORD *)((char *)a2 + 296);
    long long v13 = *(_OWORD *)((char *)a2 + 312);
    *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
    v10[18] = v12;
    v10[19] = v13;
    v10[17] = v11;
  }
  else if (v4 == 17)
  {
    *((void *)this + 1) = &unk_26C345B80;
    if (*((char *)a2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
    }
    else
    {
      long long v5 = *((_OWORD *)a2 + 1);
      *((void *)this + 4) = *((void *)a2 + 4);
      *((_OWORD *)this + 1) = v5;
    }
    int v15 = *((_DWORD *)a2 + 10);
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 10) = v15;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((long long **)a2 + 6), *((long long **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
    *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 1) = &unk_26C34F860;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  }
  return this;
}

void sub_2111F2308(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinConvLargeStrides::DecomposeConvWithLargeStride(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v186 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a4 + 272) & 0x40) != 0) {
    ZinAssertImpl("Large stride deconv should be handle at HandleDeconvLargeKernelStrides");
  }
  if (*(int *)(a4 + 160) > 2) {
    return 3;
  }
  uint64_t v9 = *(void *)(a4 + 104);
  if (v9 > 1) {
    return 3;
  }
  long long v12 = a8;
  uint64_t v17 = (uint64_t *)a2;
  int v19 = *(_DWORD *)(a4 + 152);
  if (v19 > 2)
  {
    int v20 = *(_DWORD *)(a4 + 156);
    if (v20 >= 3 && v19 != v20) {
      return 3;
    }
  }
  uint64_t v10 = 3;
  if (*(int *)(a4 + 208) < 2 && *(int *)(a4 + 212) <= 1 && *(int *)(a4 + 216) <= 1)
  {
    int v21 = *(ZinMirConvUtils **)(a4 + 224);
    if (v21 != (ZinMirConvUtils *)1)
    {
      uint64_t v22 = 1;
      *(void *)&long long v178 = 1;
      if (!ZinMirConvUtils::IsChannelwiseConvolution(*(ZinMirConvUtils **)(a1 + 8), *(ZinMirConvUtils **)(a2 + 8), v21))
      {
        if (!ZinMirConvUtils::CalculateGroupConvUnicastCin(*(void *)(a4 + 224), (uint64_t *)a1, (const ZinTensorDimensions *)v17, (const ZinTensorDimensions *)&v178, v23))return v10; {
        uint64_t v22 = v178;
        }
      }
      if ((unint64_t)(v22 * *(int *)(a4 + 152) * *(int *)(a4 + 156)) > a6[95]) {
        return v10;
      }
      uint64_t v9 = *(void *)(a4 + 104);
      long long v12 = a8;
    }
    int8x16_t v176 = vextq_s8(*(int8x16_t *)(a4 + 88), *(int8x16_t *)(a4 + 88), 8uLL);
    uint64_t v177 = v9;
    long long v174 = 0;
    long long __p = 0;
    uint64_t v175 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&__p, a6 + 207, a6 + 211, 4uLL);
    long long v172 = 0u;
    memset(v171, 0, sizeof(v171));
    if (!Factorize(*(_DWORD *)(a4 + 152), (int **)&__p, v171) || *((void *)&v172 + 1) > 2uLL) {
      goto LABEL_140;
    }
    long long v170 = 0u;
    memset(v169, 0, sizeof(v169));
    if (!Factorize(*(_DWORD *)(a4 + 156), (int **)&__p, v169)
      || *((void *)&v170 + 1) > 2uLL
      || (*((void *)&v170 + 1) != 2 ? (BOOL v24 = *((void *)&v172 + 1) == 2) : (BOOL v24 = 1),
          !v24 ? (int v25 = 0) : (int v25 = 1),
          (int v125 = v25, v24)
       && (*((void *)&v172 + 1) != *((void *)&v170 + 1)
        || !std::operator==[abi:ne180100]<int,std::allocator<int>>(v171, v169))))
    {
LABEL_139:
      std::deque<int>::~deque[abi:ne180100](v169);
LABEL_140:
      std::deque<int>::~deque[abi:ne180100](v171);
      if (__p)
      {
        long long v174 = __p;
        operator delete(__p);
      }
      return v10;
    }
    BOOL v28 = v12;
    uint64_t v27 = *v12;
    for (uint64_t i = v28[1];
          i != v27;
    a8[1] = v27;
    *(void *)(a7 + 8) = *(void *)a7;
    std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, (long long *)a1);
    uint64_t v121 = *(int *)(a4 + 152);
    uint64_t v122 = *(int *)(a4 + 156);
    uint64_t v118 = *(unsigned int *)(a4 + 160);
    long long v29 = *(_OWORD *)(a1 + 16);
    long long v166 = *(_OWORD *)a1;
    long long v167 = v29;
    int v30 = *(_DWORD *)(a4 + 176);
    uint64_t v168 = *(void *)(a1 + 32);
    LODWORD(v119) = *(_DWORD *)(a4 + 184);
    HIDWORD(v119) = v30;
    LODWORD(v116) = *(_DWORD *)(a4 + 188);
    HIDWORD(v116) = *(_DWORD *)(a4 + 180);
    uint64_t v115 = *(void *)(a4 + 192);
    if (v125)
    {
      BOOL IsSameOrValidPadding = ZinLargeKernelUtils::IsSameOrValidPadding((void *)a1, v17, (int *)(a4 + 152), &v176, a4 + 176);
      uint64_t v32 = v121;
      if (!IsSameOrValidPadding)
      {
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        int v146 = 0;
        uint64_t v145 = 0;
        long long v147 = 0u;
        long long v148 = 0u;
        uint64_t v149 = -1;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v152 = 0u;
        memset(v153, 0, sizeof(v153));
        int v142 = &unk_26C3499A0;
        int v157 = 0;
        uint64_t v158 = 0;
        uint64_t v159 = 0;
        __int16 v160 = 0;
        uint64_t v156 = 0;
        *((void *)&v155 + 1) = 0;
        long long v154 = *(_OWORD *)(a4 + 176);
        *(void *)&long long v155 = *(void *)(a4 + 192);
        int v33 = DWORD1(v154);
        uint64_t v34 = *((void *)&v167 + 1) + DWORD1(v154) + (int)v154;
        int v35 = DWORD2(v154);
        int v36 = HIDWORD(v154);
        uint64_t v37 = v167 + HIDWORD(v154) + DWORD2(v154);
        *((void *)&v167 + 1) = v34;
        *(void *)&long long v167 = v37;
        uint64_t v38 = v168 + SDWORD1(v155) + (uint64_t)(int)v155;
        uint64_t v168 = v38;
        if (v34 % v121)
        {
          int v39 = v121 - v34 % v121;
          int v33 = v39 + DWORD1(v154);
          DWORD1(v154) += v39;
          *((void *)&v167 + 1) = v34 + v39;
          if (a6[18] < (unint64_t)(v39 + HIDWORD(v116))) {
            goto LABEL_43;
          }
        }
        if (v37 % v122)
        {
          int v40 = v122 - v37 % v122;
          int v36 = v40 + HIDWORD(v154);
          HIDWORD(v154) += v40;
          *(void *)&long long v167 = v37 + v40;
          if (a6[19] < (unint64_t)(v40 + (int)v116)) {
            goto LABEL_43;
          }
        }
        uint64_t v41 = v38 % (int)v118;
        if (v41)
        {
          int v42 = v118 - v41;
          DWORD1(v155) += v42;
          uint64_t v168 = v38 + v42;
          if (a6[20] < (unint64_t)(v42 + HIDWORD(v115)))
          {
LABEL_43:
            ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&v142);
            uint64_t v10 = 3;
            goto LABEL_139;
          }
        }
        if ((int)v154 > 0 || v33 >= 1)
        {
          *(void *)&long long v178 = 0x100000004;
          std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v157, &v178);
          int v35 = DWORD2(v154);
          int v36 = HIDWORD(v154);
        }
        if (v35 > 0 || v36 >= 1)
        {
          *(void *)&long long v178 = 0x100000003;
          std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v157, &v178);
        }
        if ((int)v155 > 0 || SDWORD1(v155) >= 1)
        {
          *(void *)&long long v178 = 0x100000001;
          std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v157, &v178);
        }
        ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178, (ZinIrPadUnitInfo *)&v142);
        std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
        ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
        std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v166);
        ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&v142);
        uint64_t v119 = 0;
        uint64_t v115 = 0;
        uint64_t v116 = 0;
      }
    }
    else
    {
      uint64_t v32 = v121;
    }
    int v43 = v122;
    if (GetAbsMod(-*((void *)&v167 + 1), v32)
      || GetAbsMod(-(uint64_t)v167, v122)
      || GetAbsMod(-v168, (int)v118))
    {
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      int v146 = 0;
      uint64_t v145 = 0;
      long long v147 = 0u;
      long long v148 = 0u;
      uint64_t v149 = -1;
      long long v150 = 0u;
      long long v151 = 0u;
      long long v152 = 0u;
      memset(v153, 0, sizeof(v153));
      long long v154 = 0u;
      long long v155 = 0u;
      uint64_t v156 = 0;
      int v142 = &unk_26C3499A0;
      int v157 = 0;
      uint64_t v158 = 0;
      __int16 v160 = 0;
      uint64_t v159 = 0;
      if ((int)GetAbsMod(-*((void *)&v167 + 1), v32) >= 1)
      {
        int AbsMod = GetAbsMod(-*((void *)&v167 + 1), v32);
        DWORD1(v154) = AbsMod;
        LODWORD(v154) = 0;
        *(void *)&long long v178 = 0x100000004;
        std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v157, &v178);
        *((void *)&v167 + 1) += AbsMod;
      }
      if ((int)GetAbsMod(-(uint64_t)v167, v122) >= 1)
      {
        int v45 = GetAbsMod(-(uint64_t)v167, v122);
        HIDWORD(v154) = v45;
        DWORD2(v154) = 0;
        *(void *)&long long v178 = 0x100000003;
        std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v157, &v178);
        *(void *)&long long v167 = v167 + v45;
      }
      if ((int)GetAbsMod(-v168, (int)v118) >= 1)
      {
        int v46 = GetAbsMod(-v168, (int)v118);
        LODWORD(v155) = 0;
        DWORD1(v155) = v46;
        *(void *)&long long v178 = 0x100000001;
        std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v157, &v178);
        v168 += v46;
      }
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178, (ZinIrPadUnitInfo *)&v142);
      std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
      std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v166);
      ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&v142);
    }
    uint64_t v117 = v32;
    if (v125)
    {
      if (*((void *)&v172 + 1))
      {
        unint64_t v47 = 0;
        unint64_t v120 = v17;
        do
        {
          if ((int)v32 < 3)
          {
            LODWORD(v32) = 1;
          }
          else if (*(_DWORD *)(*(void *)(*((void *)&v171[0] + 1) {
                                          + ((((unint64_t)v172 + v47) >> 7) & 0x1FFFFFFFFFFFFF8))
          }
                              + 4 * ((v172 + v47) & 0x3FF)) < (int)v32)
          {
            LODWORD(v32) = *(_DWORD *)(*(void *)(*((void *)&v171[0] + 1)
                                                 + ((((unint64_t)v172 + v47) >> 7) & 0x1FFFFFFFFFFFFF8))
                                     + 4 * ((v172 + v47) & 0x3FF));
          }
          unint64_t v126 = v47;
          if (v43 < 3)
          {
            int v43 = 1;
          }
          else
          {
            if (*((void *)&v170 + 1) <= v47) {
              std::__throw_out_of_range[abi:ne180100]("deque");
            }
            if (*(_DWORD *)(*(void *)(*((void *)&v169[0] + 1)
                                       + ((((unint64_t)v170 + v47) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * ((v170 + v47) & 0x3FF)) < v43)
              int v43 = *(_DWORD *)(*(void *)(*((void *)&v169[0] + 1)
                                          + ((((unint64_t)v170 + v47) >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * ((v170 + v47) & 0x3FF));
          }
          uint64_t v48 = *(void *)(a7 + 8);
          uint64_t v49 = *(void *)(v48 - 32);
          uint64_t v50 = *(void *)(v48 - 24);
          uint64_t v51 = *(void *)(v48 - 16);
          uint64_t v123 = *(void *)(v48 - 40);
          uint64_t v124 = *(void *)(v48 - 8);
          uint64_t v143 = 0;
          uint64_t v144 = 0;
          int v146 = 0;
          uint64_t v145 = 0;
          long long v147 = 0u;
          long long v148 = 0u;
          uint64_t v149 = -1;
          int v142 = &unk_26C352340;
          *(void *)&long long v150 = __PAIR64__(v43, v32);
          DWORD2(v150) = 1;
          ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178, (ZinIrPixelUnshuffleUnitInfo *)&v142);
          unint64_t v52 = a8[1];
          if (v52 >= a8[2])
          {
            uint64_t v53 = std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__push_back_slow_path<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>(a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
            uint64_t v54 = a8;
          }
          else
          {
            ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)a8[1], (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
            uint64_t v53 = v52 + 344;
            uint64_t v54 = a8;
            a8[1] = v52 + 344;
          }
          uint64_t v55 = v43;
          uint64_t v56 = v43 * (uint64_t)(int)v32 * v49;
          uint64_t v57 = v50 / v55;
          v54[1] = v53;
          uint64_t v58 = v51 / (int)v32;
          ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
          long long v60 = *(void **)(a7 + 8);
          unint64_t v59 = *(void *)(a7 + 16);
          if ((unint64_t)v60 >= v59)
          {
            __int32 v62 = *(void **)a7;
            unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v60 - *(void *)a7) >> 3);
            unint64_t v64 = v63 + 1;
            uint64_t v17 = v120;
            if (v63 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - (void)v62) >> 3);
            if (2 * v65 > v64) {
              unint64_t v64 = 2 * v65;
            }
            if (v65 >= 0x333333333333333) {
              unint64_t v66 = 0x666666666666666;
            }
            else {
              unint64_t v66 = v64;
            }
            if (v66)
            {
              std::string::size_type v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(a7 + 16, v66);
              __int32 v62 = *(void **)a7;
              long long v60 = *(void **)(a7 + 8);
            }
            else
            {
              std::string::size_type v67 = 0;
            }
            uint64_t v68 = &v67[40 * v63];
            *(void *)uint64_t v68 = v123;
            *((void *)v68 + 1) = v56;
            *((void *)v68 + 2) = v57;
            *((void *)v68 + 3) = v58;
            *((void *)v68 + 4) = v124;
            uint64_t v69 = v68;
            if (v60 == v62)
            {
              uint64_t v32 = v121;
              int v43 = v122;
            }
            else
            {
              uint64_t v32 = v121;
              int v43 = v122;
              do
              {
                long long v70 = *(_OWORD *)(v60 - 5);
                long long v71 = *(_OWORD *)(v60 - 3);
                *((void *)v69 - 1) = *(v60 - 1);
                *(_OWORD *)(v69 - 24) = v71;
                *(_OWORD *)(v69 - 40) = v70;
                v69 -= 40;
                v60 -= 5;
              }
              while (v60 != v62);
              __int32 v62 = *(void **)a7;
            }
            unint64_t v61 = v68 + 40;
            *(void *)a7 = v69;
            *(void *)(a7 + 8) = v68 + 40;
            *(void *)(a7 + 16) = &v67[40 * v66];
            if (v62) {
              operator delete(v62);
            }
          }
          else
          {
            *long long v60 = v123;
            v60[1] = v56;
            v60[2] = v57;
            v60[3] = v58;
            unint64_t v61 = v60 + 5;
            v60[4] = v124;
            uint64_t v17 = v120;
            uint64_t v32 = v121;
            int v43 = v122;
          }
          *(void *)(a7 + 8) = v61;
          ZinIrUnitInfo::~ZinIrUnitInfo(&v142);
          unint64_t v47 = v126 + 1;
        }
        while (*((void *)&v172 + 1) > v126 + 1);
      }
    }
    else
    {
      if ((int)v32 <= 2) {
        int v72 = 1;
      }
      else {
        int v72 = v32;
      }
      if ((int)v122 <= 2) {
        int v73 = 1;
      }
      else {
        int v73 = v122;
      }
      *(void *)&long long v129 = v166;
      *((void *)&v129 + 1) = v73 * (uint64_t)v72 * *((void *)&v166 + 1);
      *(void *)&long long v130 = (uint64_t)v167 / v73;
      *((void *)&v130 + 1) = *((void *)&v167 + 1) / v72;
      uint64_t v131 = v168;
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      int v146 = 0;
      uint64_t v145 = 0;
      long long v147 = 0u;
      long long v148 = 0u;
      uint64_t v149 = -1;
      int v142 = &unk_26C352340;
      *(void *)&long long v150 = __PAIR64__(v73, v72);
      DWORD2(v150) = 1;
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178, (ZinIrPixelUnshuffleUnitInfo *)&v142);
      std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
      std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v129);
      ZinIrUnitInfo::~ZinIrUnitInfo(&v142);
    }
    ZinIrConvUnitInfo::ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&v142);
    if ((int)v32 > 2) {
      int v74 = 1;
    }
    else {
      int v74 = v117;
    }
    if (v43 > 2) {
      int v75 = 1;
    }
    else {
      int v75 = v43;
    }
    if ((int)v118 > 2) {
      int v76 = 1;
    }
    else {
      int v76 = v118;
    }
    LODWORD(v161) = 1;
    *(void *)((char *)&v164 + 4) = __PAIR64__(v75, v74);
    HIDWORD(v164) = v76;
    int v127 = GetAbsMod(-HIDWORD(v119), v32);
    uint64_t v77 = v176.i64[0];
    int v78 = GetAbsMod(-HIDWORD(v119), v121);
    int v79 = GetAbsMod(-(v77 + v78), v121);
    int v80 = GetAbsMod(-(int)v119, v122);
    uint64_t v81 = v176.i64[1];
    int v82 = GetAbsMod(-(int)v119, v122);
    int v83 = GetAbsMod(-(v81 + v82), v122);
    if ((int)v117 >= 3) {
      uint64_t v77 = (v77 + v127 + v79) / v117;
    }
    unsigned int v84 = v118;
    int v85 = HIDWORD(v119);
    if ((int)v122 >= 3) {
      uint64_t v81 = (v81 + v80 + v83) / v122;
    }
    uint64_t v86 = v177;
    if ((int)v118 >= 3) {
      uint64_t v86 = v177 / v118;
    }
    *(void *)&long long v162 = v77;
    *((void *)&v162 + 1) = v81;
    *(void *)&long long v163 = v86;
    if ((int)v117 < 3)
    {
      int v88 = v122;
      int v89 = HIDWORD(v115);
      int v87 = HIDWORD(v116);
    }
    else
    {
      int v85 = (v127 + HIDWORD(v119)) / (int)v121;
      int v87 = (v79 + HIDWORD(v116)) / (int)v117;
      int v88 = v122;
      int v89 = HIDWORD(v115);
    }
    int v90 = v119;
    *(_DWORD *)int v165 = v85;
    *(_DWORD *)&v165[4] = v87;
    if ((int)v122 < 3)
    {
      int v92 = v121;
      int v91 = v116;
    }
    else
    {
      int v90 = (v80 + (int)v119) / (int)v122;
      int v91 = (v83 + (int)v116) / v88;
      int v92 = v121;
    }
    int v93 = v115;
    *(_DWORD *)&v165[8] = v90;
    *(_DWORD *)&v165[12] = v91;
    if ((int)v118 < 3)
    {
      unsigned int v84 = 1;
    }
    else
    {
      int v93 = (int)v115 / (int)v118;
      v89 /= (int)v118;
    }
    *(_DWORD *)&v165[16] = v93;
    *(_DWORD *)&v165[20] = v89;
    if (v92 <= 2) {
      int v92 = 1;
    }
    if ((int)v122 <= 2) {
      int v94 = 1;
    }
    else {
      int v94 = v88;
    }
    v141[0] = v166;
    v141[1] = *((void *)&v166 + 1) * (int)(v94 * v92 * v84);
    v141[4] = v168 / v84;
    v141[2] = (uint64_t)v167 / v94;
    v141[3] = *((void *)&v167 + 1) / v92;
    *(void *)&long long v178 = 0x100000001;
    DWORD2(v178) = 1;
    uint64_t v95 = v17[1];
    *(void *)&long long v129 = 0x100000001;
    DWORD2(v129) = 1;
    ZinGetOutputTensorDimension((uint64_t)v141, &v162, (unsigned int *)&v164 + 1, (unsigned int *)&v178, (int *)v165, v95, (int *)&v129, (uint64_t)v138);
    DWORD1(v150) = a5;
    uint64_t v149 = v17[1];
    *((void *)&v161 + 1) = *(void *)(a4 + 224);
    *(_DWORD *)&v165[24] = *(_DWORD *)(a4 + 200);
    DWORD2(v148) = a3;
    BYTE4(v161) = *(unsigned char *)(a4 + 272) >> 7;
    LODWORD(v178) = 1;
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)((char *)&v178 + 8), (const ZinIrKernelUnitInfo *)&v142);
    long long v184 = v164;
    v185[0] = *(_OWORD *)v165;
    *(_OWORD *)((char *)v185 + 12) = *(_OWORD *)&v165[12];
    long long v182 = v162;
    long long v183 = v163;
    *((void *)&v178 + 1) = &unk_26C34A9B8;
    long long v181 = v161;
    std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
    std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, (long long *)v17);
    if (ZinTensorDimensionsEqual(v138, v17)) {
      goto LABEL_137;
    }
    uint64_t v96 = v139;
    uint64_t v97 = v17[3];
    if (v139 > v97)
    {
      *((void *)&v129 + 1) = 0;
      long long v130 = 0uLL;
      LODWORD(v131) = 0;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v134 = -1;
      *(void *)&long long v129 = &unk_26C34F860;
      uint64_t v137 = 0x400000001;
      int v135 = 0;
      int v136 = v97;
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178, (ZinIrInputViewUnitInfo *)&v129);
      std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
      uint64_t v98 = *(void *)(a7 + 8);
      uint64_t v99 = *(void *)(v98 - 8);
      long long v100 = *(_OWORD *)(v98 - 24);
      long long v178 = *(_OWORD *)(v98 - 40);
      long long v179 = v100;
      uint64_t v101 = v17[3];
      uint64_t v180 = v99;
      *((void *)&v179 + 1) = v101;
      std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v178);
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v129);
    }
    uint64_t v102 = v17[2];
    if (v138[2] <= v102)
    {
      uint64_t v110 = v17[4];
      std::string v108 = v17 + 4;
      int v107 = v110;
      if (v140 <= v110)
      {
        if (v96 <= v97)
        {
          uint64_t v10 = 3;
          goto LABEL_138;
        }
LABEL_137:
        uint64_t v10 = 0;
LABEL_138:
        ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&v142);
        goto LABEL_139;
      }
    }
    else
    {
      *((void *)&v129 + 1) = 0;
      long long v130 = 0uLL;
      LODWORD(v131) = 0;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v134 = -1;
      *(void *)&long long v129 = &unk_26C34F860;
      uint64_t v137 = 0x300000001;
      int v135 = 0;
      int v136 = v102;
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178, (ZinIrInputViewUnitInfo *)&v129);
      std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
      ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
      uint64_t v103 = *(void *)(a7 + 8);
      uint64_t v104 = *(void *)(v103 - 8);
      long long v105 = *(_OWORD *)(v103 - 24);
      long long v178 = *(_OWORD *)(v103 - 40);
      long long v179 = v105;
      uint64_t v106 = v17[2];
      uint64_t v180 = v104;
      *(void *)&long long v179 = v106;
      std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v178);
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v129);
      uint64_t v109 = v17[4];
      std::string v108 = v17 + 4;
      int v107 = v109;
      if (v140 <= v109) {
        goto LABEL_137;
      }
    }
    *((void *)&v129 + 1) = 0;
    long long v130 = 0uLL;
    LODWORD(v131) = 0;
    long long v132 = 0u;
    long long v133 = 0u;
    uint64_t v134 = -1;
    *(void *)&long long v129 = &unk_26C34F860;
    uint64_t v137 = 0x100000001;
    int v135 = 0;
    int v136 = v107;
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178, (ZinIrInputViewUnitInfo *)&v129);
    std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](a8, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v178);
    uint64_t v111 = *(void *)(a7 + 8);
    uint64_t v112 = *(void *)(v111 - 8);
    long long v113 = *(_OWORD *)(v111 - 24);
    long long v178 = *(_OWORD *)(v111 - 40);
    long long v179 = v113;
    uint64_t v114 = *v108;
    uint64_t v180 = v112;
    *(void *)&long long v179 = v114;
    std::vector<ZinTensorDimensions>::push_back[abi:ne180100]((void **)a7, &v178);
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v129);
    goto LABEL_137;
  }
  return v10;
}

void sub_2111F3370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&a47);
  std::deque<int>::~deque[abi:ne180100](&STACK[0x2B0]);
  std::deque<int>::~deque[abi:ne180100](&STACK[0x2E0]);
  uint64_t v48 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<int,std::allocator<int>>(void *a1, void *a2)
{
  uint64_t v2 = a1[5];
  if (v2 != a2[5]) {
    return 0;
  }
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[1];
  long long v5 = (void *)(v4 + 8 * (v3 >> 10));
  if (a1[2] == v4)
  {
    long long v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    long long v6 = (_DWORD *)(*v5 + 4 * (a1[4] & 0x3FFLL));
    uint64_t v7 = *(void *)(v4 + (((v3 + v2) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v3 + v2) & 0x3FF);
  }
  uint64_t v9 = a2[1];
  uint64_t v10 = (void *)(v9 + 8 * (a2[4] >> 10));
  if (a2[2] == v9) {
    long long v11 = 0;
  }
  else {
    long long v11 = (_DWORD *)(*v10 + 4 * (a2[4] & 0x3FFLL));
  }
  if (v6 == (_DWORD *)v7) {
    return 1;
  }
  do
  {
    BOOL result = *v6 == *v11;
    if (*v6 != *v11) {
      break;
    }
    if ((_DWORD *)((char *)++v6 - *v5) == (_DWORD *)4096)
    {
      long long v12 = (_DWORD *)v5[1];
      ++v5;
      long long v6 = v12;
    }
    if ((_DWORD *)((char *)++v11 - *v10) == (_DWORD *)4096)
    {
      long long v13 = (_DWORD *)v10[1];
      ++v10;
      long long v11 = v13;
    }
  }
  while (v6 != (_DWORD *)v7);
  return result;
}

BOOL ZinLargeKernelUtils::IsSameOrValidPadding(void *a1, void *a2, int *a3, void *a4, uint64_t a5)
{
  BOOL result = ZinLargeKernelUtils::IsSamePadding(a1, a2, a3, a4, (_DWORD *)a5);
  if ((*a3 < 2 || !*(void *)a5) && (a3[1] < 2 || !*(void *)(a5 + 8)) && (a3[2] < 2 || !*(void *)(a5 + 16))) {
    return 1;
  }
  return result;
}

uint64_t std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::push_back[abi:ne180100](uint64_t *a1, const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__push_back_slow_path<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>(a1, a2);
  }
  else
  {
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)a1[1], a2);
    uint64_t result = v3 + 344;
    a1[1] = v3 + 344;
  }
  a1[1] = result;
  return result;
}

void sub_2111F3664(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t ZinConvLargeStrides::ApplyDecomposition(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v5 = a4[1] - *a4;
  if (v5
    && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3) == 0x82FA0BE82FA0BE83 * (v5 >> 3)
                                                                                     + 1)
  {
    uint64_t v8 = **(void **)(a1 + 88);
    uint64_t v47 = *(void *)(a1 + 16);
    if (*(char *)(a1 + 47) >= 0) {
      size_t v9 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      size_t v9 = *(void *)(a1 + 32);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v74, v9 + 2);
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v74;
    }
    else {
      uint64_t v10 = (std::string *)v74.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      if (*(char *)(a1 + 47) >= 0) {
        long long v11 = (const void *)(a1 + 24);
      }
      else {
        long long v11 = *(const void **)(a1 + 24);
      }
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "__");
    long long v12 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v75, "stride_3_4_decomp");
    long long v13 = std::string::append(v12, "_xfm", 4uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(void *)&long long v51 = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v50 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v51) & 0x80u) == 0) {
      int v15 = v50;
    }
    else {
      int v15 = (void **)v50[0];
    }
    if ((SBYTE7(v51) & 0x80u) == 0) {
      std::string::size_type v16 = BYTE7(v51);
    }
    else {
      std::string::size_type v16 = (std::string::size_type)v50[1];
    }
    uint64_t v17 = std::string::append(&v74, (const std::string::value_type *)v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(void *)&v54[16] = *((void *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v54 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    int v19 = std::string::append((std::string *)v54, "_", 1uLL);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(void *)&long long v62 = *((void *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v60, __p);
    if (SBYTE7(v62) < 0) {
      operator delete(__p[0]);
    }
    if ((v54[23] & 0x80000000) != 0) {
      operator delete(*(void **)v54);
    }
    if (SBYTE7(v51) < 0) {
      operator delete(v50[0]);
    }
    if (v76 < 0) {
      operator delete(v75);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = *(void *)(*(void *)(a1 + 200) + 136);
    uint64_t v22 = (_DWORD *)*a4;
    if (a4[1] != *a4 && *v22 == 44)
    {
      ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p, (const ZinIrTextureUnitInfo *)(v22 + 2));
      __p[0] = &unk_26C3499A0;
      long long v23 = *(_OWORD *)(v22 + 41);
      long long v24 = *(_OWORD *)(v22 + 45);
      uint64_t v71 = *(void *)(v22 + 49);
      long long v69 = v23;
      long long v70 = v24;
      memset(v72, 0, sizeof(v72));
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v72, *((const void **)v22 + 26), *((void *)v22 + 27), (uint64_t)(*((void *)v22 + 27) - *((void *)v22 + 26)) >> 3);
      __int16 v73 = *((_WORD *)v22 + 116);
      ZinConvCompositeLayer::GetDequantizedPadInfo((ZinIrKernel *)a1, (ZinIrPadUnitInfo *)__p);
      (*(void (**)(unsigned char *__return_ptr, uint64_t, void, void))(*(void *)v8 + 80))(v54, v8, 0, 0);
      uint64_t v25 = *(void *)(*(void *)a5 + 32);
      long long v26 = *(_OWORD *)(*(void *)a5 + 16);
      *(_OWORD *)&v54[8] = *(_OWORD *)*(void *)a5;
      *(_OWORD *)&v54[24] = v26;
      *(void *)&v54[40] = v25;
      uint64_t v27 = operator new(0x78uLL);
      v74.__r_.__value_.__l.__size_ = (std::string::size_type)(v27 + 30);
      v74.__r_.__value_.__r.__words[2] = (std::string::size_type)(v27 + 30);
      v27[28] = v59;
      long long v28 = v58;
      long long v29 = v56;
      *((_OWORD *)v27 + 5) = v57;
      *((_OWORD *)v27 + 6) = v28;
      long long v30 = *(_OWORD *)&v54[16];
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v54;
      *((_OWORD *)v27 + 1) = v30;
      long long v31 = v55;
      *((_OWORD *)v27 + 2) = *(_OWORD *)&v54[32];
      *((_OWORD *)v27 + 3) = v31;
      *((_OWORD *)v27 + 4) = v29;
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      (*(void (**)(uint64_t, void, void))(*(void *)v8 + 32))(v8, 0, 0);
      ZinBuilder::CreatePadLayer(v47, (uint64_t)&v60);
    }
    memset(v53, 0, sizeof(v53));
    std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v53, (uint64_t *)(a3 + 1656), (uint64_t *)(a3 + 1688), 4uLL);
    long long v51 = 0u;
    long long v52 = 0u;
    *(_OWORD *)uint64_t v50 = 0u;
    if (*(int *)(v21 + 328) <= 2) {
      int v33 = 1;
    }
    else {
      int v33 = *(_DWORD *)(v21 + 328);
    }
    BOOL v34 = Factorize(v33, (int **)v53, v50);
    if (*((void *)&v52 + 1) < 3uLL && v34)
    {
      memset(v49, 0, sizeof(v49));
      std::vector<ZinIrDims3D>::reserve((char **)v49, 2uLL);
      int v36 = (_DWORD *)*a4;
      if (*(_DWORD *)*a4 == 32)
      {
        uint64_t v37 = (void *)*((void *)v36 + 11);
        int v38 = v36[24];
        int v39 = *(_OWORD **)a5;
        (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)v8 + 80))(__p, v8, 0, 0);
        int v40 = operator new(0x78uLL);
        *(void *)&v54[8] = v40 + 30;
        *(void *)&v54[16] = v40 + 30;
        v40[28] = v68;
        long long v41 = v67;
        long long v42 = v65;
        *((_OWORD *)v40 + 5) = v66;
        *((_OWORD *)v40 + 6) = v41;
        long long v43 = v62;
        *(_OWORD *)int v40 = *(_OWORD *)__p;
        *((_OWORD *)v40 + 1) = v43;
        long long v44 = v64;
        *((_OWORD *)v40 + 2) = v63;
        *((_OWORD *)v40 + 3) = v44;
        *((_OWORD *)v40 + 4) = v42;
        *(void *)uint64_t v54 = v40;
        uint64_t v45 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 32))(v8, 0, 0);
        ZinBuilder::CreatePixelUnshuffleLayer(v47, (uint64_t)&v60, (uint64_t)v54, (uint64_t)v39 + 40, *(unsigned int *)(v45 + 88), v37, v38);
      }
      ZinAssertImpl("Error: conv and pixel unshuffle units are expected for decomposed large stride conv");
    }
    ZinAssertImpl("Error: fail to factorize the stride for large stride conv");
  }
  return 3;
}

void sub_2111F4C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,ZinIrKernel *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  uint64_t v63 = *(void *)(v61 - 248);
  *(void *)(v61 - 248) = 0;
  if (v63) {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v61 - 248, v63);
  }
  unint64_t v64 = STACK[0x268];
  STACK[0x268] = 0;
  if (v64) {
    (*(void (**)(unint64_t))(*(void *)v64 + 16))(v64);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a27, 0);
  *(void *)(v61 - 144) = &unk_26C34DA98;
  if (*(char *)(v61 - 113) < 0) {
    operator delete(*(void **)(v61 - 136));
  }
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x270]);
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
  }
  std::deque<int>::~deque[abi:ne180100](&a53);
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  STACK[0x230] = (unint64_t)&unk_26C34DA98;
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  _Unwind_Resume(a1);
}

void std::vector<ZinIrDims3D>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (a1[1] - *a1) / 12;
    long long v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>(v3, a2);
    uint64_t v7 = &v6[12 * v5];
    size_t v9 = &v6[12 * v8];
    long long v11 = *a1;
    uint64_t v10 = a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 12);
        v10 -= 12;
        int v14 = *((_DWORD *)v10 + 2);
        *(void *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      uint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t ZinConvLargeStrides::HandleConvLargeKernelStrides(ZinConvLargeStrides *this, uint64_t **a2, ZinIrOpLayerGraph *a3, const ZinIrHalParameters *a4)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  memset(v94, 0, sizeof(v94));
  memset(v93, 0, sizeof(v93));
  int v91 = 0;
  int v90 = 0;
  uint64_t v92 = 0;
  uint64_t v7 = (int64x2_t *)(*(uint64_t (**)(void, void, void, const ZinIrHalParameters *))(***((void ***)this + 11)
                                                                                                  + 32))(**((void **)this + 11), 0, 0, a4);
  uint64_t v8 = (*(uint64_t (**)(ZinConvLargeStrides *, void, void))(*(void *)this + 32))(this, 0, 0);
  uint64_t v9 = *((void *)this + 2);
  uint64_t v10 = *((void *)this + 25);
  uint64_t v11 = *(void *)(v10 + 136);
  if (*(void *)(v11 + 600) && (*(_DWORD *)(v11 + 176) - 7) < 0x15) {
    ZinAssertImpl("Error: does not support palettized weight with large kernel stride");
  }
  long long v65 = a3;
  if (*(unsigned char *)(v9 + 668)) {
    ZinAssertImpl("Error: Large stride conv cannot support dynamic shape");
  }
  int v12 = v7[5].i32[2];
  int WeightFormat = ZinIrKernel::GetWeightFormat((ZinIrKernel *)v11);
  if (ZinConvLargeStrides::DecomposeConvWithLargeStride((uint64_t)v7[3].i64, v8 + 48, v12, v11 + 176, WeightFormat, a3, (uint64_t)&v90, v94))
  {
    if (*((void *)a3 + 52) == 1)
    {
      uint64_t v14 = **((void **)this + 11);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v14 + 32))(v14, 0, 0);
      uint64_t v104 = *(void *)(v15 + 80);
      long long v16 = *(_OWORD *)(v15 + 64);
      long long v102 = *(_OWORD *)(v15 + 48);
      long long v103 = v16;
      long long v101 = *(_OWORD *)((*(uint64_t (**)(ZinConvLargeStrides *, void, void))(*(void *)this + 32))(this, 0, 0)+ 48);
      uint64_t v63 = *((void *)this + 2);
      uint64_t v17 = *(void *)(*((void *)this + 25) + 136);
      uint64_t v18 = *(void *)(v17 + 256);
      uint64_t v64 = *(void *)(v17 + 264);
      uint64_t v19 = *(void *)(v17 + 272);
      uint64_t v66 = *(void *)(v17 + 328);
      int32x2_t v20 = *(int32x2_t *)(v17 + 352);
      int v21 = *(_DWORD *)(v17 + 360);
      int v22 = *(_DWORD *)(v17 + 364);
      uint64_t v67 = *(void *)(v17 + 368);
      if (*((char *)this + 47) >= 0) {
        size_t v23 = *((unsigned __int8 *)this + 47);
      }
      else {
        size_t v23 = *((void *)this + 4);
      }
      uint64_t v100 = 0;
      std::string::basic_string[abi:ne180100]((uint64_t)&v108, v23 + 2);
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v24 = &v108;
      }
      else {
        long long v24 = (std::string *)v108.__r_.__value_.__r.__words[0];
      }
      if (v23)
      {
        if (*((char *)this + 47) >= 0) {
          uint64_t v25 = (char *)this + 24;
        }
        else {
          uint64_t v25 = (char *)*((void *)this + 3);
        }
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "__");
      std::string::basic_string[abi:ne180100]<0>(&v95, "u1_stride_gt_2");
      long long v26 = std::string::append(&v95, "_xfm", 4uLL);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      int v107 = (_OWORD *)v26->__r_.__value_.__r.__words[2];
      long long v106 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v107) >= 0) {
        long long v28 = (const std::string::value_type *)&v106;
      }
      else {
        long long v28 = (const std::string::value_type *)v106;
      }
      if (SHIBYTE(v107) >= 0) {
        std::string::size_type v29 = HIBYTE(v107);
      }
      else {
        std::string::size_type v29 = *((void *)&v106 + 1);
      }
      long long v30 = std::string::append(&v108, v28, v29);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      uint64_t v32 = std::string::append(&v105, "_", 1uLL);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v32->__r_.__value_.__l + 2);
      *(_OWORD *)long long __p = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(v98, __p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v107) < 0) {
        operator delete((void *)v106);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v108.__r_.__value_.__l.__data_);
      }
      BOOL v34 = (void)v103 == 1 && v19 % (int)v66 == 0;
      BOOL v42 = *((void *)&v103 + 1) == 1 && v64 % (v66 >> 32) == 0;
      if ((v34 || v42)
        && ((*(int32x2_t *)v43.i8 = vrev64_s32(v20),
             v43.i64[1] = v67,
             (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v43))) & 1) != 0)
         || !v21
         || !v22))
      {
        if (v42)
        {
          uint64_t v53 = operator new(0x10uLL);
          *(void *)&long long v106 = v53;
          *uint64_t v53 = xmmword_211EE2650;
          *((void *)&v106 + 1) = v53 + 1;
          int v107 = v53 + 1;
          (*(void (**)(uint64_t, void, void))(*(void *)v14 + 32))(v14, 0, 0);
          ZinBuilder::CreateTranspose();
        }
        if ((unint64_t)((int)v66 * v18) <= *((void *)v65 + 46)
          && (unint64_t)(*((void *)&v103 + 1) / (int)v66 * v18) <= *((void *)v65 + 42))
        {
          v95.__r_.__value_.__r.__words[0] = v102;
          uint64_t v97 = v104;
          uint64_t v96 = (int)v66;
          v95.__r_.__value_.__l.__size_ = 1;
          v95.__r_.__value_.__r.__words[2] = *((void *)&v103 + 1) / (int)v66 * v18;
          long long v62 = operator new(0x14uLL);
          v105.__r_.__value_.__r.__words[2] = (std::string::size_type)(v62 + 5);
          v62[4] = 4;
          *(_OWORD *)long long v62 = xmmword_211EFCE98;
          v105.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
          v105.__r_.__value_.__l.__size_ = (std::string::size_type)(v62 + 5);
          DimensionOrderHint::DimensionOrderHint(__p, &v105);
          ZinBuilder::CreateReshape(v63, (uint64_t)v98);
        }
        BOOL v54 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v54) {
          ZinConvLargeStrides::HandleConvLargeKernelStrides(v54, v55, v56, v57, v58, v59, v60, v61);
        }
      }
      else
      {
        BOOL v44 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v44) {
          ZinConvLargeStrides::HandleConvLargeKernelStrides(v44, v45, v46, v47, v48, v49, v50, v51);
        }
      }
      uint64_t v35 = 3;
      v98[0] = &unk_26C34DA98;
      if (v99 < 0) {
        operator delete((void *)v98[1]);
      }
      uint64_t v100 = 0;
    }
    else
    {
      uint64_t v36 = *(void *)(v10 + 136);
      long long v83 = 0u;
      long long v80 = 0u;
      long long v79 = 0u;
      long long v78 = 0u;
      uint64_t v73 = 0xFFFFFFFFLL;
      int v71 = 0;
      *(_OWORD *)long long v70 = 0u;
      long long v69 = 0u;
      memset(&__p[8], 0, 48);
      *(void *)long long v70 = -1;
      *(void *)&v70[12] = 0xFFFFFFFF00000000;
      *(void *)int v72 = -1;
      uint64_t v74 = -1;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      *(void *)&long long v78 = 0;
      DWORD2(v78) = 1;
      DWORD2(v79) = -1;
      *(void *)&long long v80 = -1;
      DWORD2(v80) = -1;
      uint64_t v81 = -1;
      uint64_t v82 = 0x3F80000000000006;
      *(void *)long long __p = &unk_26C34A9B8;
      BYTE12(v83) = 0;
      int64x2_t v84 = vdupq_n_s64(1uLL);
      int64x2_t v85 = v84;
      *(void *)&long long v37 = 0x100000001;
      *((void *)&v37 + 1) = 0x100000001;
      *(_OWORD *)uint64_t v86 = v37;
      *(void *)&v86[16] = 0x100000001;
      long long v87 = 0uLL;
      uint64_t v88 = 0;
      uint64_t v89 = 1;
      *(_DWORD *)&unsigned char __p[32] = 1;
      int v38 = ZinIrKernel::GetWeightFormat((ZinIrKernel *)v36);
      int v39 = v7[5].i32[2];
      *(_DWORD *)&v70[12] = v38;
      DWORD2(v69) = v39;
      uint64_t v40 = *(void *)(v36 + 264);
      uint64_t v41 = *(void *)(v36 + 280);
      v84.i64[1] = *(void *)(v36 + 272);
      v85.i64[0] = v40;
      v85.i64[1] = v41;
      *(_DWORD *)&v86[8] = *(_DWORD *)(v36 + 392);
      *(void *)uint64_t v86 = *(void *)(v36 + 384);
      *(void *)&v86[12] = *(void *)(v36 + 328);
      *(_DWORD *)&v86[20] = *(_DWORD *)(v36 + 336);
      long long v87 = *(_OWORD *)(v36 + 352);
      uint64_t v88 = *(void *)(v36 + 368);
      LODWORD(v89) = *(_DWORD *)(v36 + 376);
      if (ZinConvPoolLargeStride::DecomposeLargeStrideConv(v39, (ZinConvLayerUtils *)__p, (uint64_t)a3, v7 + 3, *(void *)(v8 + 56), (int64x2_t **)&v90, (uint64_t)v93))ZinAssertImpl("Large stride Conv decomposition failed"); {
      uint64_t v35 = ZinConvPoolLargeStride::LargeStrideConvLower(v9, a2, v93, (int64x2_t **)&v90, (uint64_t)this);
      }
      *(void *)long long __p = &unk_26C34CC70;
      if ((void)v77)
      {
        *((void *)&v77 + 1) = v77;
        operator delete((void *)v77);
      }
      if (*((void *)&v75 + 1))
      {
        *(void *)&long long v76 = *((void *)&v75 + 1);
        operator delete(*((void **)&v75 + 1));
      }
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)__p);
    }
  }
  else
  {
    uint64_t v35 = ZinConvLargeStrides::ApplyDecomposition((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v94, (uint64_t)&v90);
  }
  if (v90)
  {
    int v91 = v90;
    operator delete(v90);
  }
  *(void *)long long __p = v93;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(void *)long long __p = v94;
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v35;
}

void sub_2111F64F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  STACK[0x3A0] = (unint64_t)&unk_26C359A08;
  int v39 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v39;
    operator delete(v39);
  }
  uint64_t v40 = *(void **)(v37 - 160);
  if (v40)
  {
    *(void *)(v37 - 152) = v40;
    operator delete(v40);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v37 - 184), 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&STACK[0x320], 0);
  uint64_t v41 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v41;
    operator delete(v41);
  }
  STACK[0x330] = (unint64_t)&unk_26C34DA98;
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&STACK[0x358], 0);
  BOOL v42 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v42;
    operator delete(v42);
  }
  a37 = &STACK[0x250];
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a37 = &STACK[0x268];
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

uint64_t HandleLargeKernelStrides(ZinConvLargeStrides *this, uint64_t **a2, ZinIrOpLayerGraph *a3, const ZinIrHalParameters *a4)
{
  if ((*(unsigned char *)(*(void *)(*((void *)this + 25) + 136) + 448) & 0x40) != 0) {
    return ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(this, (ZinConvCompositeLayer *)a2, a3, a4);
  }
  else {
    return ZinConvLargeStrides::HandleConvLargeKernelStrides(this, a2, a3, a4);
  }
}

uint64_t std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__push_back_slow_path<ZinDeconvLargeStrides::DeconvStride3And4>(uint64_t *a1, const ZinDeconvLargeStrides::DeconvStride3And4 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x5F417D05F417D0) {
    unint64_t v9 = 0xBE82FA0BE82FA0;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (ZinDeconvLargeStrides::DeconvStride3And4 *)&v10[344 * v4];
  long long v16 = &v10[344 * v9];
  ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(v14, a2);
  uint64_t v15 = (char *)v14 + 344;
  std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ZinDeconvLargeStrides::DeconvStride3And4>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2111F69D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinDeconvLargeStrides::DeconvStride3And4>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDeconvLargeStrides::DeconvStride3And4>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDeconvLargeStrides::DeconvStride3And4>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>,std::reverse_iterator<ZinDeconvLargeStrides::DeconvStride3And4*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    int v12 = (ZinDeconvLargeStrides::DeconvStride3And4 *)(v11 + v10);
    v10 -= 344;
    ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4(v12, (const ZinDeconvLargeStrides::DeconvStride3And4 *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinDeconvLargeStrides::DeconvStride3And4>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 344;
    ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)(i - 344));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<ZinIrKernel>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::unique_ptr<ZinIrKernel>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (ZinIrKernel **)**a1;
  if (v2)
  {
    unint64_t v4 = (ZinIrKernel **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__push_back_slow_path<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>(uint64_t *a1, const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x5F417D05F417D0) {
    unint64_t v9 = 0xBE82FA0BE82FA0;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)&v10[344 * v4];
  long long v16 = &v10[344 * v9];
  ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(v14, a2);
  uint64_t v15 = (char *)v14 + 344;
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2111F6D30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>,std::reverse_iterator<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    int v12 = (ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::ConvLargeStrideDecomposedDesc(v12, (const ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 344;
    ZinConvLargeStrides::ConvLargeStrideDecomposedDesc::~ConvLargeStrideDecomposedDesc((ZinConvLargeStrides::ConvLargeStrideDecomposedDesc *)(i - 344));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ZinConvLargeStrides::ShuffledPaddedKernel_v3@<X0>(ZinIrKernel **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, void *a8@<X8>, ZinKernelSparsityCache *a9)
{
  unint64_t v17 = HIDWORD(a4);
  ZinIrKernel::GetWeightDimensions(*a1, (uint64_t)v62);
  v58[0] = v62[0];
  v58[1] = a3;
  uint64_t v18 = *a2;
  uint64_t v59 = a2[1];
  uint64_t v60 = v18;
  uint64_t v61 = a2[2];
  uint64_t v43 = v62[0];
  uint64_t v44 = a3;
  uint64_t v45 = v59;
  uint64_t v53 = v18;
  details::ZinIrMappedData_Impl<ZinKernelPosition>::ZinIrMappedData_Impl((uint64_t)v56, v62[0] * a3 * v59 * v18 * v61);
  uint64_t v19 = (int)a4;
  int v47 = v17;
  uint64_t v48 = a4 >> 32;
  uint64_t v40 = a6;
  uint64_t v41 = a8;
  int v38 = (uint64_t *)a1;
  int v39 = a2;
  uint64_t v42 = a5;
  int v52 = a4;
  if ((int)v17 >= 3 && (int)a4 >= 3 || a7)
  {
    uint64_t v51 = (int)a4 * (uint64_t)SHIDWORD(a4);
  }
  else
  {
    uint64_t v51 = a4 >> 32;
    if ((int)a4 < 3)
    {
      uint64_t v50 = 1;
      uint64_t v51 = a4 >> 32;
      goto LABEL_6;
    }
  }
  uint64_t v50 = a4 >> 32;
LABEL_6:
  if (v43 < 1) {
    goto LABEL_48;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if ((int)v17 > 2) {
    int v22 = 1;
  }
  else {
    int v22 = a7;
  }
  if ((int)a4 > 2) {
    char v23 = 1;
  }
  else {
    char v23 = a7;
  }
  char v49 = v23;
  do
  {
    if (v44 < 1) {
      goto LABEL_47;
    }
    for (uint64_t i = 0; i < v44; ++i)
    {
      if (v45 < 1) {
        continue;
      }
      for (uint64_t j = 0; j < v45; ++j)
      {
        if (v53 < 1) {
          continue;
        }
        uint64_t v26 = 0;
        uint64_t v46 = v21;
        uint64_t v27 = 40 * v21;
        do
        {
          if (v22)
          {
            uint64_t v28 = i % v51 / v50 + j * v48;
            if (v49)
            {
              uint64_t v29 = i % v19 + v26 * v19;
              int v30 = v19;
LABEL_31:
              int v31 = v48;
              goto LABEL_33;
            }
            int v30 = 1;
            uint64_t v29 = v26;
            if (v47 >= 3) {
              goto LABEL_31;
            }
            int v30 = 1;
            uint64_t v29 = v26;
            int v31 = 1;
          }
          else
          {
            if (v52 >= 3) {
              int v30 = v19;
            }
            else {
              int v30 = 1;
            }
            if (v52 >= 3) {
              uint64_t v29 = i % v19 + v26 * v19;
            }
            else {
              uint64_t v29 = v26;
            }
            int v31 = 1;
            uint64_t v28 = j;
          }
LABEL_33:
          uint64_t v32 = i / (v31 * (uint64_t)v30);
          if (v32 >= v62[1] || v28 >= v62[2] || v29 >= v62[3]) {
            ZinAssertImpl("Read from out side of original weight");
          }
          int v35 = (*(uint64_t (**)(uint64_t))(*(void *)details::ZinIrMappedDataBase_Impl::backing_ + 24))(details::ZinIrMappedDataBase_Impl::backing_);
          uint64_t v36 = (uint64_t *)(v57 + v27);
          if (!v35) {
            uint64_t v36 = (uint64_t *)v56;
          }
          *uint64_t v36 = v20;
          v36[1] = v32;
          v36[2] = v28;
          v36[3] = v29;
          v36[4] = 0;
          ++v26;
          v27 += 40;
        }
        while (v53 > v26);
        uint64_t v21 = v46 + v26;
      }
    }
LABEL_47:
    ++v20;
  }
  while (v43 > v20);
LABEL_48:
  (*(void (**)(void **__return_ptr))(*(void *)v42 + 16))(&__p);
  ZinIrKernel::ShuffleKernel(*v38, (uint64_t)v56, *((_DWORD *)v39 + 6), *((_DWORD *)v39 + 7), *((_DWORD *)v39 + 8), *((_DWORD *)v39 + 9), *((_DWORD *)v39 + 10), v41, *((int *)v39 + 11), (uint64_t)v58, v40, a9, (long long *)v39 + 3, *((unsigned char *)v39 + 97), *((_DWORD *)v39 + 21));
  if (!*v41) {
    ZinAssertImpl("Failed to generate new kernel in ShuffledPaddedKernel_v3");
  }
  if (v55 < 0) {
    operator delete(__p);
  }
  return details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)v56);
}

void sub_2111F722C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v38, 0);
  if (a37 < 0) {
    operator delete(__p);
  }
  details::ZinIrMappedData_Impl<ZinKernelPosition>::~ZinIrMappedData_Impl((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelFormat,ZinIrConvInfo &,std::unique_ptr<ZinIrWeight>,decltype(nullptr),decltype(nullptr),ZinIrKernel*>()
{
}

void sub_2111F733C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = a11;
  a11 = 0;
  if (v14) {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a11, v14);
  }
  uint64_t v15 = a12;
  a12 = 0;
  if (v15) {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a12, v15);
  }
  MEMORY[0x21667D3C0](v12, 0x1032C40C25AA5B7);
  _Unwind_Resume(a1);
}

void ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Deconv with stride > 2 is not yet supported on depth axis\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Dilation factor should be 1 for Deconv with stride > 2\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Deconv with stride 4 is supported only for SAME mode\n", a5, a6, a7, a8, 0);
}

void ZinDeconvLargeStrides::HandleDeconvLargeKernelStrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Large stride deconv is not lowered\n", a5, a6, a7, a8, 0);
}

void ZinConvLargeStrides::HandleConvLargeKernelStrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Criterias for large kernel strides are not met due to large tensor dimensions\n", a5, a6, a7, a8, 0);
}

uint64_t ZinIrParallelExecution::FindFirstQualifiedPELayer(uint64_t a1, const ZinIrOpLayer *a2, unint64_t a3)
{
  uint64_t v3 = *(void *)a2;
  if (a3 >= (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3) {
    return 0;
  }
  unint64_t v4 = a3;
  while (!ZinIrParallelExecution::IsQualifiedPE(*(ZinIrParallelExecution **)(v3 + 8 * v4), a2))
  {
    ++v4;
    uint64_t v3 = *(void *)a2;
    if (v4 >= (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3) {
      return 0;
    }
  }
  return *(void *)(*(void *)a2 + 8 * v4);
}

BOOL ZinIrParallelExecution::IsQualifiedPE(ZinIrParallelExecution *this, const ZinIrOpLayer *a2)
{
  BOOL result = ZinIrOpLayer::IsPELayer(this);
  if (result)
  {
    if (*((void *)this + 25))
    {
      uint64_t v5 = *((void *)this + 11);
      uint64_t v4 = *((void *)this + 12);
      if (v5 == v4)
      {
        return 1;
      }
      else
      {
        uint64_t v6 = v5 + 8;
        do
        {
          int v7 = *(_DWORD *)(*(void *)(*(void *)(v6 - 8) + 64) + 8);
          BOOL result = v7 == 28;
          BOOL v8 = v7 != 28 || v6 == v4;
          v6 += 8;
        }
        while (!v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ZinIrParallelExecution::FindQualifiedConsecutiveNELayers(ZinIrHalParameters ***a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v71 = 0;
  int v72 = 0;
  uint64_t v73 = 0;
  uint64_t v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  memset(v47, 0, sizeof(v47));
  BOOL v8 = operator new(8uLL);
  uint64_t v59 = v8;
  *BOOL v8 = 0;
  uint64_t v61 = v8 + 1;
  uint64_t v60 = v8 + 1;
  uint64_t v62 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v64 = _Q0;
  long long v65 = _Q0;
  long long v66 = _Q0;
  long long v67 = _Q0;
  uint64_t v63 = 0;
  uint64_t v68 = 0;
  char v69 = 0;
  uint64_t v70 = 0;
  ZinIrHalParameters::GetOperationCondition(**a1, *((double *)(*a1)[1] + 13), *((_DWORD *)(*a1)[1] + 28), *((_DWORD *)(*a1)[1] + 29), (uint64_t)v46);
  uint64_t v14 = (uint64_t)**a1;
  LOWORD(__p) = 257;
  BYTE2(__p) = 1;
  *(_DWORD *)((char *)&__p + 3) = 0;
  *(_DWORD *)((char *)&__p + 6) = 0;
  BYTE10(__p) = 1;
  *(_DWORD *)((char *)&__p + 11) = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)v45, v14, v46, (uint64_t *)&__p);
  if (a3 >= a4)
  {
LABEL_52:
    uint64_t v41 = 0;
    goto LABEL_53;
  }
  double v15 = 0.0;
  do
  {
    long long v16 = *(ZinIrOpLayer **)(*a2 + 8 * a3);
    if (!ZinIrOpLayer::IsNELayer(v16)) {
      goto LABEL_39;
    }
    unint64_t v17 = (ZinIrOpLayer **)*((void *)v16 + 11);
    uint64_t v18 = (ZinIrOpLayer **)*((void *)v16 + 12);
    while (v17 != v18)
    {
      if (ZinIrOpLayer::IsPELayer(*v17)) {
        goto LABEL_39;
      }
      ++v17;
    }
    long long __p = 0uLL;
    uint64_t v44 = 0;
    uint64_t v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v44, 1uLL);
    *uint64_t v19 = v16;
    uint64_t v21 = (ZinANELayer **)(v19 + 1);
    int v22 = (char *)*((void *)&__p + 1);
    char v23 = (char *)__p;
    long long v24 = v19;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
      {
        uint64_t v25 = *((void *)v22 - 1);
        v22 -= 8;
        *--long long v24 = v25;
      }
      while (v22 != v23);
      int v22 = (char *)__p;
    }
    *(void *)&long long __p = v24;
    *((void *)&__p + 1) = v19 + 1;
    uint64_t v44 = (char *)&v19[v20];
    if (v22) {
      operator delete(v22);
    }
    *((void *)&__p + 1) = v21;
    uint64_t v26 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(*a2 + 8 * v26)))
        {
          uint64_t v27 = *(ZinIrOpLayer **)(*a2 + 8 * v26);
          BOOL IsPELayer = ZinIrOpLayer::IsPELayer(v27);
          uint64_t v21 = (ZinANELayer **)*((void *)&__p + 1);
          if (IsPELayer) {
            goto LABEL_35;
          }
          if (*((void *)&__p + 1) >= (unint64_t)v44)
          {
            uint64_t v30 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
            if ((unint64_t)(v30 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v31 = (uint64_t)&v44[-__p] >> 2;
            if (v31 <= v30 + 1) {
              unint64_t v31 = v30 + 1;
            }
            if ((unint64_t)&v44[-__p] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32) {
              long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v44, v32);
            }
            else {
              long long v33 = 0;
            }
            BOOL v34 = (ZinIrOpLayer **)&v33[8 * v30];
            *BOOL v34 = v27;
            uint64_t v29 = v34 + 1;
            int v35 = (char *)*((void *)&__p + 1);
            uint64_t v36 = (char *)__p;
            if (*((void *)&__p + 1) != (void)__p)
            {
              do
              {
                uint64_t v37 = (ZinIrOpLayer *)*((void *)v35 - 1);
                v35 -= 8;
                *--BOOL v34 = v37;
              }
              while (v35 != v36);
              int v35 = (char *)__p;
            }
            *(void *)&long long __p = v34;
            *((void *)&__p + 1) = v29;
            uint64_t v44 = &v33[8 * v32];
            if (v35) {
              operator delete(v35);
            }
          }
          else
          {
            **((void **)&__p + 1) = v27;
            uint64_t v29 = v21 + 1;
          }
          *((void *)&__p + 1) = v29;
        }
        ++v26;
      }
      while (v26 != a4);
      uint64_t v21 = (ZinANELayer **)*((void *)&__p + 1);
      uint64_t v26 = a4;
    }
LABEL_35:
    int v38 = (ZinANELayer **)__p;
    if ((unint64_t)((unint64_t)v21 - __p) < 0x28)
    {
      int v39 = 4;
      if (!(void)__p) {
        goto LABEL_38;
      }
LABEL_37:
      *((void *)&__p + 1) = v38;
      operator delete(v38);
      goto LABEL_38;
    }
    double v40 = 0.0;
    while (v38 != v21)
    {
      if (ZinANELayer::CalculatePerf(*v38, (ZinIrPerf *)v45, (ZinPerfDescriptor *)v47))
      {
        int v39 = 1;
        goto LABEL_49;
      }
      double v40 = v40 + *((double *)&v48 + 1);
      ++v38;
    }
    if (v40 <= v15)
    {
      int v39 = 0;
      a3 = v26;
    }
    else
    {
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v71, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
      int v39 = 0;
      a3 = v26;
      double v15 = v40;
    }
LABEL_49:
    int v38 = (ZinANELayer **)__p;
    if ((void)__p) {
      goto LABEL_37;
    }
LABEL_38:
    if ((v39 | 4) != 4) {
      goto LABEL_52;
    }
LABEL_39:
    ++a3;
  }
  while (a3 < a4);
  if (v15 == 0.0) {
    goto LABEL_52;
  }
  uint64_t v41 = *v71;
LABEL_53:
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v45);
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
  if (v71)
  {
    int v72 = v71;
    operator delete(v71);
  }
  return v41;
}

void sub_2111F79E8(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (__p) {
    operator delete(__p);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)va);
  int v7 = (void *)STACK[0x478];
  if (STACK[0x478])
  {
    STACK[0x480] = (unint64_t)v7;
    operator delete(v7);
  }
  BOOL v8 = *(void **)(v5 - 120);
  if (v8)
  {
    *(void *)(v5 - 112) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void ZinIrParallelExecution::PromoteEngineLayerSchedule(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  long long __p = 0;
  long long v52 = 0;
  long long v53 = 0;
  int v7 = (uint64_t *)a3[11];
  BOOL v8 = (uint64_t *)a3[12];
  if (v7 == v8)
  {
    unint64_t v9 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *v7;
      if ((*(_DWORD *)(*(void *)(*v7 + 64) + 8) - 28) <= 2 && *(void *)(v10 + 48) > a4)
      {
        if (v9 >= v53)
        {
          uint64_t v11 = (v9 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v12 = (v53 - (unsigned char *)__p) >> 2;
          if (v12 <= v11 + 1) {
            unint64_t v12 = v11 + 1;
          }
          if ((unint64_t)(v53 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v13);
          }
          else {
            uint64_t v14 = 0;
          }
          double v15 = &v14[8 * v11];
          *(void *)double v15 = v10;
          unint64_t v9 = v15 + 8;
          unint64_t v17 = (char *)__p;
          long long v16 = v52;
          if (v52 != __p)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            long long v16 = (char *)__p;
          }
          long long __p = v15;
          long long v52 = v9;
          long long v53 = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(void *)unint64_t v9 = v10;
          v9 += 8;
        }
        long long v52 = v9;
      }
      ++v7;
    }
    while (v7 != v8);
    uint64_t v19 = v53;
    if (v9 < v53)
    {
      *(void *)unint64_t v9 = a3;
      uint64_t v20 = v9 + 8;
      goto LABEL_40;
    }
  }
  uint64_t v21 = (v9 - (unsigned char *)__p) >> 3;
  if ((unint64_t)(v21 + 1) >> 61) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v22 = v19 - (unsigned char *)__p;
  uint64_t v23 = v22 >> 2;
  if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
    uint64_t v23 = v21 + 1;
  }
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24) {
    uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v24);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = &v25[8 * v21];
  uint64_t v27 = &v25[8 * v24];
  *(void *)uint64_t v26 = a3;
  uint64_t v20 = v26 + 8;
  uint64_t v29 = (char *)__p;
  uint64_t v28 = v52;
  if (v52 != __p)
  {
    do
    {
      uint64_t v30 = *((void *)v28 - 1);
      v28 -= 8;
      *((void *)v26 - 1) = v30;
      v26 -= 8;
    }
    while (v28 != v29);
    uint64_t v28 = (char *)__p;
  }
  long long __p = v26;
  long long v52 = v20;
  long long v53 = v27;
  if (v28) {
    operator delete(v28);
  }
LABEL_40:
  long long v52 = v20;
  unint64_t v32 = (uint64_t *)a3[14];
  for (uint64_t i = (uint64_t *)a3[15]; v32 != i; ++v32)
  {
    uint64_t v33 = *v32;
    if (*(_DWORD *)(*(void *)(*v32 + 64) + 8) == 31 && *(void *)(v33 + 48) > a4)
    {
      if (v20 >= v53)
      {
        uint64_t v34 = (v20 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v34 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v35 = (v53 - (unsigned char *)__p) >> 2;
        if (v35 <= v34 + 1) {
          unint64_t v35 = v34 + 1;
        }
        if ((unint64_t)(v53 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        int v38 = &v37[8 * v34];
        *(void *)int v38 = v33;
        uint64_t v20 = v38 + 8;
        double v40 = (char *)__p;
        int v39 = v52;
        if (v52 != __p)
        {
          do
          {
            uint64_t v41 = *((void *)v39 - 1);
            v39 -= 8;
            *((void *)v38 - 1) = v41;
            v38 -= 8;
          }
          while (v39 != v40);
          int v39 = (char *)__p;
        }
        long long __p = v38;
        long long v52 = v20;
        long long v53 = &v37[8 * v36];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *(void *)uint64_t v20 = v33;
        v20 += 8;
      }
      long long v52 = v20;
    }
  }
  uint64_t v42 = (char *)__p;
  if (__p == v20)
  {
    uint64_t v44 = v20;
  }
  else
  {
    uint64_t v43 = *(void **)(a2 + 8);
    do
    {
      uint64_t v50 = *(void *)v42;
      uint64_t v43 = std::remove[abi:ne180100]<std::__wrap_iter<ZinIrOpLayer **>,ZinIrOpLayer *>(*(void **)a2, v43, &v50);
      if (*(void **)(a2 + 8) != v43) {
        *(void *)(a2 + 8) = v43;
      }
      v42 += 8;
    }
    while (v42 != v20);
    uint64_t v44 = (char *)__p;
    uint64_t v20 = v52;
  }
  std::vector<ZinGOCLayer const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinGOCLayer const**>,std::__wrap_iter<ZinGOCLayer const**>>(a2, *(void *)a2 + 8 * a4, v44, v20, (v20 - v44) >> 3);
  uint64_t v45 = *(void *)a2;
  uint64_t v46 = *(void *)(a2 + 8);
  uint64_t v47 = v46 - *(void *)a2;
  if (v46 != *(void *)a2)
  {
    uint64_t v48 = 0;
    unint64_t v49 = v47 >> 3;
    if (v49 <= 1) {
      unint64_t v49 = 1;
    }
    do
    {
      *(void *)(*(void *)(v45 + 8 * v48) + 48) = v48;
      ++v48;
    }
    while (v49 != v48);
  }
  if (__p)
  {
    long long v52 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2111F7E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::remove[abi:ne180100]<std::__wrap_iter<ZinIrOpLayer **>,ZinIrOpLayer *>(void *result, void *a2, void *a3)
{
  if (result == a2)
  {
LABEL_4:
    BOOL result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }
  return result;
}

void ZinIrParallelExecution::PromoteParallelExecution(uint64_t QualifiedConsecutiveNELayers, const ZinIrOpLayer *a2)
{
  uint64_t v3 = (ZinIrHalParameters ***)QualifiedConsecutiveNELayers;
  unint64_t v4 = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = &_os_log_internal;
  do
  {
    uint64_t FirstQualifiedPELayer = ZinIrParallelExecution::FindFirstQualifiedPELayer(QualifiedConsecutiveNELayers, a2, v4);
    if (!FirstQualifiedPELayer) {
      break;
    }
    uint64_t v7 = FirstQualifiedPELayer;
    QualifiedConsecutiveNELayers = ZinIrParallelExecution::FindQualifiedConsecutiveNELayers(v3, a2, v4, *(void *)(FirstQualifiedPELayer + 48));
    uint64_t v8 = *(void *)(v7 + 48);
    if (QualifiedConsecutiveNELayers)
    {
      uint64_t v9 = QualifiedConsecutiveNELayers;
      ZinIrParallelExecution::PromoteEngineLayerSchedule(QualifiedConsecutiveNELayers, (uint64_t)a2, (void *)v7, *(void *)(QualifiedConsecutiveNELayers + 48));
      QualifiedConsecutiveNELayers = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
      if (QualifiedConsecutiveNELayers)
      {
        uint64_t v10 = (void *)(v7 + 24);
        if (*(char *)(v7 + 47) < 0) {
          uint64_t v10 = (void *)*v10;
        }
        uint64_t v11 = *(void *)(v9 + 48);
        *(_DWORD *)buf = 136315394;
        unint64_t v13 = v10;
        __int16 v14 = 2048;
        uint64_t v15 = v11;
        _os_log_impl(&dword_210C72000, v5, OS_LOG_TYPE_INFO, "[ZinIrParallelExecution] promote layer %s to schedule %ld", buf, 0x16u);
      }
    }
    unint64_t v4 = v8 + 1;
  }
  while (v8 + 1 < (unint64_t)((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
}

uint64_t ZinIrOpt::TransposeReshapeCollapser::TransposeReshapeCollapser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v7 = a1 + 32;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = a3;
  *(void *)(a1 + 112) = a4;
  *(void *)(a1 + 120) = a5;
  *(void *)(a1 + 128) = a6;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 112) + 32))(*(void *)(a1 + 112), 0, 0);
  DimensionOrderHint::DimensionOrderHint(__p, 2);
  ZinReshapeLayerUtils::GetReshapedDimensions((ZinReshapeLayerUtils *)(v8 + 48), (const ZinTensorDimensions *)(v9 + 48), (const ZinTensorDimensions *)__p, 0, (char **)&v13);
  uint64_t v10 = *(void **)v7;
  if (*(void *)v7)
  {
    *(void *)(a1 + 40) = v10;
    operator delete(v10);
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = v13;
  *(void *)(a1 + 48) = v14;
  uint64_t v14 = 0;
  long long v13 = 0uLL;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 24) = ZinIrOpt::TransposeReshapeCollapser::QualificationCheck((ZinIrOpt::TransposeReshapeCollapser *)a1);
  return a1;
}

void sub_2111F8134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 88))
  {
    long long v13 = *(void **)(v10 + 56);
    if (v13)
    {
      *(void *)(v10 + 64) = v13;
      operator delete(v13);
    }
  }
  uint64_t v14 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 40) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinIrOpt::TransposeReshapeCollapser::QualificationCheck(ZinIrOpt::TransposeReshapeCollapser *this)
{
  uint64_t v1 = *(ZinIrOpLayer ***)(*((void *)this + 12) + 88);
  if (*(void *)(*((void *)this + 12) + 96) - (void)v1 > 8uLL
    || *(void *)(*((void *)this + 13) + 120) - *(void *)(*((void *)this + 13) + 112) > 8uLL
    || !ZinIrOpLayer::IsIntermediate(*v1)
    || !ZinIrOpLayer::IsIntermediate(**(ZinIrOpLayer ***)(*((void *)this + 13) + 112)))
  {
    return 0;
  }
  uint64_t v3 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(**((void **)this + 14) + 32))(*((void *)this + 14), 0, 0);
  if (ZinIrTensor::HasFlexDimensionOrderHint(v3)) {
    goto LABEL_24;
  }
  unint64_t v4 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(**((void **)this + 14) + 32))(*((void *)this + 14), 0, 0);
  ZinIrTensor::GetDimensionOrderHint(v4, (uint64_t)&__p);
  DimensionOrderHint::DimensionOrderHint(&v27, 2);
  uint64_t v5 = __p;
  if (v28 - v27 == v25 - (unsigned char *)__p)
  {
    if (v27 == v28)
    {
      BOOL v10 = 0;
    }
    else
    {
      uint64_t v6 = v27 + 4;
      uint64_t v7 = (int *)__p;
      do
      {
        int v8 = *v7++;
        int v9 = *((_DWORD *)v6 - 1);
        BOOL v10 = v9 != v8;
        BOOL v11 = v9 != v8 || v6 == v28;
        v6 += 4;
      }
      while (!v11);
    }
  }
  else
  {
    BOOL v10 = 1;
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
    uint64_t v5 = __p;
  }
  if (v5)
  {
    uint64_t v25 = v5;
    operator delete(v5);
  }
  if (v10) {
    return 0;
  }
LABEL_24:
  int v14 = *(_DWORD *)((*(uint64_t (**)(void, void, void))(**((void **)this + 12) + 32))(*((void *)this + 12), 0, 0)+ 88);
  ZinIrOpLayer::GetInputTensorDimensions(*((ZinIrOpLayer **)this + 12), &__p);
  int v31 = v14;
  long long v15 = *(_OWORD *)__p;
  long long v16 = *((_OWORD *)__p + 1);
  uint64_t v34 = *((void *)__p + 4);
  long long v33 = v16;
  long long v32 = v15;
  __int16 v35 = 0;
  int64x2_t v36 = vdupq_n_s64(1uLL);
  char v37 = 0;
  char v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  int v41 = 0;
  uint64_t v25 = __p;
  operator delete(__p);
  uint64_t v17 = (*(uint64_t (**)(void, void, void))(**((void **)this + 13) + 32))(*((void *)this + 13), 0, 0);
  ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v27, v17 + 48);
  ZinReshapeValidator<ZinIrReshapeUnitInfo,ZinIrTensorInfo>::ZinReshapeValidator((uint64_t)&__p, *((void *)this + 15), (uint64_t)&v27, (long long *)&v31);
  ZinReshapeValidator<ZinIrReshapeUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&__p);
  if (v26) {
    goto LABEL_36;
  }
  ZinIrOpLayer::GetInputTensorDimensions(*((ZinIrOpLayer **)this + 12), &v21);
  uint64_t v18 = *((void *)v21 + 3);
  uint64_t v19 = *(void *)((*(uint64_t (**)(void, void, void))(**((void **)this + 13) + 32))(*((void *)this + 13), 0, 0)+ 72);
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v18 != v19) {
    goto LABEL_36;
  }
  LODWORD(v21) = 4;
  if (!ZinIrOpt::TransposeReshapeCollapser::BuildDimensionMapping((uint64_t)this, (unsigned int *)&v21)
    || *((_DWORD *)this + 5) != 4)
  {
    goto LABEL_36;
  }
  ZinIrOpt::TransposeReshapeCollapser::InferDimensionOrderHintForNewReshape((ZinReshapeLayer **)this, (uint64_t)&v21);
  std::__optional_storage_base<DimensionOrderHint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DimensionOrderHint,false>>((uint64_t)this + 56, (uint64_t)&v21);
  if (v23 && v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (*((unsigned char *)this + 88)
    && DimensionOrderHint::IsSupported((ZinIrOpt::TransposeReshapeCollapser *)((char *)this + 56)))
  {
    InputTensor = (ZinReshapeLayer **)ZinIrOpLayer::GetInputTensor(*((ZinIrOpLayer **)this + 12), 0);
    BOOL IsTensorFamilyCompatibleWithDimensionOrder = ZinIrTensor::IsTensorFamilyCompatibleWithDimensionOrder(InputTensor, (ZinIrOpt::TransposeReshapeCollapser *)((char *)this + 56));
  }
  else
  {
LABEL_36:
    BOOL IsTensorFamilyCompatibleWithDimensionOrder = 0;
  }
  ZinReshapeValidator<ZinIrReshapeUnitInfo,ZinIrTensorInfo>::~ZinReshapeValidator((uint64_t)&__p);
  uint64_t v27 = (char *)&unk_26C34D9A0;
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v27);
  return IsTensorFamilyCompatibleWithDimensionOrder;
}

void sub_2111F8514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

BOOL ZinIrOpt::TransposeReshapeCollapser::BuildDimensionMapping(uint64_t a1, unsigned int *a2)
{
  int v4 = *a2;
  uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(*(ZinReshapeLayer **)(a1 + 96));
  int DstDimension = ZinIrTransposeInfo::GetDstDimension(ReshapeInfo, *a2);
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = DstDimension;
  uint64_t v7 = ZinIrOpt::TransposeReshapeCollapser::ComputeDimensionMappingDuringReshape(a1, (int *)(a1 + 4));
  uint64_t v8 = v7 & 0xFF00000000;
  if ((v7 & 0xFF00000000) != 0)
  {
    uint64_t v9 = v7;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 12) = v7;
    uint64_t v10 = ZinReshapeLayer::GetReshapeInfo(*(ZinReshapeLayer **)(a1 + 104));
    int v11 = ZinIrTransposeInfo::GetDstDimension(v10, v9);
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 20) = v11;
  }
  return v8 != 0;
}

uint64_t ZinIrOpt::TransposeReshapeCollapser::InferDimensionOrderHintForNewReshape@<X0>(ZinReshapeLayer **this@<X0>, uint64_t a2@<X8>)
{
  memset(v46, 0, sizeof(v46));
  int v47 = 1065353216;
  uint64_t ReshapeInfo = (ZinIrTransposeInfo *)ZinReshapeLayer::GetReshapeInfo(this[12]);
  ZinIrTransposeInfo::GetInverseMappings(ReshapeInfo, (char **)v41);
  uint64_t v6 = (void *)*((void *)&v41[0] + 1);
  uint64_t v5 = *(void **)&v41[0];
  if (*(void *)&v41[0] != *((void *)&v41[0] + 1))
  {
    do
    {
      *(void *)&long long v33 = *v5;
      int v7 = DWORD1(v33);
      *(void *)&long long __p = &v33;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDimension>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDimension>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDimension>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDimension>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v46, (int *)&v33, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v7;
      ++v5;
    }
    while (v5 != v6);
    uint64_t v5 = *(void **)&v41[0];
  }
  if (v5)
  {
    *((void *)&v41[0] + 1) = v5;
    operator delete(v5);
  }
  ZinIrOpt::TransposeReshapeCollapser::FindNewDimensionOrderCandidate((uint64_t)this, v46, (uint64_t)&v43);
  ZinIrOpLayer::GetInputTensorDimensions(this[12], (void **)&__p);
  long long v9 = *(_OWORD *)__p;
  long long v8 = *(_OWORD *)(__p + 16);
  uint64_t v42 = *(void *)(__p + 32);
  v41[0] = v9;
  v41[1] = v8;
  *((void *)&__p + 1) = __p;
  operator delete((void *)__p);
  uint64_t v10 = (*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)this[14] + 32))(this[14], 0, 0);
  long long v11 = *(_OWORD *)(v10 + 64);
  long long __p = *(_OWORD *)(v10 + 48);
  long long v39 = v11;
  uint64_t v40 = *(void *)(v10 + 80);
  ZinIrOpt::TransposeReshapeCollapser::GetPreTransposeAxesToBeReshaped((uint64_t)this, v46, (int **)&v36);
  unint64_t v12 = this[4];
  if (this[5] != v12)
  {
    unint64_t v13 = 0;
    do
    {
      if (v13 >= (v37 - (unsigned char *)v36) >> 2) {
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      }
      int v14 = *((_DWORD *)v36 + v13);
      uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)&__p, *((_DWORD *)v12 + v13));
      if (SetValueAtDimension<ZinTensorDimensions>(v41, v14, ValueAt))
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 32) = 0;
        goto LABEL_42;
      }
      ++v13;
      unint64_t v12 = this[4];
    }
    while (v13 < (this[5] - v12) >> 2);
  }
  uint64_t v16 = (*(uint64_t (**)(ZinReshapeLayer *, void, void))(*(void *)this[13] + 32))(this[13], 0, 0);
  long long v17 = *(_OWORD *)(v16 + 64);
  long long v33 = *(_OWORD *)(v16 + 48);
  long long v34 = v17;
  uint64_t v35 = *(void *)(v16 + 80);
  ZinReshapeLayerUtils::GetReshapedDimensions((ZinReshapeLayerUtils *)v41, (const ZinTensorDimensions *)&v33, (const ZinTensorDimensions *)&v43, 0, (char **)&v31);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)&v43, &v29);
  uint64_t v18 = (char *)v29 + 16;
  int64_t v19 = v30 - ((unsigned char *)v29 + 20);
  if (v30 != (char *)v29 + 20) {
    memmove((char *)v29 + 16, (char *)v29 + 20, v30 - ((unsigned char *)v29 + 20));
  }
  uint64_t v30 = &v18[v19];
  uint64_t v20 = v32;
  while (v20 != v31)
  {
    int v21 = *--v20;
    uint64_t v22 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v41, v21);
    if (v22 != 1 && v22 != *((void *)&v34 + 1))
    {
      FindDimension((const ZinTensorDimensions *)&v33, v22, &v28);
      std::vector<int>::pointer begin = v28.__begin_;
      if (v28.__begin_ == v28.__end_)
      {
        int v26 = 1;
        if (!v28.__begin_) {
          goto LABEL_34;
        }
      }
      else
      {
        while (1)
        {
          if (*v20 != *begin)
          {
            uint64_t v25 = (char *)v29;
            if (v29 != v30)
            {
              while (*(_DWORD *)v25 != *begin)
              {
                v25 += 4;
                if (v25 == v30)
                {
                  uint64_t v25 = v30;
                  break;
                }
              }
            }
            if (v25 == v30) {
              break;
            }
            uint64_t v30 = v25;
            if (v29 == v25) {
              break;
            }
          }
          if (++begin == v28.__end_)
          {
            int v26 = 1;
            goto LABEL_32;
          }
        }
        int v26 = 0;
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 32) = 0;
LABEL_32:
        std::vector<int>::pointer begin = v28.__begin_;
        if (!v28.__begin_) {
          goto LABEL_34;
        }
      }
      v28.__end_ = begin;
      operator delete(begin);
LABEL_34:
      if (!v26) {
        goto LABEL_37;
      }
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((void *)a2, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 2);
  *(_DWORD *)(a2 + 24) = v45;
  *(unsigned char *)(a2 + 32) = 1;
LABEL_37:
  if (v29)
  {
    uint64_t v30 = (char *)v29;
    operator delete(v29);
  }
  if (v31)
  {
    long long v32 = v31;
    operator delete(v31);
  }
LABEL_42:
  if (v36)
  {
    char v37 = v36;
    operator delete(v36);
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v46);
}

void sub_2111F89C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a24) {
    operator delete(a24);
  }
  int64x2_t v36 = *(void **)(v34 - 160);
  if (v36)
  {
    *(void *)(v34 - 152) = v36;
    operator delete(v36);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v34 - 128);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::TransposeReshapeCollapser::ComputeDimensionMappingDuringReshape(uint64_t a1, int *a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  uint64_t v3 = *(_DWORD **)(a1 + 40);
  int v4 = *a2;
  if (v2 == v3)
  {
LABEL_4:
    unsigned int v7 = v4 & 0xFFFFFF00;
    uint64_t v8 = 0x100000000;
  }
  else
  {
    while (v4 != *v2)
    {
      if (++v2 == v3) {
        goto LABEL_4;
      }
    }
    ZinIrOpLayer::GetInputTensorDimensions(*(ZinIrOpLayer **)(a1 + 112), __p);
    uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)__p[0], *a2);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    for (uint64_t i = *(int **)(a1 + 32); i != *(int **)(a1 + 40); ++i)
    {
      uint64_t v11 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 112) + 32))(*(void *)(a1 + 112), 0, 0);
      uint64_t v12 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v11 + 48), *i);
      if (v12 != 1)
      {
        if (v12 == ValueAt)
        {
          int v4 = *i;
          goto LABEL_4;
        }
        break;
      }
    }
    uint64_t v8 = 0;
    LOBYTE(v4) = 0;
    unsigned int v7 = 0;
  }
  return v8 | v7 | v4;
}

void sub_2111F8B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrOpt::TransposeReshapeCollapser::GetPreTransposeAxesToBeReshaped(uint64_t a1@<X0>, void *a2@<X1>, int **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(int **)(a1 + 32);
  int v4 = *(int **)(a1 + 40);
  if (v3 != v4)
  {
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      int v27 = *v3;
      uint64_t v8 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v27);
      long long v9 = v8;
      if (v8)
      {
        uint64_t v11 = a3[1];
        unint64_t v10 = (unint64_t)a3[2];
        if ((unint64_t)v11 >= v10)
        {
          long long v15 = *a3;
          uint64_t v16 = v11 - *a3;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            goto LABEL_37;
          }
          uint64_t v18 = v10 - (void)v15;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(v7, v19);
            long long v15 = *a3;
            uint64_t v11 = a3[1];
          }
          else
          {
            uint64_t v20 = 0;
          }
          unint64_t v24 = &v20[4 * v16];
          *(_DWORD *)unint64_t v24 = *((_DWORD *)v9 + 5);
          int v14 = (int *)(v24 + 4);
          while (v11 != v15)
          {
            int v25 = *--v11;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }
LABEL_33:
          *a3 = (int *)v24;
          a3[1] = v14;
          a3[2] = (int *)&v20[4 * v19];
          if (v15) {
            operator delete(v15);
          }
          goto LABEL_35;
        }
        int v12 = *((_DWORD *)v8 + 5);
      }
      else
      {
        uint64_t v11 = a3[1];
        unint64_t v13 = (unint64_t)a3[2];
        if ((unint64_t)v11 >= v13)
        {
          long long v15 = *a3;
          uint64_t v21 = v11 - *a3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
LABEL_37:
          }
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          uint64_t v23 = v13 - (void)v15;
          if (v23 >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v22;
          }
          if (v19)
          {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>(v7, v19);
            long long v15 = *a3;
            uint64_t v11 = a3[1];
          }
          else
          {
            uint64_t v20 = 0;
          }
          unint64_t v24 = &v20[4 * v21];
          *(_DWORD *)unint64_t v24 = v27;
          int v14 = (int *)(v24 + 4);
          while (v11 != v15)
          {
            int v26 = *--v11;
            *((_DWORD *)v24 - 1) = v26;
            v24 -= 4;
          }
          goto LABEL_33;
        }
        int v12 = v27;
      }
      *uint64_t v11 = v12;
      int v14 = v11 + 1;
LABEL_35:
      a3[1] = v14;
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_2111F8D68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrOpt::TransposeReshapeCollapser::FindNewDimensionOrderCandidate(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v49, 0, sizeof(v49));
  std::vector<unsigned int>::reserve(&v49, 5uLL);
  for (uint64_t i = 0; i != 5; ++i)
  {
    int v7 = dword_211EFCF3C[i];
    if (v7 != *(_DWORD *)(a1 + 8))
    {
      std::vector<int>::pointer end = v49.__end_;
      if (v49.__end_ >= v49.__end_cap_.__value_)
      {
        std::vector<int>::pointer begin = v49.__begin_;
        int64_t v11 = v49.__end_ - v49.__begin_;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        int64_t v13 = (char *)v49.__end_cap_.__value_ - (char *)v49.__begin_;
        if (((char *)v49.__end_cap_.__value_ - (char *)v49.__begin_) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v49.__end_cap_, v14);
          std::vector<int>::pointer begin = v49.__begin_;
          std::vector<int>::pointer end = v49.__end_;
        }
        else
        {
          long long v15 = 0;
        }
        uint64_t v16 = (int *)&v15[4 * v11];
        *uint64_t v16 = v7;
        long long v9 = v16 + 1;
        while (end != begin)
        {
          int v17 = *--end;
          *--uint64_t v16 = v17;
        }
        v49.__begin_ = v16;
        v49.__end_ = v9;
        v49.__end_cap_.__value_ = (int *)&v15[4 * v14];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *v49.__end_ = v7;
        long long v9 = end + 1;
      }
      v49.__end_ = v9;
    }
  }
  memset(&v48, 0, sizeof(v48));
  std::vector<unsigned int>::reserve(&v48, 5uLL);
  std::vector<int>::pointer v18 = v49.__begin_;
  std::vector<int>::pointer v19 = v49.__end_;
  if (v49.__begin_ != v49.__end_)
  {
    while (1)
    {
      int v47 = 0;
      int v47 = *v18;
      uint64_t v20 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v47);
      uint64_t v21 = v20;
      if (v20)
      {
        std::vector<int>::pointer v22 = v48.__end_;
        if (v48.__end_ >= v48.__end_cap_.__value_)
        {
          std::vector<int>::pointer v25 = v48.__begin_;
          int64_t v26 = v48.__end_ - v48.__begin_;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            goto LABEL_78;
          }
          int64_t v28 = (char *)v48.__end_cap_.__value_ - (char *)v48.__begin_;
          if (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v48.__end_cap_, v29);
            std::vector<int>::pointer v25 = v48.__begin_;
            std::vector<int>::pointer v22 = v48.__end_;
          }
          else
          {
            uint64_t v30 = 0;
          }
          uint64_t v34 = (int *)&v30[4 * v26];
          *uint64_t v34 = *((_DWORD *)v21 + 5);
          unint64_t v24 = v34 + 1;
          while (v22 != v25)
          {
            int v35 = *--v22;
            *--uint64_t v34 = v35;
          }
LABEL_52:
          v48.__begin_ = v34;
          v48.__end_ = v24;
          v48.__end_cap_.__value_ = (int *)&v30[4 * v29];
          if (v25) {
            operator delete(v25);
          }
          goto LABEL_54;
        }
        int v23 = *((_DWORD *)v20 + 5);
      }
      else
      {
        std::vector<int>::pointer v22 = v48.__end_;
        if (v48.__end_ >= v48.__end_cap_.__value_)
        {
          std::vector<int>::pointer v25 = v48.__begin_;
          int64_t v31 = v48.__end_ - v48.__begin_;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62) {
LABEL_78:
          }
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          int64_t v33 = (char *)v48.__end_cap_.__value_ - (char *)v48.__begin_;
          if (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 1 > v32) {
            unint64_t v32 = v33 >> 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v32;
          }
          if (v29)
          {
            uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v48.__end_cap_, v29);
            std::vector<int>::pointer v25 = v48.__begin_;
            std::vector<int>::pointer v22 = v48.__end_;
          }
          else
          {
            uint64_t v30 = 0;
          }
          uint64_t v34 = (int *)&v30[4 * v31];
          *uint64_t v34 = v47;
          unint64_t v24 = v34 + 1;
          while (v22 != v25)
          {
            int v36 = *--v22;
            *--uint64_t v34 = v36;
          }
          goto LABEL_52;
        }
        int v23 = v47;
      }
      *std::vector<int>::pointer v22 = v23;
      unint64_t v24 = v22 + 1;
LABEL_54:
      v48.__end_ = v24;
      if (++v18 == v19) {
        goto LABEL_57;
      }
    }
  }
  unint64_t v24 = v48.__end_;
LABEL_57:
  if (v24 >= v48.__end_cap_.__value_)
  {
    std::vector<int>::pointer v38 = v48.__begin_;
    uint64_t v39 = v24 - v48.__begin_;
    unint64_t v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 62) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v41 = (char *)v48.__end_cap_.__value_ - (char *)v48.__begin_;
    if (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 1 > v40) {
      unint64_t v40 = v41 >> 1;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v48.__end_cap_, v42);
      std::vector<int>::pointer v38 = v48.__begin_;
      unint64_t v24 = v48.__end_;
    }
    else
    {
      uint64_t v43 = 0;
    }
    uint64_t v44 = (int *)&v43[4 * v39];
    int v45 = (int *)&v43[4 * v42];
    *uint64_t v44 = 4;
    char v37 = v44 + 1;
    while (v24 != v38)
    {
      int v46 = *--v24;
      *--uint64_t v44 = v46;
    }
    v48.__begin_ = v44;
    v48.__end_ = v37;
    v48.__end_cap_.__value_ = v45;
    if (v38) {
      operator delete(v38);
    }
  }
  else
  {
    *unint64_t v24 = 4;
    char v37 = v24 + 1;
  }
  v48.__end_ = v37;
  DimensionOrderHint::DimensionOrderHint(a3, &v48);
  if (v48.__begin_)
  {
    v48.__end_ = v48.__begin_;
    operator delete(v48.__begin_);
  }
  if (v49.__begin_)
  {
    v49.__end_ = v49.__begin_;
    operator delete(v49.__begin_);
  }
}

void sub_2111F914C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrOpt::TransposeReshapeCollapser::ExecuteTransform(ZinIrOpt::TransposeReshapeCollapser *this)
{
  uint64_t v2 = *((void *)this + 14);
  if (*(char *)(v2 + 47) >= 0) {
    size_t v3 = *(unsigned __int8 *)(v2 + 47);
  }
  else {
    size_t v3 = *(void *)(v2 + 32);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v3 + 27);
  if (v12 < 0) {
    p_p = __p;
  }
  if (v3)
  {
    int v7 = *(char **)(v2 + 24);
    uint64_t v6 = (char *)(v2 + 24);
    uint64_t v5 = v7;
    if (v6[23] >= 0) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v5;
    }
    memmove(p_p, v8, v3);
  }
  strcpy((char *)p_p + v3, "transpose-reshape-collapser");
  ZinObjectNameFactory::ZinObjectNameFactory(&v13, &__p);
  if (v12 < 0) {
    operator delete(__p);
  }
  uint64_t v9 = *(void *)(*((void *)this + 14) + 16);
  std::__optional_copy_base<DimensionOrderHint,false>::__optional_copy_base[abi:ne180100]((uint64_t)&__p, (uint64_t)this + 56);
  ZinIrOpLayer::GetInputTensorDimensions(*((ZinIrOpLayer **)this + 12), &v10);
  (*(void (**)(void, void, void))(**((void **)this + 14) + 32))(*((void *)this + 14), 0, 0);
  (*(void (**)(void, void, void))(**((void **)this + 13) + 32))(*((void *)this + 13), 0, 0);
  ZinBuilder::CreateReshape(v9, (uint64_t)&v13);
}

void sub_2111F94EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a30 && a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  *(void *)(v30 - 104) = &unk_26C34DA98;
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpt::CollapseTransposeReshape(void *a1, uint64_t a2)
{
  v31[3] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v20, "pre_transpose");
  v21[0] = &unk_26C380F00;
  v21[1] = ZinIrOpt::IsTranspose;
  v21[3] = v21;
  int v10 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v22, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v23, "reshape");
  v24[0] = &unk_26C380F00;
  v24[1] = ZinIrOpt::IsReshape;
  v24[3] = v24;
  int v9 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v25, &v9, 1);
  std::string::basic_string[abi:ne180100]<0>(v26, "post_transpose");
  v27[0] = &unk_26C380F00;
  v27[1] = ZinIrOpt::IsTranspose;
  v27[3] = v27;
  int v8 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v28, &v8, 1);
  int64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v17 = (void **)&v11;
  char v18 = 0;
  int64_t v11 = (char *)operator new(0x120uLL);
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = v11 + 288;
  uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v13, (uint64_t)&v20, (uint64_t)&v29, (uint64_t)v11);
  uint64_t v19 = 0;
  ZinLinearPattern::ZinLinearPattern(v30, &v11, a2, 0, &v17, 0);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](&v17);
  unint64_t v14 = &v11;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  unint64_t v4 = 36;
  do
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&(&v16)[v4]);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v15[v4 - 1]);
    if (*((char *)&v13 + v4 * 8 + 7) < 0) {
      operator delete((&v11)[v4]);
    }
    v4 -= 12;
  }
  while (v4 * 8);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern&,void>(v30, &v20);
  long long v7 = v20;
  v30[0] = (uint64_t)&unk_26C349BA8;
  *(void *)&long long v20 = v31;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  ZinPattern::~ZinPattern((ZinPattern *)v30);
  v15[0] = &unk_26C331F78;
  v15[1] = &v7;
  v15[2] = a2;
  uint64_t v16 = v15;
  uint64_t v5 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v15, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v15);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  return v5;
}

void sub_2111F98BC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<DimensionOrderHint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DimensionOrderHint,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      if (a1 != a2) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = 1;
  }
}

uint64_t std::__optional_copy_base<DimensionOrderHint,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  std::__optional_storage_base<DimensionOrderHint,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<DimensionOrderHint,false> const&>((void *)a1, a2);
  return a1;
}

void sub_2111F9A64(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    ZinIrVersion::ZinIrVersion(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<DimensionOrderHint,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<DimensionOrderHint,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    size_t v3 = result;
    void *result = 0;
    result[1] = 0;
    result[2] = 0;
    BOOL result = std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(result, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *((_DWORD *)v3 + 6) = *(_DWORD *)(a2 + 24);
    *((unsigned char *)v3 + 32) = 1;
  }
  return result;
}

void std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C331F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C331F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  if ((*(unsigned int (**)(void, uint64_t, void))(***(void ***)(a1 + 8) + 8))(**(void **)(a1 + 8), *a2, *a3))
  {
    uint64_t v5 = **(void **)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "pre_transpose");
    if (ZinPattern::HasMatched(v5, (unsigned __int8 *)__p))
    {
      uint64_t v6 = **(void **)(a1 + 8);
      std::string::basic_string[abi:ne180100]<0>(v21, "reshape");
      if (ZinPattern::HasMatched(v6, (unsigned __int8 *)v21))
      {
        uint64_t v7 = **(void **)(a1 + 8);
        std::string::basic_string[abi:ne180100]<0>(v19, "post_transpose");
        unsigned __int8 v8 = ZinPattern::HasMatched(v7, (unsigned __int8 *)v19);
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
      else
      {
        unsigned __int8 v8 = 0;
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }
    else
    {
      unsigned __int8 v8 = 0;
    }
    if (v17 < 0)
    {
      operator delete(__p[0]);
      if ((v8 & 1) == 0) {
        return 0;
      }
    }
    else if ((v8 & 1) == 0)
    {
      return 0;
    }
    uint64_t v9 = **(void **)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "pre_transpose");
    uint64_t SingleMatch = ZinPattern::GetSingleMatch(v9, (unsigned __int8 *)__p);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = **(void **)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
    uint64_t v12 = ZinPattern::GetSingleMatch(v11, (unsigned __int8 *)__p);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = **(void **)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "post_transpose");
    uint64_t v14 = ZinPattern::GetSingleMatch(v13, (unsigned __int8 *)__p);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    ZinIrOpt::TransposeReshapeCollapser::TransposeReshapeCollapser((uint64_t)__p, SingleMatch, v14, v12, *(void *)(a1 + 16), v4);
    if (v18) {
      ZinIrOpt::TransposeReshapeCollapser::ExecuteTransform((ZinIrOpt::TransposeReshapeCollapser *)__p);
    }
    ZinIrOpt::TransposeReshapeCollapser::~TransposeReshapeCollapser((ZinIrOpt::TransposeReshapeCollapser *)__p);
  }
  return 0;
}

void sub_2111F9DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 - 73) < 0) {
    operator delete(*(void **)(v15 - 96));
  }
  if (*(char *)(v15 - 49) < 0) {
    operator delete(*(void **)(v15 - 72));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::CollapseTransposeReshape(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t ZinMirDartThrashingOptimizer::IsQualifiedForPaddingForDartThrashingOpt(ZinIrTensor *this, uint64_t a2, uint64_t a3, uint64_t a4, ZinTensorFamilyUtil *a5)
{
  if (*(unsigned char *)(a4 + 529)) {
    return 0;
  }
  if (*((unsigned char *)a5 + 104))
  {
    TensorFamily = (const void **)ZinTensorFamilyUtil::GetTensorFamily(a5, this);
    long long v65 = 0;
    uint64_t v66 = 0;
    long long v64 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v64, *TensorFamily, (uint64_t)TensorFamily[1], ((unsigned char *)TensorFamily[1] - (unsigned char *)*TensorFamily) >> 3);
  }
  else
  {
    ZinIrTensor::GetTensorFamily(this, (uint64_t)&v64);
  }
  if ((ZinMirDartThrashingOptimizer::IsFunctionallyValidForDartThrashingPadding((ZinOpLayerUtils **)this, (uint64_t *)&v64) & 1) == 0)
  {
    uint64_t v5 = 0;
    goto LABEL_44;
  }
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  ZinIrRegAllocUtil::FindSortedConsumersAndProducers(this, (uint64_t *)&v61, (uint64_t *)&v58, a5);
  std::set<ZinIrTensor *>::set[abi:ne180100]<std::__wrap_iter<ZinIrTensor * const*>>((uint64_t)v56, v64, v65);
  ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)this, (void *)a2);
  uint64_t v12 = v11;
  long long v13 = *(_OWORD *)(a2 + 176);
  long long v53 = *(_OWORD *)(a2 + 160);
  long long v54 = v13;
  long long v55 = *(_OWORD *)(a2 + 192);
  long long v14 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v50[16] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v50[32] = v14;
  long long v15 = *(_OWORD *)(a2 + 144);
  long long v51 = *(_OWORD *)(a2 + 128);
  long long v52 = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  v49[2] = *(_OWORD *)(a2 + 32);
  v49[3] = v16;
  long long v17 = *(_OWORD *)(a2 + 80);
  v49[4] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v50 = v17;
  long long v18 = *(_OWORD *)(a2 + 16);
  v49[0] = *(_OWORD *)a2;
  v49[1] = v18;
  uint64_t Interleave = ZinIrTensor::GetInterleave(this);
  if (v20) {
    uint64_t v21 = Interleave;
  }
  else {
    uint64_t v21 = 1;
  }
  ZinMirDartThrashingOptimizer::ComputeOptimizedStridesForDartThrashingOpt(this, (const ZinIrTensor *)v21, a3, (uint64_t)v47);
  *(_OWORD *)&v50[8] = v47[0];
  *(_OWORD *)&v50[24] = v47[1];
  *(void *)&v50[40] = v48;
  ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)this, v49);
  if ((float)((float)v12 * 1.5) < (float)v22)
  {
LABEL_11:
    uint64_t v5 = 0;
    goto LABEL_40;
  }
  int v23 = v61;
  unint64_t v24 = v62;
  while (1)
  {
    if (v23 == v24)
    {
      int64_t v33 = v58;
      uint64_t v34 = v59;
      while (1)
      {
        if (v33 == v34) {
          goto LABEL_11;
        }
        int v35 = *(ZinIrOpLayer **)v33;
        if (*(void *)(*(void *)v33 + 96) == *(void *)(*(void *)v33 + 88)) {
          goto LABEL_38;
        }
        unint64_t v36 = 0;
        do
        {
          InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(v35, v36);
          std::vector<int>::pointer v38 = v57;
          if (!v57) {
            goto LABEL_37;
          }
          uint64_t v39 = InputTensor;
          while (1)
          {
            unint64_t v40 = v38[4];
            if ((unint64_t)InputTensor >= v40) {
              break;
            }
LABEL_29:
            std::vector<int>::pointer v38 = (void *)*v38;
            if (!v38) {
              goto LABEL_37;
            }
          }
          if (v40 < (unint64_t)InputTensor)
          {
            ++v38;
            goto LABEL_29;
          }
          uint64_t v41 = ZinIrTensor::GetInterleave(InputTensor);
          if (v43) {
            uint64_t v44 = v41;
          }
          else {
            uint64_t v44 = 1;
          }
          int v45 = (unint64_t *)(a3 + 1400);
          if (v36) {
            int v45 = (unint64_t *)(a3 + 1408);
          }
          if (ZinMirDartThrashingOptimizer::IsTensorQualifiedForDartThrashingOptUtil(v39, v44, *v45, *(void *)(a3 + 1440), *(void *)(a3 + 1392), *(unsigned char *)(a3 + 1448), (unint64_t *)v47, v42))
          {
            goto LABEL_39;
          }
LABEL_37:
          ++v36;
        }
        while (v36 < (uint64_t)(*((void *)v35 + 12) - *((void *)v35 + 11)) >> 3);
LABEL_38:
        v33 += 8;
      }
    }
    uint64_t v25 = *v23;
    int64_t v26 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*v23 + 32))(*v23, 0, 0);
    uint64_t v27 = ZinIrTensor::GetInterleave(v26);
    char v29 = v28;
    uint64_t v30 = (ZinMirDartThrashingOptimizer *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v25 + 32))(v25, 0, 0);
    uint64_t v32 = v29 ? v27 : 1;
    if (ZinMirDartThrashingOptimizer::IsTensorQualifiedForDartThrashingOptUtil(v30, v32, *(void *)(a3 + 1416), *(void *)(a3 + 1440), *(void *)(a3 + 1392), *(unsigned char *)(a3 + 1448), (unint64_t *)v47, v31))
    {
      break;
    }
    ++v23;
  }
LABEL_39:
  uint64_t v5 = 1;
LABEL_40:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v56, v57);
  if (v58)
  {
    uint64_t v59 = v58;
    operator delete(v58);
  }
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
LABEL_44:
  if (v64)
  {
    long long v65 = v64;
    operator delete(v64);
  }
  return v5;
}

void sub_2111FA1C4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 160, *(void **)(v1 - 152));
  size_t v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(void *)(v1 - 128) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 - 88);
  if (v5)
  {
    *(void *)(v1 - 80) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirDartThrashingOptimizer::IsFunctionallyValidForDartThrashingPadding(ZinOpLayerUtils **a1, uint64_t *a2)
{
  if (ZinIrTensor::IsLiveInLiveStateOrConstTensor((ZinIrTensor *)a1)) {
    return 0;
  }
  if (ZinIrTensor::IsLiveOut((ZinIrTensor *)a1)) {
    return 0;
  }
  if (ZinOpLayerUtils::IsConnectedToLiveOut(a1[12], v4)) {
    return 0;
  }
  uint64_t v5 = a1[13];
  if (v5)
  {
    if (ZinIrTensor::MirInfo::HasCustomStrides(v5)) {
      return 0;
    }
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    int v8 = 0;
    int v9 = 0;
    do
    {
      int v10 = *(ZinReshapeLayer **)(*(void *)v6 + 96);
      int v11 = *(_DWORD *)(*((void *)v10 + 8) + 8);
      if (v11 == 37)
      {
        uint64_t ReshapeInfo = ZinReshapeLayer::GetReshapeInfo(v10);
        v8 |= ZinIrTransposeInfo::HasDimension(ReshapeInfo, 2);
        int v11 = *(_DWORD *)(*(void *)(*(void *)(*(void *)v6 + 96) + 64) + 8);
      }
      v9 |= v11 == 35;
      v6 += 8;
    }
    while (v6 != v7);
    if (v8 & v9) {
      return 0;
    }
  }
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  if (v15 == v14) {
    return 1;
  }
  do
  {
    long long v16 = *(ZinIrOpLayer **)(*(void *)v15 + 96);
    if (*(_DWORD *)(*((void *)v16 + 8) + 8) == 35)
    {
      uint64_t result = ZinReshapeLayerUtils::IsReshapeValidAfterStridePadding(v16, 2, 2);
      if (!result) {
        break;
      }
    }
    v15 += 8;
    uint64_t result = 1;
  }
  while (v15 != v14);
  return result;
}

void ZinMirDartThrashingOptimizer::ComputeOptimizedStridesForDartThrashingOpt(ZinMirDartThrashingOptimizer *this@<X0>, const ZinIrTensor *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v22[4] = *MEMORY[0x263EF8340];
  ZinIrTensor::GetDimensionOrderHint(this, (uint64_t)&__p);
  void v22[3] = 0;
  ZinIrTensor::InferDescriptor((unsigned __int8 *)this, 2, (uint64_t)&__p, (uint64_t)a2, 1, (uint64_t)v22, (uint64_t)v19);
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100](v22);
  if (__p)
  {
    long long v18 = __p;
    operator delete(__p);
  }
  long long v9 = v20[1];
  *(_OWORD *)a4 = v20[0];
  *(_OWORD *)(a4 + 16) = v9;
  *(void *)(a4 + 32) = v21;
  *(void *)(a4 + 8) += *(void *)(a3 + 1392);
  ZinMirDartThrashingOptimizer::GetDimensionOrderHint(this, (uint64_t)&__p);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)&__p, &v15);
  int v10 = v15;
  int v11 = v16;
  if (v15 != v16)
  {
    do
    {
      int v12 = *v10;
      uint64_t Dimension = ZinTensorDimensions::GetDimension((uint64_t *)v20, *v10);
      if (Dimension >= *((uint64_t *)&v20[0] + 1))
      {
        uint64_t v14 = ZinTensorDimensions::GetDimension((uint64_t *)v20, v12);
        ZinTensorDimensions::SetDimension((void *)a4, v12, *(void *)(a4 + 8) * (v14 / *((void *)&v20[0] + 1)));
      }
      ++v10;
    }
    while (v10 != v11);
    int v10 = v15;
  }
  if (v10)
  {
    long long v16 = v10;
    operator delete(v10);
  }
  if (__p)
  {
    long long v18 = __p;
    operator delete(__p);
  }
}

void sub_2111FA4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinMirDartThrashingOptimizer::IsTensorQualifiedForDartThrashingOptUtil(ZinMirDartThrashingOptimizer *this, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, char a6, unint64_t *a7, unint64_t *a8)
{
  v35[4] = *MEMORY[0x263EF8340];
  uint64_t v15 = *((void *)this + 13);
  if (v15 && *(_DWORD *)(v15 + 96) == 1 || *((unsigned char *)this + 164) || (ZinIrTensor::IsTensorLayoutMACI(this) & 1) != 0) {
    return 0;
  }
  ZinMirDartThrashingOptimizer::GetDimensionOrderHint(this, (uint64_t)v34);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)v34, &v32);
  long long v18 = *((_OWORD *)this + 4);
  v30[0] = *((_OWORD *)this + 3);
  v30[1] = v18;
  uint64_t v31 = *((void *)this + 10);
  uint64_t v19 = v32;
  char v20 = v33;
  if (v32 == v33)
  {
    BOOL v16 = 0;
  }
  else
  {
    while (1)
    {
      int v21 = *v19;
      if (GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v30, *v19) >= 2) {
        break;
      }
      if (++v19 == v20) {
        goto LABEL_21;
      }
    }
    if (v21 != 2)
    {
LABEL_21:
      BOOL v16 = 0;
      goto LABEL_22;
    }
    v35[3] = 0;
    ZinIrTensor::InferDescriptor((unsigned __int8 *)this, 2, (uint64_t)v34, a2, 1, (uint64_t)v35, (uint64_t)v29);
    std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100](v35);
    BOOL v16 = 0;
    float v22 = (float)(v29[12] / a5);
    unint64_t v23 = (unint64_t)v22;
    if ((unint64_t)v22 && (a6 & 1) == 0)
    {
      uint64_t v24 = *((void *)&v30[0] + 1);
      *a7 = -1;
      if (a3 < 2) {
        goto LABEL_21;
      }
      unint64_t v25 = a3;
      unint64_t v26 = (a2 + v24 - 1) / a2;
      while (v23 % v25)
      {
        BOOL v27 = v25 > 3;
        v25 >>= 1;
        if (!v27) {
          goto LABEL_21;
        }
      }
      unint64_t v28 = a3 / v25 * a4;
      *a7 = v28;
      if ((float)((float)(v22 - (float)v23) * (float)v28) > 1.0) {
        goto LABEL_21;
      }
      BOOL v16 = v26 > v28;
    }
LABEL_22:
    uint64_t v19 = v32;
  }
  if (v19)
  {
    int64_t v33 = v19;
    operator delete(v19);
  }
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  return v16;
}

void sub_2111FA744(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100]((void *)(v1 - 128));
  size_t v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(void *)(v1 - 176) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 160);
  if (v4)
  {
    *(void *)(v1 - 152) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void ZinMirDartThrashingOptimizer::GetDimensionOrderHint(ZinMirDartThrashingOptimizer *this@<X0>, uint64_t a2@<X8>)
{
  ZinIrTensor::GetDimensionOrderHint(this, a2);
  if (!DimensionOrderHint::IsSet((DimensionOrderHint *)a2) && !DimensionOrderHint::IsSet((DimensionOrderHint *)a2))
  {
    DimensionOrderHint::DimensionOrderHint(&__p, 2);
    if (&__p != (void **)a2) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)__p, (uint64_t)v5, (v5 - (unsigned char *)__p) >> 2);
    }
    *(_DWORD *)(a2 + 24) = v6;
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
}

void sub_2111FA818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  int v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<ZinIrTensor *>::set[abi:ne180100]<std::__wrap_iter<ZinIrTensor * const*>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)a1, v4, v6, (uint64_t *)v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2111FA8BC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *ZinIrRingBufferWriterUnit::ZinIrRingBufferWriterUnit(void *a1, const ZinIrRingBufferUnitInfo *a2, uint64_t a3)
{
  uint64_t v5 = ZinIrUnit::ZinIrUnit(a1, a3);
  *uint64_t v5 = &unk_26C351670;
  ZinIrRingBufferUnitInfo::ZinIrRingBufferUnitInfo((ZinIrRingBufferUnitInfo *)(v5 + 7), a2);
  return a1;
}

void sub_2111FA928(_Unwind_Exception *a1)
{
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrRingBufferWriterUnit::TensorDimensions(ZinIrRingBufferWriterUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (*((void *)this + 2) - v4 == 240)
  {
    uint64_t result = 0;
    long long v6 = *(_OWORD *)(v4 + 8);
    long long v7 = *(_OWORD *)(v4 + 24);
    *((void *)a3 + 4) = *(void *)(v4 + 40);
    *(_OWORD *)a3 = v6;
    *((_OWORD *)a3 + 1) = v7;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, @"InvalidBottomCount");
    return 3;
  }
  return result;
}

void ZinIrRingBufferWriterUnit::CreateOpcode(ZinIrRingBufferWriterUnit *this, const ZinIrHalParameters *a2)
{
}

void sub_2111FA9EC(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C402233485ALL);
  _Unwind_Resume(a1);
}

void ZinIrRingBufferWriterUnit::CreateLayer(ZinIrRingBufferWriterUnit *a1, const ZinIrHalParameters *a2)
{
}

void sub_2111FAB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

void ZinBufferDescriptor::GetMACIBufferSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v27[4] = *MEMORY[0x263EF8340];
  long long v6 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  ZinIrTensor::GetDimensionOrderHint(v6, (uint64_t)__p);
  int v7 = DWORD2(v15);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7 != 1) {
    ZinAssertImpl("Layout must be MACI\n");
  }
  v27[3] = 0;
  ZinIrTensor::InferDescriptor(v6, (uint64_t)v27, (uint64_t)__p);
  long long v8 = v25;
  *(_OWORD *)(a4 + 160) = v24;
  *(_OWORD *)(a4 + 176) = v8;
  *(_OWORD *)(a4 + 192) = v26;
  long long v9 = v21;
  *(_OWORD *)(a4 + 96) = v20;
  *(_OWORD *)(a4 + 112) = v9;
  long long v10 = v23;
  *(_OWORD *)(a4 + 128) = v22;
  *(_OWORD *)(a4 + 144) = v10;
  long long v11 = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(_OWORD *)(a4 + 48) = v11;
  long long v12 = v19;
  *(_OWORD *)(a4 + 64) = v18;
  *(_OWORD *)(a4 + 80) = v12;
  long long v13 = v15;
  *(_OWORD *)a4 = *(_OWORD *)__p;
  *(_OWORD *)(a4 + 16) = v13;
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100](v27);
  *(void *)(a4 + 64) = *(void *)(a1 + 16);
  ZinIrTensor::GetTensorSizeInBytes((unsigned __int8 *)v6, (void *)a4);
}

void sub_2111FACFC(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(ZinTensorDescriptor const&,ZinTensorDescriptor const&,ZinIrTensor const*)>::~__value_func[abi:ne180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t ZinParseDynamicGOCUnit(const __CFDictionary *a1, ZinIrDynamicGOCUnitInfo *a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (Value && (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    int v13 = 0;
    uint64_t FloatFormat = ZinGetFloatFormat(v6, @"PreScaleType", &v13, a3);
    if (!FloatFormat)
    {
      ZinParseFloatingPoint(v6, @"PreScale", &v13, (float *)a2 + 20, 1.0);
      ZinParseBoolean(v6, @"NegateInput", (BOOL *)a2 + 84);
      ZinParseBoolean(v6, @"NegateBias", (BOOL *)a2 + 85);
      ZinParseBoolean(v6, @"BiasOnly", (BOOL *)a2 + 209);
      CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(v6, @"ScaleBiasType");
      if (v9)
      {
        CFStringRef v10 = v9;
        CFTypeID v11 = CFGetTypeID(v9);
        if (v11 == CFStringGetTypeID())
        {
          if (ZinCFStringEquals(v10, @"Scale"))
          {
            *((unsigned char *)a2 + 210) = 1;
          }
          else if (ZinCFStringEquals(v10, @"Bias"))
          {
            *((unsigned char *)a2 + 209) = 1;
          }
        }
      }
    }
  }
  else
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidParamSyntax");
    return 3;
  }
  return FloatFormat;
}

uint64_t ZinIrIOInfo::SetCustomInterleaveFactors(uint64_t result, int **a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 24)) {
    goto LABEL_19;
  }
  size_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = v4 - *a2;
  CFDictionaryRef v6 = *(unsigned char **)a3;
  if (*(void *)(a3 + 8) - *(void *)a3 != v5) {
    ZinAssertImpl("interleave factors need to be specified for each dimension");
  }
  if (v4 == v3)
  {
LABEL_19:
    uint64_t v8 = -1;
  }
  else
  {
    if (v5 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v4 - *a2;
    }
    uint64_t v8 = -1;
    do
    {
      int v10 = *v3++;
      int v9 = v10;
      switch(v10)
      {
        case 0:
          if (*v6 != 1)
          {
            std::to_string(&v16, *v6);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unsupported N interleave: ", &v16, &v17);
            if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v14 = &v17;
            }
            else {
              uint64_t v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
            }
            ZinAssertImpl("%s", (const char *)v14);
          }
          return result;
        case 1:
          if (*v6 != 1)
          {
            std::to_string(&v16, *v6);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unsupported D interleave: ", &v16, &v17);
            if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v13 = &v17;
            }
            else {
              int v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
            }
            ZinAssertImpl("%s", (const char *)v13);
          }
          return result;
        case 2:
          uint64_t v8 = *v6;
          break;
        case 3:
          if (*v6 != 1)
          {
            std::to_string(&v16, *v6);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unsupported H interleave: ", &v16, &v17);
            if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v12 = &v17;
            }
            else {
              long long v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
            }
            ZinAssertImpl("%s", (const char *)v12);
          }
          return result;
        case 4:
          if (*v6 != 1)
          {
            std::to_string(&v16, *v6);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unsupported W interleave: ", &v16, &v17);
            if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              CFTypeID v11 = &v17;
            }
            else {
              CFTypeID v11 = (std::string *)v17.__r_.__value_.__r.__words[0];
            }
            ZinAssertImpl("%s", (const char *)v11);
          }
          return result;
        default:
          std::to_string(&v16, v9);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unexpected dimension when setting custom interleave: ", &v16, &v17);
          if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v15 = &v17;
          }
          else {
            long long v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
          }
          ZinAssertImpl("%s", (const char *)v15);
      }
      ++v6;
      --v7;
    }
    while (v7);
  }
  *(void *)(result + 144) = v8;
  return result;
}

void sub_2111FB0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(a1);
  uint64_t v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t ZinCachePrefetchDma::ZinCachePrefetchDma(uint64_t result, int a2, void *a3)
{
  *(_DWORD *)__n128 result = a2;
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  *(_WORD *)(result + 4) = *(_WORD *)(v3 + 372);
  *(unsigned char *)(result + 6) = *(unsigned char *)(v3 + 132);
  *(void *)(result + 8) = *(void *)(v4 + 1280);
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = a3[1];
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  char v5 = *(unsigned char *)(*a3 + 1271);
  if (v5) {
    char v5 = *(unsigned char *)(a3[1] + 130) == 0;
  }
  *(unsigned char *)(result + 7) = v5;
  return result;
}

BOOL ZinCachePrefetchDma::NeedBarIdForCachePrefetch(ZinCachePrefetchDma *this)
{
  return *((unsigned char *)this + 7) && (*((_WORD *)this + 2) & 1) == 0;
}

uint64_t ZinCachePrefetchDma::Run(unint64_t a1, unint64_t *a2, ZinIrOpLayer ***a3, uint64_t *a4)
{
  if (!*(unsigned char *)(a1 + 7)) {
    return 0;
  }
  if ((*(_WORD *)(a1 + 4) & 1) == 0)
  {
    ZinCachePrefetchDma::FindCachePrefetchGroups(a1, a3);
    if (*(void *)(a1 + 40) != *(void *)(a1 + 32))
    {
      ZinCachePrefetchDma::UpdateCachePrefetchGroups((ZinCachePrefetchDma *)a1);
      uint64_t v8 = ZinCachePrefetchDma::ValidatePrefetchAllocation((ZinCachePrefetchDma *)a1);
      if (v8)
      {
        uint64_t v9 = v8;
        BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v10) {
          ZinCachePrefetchDma::Run(v10, v11, v12, v13, v14, v15, v16, v17);
        }
        return v9;
      }
      uint64_t v18 = ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(a1, a3);
      if (v18)
      {
        uint64_t v9 = v18;
        BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v19) {
          ZinCachePrefetchDma::Run(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        return v9;
      }
      ZinCachePrefetchDma::PrintDebugInfo((ZinCachePrefetchDma *)a1);
      ZinCachePrefetchDma::SetMirInfo(a1);
      ZinCachePrefetchDma::CalculateMCachePrefetchQuotaforDriver((ZinCachePrefetchDma *)a1, a2);
    }
  }
  uint64_t v27 = *a4;
  uint64_t v28 = a4[1];
  if (*a4 == v28) {
    return 0;
  }
  while (1)
  {
    uint64_t v29 = *(void *)(*(void *)v27 + 264);
    if (*(unsigned char *)(v29 + 1264)) {
      break;
    }
    *(unsigned char *)(v29 + 1264) = 1;
    v27 += 8;
    if (v27 == v28) {
      return 0;
    }
  }
  BOOL v31 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v31) {
    ZinCachePrefetchDma::Run(v31, v32, v33, v34, v35, v36, v37, v38);
  }
  return 3;
}

uint64_t ZinCachePrefetchDma::FindCachePrefetchGroups(uint64_t a1, ZinIrOpLayer ***a2)
{
  if (*(_DWORD *)a1)
  {
    BOOL v3 = 1;
  }
  else
  {
    __int16 v4 = *(_WORD *)(a1 + 4);
    BOOL v3 = (v4 & 1) != 0 || (v4 & 2) != 0;
  }
  long long v77 = 0u;
  long long v78 = 0u;
  char v5 = *a2;
  std::string::size_type v6 = a2[1];
  if (*a2 == v6) {
    return 0;
  }
  unint64_t v41 = 0;
  double v7 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v42 = _Q0;
  while (!ZinIrOpLayer::IsANELayer(*v5))
  {
LABEL_79:
    if (++v5 == v6) {
      goto LABEL_86;
    }
  }
  uint64_t v13 = *v5;
  uint64_t v73 = 0x101000000010101;
  __int16 v74 = 256;
  char v75 = 1;
  int v76 = 0;
  ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)(a1 + 16), *(double *)(*(void *)(a1 + 24) + 104), *(_DWORD *)(*(void *)(a1 + 24) + 112), *(_DWORD *)(*(void *)(a1 + 24) + 116), (uint64_t)v72);
  ZinIrPerf::ZinIrPerf((uint64_t)v70, *(void *)(a1 + 16), v72, &v73);
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v14 = operator new(8uLL);
  long long __p = v14;
  *uint64_t v14 = 0;
  uint64_t v59 = v14 + 1;
  uint64_t v60 = v14 + 1;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  long long v63 = v42;
  long long v64 = v42;
  long long v65 = v42;
  long long v66 = v42;
  uint64_t v67 = 0;
  char v68 = 0;
  unint64_t v69 = 0;
  if (ZinANELayer::CalculatePerf(v13, (ZinIrPerf *)v70, (ZinPerfDescriptor *)&v45))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinCachePrefetchDma::FindCachePrefetchGroups(&v43, v44);
    }
    std::vector<CachePrefetchGroup>::__clear[abi:ne180100]((uint64_t *)(a1 + 32));
    int v16 = 1;
    goto LABEL_75;
  }
  BOOL v17 = 0;
  double v18 = v71;
  unint64_t v19 = v69;
  double v20 = *(double *)&v46;
  if (*(double *)&v46 < *((double *)&v46 + 1)) {
    double v20 = *((double *)&v46 + 1);
  }
  double v21 = v20 * 0.001;
  if ((void)v77 && (double)(unint64_t)v53 / v21 > v71)
  {
    if (ZinCachePrefetchUtil::IsKernelPrefetchSupported(v13, v15))
    {
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)v13 + 120))(v13)) {
        BOOL v17 = *(void *)(*(void *)(*(void *)(*((void *)v13 + 17) + 616) + 96) + 48) <= *(void *)(v77 + 48);
      }
      else {
        BOOL v17 = 1;
      }
    }
    else
    {
      BOOL v17 = 0;
    }
  }
  int v22 = (void)v78 == *((void *)&v77 + 1);
  char v23 = (void)v78 == *((void *)&v77 + 1) || v3;
  if ((v23 & 1) == 0)
  {
    uint64_t v24 = *(ZinIrKernel **)(**((void **)&v77 + 1) + 136);
    if (!v24
      || *((void *)v24 + 77)
      || (ZinIrKernel::IsMutable(v24) & 1) != 0
      || (uint64_t v25 = (ZinIrKernel *)*((void *)v13 + 17)) == 0
      || *((void *)v25 + 77))
    {
      int v22 = 0;
    }
    else
    {
      int v22 = ZinIrKernel::IsMutable(v25) ^ 1;
    }
  }
  if ((double)v19 / v21 >= v18)
  {
    uint64_t v26 = (ZinIrOpLayer *)v77;
  }
  else
  {
    uint64_t v26 = (ZinIrOpLayer *)v77;
    if ((void)v78 == *((void *)&v77 + 1))
    {
      if ((void)v77)
      {
        if (!*(unsigned char *)(*(void *)(a1 + 16) + 2034)) {
          goto LABEL_57;
        }
      }
      else if (!*(unsigned char *)(*(void *)(a1 + 16) + 2034) {
             || (*(_DWORD *)(*((void *)v13 + 33) + 1632) - 1) >= 2)
      }
      {
        *(void *)&long long v77 = v13;
        uint64_t v26 = v13;
LABEL_57:
        double v7 = v7 + *((double *)&v47 + 1);
        goto LABEL_58;
      }
      if ((*(_DWORD *)(*((void *)v13 + 33) + 1632) - 1) <= 1)
      {
        *(void *)&long long v77 = 0;
        int v16 = 3;
        double v7 = 0.0;
        goto LABEL_75;
      }
      goto LABEL_57;
    }
  }
  if (v26 && v17 && ((v22 ^ 1) & 1) == 0)
  {
    if (*((void *)v13 + 45) > *((void *)v26 + 45) + 1)
    {
      uint64_t v27 = v78;
      if ((unint64_t)v78 >= *((void *)&v78 + 1))
      {
        uint64_t v29 = (uint64_t)(v78 - *((void *)&v77 + 1)) >> 3;
        if ((unint64_t)(v29 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v30 = (uint64_t)(*((void *)&v78 + 1) - *((void *)&v77 + 1)) >> 2;
        if (v30 <= v29 + 1) {
          unint64_t v30 = v29 + 1;
        }
        if (*((void *)&v78 + 1) - *((void *)&v77 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31) {
          uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v78 + 8, v31);
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v33 = (ZinIrOpLayer **)&v32[8 * v29];
        *uint64_t v33 = v13;
        uint64_t v28 = v33 + 1;
        uint64_t v35 = (char *)*((void *)&v77 + 1);
        uint64_t v34 = (char *)v78;
        if ((void)v78 != *((void *)&v77 + 1))
        {
          do
          {
            uint64_t v36 = (ZinIrOpLayer *)*((void *)v34 - 1);
            v34 -= 8;
            *--uint64_t v33 = v36;
          }
          while (v34 != v35);
          uint64_t v34 = (char *)*((void *)&v77 + 1);
        }
        *((void *)&v77 + 1) = v33;
        *(void *)&long long v78 = v28;
        *((void *)&v78 + 1) = &v32[8 * v31];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(void *)long long v78 = v13;
        uint64_t v28 = (void *)(v27 + 8);
      }
      *(void *)&long long v78 = v28;
      v41 += v53;
      if (!(void)v77) {
        goto LABEL_74;
      }
    }
    goto LABEL_67;
  }
LABEL_58:
  if (!v26) {
    goto LABEL_74;
  }
LABEL_67:
  uint64_t v37 = *(void *)(a1 + 16);
  if ((void)v78 == *((void *)&v77 + 1)) {
    goto LABEL_74;
  }
  int v16 = 0;
  if (v41 <= *(void *)(v37 + 480) * *(int *)(v37 + 8) || v7 <= 0.01) {
    goto LABEL_75;
  }
  if (!*(unsigned char *)(v37 + 2034) || (*(_DWORD *)(*((void *)v13 + 33) + 1632) - 1) > 1)
  {
LABEL_74:
    int v16 = 0;
    goto LABEL_75;
  }
  unint64_t v38 = *(void *)(a1 + 40);
  if (v38 >= *(void *)(a1 + 48))
  {
    uint64_t v39 = std::vector<CachePrefetchGroup>::__push_back_slow_path<CachePrefetchGroup const&>((uint64_t *)(a1 + 32), (uint64_t)&v77);
  }
  else
  {
    std::vector<CachePrefetchGroup>::__construct_one_at_end[abi:ne180100]<CachePrefetchGroup const&>(a1 + 32, (uint64_t)&v77);
    uint64_t v39 = v38 + 32;
  }
  *(void *)(a1 + 40) = v39;
  *(void *)&long long v77 = 0;
  if (*((void *)&v77 + 1))
  {
    *(void *)&long long v78 = *((void *)&v77 + 1);
    operator delete(*((void **)&v77 + 1));
  }
  unint64_t v41 = 0;
  int v16 = 0;
  *((void *)&v77 + 1) = 0;
  long long v78 = 0uLL;
  double v7 = 0.0;
LABEL_75:
  if (__p)
  {
    uint64_t v59 = __p;
    operator delete(__p);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v70);
  if (v16 == 3 || !v16) {
    goto LABEL_79;
  }
LABEL_86:
  if (*((void *)&v77 + 1))
  {
    *(void *)&long long v78 = *((void *)&v77 + 1);
    operator delete(*((void **)&v77 + 1));
  }
  return 0;
}

void sub_2111FB894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (__p) {
    operator delete(__p);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&a59);
  uint64_t v61 = *(void **)(v59 - 184);
  if (v61)
  {
    *(void *)(v59 - 176) = v61;
    operator delete(v61);
  }
  _Unwind_Resume(a1);
}

void ZinCachePrefetchDma::UpdateCachePrefetchGroups(ZinCachePrefetchDma *this)
{
  if (!*(_DWORD *)this && (*((_WORD *)this + 2) & 3) == 0)
  {
    char v2 = *((unsigned char *)this + 6);
    v17[0] = 0;
    v17[1] = 0;
    char v18 = v2;
    int v16 = v17;
    BOOL v3 = (void *)*((void *)this + 4);
    __int16 v4 = (void *)*((void *)this + 5);
    if (v3 == v4)
    {
      uint64_t v14 = 0;
    }
    else
    {
      do
      {
        uint64_t v6 = v3[1];
        uint64_t v5 = v3[2];
        if (v5 - v6 == 8)
        {
          v3 += 4;
        }
        else
        {
          if (v5 == v6) {
            goto LABEL_15;
          }
          do
          {
            uint64_t v15 = *(ZinIrKernel **)(*(void *)v6 + 136);
            std::__tree<ZinIrKernel *,ZinIrConstManager::Compare,std::allocator<ZinIrKernel *>>::__emplace_unique_key_args<ZinIrKernel *,ZinIrKernel * const&>(&v16, &v15, (uint64_t *)&v15);
            if (v7)
            {
              v6 += 8;
              uint64_t v10 = v3[2];
            }
            else
            {
              uint64_t v8 = v3[2];
              uint64_t v9 = v8 - (v6 + 8);
              if (v8 != v6 + 8) {
                memmove((void *)v6, (const void *)(v6 + 8), v8 - (v6 + 8));
              }
              uint64_t v10 = v6 + v9;
              v3[2] = v6 + v9;
            }
          }
          while (v10 != v6);
          if (v10 == v3[1])
          {
LABEL_15:
            std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CachePrefetchGroup *,CachePrefetchGroup *,CachePrefetchGroup *,0>(v3 + 4, *((void **)this + 5), v3);
            __int16 v4 = v11;
            for (uint64_t i = (void *)*((void *)this + 5); i != v4; i -= 4)
            {
              uint64_t v13 = (void *)*(i - 3);
              if (v13)
              {
                *(i - 2) = v13;
                operator delete(v13);
              }
            }
            *((void *)this + 5) = v4;
          }
          else
          {
            v3 += 4;
            __int16 v4 = (void *)*((void *)this + 5);
          }
        }
      }
      while (v3 != v4);
      uint64_t v14 = (void *)v17[0];
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v14);
  }
}

void sub_2111FBA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

uint64_t ZinCachePrefetchDma::ValidatePrefetchAllocation(ZinCachePrefetchDma *this)
{
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  int v26 = 1065353216;
  uint64_t v1 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); v1 != i; v1 += 32)
  {
    AddKernelPrefetchAllocation(v1 + 8, *((void *)this + 1), *(void *)(*((void *)this + 2) + 528), v24);
    __int16 v4 = *(void **)(v1 + 8);
    uint64_t v5 = *(void **)(v1 + 16);
    while (v4 != v5)
    {
      uint64_t v6 = (void *)*v4;
      uint64_t v7 = *((void *)this + 1);
      uint64_t v8 = *(void *)(*((void *)this + 2) + 528);
      if ((*(unsigned int (**)(void))(*(void *)*v4 + 120))(*v4))
      {
        (*(void (**)(uint64_t *__return_ptr, void *))(*v6 + 128))(&v27, v6);
        uint64_t v9 = *(void *)(v27 + 104);
        if (!v9 || (uint64_t v10 = *(const ZinIrSymbol ***)(v9 + 40), v10 == *(const ZinIrSymbol ***)(v9 + 48))) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = *v10;
        }
        ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation((ZinMemCacheUtil::MemCacheAllocationState *)((char *)v24 + 8), v11, v8);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
      else
      {
        uint64_t v12 = ZinAlignPower2(*(void *)(*(void *)(*(void *)(v6[17] + 800) + 40) + 16), v7);
        *(void *)&v24[0] -= v12;
      }
      ++v4;
    }
  }
  uint64_t v13 = ZinMemCacheUtil::MemCacheAllocationState::CalculateSize((ZinMemCacheUtil::MemCacheAllocationState *)((char *)v24 + 8));
  if (v13 | *(void *)&v24[0])
  {
    BOOL v14 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v14) {
      ZinCachePrefetchDma::ValidatePrefetchAllocation(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    uint64_t v22 = 3;
  }
  else
  {
    uint64_t v22 = 0;
  }
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v24 + 8);
  return v22;
}

void sub_2111FBC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(uint64_t a1, void *a2)
{
  if ((*(_WORD *)(a1 + 4) & 5) != 0) {
    return 0;
  }
  uint64_t v7 = *(ZinANELayer ***)(a1 + 32);
  uint64_t v6 = *(ZinANELayer ***)(a1 + 40);
  if (v7 == v6) {
    return 0;
  }
  unint64_t v9 = 0;
  unint64_t v10 = (uint64_t)(a2[1] - *a2) >> 3;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v47 = _Q0;
  long long v46 = *(ZinANELayer ***)(a1 + 40);
  while (*v7)
  {
    if (v9 == v10)
    {
      BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v38) {
        ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      return 3;
    }
    if (v9 >= v10)
    {
LABEL_13:
      uint64_t v3 = v2;
    }
    else
    {
      while (1)
      {
        if (ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(*a2 + 8 * v9)))
        {
          uint64_t v16 = *(ZinANELayer **)(*a2 + 8 * v9);
          if (v16 == *v7) {
            break;
          }
        }
        if (v10 == ++v9)
        {
          unint64_t v9 = v10;
          goto LABEL_13;
        }
      }
      uint64_t v79 = 0x101000000010101;
      __int16 v80 = 256;
      char v81 = 1;
      int v82 = 0;
      ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)(a1 + 16), *(double *)(*(void *)(a1 + 24) + 104), *(_DWORD *)(*(void *)(a1 + 24) + 112), *(_DWORD *)(*(void *)(a1 + 24) + 116), (uint64_t)v78);
      ZinIrPerf::ZinIrPerf((uint64_t)v76, *(void *)(a1 + 16), v78, &v79);
      uint64_t v63 = 0;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      memset(v52, 0, sizeof(v52));
      uint64_t v17 = operator new(8uLL);
      long long __p = v17;
      void *v17 = 0;
      long long v65 = v17 + 1;
      long long v66 = v17 + 1;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      long long v69 = v47;
      long long v70 = v47;
      long long v71 = v47;
      long long v72 = v47;
      uint64_t v73 = 0;
      char v74 = 0;
      uint64_t v75 = 0;
      if (*((void *)v16 + 45) >= *(void *)(*(void *)v7[1] + 360))
      {
        unint64_t v18 = 0;
        double v19 = 0.0;
LABEL_24:
        double v22 = v77;
        unint64_t v23 = CalculatePrefetchBufferSize(*(void *)(*(void *)(a1 + 16) + 1280), *(void *)(*(void *)(a1 + 16) + 528), (uint64_t)(v7 + 1));
        uint64_t v24 = *((void *)*v7 + 33);
        uint64_t v6 = v46;
        if (v24)
        {
          double v25 = -((double)v18 - v22 * v19);
          int v26 = *(void **)(a1 + 16);
          uint64_t v27 = v26[161];
          while ((unint64_t)++v27 <= v26[162])
          {
            unint64_t v28 = v26[171];
            if (v28 >= (unint64_t)v25) {
              unint64_t v28 = (unint64_t)v25;
            }
            if (v23 >> v27 < v28)
            {
              *(void *)(v24 + 1328) = v27;
              char v29 = 1;
              goto LABEL_38;
            }
          }
          char v29 = 1;
          *(void *)(v24 + 1328) = 1;
LABEL_38:
          uint64_t v3 = v2;
        }
        else
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(&v48, v49);
          }
          char v29 = 0;
          uint64_t v3 = 3;
        }
      }
      else
      {
        unint64_t v18 = 0;
        double v19 = 0.0;
        unint64_t v20 = v9;
        while (1)
        {
          uint64_t v3 = ZinANELayer::CalculatePerf(v16, (ZinIrPerf *)v76, (ZinPerfDescriptor *)v52);
          if (v3) {
            break;
          }
          double v19 = v19 + *((double *)&v53 + 1) * 0.001;
          v18 += v75;
          while (!ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(*a2 + 8 * v20++ + 8)))
            ;
          uint64_t v16 = *(ZinANELayer **)(*a2 + 8 * v20);
          if (*((void *)v16 + 45) >= *(void *)(*(void *)v7[1] + 360)) {
            goto LABEL_24;
          }
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(&v50, v51);
        }
        char v29 = 0;
        uint64_t v6 = v46;
      }
      if (__p)
      {
        long long v65 = __p;
        operator delete(__p);
      }
      ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v76);
      if ((v29 & 1) == 0) {
        return v3;
      }
    }
    v7 += 4;
    uint64_t v2 = v3;
    if (v7 == v6) {
      return 0;
    }
  }
  BOOL v30 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v30) {
    ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(v30, v31, v32, v33, v34, v35, v36, v37);
  }
  return 3;
}

void sub_2111FBFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (__p) {
    operator delete(__p);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&a62);
  _Unwind_Resume(a1);
}

void ZinCachePrefetchDma::PrintDebugInfo(ZinCachePrefetchDma *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*((void *)this + 3) + 96) & 8) != 0)
  {
    uint64_t v2 = (void *)*((void *)this + 4);
    if (v2 != *((void **)this + 5))
    {
      int v3 = 0;
      __int16 v4 = &_os_log_internal;
      do
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          uint64_t v5 = *(void *)(*v2 + 360);
          uint64_t v6 = (uint64_t)(v2[2] - v2[1]) >> 3;
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)uint64_t v12 = v3;
          *(_WORD *)&v12[4] = 2048;
          *(void *)&v12[6] = v5;
          __int16 v13 = 2048;
          uint64_t v14 = v6;
          _os_log_impl(&dword_210C72000, v4, OS_LOG_TYPE_INFO, "group = %d, prefetch_tid = %zd, consumer int64_t size = %lu\n", buf, 0x1Cu);
        }
        uint64_t v8 = v2[1];
        uint64_t v7 = v2[2];
        while (v8 != v7)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
          {
            uint64_t v9 = *(void *)(*(void *)v8 + 360);
            *(_DWORD *)buf = 134217984;
            *(void *)uint64_t v12 = v9;
            _os_log_impl(&dword_210C72000, v4, OS_LOG_TYPE_INFO, "consumer_tid = %zd\n", buf, 0xCu);
            uint64_t v7 = v2[2];
          }
          v8 += 8;
        }
        if ((*((_WORD *)this + 2) & 5) == 0 && os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = *(void *)(*(void *)(*v2 + 264) + 1328);
          *(_DWORD *)buf = 134217984;
          *(void *)uint64_t v12 = v10;
          _os_log_impl(&dword_210C72000, v4, OS_LOG_TYPE_INFO, "sieve factor = %zd\n", buf, 0xCu);
        }
        ++v3;
        v2 += 4;
      }
      while (v2 != *((void **)this + 5));
    }
  }
}

unint64_t ZinCachePrefetchDma::SetMirInfo(unint64_t this)
{
  uint64_t v1 = *(void **)(this + 32);
  uint64_t v17 = *(void **)(this + 40);
  if (v1 != v17)
  {
    uint64_t v2 = (uint64_t *)this;
    do
    {
      int v3 = (uint64_t *)v1[1];
      __int16 v4 = (uint64_t *)v1[2];
      uint64_t v5 = *v1;
      if (v3 != v4)
      {
        uint64_t v6 = *(void *)(v5 + 360);
        do
        {
          uint64_t v7 = *v3++;
          uint64_t v8 = *(void *)(v7 + 264);
          *(_DWORD *)(v8 + 1360) = 1;
          *(void *)(v8 + 1368) = v6;
          *(_WORD *)(v8 + 1376) = 257;
          *(_DWORD *)(v8 + 1416) = 3;
        }
        while (v3 != v4);
      }
      uint64_t v9 = *(void *)(v5 + 264);
      *(_DWORD *)(v9 + 1268) = 1;
      *(unsigned char *)(v9 + 1264) = 1;
      if (*(unsigned char *)(v2[2] + 1304))
      {
        *(_WORD *)(v9 + 1336) = 257;
        *(unsigned char *)(v9 + 1338) = 1;
        *(_DWORD *)(v9 + 1340) = 1000;
        *(_WORD *)(v9 + 1344) = 257;
        *(unsigned char *)(v9 + 1346) = 1;
        *(void *)(v9 + 1348) = 0x1000003E8;
      }
      *(_DWORD *)(v9 + 1356) = ZinCachePrefetchDma::CalculatePrefetchRateLog2((ZinCachePrefetchDma *)v2);
      uint64_t v10 = v2[2];
      if (*(unsigned char *)(v10 + 2034))
      {
        uint64_t v11 = *(void *)(*v1 + 360);
        uint64_t v12 = *(void *)(*(void *)v1[1] + 360) - v11;
        uint64_t v13 = *(void *)(*(void *)(v1[2] - 8) + 360) - v11;
      }
      else
      {
        uint64_t v13 = *(void *)(*(void *)(v1[2] - 8) + 360) - *(void *)(*v1 + 360);
        uint64_t v12 = v13;
      }
      uint64_t v14 = *(void *)(v9 + 1328);
      unint64_t v15 = (unint64_t)CalculatePrefetchBufferSize(v2[1], *(void *)(v10 + 528), (uint64_t)(v1 + 1)) >> v14;
      if (*(void *)(v2[2] + 1368) < v15) {
        unint64_t v15 = *(void *)(v2[2] + 1368);
      }
      this = ZinAlignPower2(v15 << v14, v2[1]);
      uint64_t v16 = v2[2];
      *(void *)(v9 + 1272) = this / v2[1];
      *(void *)(v9 + 1280) = v13;
      *(unsigned char *)(v9 + 1288) = 1;
      *(void *)(v9 + 1296) = v12;
      *(unsigned char *)(v9 + 1320) = 1;
      if (*(unsigned char *)(v16 + 2034)) {
        *(unsigned char *)(v9 + 1321) = 1;
      }
      v1 += 4;
    }
    while (v1 != v17);
  }
  return this;
}

uint64_t ZinCachePrefetchDma::CalculateMCachePrefetchQuotaforDriver(ZinCachePrefetchDma *this, unint64_t *a2)
{
  *a2 = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 4);
  for (uint64_t i = (uint64_t *)*((void *)this + 5); v2 != i; *a2 = v8)
  {
    unint64_t v6 = CalculatePrefetchBufferSize(*(void *)(*((void *)this + 2) + 1280), *(void *)(*((void *)this + 2) + 528), (uint64_t)(v2 + 1));
    uint64_t v7 = *v2;
    v2 += 4;
    unint64_t v8 = v6 >> *(void *)(*(void *)(v7 + 264) + 1328);
    if (*a2 > v8) {
      unint64_t v8 = *a2;
    }
  }
  return 0;
}

BOOL ZinCachePrefetchUtil::IsKernelClubbingAllowed(ZinCachePrefetchUtil *this, char a2)
{
  BOOL v2 = (a2 & 2) == 0;
  if (a2) {
    BOOL v2 = 0;
  }
  return !this && v2;
}

uint64_t ZinCachePrefetchUtil::IsKernelPrefetchSupported(ZinCachePrefetchUtil *this, const ZinANELayer *a2)
{
  BOOL v2 = (ZinIrKernel *)*((void *)this + 17);
  int v3 = **(unsigned __int8 **)(*((void *)v2 + 100) + 40);
  if (*((void *)v2 + 77)) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = ZinIrKernel::IsMutable(v2) ^ 1;
  }
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

BOOL ZinCachePrefetchDma::CalculatePrefetchRateLog2(ZinCachePrefetchDma *this)
{
  BOOL v2 = (ZinIrHalParameters *)*((void *)this + 2);
  if (!*((unsigned char *)v2 + 1305)) {
    return 0;
  }
  ZinIrHalParameters::GetOperationCondition(v2, *(double *)(*((void *)this + 3) + 104), *(_DWORD *)(*((void *)this + 3) + 112), *(_DWORD *)(*((void *)this + 3) + 116), (uint64_t)v4);
  return v5 <= v6;
}

uint64_t CalculatePrefetchBufferSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  int v8 = 1065353216;
  AddKernelPrefetchAllocation(a3, a1, a2, v6);
  uint64_t v3 = ZinMemCacheUtil::MemCacheAllocationState::CalculateSize((ZinMemCacheUtil::MemCacheAllocationState *)((char *)v6 + 8));
  uint64_t v4 = *(void *)&v6[0] + v3;
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v6 + 8);
  return v4;
}

void sub_2111FC550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AddKernelPrefetchAllocation(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  double v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  if (*(void **)a1 == v7)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = (void *)*v6;
      if ((*(unsigned int (**)(void))(*(void *)*v6 + 120))(*v6))
      {
        (*(void (**)(uint64_t *__return_ptr, void *))(*v10 + 128))(&v15, v10);
        uint64_t v11 = *(void *)(v15 + 104);
        if (!v11 || (uint64_t v12 = *(const ZinIrSymbol ***)(v11 + 40), v12 == *(const ZinIrSymbol ***)(v11 + 48))) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = *v12;
        }
        ZinMemCacheUtil::MemCacheAllocationState::AddAllocation((ZinMemCacheUtil::MemCacheAllocationState *)(a4 + 1), v13, a3);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
      else
      {
        v9 += ZinAlignPower2(*(void *)(*(void *)(*(void *)(v10[17] + 800) + 40) + 16), a2);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  uint64_t result = ZinAlignPower2(v9, a2);
  *a4 += result;
  return result;
}

void sub_2111FC6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CachePrefetchGroup>::__construct_one_at_end[abi:ne180100]<CachePrefetchGroup const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = *(void *)a2;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  uint64_t result = std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v3 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_2111FC718(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CachePrefetchGroup>::__push_back_slow_path<CachePrefetchGroup const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[32 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)v11 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  v15 += 32;
  std::vector<CachePrefetchGroup>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<LayerSourcePair>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_2111FC80C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<LayerSourcePair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CachePrefetchGroup>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CachePrefetchGroup>,std::reverse_iterator<CachePrefetchGroup*>,std::reverse_iterator<CachePrefetchGroup*>,std::reverse_iterator<CachePrefetchGroup*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CachePrefetchGroup>,std::reverse_iterator<CachePrefetchGroup*>,std::reverse_iterator<CachePrefetchGroup*>,std::reverse_iterator<CachePrefetchGroup*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v7 - 32) = v8;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CachePrefetchGroup>,std::reverse_iterator<CachePrefetchGroup*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CachePrefetchGroup>,std::reverse_iterator<CachePrefetchGroup*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<LayerSourcePair>,std::reverse_iterator<LayerSourcePair*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,CachePrefetchGroup *,CachePrefetchGroup *,CachePrefetchGroup *,0>(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = (__n128 *)(v4 + 1);
    uint64_t v7 = *v4;
    v4 += 4;
    uint64_t v8 = (uint64_t)(a3 + 1);
    *a3 = v7;
    a3 += 4;
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

void ZinCachePrefetchDma::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "CalculateSieveFactor() failed\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "ValidatePrefetchAllocation() failed\n", a5, a6, a7, a8, 0);
}

void ZinCachePrefetchDma::FindCachePrefetchGroups(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_0_3(a1, a2);
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "[Cache Prefetch] No cache prefetching as perf model failed\n", v2, 2u);
}

void ZinCachePrefetchDma::ValidatePrefetchAllocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Prefetcher is not null, but the last layer in the graph has been reached\n", a5, a6, a7, a8, 0);
}

void ZinCachePrefetchDma::SetSieveFactorForPrefetchGroups(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_0_3(a1, a2);
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Prefetcher MirInfo cannot be nullptr\n", v2, 2u);
}

{
  uint8_t *v2;

  OUTLINED_FUNCTION_0_3(a1, a2);
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "[SetSieveFactorForPrefetchGroups] Perf Model failed", v2, 2u);
}

void ZinBasicBlockInLayer::ZinBasicBlockInLayer()
{
}

void sub_2111FCD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinLayerNormLayer::ZinLayerNormLayer(&a12);
  _Unwind_Resume(a1);
}

void ZinBasicBlockInLayer::Clone()
{
}

void sub_2111FCDFC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21667D3C0](v1, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinBasicBlockInLayer::HasOutputParentTensor(ZinBasicBlockInLayer *this)
{
  uint64_t v1 = *((void *)this + 14);
  uint64_t v2 = *((void *)this + 15);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 104))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

__CFDictionary *ZinCreatePEPoolUnit(const ZinIrPEPoolUnitInfo *a1)
{
  v4[4] = *MEMORY[0x263EF8340];
  Unit = ZinCreateUnit(a1);
  v4[0] = &unk_26C3816E8;
  v4[3] = v4;
  ZinCreatePEUnit((uint64_t)a1, (uint64_t)v4, Unit);
  std::__function::__value_func<void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::~__value_func[abi:ne180100](v4);
  return Unit;
}

void sub_2111FCF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::~__func()
{
}

void *std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3816E8;
  return result;
}

void std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3816E8;
}

void std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::operator()(uint64_t a1, uint64_t a2, std::vector<std::string> *a3, __CFDictionary **a4)
{
  *(void *)&long long v46 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a4;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnitInfo *)&v30, (const ZinIrPEUnitInfo *)a2);
  BOOL v30 = &unk_26C34CEE8;
  uint64_t v34 = &unk_26C345B80;
  if (*(char *)(a2 + 999) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(a2 + 976), *(void *)(a2 + 984));
  }
  else {
    std::string __s = *(std::string *)(a2 + 976);
  }
  int v36 = *(_DWORD *)(a2 + 1000);
  memset(&v37, 0, sizeof(v37));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, *(long long **)(a2 + 1008), *(long long **)(a2 + 1016), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1016) - *(void *)(a2 + 1008)) >> 3));
  long long v7 = *(_OWORD *)(a2 + 1032);
  uint64_t v34 = &unk_26C34AB58;
  long long v8 = *(_OWORD *)(a2 + 1096);
  long long v41 = *(_OWORD *)(a2 + 1080);
  long long v42 = v8;
  long long v43 = *(_OWORD *)(a2 + 1112);
  long long v9 = *(_OWORD *)(a2 + 1048);
  long long v10 = *(_OWORD *)(a2 + 1064);
  long long v38 = v7;
  long long v39 = v9;
  long long v40 = v10;
  int v44 = *(_DWORD *)(a2 + 1128);
  double v19 = &unk_26C345B80;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __s;
  }
  int v21 = v36;
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, (long long *)v37.__r_.__value_.__l.__data_, (long long *)v37.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3));
  double v19 = &unk_26C34AB58;
  long long v26 = v41;
  long long v27 = v42;
  long long v28 = v43;
  int v29 = v44;
  long long v23 = v38;
  long long v24 = v39;
  long long v25 = v40;
  if ((v32 & 0x80u) == 0) {
    size_t v11 = v32;
  }
  else {
    size_t v11 = v31[1];
  }
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v11 + 5);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if ((v32 & 0x80u) == 0) {
      long long v13 = v31;
    }
    else {
      long long v13 = (void *)v31[0];
    }
    memmove(p_str, v13, v11);
  }
  strcpy((char *)p_str + v11, ".pool");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = __str;
  long long v23 = v33;
  std::vector<std::string>::pointer begin = a3->__begin_;
  if (SHIBYTE(a3->__begin_->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v15 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v15;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v22, &__str, &v46, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = __p;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(a3, &__str, &v46, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  PoolUnit = ZinCreatePoolUnit((const ZinIrPoolUnitInfo *)&v19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  CFStringRef v18 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)p_p, 0x8000100u);
  CFDictionaryAddValue(v6, v18, PoolUnit);
  CFRelease(v18);
  CFRelease(PoolUnit);
  ZinIrUnitInfo::~ZinIrUnitInfo(&v19);
  BOOL v30 = &unk_26C34CEE8;
  ZinIrUnitInfo::~ZinIrUnitInfo(&v34);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(&v30);
}

void sub_2111FD3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  ZinIrUnitInfo::~ZinIrUnitInfo(&a9);
  ZinIrUnitInfo::~ZinIrUnitInfo(v30);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo((void **)&a30);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0,std::allocator<ZinCreatePEPoolUnit(ZinIrPEPoolUnitInfo const&)::$_0>,void ()(ZinIrPEUnitInfo const&,std::vector<std::string> &,__CFDictionary *)>::target_type()
{
}

uint64_t ZinMirUnitGraphDeadCodeEliminator(uint64_t a1)
{
  v4[4] = *MEMORY[0x263EF8340];
  char v3 = 0;
  v4[0] = &unk_26C3818A0;
  v4[3] = v4;
  uint64_t v1 = ZinMirUnitGraph::Traverse(a1, (uint64_t)v4, &v3);
  std::__function::__value_func<ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::~__value_func[abi:ne180100](v4);
  return v1;
}

void sub_2111FD55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::~__func()
{
}

void *std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3818A0;
  return result;
}

void std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3818A0;
}

uint64_t std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::operator()(uint64_t a1, uint64_t *a2, ZinDynamicOffsetCustomBarCmd **a3)
{
  uint64_t v4 = *a2;
  if (std::__tree<std::shared_ptr<ZinMirUnit>,ZinIrSharedPointerNameComparator<ZinMirUnit>,std::allocator<std::shared_ptr<ZinMirUnit>>>::__count_unique<std::shared_ptr<ZinMirUnit>>(*a2, a3)&& !RemoveNodeWithNoOutgoingEdges(v4, a3))
  {
    goto LABEL_11;
  }
  uint64_t result = std::__tree<std::shared_ptr<ZinMirUnit>,ZinIrSharedPointerNameComparator<ZinMirUnit>,std::allocator<std::shared_ptr<ZinMirUnit>>>::__count_unique<std::shared_ptr<ZinMirUnit>>(v4, a3);
  if (!result) {
    return result;
  }
  if (RemoveNodeWithNoIncomingEdges(v4, a3)) {
    return 0;
  }
LABEL_11:
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::operator()(a3);
  }
  return 3;
}

uint64_t std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::target_type()
{
}

BOOL RemoveNodeWithNoOutgoingEdges(uint64_t a1, ZinMirUnit **a2)
{
  if (ZinMirUnit::IsOutput(*a2)) {
    return 1;
  }
  std::string __p = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)(a1 + 24), (unint64_t **)&__p);
  BOOL v5 = v4 + 3;
  if (!v4) {
    BOOL v5 = (void *)(a1 + 104);
  }
  if (v5[1] != *v5) {
    return 1;
  }
  long long v15 = (unint64_t *)a2;
  long long v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)(a1 + 64), &v15);
  long long v8 = v7 + 3;
  if (!v7) {
    long long v8 = (uint64_t **)(a1 + 104);
  }
  CFStringRef v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *v8, (uint64_t)v8[1], v8[1] - *v8);
  char v9 = ZinMirUnitGraph::RemoveNode(a1, a2);
  long long v10 = (unint64_t ***)__p;
  if ((v9 & 1) == 0)
  {
    int v12 = 0;
    if (!__p) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  size_t v11 = v18;
  if (__p != v18)
  {
    LOBYTE(v12) = 1;
    do
    {
      long long v13 = (std::__shared_weak_count *)(*v10)[1];
      long long v15 = **v10;
      uint64_t v16 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = RemoveNodeWithNoOutgoingEdges(a1, &v15);
      if ((_BYTE)v12) {
        int v12 = v14;
      }
      else {
        int v12 = 0;
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      ++v10;
    }
    while (v10 != v11);
    long long v10 = (unint64_t ***)__p;
    if (!__p) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  int v12 = 1;
  if (__p)
  {
LABEL_23:
    CFStringRef v18 = v10;
    operator delete(v10);
  }
LABEL_24:
  BOOL result = v12 != 0;
  if ((v9 & 1) == 0) {
    return 0;
  }
  return result;
}

void sub_2111FD824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL RemoveNodeWithNoIncomingEdges(uint64_t a1, ZinMirUnit **a2)
{
  if (ZinMirUnit::IsInput(*a2) || ZinMirUnit::IsConstIn(*a2)) {
    return 1;
  }
  std::string __p = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)(a1 + 64), (unint64_t **)&__p);
  BOOL v5 = v4 + 3;
  if (!v4) {
    BOOL v5 = (void *)(a1 + 104);
  }
  if (v5[1] != *v5) {
    return 1;
  }
  long long v15 = (unint64_t *)a2;
  long long v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)(a1 + 24), &v15);
  long long v8 = v7 + 3;
  if (!v7) {
    long long v8 = (uint64_t **)(a1 + 104);
  }
  CFStringRef v18 = 0;
  uint64_t v19 = 0;
  std::string __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *v8, (uint64_t)v8[1], v8[1] - *v8);
  char v9 = ZinMirUnitGraph::RemoveNode(a1, a2);
  long long v10 = (unint64_t ***)__p;
  if ((v9 & 1) == 0)
  {
    int v12 = 0;
    if (!__p) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  size_t v11 = v18;
  if (__p != v18)
  {
    LOBYTE(v12) = 1;
    do
    {
      long long v13 = (std::__shared_weak_count *)(*v10)[1];
      long long v15 = **v10;
      uint64_t v16 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = RemoveNodeWithNoIncomingEdges(a1, &v15);
      if ((_BYTE)v12) {
        int v12 = v14;
      }
      else {
        int v12 = 0;
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      ++v10;
    }
    while (v10 != v11);
    long long v10 = (unint64_t ***)__p;
    if (!__p) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  int v12 = 1;
  if (__p)
  {
LABEL_24:
    CFStringRef v18 = v10;
    operator delete(v10);
  }
LABEL_25:
  BOOL result = v12 != 0;
  if ((v9 & 1) == 0) {
    return 0;
  }
  return result;
}

void sub_2111FD9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0,std::allocator<ZinMirUnitGraphDeadCodeEliminator(ZinMirUnitGraph *)::$_0>,ZinIrStatus ()(ZinMirUnitGraph *,std::shared_ptr<ZinMirUnit> const&)>::operator()(ZinDynamicOffsetCustomBarCmd **a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*a1);
  if (*(char *)(DynamicOffsetInfo + 23) >= 0) {
    uint64_t v2 = DynamicOffsetInfo;
  }
  else {
    uint64_t v2 = *(void *)DynamicOffsetInfo;
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: DeadCodeEliminator fails in %s.", (uint8_t *)&v3, 0xCu);
}

void ZinMirConstInUnit::ZinMirConstInUnit(ZinMirConstInUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  *(void *)ZinMirUnit::ZinMirUnit((uint64_t)this, 29, (long long *)a2) = &unk_26C34B118;
}

uint64_t ZinMirConstInUnit::DynamicShapeOutputTensorDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a1 + 152);
  long long v4 = *(_OWORD *)(a1 + 168);
  *(void *)(a3 + 32) = *(void *)(a1 + 184);
  *(_OWORD *)a3 = v3;
  *(_OWORD *)(a3 + 16) = v4;
  return 0;
}

void ZinMirConstInUnit::CreateLayer()
{
}

void sub_2111FDBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinMirConstInUnit::SetSymbolInfo(ZinMirConstInUnit *this, int a2)
{
  *((_DWORD *)this + 72) = a2;
  return 0;
}

void ZinMirConstInUnit::~ZinMirConstInUnit(ZinMirConstInUnit *this)
{
  ZinMirUnit::~ZinMirUnit(this);

  JUMPOUT(0x21667D3C0);
}

void ZinTEPadFactory::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  int v63 = 0;
  uint64_t v62 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v66 = -1;
  long long v59 = &unk_26C34D9E0;
  long long __p = 0u;
  memset(v68, 0, sizeof(v68));
  memset(v69, 0, 26);
  *(_OWORD *)&__src.__begin_ = xmmword_211EE25D0;
  std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v69, (char *)&__src, (uint64_t)&__src.__end_cap_, 2uLL);
  DWORD2(v65) = *(_DWORD *)(a1 + 64);
  if (&v68[1] != (void *)(a1 + 200)) {
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v68[1], *(char **)(a1 + 200), *(void *)(a1 + 208), (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 3);
  }
  v69[12] = *(_WORD *)(a1 + 224);
  uint64_t v8 = *(void *)(*(void *)a2 + 64);
  uint64_t v7 = *(void *)(*(void *)a2 + 72);
  std::vector<unsigned int>::size_type v9 = *(void *)(a4 + 2072);
  __x[0] = 0;
  std::vector<unsigned int>::vector(&__src, v9, __x);
  uint64_t v10 = *(int *)(a1 + 156);
  uint64_t v12 = *(int *)(a1 + 164);
  uint64_t v11 = *(int *)(a1 + 168);
  long long v13 = *(int **)(a1 + 200);
  int v14 = *(int **)(a1 + 208);
  if (v13 == v14)
  {
    int v17 = 1;
  }
  else
  {
    uint64_t v15 = v7 - (*(int *)(a1 + 160) + v10);
    int v16 = 1;
    int v17 = 1;
    do
    {
      int v18 = *v13;
      int v19 = v13[1];
      v13 += 2;
      if (v18 == 3) {
        int v20 = v19;
      }
      else {
        int v20 = v17;
      }
      if (v18 == 4) {
        int v16 = v19;
      }
      else {
        int v17 = v20;
      }
    }
    while (v13 != v14);
    switch(v16)
    {
      case 3:
        goto LABEL_15;
      case 5:
        int v55 = 0;
        std::vector<unsigned int>::pointer begin = __src.__begin_;
        *(float *)__src.__begin_ = 1.0 / (float)v15;
        float v23 = (float)((float)-*(_DWORD *)(a1 + 156) + 0.5) / (float)v15;
        int v24 = 1;
LABEL_19:
        *((float *)begin + 2) = v23;
        long long v25 = (_DWORD *)*((void *)&__p + 1);
        if (*((void *)&__p + 1) >= v68[0])
        {
          long long v27 = (_DWORD *)__p;
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&__p + 1) - __p) >> 2);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0x1555555555555555) {
            goto LABEL_58;
          }
          if (0x5555555555555556 * ((uint64_t)(v68[0] - __p) >> 2) > v29) {
            unint64_t v29 = 0x5555555555555556 * ((uint64_t)(v68[0] - __p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68[0] - __p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v30 = 0x1555555555555555;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)v68, v30);
            long long v25 = (_DWORD *)*((void *)&__p + 1);
            long long v27 = (_DWORD *)__p;
          }
          else
          {
            uint64_t v31 = 0;
          }
          unsigned __int8 v32 = &v31[12 * v28];
          long long v33 = &v31[12 * v30];
          *(void *)unsigned __int8 v32 = 4;
          *((_DWORD *)v32 + 2) = v24;
          long long v26 = v32 + 12;
          if (v25 != v27)
          {
            do
            {
              uint64_t v34 = *(void *)(v25 - 3);
              v25 -= 3;
              int v35 = v25[2];
              *(void *)(v32 - 12) = v34;
              v32 -= 12;
              *((_DWORD *)v32 + 2) = v35;
            }
            while (v25 != v27);
            long long v27 = (_DWORD *)__p;
          }
          *(void *)&long long __p = v32;
          *((void *)&__p + 1) = v26;
          v68[0] = v33;
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          **((void **)&__p + 1) = 4;
          v25[2] = v24;
          long long v26 = (char *)(v25 + 3);
        }
        uint64_t v36 = v8 - (v12 + v11);
        *((void *)&__p + 1) = v26;
        if (v17 != 6)
        {
          if (v17 == 5)
          {
            float v42 = (float)v36;
            float v43 = 1.0 / (float)v36;
            std::vector<unsigned int>::pointer v38 = __src.__begin_;
            *((float *)__src.__begin_ + 1) = v43;
            float v39 = (float)((float)-*(_DWORD *)(a1 + 164) + 0.5) / v42;
            int v41 = 1;
            int v40 = 1;
            goto LABEL_41;
          }
          if (v17 != 3)
          {
            int v40 = 0;
            float v39 = (float)-*(_DWORD *)(a1 + 164);
            int v41 = 25;
            std::vector<unsigned int>::pointer v38 = __src.__begin_;
            goto LABEL_41;
          }
        }
        float v37 = (float)(v36 - 1);
        std::vector<unsigned int>::pointer v38 = __src.__begin_;
        *((float *)__src.__begin_ + 1) = 1.0 / v37;
        float v39 = (float)-*(_DWORD *)(a1 + 164) / v37;
        int v40 = 2;
        int v41 = 1;
LABEL_41:
        *((float *)v38 + 3) = v39;
        if ((unint64_t)v26 < v68[0])
        {
          *(void *)long long v26 = 3;
          *((_DWORD *)v26 + 2) = v40;
          int v44 = v26 + 12;
          goto LABEL_57;
        }
        uint64_t v45 = (char *)__p;
        unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v26[-__p] >> 2);
        unint64_t v47 = v46 + 1;
        if (v46 + 1 <= 0x1555555555555555)
        {
          if (0x5555555555555556 * ((uint64_t)(v68[0] - __p) >> 2) > v47) {
            unint64_t v47 = 0x5555555555555556 * ((uint64_t)(v68[0] - __p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68[0] - __p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v48 = 0x1555555555555555;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48)
          {
            long long v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)v68, v48);
            long long v26 = (char *)*((void *)&__p + 1);
            uint64_t v45 = (char *)__p;
          }
          else
          {
            long long v49 = 0;
          }
          char v50 = &v49[12 * v46];
          long long v51 = &v49[12 * v48];
          *(void *)char v50 = 3;
          *((_DWORD *)v50 + 2) = v40;
          int v44 = v50 + 12;
          if (v26 != v45)
          {
            do
            {
              uint64_t v52 = *(void *)(v26 - 12);
              v26 -= 12;
              int v53 = *((_DWORD *)v26 + 2);
              *(void *)(v50 - 12) = v52;
              v50 -= 12;
              *((_DWORD *)v50 + 2) = v53;
            }
            while (v26 != v45);
            uint64_t v45 = (char *)__p;
          }
          *(void *)&long long __p = v50;
          *((void *)&__p + 1) = v44;
          v68[0] = v51;
          if (v45) {
            operator delete(v45);
          }
LABEL_57:
          *((void *)&__p + 1) = v44;
          *(void *)__x = 0;
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          std::vector<ZinTECropModeLayer::TexCropCfgElem>::resize((uint64_t)__x, 4uLL);
          uint64_t v54 = *(void *)__x;
          **(void **)__x = 0x800000000;
          *(_DWORD *)(v54 + 8) = v55;
          *(_OWORD *)(v54 + 12) = xmmword_211EFD2B0;
          *(void *)(v54 + 28) = 0x400000000;
          *(_DWORD *)(v54 + 36) = 8;
          *(_DWORD *)(v54 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v41;
          *(_OWORD *)(v54 + 44) = xmmword_211EFD2C0;
          *(_DWORD *)(v54 + 6std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
          operator new();
        }
LABEL_58:
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      case 6:
LABEL_15:
        int v55 = 0;
        float v21 = (float)(v15 - 1);
        std::vector<unsigned int>::pointer begin = __src.__begin_;
        *(float *)__src.__begin_ = 1.0 / v21;
        float v23 = (float)-*(_DWORD *)(a1 + 156) / v21;
        int v24 = 2;
        goto LABEL_19;
    }
  }
  int v24 = 0;
  float v23 = (float)-(int)v10;
  int v55 = 25;
  std::vector<unsigned int>::pointer begin = __src.__begin_;
  goto LABEL_19;
}

void sub_2111FE328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
}

void ZinMirAneKernelCoeff::ZinMirBuildNEKernelDataSharedKmem(ZinMirAneKernelCoeff *this, int a2, int a3, int a4)
{
  uint64_t v6 = (void *)*((void *)this + 4);
  int v7 = a2 / a4;
  if (a2 / a4)
  {
    int v8 = 0;
    std::vector<unsigned int>::size_type v9 = v6 + 2;
    uint64_t v10 = v6 + 4;
    uint64_t v11 = (char *)v6[3];
    *(void *)&long long v12 = -1;
    *((void *)&v12 + 1) = -1;
    do
    {
      if ((unint64_t)v11 >= *v10)
      {
        uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v11[-*v9] >> 3);
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) > 0x492492492492492) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v10 - *v9) >> 3) > v14) {
          unint64_t v14 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v10 - *v9) >> 3);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v10 - *v9) >> 3)) >= 0x249249249249249) {
          unint64_t v15 = 0x492492492492492;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)(v6 + 4), v15);
          *(void *)&long long v12 = -1;
          *((void *)&v12 + 1) = -1;
        }
        else
        {
          int v16 = 0;
        }
        int v17 = &v16[56 * v13];
        *(_DWORD *)int v17 = a3;
        *((_DWORD *)v17 + 1) = a4;
        *(_OWORD *)(v17 + 8) = v12;
        *(_OWORD *)(v17 + 24) = v12;
        *((void *)v17 + 5) = -1;
        *((void *)v17 + 6) = 0;
        int v19 = (char *)v6[2];
        int v18 = (char *)v6[3];
        int v20 = v17;
        if (v18 != v19)
        {
          do
          {
            long long v21 = *(_OWORD *)(v18 - 56);
            long long v22 = *(_OWORD *)(v18 - 40);
            long long v23 = *(_OWORD *)(v18 - 24);
            *((void *)v20 - 1) = *((void *)v18 - 1);
            *(_OWORD *)(v20 - 24) = v23;
            *(_OWORD *)(v20 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v22;
            *(_OWORD *)(v20 - 56) = v21;
            v20 -= 56;
            v18 -= 56;
          }
          while (v18 != v19);
          int v18 = (char *)*v9;
        }
        uint64_t v11 = v17 + 56;
        _OWORD v6[2] = v20;
        v6[3] = v17 + 56;
        v6[4] = &v16[56 * v15];
        if (v18)
        {
          operator delete(v18);
          *(void *)&long long v12 = -1;
          *((void *)&v12 + 1) = -1;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v11 = a3;
        *((_DWORD *)v11 + 1) = a4;
        *(_OWORD *)(v11 + 24) = v12;
        *(_OWORD *)(v11 + 8) = v12;
        *((void *)v11 + 5) = -1;
        *((void *)v11 + 6) = 0;
        v11 += 56;
      }
      v6[3] = v11;
      a3 += a4;
      ++v8;
    }
    while (v8 != v7);
  }
  int v24 = a2 - v7 * a4;
  if (v24)
  {
    unint64_t v25 = v6[4];
    unint64_t v26 = v6[3];
    if (v26 >= v25)
    {
      uint64_t v29 = v6[2];
      uint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v26 - v29) >> 3);
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) > 0x492492492492492) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v32 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - v29) >> 3);
      if (2 * v32 > v31) {
        unint64_t v31 = 2 * v32;
      }
      if (v32 >= 0x249249249249249) {
        unint64_t v33 = 0x492492492492492;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33) {
        uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)(v6 + 4), v33);
      }
      else {
        uint64_t v34 = 0;
      }
      int v35 = &v34[56 * v30];
      uint64_t v36 = &v34[56 * v33];
      *(_DWORD *)int v35 = a3;
      *((_DWORD *)v35 + 1) = v24;
      *(void *)&long long v37 = -1;
      *((void *)&v37 + 1) = -1;
      *(_OWORD *)(v35 + 8) = v37;
      *(_OWORD *)(v35 + 24) = v37;
      *((void *)v35 + 5) = -1;
      *((void *)v35 + 6) = 0;
      unint64_t v28 = v35 + 56;
      float v39 = (char *)v6[2];
      std::vector<unsigned int>::pointer v38 = (char *)v6[3];
      if (v38 != v39)
      {
        do
        {
          long long v40 = *(_OWORD *)(v38 - 56);
          long long v41 = *(_OWORD *)(v38 - 40);
          long long v42 = *(_OWORD *)(v38 - 24);
          *((void *)v35 - 1) = *((void *)v38 - 1);
          *(_OWORD *)(v35 - 24) = v42;
          *(_OWORD *)(v35 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v41;
          *(_OWORD *)(v35 - 56) = v40;
          v35 -= 56;
          v38 -= 56;
        }
        while (v38 != v39);
        std::vector<unsigned int>::pointer v38 = (char *)v6[2];
      }
      _OWORD v6[2] = v35;
      v6[3] = v28;
      v6[4] = v36;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v26 = a3;
      *(_DWORD *)(v26 + 4) = v24;
      *(void *)&long long v27 = -1;
      *((void *)&v27 + 1) = -1;
      *(_OWORD *)(v26 + 8) = v27;
      *(_OWORD *)(v26 + 24) = v27;
      *(void *)(v26 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = -1;
      *(void *)(v26 + 48) = 0;
      unint64_t v28 = (char *)(v26 + 56);
    }
    v6[3] = v28;
  }
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinKernelDescriptor *a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + v5);
  *(void *)this += 4;
  uint64_t v7 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2 + 4);
  if (v7)
  {
    uint64_t v6 = v7;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v8 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2 + 12);
    if (v8)
    {
      uint64_t v6 = v8;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      uint64_t v9 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2 + 20);
      if (v9)
      {
        uint64_t v6 = v9;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        uint64_t v10 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (void *)a2 + 4);
        if (v10)
        {
          uint64_t v6 = v10;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          uint64_t v11 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (void *)a2 + 14);
          if (v11)
          {
            uint64_t v6 = v11;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            uint64_t v12 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 38);
            if (v12)
            {
              uint64_t v6 = v12;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else
            {
              uint64_t v13 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 41);
              if (v13)
              {
                uint64_t v6 = v13;
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else
              {
                uint64_t v14 = ZinSerial::Deserializer::Deserialize(this, (ZinKernelDescriptor *)((char *)a2 + 176));
                if (v14)
                {
                  uint64_t v6 = v14;
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinSerial::Deserializer::Deserialize();
                  }
                }
                else
                {
                  uint64_t v17 = *(void *)this;
                  uint64_t v16 = *((void *)this + 1);
                  if (v16 && (unint64_t)(v17 + 4) > *((void *)this + 2))
                  {
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                      ZinSerial::Deserializer::Deserialize();
                    }
                    return 3;
                  }
                  *((_DWORD *)a2 + 5std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v16 + v17);
                  uint64_t v19 = *(void *)this;
                  uint64_t v18 = *((void *)this + 1);
                  uint64_t v20 = *(void *)this + 4;
                  *(void *)this = v20;
                  if (v18 && (unint64_t)(v19 + 8) > *((void *)this + 2))
                  {
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                      ZinSerial::Deserializer::Deserialize();
                    }
                    return 3;
                  }
                  *((_DWORD *)a2 + 51) = *(_DWORD *)(v18 + v20);
                  *(void *)this += 4;
                  uint64_t v21 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 52);
                  if (!v21)
                  {
                    uint64_t v22 = *(void *)this;
                    unint64_t v23 = *(void *)this + 8;
                    unint64_t v24 = *((void *)this + 2);
                    if (v23 <= v24)
                    {
                      uint64_t v25 = *((void *)this + 1);
                      uint64_t v26 = *(void *)(v25 + v22);
                      *(void *)this = v23;
                      *((void *)a2 + 28) = v26;
                      if (v22 + 12 <= v24)
                      {
                        *((_DWORD *)a2 + 58) = *(_DWORD *)(v25 + v23);
                        uint64_t v27 = *(void *)this;
                        uint64_t v28 = *(void *)this + 4;
                        *(void *)this = v28;
                        uint64_t v29 = v27 + 12;
                        unint64_t v30 = *((void *)this + 2);
                        if (v27 + 12 <= v30)
                        {
                          uint64_t v31 = *((void *)this + 1);
                          uint64_t v32 = *(void *)(v31 + v28);
                          *(void *)this = v29;
                          *((void *)a2 + 3std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v32;
                          uint64_t v33 = v27 + 20;
                          if (v27 + 20 <= v30)
                          {
                            uint64_t v34 = *(void *)(v31 + v29);
                            *(void *)this = v33;
                            *((void *)a2 + 31) = v34;
                            uint64_t v35 = v27 + 28;
                            if (v27 + 28 <= v30)
                            {
                              uint64_t v36 = *(void *)(v31 + v33);
                              *(void *)this = v35;
                              *((void *)a2 + 32) = v36;
                              uint64_t v37 = v27 + 36;
                              if (v27 + 36 <= v30)
                              {
                                uint64_t v38 = *(void *)(v31 + v35);
                                *(void *)this = v37;
                                *((void *)a2 + 33) = v38;
                                if (v27 + 40 <= v30)
                                {
                                  uint64_t v6 = 0;
                                  *((_DWORD *)a2 + 68) = *(_DWORD *)(v31 + v37);
                                  *(void *)this += 4;
                                  return v6;
                                }
                                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                  ZinSerial::Deserializer::Deserialize();
                                }
                              }
                              else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                              {
                                ZinSerial::Deserializer::Deserialize();
                              }
                            }
                            else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                            {
                              ZinSerial::Deserializer::Deserialize();
                            }
                          }
                          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                          {
                            ZinSerial::Deserializer::Deserialize();
                          }
                        }
                        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                        {
                          ZinSerial::Deserializer::Deserialize();
                        }
                      }
                      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                      {
                        ZinSerial::Deserializer::Deserialize();
                      }
                    }
                    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                    {
                      ZinSerial::Deserializer::Deserialize();
                    }
                    return 3;
                  }
                  uint64_t v6 = v21;
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinSerial::Deserializer::Deserialize();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t ZinSerial::Deserializer::Deserialize(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v6 = *a1 + 4;
    *a1 = v6;
    if (v4 && v5 + 5 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *(unsigned char *)(a2 + 4) = *(unsigned char *)(v4 + v6);
      uint64_t v7 = *a1;
      uint64_t v8 = a1[1];
      uint64_t v9 = *a1 + 1;
      *a1 = v9;
      if (!v8 || v7 + 2 <= (unint64_t)a1[2])
      {
        uint64_t v10 = 0;
        *(unsigned char *)(a2 + 5) = *(unsigned char *)(v8 + v9);
        ++*a1;
        return v10;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 4;
    *a1 = v5;
    uint64_t v6 = v4 + 12;
    uint64_t v7 = a1[2];
    if (v4 + 12 <= v7)
    {
      uint64_t v8 = a1[1];
      uint64_t v9 = *(void *)(v8 + v5);
      *a1 = v6;
      *(void *)(a2 + 8) = v9;
      uint64_t v10 = v4 + 20;
      if (v4 + 20 <= v7)
      {
        uint64_t v11 = *(void *)(v8 + v6);
        *a1 = v10;
        *(void *)(a2 + 16) = v11;
        uint64_t v12 = v4 + 28;
        if (v4 + 28 <= v7)
        {
          uint64_t v13 = *(void *)(v8 + v10);
          *a1 = v12;
          *(void *)(a2 + 24) = v13;
          uint64_t v14 = v4 + 36;
          if (v4 + 36 <= v7)
          {
            unint64_t v15 = *(void *)(v8 + v12);
            *a1 = v14;
            *(void *)(a2 + 32) = v15;
            uint64_t v16 = v4 + 44;
            if (v4 + 44 <= v7)
            {
              uint64_t v17 = *(void *)(v8 + v14);
              *a1 = v16;
              *(void *)(a2 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
              uint64_t v18 = v4 + 52;
              if (v4 + 52 <= v7)
              {
                uint64_t v19 = *(void *)(v8 + v16);
                *a1 = v18;
                *(void *)(a2 + 48) = v19;
                if (v4 + 53 <= v7)
                {
                  uint64_t v20 = 0;
                  *(unsigned char *)(a2 + 56) = *(unsigned char *)(v8 + v18);
                  ++*a1;
                  return v20;
                }
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 1 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(unsigned char *)a2 = *(unsigned char *)(v2 + v3);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v6 = *a1 + 1;
    *a1 = v6;
    if (v4 && v5 + 5 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(v4 + v6);
      uint64_t v7 = *a1;
      uint64_t v8 = *a1 + 4;
      *a1 = v8;
      uint64_t v9 = v7 + 12;
      uint64_t v10 = a1[2];
      if (v7 + 12 <= v10)
      {
        uint64_t v11 = a1[1];
        uint64_t v12 = *(void *)(v11 + v8);
        *a1 = v9;
        *(void *)(a2 + 8) = v12;
        uint64_t v13 = v7 + 20;
        if (v7 + 20 <= v10)
        {
          uint64_t v14 = *(void *)(v11 + v9);
          *a1 = v13;
          *(void *)(a2 + 16) = v14;
          if (v7 + 21 <= v10)
          {
            *(unsigned char *)(a2 + 24) = *(unsigned char *)(v11 + v13);
            unint64_t v15 = *a1;
            uint64_t v16 = *a1 + 1;
            *a1 = v16;
            uint64_t v17 = v15 + 9;
            uint64_t v18 = a1[2];
            if (v15 + 9 <= v18)
            {
              uint64_t v19 = a1[1];
              uint64_t v20 = *(void *)(v19 + v16);
              *a1 = v17;
              *(void *)(a2 + 32) = v20;
              if (v15 + 10 <= v18)
              {
                *(unsigned char *)(a2 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(v19 + v17);
                uint64_t v21 = *a1;
                uint64_t v22 = *a1 + 1;
                *a1 = v22;
                unint64_t v23 = v21 + 9;
                unint64_t v24 = a1[2];
                if (v21 + 9 <= v24)
                {
                  uint64_t v25 = a1[1];
                  uint64_t v26 = *(void *)(v25 + v22);
                  *a1 = v23;
                  *(void *)(a2 + 48) = v26;
                  if (v21 + 10 <= v24)
                  {
                    *(unsigned char *)(a2 + 56) = *(unsigned char *)(v25 + v23);
                    uint64_t v28 = *a1;
                    uint64_t v27 = a1[1];
                    uint64_t v29 = *a1 + 1;
                    *a1 = v29;
                    if (v27 && v28 + 2 > (unint64_t)a1[2])
                    {
                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                        ZinSerial::Deserializer::Deserialize();
                      }
                    }
                    else
                    {
                      *(unsigned char *)(a2 + 57) = *(unsigned char *)(v27 + v29);
                      unint64_t v30 = *a1;
                      uint64_t v31 = *a1 + 1;
                      *a1 = v31;
                      uint64_t v32 = v30 + 9;
                      uint64_t v33 = a1[2];
                      if (v30 + 9 <= v33)
                      {
                        uint64_t v34 = a1[1];
                        uint64_t v35 = *(void *)(v34 + v31);
                        *a1 = v32;
                        *(void *)(a2 + 64) = v35;
                        if (v30 + 10 <= v33)
                        {
                          *(unsigned char *)(a2 + 72) = *(unsigned char *)(v34 + v32);
                          uint64_t v37 = *a1;
                          uint64_t v36 = a1[1];
                          uint64_t v38 = *a1 + 1;
                          *a1 = v38;
                          if (v36 && v37 + 2 > (unint64_t)a1[2])
                          {
                            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                              ZinSerial::Deserializer::Deserialize();
                            }
                          }
                          else
                          {
                            *(unsigned char *)(a2 + 73) = *(unsigned char *)(v36 + v38);
                            long long v40 = *a1;
                            float v39 = a1[1];
                            long long v41 = *a1 + 1;
                            *a1 = v41;
                            if (v39 && v40 + 2 > (unint64_t)a1[2])
                            {
                              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                ZinSerial::Deserializer::Deserialize();
                              }
                            }
                            else
                            {
                              *(unsigned char *)(a2 + 74) = *(unsigned char *)(v39 + v41);
                              float v43 = *a1;
                              long long v42 = a1[1];
                              int v44 = *a1 + 1;
                              *a1 = v44;
                              if (v42 && v43 + 5 > (unint64_t)a1[2])
                              {
                                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                  ZinSerial::Deserializer::Deserialize();
                                }
                              }
                              else
                              {
                                *(_DWORD *)(a2 + 76) = *(_DWORD *)(v42 + v44);
                                unint64_t v46 = *a1;
                                uint64_t v45 = a1[1];
                                unint64_t v47 = *a1 + 4;
                                *a1 = v47;
                                if (v45 && v46 + 5 > (unint64_t)a1[2])
                                {
                                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                    ZinSerial::Deserializer::Deserialize();
                                  }
                                }
                                else
                                {
                                  *(unsigned char *)(a2 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(v45 + v47);
                                  long long v49 = *a1;
                                  unint64_t v48 = a1[1];
                                  char v50 = *a1 + 1;
                                  *a1 = v50;
                                  if (v48 && v49 + 2 > (unint64_t)a1[2])
                                  {
                                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                      ZinSerial::Deserializer::Deserialize();
                                    }
                                  }
                                  else
                                  {
                                    *(unsigned char *)(a2 + 81) = *(unsigned char *)(v48 + v50);
                                    uint64_t v52 = *a1;
                                    long long v51 = a1[1];
                                    int v53 = *a1 + 1;
                                    *a1 = v53;
                                    if (v51 && v52 + 2 > (unint64_t)a1[2])
                                    {
                                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                        ZinSerial::Deserializer::Deserialize();
                                      }
                                    }
                                    else
                                    {
                                      *(unsigned char *)(a2 + 82) = *(unsigned char *)(v51 + v53);
                                      int v55 = *a1;
                                      uint64_t v54 = a1[1];
                                      long long v56 = *a1 + 1;
                                      *a1 = v56;
                                      if (v54 && v55 + 5 > (unint64_t)a1[2])
                                      {
                                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                          ZinSerial::Deserializer::Deserialize();
                                        }
                                      }
                                      else
                                      {
                                        *(_DWORD *)(a2 + 84) = *(_DWORD *)(v54 + v56);
                                        uint64_t v58 = *a1;
                                        uint64_t v57 = a1[1];
                                        long long v59 = *a1 + 4;
                                        *a1 = v59;
                                        if (v57 && v58 + 8 > (unint64_t)a1[2])
                                        {
                                          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                            ZinSerial::Deserializer::Deserialize();
                                          }
                                        }
                                        else
                                        {
                                          *(_DWORD *)(a2 + 88) = *(_DWORD *)(v57 + v59);
                                          uint64_t v61 = *a1;
                                          uint64_t v60 = a1[1];
                                          uint64_t v62 = *a1 + 4;
                                          *a1 = v62;
                                          if (v60 && v61 + 8 > (unint64_t)a1[2])
                                          {
                                            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                              ZinSerial::Deserializer::Deserialize();
                                            }
                                          }
                                          else
                                          {
                                            *(_DWORD *)(a2 + 88) = *(_DWORD *)(v60 + v62);
                                            long long v64 = *a1;
                                            int v63 = a1[1];
                                            long long v65 = *a1 + 4;
                                            *a1 = v65;
                                            if (v63 && v64 + 8 > (unint64_t)a1[2])
                                            {
                                              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                                ZinSerial::Deserializer::Deserialize();
                                              }
                                            }
                                            else
                                            {
                                              *(_DWORD *)(a2 + 96) = *(_DWORD *)(v63 + v65);
                                              uint64_t v66 = *a1;
                                              uint64_t v67 = *a1 + 4;
                                              *a1 = v67;
                                              uint64_t v68 = v66 + 12;
                                              long long v69 = a1[2];
                                              if (v66 + 12 <= v69)
                                              {
                                                long long v70 = a1[1];
                                                uint64_t v71 = *(void *)(v70 + v67);
                                                *a1 = v68;
                                                *(void *)(a2 + 104) = v71;
                                                if (v66 + 13 <= v69)
                                                {
                                                  *(unsigned char *)(a2 + 112) = *(unsigned char *)(v70 + v68);
                                                  long long v72 = *a1;
                                                  uint64_t v73 = a1[1];
                                                  char v74 = *a1 + 1;
                                                  *a1 = v74;
                                                  if (!v73 || v72 + 2 <= (unint64_t)a1[2])
                                                  {
                                                    uint64_t v75 = 0;
                                                    *(unsigned char *)(a2 + 113) = *(unsigned char *)(v73 + v74);
                                                    ++*a1;
                                                    return v75;
                                                  }
                                                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                                    ZinSerial::Deserializer::Deserialize();
                                                  }
                                                }
                                                else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                                                {
                                                  ZinSerial::Deserializer::Deserialize();
                                                }
                                              }
                                              else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                                              {
                                                ZinSerial::Deserializer::Deserialize();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                        {
                          ZinSerial::Deserializer::Deserialize();
                        }
                      }
                      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                      {
                        ZinSerial::Deserializer::Deserialize();
                      }
                    }
                  }
                  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                  {
                    ZinSerial::Deserializer::Deserialize();
                  }
                }
                else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v6 = *a1 + 4;
    *a1 = v6;
    uint64_t v7 = v4 + 12;
    if (!v5 || v7 <= a1[2])
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(v5 + v6);
      *a1 = v7;
      *(void *)(a2 + 8) = v9;
      return v8;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4 && v5 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + v5);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *a1 + 4;
  *a1 = v8;
  if (v6 && v7 + 8 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(v6 + v8);
  *a1 += 4;
  uint64_t v9 = ZinSerial::BufferReader::Read(a1, (std::string *)(a2 + 8));
  if (v9)
  {
    uint64_t v10 = v9;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v11 = *a1;
    uint64_t v12 = *a1 + 8;
    uint64_t v13 = a1[2];
    if (v12 > v13)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    uint64_t v14 = a1[1];
    unint64_t v15 = *(void *)(v14 + v11);
    *a1 = v12;
    *(void *)(a2 + 32) = v15;
    uint64_t v16 = v11 + 16;
    if (v11 + 16 > v13)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    uint64_t v17 = *(void *)(v14 + v12);
    *a1 = v16;
    *(void *)(a2 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
    uint64_t v18 = v11 + 24;
    if (v18 > v13)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    uint64_t v20 = *(void *)(v14 + v16);
    *a1 = v18;
    *(void *)(a2 + 48) = v20;
    uint64_t v21 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinLiveRange *)(a2 + 56));
    if (v21)
    {
      uint64_t v10 = v21;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      uint64_t v22 = ZinSerial::Deserializer::Deserialize<ZinTensorDescriptor>((unint64_t *)a1, a2 + 72);
      if (v22)
      {
        uint64_t v10 = v22;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v23 = ZinSerial::Deserializer::Deserialize<AddrWrapInfo,int,int>((unint64_t *)a1, a2 + 288, (int *)&v25 + 1, (int *)&v25);
        if (v23)
        {
          uint64_t v10 = v23;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          unint64_t v24 = ZinSerial::Deserializer::Deserialize<StaticWrapInfo>((unint64_t *)a1, a2 + 312);
          if (v24)
          {
            uint64_t v10 = v24;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            uint64_t v10 = ZinSerial::Deserializer::Deserialize<unsigned int>((unint64_t *)a1, a2 + 344);
            if (v10 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
        }
      }
    }
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 1 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(unsigned char *)a2 = *(unsigned char *)(v2 + v3);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v6 = *a1 + 1;
    *a1 = v6;
    if (v4 && v5 + 2 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *(unsigned char *)(a2 + 1) = *(unsigned char *)(v4 + v6);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
      uint64_t v9 = *a1 + 1;
      *a1 = v9;
      if (v7 && v8 + 5 > (unint64_t)a1[2])
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(v7 + v9);
        uint64_t v10 = *a1;
        uint64_t v11 = *a1 + 4;
        *a1 = v11;
        uint64_t v12 = v10 + 12;
        uint64_t v13 = a1[2];
        if (v10 + 12 <= v13)
        {
          uint64_t v14 = a1[1];
          unint64_t v15 = *(void *)(v14 + v11);
          *a1 = v12;
          *(void *)(a2 + 8) = v15;
          uint64_t v16 = v10 + 20;
          if (v10 + 20 <= v13)
          {
            uint64_t v17 = *(void *)(v14 + v12);
            *a1 = v16;
            *(void *)(a2 + 16) = v17;
            uint64_t v18 = v10 + 28;
            if (v10 + 28 <= v13)
            {
              uint64_t v19 = *(void *)(v14 + v16);
              *a1 = v18;
              *(void *)(a2 + 24) = v19;
              uint64_t v20 = v10 + 36;
              if (v10 + 36 <= v13)
              {
                uint64_t v21 = 0;
                unint64_t v23 = *(void *)(v14 + v18);
                *a1 = v20;
                *(void *)(a2 + 32) = v23;
                return v21;
              }
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v6 = *a1 + 4;
    *a1 = v6;
    if (v4 && v5 + 8 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(v4 + v6);
      uint64_t v7 = *a1;
      uint64_t v8 = *a1 + 4;
      *a1 = v8;
      uint64_t v9 = v7 + 12;
      uint64_t v10 = a1[2];
      if (v7 + 12 <= v10)
      {
        uint64_t v11 = a1[1];
        uint64_t v12 = *(void *)(v11 + v8);
        *a1 = v9;
        *(void *)(a2 + 8) = v12;
        uint64_t v13 = v7 + 20;
        if (v7 + 20 <= v10)
        {
          uint64_t v14 = *(void *)(v11 + v9);
          *a1 = v13;
          *(void *)(a2 + 16) = v14;
          unint64_t v15 = v7 + 28;
          if (v7 + 28 <= v10)
          {
            uint64_t v16 = *(void *)(v11 + v13);
            *a1 = v15;
            *(void *)(a2 + 24) = v16;
            uint64_t v17 = v7 + 36;
            if (v7 + 36 <= v10)
            {
              uint64_t v18 = *(void *)(v11 + v15);
              *a1 = v17;
              *(void *)(a2 + 32) = v18;
              uint64_t v19 = v7 + 44;
              if (v7 + 44 <= v10)
              {
                uint64_t v20 = *(void *)(v11 + v17);
                *a1 = v19;
                *(void *)(a2 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v20;
                uint64_t v21 = v7 + 52;
                if (v7 + 52 <= v10)
                {
                  uint64_t v22 = 0;
                  unint64_t v24 = *(void *)(v11 + v19);
                  *a1 = v21;
                  *(void *)(a2 + 48) = v24;
                  return v22;
                }
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 8;
  uint64_t v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v7 = a1[1];
  uint64_t v8 = *(void *)(v7 + v2);
  *a1 = v3;
  *(void *)a2 = v8;
  uint64_t v9 = v2 + 16;
  if (v9 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v12 = *(void *)(v7 + v3);
  *a1 = v9;
  *(void *)(a2 + 8) = v12;
  uint64_t v17 = 0;
  uint64_t v13 = ZinSerial::Deserializer::Deserialize<ZinOcgKernelData,int,int>(a1, (void **)(a2 + 16), (_DWORD *)&v17 + 1, (int *)&v17);
  if (!v13)
  {
    uint64_t v14 = a1[1];
    unint64_t v15 = *a1 + 8;
    if (!v14 || v15 <= a1[2])
    {
      uint64_t v10 = 0;
      uint64_t v16 = *(void *)(v14 + *a1);
      *a1 = v15;
      *(void *)(a2 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v16;
      return v10;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v10 = v13;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinSerial::Deserializer::Deserialize();
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v6 = *a1 + 4;
    *a1 = v6;
    if (!v5 || v4 + 5 <= (unint64_t)a1[2])
    {
      uint64_t v7 = 0;
      *(unsigned char *)(a2 + 4) = *(unsigned char *)(v5 + v6);
      ++*a1;
      return v7;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  while (1)
  {
    uint64_t v4 = a1[1];
    if (v4)
    {
      if (v3 + 1 > (unint64_t)a1[2]) {
        break;
      }
    }
    *(unsigned char *)(a2 + v2) = *(unsigned char *)(v4 + v3);
    uint64_t v3 = *a1 + 1;
    *a1 = v3;
    if (++v2 == 144) {
      return 0;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v6 = *a1 + 4;
    *a1 = v6;
    uint64_t v7 = v4 + 12;
    if (!v5 || v7 <= a1[2])
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(v5 + v6);
      *a1 = v7;
      *(void *)(a2 + 8) = v9;
      return v8;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 8 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(void *)a2 = *(void *)(v2 + v3);
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *a1 + 8;
  *a1 = v6;
  uint64_t v7 = v5 + 16;
  if (v4 && v7 > a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v9 = *(void *)(v4 + v6);
  *a1 = v7;
  *(void *)(a2 + 8) = v9;
  uint64_t v8 = ZinSerial::Deserializer::Deserialize<ZinMirUnitBasicBlock::EdgeInfo>(a1, (void **)(a2 + 16));
  if (v8 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinSerial::Deserializer::Deserialize();
  }
  return v8;
}

uint64_t ZinSerial::Deserializer::Deserialize(unint64_t *a1, void *a2)
{
  uint64_t v4 = ZinSerial::Deserializer::Deserialize(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v5 = ZinSerial::Deserializer::Deserialize(a1, a2 + 5);
    if (v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v5;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 8;
  uint64_t v4 = a1[2];
  if (v3 <= v4)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = *(void *)(v5 + v2);
    *a1 = v3;
    *a2 = v6;
    uint64_t v7 = v2 + 16;
    if (v2 + 16 <= v4)
    {
      uint64_t v8 = *(void *)(v5 + v3);
      *a1 = v7;
      a2[1] = v8;
      uint64_t v9 = v2 + 24;
      if (v2 + 24 <= v4)
      {
        uint64_t v10 = *(void *)(v5 + v7);
        *a1 = v9;
        a2[2] = v10;
        uint64_t v11 = v2 + 32;
        if (v2 + 32 <= v4)
        {
          uint64_t v12 = *(void *)(v5 + v9);
          *a1 = v11;
          a2[3] = v12;
          uint64_t v13 = v2 + 40;
          if (v2 + 40 <= v4)
          {
            uint64_t v14 = 0;
            uint64_t v16 = *(void *)(v5 + v11);
            *a1 = v13;
            a2[4] = v16;
            return v14;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 8;
  uint64_t v4 = a1[2];
  if (v3 <= v4)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = *(void *)(v5 + v2);
    *a1 = v3;
    *a2 = v6;
    uint64_t v7 = v2 + 16;
    if (v2 + 16 <= v4)
    {
      uint64_t v8 = *(void *)(v5 + v3);
      *a1 = v7;
      a2[1] = v8;
      uint64_t v9 = v2 + 24;
      if (v2 + 24 <= v4)
      {
        uint64_t v10 = *(void *)(v5 + v7);
        *a1 = v9;
        a2[2] = v10;
        uint64_t v11 = v2 + 32;
        if (v2 + 32 <= v4)
        {
          uint64_t v12 = *(void *)(v5 + v9);
          *a1 = v11;
          a2[3] = v12;
          uint64_t v13 = v2 + 40;
          if (v2 + 40 <= v4)
          {
            uint64_t v14 = 0;
            uint64_t v16 = *(void *)(v5 + v11);
            *a1 = v13;
            a2[4] = v16;
            return v14;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;

  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 8;
  uint64_t v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = *(void *)(v6 + v2);
  *a1 = v3;
  *a2 = v7;
  uint64_t v8 = v2 + 16;
  if (v2 + 16 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v9 = *(void *)(v6 + v3);
  *a1 = v8;
  a2[1] = v9;
  uint64_t v10 = v2 + 24;
  if (v10 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  BOOL result = 0;
  uint64_t v12 = *(void *)(v6 + v8);
  *a1 = v10;
  a2[2] = v12;
  return result;
}

{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  ZinLargeStridePoolTransform *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  long long v20;
  long long v21;
  uint64_t v22;
  long long v23;
  long long v24;
  long long v25;
  unsigned char v26[26];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  if (*a2) {
    return 3;
  }
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *a1 + 1;
  if (v4 && v6 > a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + v5);
  *a1 = v6;
  if (!v7)
  {
    uint64_t v2 = 0;
    *a2 = 0;
    return v2;
  }
  uint64_t v8 = v5 + 5;
  if (v8 > a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v9 = *(_DWORD *)(v4 + v6);
  *a1 = v8;
  uint64_t v2 = 3;
  switch(v9)
  {
    case 0:
      std::make_unique[abi:ne180100]<ZinLargeStridePoolTransform>();
    case 1:
      operator new();
    case 2:
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v20 = 0u;
      uint64_t v21 = 0u;
      uint64_t v22 = -1;
      unint64_t v23 = 0u;
      unint64_t v24 = 0u;
      uint64_t v25 = 0u;
      memset(v26, 0, sizeof(v26));
      unint64_t v15 = (ZinLargeStridePoolTransform *)&unk_26C34CF28;
      uint64_t v27 = 0x100000001;
      __asm { FMOV            V0.2S, #-1.0 }
      uint64_t v28 = _D0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      uint64_t v32 = 0;
      uint64_t v19 = 41;
      std::make_unique[abi:ne180100]<ZinResizeTransform,ZinIrResizeUnitInfo &>();
    case 3:
      std::make_unique[abi:ne180100]<ZinPixelShuffleUnshuffleTransform>();
    case 4:
      return v2;
    default:
      uint64_t v2 = 0;
      break;
  }
  return v2;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 8;
  uint64_t v4 = a1[2];
  if (v3 <= v4)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = *(void *)(v5 + v2);
    *a1 = v3;
    *a2 = v6;
    uint64_t v7 = v2 + 16;
    if (v2 + 16 <= v4)
    {
      uint64_t v8 = *(void *)(v5 + v3);
      *a1 = v7;
      a2[1] = v8;
      uint64_t v9 = v2 + 24;
      if (v2 + 24 <= v4)
      {
        uint64_t v10 = *(void *)(v5 + v7);
        *a1 = v9;
        a2[2] = v10;
        uint64_t v11 = v2 + 32;
        if (v2 + 32 <= v4)
        {
          uint64_t v12 = *(void *)(v5 + v9);
          *a1 = v11;
          a2[3] = v12;
          uint64_t v13 = v2 + 40;
          if (v2 + 40 <= v4)
          {
            uint64_t v14 = 0;
            uint64_t v16 = *(void *)(v5 + v11);
            *a1 = v13;
            a2[4] = v16;
            return v14;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v6 = *a1 + 4;
    *a1 = v6;
    if (v4 && v5 + 8 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      a2[1] = *(_DWORD *)(v4 + v6);
      uint64_t v7 = *a1;
      uint64_t v8 = a1[1];
      uint64_t v9 = *a1 + 4;
      *a1 = v9;
      if (!v8 || v7 + 8 <= (unint64_t)a1[2])
      {
        uint64_t v10 = 0;
        a2[2] = *(_DWORD *)(v8 + v9);
        *a1 += 4;
        return v10;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v6 = *a1 + 4;
    *a1 = v6;
    if (v4 && v5 + 8 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      a2[1] = *(_DWORD *)(v4 + v6);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
      uint64_t v9 = *a1 + 4;
      *a1 = v9;
      if (v7 && v8 + 8 > (unint64_t)a1[2])
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        a2[2] = *(_DWORD *)(v7 + v9);
        uint64_t v10 = *a1;
        uint64_t v11 = a1[1];
        uint64_t v12 = *a1 + 4;
        *a1 = v12;
        if (!v11 || v10 + 8 <= (unint64_t)a1[2])
        {
          uint64_t v13 = 0;
          a2[3] = *(_DWORD *)(v11 + v12);
          *a1 += 4;
          return v13;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v6 = *a1 + 4;
    *a1 = v6;
    if (!v5 || v4 + 8 <= (unint64_t)a1[2])
    {
      uint64_t v7 = 0;
      a2[1] = *(_DWORD *)(v5 + v6);
      *a1 += 4;
      return v7;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    *a1 += 4;
    uint64_t v4 = ZinSerial::Deserializer::Deserialize(a1, a2 + 1);
    if (v4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 4 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v6 = *a1 + 4;
    *a1 = v6;
    if (!v5 || v4 + 8 <= (unint64_t)a1[2])
    {
      uint64_t v7 = 0;
      a2[1] = *(_DWORD *)(v5 + v6);
      *a1 += 4;
      return v7;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrPadding *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    uint64_t v5 = *(void *)this;
    uint64_t v4 = *((void *)this + 1);
    uint64_t v6 = *(void *)this + 4;
    *(void *)this = v6;
    if (v4 && (unint64_t)(v5 + 8) > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *((_DWORD *)a2 + 1) = *(_DWORD *)(v4 + v6);
      uint64_t v8 = *(void *)this;
      uint64_t v7 = *((void *)this + 1);
      uint64_t v9 = *(void *)this + 4;
      *(void *)this = v9;
      if (v7 && (unint64_t)(v8 + 8) > *((void *)this + 2))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        *((_DWORD *)a2 + 2) = *(_DWORD *)(v7 + v9);
        uint64_t v11 = *(void *)this;
        uint64_t v10 = *((void *)this + 1);
        uint64_t v12 = *(void *)this + 4;
        *(void *)this = v12;
        if (v10 && (unint64_t)(v11 + 8) > *((void *)this + 2))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          *((_DWORD *)a2 + 3) = *(_DWORD *)(v10 + v12);
          uint64_t v14 = *(void *)this;
          uint64_t v13 = *((void *)this + 1);
          uint64_t v15 = *(void *)this + 4;
          *(void *)this = v15;
          if (v13 && (unint64_t)(v14 + 8) > *((void *)this + 2))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            *((_DWORD *)a2 + 4) = *(_DWORD *)(v13 + v15);
            uint64_t v16 = *(void *)this;
            uint64_t v17 = *((void *)this + 1);
            uint64_t v18 = *(void *)this + 4;
            *(void *)this = v18;
            if (!v17 || (unint64_t)(v16 + 8) <= *((void *)this + 2))
            {
              uint64_t v19 = 0;
              *((_DWORD *)a2 + 5) = *(_DWORD *)(v17 + v18);
              *(void *)this += 4;
              return v19;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
        }
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a1 + 4;
  unint64_t v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  unint64_t v5 = a1[1];
  int v6 = *(_DWORD *)(v5 + v2);
  *a1 = v3;
  unint64_t v7 = v2 + 5;
  if (v7 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  int v9 = *(unsigned __int8 *)(v5 + v3);
  *a1 = v7;
  uint64_t result = 0;
  if (v9)
  {
    *(unsigned char *)(a2 + 4) = 1;
    *(_DWORD *)a2 = 1065353216;
  }
  else
  {
    *(_DWORD *)a2 = v6;
    *(unsigned char *)(a2 + 4) = 0;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  unint64_t v4 = ZinSerial::Deserializer::Deserialize(a1, a2);
  if (v4)
  {
    unint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return v5;
  }
  unint64_t v7 = *a1;
  int v6 = a1[1];
  if (v6 && v7 + 4 > a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(v6 + v7);
  int v9 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = *a1 + 4;
  *a1 = v10;
  if (v8 && v9 + 5 > a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(unsigned char *)(a2 + 92) = *(unsigned char *)(v8 + v10);
  ++*a1;
  uint64_t v11 = ZinSerial::Deserializer::Deserialize(a1, a2 + 96);
  if (!v11)
  {
    uint64_t v13 = *a1;
    uint64_t v12 = a1[1];
    if (!v12 || v13 + 4 <= a1[2])
    {
      unint64_t v5 = 0;
      *(_DWORD *)(a2 + 104) = *(_DWORD *)(v12 + v13);
      *a1 += 4;
      return v5;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  unint64_t v5 = v11;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinSerial::Deserializer::Deserialize();
  }
  return v5;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  unint64_t v4 = ZinSerial::Deserializer::Deserialize(a1, (void *)a2);
  if (v4)
  {
    unint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    int v6 = ZinSerial::Deserializer::Deserialize((uint64_t *)a1, (_DWORD *)(a2 + 24));
    if (v6)
    {
      unint64_t v5 = v6;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      unint64_t v7 = ZinSerial::Deserializer::Deserialize((uint64_t *)a1, (_DWORD *)(a2 + 36));
      if (v7)
      {
        unint64_t v5 = v7;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        uint64_t v8 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinIrPadding *)(a2 + 48));
        if (v8)
        {
          unint64_t v5 = v8;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          int v9 = ZinSerial::Deserializer::Deserialize((uint64_t *)a1, (_DWORD *)(a2 + 72));
          if (v9)
          {
            unint64_t v5 = v9;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            uint64_t v11 = *a1;
            uint64_t v10 = a1[1];
            if (v10 && v11 + 4 > a1[2])
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinSerial::Deserializer::Deserialize();
              }
              return 3;
            }
            else
            {
              unint64_t v5 = 0;
              *(_DWORD *)(a2 + 84) = *(_DWORD *)(v10 + v11);
              *a1 += 4;
            }
          }
        }
      }
    }
  }
  return v5;
}

{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  if (v4 && v5 + 1 > a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(unsigned char *)a2 = *(unsigned char *)(v4 + v5);
  ++*a1;
  unint64_t v7 = ZinSerial::Deserializer::Deserialize<unsigned long>(a1, a2 + 8);
  if (v7)
  {
    int v6 = v7;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v8 = ZinSerial::Deserializer::Deserialize<unsigned long>(a1, a2 + 24);
    if (v8)
    {
      int v6 = v8;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      int v9 = a1[1];
      uint64_t v10 = *a1 + 8;
      if (v9 && v10 > a1[2])
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
        return 3;
      }
      uint64_t v11 = *(void *)(v9 + *a1);
      *a1 = v10;
      *(void *)(a2 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v11;
      int v6 = ZinSerial::Deserializer::Deserialize<long>(a1, a2 + 48);
      if (v6 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return v6;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int v15;

  unint64_t v2 = *a1;
  unint64_t v3 = *a1 + 8;
  unint64_t v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  unint64_t v5 = a1[1];
  int v6 = *(void *)(v5 + v2);
  *a1 = v3;
  unint64_t v7 = v2 + 16;
  if (v2 + 16 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v8 = *(void *)(v5 + v3);
  *a1 = v7;
  int v9 = v2 + 24;
  if (v2 + 24 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v10 = *(void *)(v5 + v7);
  *a1 = v9;
  uint64_t v11 = v2 + 32;
  if (v2 + 32 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v12 = *(void *)(v5 + v9);
  *a1 = v11;
  uint64_t v13 = v2 + 33;
  if (v2 + 33 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v15 = *(unsigned __int8 *)(v5 + v11);
  *a1 = v13;
  uint64_t result = 0;
  if (!*(unsigned char *)(a2 + 33))
  {
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v10;
    *(void *)(a2 + 24) = v12;
    *(unsigned char *)(a2 + 32) = v15 != 0;
  }
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  unint64_t v2 = *a1;
  unint64_t v3 = *a1 + 8;
  unint64_t v4 = a1[2];
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  unint64_t v5 = a1[1];
  int v6 = *(void *)(v5 + v2);
  *a1 = v3;
  unint64_t v7 = v2 + 16;
  if (v7 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  int v9 = *(void *)(v5 + v3);
  *a1 = v7;
  uint64_t result = 0;
  if (!*(unsigned char *)(a2 + 16))
  {
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v9;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;

  unint64_t v4 = ZinSerial::Deserializer::Deserialize<ZinMirDmaConfig::DramAccess,2ul>(a1, (void *)a2);
  if (v4)
  {
    unint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    unint64_t v5 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinMirDmaConfig::DramAccess *)(a2 + 192));
    if (v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v5;
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  if (v4 && v5 + 4 > a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + v5);
  unint64_t v7 = *a1;
  int v6 = a1[1];
  uint64_t v8 = *a1 + 4;
  *a1 = v8;
  if (v6 && v7 + 5 > a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(v6 + v8);
  ++*a1;
  uint64_t v10 = ZinSerial::Deserializer::Deserialize<unsigned char>(a1, a2 + 5);
  if (v10)
  {
    int v9 = v10;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    int v9 = ZinSerial::Deserializer::Deserialize<unsigned char>(a1, a2 + 7);
    if (v9 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v9;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrPoolingInfo *a2)
{
  uint64_t v2 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 16);
  if (v2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinSerial::Deserializer::Deserialize();
  }
  return v2;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrBroadcastInfo *a2)
{
  uint64_t v2 = ZinSerial::Deserializer::Deserialize<ZinIrDimension,unsigned long>((unint64_t *)this, (uint64_t)a2 + 16);
  if (v2 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinSerial::Deserializer::Deserialize();
  }
  return v2;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinIrDimension,unsigned long>(unint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 24)) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  unsigned int v7 = *(_DWORD *)(v5 + *a1);
  *a1 = v6;
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__rehash<true>(a2, vcvtps_u32_f32((float)v7 / *(float *)(a2 + 32)));
  if (v7)
  {
    while (1)
    {
      unint64_t v9 = *a1;
      unint64_t v8 = a1[1];
      unint64_t v10 = a1[2];
      unint64_t v11 = *a1 + 4;
      if (v8 && v11 > v10) {
        break;
      }
      int v13 = *(_DWORD *)(v8 + v9);
      *a1 = v11;
      unint64_t v14 = v9 + 12;
      if (v14 > v10) {
        break;
      }
      uint64_t v15 = *(void *)(v8 + v11);
      *a1 = v14;
      LODWORD(v16) = v13;
      *((void *)&v16 + 1) = v15;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>(a2, (int *)&v16, &v16);
      if (!--v7) {
        return 0;
      }
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrTransposeInfo *a2)
{
  long long __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v3 = ZinSerial::Deserializer::Deserialize<DimensionMapping>((uint64_t *)this, (char **)&__p);
  if (v3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    ZinIrTransposeInfo::ZinIrTransposeInfo((uint64_t)&v6, (uint64_t)&__p);
    unint64_t v4 = (void *)*((void *)a2 + 2);
    *((_DWORD *)a2 + 2) = v7;
    if (v4)
    {
      *((void *)a2 + 3) = v4;
      operator delete(v4);
      *((void *)a2 + 2) = 0;
      *((void *)a2 + 3) = 0;
      *((void *)a2 + 4) = 0;
    }
    *((_OWORD *)a2 + 1) = v8;
    *((void *)a2 + 4) = v9;
    uint64_t v9 = 0;
    long long v8 = 0uLL;
    unint64_t v6 = &unk_26C34C0D0;
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v6);
  }
  if (__p)
  {
    unint64_t v11 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_2111FF6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<DimensionMapping>(uint64_t *a1, char **a2)
{
  if (a2[1] != *a2) {
    return 3;
  }
  uint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  unint64_t v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinIrOpLayer *>::reserve((void **)a2, v7);
  if (!v7) {
    return 0;
  }
  int v8 = 0;
  while (1)
  {
    uint64_t v21 = 0;
    uint64_t result = ZinSerial::Deserializer::Deserialize(a1, &v21);
    if (result) {
      break;
    }
    unint64_t v10 = a2[1];
    unint64_t v9 = (unint64_t)a2[2];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v11 = (v10 - *a2) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)*a2;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v14);
      }
      else {
        uint64_t v15 = 0;
      }
      long long v16 = &v15[8 * v11];
      *(void *)long long v16 = v21;
      uint64_t v17 = v16 + 8;
      uint64_t v19 = *a2;
      uint64_t v18 = a2[1];
      if (v18 != *a2)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        uint64_t v18 = *a2;
      }
      *a2 = v16;
      a2[1] = v17;
      a2[2] = &v15[8 * v14];
      if (v18) {
        operator delete(v18);
      }
      a2[1] = v17;
    }
    else
    {
      *(void *)unint64_t v10 = v21;
      a2[1] = v10 + 8;
    }
    if (++v8 == v7) {
      return 0;
    }
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<long>(unint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) != *(void *)a2) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  unint64_t v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<unsigned long>::reserve((void **)a2, v7);
  if (v7)
  {
    int v8 = 0;
    while (1)
    {
      unint64_t v9 = a1[1];
      unint64_t v10 = *a1 + 8;
      if (v9)
      {
        if (v10 > a1[2]) {
          break;
        }
      }
      uint64_t v11 = *(void *)(v9 + *a1);
      *a1 = v10;
      uint64_t v13 = *(void **)(a2 + 8);
      unint64_t v12 = *(void *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v15 = *(void **)a2;
        uint64_t v16 = ((uint64_t)v13 - *(void *)a2) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a2 + 16, v19);
          uint64_t v15 = *(void **)a2;
          uint64_t v13 = *(void **)(a2 + 8);
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v21 = &v20[8 * v16];
        *(void *)uint64_t v21 = v11;
        unint64_t v14 = v21 + 8;
        while (v13 != v15)
        {
          uint64_t v22 = *--v13;
          *((void *)v21 - 1) = v22;
          v21 -= 8;
        }
        *(void *)a2 = v21;
        *(void *)(a2 + 8) = v14;
        *(void *)(a2 + 16) = &v20[8 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *uint64_t v13 = v11;
        unint64_t v14 = v13 + 1;
      }
      *(void *)(a2 + 8) = v14;
      if (++v8 == v7) {
        return 0;
      }
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinMirL2Config::NE *a2)
{
  uint64_t v23 = 0;
  char v24 = 0;
  v21[0] = 0;
  v21[1] = 0;
  char v22 = 0;
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void *)this + 8;
  unint64_t v4 = *((void *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *(void *)(v5 + v2);
  *(void *)this = v3;
  uint64_t v7 = v2 + 16;
  if (v2 + 16 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v8 = *(void *)(v5 + v3);
  *(void *)this = v7;
  uint64_t v9 = v2 + 24;
  if (v2 + 24 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v10 = *(void *)(v5 + v7);
  *(void *)this = v9;
  uint64_t v11 = v2 + 28;
  if (v2 + 28 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  int v12 = *(_DWORD *)(v5 + v9);
  *(void *)this = v11;
  uint64_t v13 = v2 + 29;
  if (v2 + 29 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  int v14 = *(unsigned __int8 *)(v5 + v11);
  *(void *)this = v13;
  unint64_t v15 = v2 + 30;
  if (v15 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  int v19 = *(unsigned __int8 *)(v5 + v13);
  *(void *)this = v15;
  uint64_t v20 = ZinSerial::Deserializer::Deserialize(this, (MirInfoChannelAssignment *)v21);
  if (v20)
  {
    uint64_t v16 = v20;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + 30))
    {
      *(void *)a2 = v6;
      *((void *)a2 + 1) = v8;
      *((void *)a2 + 2) = v10;
    }
    ZinMirL2Config::NE::SetSmallSourceMode((uint64_t)a2, v12);
    *((unsigned char *)a2 + 28) = v14 != 0;
    *((unsigned char *)a2 + 32) = v19 != 0;
    ZinMirL2Config::NE::SetChannelAssignment(a2, (const MirInfoChannelAssignment *)v21);
    return 0;
  }
  return v16;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, MirInfoChannelAssignment *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void *)this + 8;
  unint64_t v4 = *((void *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *(void *)(v6 + v2);
  *(void *)this = v3;
  uint64_t v8 = v2 + 16;
  if (v2 + 16 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v9 = *(void *)(v6 + v3);
  *(void *)this = v8;
  uint64_t v10 = v2 + 17;
  if (v2 + 17 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  int v11 = *(unsigned __int8 *)(v6 + v8);
  *(void *)this = v10;
  unint64_t v12 = v2 + 25;
  if (v12 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v14 = *(void *)(v6 + v10);
  *(void *)this = v12;
  MirInfoChannelAssignment::SetNumNeededNEs(a2, v7);
  MirInfoChannelAssignment::SetOCGSize(a2, v9);
  MirInfoChannelAssignment::SetFatTileEnable(a2, v11 != 0);
  MirInfoChannelAssignment::SetWUStackLog2(a2, v14);
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(unint64_t *a1, _DWORD *a2)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  if (v2 && v3 + 4 > a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  else
  {
    *a2 = *(_DWORD *)(v2 + v3);
    *a1 += 4;
    uint64_t v4 = ZinSerial::Deserializer::Deserialize<ZinDependencyOffsetDim,long>(a1, (uint64_t)(a2 + 2));
    if (v4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v4;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinDependencyOffsetDim,long>(unint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 24)) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  unsigned int v7 = *(_DWORD *)(v5 + *a1);
  *a1 = v6;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a2, vcvtps_u32_f32((float)v7 / *(float *)(a2 + 32)));
  if (v7)
  {
    while (1)
    {
      unint64_t v9 = *a1;
      unint64_t v8 = a1[1];
      unint64_t v10 = a1[2];
      unint64_t v11 = *a1 + 4;
      if (v8 && v11 > v10) {
        break;
      }
      int v13 = *(_DWORD *)(v8 + v9);
      *a1 = v11;
      unint64_t v14 = v9 + 12;
      if (v14 > v10) {
        break;
      }
      uint64_t v15 = *(void *)(v8 + v11);
      *a1 = v14;
      LODWORD(v16) = v13;
      *((void *)&v16 + 1) = v15;
      std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__emplace_unique_key_args<ZinDependencyOffsetDim,std::pair<ZinDependencyOffsetDim const,long> const&>(a2, (int *)&v16, &v16);
      if (!--v7) {
        return 0;
      }
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinMirL2Config *a2)
{
  int v51 = 0;
  uint64_t v56 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  char v55 = 0;
  int v45 = 0;
  uint64_t v50 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  char v49 = 0;
  int v39 = 0;
  uint64_t v44 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  char v43 = 0;
  int v36 = 0;
  memset(v37, 0, sizeof(v37));
  int v38 = 1065353216;
  int v33 = 0;
  memset(v34, 0, sizeof(v34));
  int v35 = 1065353216;
  int v30 = 0;
  memset(v31, 0, sizeof(v31));
  int v32 = 1065353216;
  uint64_t v4 = ZinSerial::Deserializer::Deserialize(this, a2);
  if (v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    goto LABEL_33;
  }
  uint64_t v5 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 80);
  if (v5)
  {
    uint64_t v4 = v5;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    goto LABEL_33;
  }
  uint64_t v6 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 120);
  if (v6)
  {
    uint64_t v4 = v6;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    goto LABEL_33;
  }
  uint64_t v8 = *(void *)this;
  uint64_t v7 = *((void *)this + 1);
  if (v7 && (unint64_t)(v8 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
LABEL_32:
    uint64_t v4 = 3;
    goto LABEL_33;
  }
  *((_DWORD *)a2 + 36) = *(_DWORD *)(v7 + v8);
  uint64_t v9 = *(void *)this;
  uint64_t v10 = *(void *)this + 4;
  *(void *)this = v10;
  uint64_t v11 = v9 + 12;
  unint64_t v12 = *((void *)this + 2);
  if (v9 + 12 > v12)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    goto LABEL_32;
  }
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = *(void *)(v13 + v10);
  *(void *)this = v11;
  *((void *)a2 + 19) = v14;
  uint64_t v15 = v9 + 20;
  if (v9 + 20 > v12)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    goto LABEL_32;
  }
  uint64_t v16 = *(void *)(v13 + v11);
  *(void *)this = v15;
  *((void *)a2 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v16;
  uint64_t v17 = v9 + 28;
  if (v9 + 28 > v12)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    goto LABEL_32;
  }
  uint64_t v18 = *(void *)(v13 + v15);
  *(void *)this = v17;
  *((void *)a2 + 21) = v18;
  uint64_t v19 = v9 + 36;
  if (v9 + 36 > v12)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v13 + v17);
  *(void *)this = v19;
  *((void *)a2 + 22) = v20;
  uint64_t v21 = v9 + 44;
  if (v9 + 44 > v12)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    goto LABEL_32;
  }
  uint64_t v22 = *(void *)(v13 + v19);
  *(void *)this = v21;
  *((void *)a2 + 23) = v22;
  if (v9 + 45 > v12)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    goto LABEL_32;
  }
  *((unsigned char *)a2 + 192) = *(unsigned char *)(v13 + v21);
  ++*(void *)this;
  uint64_t v24 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (unsigned char *)a2 + 208);
  if (v24)
  {
    uint64_t v4 = v24;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v26 = *(void *)this;
    uint64_t v25 = *((void *)this + 1);
    if (v25 && (unint64_t)(v26 + 1) > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      goto LABEL_32;
    }
    *((unsigned char *)a2 + 224) = *(unsigned char *)(v25 + v26);
    ++*(void *)this;
    uint64_t v27 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)&v51);
    if (v27)
    {
      uint64_t v4 = v27;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      uint64_t v28 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)&v45);
      if (v28)
      {
        uint64_t v4 = v28;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        uint64_t v29 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)&v39);
        if (v29)
        {
          uint64_t v4 = v29;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          uint64_t v4 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, &v36);
          if (v4)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            uint64_t v4 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, &v33);
            if (v4)
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else
            {
              uint64_t v4 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, &v30);
              if (v4)
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else
              {
                ZinMirL2Config::SetTileSrc((uint64_t)a2, (uint64_t)&v51, 0);
                ZinMirL2Config::SetTileSrc((uint64_t)a2, (uint64_t)&v45, 1);
                ZinMirL2Config::SetTileSrc((uint64_t)a2, (uint64_t)&v39, 2);
                ZinMirL2Config::SetL2SrcDep(a2, (uint64_t)&v36, 0);
                ZinMirL2Config::SetL2SrcDep(a2, (uint64_t)&v33, 1);
                ZinMirL2Config::SetL2SrcDep(a2, (uint64_t)&v30, 2);
                uint64_t v4 = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_33:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v31);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v34);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v37);
  return v4;
}

void sub_211200884(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 && v3 + 1 > (unint64_t)a1[2])
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *a2 = *(unsigned char *)(v2 + v3);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v6 = *a1 + 1;
    *a1 = v6;
    if (v4 && v5 + 2 > (unint64_t)a1[2])
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      a2[1] = *(unsigned char *)(v4 + v6);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
      uint64_t v9 = *a1 + 1;
      *a1 = v9;
      if (v7 && v8 + 2 > (unint64_t)a1[2])
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        a2[2] = *(unsigned char *)(v7 + v9);
        uint64_t v11 = *a1;
        uint64_t v10 = a1[1];
        uint64_t v12 = *a1 + 1;
        *a1 = v12;
        if (v10 && v11 + 2 > (unint64_t)a1[2])
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          a2[3] = *(unsigned char *)(v10 + v12);
          uint64_t v14 = *a1;
          uint64_t v13 = a1[1];
          uint64_t v15 = *a1 + 1;
          *a1 = v15;
          if (v13 && v14 + 2 > (unint64_t)a1[2])
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            a2[4] = *(unsigned char *)(v13 + v15);
            uint64_t v17 = *a1;
            uint64_t v16 = a1[1];
            uint64_t v18 = *a1 + 1;
            *a1 = v18;
            if (v16 && v17 + 2 > (unint64_t)a1[2])
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else
            {
              a2[5] = *(unsigned char *)(v16 + v18);
              uint64_t v20 = *a1;
              uint64_t v19 = a1[1];
              uint64_t v21 = *a1 + 1;
              *a1 = v21;
              if (v19 && v20 + 2 > (unint64_t)a1[2])
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else
              {
                a2[6] = *(unsigned char *)(v19 + v21);
                uint64_t v23 = *a1;
                uint64_t v22 = a1[1];
                uint64_t v24 = *a1 + 1;
                *a1 = v24;
                if (v22 && v23 + 2 > (unint64_t)a1[2])
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinSerial::Deserializer::Deserialize();
                  }
                }
                else
                {
                  a2[7] = *(unsigned char *)(v22 + v24);
                  uint64_t v26 = *a1;
                  uint64_t v25 = a1[1];
                  uint64_t v27 = *a1 + 1;
                  *a1 = v27;
                  if (v25 && v26 + 2 > (unint64_t)a1[2])
                  {
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                      ZinSerial::Deserializer::Deserialize();
                    }
                  }
                  else
                  {
                    a2[8] = *(unsigned char *)(v25 + v27);
                    uint64_t v29 = *a1;
                    uint64_t v28 = a1[1];
                    uint64_t v30 = *a1 + 1;
                    *a1 = v30;
                    if (v28 && v29 + 2 > (unint64_t)a1[2])
                    {
                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                        ZinSerial::Deserializer::Deserialize();
                      }
                    }
                    else
                    {
                      a2[9] = *(unsigned char *)(v28 + v30);
                      uint64_t v32 = *a1;
                      uint64_t v31 = a1[1];
                      uint64_t v33 = *a1 + 1;
                      *a1 = v33;
                      if (v31 && v32 + 2 > (unint64_t)a1[2])
                      {
                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                          ZinSerial::Deserializer::Deserialize();
                        }
                      }
                      else
                      {
                        a2[10] = *(unsigned char *)(v31 + v33);
                        uint64_t v35 = *a1;
                        uint64_t v34 = a1[1];
                        uint64_t v36 = *a1 + 1;
                        *a1 = v36;
                        if (v34 && v35 + 2 > (unint64_t)a1[2])
                        {
                          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                            ZinSerial::Deserializer::Deserialize();
                          }
                        }
                        else
                        {
                          a2[11] = *(unsigned char *)(v34 + v36);
                          uint64_t v38 = *a1;
                          uint64_t v37 = a1[1];
                          uint64_t v39 = *a1 + 1;
                          *a1 = v39;
                          if (v37 && v38 + 2 > (unint64_t)a1[2])
                          {
                            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                              ZinSerial::Deserializer::Deserialize();
                            }
                          }
                          else
                          {
                            a2[12] = *(unsigned char *)(v37 + v39);
                            uint64_t v41 = *a1;
                            uint64_t v40 = a1[1];
                            uint64_t v42 = *a1 + 1;
                            *a1 = v42;
                            if (v40 && v41 + 2 > (unint64_t)a1[2])
                            {
                              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                ZinSerial::Deserializer::Deserialize();
                              }
                            }
                            else
                            {
                              a2[13] = *(unsigned char *)(v40 + v42);
                              uint64_t v44 = *a1;
                              uint64_t v43 = a1[1];
                              uint64_t v45 = *a1 + 1;
                              *a1 = v45;
                              if (v43 && v44 + 2 > (unint64_t)a1[2])
                              {
                                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                  ZinSerial::Deserializer::Deserialize();
                                }
                              }
                              else
                              {
                                a2[14] = *(unsigned char *)(v43 + v45);
                                uint64_t v46 = *a1;
                                uint64_t v47 = a1[1];
                                uint64_t v48 = *a1 + 1;
                                *a1 = v48;
                                if (!v47 || v46 + 2 <= (unint64_t)a1[2])
                                {
                                  uint64_t v49 = 0;
                                  a2[15] = *(unsigned char *)(v47 + v48);
                                  ++*a1;
                                  return v49;
                                }
                                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                                  ZinSerial::Deserializer::Deserialize();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinMirDmaConfig::DramAccess *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(v2 + v3);
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *(void *)this + 4;
    *(void *)this = v5;
    uint64_t v6 = v4 + 12;
    unint64_t v7 = *((void *)this + 2);
    if (v4 + 12 <= v7)
    {
      uint64_t v8 = *((void *)this + 1);
      uint64_t v9 = *(void *)(v8 + v5);
      *(void *)this = v6;
      *((void *)a2 + 1) = v9;
      uint64_t v10 = v4 + 20;
      if (v4 + 20 <= v7)
      {
        uint64_t v11 = *(void *)(v8 + v6);
        *(void *)this = v10;
        *((void *)a2 + 2) = v11;
        uint64_t v12 = v4 + 28;
        if (v4 + 28 <= v7)
        {
          uint64_t v13 = *(void *)(v8 + v10);
          *(void *)this = v12;
          *((void *)a2 + 3) = v13;
          uint64_t v14 = v4 + 36;
          if (v4 + 36 <= v7)
          {
            uint64_t v15 = *(void *)(v8 + v12);
            *(void *)this = v14;
            *((void *)a2 + 4) = v15;
            uint64_t v16 = v4 + 44;
            if (v4 + 44 <= v7)
            {
              uint64_t v17 = *(void *)(v8 + v14);
              *(void *)this = v16;
              *((void *)a2 + 6) = v17;
              uint64_t v18 = v4 + 52;
              if (v4 + 52 <= v7)
              {
                uint64_t v19 = *(void *)(v8 + v16);
                *(void *)this = v18;
                *((void *)a2 + 7) = v19;
                uint64_t v20 = v4 + 60;
                if (v4 + 60 <= v7)
                {
                  uint64_t v21 = 0;
                  uint64_t v23 = *(void *)(v8 + v18);
                  *(void *)this = v20;
                  *((void *)a2 + 8) = v23;
                  return v21;
                }
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
              {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
            {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinMirDmaConfig::DramAccess,2ul>(unint64_t *a1, void *a2)
{
  std::vector<unsigned int> __src = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v3 = ZinSerial::Deserializer::Deserialize<ZinMirDmaConfig::DramAccess>(a1, &__src);
  uint64_t v4 = __src;
  if (v3)
  {
    if (!__src) {
      return v3;
    }
    goto LABEL_7;
  }
  if (v7 - (unsigned char *)__src == 192)
  {
    memmove(a2, __src, 0xC0uLL);
    uint64_t v3 = 0;
LABEL_7:
    unint64_t v7 = v4;
    operator delete(v4);
    return v3;
  }
  uint64_t v3 = 3;
  if (__src) {
    goto LABEL_7;
  }
  return v3;
}

void sub_21120101C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinDramDependentInfo *a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + v5);
  *(void *)this += 4;
  uint64_t v6 = ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>((unint64_t *)this, (std::vector<int> *)((char *)a2 + 8));
  if (v6)
  {
    uint64_t v7 = v6;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v9 = *(void *)this;
    uint64_t v8 = *((void *)this + 1);
    if (v8 && (unint64_t)(v9 + 4) > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    *((_DWORD *)a2 + 8) = *(_DWORD *)(v8 + v9);
    *(void *)this += 4;
    uint64_t v7 = ZinSerial::Deserializer::Deserialize<ZinDependencyOffsetDim,long>((unint64_t *)this, (uint64_t)a2 + 40);
    if (v7 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v7;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>(unint64_t *a1, std::vector<int> *this)
{
  if (this->__end_ != this->__begin_) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  std::vector<int>::size_type v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<unsigned int>::reserve(this, v7);
  if (v7)
  {
    int v8 = 0;
    while (1)
    {
      unint64_t v9 = a1[1];
      unint64_t v10 = *a1 + 4;
      if (v9)
      {
        if (v10 > a1[2]) {
          break;
        }
      }
      int v11 = *(_DWORD *)(v9 + *a1);
      *a1 = v10;
      std::vector<int>::pointer end = this->__end_;
      value = this->__end_cap_.__value_;
      if (end >= value)
      {
        std::vector<int>::pointer begin = this->__begin_;
        uint64_t v16 = end - this->__begin_;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = (char *)value - (char *)begin;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&this->__end_cap_, v19);
          std::vector<int>::pointer begin = this->__begin_;
          std::vector<int>::pointer end = this->__end_;
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v21 = (int *)&v20[4 * v16];
        *uint64_t v21 = v11;
        uint64_t v14 = v21 + 1;
        while (end != begin)
        {
          int v22 = *--end;
          *--uint64_t v21 = v22;
        }
        this->__begin_ = v21;
        this->__end_ = v14;
        this->__end_cap_.__value_ = (int *)&v20[4 * v19];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *std::vector<int>::pointer end = v11;
        uint64_t v14 = end + 1;
      }
      this->__end_ = v14;
      if (++v8 == v7) {
        return 0;
      }
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinEngineLayerMirInfo *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void *)this + 1;
  unint64_t v4 = *((void *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v6 = *((void *)this + 1);
  int v7 = *(unsigned __int8 *)(v6 + v2);
  *(void *)this = v3;
  if (v2 + 2 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(unsigned char *)a2 = *(unsigned char *)(v6 + v3);
  uint64_t v10 = *(void *)this;
  uint64_t v9 = *((void *)this + 1);
  uint64_t v11 = *(void *)this + 1;
  *(void *)this = v11;
  if (v9 && (unint64_t)(v10 + 2) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((unsigned char *)a2 + 1) = *(unsigned char *)(v9 + v11);
  uint64_t v13 = *(void *)this;
  uint64_t v12 = *((void *)this + 1);
  uint64_t v14 = *(void *)this + 1;
  *(void *)this = v14;
  if (v12 && (unint64_t)(v13 + 2) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((unsigned char *)a2 + 2) = *(unsigned char *)(v12 + v14);
  ++*(void *)this;
  uint64_t v15 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 8);
  if (v15)
  {
    uint64_t v16 = v15;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v17 = *(void *)this;
    unint64_t v18 = *(void *)this + 8;
    unint64_t v19 = *((void *)this + 2);
    if (v18 > v19)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    uint64_t v20 = *((void *)this + 1);
    uint64_t v21 = *(void *)(v20 + v17);
    *(void *)this = v18;
    *((void *)a2 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v21;
    uint64_t v22 = v17 + 16;
    if (v17 + 16 > v19)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    uint64_t v23 = *(void *)(v20 + v18);
    *(void *)this = v22;
    *((void *)a2 + 11) = v23;
    uint64_t v24 = v17 + 24;
    if (v17 + 24 > v19)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    uint64_t v25 = *(void *)(v20 + v22);
    *(void *)this = v24;
    *((void *)a2 + 12) = v25;
    uint64_t v26 = v17 + 32;
    if (v17 + 32 > v19)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    uint64_t v27 = *(void *)(v20 + v24);
    *(void *)this = v26;
    *((void *)a2 + 13) = v27;
    if (v17 + 36 > v19)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    *((_DWORD *)a2 + 28) = *(_DWORD *)(v20 + v26);
    *(void *)this += 4;
    uint64_t v29 = ZinSerial::Deserializer::Deserialize(this, (ZinEngineLayerMirInfo *)((char *)a2 + 120));
    if (v29)
    {
      uint64_t v16 = v29;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      uint64_t v30 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (uint64_t)a2 + 712);
      if (v30)
      {
        uint64_t v16 = v30;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        uint64_t v31 = ZinSerial::Deserializer::Deserialize<ZinDramDependentInfo,2ul>((unint64_t *)this, (_DWORD *)a2 + 250);
        if (v31)
        {
          uint64_t v16 = v31;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          uint64_t v32 = ZinSerial::Deserializer::Deserialize(this, (ZinEngineLayerMirInfo *)((char *)a2 + 1160));
          if (v32)
          {
            uint64_t v16 = v32;
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            uint64_t v33 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2 + 1264);
            if (v33)
            {
              uint64_t v16 = v33;
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else
            {
              uint64_t v35 = *(void *)this;
              uint64_t v34 = *((void *)this + 1);
              if (v34 && (unint64_t)(v35 + 4) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 349) = *(_DWORD *)(v34 + v35);
              uint64_t v37 = *(void *)this;
              uint64_t v36 = *((void *)this + 1);
              uint64_t v38 = *(void *)this + 4;
              *(void *)this = v38;
              if (v36 && (unint64_t)(v37 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 35std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v36 + v38);
              uint64_t v40 = *(void *)this;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v41 = *(void *)this + 4;
              *(void *)this = v41;
              if (v39 && (unint64_t)(v40 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 351) = *(_DWORD *)(v39 + v41);
              uint64_t v43 = *(void *)this;
              uint64_t v42 = *((void *)this + 1);
              uint64_t v44 = *(void *)this + 4;
              *(void *)this = v44;
              if (v42 && (unint64_t)(v43 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 352) = *(_DWORD *)(v42 + v44);
              uint64_t v46 = *(void *)this;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v47 = *(void *)this + 4;
              *(void *)this = v47;
              if (v45 && (unint64_t)(v46 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 353) = *(_DWORD *)(v45 + v47);
              uint64_t v49 = *(void *)this;
              uint64_t v48 = *((void *)this + 1);
              uint64_t v50 = *(void *)this + 4;
              *(void *)this = v50;
              if (v48 && (unint64_t)(v49 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 354) = *(_DWORD *)(v48 + v50);
              uint64_t v52 = *(void *)this;
              uint64_t v51 = *((void *)this + 1);
              uint64_t v53 = *(void *)this + 4;
              *(void *)this = v53;
              if (v51 && (unint64_t)(v52 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 355) = *(_DWORD *)(v51 + v53);
              uint64_t v55 = *(void *)this;
              uint64_t v54 = *((void *)this + 1);
              uint64_t v56 = *(void *)this + 4;
              *(void *)this = v56;
              if (v54 && (unint64_t)(v55 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 356) = *(_DWORD *)(v54 + v56);
              uint64_t v58 = *(void *)this;
              uint64_t v57 = *((void *)this + 1);
              uint64_t v59 = *(void *)this + 4;
              *(void *)this = v59;
              if (v57 && (unint64_t)(v58 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 357) = *(_DWORD *)(v57 + v59);
              uint64_t v61 = *(void *)this;
              uint64_t v60 = *((void *)this + 1);
              uint64_t v62 = *(void *)this + 4;
              *(void *)this = v62;
              if (v60 && (unint64_t)(v61 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 358) = *(_DWORD *)(v60 + v62);
              uint64_t v64 = *(void *)this;
              uint64_t v63 = *((void *)this + 1);
              uint64_t v65 = *(void *)this + 4;
              *(void *)this = v65;
              if (v63 && (unint64_t)(v64 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 359) = *(_DWORD *)(v63 + v65);
              uint64_t v67 = *(void *)this;
              uint64_t v66 = *((void *)this + 1);
              uint64_t v68 = *(void *)this + 4;
              *(void *)this = v68;
              if (v66 && (unint64_t)(v67 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 36std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v66 + v68);
              uint64_t v70 = *(void *)this;
              uint64_t v69 = *((void *)this + 1);
              uint64_t v71 = *(void *)this + 4;
              *(void *)this = v71;
              if (v69 && (unint64_t)(v70 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
                return 3;
              }
              *((_DWORD *)a2 + 361) = *(_DWORD *)(v69 + v71);
              *(void *)this += 4;
              uint64_t v72 = ZinSerial::Deserializer::Deserialize<unsigned int,2ul>((unint64_t *)this, (void *)a2 + 181);
              if (v72)
              {
                uint64_t v16 = v72;
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else
              {
                uint64_t v74 = *(void *)this;
                uint64_t v73 = *((void *)this + 1);
                if (v73 && (unint64_t)(v74 + 4) > *((void *)this + 2))
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinSerial::Deserializer::Deserialize();
                  }
                  return 3;
                }
                *((_DWORD *)a2 + 364) = *(_DWORD *)(v73 + v74);
                *(void *)this += 4;
                uint64_t v75 = ZinSerial::Deserializer::Deserialize<std::bitset<4ul>,2ul>((unint64_t *)this, (ZinEngineLayerMirInfo *)((char *)a2 + 1464));
                if (v75)
                {
                  uint64_t v16 = v75;
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinSerial::Deserializer::Deserialize();
                  }
                }
                else
                {
                  uint64_t v76 = *((void *)this + 1);
                  unint64_t v77 = *(void *)this + 8;
                  if (v76 && v77 > *((void *)this + 2))
                  {
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                      ZinSerial::Deserializer::Deserialize();
                    }
                    return 3;
                  }
                  uint64_t v78 = *(void *)(v76 + *(void *)this);
                  *(void *)this = v77;
                  *((void *)a2 + 185) = v78 & 0xF;
                  uint64_t v79 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 372);
                  if (v79)
                  {
                    uint64_t v16 = v79;
                    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                      ZinSerial::Deserializer::Deserialize();
                    }
                  }
                  else
                  {
                    uint64_t v81 = *(void *)this;
                    uint64_t v80 = *((void *)this + 1);
                    if (v80 && (unint64_t)(v81 + 1) > *((void *)this + 2))
                    {
                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                        ZinSerial::Deserializer::Deserialize();
                      }
                      return 3;
                    }
                    *((unsigned char *)a2 + 1504) = *(unsigned char *)(v80 + v81);
                    uint64_t v82 = *(void *)this;
                    uint64_t v83 = *(void *)this + 1;
                    *(void *)this = v83;
                    uint64_t v84 = v82 + 2;
                    unint64_t v85 = *((void *)this + 2);
                    if (v82 + 2 > v85)
                    {
                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                        ZinSerial::Deserializer::Deserialize();
                      }
                      return 3;
                    }
                    uint64_t v86 = *((void *)this + 1);
                    int v87 = *(unsigned __int8 *)(v86 + v83);
                    *(void *)this = v84;
                    uint64_t v88 = v82 + 3;
                    if (v82 + 3 > v85)
                    {
                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                        ZinSerial::Deserializer::Deserialize();
                      }
                      return 3;
                    }
                    int v89 = *(unsigned __int8 *)(v86 + v84);
                    *(void *)this = v88;
                    unint64_t v90 = v82 + 4;
                    if (v90 > v85)
                    {
                      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                        ZinSerial::Deserializer::Deserialize();
                      }
                      return 3;
                    }
                    int v91 = *(unsigned __int8 *)(v86 + v88);
                    *(void *)this = v90;
                    if (v7 != *((unsigned __int8 *)a2 + 1680)) {
                      *((unsigned char *)a2 + 168std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
                    }
                    ZinEngineLayerMirInfo::SetNeedInputDMACached((uint64_t)a2, 0, v87 != 0);
                    ZinEngineLayerMirInfo::SetNeedInputDMACached((uint64_t)a2, 1, v89 != 0);
                    uint64_t v16 = 0;
                    *((unsigned char *)a2 + 1642) = v91 != 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v16;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinDramDependentInfo,2ul>(unint64_t *a1, _DWORD *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v3 = ZinSerial::Deserializer::Deserialize<ZinDramDependentInfo>(a1, &v5);
  if (!v3)
  {
    if (v6 - v5 == 160)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDramDependentInfo *,ZinDramDependentInfo *,ZinDramDependentInfo *>((uint64_t)&v8, v5, v5 + 160, a2);
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = 3;
    }
  }
  uint64_t v9 = (void **)&v5;
  std::vector<ZinDramDependentInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
  return v3;
}

void sub_211202428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 24) = &a10;
  std::vector<ZinDramDependentInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned int,2ul>(unint64_t *a1, void *a2)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v3 = ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>(a1, &__p);
  std::vector<int>::pointer begin = __p.__begin_;
  if (v3)
  {
    if (!__p.__begin_) {
      return v3;
    }
    goto LABEL_7;
  }
  if ((std::vector<int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) == (std::vector<int>::pointer)8)
  {
    uint64_t v3 = 0;
    *a2 = *(void *)__p.__begin_;
LABEL_7:
    __p.__end_ = begin;
    operator delete(begin);
    return v3;
  }
  uint64_t v3 = 3;
  if (__p.__begin_) {
    goto LABEL_7;
  }
  return v3;
}

void sub_2112024C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<std::bitset<4ul>,2ul>(unint64_t *a1, _OWORD *a2)
{
  std::vector<int> __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v3 = ZinSerial::Deserializer::Deserialize<std::bitset<4ul>>(a1, (char **)&__p);
  unint64_t v4 = __p;
  if (v3)
  {
    if (!__p) {
      return v3;
    }
    goto LABEL_7;
  }
  if (v7 - (unsigned char *)__p == 16)
  {
    uint64_t v3 = 0;
    *a2 = *(_OWORD *)__p;
LABEL_7:
    uint64_t v7 = v4;
    operator delete(v4);
    return v3;
  }
  uint64_t v3 = 3;
  if (__p) {
    goto LABEL_7;
  }
  return v3;
}

void sub_211202564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinLiveRange *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void *)this + 8;
  unint64_t v4 = *((void *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *(void *)(v6 + v2);
  *(void *)this = v3;
  *(void *)a2 = v7;
  unint64_t v8 = v2 + 16;
  if (v8 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t result = 0;
  uint64_t v10 = *(void *)(v6 + v3);
  *(void *)this = v8;
  *((void *)a2 + 1) = v10;
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinTensorDimensions *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void *)this + 8;
  unint64_t v4 = *((void *)this + 2);
  if (v3 <= v4)
  {
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = *(void *)(v5 + v2);
    *(void *)this = v3;
    *(void *)a2 = v6;
    uint64_t v7 = v2 + 16;
    if (v2 + 16 <= v4)
    {
      uint64_t v8 = *(void *)(v5 + v3);
      *(void *)this = v7;
      *((void *)a2 + 1) = v8;
      uint64_t v9 = v2 + 24;
      if (v2 + 24 <= v4)
      {
        uint64_t v10 = *(void *)(v5 + v7);
        *(void *)this = v9;
        *((void *)a2 + 2) = v10;
        uint64_t v11 = v2 + 32;
        if (v2 + 32 <= v4)
        {
          uint64_t v12 = *(void *)(v5 + v9);
          *(void *)this = v11;
          *((void *)a2 + 3) = v12;
          uint64_t v13 = v2 + 40;
          if (v2 + 40 <= v4)
          {
            uint64_t v14 = 0;
            uint64_t v16 = *(void *)(v5 + v11);
            *(void *)this = v13;
            *((void *)a2 + 4) = v16;
            return v14;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    ZinSerial::Deserializer::Deserialize();
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinTensorRegion *a2)
{
  uint64_t v4 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v5 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorRegion *)((char *)a2 + 40));
    if (v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, _DWORD *a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  else
  {
    *a2 = *(_DWORD *)(v4 + v5);
    *(void *)this += 4;
    uint64_t v7 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorRegion *)(a2 + 2));
    if (v7)
    {
      uint64_t v6 = v7;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      uint64_t v8 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorDimensions *)(a2 + 22));
      if (v8)
      {
        uint64_t v6 = v8;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        uint64_t v9 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorDimensions *)(a2 + 32));
        if (v9)
        {
          uint64_t v6 = v9;
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          uint64_t v6 = ZinSerial::Deserializer::Deserialize(this, (ZinTensorDimensions *)(a2 + 42));
          if (v6 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
      }
    }
  }
  return v6;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, AddrWrapInfo *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void *)this + 8;
  unint64_t v4 = *((void *)this + 2);
  if (v3 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *(void *)(v6 + v2);
  *(void *)this = v3;
  *(void *)a2 = v7;
  unint64_t v8 = v2 + 16;
  if (v8 > v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t result = 0;
  uint64_t v10 = *(void *)(v6 + v3);
  *(void *)this = v8;
  *((void *)a2 + 1) = v10;
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, StaticWrapInfo *a2)
{
  uint64_t v4 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (uint64_t)a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v6 = *((void *)this + 1);
    unint64_t v7 = *(void *)this + 8;
    if (v6 && v7 > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v8 = *(void *)(v6 + *(void *)this);
      *(void *)this = v7;
      *((void *)a2 + 2) = v8;
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinTensorDescriptor>(unint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 208)) {
    return 3;
  }
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1 + 1;
  if (v4)
  {
    if (v5 > a1[2]) {
      return 3;
    }
  }
  int v6 = *(unsigned __int8 *)(v4 + *a1);
  *a1 = v5;
  if (!v6) {
    return 0;
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  int64x2_t v17 = vdupq_n_s64(1uLL);
  int64x2_t v18 = v17;
  int64x2_t v19 = v17;
  int64x2_t v20 = v17;
  int64x2_t v21 = v17;
  int64x2_t v22 = v17;
  int64x2_t v23 = v17;
  int64x2_t v24 = v17;
  int64x2_t v25 = v17;
  int64x2_t v26 = v17;
  uint64_t result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, &v14);
  if (!result)
  {
    int v7 = *(unsigned __int8 *)(a2 + 208);
    int64x2_t v8 = v25;
    *(int64x2_t *)(a2 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v24;
    *(int64x2_t *)(a2 + 176) = v8;
    *(int64x2_t *)(a2 + 192) = v26;
    int64x2_t v9 = v21;
    *(int64x2_t *)(a2 + 96) = v20;
    *(int64x2_t *)(a2 + 112) = v9;
    int64x2_t v10 = v23;
    *(int64x2_t *)(a2 + 128) = v22;
    *(int64x2_t *)(a2 + 144) = v10;
    int64x2_t v11 = v17;
    *(_OWORD *)(a2 + 32) = v16;
    *(int64x2_t *)(a2 + 48) = v11;
    int64x2_t v12 = v19;
    *(int64x2_t *)(a2 + 64) = v18;
    *(int64x2_t *)(a2 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v12;
    long long v13 = v15;
    *(_OWORD *)a2 = v14;
    *(_OWORD *)(a2 + 16) = v13;
    if (!v7) {
      *(unsigned char *)(a2 + 208) = 1;
    }
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<AddrWrapInfo,int,int>(unint64_t *a1, uint64_t a2, int *a3, int *a4)
{
  if (*(unsigned char *)(a2 + 16)) {
    return 3;
  }
  unint64_t v6 = a1[1];
  unint64_t v7 = *a1 + 1;
  if (v6)
  {
    if (v7 > a1[2]) {
      return 3;
    }
  }
  int v8 = *(unsigned __int8 *)(v6 + *a1);
  *a1 = v7;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a4;
  *(void *)&long long v11 = *a3;
  *((void *)&v11 + 1) = v9;
  uint64_t result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (AddrWrapInfo *)&v11);
  if (!result)
  {
    int v10 = *(unsigned __int8 *)(a2 + 16);
    *(_OWORD *)a2 = v11;
    if (!v10) {
      *(unsigned char *)(a2 + 16) = 1;
    }
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<StaticWrapInfo>(unint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24)) {
    return 3;
  }
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1 + 1;
  if (v4)
  {
    if (v5 > a1[2]) {
      return 3;
    }
  }
  int v6 = *(unsigned __int8 *)(v4 + *a1);
  *a1 = v5;
  if (!v6) {
    return 0;
  }
  long long v8 = 5uLL;
  uint64_t v9 = 0;
  uint64_t result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (StaticWrapInfo *)&v8);
  if (!result)
  {
    int v7 = *(unsigned __int8 *)(a2 + 24);
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = v9;
    if (!v7) {
      *(unsigned char *)(a2 + 24) = 1;
    }
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinOcgKernelData,int,int>(uint64_t *a1, void **a2, _DWORD *a3, int *a4)
{
  if (a2[1] != *a2) {
    return 3;
  }
  uint64_t v9 = a1[1];
  unint64_t v10 = *a1 + 4;
  if (v9)
  {
    if (v10 > a1[2]) {
      return 3;
    }
  }
  unint64_t v11 = *(unsigned int *)(v9 + *a1);
  *a1 = v10;
  std::vector<ZinOcgKernelData>::reserve(a2, v11);
  if (!v11) {
    return 0;
  }
  int v12 = 0;
  while (1)
  {
    int v13 = *a4;
    *(_DWORD *)uint64_t v32 = *a3;
    *(_DWORD *)&v32[4] = v13;
    *(void *)&long long v14 = -1;
    *((void *)&v14 + 1) = -1;
    *(_OWORD *)&v32[8] = v14;
    *(_OWORD *)&v32[24] = v14;
    *(void *)&v32[40] = -1;
    uint64_t v33 = 0;
    uint64_t result = ZinSerial::Deserializer::Deserialize(a1, (uint64_t)v32);
    if (result) {
      break;
    }
    long long v15 = (char *)a2[1];
    long long v16 = (char *)a2[2];
    if (v15 >= v16)
    {
      uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((v15 - (unsigned char *)*a2) >> 3);
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) > 0x492492492492492) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v16 - (unsigned char *)*a2) >> 3);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x249249249249249) {
        unint64_t v21 = 0x492492492492492;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21) {
        int64x2_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)(a2 + 2), v21);
      }
      else {
        int64x2_t v22 = 0;
      }
      int64x2_t v23 = &v22[56 * v18];
      long long v24 = *(_OWORD *)&v32[16];
      *(_OWORD *)int64x2_t v23 = *(_OWORD *)v32;
      *((_OWORD *)v23 + 1) = v24;
      *((_OWORD *)v23 + 2) = *(_OWORD *)&v32[32];
      *((void *)v23 + 6) = v33;
      int64x2_t v26 = (char *)*a2;
      int64x2_t v25 = (char *)a2[1];
      uint64_t v27 = v23;
      if (v25 != *a2)
      {
        do
        {
          long long v28 = *(_OWORD *)(v25 - 56);
          long long v29 = *(_OWORD *)(v25 - 40);
          long long v30 = *(_OWORD *)(v25 - 24);
          *((void *)v27 - 1) = *((void *)v25 - 1);
          *(_OWORD *)(v27 - 24) = v30;
          *(_OWORD *)(v27 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v29;
          *(_OWORD *)(v27 - 56) = v28;
          v27 -= 56;
          v25 -= 56;
        }
        while (v25 != v26);
        int64x2_t v25 = (char *)*a2;
      }
      uint64_t v31 = v23 + 56;
      *a2 = v27;
      a2[1] = v23 + 56;
      a2[2] = &v22[56 * v21];
      if (v25) {
        operator delete(v25);
      }
      a2[1] = v31;
    }
    else
    {
      long long v17 = *(_OWORD *)&v32[16];
      *(_OWORD *)long long v15 = *(_OWORD *)v32;
      *((_OWORD *)v15 + 1) = v17;
      *((_OWORD *)v15 + 2) = *(_OWORD *)&v32[32];
      *((void *)v15 + 6) = v33;
      a2[1] = v15 + 56;
    }
    if (++v12 == v11) {
      return 0;
    }
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinMirAneKernelCoeff *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (unint64_t)(v3 + 1) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *(unsigned char *)a2 = *(unsigned char *)(v2 + v3);
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *(void *)this + 1;
  *(void *)this = v6;
  if (v4 && (unint64_t)(v5 + 5) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((_DWORD *)a2 + 1) = *(_DWORD *)(v4 + v6);
  uint64_t v7 = *(void *)this;
  uint64_t v8 = *(void *)this + 4;
  *(void *)this = v8;
  uint64_t v9 = v7 + 12;
  unint64_t v10 = *((void *)this + 2);
  if (v7 + 12 > v10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v11 = *((void *)this + 1);
  uint64_t v12 = *(void *)(v11 + v8);
  *(void *)this = v9;
  *((void *)a2 + 1) = v12;
  uint64_t v13 = v7 + 20;
  if (v7 + 20 > v10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v14 = *(void *)(v11 + v9);
  *(void *)this = v13;
  *((void *)a2 + 2) = v14;
  unint64_t v15 = v7 + 28;
  if (v15 > v10)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v18 = *(void *)(v11 + v13);
  *(void *)this = v15;
  *((void *)a2 + 3) = v18;
  uint64_t v16 = ZinSerial::Deserializer::Deserialize<ZinNeKernelData>((uint64_t *)this, (uint64_t *)a2 + 4);
  if (v16 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinSerial::Deserializer::Deserialize();
  }
  return v16;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinNeKernelData>(uint64_t *a1, uint64_t *a2)
{
  if (a2[1] != *a2) {
    return 3;
  }
  uint64_t v7 = a1[1];
  unint64_t v8 = *a1 + 4;
  if (v7)
  {
    if (v8 > a1[2]) {
      return 3;
    }
  }
  unint64_t v9 = *(unsigned int *)(v7 + *a1);
  *a1 = v8;
  std::vector<ZinNeKernelData>::reserve(a2, v9);
  if (!v9) {
    return 0;
  }
  while (1)
  {
    *(void *)&long long v14 = -1;
    *((void *)&v14 + 1) = -1;
    *(_OWORD *)std::vector<int> __p = 0u;
    memset(v16, 0, sizeof(v16));
    uint64_t v10 = ZinSerial::Deserializer::Deserialize(a1, (uint64_t)&v14);
    int v11 = v10;
    uint64_t v3 = v10;
    if (!v10)
    {
      unint64_t v12 = a2[1];
      if (v12 >= a2[2])
      {
        uint64_t v13 = std::vector<ZinNeKernelData>::__push_back_slow_path<ZinNeKernelData>(a2, (uint64_t)&v14);
      }
      else
      {
        *(_OWORD *)unint64_t v12 = v14;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 32) = 0;
        *(void *)(v12 + 16) = 0;
        *(_OWORD *)(v12 + 16) = *(_OWORD *)__p;
        *(void *)(v12 + 32) = v16[0];
        __p[0] = 0;
        __p[1] = 0;
        v16[0] = 0;
        *(_OWORD *)(v12 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)&v16[1];
        uint64_t v13 = v12 + 56;
      }
      a2[1] = v13;
      uint64_t v3 = v2;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v11) {
      break;
    }
    uint64_t v2 = v3;
    LODWORD(v9) = v9 - 1;
    if (!v9) {
      return 0;
    }
  }
  return v3;
}

void sub_211203B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrNameMaps *a2)
{
  uint64_t v4 = ZinSerial::Deserializer::Deserialize<std::string,std::string>((uint64_t *)this, (uint64_t)a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v6 = ZinSerial::Deserializer::Deserialize<std::string,std::string>((uint64_t *)this, (uint64_t)a2 + 24);
    if (v6)
    {
      uint64_t v5 = v6;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      uint64_t v7 = ZinSerial::Deserializer::Deserialize<std::string,std::string>((uint64_t *)this, (uint64_t)a2 + 48);
      if (v7)
      {
        uint64_t v5 = v7;
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        uint64_t v5 = ZinSerial::Deserializer::Deserialize<std::string,std::string>((uint64_t *)this, (uint64_t)a2 + 72);
        if (v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrLiveIORankMaps *a2)
{
  uint64_t v4 = ZinSerial::Deserializer::Deserialize<std::string,long>((uint64_t *)this, (uint64_t)a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v5 = ZinSerial::Deserializer::Deserialize<std::string,long>((uint64_t *)this, (uint64_t)a2 + 24);
    if (v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize<std::string,long>(uint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    return 3;
  }
  uint64_t v7 = a1[1];
  unint64_t v8 = *a1 + 4;
  if (v7)
  {
    if (v8 > a1[2]) {
      return 3;
    }
  }
  int v9 = *(_DWORD *)(v7 + *a1);
  *a1 = v8;
  if (!v9) {
    return 0;
  }
  while (1)
  {
    memset(&v19, 0, sizeof(v19));
    uint64_t v10 = ZinSerial::BufferReader::Read(a1, &v19);
    uint64_t v3 = v10;
    if (v10)
    {
      char v11 = 0;
      uint64_t v2 = v10;
    }
    else
    {
      uint64_t v12 = a1[1];
      unint64_t v13 = *a1 + 8;
      if (v12 && v13 > a1[2])
      {
        char v11 = 0;
        uint64_t v3 = 3;
        uint64_t v2 = 3;
      }
      else
      {
        uint64_t v14 = *(void *)(v12 + *a1);
        *a1 = v13;
        *(_OWORD *)std::vector<int> __p = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
        std::string::size_type v15 = v19.__r_.__value_.__r.__words[2];
        memset(&v19, 0, sizeof(v19));
        std::string::size_type v17 = v15;
        uint64_t v18 = v14;
        std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,long>>((uint64_t **)a2, __p, (uint64_t)__p);
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v3 = 0;
        char v11 = 1;
      }
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if ((v11 & 1) == 0) {
      break;
    }
    if (!--v9) {
      return v3;
    }
  }
  return v2;
}

void sub_211203E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned char>(unint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1)) {
    return 3;
  }
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 1;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  int v7 = *(unsigned __int8 *)(v5 + v4);
  *a1 = v6;
  if (!v7) {
    return 0;
  }
  unint64_t v8 = v4 + 2;
  if (v4 + 2 > a1[2]) {
    return 3;
  }
  uint64_t v2 = 0;
  __int16 v9 = *(unsigned __int8 *)(v5 + v6);
  *a1 = v8;
  *(_WORD *)a2 = v9 | 0x100;
  return v2;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinBarUsage *a2)
{
  uint64_t v4 = ZinSerial::Deserializer::Deserialize<BarIdType,unsigned char>((unint64_t *)this, (uint64_t)a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v5 = ZinSerial::Deserializer::Deserialize<std::string,ZinIOBarInfo>((uint64_t *)this, (uint64_t)a2 + 24);
    if (v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize<BarIdType,unsigned char>(unint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  int v7 = *(_DWORD *)(v5 + *a1);
  *a1 = v6;
  if (v7)
  {
    while (1)
    {
      unint64_t v9 = *a1;
      unint64_t v8 = a1[1];
      unint64_t v10 = a1[2];
      unint64_t v11 = *a1 + 4;
      if (v8 && v11 > v10) {
        break;
      }
      int v13 = *(_DWORD *)(v8 + v9);
      *a1 = v11;
      unint64_t v14 = v9 + 5;
      if (v14 > v10) {
        break;
      }
      char v15 = *(unsigned char *)(v8 + v11);
      *a1 = v14;
      LODWORD(v16) = v13;
      BYTE4(v16) = v15;
      std::__tree<std::__value_type<ZinIrNonLinearMode,unsigned int>,std::__map_value_compare<ZinIrNonLinearMode,std::__value_type<ZinIrNonLinearMode,unsigned int>,std::less<ZinIrNonLinearMode>,true>,std::allocator<std::__value_type<ZinIrNonLinearMode,unsigned int>>>::__emplace_unique_key_args<ZinIrNonLinearMode,std::pair<ZinIrNonLinearMode const,unsigned int>>((uint64_t **)a2, (int *)&v16, &v16);
      if (!--v7) {
        return 0;
      }
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize<std::string,ZinIOBarInfo>(uint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    return 3;
  }
  uint64_t v7 = a1[1];
  unint64_t v8 = *a1 + 4;
  if (v7)
  {
    if (v8 > a1[2]) {
      return 3;
    }
  }
  int v9 = *(_DWORD *)(v7 + *a1);
  *a1 = v8;
  if (!v9) {
    return 0;
  }
  while (1)
  {
    memset(&__p, 0, sizeof(__p));
    LOBYTE(v15) = 0;
    HIDWORD(v14) = 0;
    uint64_t v3 = ZinSerial::BufferReader::Read(a1, &__p);
    if (v3 || (uint64_t v3 = ZinSerial::Deserializer::Deserialize((unint64_t *)a1, (uint64_t)&v14), v3))
    {
      char v10 = 0;
      uint64_t v2 = v3;
    }
    else
    {
      std::string v11 = __p;
      memset(&__p, 0, sizeof(__p));
      uint64_t v12 = v14;
      int v13 = v15;
      std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ZinIOBarInfo>>((uint64_t **)a2, (void **)&v11.__r_.__value_.__l.__data_, (uint64_t)&v11);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = 0;
      char v10 = 1;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v10 & 1) == 0) {
      break;
    }
    if (!--v9) {
      return v3;
    }
  }
  return v2;
}

void sub_211204290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrInputViewUnitInfo *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *((_DWORD *)a2 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v2 + v3);
    uint64_t v5 = *(void *)this;
    uint64_t v4 = *((void *)this + 1);
    uint64_t v6 = *(void *)this + 4;
    *(void *)this = v6;
    if (v4 && (unint64_t)(v5 + 8) > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *((_DWORD *)a2 + 21) = *(_DWORD *)(v4 + v6);
      uint64_t v8 = *(void *)this;
      uint64_t v7 = *((void *)this + 1);
      uint64_t v9 = *(void *)this + 4;
      *(void *)this = v9;
      if (v7 && (unint64_t)(v8 + 8) > *((void *)this + 2))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        *((_DWORD *)a2 + 22) = *(_DWORD *)(v7 + v9);
        uint64_t v10 = *(void *)this;
        uint64_t v11 = *((void *)this + 1);
        uint64_t v12 = *(void *)this + 4;
        *(void *)this = v12;
        if (!v11 || (unint64_t)(v10 + 8) <= *((void *)this + 2))
        {
          uint64_t v13 = 0;
          *((_DWORD *)a2 + 23) = *(_DWORD *)(v11 + v12);
          *(void *)this += 4;
          return v13;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(unint64_t *a1, _OWORD *a2)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v4 = ZinSerial::Deserializer::Deserialize(a1, &v13);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    long long v10 = xmmword_211ED5A80;
    int64x2_t v11 = vdupq_n_s64(1uLL);
    uint64_t v12 = 1;
    uint64_t v5 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinTensorDimensions *)&v10);
    if (v5)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *(void *)uint64_t v9 = v15;
      long long v6 = v13;
      long long v8 = v14;
      *(_OWORD *)&v9[8] = v10;
      *(int64x2_t *)&v9[24] = v11;
      *(void *)&v9[40] = v12;
      a2[3] = *(_OWORD *)&v9[16];
      a2[4] = *(_OWORD *)&v9[32];
      a2[1] = v8;
      a2[2] = *(_OWORD *)v9;
      *a2 = v6;
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrConcatInfo *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  else
  {
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v2 + v3);
    *(void *)this += 4;
    uint64_t v4 = ZinSerial::Deserializer::Deserialize<ZinIrTensor::ViewOriginAndStep>((unint64_t *)this, (void **)a2 + 2);
    if (v4 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v4;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinIrTensor::ViewOriginAndStep>(unint64_t *a1, void **a2)
{
  if (a2[1] != *a2) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  unint64_t v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinIrTensor::ViewOriginAndStep>::reserve(a2, v7);
  if (!v7) {
    return 0;
  }
  int v8 = 0;
  int64x2_t v29 = vdupq_n_s64(1uLL);
  while (1)
  {
    *(void *)uint64_t v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    *(int64x2_t *)&v32[8] = v29;
    *(int64x2_t *)&v32[24] = v29;
    *(void *)&v32[40] = 1;
    uint64_t result = ZinSerial::Deserializer::Deserialize(a1, &v30);
    if (result) {
      break;
    }
    uint64_t v9 = (char *)a2[1];
    unint64_t v10 = (unint64_t)a2[2];
    if ((unint64_t)v9 >= v10)
    {
      unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (unsigned char *)*a2) >> 4);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0x333333333333333) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)*a2) >> 4);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x199999999999999) {
        unint64_t v16 = 0x333333333333333;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        std::string::size_type v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a2 + 2), v16);
      }
      else {
        std::string::size_type v17 = 0;
      }
      uint64_t v18 = &v17[80 * v13];
      long long v19 = *(_OWORD *)&v32[32];
      long long v20 = *(_OWORD *)v32;
      *((_OWORD *)v18 + 3) = *(_OWORD *)&v32[16];
      *((_OWORD *)v18 + 4) = v19;
      long long v21 = v31;
      *(_OWORD *)uint64_t v18 = v30;
      *((_OWORD *)v18 + 1) = v21;
      *((_OWORD *)v18 + 2) = v20;
      int64x2_t v23 = (char *)*a2;
      int64x2_t v22 = (char *)a2[1];
      long long v24 = v18;
      if (v22 != *a2)
      {
        do
        {
          *((_OWORD *)v24 - 5) = *((_OWORD *)v22 - 5);
          long long v25 = *((_OWORD *)v22 - 4);
          long long v26 = *((_OWORD *)v22 - 3);
          long long v27 = *((_OWORD *)v22 - 1);
          *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
          *((_OWORD *)v24 - 1) = v27;
          *((_OWORD *)v24 - 4) = v25;
          *((_OWORD *)v24 - 3) = v26;
          v24 -= 80;
          v22 -= 80;
        }
        while (v22 != v23);
        int64x2_t v22 = (char *)*a2;
      }
      long long v28 = v18 + 80;
      *a2 = v24;
      a2[1] = v18 + 80;
      a2[2] = &v17[80 * v16];
      if (v22) {
        operator delete(v22);
      }
      a2[1] = v28;
    }
    else
    {
      long long v11 = *(_OWORD *)&v32[16];
      *((_OWORD *)v9 + 2) = *(_OWORD *)v32;
      *((_OWORD *)v9 + 3) = v11;
      *((_OWORD *)v9 + 4) = *(_OWORD *)&v32[32];
      long long v12 = v31;
      *(_OWORD *)uint64_t v9 = v30;
      *((_OWORD *)v9 + 1) = v12;
      a2[1] = v9 + 80;
    }
    if (++v8 == v7) {
      return 0;
    }
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrElementWiseInfo *a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (v3 && (unint64_t)(v4 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  else
  {
    uint64_t result = 0;
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v3 + v4);
    *(void *)this += 4;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrIndexInfo *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v2 + v3);
    uint64_t v4 = *(void *)this;
    uint64_t v5 = *(void *)this + 4;
    *(void *)this = v5;
    uint64_t v6 = v4 + 12;
    unint64_t v7 = *((void *)this + 2);
    if (v4 + 12 <= v7)
    {
      uint64_t v8 = *((void *)this + 1);
      uint64_t v9 = *(void *)(v8 + v5);
      *(void *)this = v6;
      *((void *)a2 + 2) = v9;
      if (v4 + 13 <= v7)
      {
        uint64_t v10 = 0;
        *((unsigned char *)a2 + 24) = *(unsigned char *)(v8 + v6);
        ++*(void *)this;
        return v10;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrReductionInfo *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v2 + v3);
    uint64_t v5 = *(void *)this;
    uint64_t v4 = *((void *)this + 1);
    uint64_t v6 = *(void *)this + 4;
    *(void *)this = v6;
    if (v4 && (unint64_t)(v5 + 8) > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *((_DWORD *)a2 + 4) = *(_DWORD *)(v4 + v6);
      uint64_t v8 = *(void *)this;
      uint64_t v7 = *((void *)this + 1);
      uint64_t v9 = *(void *)this + 4;
      *(void *)this = v9;
      unint64_t v10 = v8 + 12;
      if (v7 && v10 > *((void *)this + 2))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        uint64_t v11 = *(void *)(v7 + v9);
        *(void *)this = v10;
        *((void *)a2 + 3) = v11 & 0x1F;
        uint64_t v13 = *(void *)this;
        uint64_t v12 = *((void *)this + 1);
        if (v12 && (unint64_t)(v13 + 4) > *((void *)this + 2))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          *((_DWORD *)a2 + 8) = *(_DWORD *)(v12 + v13);
          uint64_t v15 = *(void *)this;
          uint64_t v14 = *((void *)this + 1);
          uint64_t v16 = *(void *)this + 4;
          *(void *)this = v16;
          if (v14 && (unint64_t)(v15 + 8) > *((void *)this + 2))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            *((_DWORD *)a2 + 9) = *(_DWORD *)(v14 + v16);
            uint64_t v18 = *(void *)this;
            uint64_t v17 = *((void *)this + 1);
            uint64_t v19 = *(void *)this + 4;
            *(void *)this = v19;
            if (v17 && (unint64_t)(v18 + 8) > *((void *)this + 2))
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else
            {
              *((_DWORD *)a2 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v17 + v19);
              uint64_t v21 = *(void *)this;
              uint64_t v20 = *((void *)this + 1);
              uint64_t v22 = *(void *)this + 4;
              *(void *)this = v22;
              if (v20 && (unint64_t)(v21 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else
              {
                *((_DWORD *)a2 + 11) = *(_DWORD *)(v20 + v22);
                uint64_t v24 = *(void *)this;
                uint64_t v23 = *((void *)this + 1);
                uint64_t v25 = *(void *)this + 4;
                *(void *)this = v25;
                if (v23 && (unint64_t)(v24 + 5) > *((void *)this + 2))
                {
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinSerial::Deserializer::Deserialize();
                  }
                }
                else
                {
                  *((unsigned char *)a2 + 48) = *(unsigned char *)(v23 + v25);
                  uint64_t v26 = *(void *)this;
                  uint64_t v27 = *((void *)this + 1);
                  uint64_t v28 = *(void *)this + 1;
                  *(void *)this = v28;
                  if (!v27 || (unint64_t)(v26 + 2) <= *((void *)this + 2))
                  {
                    uint64_t v29 = 0;
                    *((unsigned char *)a2 + 49) = *(unsigned char *)(v27 + v28);
                    ++*(void *)this;
                    return v29;
                  }
                  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                    ZinSerial::Deserializer::Deserialize();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrScaledEWInfo *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    *((_DWORD *)a2 + 3) = *(_DWORD *)(v2 + v3);
    uint64_t v5 = *(void *)this;
    uint64_t v4 = *((void *)this + 1);
    uint64_t v6 = *(void *)this + 4;
    *(void *)this = v6;
    if (v4 && (unint64_t)(v5 + 8) > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *((_DWORD *)a2 + 4) = *(_DWORD *)(v4 + v6);
      uint64_t v8 = *(void *)this;
      uint64_t v7 = *((void *)this + 1);
      uint64_t v9 = *(void *)this + 4;
      *(void *)this = v9;
      if (v7 && (unint64_t)(v8 + 8) > *((void *)this + 2))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        *((_DWORD *)a2 + 5) = *(_DWORD *)(v7 + v9);
        uint64_t v11 = *(void *)this;
        uint64_t v10 = *((void *)this + 1);
        uint64_t v12 = *(void *)this + 4;
        *(void *)this = v12;
        if (v10 && (unint64_t)(v11 + 8) > *((void *)this + 2))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          *((_DWORD *)a2 + 6) = *(_DWORD *)(v10 + v12);
          uint64_t v14 = *(void *)this;
          uint64_t v13 = *((void *)this + 1);
          uint64_t v15 = *(void *)this + 4;
          *(void *)this = v15;
          if (v13 && (unint64_t)(v14 + 5) > *((void *)this + 2))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            *((unsigned char *)a2 + 28) = *(unsigned char *)(v13 + v15);
            uint64_t v16 = *(void *)this;
            uint64_t v17 = *((void *)this + 1);
            uint64_t v18 = *(void *)this + 1;
            *(void *)this = v18;
            if (!v17 || (unint64_t)(v16 + 2) <= *((void *)this + 2))
            {
              uint64_t v19 = 0;
              *((unsigned char *)a2 + 29) = *(unsigned char *)(v17 + v18);
              ++*(void *)this;
              return v19;
            }
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
        }
      }
    }
  }
  return 3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrPoolUnitInfo *a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((_DWORD *)a2 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v4 + v5);
  *(void *)this += 4;
  uint64_t v7 = ZinSerial::Deserializer::Deserialize((unint64_t *)this, (void *)a2 + 11);
  if (v7)
  {
    uint64_t v6 = v7;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v8 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 28);
    if (v8)
    {
      uint64_t v6 = v8;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      uint64_t v9 = ZinSerial::Deserializer::Deserialize(this, (ZinIrPoolUnitInfo *)((char *)a2 + 124));
      if (!v9)
      {
        uint64_t v12 = *(void *)this;
        uint64_t v11 = *((void *)this + 1);
        if (v11 && (unint64_t)(v12 + 1) > *((void *)this + 2))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          *((unsigned char *)a2 + 148) = *(unsigned char *)(v11 + v12);
          uint64_t v14 = *(void *)this;
          uint64_t v13 = *((void *)this + 1);
          uint64_t v15 = *(void *)this + 1;
          *(void *)this = v15;
          if (v13 && (unint64_t)(v14 + 5) > *((void *)this + 2))
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
              ZinSerial::Deserializer::Deserialize();
            }
          }
          else
          {
            *((_DWORD *)a2 + 38) = *(_DWORD *)(v13 + v15);
            uint64_t v17 = *(void *)this;
            uint64_t v16 = *((void *)this + 1);
            uint64_t v18 = *(void *)this + 4;
            *(void *)this = v18;
            if (v16 && (unint64_t)(v17 + 8) > *((void *)this + 2))
            {
              if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                ZinSerial::Deserializer::Deserialize();
              }
            }
            else
            {
              *((_DWORD *)a2 + 39) = *(_DWORD *)(v16 + v18);
              uint64_t v20 = *(void *)this;
              uint64_t v19 = *((void *)this + 1);
              uint64_t v21 = *(void *)this + 4;
              *(void *)this = v21;
              if (v19 && (unint64_t)(v20 + 8) > *((void *)this + 2))
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
              else
              {
                *((_DWORD *)a2 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v19 + v21);
                uint64_t v23 = *(void *)this;
                uint64_t v22 = *((void *)this + 1);
                uint64_t v24 = *(void *)this + 4;
                *(void *)this = v24;
                unint64_t v25 = v23 + 12;
                if (!v22 || v25 <= *((void *)this + 2))
                {
                  uint64_t v6 = 0;
                  uint64_t v26 = *(void *)(v22 + v24);
                  *(void *)this = v25;
                  *((void *)a2 + 9) = v26;
                  return v6;
                }
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
                  ZinSerial::Deserializer::Deserialize();
                }
              }
            }
          }
        }
        return 3;
      }
      uint64_t v6 = v9;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return v6;
}

void sub_211205420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    ZinPixelUnshuffleLayer::DecomposeStandalone(a11);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<ZinLargeStridePoolTransform>()
{
}

void sub_2112054EC(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C4053614EC0);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinLargeStridePoolTransform *a2)
{
  uint64_t v4 = ZinSerial::Deserializer::Deserialize(this, (ZinLargeStridePoolTransform *)((char *)a2 + 8));
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v7 = *(void *)this;
    uint64_t v6 = *((void *)this + 1);
    if (v6 && (unint64_t)(v7 + 1) > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    else
    {
      uint64_t v5 = 0;
      *((unsigned char *)a2 + 176) = *(unsigned char *)(v6 + v7);
      ++*(void *)this;
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinSpatialSplitTransform *a2)
{
  uint64_t v4 = ZinSerial::Deserializer::Deserialize<unsigned long long>((unint64_t *)this, (uint64_t)a2 + 8);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v5 = ZinSerial::Deserializer::Deserialize<ZinSpatialSplitTransformPadding>((unint64_t *)this, (uint64_t)a2 + 32);
    if (v5 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v5;
}

void std::make_unique[abi:ne180100]<ZinResizeTransform,ZinIrResizeUnitInfo &>()
{
}

void sub_2112056A0(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40487B577ELL);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinResizeTransform *a2)
{
  uint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *(void *)this + 4;
  if (v4 && v5 > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v6 = *(unsigned int *)(v4 + *(void *)this);
  *(void *)this = v5;
  unint64_t v7 = *((void *)a2 + 25);
  uint64_t v8 = (char **)((char *)a2 + 184);
  uint64_t v9 = (uint64_t *)*((void *)a2 + 24);
  if ((unint64_t)v9 >= v7)
  {
    uint64_t v11 = ((char *)v9 - *v8) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      goto LABEL_95;
    }
    uint64_t v12 = v7 - (void)*v8;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)a2 + 200, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (uint64_t *)&v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *uint64_t v16 = (v6 << 32) | 4;
    uint64_t v10 = v16 + 1;
    uint64_t v19 = (char *)*((void *)a2 + 23);
    uint64_t v18 = (char *)*((void *)a2 + 24);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *--uint64_t v16 = v20;
      }
      while (v18 != v19);
      uint64_t v18 = *v8;
    }
    *((void *)a2 + 23) = v16;
    *((void *)a2 + 24) = v10;
    *((void *)a2 + 25) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v9 = (v6 << 32) | 4;
    uint64_t v10 = v9 + 1;
  }
  *((void *)a2 + 24) = v10;
  unint64_t v21 = *((void *)a2 + 25);
  if ((unint64_t)v10 < v21)
  {
    *uint64_t v10 = (v6 << 32) | 3;
    uint64_t v22 = v10 + 1;
    goto LABEL_37;
  }
  uint64_t v23 = ((char *)v10 - *v8) >> 3;
  if ((unint64_t)(v23 + 1) >> 61) {
LABEL_95:
  }
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  uint64_t v24 = v21 - (void)*v8;
  uint64_t v25 = v24 >> 2;
  if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
    uint64_t v25 = v23 + 1;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v25;
  }
  if (v26) {
    uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)a2 + 200, v26);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = (uint64_t *)&v27[8 * v23];
  uint64_t v29 = &v27[8 * v26];
  uint64_t *v28 = (v6 << 32) | 3;
  uint64_t v22 = v28 + 1;
  long long v31 = (char *)*((void *)a2 + 23);
  long long v30 = (char *)*((void *)a2 + 24);
  if (v30 != v31)
  {
    do
    {
      uint64_t v32 = *((void *)v30 - 1);
      v30 -= 8;
      *--uint64_t v28 = v32;
    }
    while (v30 != v31);
    long long v30 = *v8;
  }
  *((void *)a2 + 23) = v28;
  *((void *)a2 + 24) = v22;
  *((void *)a2 + 25) = v29;
  if (v30) {
    operator delete(v30);
  }
LABEL_37:
  *((void *)a2 + 24) = v22;
  uint64_t v33 = *((void *)this + 1);
  unint64_t v34 = *(void *)this + 4;
  if (v33 && v34 > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v35 = *(unsigned int *)(v33 + *(void *)this);
  *(void *)this = v34;
  unint64_t v36 = *((void *)a2 + 19);
  uint64_t v37 = (char **)((char *)a2 + 136);
  uint64_t v38 = (uint64_t *)*((void *)a2 + 18);
  if ((unint64_t)v38 >= v36)
  {
    uint64_t v40 = ((char *)v38 - *v37) >> 3;
    if ((unint64_t)(v40 + 1) >> 61) {
      goto LABEL_96;
    }
    uint64_t v41 = v36 - (void)*v37;
    uint64_t v42 = v41 >> 2;
    if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
      uint64_t v42 = v40 + 1;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v42;
    }
    if (v43) {
      uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)a2 + 152, v43);
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v45 = (uint64_t *)&v44[8 * v40];
    uint64_t v46 = &v44[8 * v43];
    *uint64_t v45 = (v35 << 32) | 4;
    uint64_t v39 = v45 + 1;
    uint64_t v48 = (char *)*((void *)a2 + 17);
    uint64_t v47 = (char *)*((void *)a2 + 18);
    if (v47 != v48)
    {
      do
      {
        uint64_t v49 = *((void *)v47 - 1);
        v47 -= 8;
        *--uint64_t v45 = v49;
      }
      while (v47 != v48);
      uint64_t v47 = *v37;
    }
    *((void *)a2 + 17) = v45;
    *((void *)a2 + 18) = v39;
    *((void *)a2 + 19) = v46;
    if (v47) {
      operator delete(v47);
    }
  }
  else
  {
    uint64_t *v38 = (v35 << 32) | 4;
    uint64_t v39 = v38 + 1;
  }
  *((void *)a2 + 18) = v39;
  unint64_t v50 = *((void *)a2 + 19);
  if ((unint64_t)v39 < v50)
  {
    *uint64_t v39 = (v35 << 32) | 3;
    uint64_t v51 = v39 + 1;
    goto LABEL_73;
  }
  uint64_t v52 = ((char *)v39 - *v37) >> 3;
  if ((unint64_t)(v52 + 1) >> 61) {
LABEL_96:
  }
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  uint64_t v53 = v50 - (void)*v37;
  uint64_t v54 = v53 >> 2;
  if (v53 >> 2 <= (unint64_t)(v52 + 1)) {
    uint64_t v54 = v52 + 1;
  }
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v55 = v54;
  }
  if (v55) {
    uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)a2 + 152, v55);
  }
  else {
    uint64_t v56 = 0;
  }
  uint64_t v57 = (uint64_t *)&v56[8 * v52];
  uint64_t v58 = &v56[8 * v55];
  *uint64_t v57 = (v35 << 32) | 3;
  uint64_t v51 = v57 + 1;
  uint64_t v60 = (char *)*((void *)a2 + 17);
  uint64_t v59 = (char *)*((void *)a2 + 18);
  if (v59 != v60)
  {
    do
    {
      uint64_t v61 = *((void *)v59 - 1);
      v59 -= 8;
      *--uint64_t v57 = v61;
    }
    while (v59 != v60);
    uint64_t v59 = *v37;
  }
  *((void *)a2 + 17) = v57;
  *((void *)a2 + 18) = v51;
  *((void *)a2 + 19) = v58;
  if (v59) {
    operator delete(v59);
  }
LABEL_73:
  *((void *)a2 + 18) = v51;
  uint64_t v63 = *(void *)this;
  uint64_t v62 = *((void *)this + 1);
  if (v62 && (unint64_t)(v63 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((_DWORD *)a2 + 19) = *(_DWORD *)(v62 + v63);
  uint64_t v65 = *(void *)this;
  uint64_t v64 = *((void *)this + 1);
  uint64_t v66 = *(void *)this + 4;
  *(void *)this = v66;
  if (v64 && (unint64_t)(v65 + 12) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((void *)a2 + 27) = *(void *)(v64 + v66);
  uint64_t v68 = *(void *)this;
  uint64_t v67 = *((void *)this + 1);
  uint64_t v69 = *(void *)this + 8;
  *(void *)this = v69;
  if (v67 && (unint64_t)(v68 + 16) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((void *)a2 + 28) = *(void *)(v67 + v69);
  uint64_t v71 = *(void *)this;
  uint64_t v70 = *((void *)this + 1);
  uint64_t v72 = *(void *)this + 8;
  *(void *)this = v72;
  if (v70 && (unint64_t)(v71 + 16) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((void *)a2 + 29) = *(void *)(v70 + v72);
  uint64_t v74 = *(void *)this;
  uint64_t v73 = *((void *)this + 1);
  uint64_t v75 = *(void *)this + 8;
  *(void *)this = v75;
  if (v73 && (unint64_t)(v74 + 16) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t result = 0;
  *((void *)a2 + 3std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(v73 + v75);
  *(void *)this += 8;
  return result;
}

void std::make_unique[abi:ne180100]<ZinPixelShuffleUnshuffleTransform>()
{
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinPixelShuffleUnshuffleTransform *a2)
{
  uint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *(void *)this + 8;
  if (v4 && v5 > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + *(void *)this);
    *(void *)this = v5;
    *((void *)a2 + 1) = v7;
    uint64_t v8 = ZinSerial::Deserializer::Deserialize((uint64_t *)this, (_DWORD *)a2 + 4);
    if (v8)
    {
      uint64_t v6 = v8;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      uint64_t v6 = ZinSerial::Deserializer::Deserialize<unsigned long long>((unint64_t *)this, (uint64_t)a2 + 32);
      if (v6 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
  }
  return v6;
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned long long>(unint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  int v7 = *(_DWORD *)(v5 + *a1);
  *a1 = v6;
  if (v7)
  {
    while (1)
    {
      uint64_t v10 = 0;
      unint64_t v8 = a1[1];
      unint64_t v9 = *a1 + 8;
      if (v8)
      {
        if (v9 > a1[2]) {
          break;
        }
      }
      uint64_t v10 = *(void *)(v8 + *a1);
      *a1 = v9;
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)a2, (unint64_t *)&v10, &v10);
      if (!--v7) {
        return 0;
      }
    }
    return 3;
  }
  return 0;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinSpatialSplitTransformPadding>(unint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 28)) {
    return 3;
  }
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1 + 1;
  if (v4)
  {
    if (v5 > a1[2]) {
      return 3;
    }
  }
  int v6 = *(unsigned __int8 *)(v4 + *a1);
  *a1 = v5;
  if (!v6) {
    return 0;
  }
  memset(v8, 0, 28);
  uint64_t result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinIrPadding *)v8);
  if (!result)
  {
    int v7 = *(unsigned __int8 *)(a2 + 28);
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)v8 + 12);
    if (!v7) {
      *(unsigned char *)(a2 + 28) = 1;
    }
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrDynamicGOCInfo *a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((_DWORD *)a2 + 3) = *(_DWORD *)(v4 + v5);
  uint64_t v7 = *(void *)this;
  uint64_t v6 = *((void *)this + 1);
  uint64_t v8 = *(void *)this + 4;
  *(void *)this = v8;
  if (v6 && (unint64_t)(v7 + 5) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((unsigned char *)a2 + 16) = *(unsigned char *)(v6 + v8);
  uint64_t v10 = *(void *)this;
  uint64_t v9 = *((void *)this + 1);
  uint64_t v11 = *(void *)this + 1;
  *(void *)this = v11;
  if (v9 && (unint64_t)(v10 + 2) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((unsigned char *)a2 + 17) = *(unsigned char *)(v9 + v11);
  ++*(void *)this;
  uint64_t v12 = ZinSerial::Deserializer::Deserialize(this, (ZinIrDynamicGOCInfo *)((char *)a2 + 24));
  if (!v12)
  {
    uint64_t v15 = *(void *)this;
    uint64_t v14 = *((void *)this + 1);
    if (v14 && (unint64_t)(v15 + 1) > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *((unsigned char *)a2 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(v14 + v15);
      uint64_t v17 = *(void *)this;
      uint64_t v16 = *((void *)this + 1);
      uint64_t v18 = *(void *)this + 1;
      *(void *)this = v18;
      if (v16 && (unint64_t)(v17 + 2) > *((void *)this + 2))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        *((unsigned char *)a2 + 81) = *(unsigned char *)(v16 + v18);
        uint64_t v20 = *(void *)this;
        uint64_t v19 = *((void *)this + 1);
        uint64_t v21 = *(void *)this + 1;
        *(void *)this = v21;
        if (!v19 || (unint64_t)(v20 + 2) <= *((void *)this + 2))
        {
          uint64_t v13 = 0;
          *((unsigned char *)a2 + 82) = *(unsigned char *)(v19 + v21);
          ++*(void *)this;
          return v13;
        }
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
    }
    return 3;
  }
  uint64_t v13 = v12;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinSerial::Deserializer::Deserialize();
  }
  return v13;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, DimensionOrderHint *a2)
{
  memset(&v12, 0, sizeof(v12));
  uint64_t v4 = ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>((unint64_t *)this, &v12);
  if (v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 1);
    unint64_t v6 = *(void *)this + 4;
    if (v5 && v6 > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      uint64_t v4 = 3;
    }
    else
    {
      int v7 = *(_DWORD *)(v5 + *(void *)this);
      *(void *)this = v6;
      DimensionOrderHint::DimensionOrderHint((uint64_t)&__p, (uint64_t)&v12, v7);
      if (&__p != (void **)a2) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2, (char *)__p, (uint64_t)v10, (v10 - (unsigned char *)__p) >> 2);
      }
      *((_DWORD *)a2 + 6) = v11;
      if (__p)
      {
        uint64_t v10 = __p;
        operator delete(__p);
      }
      uint64_t v4 = 0;
    }
  }
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
  return v4;
}

void sub_211206218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, void **a2)
{
  DimensionOrderHint::DimensionOrderHint(v11, 0);
  uint64_t v4 = ZinSerial::Deserializer::Deserialize(this, (DimensionOrderHint *)v11);
  if (v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    ZinIrReshapeInfo::ZinIrReshapeInfo((ZinIrReshapeInfo *)&v6, (const DimensionOrderHint *)v11);
    *((_DWORD *)a2 + 2) = v7;
    if (&v6 != a2) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2 + 16, (char *)__p, (uint64_t)v9, (v9 - (unsigned char *)__p) >> 2);
    }
    *((_DWORD *)a2 + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v10;
    unint64_t v6 = &unk_26C3499E8;
    if (__p)
    {
      uint64_t v9 = __p;
      operator delete(__p);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v6);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  return v4;
}

void sub_211206348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrDMAConvertInfo *a2)
{
  LOBYTE(v8) = 0;
  BYTE4(v8) = 0;
  uint64_t v3 = ZinSerial::Deserializer::Deserialize<unsigned int>((unint64_t *)this, (uint64_t)&v8);
  if (v3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    ZinIrDMAConvertInfo::ZinIrDMAConvertInfo((uint64_t)v6, v8);
    int v4 = v6[3];
    *((_DWORD *)a2 + 2) = v6[2];
    *((_DWORD *)a2 + 3) = v4;
    *((unsigned char *)a2 + 16) = v7;
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v6);
  }
  return v3;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrStochasticRoundInfo *a2)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  if (v4 && (unint64_t)(v5 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((_DWORD *)a2 + 3) = *(_DWORD *)(v4 + v5);
  *(void *)this += 4;
  uint64_t v6 = ZinSerial::Deserializer::Deserialize<unsigned int,4ul>((unint64_t *)this, (_OWORD *)a2 + 1);
  if (!v6)
  {
    uint64_t v8 = *((void *)this + 1);
    unint64_t v9 = *(void *)this + 8;
    if (!v8 || v9 <= *((void *)this + 2))
    {
      uint64_t v7 = 0;
      uint64_t v10 = *(void *)(v8 + *(void *)this);
      *(void *)this = v9;
      *((void *)a2 + 4) = v10;
      return v7;
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  uint64_t v7 = v6;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinSerial::Deserializer::Deserialize();
  }
  return v7;
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned int,4ul>(unint64_t *a1, _OWORD *a2)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v3 = ZinSerial::Deserializer::Deserialize<ZinDramDependentSrcType>(a1, &__p);
  std::vector<int>::pointer begin = __p.__begin_;
  if (v3)
  {
    if (!__p.__begin_) {
      return v3;
    }
    goto LABEL_7;
  }
  if ((std::vector<int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) == (std::vector<int>::pointer)16)
  {
    uint64_t v3 = 0;
    *a2 = *(_OWORD *)__p.__begin_;
LABEL_7:
    __p.__end_ = begin;
    operator delete(begin);
    return v3;
  }
  uint64_t v3 = 3;
  if (__p.__begin_) {
    goto LABEL_7;
  }
  return v3;
}

void sub_211206570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *a1, ZinIrPadding *a2)
{
  uint64_t v4 = ZinSerial::Deserializer::Deserialize(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    uint64_t v7 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    if (v6 && (unint64_t)(v7 + 4) > *((void *)a1 + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
      return 3;
    }
    else
    {
      uint64_t v5 = 0;
      *((_DWORD *)a2 + 6) = *(_DWORD *)(v6 + v7);
      *(void *)a1 += 4;
    }
  }
  return v5;
}

uint64_t ZinSerial::Deserializer::Deserialize(ZinSerial::Deserializer *this, ZinIrActivationParams *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 && (unint64_t)(v3 + 4) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  int v4 = *(_DWORD *)(v2 + v3);
  *(_DWORD *)a2 = v4;
  uint64_t v6 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v7 = *(void *)this + 4;
  *(void *)this = v7;
  if (v5 && (unint64_t)(v6 + 8) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((_DWORD *)a2 + 1) = *(_DWORD *)(v5 + v7);
  uint64_t v9 = *(void *)this;
  uint64_t v8 = *((void *)this + 1);
  uint64_t v10 = *(void *)this + 4;
  *(void *)this = v10;
  if (v8 && (unint64_t)(v9 + 8) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((_DWORD *)a2 + 2) = *(_DWORD *)(v8 + v10);
  uint64_t v12 = *(void *)this;
  uint64_t v11 = *((void *)this + 1);
  uint64_t v13 = *(void *)this + 4;
  *(void *)this = v13;
  if (v4 != 31)
  {
    if (v11 && (unint64_t)(v12 + 8) > *((void *)this + 2))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinSerial::Deserializer::Deserialize();
      }
    }
    else
    {
      *((_DWORD *)a2 + 3) = *(_DWORD *)(v11 + v13);
      uint64_t v17 = *(void *)this;
      uint64_t v16 = *((void *)this + 1);
      uint64_t v18 = *(void *)this + 4;
      *(void *)this = v18;
      if (v16 && (unint64_t)(v17 + 8) > *((void *)this + 2))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinSerial::Deserializer::Deserialize();
        }
      }
      else
      {
        *((_DWORD *)a2 + 4) = *(_DWORD *)(v16 + v18);
        uint64_t v20 = *(void *)this;
        uint64_t v19 = *((void *)this + 1);
        uint64_t v21 = *(void *)this + 4;
        *(void *)this = v21;
        if (v19 && (unint64_t)(v20 + 8) > *((void *)this + 2))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
        else
        {
          *((_DWORD *)a2 + 5) = *(_DWORD *)(v19 + v21);
          uint64_t v23 = *(void *)this;
          uint64_t v22 = *((void *)this + 1);
          uint64_t v24 = *(void *)this + 4;
          *(void *)this = v24;
          if (!v22 || (unint64_t)(v23 + 8) <= *((void *)this + 2))
          {
            uint64_t v15 = 0;
            *((_DWORD *)a2 + 6) = *(_DWORD *)(v22 + v24);
            *(void *)this += 4;
            return v15;
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinSerial::Deserializer::Deserialize();
          }
        }
      }
    }
    return 3;
  }
  if (v11 && (unint64_t)(v12 + 8) > *((void *)this + 2))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
    return 3;
  }
  *((_DWORD *)a2 + 3) = *(_DWORD *)(v11 + v13);
  *(void *)this += 4;
  int v14 = *((_DWORD *)a2 + 3);
  if (v14 == 1)
  {
    uint64_t v15 = ZinSerial::Deserializer::Deserialize<unsigned short,43ul>((unint64_t *)this, (char *)a2 + 16);
    if (v15 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  else
  {
    if (v14) {
      ZinAssertImpl("Unknown custom LUT params version");
    }
    uint64_t v15 = ZinSerial::Deserializer::Deserialize<unsigned short,75ul>((unint64_t *)this, (char *)a2 + 16);
    if (v15 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::Deserializer::Deserialize();
    }
  }
  return v15;
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned short,75ul>(unint64_t *a1, void *a2)
{
  std::vector<unsigned int> __src = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v3 = ZinSerial::Deserializer::Deserialize<unsigned short>(a1, (uint64_t)&__src);
  int v4 = __src;
  if (v3)
  {
    if (!__src) {
      return v3;
    }
    goto LABEL_7;
  }
  if (v7 - (unsigned char *)__src == 150)
  {
    memmove(a2, __src, 0x96uLL);
    uint64_t v3 = 0;
LABEL_7:
    uint64_t v7 = v4;
    operator delete(v4);
    return v3;
  }
  uint64_t v3 = 3;
  if (__src) {
    goto LABEL_7;
  }
  return v3;
}

void sub_211206CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned short,43ul>(unint64_t *a1, void *a2)
{
  std::vector<unsigned int> __src = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v3 = ZinSerial::Deserializer::Deserialize<unsigned short>(a1, (uint64_t)&__src);
  int v4 = __src;
  if (v3)
  {
    if (!__src) {
      return v3;
    }
    goto LABEL_7;
  }
  if (v7 - (unsigned char *)__src == 86)
  {
    memmove(a2, __src, 0x56uLL);
    uint64_t v3 = 0;
LABEL_7:
    uint64_t v7 = v4;
    operator delete(v4);
    return v3;
  }
  uint64_t v3 = 3;
  if (__src) {
    goto LABEL_7;
  }
  return v3;
}

void sub_211206D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinMirUnitBasicBlock::EdgeInfo>(uint64_t *a1, void **a2)
{
  if (a2[1] != *a2) {
    return 3;
  }
  uint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  unint64_t v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinMirUnitBasicBlock::EdgeInfo>::reserve(a2, v7);
  if (!v7) {
    return 0;
  }
  int v8 = 0;
  while (1)
  {
    long long v21 = 0uLL;
    uint64_t result = ZinSerial::Deserializer::Deserialize(a1, (uint64_t)&v21);
    if (result) {
      break;
    }
    uint64_t v10 = (char *)a2[1];
    unint64_t v9 = (unint64_t)a2[2];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v11 = (v10 - (unsigned char *)*a2) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)*a2;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a2 + 2), v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = &v15[16 * v11];
      *(_OWORD *)uint64_t v16 = v21;
      uint64_t v18 = (char *)*a2;
      uint64_t v17 = (char *)a2[1];
      uint64_t v19 = v16;
      if (v17 != *a2)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*a2;
      }
      uint64_t v20 = v16 + 16;
      *a2 = v19;
      a2[1] = v16 + 16;
      a2[2] = &v15[16 * v14];
      if (v17) {
        operator delete(v17);
      }
      a2[1] = v20;
    }
    else
    {
      *(_OWORD *)uint64_t v10 = v21;
      a2[1] = v10 + 16;
    }
    if (++v8 == v7) {
      return 0;
    }
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinMirDmaConfig::DramAccess>(unint64_t *a1, void **a2)
{
  if (a2[1] != *a2) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  unint64_t v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinMirDmaConfig::DramAccess>::reserve(a2, v7);
  if (!v7) {
    return 0;
  }
  int v8 = 0;
  while (1)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t result = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinMirDmaConfig::DramAccess *)&v31);
    if (result) {
      break;
    }
    unint64_t v9 = (char *)a2[1];
    unint64_t v10 = (unint64_t)a2[2];
    if ((unint64_t)v9 >= v10)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (unsigned char *)*a2) >> 5);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0x2AAAAAAAAAAAAAALL) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a2) >> 5);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x155555555555555) {
        unint64_t v17 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem>>((uint64_t)(a2 + 2), v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = &v18[96 * v14];
      long long v20 = v32;
      *(_OWORD *)uint64_t v19 = v31;
      *((_OWORD *)v19 + 1) = v20;
      long long v21 = v36;
      *((_OWORD *)v19 + 4) = v35;
      *((_OWORD *)v19 + 5) = v21;
      long long v22 = v34;
      *((_OWORD *)v19 + 2) = v33;
      *((_OWORD *)v19 + 3) = v22;
      uint64_t v24 = (char *)*a2;
      uint64_t v23 = (char *)a2[1];
      uint64_t v25 = v19;
      if (v23 != *a2)
      {
        do
        {
          long long v26 = *((_OWORD *)v23 - 5);
          *((_OWORD *)v25 - 6) = *((_OWORD *)v23 - 6);
          *((_OWORD *)v25 - 5) = v26;
          long long v27 = *((_OWORD *)v23 - 4);
          long long v28 = *((_OWORD *)v23 - 3);
          long long v29 = *((_OWORD *)v23 - 1);
          *((_OWORD *)v25 - 2) = *((_OWORD *)v23 - 2);
          *((_OWORD *)v25 - 1) = v29;
          *((_OWORD *)v25 - 4) = v27;
          *((_OWORD *)v25 - 3) = v28;
          v25 -= 96;
          v23 -= 96;
        }
        while (v23 != v24);
        uint64_t v23 = (char *)*a2;
      }
      long long v30 = v19 + 96;
      *a2 = v25;
      a2[1] = v19 + 96;
      a2[2] = &v18[96 * v17];
      if (v23) {
        operator delete(v23);
      }
      a2[1] = v30;
    }
    else
    {
      long long v11 = v34;
      *((_OWORD *)v9 + 2) = v33;
      *((_OWORD *)v9 + 3) = v11;
      long long v12 = v36;
      *((_OWORD *)v9 + 4) = v35;
      *((_OWORD *)v9 + 5) = v12;
      long long v13 = v32;
      *(_OWORD *)unint64_t v9 = v31;
      *((_OWORD *)v9 + 1) = v13;
      a2[1] = v9 + 96;
    }
    if (++v8 == v7) {
      return 0;
    }
  }
  return result;
}

void std::vector<ZinMirDmaConfig::DramAccess>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 96;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem>>(v3, a2);
    unint64_t v7 = &v6[96 * v5];
    unint64_t v9 = &v6[96 * v8];
    long long v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v13;
        long long v14 = *((_OWORD *)v10 - 4);
        long long v15 = *((_OWORD *)v10 - 3);
        long long v16 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v16;
        *((_OWORD *)v12 - 4) = v14;
        *((_OWORD *)v12 - 3) = v15;
        v12 -= 96;
        v10 -= 96;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t ZinSerial::Deserializer::Deserialize<ZinDramDependentInfo>(unint64_t *a1, uint64_t *a2)
{
  if (a2[1] != *a2) {
    return 3;
  }
  unint64_t v7 = a1[1];
  unint64_t v8 = *a1 + 4;
  if (v7)
  {
    if (v8 > a1[2]) {
      return 3;
    }
  }
  unint64_t v9 = *(unsigned int *)(v7 + *a1);
  *a1 = v8;
  std::vector<ZinDramDependentInfo>::reserve(a2, v9);
  if (!v9) {
    return 0;
  }
  while (1)
  {
    long long v15 = 0u;
    memset(__p, 0, sizeof(__p));
    DWORD2(v15) = 1065353216;
    uint64_t v10 = ZinSerial::Deserializer::Deserialize((ZinSerial::Deserializer *)a1, (ZinDramDependentInfo *)__p);
    int v11 = v10;
    uint64_t v3 = v10;
    if (!v10)
    {
      unint64_t v12 = a2[1];
      if (v12 >= a2[2])
      {
        uint64_t v13 = std::vector<ZinDramDependentInfo>::__push_back_slow_path<ZinDramDependentInfo>(a2, (uint64_t)__p);
      }
      else
      {
        *(_DWORD *)unint64_t v12 = __p[0];
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 8) = 0;
        *(_OWORD *)(v12 + 8) = *(_OWORD *)&__p[1];
        *(void **)(v12 + 24) = __p[3];
        memset(&__p[1], 0, 24);
        *(_DWORD *)(v12 + 32) = __p[4];
        std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(v12 + 40, (uint64_t *)&__p[5]);
        uint64_t v13 = v12 + 80;
      }
      a2[1] = v13;
      uint64_t v3 = v2;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&__p[5]);
    if (__p[1])
    {
      __p[2] = __p[1];
      operator delete(__p[1]);
    }
    if (v11) {
      break;
    }
    uint64_t v2 = v3;
    LODWORD(v9) = v9 - 1;
    if (!v9) {
      return 0;
    }
  }
  return v3;
}

void sub_2112074B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<ZinDramDependentInfo>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 80 * v6;
    std::vector<ZinDramDependentInfo>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<ZinDramDependentInfo>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_211207568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinDramDependentInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinDramDependentInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDramDependentInfo>,std::reverse_iterator<ZinDramDependentInfo*>,std::reverse_iterator<ZinDramDependentInfo*>,std::reverse_iterator<ZinDramDependentInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinDramDependentInfo>,std::reverse_iterator<ZinDramDependentInfo*>,std::reverse_iterator<ZinDramDependentInfo*>,std::reverse_iterator<ZinDramDependentInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      *(_DWORD *)(v12 - 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a3 + v11 - 80);
      *(void *)(v12 - 64) = 0;
      *(void *)(v12 - 56) = 0;
      *(void *)(v12 - 72) = 0;
      *(_OWORD *)(v12 - 72) = *(_OWORD *)(a3 + v11 - 72);
      *(void *)(v12 - 56) = *(void *)(a3 + v11 - 56);
      *(void *)(v13 - 72) = 0;
      *(void *)(v13 - 64) = 0;
      *(void *)(v13 - 56) = 0;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table(a7 + v11 - 40, (uint64_t *)(a3 + v11 - 40));
      v11 -= 80;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t std::__split_buffer<ZinDramDependentInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<ZinDramDependentInfo,0>(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<ZinDramDependentInfo>::__push_back_slow_path<ZinDramDependentInfo>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[80 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[80 * v9];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::__hash_table((uint64_t)(v11 + 40), (uint64_t *)(a2 + 40));
  void v14[2] = v11 + 80;
  std::vector<ZinDramDependentInfo>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<ZinDramDependentInfo>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_21120780C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinDramDependentInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinDramDependentInfo *,ZinDramDependentInfo *,ZinDramDependentInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *a4 = *(_DWORD *)v5;
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign((uint64_t)(a4 + 2), (__n128 *)(v5 + 8));
    a4[8] = *(_DWORD *)(v5 + 32);
    std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__move_assign((uint64_t)(a4 + 10), (uint64_t *)(v5 + 40));
    a4 += 20;
    v5 += 80;
  }
  while (v5 != v6);
  return v6;
}

uint64_t ZinSerial::Deserializer::Deserialize<std::bitset<4ul>>(unint64_t *a1, char **a2)
{
  if (a2[1] != *a2) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  unint64_t v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<ZinIrOpLayer *>::reserve((void **)a2, v7);
  if (v7)
  {
    int v8 = 0;
    while (1)
    {
      unint64_t v9 = a1[1];
      unint64_t v10 = *a1 + 8;
      if (v9)
      {
        if (v10 > a1[2]) {
          break;
        }
      }
      uint64_t v11 = *(void *)(v9 + *a1);
      *a1 = v10;
      uint64_t v12 = v11 & 0xF;
      long long v14 = a2[1];
      unint64_t v13 = (unint64_t)a2[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = (v14 - *a2) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - (void)*a2;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v19);
        }
        else {
          long long v20 = 0;
        }
        long long v21 = &v20[8 * v16];
        *(void *)long long v21 = v12;
        long long v15 = v21 + 8;
        uint64_t v23 = *a2;
        long long v22 = a2[1];
        if (v22 != *a2)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          long long v22 = *a2;
        }
        *a2 = v21;
        a2[1] = v15;
        a2[2] = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(void *)long long v14 = v12;
        long long v15 = v14 + 8;
      }
      a2[1] = v15;
      if (++v8 == v7) {
        return 0;
      }
    }
    return 3;
  }
  return 0;
}

void std::vector<ZinOcgKernelData>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 56;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>(v3, a2);
    unint64_t v7 = &v6[56 * v5];
    unint64_t v9 = &v6[56 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 56);
        long long v14 = *(_OWORD *)(v10 - 40);
        long long v15 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 56;
        v10 -= 56;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t std::vector<ZinNeKernelData>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<ZinNeKernelData>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_211207BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinNeKernelData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>,std::reverse_iterator<ZinNeKernelData*>,std::reverse_iterator<ZinNeKernelData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>,std::reverse_iterator<ZinNeKernelData*>,std::reverse_iterator<ZinNeKernelData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  void v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
      *(_OWORD *)(v7 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v13 + 1) - 56;
      *((void *)&v13 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ZinNeKernelData>,std::reverse_iterator<ZinNeKernelData*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(void *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t std::__split_buffer<ZinNeKernelData>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<ZinNeKernelData>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 56;
    uint64_t v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(void *)(v2 - 32) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

uint64_t std::vector<ZinNeKernelData>::__push_back_slow_path<ZinNeKernelData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  char v11 = &v10[56 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[56 * v9];
  *(_OWORD *)char v11 = *(_OWORD *)a2;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 2) = 0;
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((void *)v11 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(v11 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 40);
  void v14[2] = v11 + 56;
  std::vector<ZinNeKernelData>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_211207F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,long>>(uint64_t **a1, void **a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__construct_node<std::pair<std::string const,ZinIrOpLayer *> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t ZinSerial::Deserializer::Deserialize<unsigned short>(unint64_t *a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) != *(void *)a2) {
    return 3;
  }
  unint64_t v5 = a1[1];
  unint64_t v6 = *a1 + 4;
  if (v5)
  {
    if (v6 > a1[2]) {
      return 3;
    }
  }
  unint64_t v7 = *(unsigned int *)(v5 + *a1);
  *a1 = v6;
  std::vector<unsigned short>::reserve((void **)a2, v7);
  if (v7)
  {
    int v8 = 0;
    while (1)
    {
      unint64_t v9 = a1[1];
      unint64_t v10 = *a1 + 2;
      if (v9)
      {
        if (v10 > a1[2]) {
          break;
        }
      }
      __int16 v11 = *(_WORD *)(v9 + *a1);
      *a1 = v10;
      long long v13 = *(_WORD **)(a2 + 8);
      unint64_t v12 = *(void *)(a2 + 16);
      if ((unint64_t)v13 >= v12)
      {
        long long v15 = *(_WORD **)a2;
        uint64_t v16 = (uint64_t)v13 - *(void *)a2;
        if (v16 <= -3) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v16 >> 1;
        unint64_t v18 = v12 - (void)v15;
        if (v18 <= (v16 >> 1) + 1) {
          unint64_t v19 = v17 + 1;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v18 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v20 = v19;
        }
        if (v20)
        {
          long long v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(a2 + 16, v20);
          long long v15 = *(_WORD **)a2;
          long long v13 = *(_WORD **)(a2 + 8);
        }
        else
        {
          long long v21 = 0;
        }
        long long v22 = &v21[2 * v17];
        *(_WORD *)long long v22 = v11;
        long long v14 = v22 + 2;
        while (v13 != v15)
        {
          __int16 v23 = *--v13;
          *((_WORD *)v22 - 1) = v23;
          v22 -= 2;
        }
        *(void *)a2 = v22;
        *(void *)(a2 + 8) = v14;
        *(void *)(a2 + 16) = &v21[2 * v20];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *long long v13 = v11;
        long long v14 = v13 + 1;
      }
      *(void *)(a2 + 8) = v14;
      if (++v8 == v7) {
        return 0;
      }
    }
    return 3;
  }
  return 0;
}

void std::vector<ZinMirUnitBasicBlock::EdgeInfo>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    __int16 v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void ZinSerial::Deserializer::Deserialize()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_1_0(&dword_210C72000, &_os_log_internal, v0, "Failed to deserialize %s in %s:%u", v1, v2, v3, v4, v5);
}

uint64_t ZinIrFlattenInfo::ZinIrFlattenInfo(uint64_t a1, int a2)
{
  uint64_t result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 10);
  *(void *)uint64_t result = &unk_26C349870;
  *(_DWORD *)(result + 12) = a2;
  return result;
}

void *ZinFlattenLayer::ZinFlattenLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  unint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  long long v13 = v6;
  uint64_t v14 = v5;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v11 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v14, &v12, a4, &v11);
  unint64_t v7 = v11;
  __int16 v11 = 0;
  if (v7)
  {
    ZinIrKernel::~ZinIrKernel(v7);
    MEMORY[0x21667D3C0](v8, 0x1032C40C25AA5B7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *a1 = &unk_26C3483A0;
  return a1;
}

void sub_2112151EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinLayerNormLayer::ZinLayerNormLayer(&a12);
  _Unwind_Resume(a1);
}

void ZinFlattenLayer::LowerEngine(uint64_t a1)
{
  v20[6] = *MEMORY[0x263EF8340];
  Hal = ZinIrTarget::GetHal(*(uint64_t **)(a1 + 16), *(ZinIrTarget **)(*(void *)(a1 + 16) + 160));
  if (*(unsigned char *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal) + 1881))
  {
    uint64_t v3 = ZinIrTarget::GetHal(*(uint64_t **)(a1 + 16), *(ZinIrTarget **)(*(void *)(a1 + 16) + 160));
    if (*(unsigned char *)((*(uint64_t (**)(uint64_t *))(*v3 + 16))(v3) + 1880))
    {
      uint64_t v4 = *(void **)(a1 + 88);
      if (*(char *)(a1 + 47) >= 0) {
        size_t v5 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        size_t v5 = *(void *)(a1 + 32);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v5 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v6 = &v19;
      }
      else {
        unint64_t v6 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if (v5)
      {
        if (*(char *)(a1 + 47) >= 0) {
          unint64_t v7 = (const void *)(a1 + 24);
        }
        else {
          unint64_t v7 = *(const void **)(a1 + 24);
        }
        memmove(v6, v7, v5);
      }
      *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 95;
      uint64_t v8 = std::string::append(&v19, "reshaped", 8uLL);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      std::string::size_type v17 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::vector<int> __p = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      __n128 v10 = ZinObjectNameFactory::ZinObjectNameFactory(v20, __p);
      if (SHIBYTE(v17) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = (*(uint64_t (**)(void, void, void, __n128))(*(void *)*v4 + 32))(*v4, 0, 0, v10);
      uint64_t v12 = (void *)*v4;
      memset(&v19, 0, sizeof(v19));
      memset(v18, 0, sizeof(v18));
      ZinFlattenLayerUtils::DecomposeFlatten(*(_DWORD *)(v11 + 88), *(_DWORD *)(*(void *)(a1 + 64) + 12), v11 + 48, (uint64_t *)&v19, (char **)v18);
      if (v19.__r_.__value_.__l.__size_ != v19.__r_.__value_.__r.__words[0])
      {
        if (*(_DWORD *)v19.__r_.__value_.__l.__data_ != 21)
        {
          if (*(_DWORD *)v19.__r_.__value_.__l.__data_ == 22)
          {
            uint64_t v13 = v12[2];
            (*(void (**)(void *, void, void))(*v12 + 32))(v12, 0, 0);
            uint64_t v14 = operator new(0x14uLL);
            v15[1] = v14 + 5;
            v15[2] = v14 + 5;
            v14[4] = 4;
            *(_OWORD *)uint64_t v14 = xmmword_211EFD2E4;
            v15[0] = v14;
            DimensionOrderHint::DimensionOrderHint(__p, v15);
            ZinBuilder::CreateReshape(v13, (uint64_t)v20);
          }
          ZinAssertImpl("Invalid flatten decomposition");
        }
        (*(void (**)(void, void, void))(*(void *)*v4 + 32))(*v4, 0, 0);
        (*(void (**)(void, void, void))(*(void *)*v4 + 32))(*v4, 0, 0);
        ZinBuilder::CreateTranspose();
      }
      ZinAssertImpl("Invalid flatten decomposition");
    }
  }
  ZinAssertImpl("Error: Flatten is not supported on this architecture");
}

void sub_2112157DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  a21 = &a31;
  std::vector<ZinFlattenLayerUtils::FlattenDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  *(void *)(v36 - 144) = &unk_26C34DA98;
  if (*(char *)(v36 - 113) < 0) {
    operator delete(*(void **)(v36 - 136));
  }
  _Unwind_Resume(a1);
}

void ZinFlattenLayer::Clone()
{
}

void sub_211215A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void *ZinFlattenLayer::OpCodeKindToString@<X0>(ZinFlattenLayer *this@<X0>, void *a2@<X8>)
{
  if (*(_DWORD *)(*((void *)this + 8) + 12)) {
    uint64_t v2 = "NHWC";
  }
  else {
    uint64_t v2 = "NCHW";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t ZinFlattenLayer::DebugDetailPrint@<X0>(ZinFlattenLayer *this@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void **__return_ptr, ZinFlattenLayer *))(*(void *)this + 184))(__p, this);
  if ((v9 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = v9;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)v4, v5);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a2);
  v10[0] = *MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v11 = v6;
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v14);
}

void sub_211215CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

BOOL ZinFlattenLayer::ValidateFlattenTensorDims(ZinFlattenLayer *this, const ZinTensorDimensions *a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(ZinFlattenLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  size_t v4 = *((void *)a2 + 2) * *((void *)a2 + 1) * *((void *)a2 + 3);
  size_t v6 = *(void *)a2;
  size_t v7 = v4;
  int64x2_t v8 = vdupq_n_s64(1uLL);
  size_t v9 = *((void *)a2 + 4);
  BOOL result = ZinTensorPosition::operator==(v3 + 6, &v6);
  if (!result) {
    ZinAssertImpl("Error: incorrect flatten output dimensions N%zdD%zdC%zdH%zdW%zd. With input dim N%zdD%zdC%zdH%zdW%zd, output dim N%zdD%zdC%zdH%zdW%zd is expected", v3[6], v3[10], v3[7], v3[8], v3[9], *(void *)a2, *((void *)a2 + 4), *((void *)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 3), v6, v9, v7, v8.u64[0], v8.u64[1]);
  }
  return result;
}

BOOL ZinFlattenLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  if (a2[1] - *a2 != 120) {
    ZinAssertImpl("Flatten layer can only have one bottom");
  }
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  if (*(void *)(*a2 + 40) != 1) {
    ZinAssertImpl("Error: depth = %zd > 1 is supported for flatten layer", *(void *)(*a2 + 40));
  }
  uint64_t v5 = (const ZinTensorDimensions *)(*a2 + 8);

  return ZinFlattenLayer::ValidateFlattenTensorDims(a1, v5);
}

uint64_t details::ZinGetProgrammedKernelDimension(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a2 != 1)
  {
    if (a1 == 1 && a2 == 2)
    {
      uint64_t v4 = a3 + 2;
      if (a3 >= -1) {
        uint64_t v4 = a3 + 1;
      }
      uint64_t v5 = v4 >> 1;
      if (a3 >= 0) {
        uint64_t v6 = a3;
      }
      else {
        uint64_t v6 = a3 + 1;
      }
      uint64_t v7 = v6 >> 1;
      if ((a4 | a3)) {
        return v5;
      }
      else {
        return v7 + 1;
      }
    }
    else if ((a3 & 1) == 0 && a1 == 2 && a2 == 2)
    {
      ++a3;
    }
  }
  return a3;
}

uint64_t details::ZinGetProgrammedPadDimension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 0) {
    uint64_t v3 = a3;
  }
  else {
    uint64_t v3 = a3 + 1;
  }
  uint64_t v4 = v3 >> 1;
  if (a2 != 2) {
    uint64_t v4 = a3;
  }
  if (a1 != 1) {
    uint64_t v4 = a3;
  }
  if (a2 == 1) {
    return a3;
  }
  else {
    return v4;
  }
}

unint64_t details::ZinGetProgrammedOutputTensorDimension(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    if (a2 == 1 && a3 == 2)
    {
      return (result + 1) >> 1;
    }
    else
    {
      unint64_t v3 = (result + 1) >> 1;
      if (a3 != 2) {
        unint64_t v3 = result;
      }
      if (a2 == 2) {
        return v3;
      }
    }
  }
  return result;
}

uint64_t ZinIrOpLayer::ShuffleChannels(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 136);
  unint64_t v3 = *(const void ***)(a1 + 136);
  if (!v3) {
    return 3;
  }
  if (*((char *)v3 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v5 = (size_t)v3[1];
  }
  uint64_t v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 9);
  if (v15 < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  if (v5)
  {
    if (*((char *)v3 + 23) >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = *v3;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_shuffled");
  ZinIrKernel::ShuffleChannels(*v2, a2, &v13);
  int64x2_t v8 = v13;
  if (v13)
  {
    char v13 = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)v2, v8);
    size_t v9 = v13;
    char v13 = 0;
    if (v9)
    {
      ZinIrKernel::~ZinIrKernel(v9);
      MEMORY[0x21667D3C0](v10);
    }
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 3;
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_21121603C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ZinIrOpLayer::DebugPrintSourceLayers@<X0>(ZinIrOpLayer *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 19);
  if (v3
    && (*(_DWORD *)(*((void *)this + 8) + 8) & 0xFFFFFFFC) != 0x1C
    && *((void *)Layer2TDMapper::LayerTracker::GetSourceLayerIds((Layer2TDMapper::LayerTracker *)(v3 + 152), this) + 3))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v7, a2);
    v6[0] = *MEMORY[0x263F8C2B8];
    uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v6 + *(void *)(v6[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    _OWORD v6[2] = v4;
    v7[0] = MEMORY[0x263F8C318] + 16;
    if (v8 < 0) {
      operator delete((void *)v7[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (void *)MEMORY[0x21667D2B0](&v9);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "{ None }");
  }
}

void sub_211216214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ZinIrOpLayer::DebugPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_211216384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t ZinIrOpLayer::GetIndexOfMatchedInputTensor(ZinIrOpLayer *this, const ZinIrTensor *a2)
{
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)this + 12) == v2) {
    return -1;
  }
  unint64_t v5 = 0;
  while ((const ZinIrTensor *)(*(uint64_t (**)(void, void, void))(**(void **)(v2 + 8 * v5) + 32))(*(void *)(v2 + 8 * v5), 0, 0) != a2)
  {
    ++v5;
    uint64_t v2 = *((void *)this + 11);
    if (v5 >= (*((void *)this + 12) - v2) >> 3) {
      return -1;
    }
  }
  return v5;
}

uint64_t ZinIrOpLayer::EnforceDimensionsLimits(ZinIrOpLayer *this)
{
  unsigned int v1 = *(_DWORD *)(*((void *)this + 8) + 8);
  uint64_t result = 1;
  if (v1 > 0x25 || ((1 << v1) & 0x3800020241) == 0)
  {
    unsigned int v4 = v1 - 81;
    BOOL v5 = v4 > 0x17;
    int v6 = (1 << v4) & 0x800881;
    if (v5 || v6 == 0) {
      return 0;
    }
  }
  return result;
}

BOOL ZinIrOpLayer::IsNELayer(ZinIrOpLayer *this)
{
  return (*(_DWORD *)(*((void *)this + 8) + 8) - 85) < 9;
}

BOOL ZinIrOpLayer::IsPELayer(ZinIrOpLayer *this)
{
  return (*(_DWORD *)(*((void *)this + 8) + 8) - 81) < 4;
}

BOOL ZinIrOpLayer::IsTransposeEngineLayer(ZinIrOpLayer *this)
{
  return *(_DWORD *)(*((void *)this + 8) + 8) == 94;
}

uint64_t ZinIrOpLayer::IsEngineLayer(ZinIrOpLayer *this)
{
  if ((*(_DWORD *)(*((void *)this + 8) + 8) - 81) >= 0xE) {
    return (*(uint64_t (**)(void))(*(void *)this + 112))();
  }
  else {
    return 1;
  }
}

uint64_t ZinIrOpLayer::IsValidForCompression(ZinIrOpLayer *this)
{
  return 0;
}

BOOL ZinIrOpLayer::ReplaceTensorKernel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  char v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v4 = ZinIrKernel::ReplaceTensorKernel(v2, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

void sub_211216578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpLayer::IsAllInputsResident(ZinIrOpLayer *this)
{
  unsigned int v1 = (uint64_t *)*((void *)this + 11);
  uint64_t v2 = (uint64_t *)*((void *)this + 12);
  uint64_t v3 = 1;
  while (v1 != v2)
  {
    uint64_t v4 = *v1++;
    BOOL v5 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v4 + 32))(v4, 0, 0);
    uint64_t v3 = v3 & ZinIrTensor::IsResident(v5);
  }
  return v3;
}

void ZinIrOpLayer::CreateSpatialSplitCopyName(ZinIrOpLayer *this@<X0>, const TiledLayerTensorRegions *a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)this + 47) >= 0) {
    size_t v6 = *((unsigned __int8 *)this + 47);
  }
  else {
    size_t v6 = *((void *)this + 4);
  }
  char v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    uint64_t v10 = (const void *)*((void *)this + 3);
    uint64_t v9 = (char *)this + 24;
    uint64_t v8 = v10;
    if (v9[23] >= 0) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v8;
    }
    memmove(v7, v11, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  TiledLayerTensorRegions::Id::ToStringForIr((const TiledLayerTensorRegions *)((char *)a2 + 152), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
  *a3 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_21121670C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrOpLayer::CreateSpatialSplitCopyTensor(ZinIrOpLayer *this, const TiledLayerTensorRegions *a2)
{
  uint64_t v4 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  uint64_t v5 = v4;
  if (*(char *)(v4 + 47) >= 0) {
    size_t v6 = *(unsigned __int8 *)(v4 + 47);
  }
  else {
    size_t v6 = *(void *)(v4 + 32);
  }
  char v7 = &v16;
  std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    uint64_t v10 = *(char **)(v5 + 24);
    uint64_t v9 = (char *)(v5 + 24);
    uint64_t v8 = v10;
    if (v9[23] >= 0) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v8;
    }
    memmove(v7, v11, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  TiledLayerTensorRegions::Id::ToStringForIr((const TiledLayerTensorRegions *)((char *)a2 + 152), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  ZinIrContext::GetAlternativeNameForTensor(*((void *)this + 2), (uint64_t)&v23, (uint64_t)&v16);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::string v23 = v16;
  (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  LODWORD(v16.__r_.__value_.__l.__data_) = 0;
  uint64_t v17 = 0;
  *(_OWORD *)&v16.__r_.__value_.__r.__words[1] = 0uLL;
  int v18 = 0;
  ZinIrTensor::CreateTensor();
}

void sub_2112169C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,std::__shared_weak_count *a23,int a24,__int16 a25,char a26,char a27)
{
  long long v29 = a10;
  a10 = 0;
  if (v29) {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&a10, v29);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrOpLayer::UpdateGraph(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  memset(v33, 0, sizeof(v33));
  int v34 = 1065353216;
  v22[0] = a1;
  *(void *)&v29[0] = v22;
  char v7 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a2 + 8, (unint64_t **)v29);
  if (v7) {
    uint64_t v8 = (void ***)(v7 + 3);
  }
  else {
    uint64_t v8 = (void ***)(a2 + 13);
  }
  (*(uint64_t (**)(void, void, void))(*(void *)***v8 + 32))(***v8, 0, 0);
  ZinIrUnitStatus::ZinIrUnitStatus((ZinIrUnitStatus *)v32);
  long long v31 = 0;
  uint64_t v9 = *(uint64_t **)a4;
  if (*(void *)(a4 + 8) != *(void *)a4)
  {
    v29[0] = vdupq_n_s64(1uLL);
    v29[1] = v29[0];
    uint64_t v30 = 1;
    uint64_t v10 = *v9;
    *uint64_t v9 = 0;
    (*(void (**)(uint64_t, uint64_t, _OWORD *, unsigned char *))(*(void *)v10 + 48))(v10, a3, v29, v32);
    (*(void (**)(uint64_t))(*(void *)v10 + 112))(v10);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 112))(v10);
    uint64_t v12 = v11;
    if (*(char *)(v11 + 31) >= 0) {
      size_t v13 = *(unsigned __int8 *)(v11 + 31);
    }
    else {
      size_t v13 = *(void *)(v11 + 16);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v13 + 11);
    if (v28 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v13)
    {
      if (*(char *)(v12 + 31) >= 0) {
        long long v15 = (const void *)(v12 + 8);
      }
      else {
        long long v15 = *(const void **)(v12 + 8);
      }
      memmove(p_p, v15, v13);
    }
    strcpy((char *)p_p + v13, "_out_tensor");
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    LODWORD(v22[0]) = 0;
    memset(&v22[1], 0, 24);
    int v23 = 0;
    ZinIrTensor::CreateTensor();
  }
  memset(v20, 0, sizeof(v20));
  int v21 = 1065353216;
  int v16 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, a1, 0, v20);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v20);
  if ((v16 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0) & 1) == 0) {
    ZinAssertImpl("ANE internal failure: graph manipulation error");
  }
  uint64_t v17 = v31;
  long long v31 = 0;
  if (v17)
  {
    ZinIrKernel::~ZinIrKernel(v17);
    MEMORY[0x21667D3C0]();
  }
  ZinIrUnitStatus::~ZinIrUnitStatus((ZinIrUnitStatus *)v32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v33);
  return 0;
}

void sub_211216FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v36 - 208), 0);
  ZinIrUnitStatus::~ZinIrUnitStatus((ZinIrUnitStatus *)(v36 - 200));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v36 - 176);
  _Unwind_Resume(a1);
}

uint64_t ZinIrOpLayer::ComputeOutputDimensions()
{
  return 3;
}

uint64_t ZinIrOpLayer::GetOutputPort()
{
  return 0;
}

BOOL ZinIrOpLayer::HasOutputPort(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ZinIrOpLayer::Hash(ZinIrOpLayer *this, int *a2)
{
  return 0;
}

BOOL ZinIrOpLayer::NeedsTypeCastToRead(uint64_t a1, int a2)
{
  return !IsPrimaryFormat(a2);
}

BOOL ZinIrOpLayer::NeedsTypeCastToWrite(uint64_t a1, int a2)
{
  return !IsPrimaryFormat(a2);
}

uint64_t ZinIrOpLayer::IsRedundant(ZinIrOpLayer *this)
{
  return 0;
}

uint64_t ZinIrOpLayer::CanMergeWithFollowingGOC(ZinIrOpLayer *this, const ZinGOCLayer *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2)
  {
    *(_OWORD *)uint64_t v19 = xmmword_211EFD320;
    *(_OWORD *)&v19[3] = *(long long *)((char *)&xmmword_211EFD320 + 12);
    std::set<ZinIrOpLayerOpCodeType>::set[abi:ne180100]((uint64_t)v17, v19, 7);
    uint64_t v4 = v18[0];
    if (!v18[0]) {
      goto LABEL_21;
    }
    int v5 = *(_DWORD *)(*((void *)this + 8) + 8);
    size_t v6 = v18;
    do
    {
      char v7 = v4;
      uint64_t v8 = v6;
      int v9 = *((_DWORD *)v4 + 7);
      uint64_t v10 = v4 + 1;
      if (v9 >= v5)
      {
        uint64_t v10 = v7;
        size_t v6 = (void **)v7;
      }
      uint64_t v4 = (void *)*v10;
    }
    while (v4);
    if (v6 == v18) {
      goto LABEL_21;
    }
    uint64_t v11 = v9 >= v5 ? v7 : v8;
    if (v5 < *((_DWORD *)v11 + 7)) {
      goto LABEL_21;
    }
    uint64_t v12 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 200))(v2, v12)) {
      goto LABEL_21;
    }
    size_t v13 = *(ZinIrKernel **)(v2 + 136);
    if (!v13)
    {
      int v16 = (const char *)(v2 + 24);
      if (*(char *)(v2 + 47) < 0) {
        int v16 = *(const char **)v16;
      }
      ZinAssertImpl("ERROR: following goc %s has no kernel", v16);
    }
    BOOL v14 = *((void *)v13 + 73)
       || *((void *)v13 + 77)
       || ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v2 + 136))
       || ZinIrKernel::HasPerCoutBias(v13);
    if (((*(unsigned int (**)(ZinIrOpLayer *))(*(void *)this + 120))(this) & v14 & 1) != 0
      || *((void *)this + 17) && ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 120))(v2) & 1) != 0)
    {
LABEL_21:
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v2 = 1;
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v17, v18[0]);
  }
  return v2;
}

void sub_21121739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void ZinIrRingBufferReaderInfo::ZinIrRingBufferReaderInfo(ZinIrRingBufferReaderInfo *this, const ZinIrRingBufferReaderUnitInfo *a2)
{
  uint64_t v4 = (void *)ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)this, 76);
  *uint64_t v4 = &unk_26C351580;
  ZinIrRingBufferUnitInfo::ZinIrRingBufferUnitInfo((ZinIrRingBufferUnitInfo *)(v4 + 2), a2);
  *((void *)this + 2) = &unk_26C352E48;
  std::unordered_map<ZinIrDimension,long>::unordered_map((uint64_t)this + 176, (uint64_t)a2 + 160);
}

void sub_21121744C(_Unwind_Exception *a1)
{
  *((void *)v1 + 2) = &unk_26C3501F8;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v1 + 136);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)v1 + 96);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

void *ZinRingBufferReaderLayer::ZinRingBufferReaderLayer(void *a1, uint64_t *a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  size_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  size_t v13 = v6;
  uint64_t v14 = v5;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v14, &v12, a4, &v11);
  char v7 = v11;
  uint64_t v11 = 0;
  if (v7)
  {
    ZinIrKernel::~ZinIrKernel(v7);
    MEMORY[0x21667D3C0](v8, 0x1032C40C25AA5B7);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *a1 = &unk_26C351008;
  return a1;
}

void sub_211217584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinLayerNormLayer::ZinLayerNormLayer(&a12);
  _Unwind_Resume(a1);
}

uint64_t ZinRingBufferReaderLayer::LowerEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v5 = **(void **)(a1 + 88);
  int v6 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 32))(v5, 0, 0) + 88);
  if (v6 != *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0) + 88)) {
    ZinAssertImpl("Input state and output state format mismatched");
  }
  char v7 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 32))(v5, 0, 0);
  uint64_t RootTensor = ZinIrTensor::GetRootTensor(v7);
  if ((*(_DWORD *)(*(void *)(*((void *)RootTensor + 12) + 64) + 8) | 2) != 0x1E
    && ZinIrTensor::SetAllocationHint(RootTensor, 2, 1))
  {
    ZinAssertImpl("Error: failed to set the allocation hint to DRAM for BSS tensor input");
  }
  uint64_t v9 = *(void **)(a1 + 112);
  uint64_t v10 = *(void **)(a1 + 120);
  if (v9 != v10)
  {
    char v11 = 0;
    int64x2_t v26 = vdupq_n_s64(1uLL);
    do
    {
      int v12 = *(_DWORD *)(*(void *)(*v9 + 64) + 8);
      if (v12 == 7 || v12 == 31)
      {
        char v11 = 1;
      }
      else if (v12 == 33)
      {
        uint64_t v14 = (*(uint64_t (**)(void, void, void))(*(void *)*v9 + 32))(*v9, 0, 0);
        v31[0] = v26;
        v31[1] = v26;
        uint64_t v32 = 1;
        long long v15 = *(ZinTensorDimensions **)(v14 + 104);
        uint64_t Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v14);
        v11 |= ZinIrTensor::ZinIrTensorValidateCustomStrides(v15, (ZinTensorDimensions *)(v14 + 48), Interleave, v17, *(_DWORD *)(v14 + 88), (uint64_t)v31, 1, *(void *)(**(void **)a3 + 528)) != 0;
      }
      ++v9;
    }
    while (v9 != v10);
    if (v11)
    {
      if (*(char *)(a1 + 47) >= 0) {
        size_t v18 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        size_t v18 = *(void *)(a1 + 32);
      }
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v18 + 36);
      if (v28 < 0) {
        p_p = __p;
      }
      if (v18)
      {
        if (*(char *)(a1 + 47) >= 0) {
          uint64_t v20 = (const void *)(a1 + 24);
        }
        else {
          uint64_t v20 = *(const void **)(a1 + 24);
        }
        memmove(p_p, v20, v18);
      }
      strcpy((char *)p_p + v18, "_ringbufferreader_output_concat_copy");
      __n128 v21 = ZinObjectNameFactory::ZinObjectNameFactory(v31, &__p);
      if (v28 < 0) {
        operator delete(__p);
      }
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v23 = *(unsigned int *)((*(uint64_t (**)(uint64_t, void, void, __n128))(*(void *)a1 + 32))(a1, 0, 0, v21)+ 88);
      uint64_t v24 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v24, &v30);
      v29[0] = 0;
      v29[168] = 0;
      ZinBuilder::CreateNEBypass(v22, (uint64_t)v31, a1, v23, &v30, 0, (uint64_t)v29, 1.0);
    }
  }
  return 0;
}

void sub_211217A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  *(void *)(v20 - 144) = &unk_26C34DA98;
  if (*(char *)(v20 - 113) < 0) {
    operator delete(*(void **)(v20 - 136));
  }
  _Unwind_Resume(exception_object);
}

void ZinRingBufferReaderLayer::Clone()
{
}

void sub_211217BD4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  ZinDropoutLayer::Clone(&a12, a1, a2, (uint64_t)&a13);
  char v17 = a13;
  MEMORY[0x21667D3C0](v13, 0x10B3C4024B96488);
  _Unwind_Resume(v17);
}

void std::make_unique[abi:ne180100]<ZinIrRingBufferReaderInfo,ZinIrRingBufferReaderInfo&>()
{
}

void sub_211217CD0(_Unwind_Exception *a1)
{
  *((void *)v1 + 2) = &unk_26C3501F8;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v1 + 136);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)v1 + 96);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  MEMORY[0x21667D3C0](v1, 0x10B3C409D57A31ALL);
  _Unwind_Resume(a1);
}

void *ZinRingBufferReaderLayer::OpCodeKindToString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RINGBUFFER_READER");
}

void ZinRingBufferReaderLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, uint64_t a3)
{
  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, (unsigned __int8 *)a3);
  if (a2[1] - *a2 != 120) {
    ZinAssertImpl("RingBufferReader layer should only have one input");
  }
  uint64_t v6 = *((void *)a1 + 8);
  v30[0] = vdupq_n_s64(1uLL);
  v30[1] = v30[0];
  uint64_t v31 = 1;
  GetAllZinIrDimensions(&v28);
  char v7 = (int *)v28;
  uint64_t v8 = (int *)v29;
  if (v28 != v29)
  {
    do
    {
      int v27 = 0;
      int v27 = *v7;
      DimensionToString(v27, __p);
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((void *)(v6 + 176), &v27))
      {
        uint64_t v9 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((void *)(v6 + 176), &v27);
        if (!v9) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if (v9[3] <= 0)
        {
          char v17 = std::unordered_map<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>::at((void *)(v6 + 176), &v27);
          size_t v18 = __p;
          if (v26 < 0) {
            size_t v18 = (void **)__p[0];
          }
          ZinAssertImpl("Error: output size (%zd) at axis %s should be positive", *v17, (const char *)v18);
        }
        int v10 = v27;
        char v11 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((void *)(v6 + 176), &v27);
        if (!v11) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if (SetValueAtDimension<ZinTensorDimensions>(v30, v10, v11[3]))
        {
          uint64_t v19 = __p;
          if (v26 < 0) {
            uint64_t v19 = (void **)__p[0];
          }
          ZinAssertImpl("Invalid axis %s.", (const char *)v19);
        }
      }
      else
      {
        uint64_t v12 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a1 + 32))(a1, 0, 0);
        uint64_t Dimension = ZinTensorDimensions::GetDimension((uint64_t *)(v12 + 48), v27);
        uint64_t v14 = ZinTensorDimensions::GetDimension((uint64_t *)(*a2 + 8), v27);
        if (Dimension != v14)
        {
          __n128 v21 = __p;
          if (v26 < 0) {
            __n128 v21 = (void **)__p[0];
          }
          ZinAssertImpl("Error: output size (%zd) at axis %s should be equal to the state dimension (%zd)", Dimension, (const char *)v21, v14);
        }
        if (SetValueAtDimension<ZinTensorDimensions>(v30, v27, Dimension))
        {
          uint64_t v22 = __p;
          if (v26 < 0) {
            uint64_t v22 = (void **)__p[0];
          }
          ZinAssertImpl("Invalid axis %s.", (const char *)v22);
        }
      }
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((void *)(v6 + 136), &v27)&& v27 == 4&& !*(unsigned char *)(a3 + 1327))
      {
        uint64_t v24 = 0;
        if (ZinTensorFormatGetSizeInBytes(*(_DWORD *)*a2, &v24)) {
          ZinAssertImpl("Error: Could not retrieve state tensor format size.");
        }
        if (*(unsigned char *)(*a2 + 64)) {
          uint64_t v15 = *(void *)(*a2 + 56);
        }
        else {
          uint64_t v15 = 1;
        }
        int v23 = 4;
        int v16 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((void *)(v6 + 136), &v23);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if ((unint64_t)(v16[3] * v15 * v24) % *(void *)(a3 + 528))
        {
          int v23 = 4;
          uint64_t v20 = std::unordered_map<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>::at((void *)(v6 + 136), &v23);
          ZinAssertImpl("Error: Static width offset (%ld) must be aligned along %zu bytes", *v20, *(void *)(a3 + 528));
        }
      }
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      ++v7;
    }
    while (v7 != v8);
    char v7 = (int *)v28;
  }
  if (v7)
  {
    long long v29 = (char *)v7;
    operator delete(v7);
  }
  ZinLayerValidationUtils::ValidateRingBufferUnitInfo(v6 + 16, *a2, a3, (uint64_t *)v30);
}

void sub_2112180BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinRingBufferReaderLayer::GetStateInputLayer(ZinRingBufferReaderLayer *this)
{
  return **((void **)this + 11);
}

uint64_t ZinRingBufferReaderLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_21121828C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ZinIrRingBufferReaderInfo::~ZinIrRingBufferReaderInfo(ZinIrRingBufferReaderInfo *this)
{
  *(void *)this = &unk_26C351580;
  uint64_t v2 = (void **)((char *)this + 16);
  *((void *)this + 2) = &unk_26C352E48;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 176);
  *((void *)this + 2) = &unk_26C3501F8;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)this + 96);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);

  ZinIrHalH13g::~ZinIrHalH13g(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_26C351580;
  uint64_t v2 = (void **)((char *)this + 16);
  *((void *)this + 2) = &unk_26C352E48;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 176);
  *((void *)this + 2) = &unk_26C3501F8;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)this + 96);
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  ZinIrHalH13g::~ZinIrHalH13g(this);

  JUMPOUT(0x21667D3C0);
}

void *ZinKernelBufferControl::ZinKernelBufferControl(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t *result = a3;
  result[1] = a2;
  return result;
}

uint64_t ZinKernelBufferControl::IdentifySpatiallySplitSubgraph(uint64_t a1, uint64_t *a2)
{
  long long v55 = 0u;
  long long v56 = 0u;
  int v57 = 1065353216;
  uint64_t v2 = *(ZinIrOpLayer ****)(a1 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 != v4)
  {
    do
    {
      if (ZinIrOpLayer::IsANELayer(*v3))
      {
        uint64_t v5 = *v3;
        if (*(unsigned char *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)*v3 + 32))(*v3, 0, 0)+ 144))
        {
          unint64_t v46 = 0;
          uint64_t v6 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v5 + 32))(v5, 0, 0);
          if (!*(unsigned char *)(v6 + 144)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          unint64_t v46 = *(void *)(v6 + 136);
          if ((v46 & 0x8000000000000000) != 0) {
            ZinAssertImpl("Subgraph id should've been updated\n");
          }
          v58[0] = &v46;
          char v7 = std::__hash_table<std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t)&v55, &v46, (uint64_t)&std::piecewise_construct, (uint64_t **)v58);
          uint64_t v8 = (ZinIrOpLayer **)v7[4];
          unint64_t v9 = v7[5];
          if ((unint64_t)v8 >= v9)
          {
            uint64_t v11 = v7[3];
            uint64_t v12 = ((uint64_t)v8 - v11) >> 3;
            if ((unint64_t)(v12 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v13 = v9 - v11;
            uint64_t v14 = v13 >> 2;
            if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
              uint64_t v14 = v12 + 1;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v14;
            }
            if (v15) {
              int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v7 + 5), v15);
            }
            else {
              int v16 = 0;
            }
            char v17 = (ZinIrOpLayer **)&v16[8 * v12];
            uint64_t *v17 = v5;
            int v10 = v17 + 1;
            uint64_t v19 = (char *)v7[3];
            size_t v18 = (char *)v7[4];
            if (v18 != v19)
            {
              do
              {
                uint64_t v20 = (ZinIrOpLayer *)*((void *)v18 - 1);
                v18 -= 8;
                *--char v17 = v20;
              }
              while (v18 != v19);
              size_t v18 = (char *)v7[3];
            }
            v7[3] = v17;
            v7[4] = v10;
            void v7[5] = &v16[8 * v15];
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            *uint64_t v8 = v5;
            int v10 = v8 + 1;
          }
          v7[4] = v10;
        }
      }
      ++v3;
    }
    while (v3 != v4);
    for (uint64_t i = (void *)v56; i; uint64_t i = (void *)*i)
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      unint64_t v54 = 0;
      uint64_t v22 = (ZinIrOpLayer **)i[3];
      int v23 = (ZinIrOpLayer **)i[4];
      if (v22 != v23)
      {
        do
        {
          if (!*(unsigned char *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)*v22 + 32))(*v22, 0, 0)+ 144))ZinAssertImpl("Spatial Split Info must exist\n"); {
          uint64_t v24 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)*v22 + 32))(*v22, 0, 0);
          }
          if (!*(unsigned char *)(v24 + 144)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          int v25 = *(unsigned __int16 *)(v24 + 128);
          char v26 = v52;
          if (v52 != v53)
          {
            while (*(unsigned __int16 *)v26 != v25)
            {
              v26 += 4;
              if (v26 == v53) {
                goto LABEL_34;
              }
            }
          }
          if (v26 == v53)
          {
LABEL_34:
            v51[0] = 0;
            v51[1] = 0;
            unint64_t v50 = (uint64_t *)v51;
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(&v50, v22, (uint64_t *)v22);
            LOWORD(v46) = v25;
            std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>::set[abi:ne180100]((uint64_t *)&v47, (ZinIrOpLayer ***)&v50);
            int v27 = v53;
            if ((unint64_t)v53 >= v54)
            {
              uint64_t v31 = ((char *)v53 - (char *)v52) >> 5;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 59) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v33 = v54 - (void)v52;
              if ((uint64_t)(v54 - (void)v52) >> 4 > v32) {
                unint64_t v32 = v33 >> 4;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              v58[4] = &v54;
              uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>((uint64_t)&v54, v34);
              uint64_t v36 = &v35[32 * v31];
              v58[0] = v35;
              v58[1] = v36;
              v58[3] = &v35[32 * v37];
              *(_WORD *)uint64_t v36 = v46;
              *((void *)v36 + 1) = v47;
              uint64_t v38 = v48;
              *((void *)v36 + 2) = v48;
              uint64_t v39 = v36 + 16;
              uint64_t v40 = v49;
              *((void *)v36 + 3) = v49;
              if (v40)
              {
                v38[2] = v39;
                uint64_t v47 = (uint64_t *)&v48;
                uint64_t v48 = 0;
                uint64_t v49 = 0;
              }
              else
              {
                *((void *)v36 + 1) = v39;
              }
              void v58[2] = v36 + 32;
              std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__swap_out_circular_buffer((uint64_t *)&v52, v58);
              uint64_t v41 = v53;
              std::__split_buffer<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::~__split_buffer(v58);
            }
            else
            {
              *(_WORD *)uint64_t v53 = v46;
              v27[1] = v47;
              char v28 = v48;
              v27[2] = v48;
              long long v29 = (uint64_t *)(v27 + 2);
              uint64_t v30 = v49;
              v27[3] = v49;
              if (v30)
              {
                v28[2] = v29;
                uint64_t v47 = (uint64_t *)&v48;
                uint64_t v48 = 0;
                uint64_t v49 = 0;
              }
              else
              {
                v27[1] = v29;
              }
              uint64_t v41 = v27 + 4;
            }
            uint64_t v53 = v41;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v47, v48);
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v50, v51[0]);
          }
          else
          {
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>(v26 + 1, v22, (uint64_t *)v22);
          }
          ++v22;
        }
        while (v22 != v23);
        if (v53 != v52)
        {
          unint64_t v42 = a2[1];
          if (v42 >= a2[2])
          {
            uint64_t v43 = std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__push_back_slow_path<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>> const&>(a2, (uint64_t *)&v52);
          }
          else
          {
            std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>> const&>((uint64_t)a2, (uint64_t *)&v52);
            uint64_t v43 = v42 + 24;
          }
          a2[1] = v43;
        }
      }
      v58[0] = &v52;
      std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
    }
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)&v55);
  return 0;
}

void sub_2112188E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy((va_list)v4, va1);
  std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t ZinKernelBufferControl::LegalizeKBufPressure(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4 != (void *)(v2 + 16))
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(v4[4] + 136);
        if (v6)
        {
          uint64_t v7 = *(void *)(v6 + 800);
          if (v7)
          {
            uint64_t v8 = *(void *)(v7 + 40);
            if (v8) {
              v5 += *(void *)(*(void *)(v8 + 32) + 40);
            }
          }
        }
        uint64_t v9 = (void *)v4[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v4[2];
            BOOL v11 = *v10 == (void)v4;
            uint64_t v4 = v10;
          }
          while (!v11);
        }
        uint64_t v4 = v10;
      }
      while (v10 != (void *)(v2 + 16));
      if (v5 > *(void *)(*(void *)a1 + 480)) {
        break;
      }
    }
    v2 += 32;
    if (v2 == v3) {
      return 1;
    }
  }
  return 0;
}

uint64_t ZinKernelBufferControl::IdentifyKernelSharingCandidates(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      uint64_t v6 = *(void **)(v3 + 8);
      if (v6 != (void *)(v3 + 16))
      {
        do
        {
          uint64_t v14 = (ZinIrOpLayer *)v6[4];
          uint64_t v7 = (ZinIrKernel *)*((void *)v14 + 17);
          if (v7)
          {
            ZinIrKernel::GetFinalHash(v7, &__p);
            p_p = &__p;
            uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
            std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer * const&>((uint64_t **)v8 + 5, &v14, (uint64_t *)&v14);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v9 = (void *)v6[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              uint64_t v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (void *)v6[2];
              BOOL v11 = *v10 == (void)v6;
              uint64_t v6 = v10;
            }
            while (!v11);
          }
          uint64_t v6 = v10;
        }
        while (v10 != (void *)(v3 + 16));
      }
      v3 += 32;
    }
    while (v3 != v4);
  }
  return 0;
}

void sub_211218B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinKernelBufferControl::SetKernelBufferControlRegsMirInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 16);
  if (v3[7] >= 2uLL)
  {
    uint64_t v4 = (void *)v3[5];
    *(unsigned char *)(*(void *)(v4[4] + 264) + 1384) = 1;
    unint64_t v5 = (void *)v4[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        unint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)v4[2];
        BOOL v7 = *v6 == (void)v4;
        uint64_t v4 = v6;
      }
      while (!v7);
    }
    uint64_t v8 = v3 + 6;
    if (v6 != v8)
    {
      do
      {
        *(unsigned char *)(*(void *)(v6[4] + 264) + 1386) = 1;
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v6[2];
            BOOL v7 = *v10 == (void)v6;
            uint64_t v6 = v10;
          }
          while (!v7);
        }
        uint64_t v6 = v10;
      }
      while (v10 != v8);
    }
  }
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12 - 32)
  {
    uint64_t v13 = *a2;
    do
    {
      uint64_t v14 = *(void **)(v13 + 8);
      if (v14 != (void *)(v13 + 16))
      {
        do
        {
          *(unsigned char *)(*(void *)(v14[4] + 264) + 1385) = 0;
          uint64_t v15 = (void *)v14[1];
          if (v15)
          {
            do
            {
              int v16 = v15;
              uint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              int v16 = (void *)v14[2];
              BOOL v7 = *v16 == (void)v14;
              uint64_t v14 = v16;
            }
            while (!v7);
          }
          uint64_t v14 = v16;
        }
        while (v16 != (void *)(v13 + 16));
      }
      v13 += 32;
    }
    while (v13 != v12 - 32);
  }
  for (; v11 != v12; v11 += 32)
  {
    char v17 = *(void **)(v11 + 8);
    size_t v18 = (void *)(v11 + 16);
    if (v17 != (void *)(v11 + 16))
    {
      do
      {
        uint64_t v19 = *(void *)(v17[4] + 136);
        if (v19)
        {
          uint64_t v20 = *(void *)(v19 + 800);
          if (v20) {
            uint64_t v21 = *(void *)(v20 + 40);
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (void *)v17[1];
          int v23 = v22;
          uint64_t v24 = v17;
          if (v22)
          {
            do
            {
              int v25 = v23;
              int v23 = (void *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              int v25 = (void *)v24[2];
              BOOL v7 = *v25 == (void)v24;
              uint64_t v24 = v25;
            }
            while (!v7);
          }
          if (v25 != v18)
          {
            while (1)
            {
              uint64_t v26 = v25[4];
              uint64_t v27 = *(void *)(v26 + 136);
              if (v27) {
                break;
              }
              char v28 = (void *)v25[1];
              if (v28)
              {
                do
                {
                  long long v29 = v28;
                  char v28 = (void *)*v28;
                }
                while (v28);
              }
              else
              {
                do
                {
                  long long v29 = (void *)v25[2];
                  BOOL v7 = *v29 == (void)v25;
                  int v25 = v29;
                }
                while (!v7);
              }
              int v25 = v29;
              if (v29 == v18) {
                goto LABEL_48;
              }
            }
            if (v25 != v18)
            {
              uint64_t v30 = **(void **)(*(void *)(*(void *)(v27 + 800) + 40) + 32);
              uint64_t v31 = *(void *)(v21 + 16) + **(void **)(v21 + 32);
              if (v30 != v31)
              {
                int v32 = v30 - v31;
                uint64_t v33 = *(void *)(v26 + 264);
                *(unsigned char *)(v33 + 1386) = 1;
                *(_DWORD *)(v33 + 1388) = v32;
              }
            }
          }
        }
        else
        {
          uint64_t v22 = (void *)v17[1];
        }
LABEL_48:
        if (v22)
        {
          do
          {
            unint64_t v34 = v22;
            uint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            unint64_t v34 = (void *)v17[2];
            BOOL v7 = *v34 == (void)v17;
            char v17 = v34;
          }
          while (!v7);
        }
        char v17 = v34;
      }
      while (v34 != v18);
    }
  }
  return 0;
}

uint64_t ZinKernelBufferControl::Run(ZinKernelBufferControl *this)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  ZinKernelBufferControl::IdentifySpatiallySplitSubgraph((uint64_t)this, (uint64_t *)&v10);
  uint64_t v2 = v10;
  for (uint64_t i = v11; v2 != i; v2 += 3)
  {
    uint64_t v4 = ZinKernelBufferControl::LegalizeKBufPressure((uint64_t)this, v2);
    if (v4)
    {
      long long v7 = 0u;
      long long v8 = 0u;
      int v9 = 1065353216;
      uint64_t v5 = ZinKernelBufferControl::IdentifyKernelSharingCandidates(v4, v2, (uint64_t)&v7);
      if (*((void *)&v8 + 1)) {
        ZinKernelBufferControl::SetKernelBufferControlRegsMirInfo(v5, v2, (uint64_t)&v7);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__hash_table((uint64_t)&v7);
    }
  }
  *(void *)&long long v7 = &v10;
  std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  return 0;
}

void sub_211218E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 2;
    do
    {
      *(_WORD *)(v7 - 32) = *((_WORD *)v8 - 8);
      *(void *)(v7 - 24) = *(v8 - 1);
      uint64_t v9 = *v8;
      *(void *)(v7 - 16) = *v8;
      uint64_t v10 = v7 - 16;
      uint64_t v11 = v8[1];
      *(void *)(v7 - 8) = v11;
      if (v11)
      {
        *(void *)(v9 + 16) = v10;
        *(v8 - 1) = v8;
        *uint64_t v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v10;
      }
      uint64_t v7 = *((void *)&v18 + 1) - 32;
      *((void *)&v18 + 1) -= 32;
      uint64_t v12 = v8 - 2;
      v8 -= 4;
    }
    while (v12 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::reverse_iterator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>,std::reverse_iterator<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>::set[abi:ne180100](uint64_t *a1, ZinIrOpLayer ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::insert[abi:ne180100]<std::__tree_const_iterator<ZinIrOpLayer *,std::__tree_node<ZinIrOpLayer *,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_21121903C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>(v3, *a2, a2[1], (a2[1] - *a2) >> 5);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_2112190A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__push_back_slow_path<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  char v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>(v11, *a2, a2[1], (a2[1] - *a2) >> 5);
  v15 += 24;
  std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__split_buffer(v14);
  return v12;
}

void sub_2112191AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<ControlEdgeInfo>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_211219228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_WORD *)uint64_t v4 = *(_WORD *)v6;
      std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>::set[abi:ne180100]((uint64_t *)(v4 + 8), (ZinIrOpLayer ***)(v6 + 8));
      v6 += 32;
      uint64_t v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2112192E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>,std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = v1 - 32;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 24, *(void **)(v1 - 16));
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>,std::reverse_iterator<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::pair<unsigned short,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::pair<ZinComputeProgramMutableSection *,std::map<unsigned long,ZinComputeProgramMutableSymbol * const>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__hash_table<std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::vector<ZinANELayer *>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::vector<ZinANELayer *>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *long long v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_211219848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_211219AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[6] = 0;
  v8[7] = 0;
  v8[5] = v8 + 6;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_211219B8C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<ZinANELayer *,ScheduleComparator,std::allocator<ZinANELayer *>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

__CFDictionary *ZinCreateConcatUnit(const ZinIrConcatUnitInfo *a1)
{
  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  unint64_t v4 = ZinIrCoordinateToCFString((_DWORD *)a1 + 20);
  CFDictionaryAddValue(Mutable, @"Dimension", v4);
  uint64_t v5 = (const void **)MEMORY[0x263EFFB40];
  if (!*((unsigned char *)a1 + 84)) {
    uint64_t v5 = (const void **)MEMORY[0x263EFFB38];
  }
  CFDictionaryAddValue(Mutable, @"Interleaved", *v5);
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

__CFDictionary *ZinCreateNMSUnit(uint64_t a1)
{
  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  int valuePtr = *(void *)(a1 + 80);
  CFNumberRef v5 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Mutable, @"NMSRounds", v5);
  CFRelease(v5);
  int v13 = *(_DWORD *)(a1 + 88);
  CFNumberRef v6 = CFNumberCreate(v3, kCFNumberFloat32Type, &v13);
  CFDictionaryAddValue(Mutable, @"IoUThreshold", v6);
  CFRelease(v6);
  uint64_t v7 = (const void *)*MEMORY[0x263EFFB38];
  unint64_t v8 = (const void *)*MEMORY[0x263EFFB40];
  if (*(unsigned char *)(a1 + 92)) {
    unint64_t v9 = (const void *)*MEMORY[0x263EFFB40];
  }
  else {
    unint64_t v9 = (const void *)*MEMORY[0x263EFFB38];
  }
  CFDictionaryAddValue(Mutable, @"PerClassSuppression", v9);
  if (*(unsigned char *)(a1 + 93)) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v7;
  }
  CFDictionaryAddValue(Mutable, @"ReturnPerClassResults", v10);
  long long v11 = (const void *)ZinIrNMSTypeToCFString(*(_DWORD *)(a1 + 96));
  CFDictionaryAddValue(Mutable, @"Type", v11);
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

BOOL ZinTensorMap::IsTensorNameInUse(uint64_t a1, void **a2)
{
  return a1 + 8 != (void)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, a2);
}

BOOL ZinTensorMap::AllTensorNamesInUse(uint64_t a1, void ***a2)
{
  uint64_t v2 = *a2;
  CFAllocatorRef v3 = a2[1];
  if (*a2 == v3) {
    return 1;
  }
  CFNumberRef v5 = (void **)(a1 + 8);
  do
  {
    CFNumberRef v6 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, v2);
    BOOL v7 = v5 == v6;
    BOOL result = v5 != v6;
    if (v7) {
      break;
    }
    v2 += 3;
  }
  while (v2 != v3);
  return result;
}

void **ZinTensorMap::GetTensor@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  BOOL result = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, a2);
  if ((void **)(a1 + 8) == result)
  {
    char v8 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    CFNumberRef v6 = (char *)result[8];
    *(void *)a3 = result[7];
    *(void *)(a3 + 8) = v6;
    if (v6)
    {
      BOOL v7 = (atomic_ullong *)(v6 + 16);
      char v8 = 1;
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    else
    {
      char v8 = 1;
    }
  }
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t ZinIrScaledEWUnit::ZinIrScaledEWUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v5 = ZinIrUnit::ZinIrUnit((void *)a1, a3);
  *CFNumberRef v5 = &unk_26C34AD38;
  v5[7] = &unk_26C345B80;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(void *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_26C34E990;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 96);
  *(_OWORD *)(a1 + 136) = v8;
  return a1;
}

void sub_21121A0A8(_Unwind_Exception *a1)
{
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

void ZinIrScaledEWUnit::CreateOpcode(ZinIrScaledEWUnit *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = 0;
  if (GetScaledEWMode((_DWORD *)this + 34, &v4)) {
    operator new();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinIrScaledEWUnit::CreateOpcode();
  }
  *(_DWORD *)a2 = 3;
  *(void *)(a2 + 8) = 0;
}

void sub_21121A188(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C40752B76BFLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrScaledEWUnit::CreateLayer(ZinIrScaledEWUnit *a1)
{
  ZinIrScaledEWUnit::CreateOpcode(a1, (uint64_t)&v3);
  if (!v3) {
    operator new();
  }
  uint64_t v1 = v4;
  uint64_t v4 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  return 0;
}

void sub_21121A2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrScaledEWUnit::TensorDimensions(ZinIrScaledEWUnit *this, const ZinIrHalParameters *a2, int8x16_t *a3, ZinIrUnitStatus *a4)
{
  uint64_t v5 = *((void *)this + 1);
  if (*((void *)this + 2) - v5 == 120)
  {
    int8x16_t v6 = *(int8x16_t *)(v5 + 8);
    int8x16_t v7 = *(int8x16_t *)(v5 + 24);
    a3[2].i64[0] = *(void *)(v5 + 40);
    *a3 = v6;
    a3[1] = v7;
  }
  else
  {
    ZinElementWiseLayerUtils::GetOutputTensorDims((int64x2_t *)(v5 + 8), (int64x2_t *)(v5 + 128), v10);
    int8x16_t v8 = v10[1];
    *a3 = v10[0];
    a3[1] = v8;
    a3[2].i64[0] = v11;
  }
  return 0;
}

uint64_t ZinIrScaledEWUnit::PropagateAxisType(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(_OWORD *)(v2 + 96);
  a2[4] = *(_DWORD *)(v2 + 112);
  *(_OWORD *)a2 = v3;
  uint64_t v4 = *(void *)(a1 + 8);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 16) - v4) >> 3) >= 2)
  {
    unint64_t v7 = 1;
    uint64_t v8 = 216;
    do
    {
      ZinTensorAxisType::operator|=(a2, (unsigned int *)(v4 + v8));
      ++v7;
      uint64_t v4 = *(void *)(a1 + 8);
      v8 += 120;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 16) - v4) >> 3) > v7);
  }
  return 0;
}

uint64_t ZinIrScaledEWUnit::ValidateForDynamicShapes(ZinIrScaledEWUnit *this, CFArrayRef *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (*((void *)this + 2) - v2 == 240)
  {
    int v3 = *(_DWORD *)(v2 + 96);
    int v4 = *(_DWORD *)(v2 + 100);
    if (v4) {
      _ZF = 1;
    }
    else {
      _ZF = *(void *)(v2 + 40) == 1;
    }
    int v6 = *(_DWORD *)(v2 + 216);
    int v7 = *(_DWORD *)(v2 + 220);
    char v9 = !_ZF && v7 == 1;
    uint64_t v10 = *(void *)(v2 + 152);
    if (v7) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *(void *)(v2 + 160) == 1;
    }
    if (!v11 && v4 == 1) {
      char v13 = 1;
    }
    else {
      char v13 = v9;
    }
    int v14 = *(_DWORD *)(v2 + 104);
    int v15 = *(_DWORD *)(v2 + 108);
    if (v14) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = *(void *)(v2 + 16) == 1;
    }
    int v18 = *(_DWORD *)(v2 + 224);
    int v17 = *(_DWORD *)(v2 + 228);
    char v20 = !v16 && v18 == 1;
    if (v18) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = *(void *)(v2 + 136) == 1;
    }
    if (!v21 && v14 == 1) {
      char v23 = 1;
    }
    else {
      char v23 = v20;
    }
    if (v15) {
      BOOL v24 = 1;
    }
    else {
      BOOL v24 = *(void *)(v2 + 24) == 1;
    }
    char v26 = !v24 && v17 == 1;
    if (v17) {
      BOOL v27 = 1;
    }
    else {
      BOOL v27 = *(void *)(v2 + 144) == 1;
    }
    if (!v27 && v15 == 1) {
      char v29 = 1;
    }
    else {
      char v29 = v26;
    }
    int v30 = *(_DWORD *)(v2 + 112);
    if (v30) {
      BOOL v31 = 1;
    }
    else {
      BOOL v31 = *(void *)(v2 + 32) == 1;
    }
    int v32 = *(_DWORD *)(v2 + 232);
    char v34 = !v31 && v32 == 1;
    if (v32) {
      BOOL v35 = 1;
    }
    else {
      BOOL v35 = v10 == 1;
    }
    if (!v35 && v30 == 1) {
      char v37 = 1;
    }
    else {
      char v37 = v34;
    }
    char v38 = (v13 | v23 | v29 | v37) ^ 1;
    if (v3 != v6) {
      char v38 = 0;
    }
    memset(&v45[1], 0, 24);
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v49 = -1;
    v45[0] = &unk_26C34E990;
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v51 = _D0;
    int v52 = 0;
    __int16 v53 = 0;
    int v50 = 0;
    int v46 = 5;
    if (*((float *)this + 35) != 1.0 || *((float *)this + 36) != 1.0 || *((float *)this + 37) != 0.0) {
      goto LABEL_84;
    }
    if (*((unsigned char *)this + 152)) {
      char v38 = 0;
    }
    if (v38)
    {
      uint64_t v43 = 0;
    }
    else
    {
LABEL_84:
      ZinIrUnitStatus::SetError(a2, @"UnsupportedForDynamicShapes");
      uint64_t v43 = 3;
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(v45);
  }
  else
  {
    ZinIrUnitStatus::SetError(a2, @"UnsupportedForDynamicShapes");
    return 3;
  }
  return v43;
}

void sub_21121A5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)va);
  _Unwind_Resume(a1);
}

void ZinIrScaledEWUnit::CreateOpcode()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid Scaled EW\n", v0, 2u);
}

__CFDictionary *ZinCreatePlaneReaderUnit(uint64_t a1)
{
  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFNumberRef v5 = CFNumberCreate(v3, kCFNumberSInt32Type, (const void *)(a1 + 80));
  CFDictionaryAddValue(Mutable, @"Input4CCFormat", v5);
  CFRelease(v5);
  CFNumberRef v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (const void *)(a1 + 84));
  CFDictionaryAddValue(Mutable, @"PlaneIndex", v6);
  CFRelease(v6);
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

uint64_t ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)a1 = &unk_26C34E320;
  *(void *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &unk_26C345B80;
  int v7 = (std::string *)(a1 + 48);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 64) = *(void *)(a3 + 24);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  int v9 = *(_DWORD *)(a3 + 32);
  *(void *)(a1 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a1 + 72) = v9;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(long long **)(a3 + 40), *(long long **)(a3 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 48) - *(void *)(a3 + 40)) >> 3));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a3 + 64);
  *(void *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = &unk_26C34F860;
  long long v10 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 216) = xmmword_211EDF380;
  *(_OWORD *)(a1 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v10;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = -1;
  *(void *)(a1 + 136) = &unk_26C34F860;
  long long v11 = *a4;
  long long v12 = a4[1];
  long long v13 = a4[3];
  *(_OWORD *)(a1 + 264) = a4[2];
  *(_OWORD *)(a1 + 28std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v13;
  *(_OWORD *)(a1 + 232) = v11;
  *(_OWORD *)(a1 + 248) = v12;
  long long v14 = a4[4];
  long long v15 = a4[5];
  long long v16 = a4[6];
  uint64_t v17 = *((void *)a4 + 14);
  *(void *)(a1 + 344) = v17;
  *(_OWORD *)(a1 + 312) = v15;
  *(_OWORD *)(a1 + 328) = v16;
  *(_OWORD *)(a1 + 296) = v14;
  long long v18 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 432) = v18;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a1 + 328);
  *(_DWORD *)(a1 + 464) = v17;
  long long v19 = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 368) = v19;
  long long v20 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(a1 + 40std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v20;
  std::string::operator=((std::string *)(a1 + 144), v7);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a1 + 72);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 176), *(std::string **)(a1 + 80), *(long long **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
  *(_OWORD *)(a1 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 120);
  return a1;
}

void sub_21121A9B0(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_26C34A6A8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t ZinIrTileUnit::ZinIrTileUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v5 = ZinIrUnit::ZinIrUnit((void *)a1, a3);
  *CFNumberRef v5 = &unk_26C345A00;
  v5[7] = &unk_26C345B80;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(void *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_26C34AE48;
  std::unordered_map<ZinIrDimension,int>::unordered_map(a1 + 136, a2 + 80);
  return a1;
}

void sub_21121AB1C(_Unwind_Exception *a1)
{
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrTileUnit::TensorDimensions(ZinIrTileUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v6 = *(void *)(*((void *)this + 1) + 8);
  int v7 = (void *)((char *)this + 136);
  int v18 = 0;
  long long v8 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>((void *)this + 17, &v18);
  if (!v8) {
    goto LABEL_7;
  }
  *(void *)a3 = v6 * *((int *)v8 + 5);
  uint64_t v9 = *(void *)(*((void *)this + 1) + 40);
  int v18 = 1;
  long long v10 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v7, &v18);
  if (!v10) {
    goto LABEL_7;
  }
  *((void *)a3 + 4) = v9 * *((int *)v10 + 5);
  uint64_t v11 = *(void *)(*((void *)this + 1) + 16);
  int v18 = 2;
  long long v12 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v7, &v18);
  if (!v12) {
    goto LABEL_7;
  }
  *((void *)a3 + 1) = v11 * *((int *)v12 + 5);
  uint64_t v13 = *(void *)(*((void *)this + 1) + 24);
  int v18 = 3;
  long long v14 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v7, &v18);
  if (!v14
    || (*((void *)a3 + 2) = v13 * *((int *)v14 + 5),
        uint64_t v15 = *(void *)(*((void *)this + 1) + 32),
        int v18 = 4,
        (long long v16 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v7, &v18)) == 0))
  {
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  *((void *)a3 + 3) = v15 * *((int *)v16 + 5);
  return 0;
}

void ZinIrTileUnit::CreateOpcode(ZinIrTileUnit *this, const ZinIrHalParameters *a2)
{
}

void sub_21121ACD4(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C4095116A54);
  _Unwind_Resume(a1);
}

void ZinIrTileUnit::CreateLayer(ZinIrTileUnit *a1, const ZinIrHalParameters *a2)
{
}

void sub_21121ADF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef ZinCreateResampleUnit(const ZinIrResampleUnitInfo *a1)
{
  CFMutableDictionaryRef Unit = ZinCreateUnit(a1);
  CFMutableDictionaryRef theDict = ZinCreateTextureCommonUnit(a1);
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 1, MEMORY[0x263EFFF70]);
  CFNumberRef v5 = (_DWORD *)*((void *)a1 + 20);
  int v4 = (_DWORD *)*((void *)a1 + 21);
  if (v5 != v4)
  {
    uint64_t v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    int v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    do
    {
      long long v8 = CFDictionaryCreateMutable(v2, 0, v6, v7);
      uint64_t v9 = ZinIrCoordinateToCFString(v5);
      CFDictionaryAddValue(v8, @"Coordinate", v9);
      long long v10 = ZinIrCoordinateTypeToCFString(v5[1]);
      CFDictionaryAddValue(v8, @"CoordinateType", v10);
      CFArrayAppendValue(Mutable, v8);
      CFRelease(v8);
      v5 += 2;
    }
    while (v5 != v4);
  }
  CFDictionaryAddValue(theDict, @"CoordinateTypeInfo", Mutable);
  CFRelease(Mutable);
  int v11 = *((_DWORD *)a1 + 46);
  uint64_t v12 = @"YX";
  if (v11 != 1) {
    uint64_t v12 = 0;
  }
  if (v11) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = @"XY";
  }
  CFDictionaryAddValue(theDict, @"CoordinateMode", v13);
  CFDictionaryAddValue(Unit, @"Params", theDict);
  CFRelease(theDict);
  return Unit;
}

void ZinIrKernelRasterizerUnit::ZinIrKernelRasterizerUnit(ZinIrKernelRasterizerUnit *this, const ZinIrKernelRasterizerUnitInfo *a2)
{
  std::string __p = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  ZinIrUnit::ZinIrUnit(this, (uint64_t)&__p);
  if (__p)
  {
    int v7 = __p;
    operator delete(__p);
  }
  *(void *)this = &unk_26C351490;
  *((void *)this + 7) = &unk_26C345B80;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + 3);
    *((_OWORD *)this + 4) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 22) = v5;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 4, *((long long **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((_OWORD *)a2 + 4);
  *((void *)this + 7) = &unk_26C352E28;
  *(_OWORD *)((char *)this + 136) = *((_OWORD *)a2 + 5);
}

void sub_21121B140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ZinIrUnit::~ZinIrUnit(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernelRasterizerUnit::Validate(ZinIrUnit *this, uint64_t *a2, int a3, int a4, CFArrayRef *a5)
{
  if (*(unsigned char *)(a2[1] + 492)
    && (*(unsigned int (**)(ZinIrUnit *, CFArrayRef *))(*(void *)this + 144))(this, a5))
  {
    ZinIrUnit::GetUnitTypeString(this, v21);
    if (v22 >= 0) {
      long long v20 = (const char *)v21;
    }
    else {
      long long v20 = (const char *)v21[0];
    }
    ZinAssertImpl("Unit %s is not supported for dynamic shapes", v20);
  }
  uint64_t result = ZinIrUnit::ValidateBottomCount(this, 1, a5);
  if (!result)
  {
    uint64_t result = ZinIrKernelRasterizerUnit::ValidateRasterizerMode(this, a5);
    if (!result)
    {
      uint64_t result = ZinIrUnit::ValidateFormats(this, a5);
      if (!result)
      {
        if (!(*(unsigned int (**)(ZinIrUnit *, uint64_t, CFArrayRef *))(*(void *)this + 120))(this, 1, a5)&& !ZinIrKernelRasterizerUnit::ValidateNumGroups(this, (const ZinIrHalParameters *)*a2, a5))
        {
          int v9 = *((_DWORD *)this + 34);
          if (v9)
          {
            if (v9 == 1)
            {
              long long v10 = (void *)*((void *)this + 1);
              unint64_t v11 = v10[1] * v10[2];
            }
            else
            {
              unint64_t v11 = 0;
              long long v10 = (void *)*((void *)this + 1);
            }
          }
          else
          {
            long long v10 = (void *)*((void *)this + 1);
            unint64_t v11 = v10[2];
          }
          if (ZinIrKernelRasterizerUnit::Rasterizable(*a2, *((void *)this + 16), v11 / *((void *)this + 16), v10[3], v10[4], *((void *)this + 18), *((_DWORD *)this + 31)))
          {
            return 0;
          }
          BOOL v12 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v12) {
            ZinIrKernelRasterizerUnit::Validate(v12, v13, v14, v15, v16, v17, v18, v19);
          }
          ZinIrUnitStatus::SetError(a5, @"UnsupportedKernelRasterizerSize");
        }
        return 3;
      }
    }
  }
  return result;
}

void sub_21121B338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrKernelRasterizerUnit::ValidateRasterizerMode(ZinIrKernelRasterizerUnit *this, CFArrayRef *a2)
{
  if (*((_DWORD *)this + 34) != 2) {
    return 0;
  }
  BOOL v3 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v3) {
    ZinIrKernelRasterizerUnit::ValidateRasterizerMode(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  ZinIrUnitStatus::SetError(a2, @"InvalidMode");
  return 3;
}

uint64_t ZinIrKernelRasterizerUnit::ValidateNumGroups(ZinIrKernelRasterizerUnit *this, const ZinIrHalParameters *a2, CFArrayRef *a3)
{
  uint64_t v4 = *((void *)this + 18);
  if (*((void *)a2 + 47) > (unint64_t)v4 || (unint64_t)v4 > *((void *)a2 + 48))
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      ZinIrKernelRasterizerUnit::ValidateNumGroups(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    ZinIrUnitStatus::SetError(a3, @"InvalidGroupConfiguration");
    return 3;
  }
  if (v4 < 2) {
    return 0;
  }
  int v14 = *((_DWORD *)this + 34);
  if (v14 == 1)
  {
    uint64_t v15 = (void *)(*((void *)this + 1) + 8);
    goto LABEL_14;
  }
  if (!v14)
  {
    uint64_t v15 = (void *)(*((void *)this + 1) + 16);
LABEL_14:
    if (v4 == *v15 && v4 == *((void *)this + 16)) {
      return 0;
    }
  }
  ZinIrUnitStatus::SetError(a3, @"InvalidGroupConfiguration");
  BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v17) {
    ZinIrKernelRasterizerUnit::ValidateNumGroups(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  return 3;
}

BOOL ZinIrKernelRasterizerUnit::Rasterizable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  uint64_t v17 = 0;
  if (ZinTensorFormatGetSizeInBytes(a7, &v17)) {
    ZinAssertImpl("Error in getting tensor format size in bytes");
  }
  uint64_t v14 = a4 * a3 * a5;
  uint64_t v15 = ZinAlignPower2(v17 * v14, *(void *)(a1 + 528));
  return v15 == ZinAlignPower2(v17 * v14, *(void *)(a1 + 568))
      || (a6 > 1 || a2 == 1 && a3 == 1) && (a4 == 6 && a5 == 6 && a7 == 3 || a4 == 4 && a5 == 4 && a7 == 3);
}

void ZinIrKernelRasterizerUnit::CreateOpcode(ZinIrKernelRasterizerUnit *this, const ZinIrHalParameters *a2)
{
}

void sub_21121B5FC(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C40F818AD22);
  _Unwind_Resume(a1);
}

uint64_t ZinIrKernelRasterizerUnit::TensorDimensions(ZinIrKernelRasterizerUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v5 = (void *)*((void *)this + 1);
  if (*((void *)this + 2) - (void)v5 == 120)
  {
    int v6 = *((_DWORD *)this + 34);
    if (v6)
    {
      uint64_t v7 = *((void *)this + 16);
      *(void *)a3 = 1;
      *((void *)a3 + 1) = v7;
      *((void *)a3 + 2) = 1;
      if (v6 == 1) {
        uint64_t v8 = v5[1] * v5[2];
      }
      else {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v7 = *((void *)this + 16);
      *((void *)a3 + 1) = v7;
      uint64_t v8 = v5[2];
      *(void *)a3 = v5[1];
      *((void *)a3 + 2) = 1;
    }
    *((void *)a3 + 3) = v5[3] * (v8 / v7) * v5[4];
    if (v5[5] == 1)
    {
      uint64_t result = 0;
      *((void *)a3 + 4) = 1;
      return result;
    }
    BOOL v11 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v11) {
      ZinIrKernelRasterizerUnit::TensorDimensions(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    CFStringRef v9 = @"InvalidInputDepth";
  }
  else
  {
    CFStringRef v9 = @"InvalidBottomCount";
  }
  ZinIrUnitStatus::SetError(a4, v9);
  return 3;
}

uint64_t ZinIrKernelRasterizerUnit::ValidateOutputChannel(ZinIrKernelRasterizerUnit *this, uint64_t a2, ZinIrUnitStatus *a3)
{
  uint64_t v3 = *((void *)this + 18);
  if (v3 > 1)
  {
LABEL_7:
    uint64_t v6 = *((void *)this + 16);
    if (v6 != -1)
    {
      int v7 = *((_DWORD *)this + 34);
      if (v7 == 1)
      {
        uint64_t v8 = (uint64_t *)(*((void *)this + 1) + 8);
      }
      else
      {
        if (v7)
        {
          uint64_t v14 = 0;
LABEL_22:
          if (v14 != v6) {
            return 3;
          }
          return 0;
        }
        uint64_t v8 = (uint64_t *)(*((void *)this + 1) + 16);
      }
      uint64_t v14 = *v8;
      goto LABEL_22;
    }
    uint64_t v11 = *((void *)this + 1);
    if (0xEEEEEEEEEEEEEEEFLL * ((*((void *)this + 2) - v11) >> 3) != a2) {
      goto LABEL_39;
    }
    int v12 = *((_DWORD *)this + 34);
    if (v12 == 1)
    {
      uint64_t v13 = (uint64_t *)(v11 + 8);
    }
    else
    {
      if (v12)
      {
        uint64_t v17 = 0;
LABEL_36:
        if (v3 == v17)
        {
          *((void *)this + 16) = v3;
          return 0;
        }
LABEL_39:
        BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v18) {
          ZinIrKernelRasterizerUnit::ValidateOutputChannel(v18, v19, v20, v21, v22, v23, v24, v25);
        }
        return 3;
      }
      uint64_t v13 = (uint64_t *)(v11 + 16);
    }
    uint64_t v17 = *v13;
    goto LABEL_36;
  }
  int v4 = *((_DWORD *)this + 34);
  if (v4 == 1)
  {
    uint64_t v5 = (void *)(*((void *)this + 1) + 8);
  }
  else
  {
    if (v4) {
      goto LABEL_11;
    }
    uint64_t v5 = (void *)(*((void *)this + 1) + 16);
  }
  if (*v5 == 1) {
    goto LABEL_7;
  }
LABEL_11:
  uint64_t v9 = *((void *)this + 16);
  if (v9 != -1)
  {
    if (v4) {
      goto LABEL_13;
    }
LABEL_30:
    uint64_t v16 = 3;
    if (v3 == 1 && !(*(void *)(*((void *)this + 1) + 16) % v9)) {
      return 0;
    }
    return v16;
  }
  uint64_t v15 = *((void *)this + 1);
  if (v4 == 1)
  {
    uint64_t v9 = *(void *)(v15 + 8);
    *((void *)this + 16) = v9;
    uint64_t v10 = v9;
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)(v15 + 16);
  *((void *)this + 16) = v9;
  if (!v4) {
    goto LABEL_30;
  }
LABEL_13:
  if (v4 != 1) {
    return 3;
  }
  uint64_t v10 = *(void *)(*((void *)this + 1) + 8);
LABEL_26:
  uint64_t v16 = 3;
  if (v3 == 1 && v10 == v9) {
    return 0;
  }
  return v16;
}

void ZinIrKernelRasterizerUnit::CreateLayer(ZinIrKernelRasterizerUnit *a1, const ZinIrHalParameters *a2)
{
}

void sub_21121B98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

void ZinIrKernelRasterizerUnit::~ZinIrKernelRasterizerUnit(void **this)
{
  *this = &unk_26C351490;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);

  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  uint64_t vars8;

  *this = &unk_26C351490;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);

  JUMPOUT(0x21667D3C0);
}

void ZinIrKernelRasterizerUnitInfo::~ZinIrKernelRasterizerUnitInfo(void **this)
{
  ZinIrUnitInfo::~ZinIrUnitInfo(this);

  JUMPOUT(0x21667D3C0);
}

void ZinIrKernelRasterizerUnit::Validate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrKernelRasterizerUnit::ValidateRasterizerMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrKernelRasterizerUnit::ValidateNumGroups(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Only channelwise convolution kernel rasterization is supported for group greater than 1.\n", a5, a6, a7, a8, 0);
}

void ZinIrKernelRasterizerUnit::TensorDimensions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinIrKernelRasterizerUnit::ValidateOutputChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t ZinIrLinearUnit::ZinIrLinearUnit(uint64_t a1, const ZinIrKernelUnitInfo *a2, uint64_t a3)
{
  uint64_t v5 = ZinIrUnit::ZinIrUnit((void *)a1, a3);
  *uint64_t v5 = &unk_26C348828;
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)(v5 + 7), a2);
  *(void *)(a1 + 56) = &unk_26C34CCC8;
  *(_DWORD *)(a1 + 296) = *((_DWORD *)a2 + 60);
  *(void *)(a1 + 304) = 1;
  return a1;
}

void sub_21121BCD0(_Unwind_Exception *a1)
{
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLinearUnit::TensorDimensions(ZinIrLinearUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4 = *((void *)this + 1);
  long long v5 = *(_OWORD *)(v4 + 8);
  long long v6 = *(_OWORD *)(v4 + 24);
  *((void *)a3 + 4) = *(void *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  *((void *)a3 + 1) = *((void *)this + 16);
  return 0;
}

uint64_t ZinIrLinearUnit::SetBottoms(uint64_t a1, __n128 *a2)
{
  int v4 = *(_DWORD *)(a1 + 296);
  if (v4 != 5) {
    *(void *)(a1 + 304) = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(a2->n128_u64[0] + 8), v4);
  }

  return ZinIrUnit::SetBottoms(a1, a2);
}

void ZinIrLinearUnit::CreateOpcode(ZinIrLinearUnit *this)
{
}

void sub_21121BDC4(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C40F818AD22);
  _Unwind_Resume(a1);
}

void ZinIrLinearUnit::CreateLayer(ZinIrLinearUnit *a1)
{
}

void sub_21121BEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIrLinearUnit::CreateKernel(ZinIrLinearUnit *a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, CFArrayRef *a7)
{
  ZinIrLinearUnit::CreateKernelDescriptor(a1, (uint64_t)v20);
  std::string::basic_string[abi:ne180100]<0>(&v17, "linear_kernel");
  uint64_t v13 = std::string::append(&v17, "_xfm", 4uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  uint64_t Kernel = ZinIrKernelCreationUtils::CreateKernel((uint64_t)a1 + 56, (uint64_t)v20, a2, a3, a4, a6, (uint64_t)__p, a7);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  return Kernel;
}

void sub_21121C034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double ZinIrLinearUnit::CreateKernelDescriptor@<D0>(ZinIrLinearUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*((void *)this + 1) + 16);
  uint64_t v4 = *((void *)this + 38);
  uint64_t v5 = v4 * *((void *)this + 16);
  *(_DWORD *)(a2 + 12) = 0;
  *(_WORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_WORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 64) = 0;
  *(void *)a2 = 0;
  *(_WORD *)(a2 + 8) = 0;
  int64x2_t v6 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a2 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v6;
  *(int64x2_t *)(a2 + 136) = v6;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a2 + 152) = v7;
  *(void *)(a2 + 168) = 0x100000001;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(_OWORD *)(a2 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = xmmword_211EDA8E0;
  *(_DWORD *)(a2 + 216) = 1;
  *(_DWORD *)(a2 + 232) = 0;
  *(_DWORD *)(a2 + 272) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  int v8 = *((_DWORD *)this + 35);
  if (v8 == 6) {
    int v8 = 4;
  }
  *(_DWORD *)a2 = v8;
  *(void *)(a2 + 72) = v5;
  *(void *)(a2 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v3;
  *(int64x2_t *)(a2 + 88) = v6;
  *(int64x2_t *)(a2 + 104) = v6;
  *(void *)(a2 + 224) = v4;
  *(void *)(a2 + 24std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *((unsigned int *)this + 58);
  *(void *)(a2 + 248) = 0;
  ZinKernelDescriptorStrides((int *)(a2 + 152), (int *)(a2 + 164), (void *)(a2 + 72), (_DWORD *)(a2 + 176), v11);
  double result = *(double *)v11;
  long long v10 = v11[1];
  *(_OWORD *)(a2 + 112) = v11[0];
  *(_OWORD *)(a2 + 128) = v10;
  *(void *)(a2 + 144) = v12;
  return result;
}

void ZinIrLinearUnit::CreateDummyKernel(ZinIrLinearUnit *a1, uint64_t a2, uint64_t a3)
{
  ZinIrLinearUnit::CreateKernelDescriptor(a1, (uint64_t)v14);
  std::string::basic_string[abi:ne180100]<0>(&v10, "linear_kernel");
  int64x2_t v6 = std::string::append(&v10, "_xfm", 4uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v11, "_dummy", 6uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v13 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  ZinIrKernelCreationUtils::CreateDummyKernel((uint64_t)a1 + 56, (uint64_t)v14, a2, a3, (uint64_t)__p);
}

void sub_21121C258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrLinearUnit::ValidateWeightFileInfos(ZinIrLinearUnit *this, unint64_t a2, unint64_t a3)
{
  return ValidateWeightFileInfosHelper((ZinIrLinearUnit *)((char *)this + 56), a2, a3);
}

uint64_t ZinIrLinearUnit::IsMutable(ZinIrLinearUnit *this)
{
  return *((unsigned __int8 *)this + 236);
}

uint64_t *ZinIrFileManager::UnmapData(uint64_t **a1, void **a2)
{
  double result = (uint64_t *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)a1, a2);
  uint64_t v4 = (uint64_t)result;
  if (a1 + 1 != (uint64_t **)result)
  {
    munmap((void *)result[7], result[8]);
    return std::__tree<std::string>::erase(a1, v4);
  }
  return result;
}

_OWORD *ZinIrFileManager::AddFileEntry(uint64_t **a1, uint64_t a2, long long *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  long long v5 = a3[1];
  long long v9 = *a3;
  long long v10 = v5;
  int64x2_t v6 = std::__tree<std::__value_type<std::string,ZinIrFileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrFileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrFileInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinIrFileInfo>>(a1, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_21121C3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *ZinIrFileManager::MapEncryptedData(uint64_t **a1, long long *a2)
{
  long long v13 = 0u;
  long long v14 = 0u;
  EncryptedFile::EncryptedFile((uint64_t)v10, a2);
  EncryptedFile::LoadFile((EncryptedFile *)v10);
  uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)v10);
  Hal = ZinIrTarget::GetHal(v5, (ZinIrTarget *)v10);
  uint64_t Lut = ZinIrTarget::GetLut((ZinIrTarget *)v10);
  uint64_t FullPassCount = ZinChannelAssignment::GetFullPassCount((ZinChannelAssignment *)v10);
  *(void *)&long long v13 = OCGSize;
  *((void *)&v13 + 1) = Hal;
  *(void *)&long long v14 = Lut;
  *((void *)&v14 + 1) = FullPassCount;
  if (v12 < 0) {
    operator delete(__p);
  }
  return ZinIrFileManager::AddFileEntry(a1, (uint64_t)a2, &v13);
}

void sub_21121C4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v22 = __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinIrFileManager::MapEncryptedData(v19, (uint64_t)v22);
    }
    __cxa_end_catch();
    JUMPOUT(0x21121C48CLL);
  }
  _Unwind_Resume(exception_object);
}

void **ZinIrFileManager::MapData(uint64_t **a1, uint64_t a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int64x2_t v6 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)a1, (void **)a2);
  if (a1 + 1 == (uint64_t **)v6)
  {
    if (a3) {
      return (void **)ZinIrFileManager::MapEncryptedData(a1, (long long *)a2);
    }
    if (*(char *)(a2 + 23) >= 0) {
      int v8 = (const char *)a2;
    }
    else {
      int v8 = *(const char **)a2;
    }
    if (!stat(v8, &v14))
    {
      if (*(char *)(a2 + 23) >= 0) {
        long long v10 = (const char *)a2;
      }
      else {
        long long v10 = *(const char **)a2;
      }
      int v11 = open(v10, 0);
      char v12 = mmap(0, v14.st_size, 1, 1, v11, 0);
      close(v11);
      if (v12 != (void *)-1)
      {
        *(void *)buf = v12;
        *(void *)&buf[8] = v14.st_size;
        *(void *)&buf[16] = v12;
        st_std::string::size_type size = v14.st_size;
        return (void **)ZinIrFileManager::AddFileEntry(a1, a2, (long long *)buf);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0) {
          long long v13 = (const char *)a2;
        }
        else {
          long long v13 = *(const char **)a2;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v14.st_size;
        *(_WORD *)&buf[22] = 1024;
        LODWORD(st_size) = v11;
        _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed to map file %s, size %lld, fid %d\n", buf, 0x1Cu);
      }
    }
  }
  return v6;
}

BOOL ZinIrFileManager::GetData(uint64_t **a1, uint64_t *a2, void *a3, void *a4, int a5)
{
  *a3 = 0;
  *a4 = 0;
  long long v9 = ZinIrFileManager::MapData(a1, (uint64_t)a2, a5);
  long long v10 = v9;
  int v11 = (void **)(a1 + 1);
  if (v11 == v9)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinIrFileManager::GetData(a2);
    }
  }
  else
  {
    char v12 = v9[10];
    *a3 = v9[9];
    *a4 = v12;
  }
  return v11 != v10;
}

_OWORD *std::__tree<std::__value_type<std::string,ZinIrFileInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrFileInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrFileInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ZinIrFileInfo>>(uint64_t **a1, void **a2, uint64_t a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  int64x2_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    int64x2_t v6 = operator new(0x58uLL);
    _OWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)((char *)v6 + 72) = *(_OWORD *)(a3 + 40);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void ZinIrFileManager::MapEncryptedData(uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*((char *)a1 + 23) >= 0) {
    CFAllocatorRef v2 = a1;
  }
  else {
    CFAllocatorRef v2 = (uint64_t *)*a1;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  int v4 = 136315394;
  long long v5 = v2;
  __int16 v6 = 2080;
  uint64_t v7 = v3;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Cannot load encrypted file \"%s\": %s", (uint8_t *)&v4, 0x16u);
}

void ZinIrFileManager::GetData(uint64_t *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = (uint64_t *)*a1;
  }
  int v2 = 136315138;
  uint64_t v3 = v1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "ERROR: ZinIrFileManager::GetData() -- No mapping found. File \"%s\" could not be mapped.\n", (uint8_t *)&v2, 0xCu);
}

uint64_t ZinParsePEPoolUnit(const __CFDictionary *a1, ZinIrPEPoolUnitInfo *a2, CFArrayRef *a3)
{
  uint64_t v6 = ZinParsePEUnit(a1, a2, a3);
  if (!v6)
  {
    if (*((char *)a2 + 31) >= 0) {
      size_t v7 = *((unsigned __int8 *)a2 + 31);
    }
    else {
      size_t v7 = *((void *)a2 + 2);
    }
    uint64_t v8 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 5);
    if (v12 < 0) {
      uint64_t v8 = (void **)__p[0];
    }
    if (v7)
    {
      if (*((char *)a2 + 31) >= 0) {
        uint64_t v9 = (char *)a2 + 8;
      }
      else {
        uint64_t v9 = (char *)*((void *)a2 + 1);
      }
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, ".pool");
    uint64_t v6 = RequiredSubunitParser<ZinIrPoolUnitInfo>(a1, (const char *)__p, (uint64_t (*)(const void *, void **, CFArrayRef *))ZinParsePoolUnit, (uint64_t)a2 + 968, a3);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  return v6;
}

void sub_21121CA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::SerializeZinIrOpLayer(uint64_t *a1, ZinIrOpLayer *a2, void *a3, void *a4)
{
  memset(&v55, 0, sizeof(v55));
  std::vector<std::string>::reserve(&v55, (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3);
  uint64_t v8 = (uint64_t *)*((void *)a2 + 11);
  uint64_t v9 = (uint64_t *)*((void *)a2 + 12);
  if (v8 != v9)
  {
    std::vector<std::string>::pointer end = v55.__end_;
    do
    {
      uint64_t v11 = *v8;
      char v12 = (long long *)(*v8 + 24);
      if (end >= v55.__end_cap_.__value_)
      {
        std::vector<std::string>::pointer end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v55, (uint64_t)v12);
      }
      else
      {
        if (*(char *)(v11 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)(v11 + 24), *(void *)(v11 + 32));
        }
        else
        {
          long long v13 = *v12;
          end->__r_.__value_.__r.__words[2] = *(void *)(*v8 + 40);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v13;
        }
        ++end;
      }
      v55.__end_ = end;
      ++v8;
    }
    while (v8 != v9);
  }
  uint64_t v14 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  if (!v14)
  {
    uint64_t v27 = 3;
    goto LABEL_36;
  }
  LOBYTE(v53) = 0;
  char v54 = 0;
  LOBYTE(v49[0]) = 0;
  char v50 = 0;
  v51[0] = 0;
  v52[0] = 0;
  v47[0] = 0;
  char v48 = 0;
  if (ZinIrOpLayer::IsANELayer(a2))
  {
    uint64_t v15 = 0;
    uint64_t v53 = *((void *)a2 + 45);
    char v16 = 1;
    char v54 = 1;
    do
    {
      char v17 = v16;
      uint64_t v18 = *((void *)a2 + v15 + 30);
      if (v18)
      {
        std::string::size_type v19 = *(ZinIrOpLayerOpCode **)(v18 + 64);
        unsigned int v20 = *((_DWORD *)v19 + 2);
        if (v20 != 102)
        {
          ZinIrEnumToStringUtil::OpCodeToString(v20, &v56);
          if (v58 >= 0) {
            uint64_t v44 = (const char *)&v56;
          }
          else {
            uint64_t v44 = v56;
          }
          ZinAssertImpl("Unsupported serialization for DMA layer type %s", v44);
        }
        std::optional<ZinIrDMAConvertInfo>::operator=[abi:ne180100]<ZinIrDMAConvertInfo const&,void>((uint64_t)&v49[4 * v15], v19);
      }
      char v16 = 0;
      uint64_t v15 = 1;
    }
    while ((v17 & 1) != 0);
    uint64_t v21 = *((void *)a2 + 32);
    if (v21)
    {
      uint64_t v22 = *(ZinIrOpLayerOpCode **)(v21 + 64);
      unsigned int v23 = *((_DWORD *)v22 + 2);
      if (v23 != 102)
      {
        ZinIrEnumToStringUtil::OpCodeToString(v23, &v56);
        if (v58 >= 0) {
          uint64_t v45 = (const char *)&v56;
        }
        else {
          uint64_t v45 = v56;
        }
        ZinAssertImpl("Unsupported serialization for DMA layer type %s", v45);
      }
      std::optional<ZinIrDMAConvertInfo>::operator=[abi:ne180100]<ZinIrDMAConvertInfo const&,void>((uint64_t)v47, v22);
    }
  }
  uint64_t v46 = *(void *)(*((void *)a2 + 19) + 592);
  if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, &v46))ZinAssertImpl("Error: Basic block not found in map."); {
  uint64_t v24 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, &v46);
  }
  if (!v24) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v25 = v24[3];
  uint64_t v26 = a1[1];
  if (v26)
  {
    if (*a1 + 4 > (unint64_t)a1[2]) {
      goto LABEL_27;
    }
    *(_DWORD *)(v26 + *a1) = *(_DWORD *)(*((void *)a2 + 8) + 8);
  }
  *a1 += 4;
  if (ZinSerial::BufferWriter::Write<std::string const>(a1, (void *)a2 + 3)
    || ZinSerial::Serializer::Serialize<std::string>(a1, (char **)&v55))
  {
    goto LABEL_27;
  }
  uint64_t v30 = a1[1];
  unint64_t v31 = *a1 + 4;
  if (v30)
  {
    if (v31 > a1[2]) {
      goto LABEL_27;
    }
    *(_DWORD *)(v30 + *a1) = *(_DWORD *)(v14 + 88);
    uint64_t v33 = *a1;
    uint64_t v32 = a1[1];
    unint64_t v31 = *a1 + 4;
    *a1 = v31;
    if (v32)
    {
      if (v33 + 12 > (unint64_t)a1[2]) {
        goto LABEL_27;
      }
      *(void *)(v32 + v31) = *((void *)a2 + 6);
      uint64_t v35 = *a1;
      uint64_t v34 = a1[1];
      uint64_t v36 = *a1 + 8;
      *a1 = v36;
      if (v34)
      {
        if (v35 + 16 > (unint64_t)a1[2]) {
          goto LABEL_27;
        }
        *(void *)(v34 + v36) = *((void *)a2 + 1);
        uint64_t v36 = *a1;
      }
      goto LABEL_46;
    }
  }
  else
  {
    *a1 = v31;
  }
  uint64_t v36 = v31 + 8;
  *a1 = v36;
LABEL_46:
  *a1 = v36 + 8;
  GroupId = (void *)ZinIrOpLayer::GetGroupId(a2);
  uint64_t v38 = a1[1];
  unint64_t v39 = *a1 + 8;
  if (v38)
  {
    if (v39 > a1[2]) {
      goto LABEL_27;
    }
    *(void *)(v38 + *a1) = *GroupId;
    uint64_t v41 = *a1;
    uint64_t v40 = a1[1];
    unint64_t v39 = *a1 + 8;
    *a1 = v39;
    if (v40)
    {
      if (v41 + 16 > (unint64_t)a1[2]) {
        goto LABEL_27;
      }
      *(void *)(v40 + v39) = v25;
      unint64_t v39 = *a1;
    }
  }
  else
  {
    *a1 = v39;
  }
  *a1 = v39 + 8;
  if (!ZinSerial::Serializer::Serialize<long>(a1, (uint64_t)&v53)
    && !ZinSerial::Serializer::Serialize((ZinSerial::Serializer *)a1, (const ZinTensorDimensions *)(v14 + 48))&& !ZinSerial::Serializer::Serialize<std::optional<ZinIrDMAConvertInfo>,2ul>((ZinSerial::Serializer *)a1, (uint64_t)v49)&& !ZinSerial::Serializer::Serialize<ZinIrDMAConvertInfo>((ZinSerial::Serializer *)a1, v47))
  {
    if (!ZinIrOpLayer::IsANELayer(a2))
    {
      long long v56 = 0;
      int v57 = 0;
      uint64_t v58 = 0;
      int IsNoOp = ZinIrOpLayer::IsNoOp(a2, (uint64_t *)&v56);
      if (v56)
      {
        int v57 = v56;
        operator delete(v56);
      }
      if (!IsNoOp) {
        ZinAssertImpl("Unexpected OpLayer type during serialization.");
      }
      uint64_t v27 = ZinSerial::SerializeNoOpLayer(a1, a2, a3);
      goto LABEL_28;
    }
    if (!ZinSerial::SerializeZinEngineLayer((ZinSerial *)a1, a2, v42))
    {
      if (ZinSerial::SerializeOpLayerMirInfoAndSymbols((ZinSerial::Serializer *)a1, (const ZinEngineLayerMirInfo **)a2, a3))uint64_t v27 = 3; {
      else
      }
        uint64_t v27 = 0;
      goto LABEL_28;
    }
  }
LABEL_27:
  uint64_t v27 = 3;
LABEL_28:
  if (v48) {
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v47);
  }
  for (uint64_t i = 0; i != -64; i -= 32)
  {
    if (v52[i]) {
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v51[i]);
    }
  }
LABEL_36:
  v49[0] = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v49);
  return v27;
}

void sub_21121CF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v27 = *(void **)(v25 - 104);
  if (v27)
  {
    *(void *)(v25 - 96) = v27;
    operator delete(v27);
  }
  if (a14) {
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a11);
  }
  uint64_t v28 = 0;
  while (1)
  {
    if (LOBYTE((&a15)[v28 + 7])) {
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&(&a15)[v28 + 4]);
    }
    v28 -= 4;
    if (v28 == -8)
    {
      a15 = (void **)&a25;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t ZinSerial::Serializer::Serialize<std::optional<ZinIrDMAConvertInfo>,2ul>(ZinSerial::Serializer *a1, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  std::vector<std::optional<ZinIrDMAConvertInfo>>::__init_with_size[abi:ne180100]<std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo> const*>((ZinIrOpLayerOpCode *)v5, a2, a2 + 64, 2uLL);
  uint64_t v3 = ZinSerial::Serializer::Serialize<std::optional<ZinIrDMAConvertInfo>>(a1, v5);
  uint64_t v6 = v5;
  std::vector<std::optional<ZinIrDMAConvertInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  return v3;
}

void sub_21121D04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::optional<ZinIrDMAConvertInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrDMAConvertInfo>(ZinSerial::Serializer *a1, unsigned __int8 *a2)
{
  int v2 = a2[24];
  uint64_t v3 = *((void *)a1 + 1);
  if (v3)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v3 + *(void *)a1) = v2;
  }
  ++*(void *)a1;
  if (!v2) {
    return 0;
  }
  if (!a2[24]) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }

  return ZinSerial::Serializer::Serialize(a1, (const ZinIrDMAConvertInfo *)a2);
}

uint64_t ZinSerial::SerializeZinEngineLayer(ZinSerial *this, ZinSerial::Serializer *a2, const ZinEngineLayer *a3)
{
  if (ZinIrOpLayer::IsNELayer(a2))
  {
    uint64_t v5 = *((void *)a2 + 46);
    if (v5) {
      uint64_t v6 = *(const ZinIrBroadcastInfo **)(v5 + 64);
    }
    else {
      uint64_t v6 = 0;
    }
    if (*((void *)a2 + 47)) {
      operator new();
    }
    if (*((void *)a2 + 49)) {
      operator new();
    }
    uint64_t ReshapeInfo = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 416))(a2);
    if (ReshapeInfo) {
      uint64_t ReshapeInfo = (ZinReshapeLayer *)ZinReshapeLayer::GetReshapeInfo(ReshapeInfo);
    }
    uint64_t v92 = *(void *)((char *)a2 + 420);
    int v94 = (char **)ReshapeInfo;
    if ((v92 & 0xFF00000000) == 0) {
      ZinAssertImpl("Binary point not set.");
    }
    LOBYTE(__p) = 0;
    char v102 = 0;
    uint64_t v11 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 576))(a2);
    if (v11)
    {
      char v12 = this;
      uint64_t v13 = *(void *)(v11 + 64);
      int v14 = *(_DWORD *)(v13 + 12);
      uint64_t Seeds = ZinIrStochasticRoundInfo::GetSeeds((ZinIrStochasticRoundInfo *)v13);
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)(v13 + 32);
      ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)&v97, 72);
      uint64_t v97 = &unk_26C350E90;
      *(_DWORD *)char v99 = v14;
      *(void *)&v99[4] = Seeds;
      *(void *)&v99[12] = v17;
      *(void *)&v99[20] = v18;
      if (v102)
      {
        *(_OWORD *)&v101[4] = *(_OWORD *)v99;
        *(_OWORD *)&v101[16] = *(_OWORD *)&v99[12];
      }
      else
      {
        std::string __p = &unk_26C350E90;
        *(_OWORD *)&v101[4] = *(_OWORD *)v99;
        *(_OWORD *)&v101[16] = *(_OWORD *)&v99[12];
        char v102 = 1;
      }
      this = v12;
      *(_DWORD *)long long v101 = v98;
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v97);
    }
    if (ZinSerial::Serializer::Serialize<ZinIrBroadcastInfo>(this, v6)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, 0)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, 0)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v94))
    {
      goto LABEL_29;
    }
    uint64_t v20 = *((void *)this + 1);
    if (v20)
    {
      if ((unint64_t)(*(void *)this + 4) > *((void *)this + 2)) {
        goto LABEL_29;
      }
      *(_DWORD *)(v20 + *(void *)this) = v92;
    }
    *(void *)this += 4;
    if (!ZinSerial::SerializeNEKernelInfo(this, a2, v19))
    {
      if (ZinSerial::Serializer::Serialize<ZinIrStochasticRoundInfo>(this, (unsigned __int8 *)&__p)) {
        uint64_t v9 = 3;
      }
      else {
        uint64_t v9 = 0;
      }
      goto LABEL_30;
    }
LABEL_29:
    uint64_t v9 = 3;
LABEL_30:
    if (v102) {
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&__p);
    }
    if (!v9)
    {
      uint64_t v9 = 6;
      switch(*(_DWORD *)(*((void *)a2 + 8) + 8))
      {
        case 'U':
          uint64_t v22 = *(void *)this;
          uint64_t v23 = *((void *)this + 1);
          if (v23)
          {
            if ((unint64_t)(v22 + 1) > *((void *)this + 2)) {
              return 3;
            }
            *(unsigned char *)(v23 + v22) = *((void *)a2 + 54) != 0;
            uint64_t v22 = *(void *)this;
          }
          uint64_t v9 = 0;
          *(void *)this = v22 + 1;
          break;
        case 'Y':
          uint64_t v29 = *((void *)a2 + 54);
          if (v29) {
            uint64_t v30 = *(const ZinIrPoolingInfo **)(v29 + 64);
          }
          else {
            uint64_t v30 = 0;
          }
          int v38 = ZinSerial::Serializer::Serialize<ZinIrPoolingInfo>(this, v30);
          goto LABEL_65;
        case 'Z':
          std::string __p = 0;
          *(void *)long long v101 = 0;
          *(void *)&v101[8] = 0;
          std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, *((const void **)a2 + 54), *((void *)a2 + 55), (uint64_t)(*((void *)a2 + 55) - *((void *)a2 + 54)) >> 2);
          uint64_t v27 = *((void *)a2 + 57);
          if (v27) {
            uint64_t v28 = *(const ZinIrElementWiseInfo **)(v27 + 64);
          }
          else {
            uint64_t v28 = 0;
          }
          if (ZinSerial::Serializer::Serialize<ZinDramDependentSrcType>((uint64_t *)this, (char **)&__p))
          {
            uint64_t v9 = 3;
          }
          else if (ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, v28))
          {
            uint64_t v9 = 3;
          }
          else
          {
            uint64_t v9 = 0;
          }
          if (__p)
          {
            *(void *)long long v101 = __p;
            operator delete(__p);
          }
          break;
        case '\\':
          uint64_t v31 = *((void *)a2 + 54);
          if (v31) {
            uint64_t v32 = *(void *)(v31 + 64);
          }
          else {
            uint64_t v32 = 0;
          }
          int v38 = ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v32);
LABEL_65:
          if (v38) {
            uint64_t v9 = 3;
          }
          else {
            uint64_t v9 = 0;
          }
          break;
        default:
          return v9;
      }
    }
    return v9;
  }
  if (!ZinIrOpLayer::IsPELayer(a2)) {
    ZinAssertImpl("Unsupported engine layer type.");
  }
  uint64_t OutputScale = ZinPELayer::GetOutputScale(a2);
  uint64_t OutputBias = ZinPELayer::GetOutputBias(a2);
  if (ZinSerial::Serializer::Serialize<SingularValue>((unint64_t *)this, OutputScale)
    || ZinSerial::Serializer::Serialize<SingularValue>((unint64_t *)this, OutputBias))
  {
    return 3;
  }
  int v24 = *(_DWORD *)(*((void *)a2 + 8) + 8);
  if (v24 == 81)
  {
    uint64_t v37 = *((void *)a2 + 57);
    if (v37) {
      std::string v95 = *(const ZinIrIndexInfo **)(v37 + 64);
    }
    else {
      std::string v95 = 0;
    }
    int v57 = (ZinReshapeLayer *)*((void *)a2 + 58);
    if (v57) {
      int v93 = (char **)ZinReshapeLayer::GetReshapeInfo(v57);
    }
    else {
      int v93 = 0;
    }
    uint64_t v58 = *((void *)a2 + 59);
    if (v58) {
      int v91 = *(const ZinIrBroadcastInfo **)(v58 + 64);
    }
    else {
      int v91 = 0;
    }
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 576))(a2)) {
      uint64_t v59 = *(void *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 584))(a2) + 64);
    }
    else {
      uint64_t v59 = 0;
    }
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 608))(a2)) {
      uint64_t v60 = (const ZinIrActivationParams *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 624))(a2)
    }
                                          + 192);
    else {
      uint64_t v60 = 0;
    }
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 640))(a2))
    {
      uint64_t v61 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 712))(a2);
      uint64_t v62 = (char **)ZinReshapeLayer::GetReshapeInfo(v61);
    }
    else
    {
      uint64_t v62 = 0;
    }
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 592))(a2)) {
      uint64_t v63 = *(void *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 600))(a2) + 64);
    }
    else {
      uint64_t v63 = 0;
    }
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 616))(a2)) {
      uint64_t v64 = (const ZinIrActivationParams *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 632))(a2)
    }
                                          + 192);
    else {
      uint64_t v64 = 0;
    }
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 648))(a2))
    {
      uint64_t v65 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 720))(a2);
      uint64_t v66 = ZinReshapeLayer::GetReshapeInfo(v65);
    }
    else
    {
      uint64_t v66 = 0;
    }
    uint64_t v67 = *((void *)a2 + 60);
    unint64_t v90 = (char **)v66;
    if (v67) {
      int v89 = *(const ZinIrScaledEWInfo **)(v67 + 64);
    }
    else {
      int v89 = 0;
    }
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 792))(a2)) {
      uint64_t v68 = *(const ZinIrElementWiseInfo **)((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 808))(a2)
    }
                                           + 64);
    else {
      uint64_t v68 = 0;
    }
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 800))(a2)) {
      uint64_t v69 = (const ZinIrActivationParams *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 816))(a2)
    }
                                          + 192);
    else {
      uint64_t v69 = 0;
    }
    uint64_t v70 = *((void *)a2 + 63);
    if (v70) {
      uint64_t v88 = *(const ZinIrReductionInfo **)(v70 + 64);
    }
    else {
      uint64_t v88 = 0;
    }
    uint64_t v71 = *((void *)a2 + 67);
    if (v71) {
      int v87 = *(const ZinIrElementWiseInfo **)(v71 + 64);
    }
    else {
      int v87 = 0;
    }
    int v85 = *((_DWORD *)a2 + 132);
    uint64_t v72 = *((void *)a2 + 68);
    if (v72) {
      uint64_t v73 = (const ZinIrActivationParams *)(v72 + 192);
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v86 = v73;
    uint64_t v74 = 0;
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 680))(a2)) {
      uint64_t v74 = (const ZinIrActivationParams *)((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 776))(a2)
    }
                                          + 192);
    if ((*(unsigned int (**)(ZinSerial::Serializer *))(*(void *)a2 + 408))(a2))
    {
      uint64_t v75 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 416))(a2);
      uint64_t v84 = ZinReshapeLayer::GetReshapeInfo(v75);
    }
    else
    {
      uint64_t v84 = 0;
    }
    if (ZinSerial::Serializer::Serialize<ZinIrIndexInfo>(this, v95)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v93)
      || ZinSerial::Serializer::Serialize<ZinIrBroadcastInfo>(this, v91)
      || ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v59)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v60)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v62)
      || ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v63)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v64)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v90)
      || ZinSerial::Serializer::Serialize<ZinIrScaledEWInfo>(this, v89)
      || ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, v68)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v69)
      || ZinSerial::Serializer::Serialize<ZinIrReductionInfo>(this, v88)
      || ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)this, (uint64_t)a2 + 512)
      || ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)this, (uint64_t)a2 + 520))
    {
      return 3;
    }
    uint64_t v76 = *((void *)this + 1);
    if (v76)
    {
      if ((unint64_t)(*(void *)this + 4) > *((void *)this + 2)) {
        return 3;
      }
      *(_DWORD *)(v76 + *(void *)this) = v85;
    }
    *(void *)this += 4;
    if (ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, v87)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v86))
    {
      return 3;
    }
    uint64_t v9 = 3;
    if (ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v74)) {
      return v9;
    }
    std::vector<std::string> v55 = this;
    long long v56 = (char **)v84;
LABEL_108:
    if (ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(v55, v56)) {
      return 3;
    }
    else {
      return 0;
    }
  }
  if (v24 == 84)
  {
    uint64_t v33 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 624))(a2);
    if (v33) {
      uint64_t v34 = (const ZinIrActivationParams *)(v33 + 192);
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 712))(a2);
    if (v35) {
      uint64_t v36 = (char **)ZinReshapeLayer::GetReshapeInfo(v35);
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v39 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 696))(a2);
    if (v39) {
      uint64_t v40 = *(const ZinIrBroadcastInfo **)(v39 + 64);
    }
    else {
      uint64_t v40 = 0;
    }
    uint64_t v41 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 632))(a2);
    if (v41) {
      unint64_t v42 = (const ZinIrActivationParams *)(v41 + 192);
    }
    else {
      unint64_t v42 = 0;
    }
    uint64_t v43 = *((void *)a2 + 55);
    if (v43) {
      uint64_t v96 = *(const ZinIrDynamicGOCInfo **)(v43 + 64);
    }
    else {
      uint64_t v96 = 0;
    }
    uint64_t v44 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 808))(a2);
    if (v44) {
      uint64_t v45 = *(const ZinIrElementWiseInfo **)(v44 + 64);
    }
    else {
      uint64_t v45 = 0;
    }
    uint64_t v46 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 816))(a2);
    if (v46) {
      long long v47 = (const ZinIrActivationParams *)(v46 + 192);
    }
    else {
      long long v47 = 0;
    }
    uint64_t v48 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 776))(a2);
    if (v48) {
      uint64_t v49 = (const ZinIrActivationParams *)(v48 + 192);
    }
    else {
      uint64_t v49 = 0;
    }
    uint64_t v50 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 784))(a2);
    if (v50) {
      uint64_t v51 = (const ZinIrActivationParams *)(v50 + 192);
    }
    else {
      uint64_t v51 = 0;
    }
    int v52 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 416))(a2);
    if (v52) {
      uint64_t v53 = ZinReshapeLayer::GetReshapeInfo(v52);
    }
    else {
      uint64_t v53 = 0;
    }
    if (ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v34)
      || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v36)
      || ZinSerial::Serializer::Serialize<ZinIrBroadcastInfo>(this, v40)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v42)
      || ZinSerial::Serializer::Serialize<ZinIrDynamicGOCInfo>(this, v96)
      || ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, v45)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v47)
      || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v49))
    {
      return 3;
    }
    int v54 = ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, v51);
    uint64_t v9 = 3;
    if (v54) {
      return v9;
    }
    std::vector<std::string> v55 = this;
    long long v56 = (char **)v53;
    goto LABEL_108;
  }
  if (v24 != 83) {
    return 6;
  }
  uint64_t v25 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 584))(a2);
  if (v25) {
    uint64_t v26 = *(void *)(v25 + 64);
  }
  else {
    uint64_t v26 = 0;
  }
  if ((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 624))(a2)) {
    operator new();
  }
  uint64_t v77 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 600))(a2);
  if (v77) {
    uint64_t v78 = *(void *)(v77 + 64);
  }
  else {
    uint64_t v78 = 0;
  }
  if ((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 632))(a2)) {
    operator new();
  }
  uint64_t v79 = (ZinReshapeLayer *)(*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 720))(a2);
  if (v79) {
    uint64_t v80 = (char **)ZinReshapeLayer::GetReshapeInfo(v79);
  }
  else {
    uint64_t v80 = 0;
  }
  uint64_t v81 = *((void *)a2 + 54);
  if (v81) {
    uint64_t v82 = *(const ZinIrPoolingInfo **)(v81 + 64);
  }
  else {
    uint64_t v82 = 0;
  }
  uint64_t v83 = (*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 808))(a2);
  if (v83) {
    ZinIrElementWiseInfo::Clone(*(ZinIrElementWiseInfo **)(v83 + 64));
  }
  if ((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 816))(a2)) {
    operator new();
  }
  if ((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 776))(a2)) {
    operator new();
  }
  if ((*(uint64_t (**)(ZinSerial::Serializer *))(*(void *)a2 + 784))(a2)) {
    operator new();
  }
  if (ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v26)
    || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, 0)
    || ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(this, v78)
    || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, 0)
    || ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(this, v80)
    || ZinSerial::Serializer::Serialize<ZinIrPoolingInfo>(this, v82)
    || ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(this, 0)
    || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, 0)
    || ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, 0))
  {
    return 3;
  }
  if (ZinSerial::Serializer::Serialize<ZinIrActivationParams>(this, 0)) {
    return 3;
  }
  return 0;
}

void sub_21121E520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (v33)
  {
    MEMORY[0x21667D3C0](v33, 0x1000C4097E74013);
    if (v32) {
      goto LABEL_3;
    }
  }
  else if (v32)
  {
LABEL_3:
    MEMORY[0x21667D3C0](v32, 0x1000C4097E74013);
    if (!v31) {
      goto LABEL_8;
    }
LABEL_7:
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
LABEL_8:
    if (v30) {
      MEMORY[0x21667D3C0](v30, 0x1000C4097E74013);
    }
    if (v29) {
      MEMORY[0x21667D3C0](v29, 0x1000C4097E74013);
    }
    _Unwind_Resume(a1);
  }
  if (!v31) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t ZinSerial::SerializeOpLayerMirInfoAndSymbols(ZinSerial::Serializer *a1, const ZinEngineLayerMirInfo **this, void *a3)
{
  if (!ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)this)) {
    return 6;
  }
  uint64_t v6 = this[33];
  if (!v6) {
    goto LABEL_18;
  }
  if (ZinSerial::Serializer::Serialize<ZinEngineLayerMirInfo>(a1, v6)) {
    return 3;
  }
  uint64_t v8 = (uint64_t)this[33];
  if (!v8) {
    goto LABEL_18;
  }
  L2RdAccess = (unsigned int *)ZinEngineLayerMirInfo::GetL2RdAccess(v8, 0);
  long long v10 = (unsigned int *)ZinEngineLayerMirInfo::GetL2RdAccess((uint64_t)this[33], 1);
  uint64_t v11 = (unsigned int *)ZinEngineLayerMirInfo::GetL2RdAccess((uint64_t)this[33], 2);
  char v12 = (unsigned int *)((char *)this[33] + 1608);
  unint64_t MirUnitSymbolInfoFromL2Access = ZinSerial::GetMirUnitSymbolInfoFromL2Access(L2RdAccess, a3);
  LOBYTE(L2RdAccess) = v14;
  uint64_t MirUnitSymbolInfoFromDRAMAccess = MirUnitSymbolInfoFromL2Access;
  LODWORD(v26) = v14;
  unint64_t v23 = ZinSerial::GetMirUnitSymbolInfoFromL2Access(v10, a3);
  LODWORD(v24) = v15;
  unint64_t v21 = ZinSerial::GetMirUnitSymbolInfoFromL2Access(v11, a3);
  LODWORD(v22) = v16;
  unint64_t v19 = ZinSerial::GetMirUnitSymbolInfoFromL2Access(v12, a3);
  LODWORD(v2std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v17;
  if (!(_BYTE)L2RdAccess
    || !(_BYTE)v17
    || ZinSerial::Serializer::Serialize((unint64_t *)a1, &MirUnitSymbolInfoFromDRAMAccess)
    || ZinSerial::Serializer::Serialize<ZinMirUnitL2Symbol>((unint64_t *)a1, (uint64_t)&v23)
    || ZinSerial::Serializer::Serialize<ZinMirUnitL2Symbol>((unint64_t *)a1, (uint64_t)&v21)
    || ZinSerial::Serializer::Serialize((unint64_t *)a1, &v19))
  {
    return 3;
  }
  uint64_t v18 = this[33];
  if (!v18) {
LABEL_18:
  }
    ZinAssertImpl("No MIR info present!", v19, v20, v21, v22, v23, v24, MirUnitSymbolInfoFromDRAMAccess, v26);
  uint64_t MirUnitSymbolInfoFromDRAMAccess = ZinSerial::GetMirUnitSymbolInfoFromDRAMAccess((uint64_t)v18 + 712, a3);
  unint64_t v23 = ZinSerial::GetMirUnitSymbolInfoFromDRAMAccess((uint64_t)this[33] + 808, a3);
  unint64_t v21 = ZinSerial::GetMirUnitSymbolInfoFromDRAMAccess((uint64_t)this[33] + 904, a3);
  if (ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)a1, (uint64_t)&MirUnitSymbolInfoFromDRAMAccess))return 3; {
  if (ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)a1, (uint64_t)&v23))
  }
    return 3;
  uint64_t result = ZinSerial::Serializer::Serialize<unsigned int>((uint64_t *)a1, (uint64_t)&v21);
  if (result) {
    return 3;
  }
  return result;
}

uint64_t ZinSerial::SerializeNoOpLayer(uint64_t *a1, ZinTransposeLayer *this, void *a3)
{
  int v4 = *(_DWORD *)(*((void *)this + 8) + 8);
  uint64_t result = 6;
  uint64_t v8 = 0;
  switch(v4)
  {
    case 28:
    case 30:
    case 31:
      return v8;
    case 29:
      uint64_t v9 = *(void *)((*(uint64_t (**)(ZinTransposeLayer *, void, void))(*(void *)this + 32))(this, 0, 0)+ 104);
      if (!v9 || (long long v10 = *(void ****)(v9 + 40), v10 == *(void ****)(v9 + 48)) || (v30[0] = *v10) == 0) {
        ZinAssertImpl("Unexpected null symbol for ConstIn layer.");
      }
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v30))ZinAssertImpl("ConstIn' tensor's symbol not found in map."); {
      uint64_t v11 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v30);
      }
      if (!v11) {
        goto LABEL_49;
      }
      uint64_t v12 = a1[1];
      if (!v12) {
        goto LABEL_10;
      }
      if (*a1 + 4 > (unint64_t)a1[2]) {
        return 3;
      }
      *(_DWORD *)(v12 + *a1) = *((_DWORD *)v11 + 6);
LABEL_10:
      uint64_t v8 = 0;
      uint64_t v13 = *a1 + 4;
      goto LABEL_35;
    case 32:
    case 34:
      return result;
    case 33:
      int v16 = (ZinIrTensor *)(*(uint64_t (**)(ZinTransposeLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
      if (!v16) {
        ZinAssertImpl("Unexpected null tensor for alias layer.");
      }
      int v17 = v16;
      v30[0] = (void **)ZinIrTensor::GetInterleave(v16);
      v30[1] = v18;
      uint64_t v19 = *((void *)v17 + 13);
      if (!v19
        || (uint64_t v20 = *(const ZinIrInputViewUnitInfo ****)(v19 + 40), v20 == *(const ZinIrInputViewUnitInfo ****)(v19 + 48))
        || (v29[0] = *v20) == 0)
      {
        ZinAssertImpl("Unexpected null symbol for alias layer.");
      }
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v29))ZinAssertImpl("Alias' tensor's symbol not found in map."); {
      unint64_t v21 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v29);
      }
      if (!v21) {
LABEL_49:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      int v22 = *((_DWORD *)v21 + 6);
      BOOL IsResident = ZinIrTensor::IsResident(v17);
      if (ZinSerial::Serializer::Serialize<long>(a1, (uint64_t)v30)) {
        return 3;
      }
      uint64_t v25 = a1[1];
      unint64_t v26 = *a1 + 4;
      if (!v25) {
        goto LABEL_34;
      }
      if (v26 > a1[2]) {
        return 3;
      }
      *(_DWORD *)(v25 + *a1) = v22;
      uint64_t v28 = *a1;
      uint64_t v27 = a1[1];
      unint64_t v26 = *a1 + 4;
      *a1 = v26;
      if (!v27) {
        goto LABEL_34;
      }
      if (v28 + 5 > (unint64_t)a1[2]) {
        return 3;
      }
      *(unsigned char *)(v27 + v26) = IsResident;
      unint64_t v26 = *a1;
LABEL_34:
      uint64_t v8 = 0;
      uint64_t v13 = v26 + 1;
LABEL_35:
      *a1 = v13;
      return v8;
    case 35:
      uint64_t ReshapeInfo = (const ZinIrReshapeInfo *)ZinReshapeLayer::GetReshapeInfo(this);
      return ZinSerial::Serializer::Serialize<ZinIrReshapeInfo>((ZinSerial::Serializer *)a1, ReshapeInfo);
    case 36:
      if (!(*(uint64_t (**)(ZinTransposeLayer *, void, void))(*(void *)this + 32))(this, 0, 0)) {
        ZinAssertImpl("Tensor should exist.");
      }
      memset(v29, 0, sizeof(v29));
      if (ZinViewLayer::IsViewInDimension(this, 0)) {
        operator new();
      }
      if (ZinViewLayer::IsViewInDimension(this, 2)) {
        operator new();
      }
      if (ZinViewLayer::IsViewInDimension(this, 3)) {
        operator new();
      }
      if (ZinViewLayer::IsViewInDimension(this, 4)) {
        operator new();
      }
      if (ZinViewLayer::IsViewInDimension(this, 1)) {
        operator new();
      }
      uint64_t v8 = ZinSerial::Serializer::Serialize<std::unique_ptr<ZinIrInputViewUnitInfo>>((ZinSerial::Serializer *)a1, v29);
      v30[0] = (void **)v29;
      std::vector<std::unique_ptr<ZinIrInputViewUnitInfo>>::__destroy_vector::operator()[abi:ne180100](v30);
      return v8;
    case 37:
      if ((ZinTransposeLayer::IsNoOpTranspose(this) & 1) == 0) {
        ZinAssertImpl("Only to be used for NoOp transposes.");
      }
      int v15 = (char **)ZinReshapeLayer::GetReshapeInfo(this);
      if (!v15) {
        ZinAssertImpl("Transpose should not have a null info.");
      }
      return ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>((ZinSerial::Serializer *)a1, v15);
    default:
      if (v4 != 7) {
        return result;
      }
      return ZinSerial::Serializer::Serialize<ZinIrConcatInfo>((ZinSerial::Serializer *)a1, *((const ZinIrConcatInfo **)this + 8));
  }
}

void sub_21121F194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a10;
  std::vector<std::unique_ptr<ZinIrInputViewUnitInfo>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::SerializeOrderedOpLayers(uint64_t *a1, ZinIrOpLayer ***a2, void *a3, void *a4)
{
  size_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  if (v9)
  {
    if (*a1 + 4 > (unint64_t)a1[2]) {
      return 3;
    }
    *(_DWORD *)(v9 + *a1) = (unint64_t)((char *)v8 - (char *)v7) >> 3;
    size_t v7 = *a2;
    uint64_t v8 = a2[1];
  }
  *a1 += 4;
  while (1)
  {
    if (v7 == v8) {
      return 0;
    }
    uint64_t v11 = *v7;
    uint64_t result = ZinSerial::SerializeZinIrOpLayer(a1, *v7, a3, a4);
    if (result) {
      break;
    }
    ++v7;
  }
  if (result == 6)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinSerial::SerializeOrderedOpLayers((uint64_t)v11);
    }
    return 6;
  }
  return result;
}

uint64_t ZinSerial::SerializeGraphData(unint64_t *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  memset(v95, 0, sizeof(v95));
  int v96 = 1065353216;
  memset(v93, 0, sizeof(v93));
  int v94 = 1065353216;
  if (ZinSerial::SerializeSymbolTable(a1, a2, v95))
  {
    BOOL v9 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v9) {
      ZinSerial::SerializeGraphData(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else if (ZinSerial::SerializeSymbolTable(a1, a3, v95))
  {
    BOOL v17 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v17) {
      ZinSerial::SerializeGraphData(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  else if (ZinSerial::SerializeSymbolTable(a1, a4, v95))
  {
    BOOL v25 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v25) {
      ZinSerial::SerializeGraphData(v25, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  else
  {
    uint64_t v92 = a1;
    long long v101 = 0;
    char v102 = 0;
    unint64_t v103 = 0;
    if (!*(void *)(a5 + 344)) {
      ZinAssertImpl("Must run scheduler first");
    }
    uint64_t v33 = *(void **)(a5 + 328);
    uint64_t v34 = (void *)(a5 + 336);
    if (v33 != (void *)(a5 + 336))
    {
      __format = "Error: Unable to retrieve edge type for basic blocks.";
      do
      {
        uint64_t v35 = v33 + 4;
        if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v93, v33 + 4))
        {
          uint64_t v37 = v101;
          uint64_t v36 = v102;
          v104[0] = v33 + 4;
          std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v93, v33 + 4, (uint64_t)&std::piecewise_construct, v104)[3] = 0xCCCCCCCCCCCCCCCDLL * ((v36 - v37) >> 3);
          v104[0] = v33 + 4;
          int v38 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)(a5 + 64), v104);
          uint64_t v39 = v38 + 3;
          if (!v38) {
            uint64_t v39 = (uint64_t **)(a5 + 104);
          }
          char v99 = 0;
          uint64_t v100 = 0;
          std::string __p = 0;
          uint64_t v40 = (uint64_t **)*v39;
          uint64_t v41 = (uint64_t **)v39[1];
          if (*v39 == (uint64_t *)v41)
          {
            int v57 = 0;
            uint64_t v46 = 0;
            long long v56 = 0;
          }
          else
          {
            do
            {
              unint64_t v42 = *v40;
              int v97 = 2;
              if ((ZinIrControlFlowGraph::HasEdge(a5, *v42, *v35, &v97) & 1) == 0) {
                goto LABEL_66;
              }
              if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v93, v42))
              {
                __format = "Error: Incoming basic block cannot be found in map.  Basic blocks may be serialized out of order.";
LABEL_66:
                ZinAssertImpl(__format);
              }
              int v43 = v97;
              v104[0] = v42;
              uint64_t v44 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)v93, v42, (uint64_t)&std::piecewise_construct, v104)[3];
              uint64_t v45 = v99;
              if (v99 >= v100)
              {
                uint64_t v47 = (v99 - (unsigned char *)__p) >> 4;
                unint64_t v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 60) {
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v49 = v100 - (unsigned char *)__p;
                if ((v100 - (unsigned char *)__p) >> 3 > v48) {
                  unint64_t v48 = v49 >> 3;
                }
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v50 = v48;
                }
                if (v50) {
                  uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v100, v50);
                }
                else {
                  uint64_t v51 = 0;
                }
                int v52 = (int *)&v51[16 * v47];
                *int v52 = v43;
                v52[1] = 0;
                *((void *)v52 + 1) = v44;
                int v54 = (char *)__p;
                uint64_t v53 = v99;
                std::vector<std::string> v55 = (char *)v52;
                if (v99 != __p)
                {
                  do
                  {
                    *((_OWORD *)v55 - 1) = *((_OWORD *)v53 - 1);
                    v55 -= 16;
                    v53 -= 16;
                  }
                  while (v53 != v54);
                  uint64_t v53 = (char *)__p;
                }
                uint64_t v46 = (char *)(v52 + 4);
                std::string __p = v55;
                char v99 = (char *)(v52 + 4);
                uint64_t v100 = &v51[16 * v50];
                if (v53) {
                  operator delete(v53);
                }
              }
              else
              {
                *(_DWORD *)char v99 = v43;
                *((_DWORD *)v45 + 1) = 0;
                uint64_t v46 = v45 + 16;
                *((void *)v45 + 1) = v44;
              }
              char v99 = v46;
              ++v40;
            }
            while (v40 != v41);
            long long v56 = __p;
            int v57 = v100;
          }
          uint64_t v58 = *v35;
          uint64_t v60 = *(void *)*v35;
          uint64_t v59 = *(void *)(v58 + 8);
          char v99 = 0;
          uint64_t v100 = 0;
          std::string __p = 0;
          uint64_t v61 = v102;
          if ((unint64_t)v102 >= v103)
          {
            unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((v102 - v101) >> 3);
            unint64_t v64 = v63 + 1;
            if (v63 + 1 > 0x666666666666666) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((uint64_t)(v103 - (void)v101) >> 3) > v64) {
              unint64_t v64 = 0x999999999999999ALL * ((uint64_t)(v103 - (void)v101) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v103 - (void)v101) >> 3) >= 0x333333333333333) {
              unint64_t v65 = 0x666666666666666;
            }
            else {
              unint64_t v65 = v64;
            }
            v104[4] = &v103;
            uint64_t v66 = std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v103, v65);
            uint64_t v67 = &v66[5 * v63];
            v104[0] = v66;
            v104[1] = v67;
            v104[3] = &v66[5 * v68];
            *uint64_t v67 = v60;
            v67[1] = v59;
            v67[2] = v56;
            v67[3] = 0;
            v67[3] = v46;
            v67[4] = v57;
            v104[2] = v67 + 5;
            std::vector<ZinMirUnitBasicBlock>::__swap_out_circular_buffer((uint64_t *)&v101, v104);
            uint64_t v62 = v102;
            std::__split_buffer<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::~__split_buffer((uint64_t)v104);
          }
          else
          {
            *(void *)char v102 = v60;
            *((void *)v61 + 1) = v59;
            *((void *)v61 + 2) = v56;
            *((void *)v61 + 3) = v46;
            uint64_t v62 = v61 + 40;
            *((void *)v61 + 4) = v57;
          }
          uint64_t v34 = (void *)(a5 + 336);
          char v102 = v62;
          if (__p)
          {
            char v99 = (char *)__p;
            operator delete(__p);
          }
        }
        uint64_t v69 = (void *)v33[1];
        if (v69)
        {
          do
          {
            uint64_t v70 = v69;
            uint64_t v69 = (void *)*v69;
          }
          while (v69);
        }
        else
        {
          do
          {
            uint64_t v70 = (void *)v33[2];
            BOOL v71 = *v70 == (void)v33;
            uint64_t v33 = v70;
          }
          while (!v71);
        }
        uint64_t v33 = v70;
      }
      while (v70 != v34);
    }
    int v72 = ZinSerial::Serializer::Serialize<ZinMirUnitBasicBlock>(v92, &v101);
    v104[0] = &v101;
    std::vector<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::__destroy_vector::operator()[abi:ne180100]((void ***)v104);
    if (v72)
    {
      BOOL v73 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v73) {
        ZinSerial::SerializeGraphData(v73, v74, v75, v76, v77, v78, v79, v80);
      }
    }
    else
    {
      if (*(void *)(a5 + 360) == *(void *)(a5 + 352)) {
        ZinAssertImpl("Must run scheduler first");
      }
      if (!ZinSerial::SerializeOrderedOpLayers((uint64_t *)v92, (ZinIrOpLayer ***)(a5 + 352), v95, v93))
      {
        uint64_t v89 = 0;
        goto LABEL_63;
      }
      BOOL v81 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v81) {
        ZinSerial::SerializeGraphData(v81, v82, v83, v84, v85, v86, v87, v88);
      }
    }
  }
  uint64_t v89 = 3;
LABEL_63:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v93);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v95);
  return v89;
}

void sub_21121F878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  std::string __p = (void *)(v31 - 160);
  std::vector<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::SerializeSymbolTable(unint64_t *a1, void *a2, void *a3)
{
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  std::vector<ZinMirUnitSymbolInfo>::reserve(&v69, a2[2]);
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v8 = (void *)*a2;
  uint64_t v6 = a2 + 1;
  size_t v7 = v8;
  if (v8 != v6)
  {
    do
    {
      uint64_t v10 = v7 + 4;
      uint64_t v9 = v7[4];
      if (!v9) {
        ZinAssertImpl("Unexpected null symbol.");
      }
      memset(__p, 0, sizeof(__p));
      *(void *)&long long v46 = -1;
      *((void *)&v46 + 1) = -1;
      LOBYTE(v47) = 0;
      char v60 = 0;
      LOBYTE(v61) = 0;
      char v62 = 0;
      v63[0] = 0;
      v63[24] = 0;
      LOBYTE(v64) = 0;
      char v65 = 0;
      uint64_t v44 = (void **)vrev64_s32(*(int32x2_t *)(v9 + 152));
      std::string::operator=(__p, (const std::string *)(v9 + 160));
      *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = *(_OWORD *)(v9 + 16);
      __p[1].__r_.__value_.__r.__words[2] = *(void *)(v9 + 184);
      long long v46 = *(_OWORD *)(v9 + 192);
      long long v11 = *(_OWORD *)(v9 + 384);
      long long v57 = *(_OWORD *)(v9 + 368);
      long long v58 = v11;
      long long v59 = *(_OWORD *)(v9 + 400);
      long long v12 = *(_OWORD *)(v9 + 352);
      long long v55 = *(_OWORD *)(v9 + 336);
      long long v56 = v12;
      long long v13 = *(_OWORD *)(v9 + 320);
      long long v53 = *(_OWORD *)(v9 + 304);
      long long v54 = v13;
      long long v14 = *(_OWORD *)(v9 + 256);
      long long v49 = *(_OWORD *)(v9 + 240);
      long long v50 = v14;
      long long v15 = *(_OWORD *)(v9 + 288);
      long long v51 = *(_OWORD *)(v9 + 272);
      long long v52 = v15;
      long long v16 = *(_OWORD *)(v9 + 224);
      long long v47 = *(_OWORD *)(v9 + 208);
      long long v48 = v16;
      if (!v60) {
        char v60 = 1;
      }
      long long v61 = *(_OWORD *)(v9 + 520);
      if (!v62) {
        char v62 = 1;
      }
      long long v17 = *(_OWORD *)(v9 + 32);
      *(_OWORD *)&v63[9] = *(_OWORD *)(v9 + 41);
      *(_OWORD *)unint64_t v63 = v17;
      v72[0] = *(void **)(v9 + 512);
      if (v72[0]
        && std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v72))
      {
        uint64_t v18 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v72);
        if (!v18) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        int v64 = *((_DWORD *)v18 + 6);
        char v65 = 1;
      }
      std::vector<ZinMirUnitSymbolInfo>::push_back[abi:ne180100](&v69, (uint64_t)&v44);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      uint64_t v19 = v69;
      uint64_t v20 = v70;
      if (std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, v7 + 4))
      {
        ZinAssertImpl("Duplicate symbol found in symbol table.");
      }
      v72[0] = v7 + 4;
      uint64_t v21 = std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)a3, v7 + 4, (uint64_t)&std::piecewise_construct, v72);
      unsigned int v22 = -1 - 1171354717 * ((unint64_t)(v20 - v19) >> 5);
      *((_DWORD *)v21 + 6) = v22;
      uint64_t v23 = *v10;
      if (*(void *)(*v10 + 512) && !*(unsigned char *)(v19 + 352 * v22 + 348))
      {
        uint64_t v24 = v19 + 352 * v22;
        BOOL v25 = v67;
        if (v67 >= v68)
        {
          uint64_t v27 = (v67 - v66) >> 4;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = v68 - v66;
          if ((v68 - v66) >> 3 > v28) {
            unint64_t v28 = v29 >> 3;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30) {
            uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)&v68, v30);
          }
          else {
            uint64_t v31 = 0;
          }
          uint64_t v32 = (uint64_t *)&v31[16 * v27];
          uint64_t *v32 = v24;
          v32[1] = v23;
          uint64_t v34 = v66;
          uint64_t v33 = v67;
          uint64_t v35 = (char *)v32;
          if (v67 != v66)
          {
            do
            {
              *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
              v35 -= 16;
              v33 -= 16;
            }
            while (v33 != v34);
            uint64_t v33 = v66;
          }
          uint64_t v26 = (char *)(v32 + 2);
          uint64_t v66 = v35;
          uint64_t v67 = (char *)(v32 + 2);
          uint64_t v68 = &v31[16 * v30];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(void *)uint64_t v67 = v24;
          *((void *)v25 + 1) = v23;
          uint64_t v26 = v25 + 16;
        }
        uint64_t v67 = v26;
      }
      uint64_t v36 = (void *)v7[1];
      if (v36)
      {
        do
        {
          uint64_t v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          uint64_t v37 = (void *)v7[2];
          BOOL v38 = *v37 == (void)v7;
          size_t v7 = v37;
        }
        while (!v38);
      }
      size_t v7 = v37;
    }
    while (v37 != v6);
    uint64_t v39 = v66;
    for (uint64_t i = v67; v39 != i; v39 += 16)
    {
      uint64_t v41 = *(void *)v39;
      uint64_t v44 = *(void ***)(*((void *)v39 + 1) + 512);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v44))ZinAssertImpl("Symbol not yet serialized.  All symbols should be serialized at this point."); {
      v72[0] = &v44;
      }
      *(_DWORD *)(v41 + 344) = *((_DWORD *)std::__hash_table<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,true>,std::__unordered_map_equal<ZinIrTensor const*,std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>,std::equal_to<ZinIrTensor const*>,std::hash<ZinIrTensor const*>,true>,std::allocator<std::__hash_value_type<ZinIrTensor const*,CpAllocUtils::AllocationType>>>::__emplace_unique_key_args<ZinIrTensor const*,std::piecewise_construct_t const&,std::tuple<ZinIrTensor const* const&>,std::tuple<>>((uint64_t)a3, &v44, (uint64_t)&std::piecewise_construct, v72)+ 6);
      *(unsigned char *)(v41 + 348) = 1;
    }
  }
  uint64_t v42 = ZinSerial::Serializer::Serialize<ZinMirUnitSymbolInfo>(a1, &v69);
  if (v66)
  {
    uint64_t v67 = v66;
    operator delete(v66);
  }
  uint64_t v44 = (void **)&v69;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](&v44);
  return v42;
}

void sub_21121FD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  unsigned int v22 = *(void **)(v20 - 152);
  if (v22)
  {
    *(void *)(v20 - 144) = v22;
    operator delete(v22);
  }
  a14 = v20 - 128;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::SerializeIOData(ZinSerial::Serializer *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  std::map<std::string,std::string>::map[abi:ne180100](v61, a2);
  std::map<std::string,std::string>::map[abi:ne180100](v62, a2 + 24);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v63, a2 + 48);
  std::map<std::string,std::string>::map[abi:ne180100](v65, a2 + 72);
  long long v50 = a5;
  v60[0] = 0;
  v60[1] = 0;
  v58[1] = 0;
  long long v59 = (uint64_t *)v60;
  long long v55 = v56;
  v56[0] = 0;
  v56[1] = 0;
  long long v57 = v58;
  v58[0] = 0;
  if (a6 && &v55 != (char ***)a6) {
    std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,long>,std::__tree_node<std::__value_type<std::string,long>,void *> *,long>>((uint64_t **)&v55, *(void **)a6, (void *)(a6 + 8));
  }
  long long v49 = a1;
  long long v12 = (void *)*a3;
  uint64_t v10 = a3 + 1;
  long long v11 = v12;
  if (v12 != v10)
  {
    long long v13 = v10;
    long long v14 = a4 + 1;
    uint64_t v51 = a6 + 24;
    do
    {
      long long v15 = (void *)v11[4];
      if (v15[12] == v15[11]) {
        ZinAssertImpl("No incoming layers into liveout.");
      }
      uint64_t v16 = (*(uint64_t (**)(void, void, void))(*v15 + 32))(v11[4], 0, 0);
      uint64_t v17 = v16;
      if (!v16) {
        ZinAssertImpl("Unexpected null tensor.");
      }
      uint64_t v18 = *(void *)(v16 + 104);
      if (!v18 || (uint64_t v19 = *(uint64_t **)(v18 + 40), v19 == *(uint64_t **)(v18 + 48)) || (v20 = *v19) == 0) {
        ZinAssertImpl("Unexpected null symbol.");
      }
      uint64_t v21 = (uint64_t *)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v63, (void **)(v20 + 160));
      if (&v64 != (void **)v21)
      {
        unsigned int v22 = (std::string *)(*(void *)v15[11] + 24);
        std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(&v63, v21);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v21 + 4));
        operator delete(v21);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        uint64_t v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v63, (void **)&v22->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v54);
        std::string::operator=((std::string *)(v23 + 7), v22);
        memset(&v54, 0, sizeof(v54));
        uint64_t v24 = (void *)*a4;
        if ((void *)*a4 != v14)
        {
          while (1)
          {
            uint64_t v25 = *(unsigned __int8 *)(v17 + 47);
            if ((v25 & 0x80u) == 0) {
              uint64_t v26 = *(unsigned __int8 *)(v17 + 47);
            }
            else {
              uint64_t v26 = *(void *)(v17 + 32);
            }
            uint64_t v27 = *((unsigned __int8 *)v24 + 103);
            int v28 = (char)v27;
            if ((v27 & 0x80u) != 0) {
              uint64_t v27 = v24[11];
            }
            if (v26 != v27) {
              goto LABEL_30;
            }
            uint64_t v29 = v28 >= 0 ? (unsigned __int8 *)(v24 + 10) : (unsigned __int8 *)v24[10];
            if ((v25 & 0x80) == 0) {
              break;
            }
            if (!memcmp(*(const void **)(v17 + 24), v29, *(void *)(v17 + 32))) {
              goto LABEL_29;
            }
LABEL_30:
            uint64_t v32 = (void *)v24[1];
            if (v32)
            {
              do
              {
                uint64_t v33 = v32;
                uint64_t v32 = (void *)*v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                uint64_t v33 = (void *)v24[2];
                BOOL v34 = *v33 == (void)v24;
                uint64_t v24 = v33;
              }
              while (!v34);
            }
            uint64_t v24 = v33;
            if (v33 == v14) {
              goto LABEL_36;
            }
          }
          if (*(unsigned char *)(v17 + 47))
          {
            unint64_t v30 = (unsigned __int8 *)(v17 + 24);
            while (*v30 == *v29)
            {
              ++v30;
              ++v29;
              if (!--v25) {
                goto LABEL_29;
              }
            }
            goto LABEL_30;
          }
LABEL_29:
          v66[0] = (long long *)(v24 + 4);
          uint64_t v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v59, (void **)v24 + 4, (uint64_t)&std::piecewise_construct, v66);
          std::string::operator=((std::string *)(v31 + 7), v22);
          std::string::operator=(&v54, (const std::string *)(v24 + 4));
          goto LABEL_30;
        }
LABEL_36:
        if (a6
          && (void **)(a6 + 32) != std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v51, (void **)(v17 + 24)))
        {
          uint64_t v35 = *(void *)std::map<std::string,BOOL>::at(v51, (void **)(v17 + 24));
          v66[0] = (long long *)&v54;
          std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v57, (void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v66)[7] = v35;
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v36 = (void *)v11[1];
      if (v36)
      {
        do
        {
          uint64_t v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          uint64_t v37 = (void *)v11[2];
          BOOL v34 = *v37 == (void)v11;
          long long v11 = v37;
        }
        while (!v34);
      }
      long long v11 = v37;
    }
    while (v37 != v13);
  }
  *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = 0uLL;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54.__r_.__value_.__l.__size_;
  uint64_t v39 = a5 + 1;
  BOOL v38 = (void *)*v50;
  if ((void *)*v50 != v50 + 1)
  {
    do
    {
      uint64_t v40 = (void **)(v38 + 4);
      if (*((unsigned char *)v38 + 192))
      {
        v66[0] = (long long *)(v38 + 4);
        uint64_t v41 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v54, v40, (uint64_t)&std::piecewise_construct, v66);
        long long v42 = *(_OWORD *)(v38 + 19);
        long long v43 = *(_OWORD *)(v38 + 21);
        uint64_t v44 = v38[23];
      }
      else
      {
        v66[0] = (long long *)(v38 + 4);
        uint64_t v41 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v54, v40, (uint64_t)&std::piecewise_construct, v66);
        long long v42 = *((_OWORD *)v38 + 7);
        long long v43 = *((_OWORD *)v38 + 8);
        uint64_t v44 = v38[18];
      }
      v41[11] = v44;
      *(_OWORD *)(v41 + 9) = v43;
      *(_OWORD *)(v41 + 7) = v42;
      uint64_t v45 = (void *)v38[1];
      if (v45)
      {
        do
        {
          long long v46 = v45;
          uint64_t v45 = (void *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          long long v46 = (void *)v38[2];
          BOOL v34 = *v46 == (void)v38;
          BOOL v38 = v46;
        }
        while (!v34);
      }
      BOOL v38 = v46;
    }
    while (v46 != v39);
  }
  if (ZinSerial::Serializer::Serialize(v49, (const ZinIrNameMaps *)v61)
    || ZinSerial::Serializer::Serialize<std::string,std::string>(v49, (uint64_t)&v59)
    || ZinSerial::Serializer::Serialize(v49, (const ZinIrLiveIORankMaps *)&v55))
  {
    uint64_t v47 = 3;
  }
  else if (ZinSerial::Serializer::Serialize<std::string,ZinTensorDimensions>(v49, (uint64_t)&v54))
  {
    uint64_t v47 = 3;
  }
  else
  {
    uint64_t v47 = 0;
  }
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v54, (char *)v54.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v57, v58[0]);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v55, v56[0]);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)&v59, v60[0]);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)v65, (void *)v65[1]);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)&v63, v64);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)v62, (void *)v62[1]);
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy((uint64_t)v61, (void *)v61[1]);
  return v47;
}

void sub_211220310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
}

uint64_t ZinSerial::Serializer::Serialize<std::string,ZinTensorDimensions>(ZinSerial::Serializer *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 1);
  if (v3)
  {
    if ((unint64_t)(*(void *)a1 + 4) > *((void *)a1 + 2)) {
      return 3;
    }
    *(_DWORD *)(v3 + *(void *)a1) = *(_DWORD *)(a2 + 16);
  }
  *(void *)a1 += 4;
  uint64_t v5 = (void *)(a2 + 8);
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2 == a2 + 8) {
    return 0;
  }
  while (1)
  {
    uint64_t result = ZinSerial::BufferWriter::Write<std::string const>(a1, v6 + 4);
    if (result) {
      break;
    }
    uint64_t result = ZinSerial::Serializer::Serialize(a1, (const ZinTensorDimensions *)(v6 + 7));
    if (result) {
      break;
    }
    size_t v7 = (void *)v6[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        size_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v6[2];
        BOOL v9 = *v8 == (void)v6;
        uint64_t v6 = v8;
      }
      while (!v9);
    }
    uint64_t v6 = v8;
    if (v8 == v5) {
      return 0;
    }
  }
  return result;
}

void ZinIrLiveIORankMaps::~ZinIrLiveIORankMaps(char **this)
{
}

uint64_t ZinSerial::SerializeBarUsage(ZinSerial::Serializer *a1, uint64_t a2, void *a3)
{
  std::map<BarIdType,unsigned char>::map[abi:ne180100](v38, a2);
  uint64_t v39 = v40;
  v40[0] = 0;
  v40[1] = 0;
  memset(v41, 0, sizeof(v41));
  uint64_t v8 = *(void ***)(a2 + 24);
  uint64_t v7 = a2 + 24;
  uint64_t v6 = v8;
  BOOL v9 = (void **)(v7 + 8);
  if (v8 != (void **)(v7 + 8))
  {
    do
    {
      if (!*((_DWORD *)v6 + 14))
      {
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)(v6 + 4);
        uint64_t v10 = std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v39, v6 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v37);
        uint64_t v11 = (uint64_t)v6[7];
        *((unsigned char *)v10 + 64) = *((unsigned char *)v6 + 64);
        v10[7] = v11;
      }
      long long v12 = (void **)v6[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          long long v12 = (void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (void **)v6[2];
          BOOL v14 = *v13 == v6;
          uint64_t v6 = v13;
        }
        while (!v14);
      }
      uint64_t v6 = v13;
    }
    while (v13 != v9);
  }
  BOOL v34 = a1;
  uint64_t v17 = (void *)*a3;
  long long v15 = a3 + 1;
  uint64_t v16 = v17;
  if (v17 == v15)
  {
LABEL_46:
    uint64_t v32 = ZinSerial::Serializer::Serialize(v34, (const ZinBarUsage *)v38);
  }
  else
  {
    while (1)
    {
      uint64_t v18 = *(void **)(v16[4] + 88);
      if (*(void **)(v16[4] + 96) == v18) {
        ZinAssertImpl("No incoming layers into liveout.", v34);
      }
      uint64_t v19 = *v18;
      uint64_t v20 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(*(void *)*v18 + 32))(*v18, 0, 0);
      if (!v20) {
        ZinAssertImpl("Unexpected null tensor.", v34);
      }
      uint64_t RootTensor = ZinIrTensor::GetRootTensor(v20);
      unsigned int v22 = RootTensor;
      if (!RootTensor) {
        ZinAssertImpl("Unexpected null root tensor.", v34);
      }
      if (*((char *)RootTensor + 47) < 0) {
        std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)RootTensor + 3), *((void *)RootTensor + 4));
      }
      else {
        std::string v37 = *(std::string *)((unsigned char *)RootTensor + 1);
      }
      uint64_t v23 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v7, (void **)&v37.__r_.__value_.__l.__data_);
      if (v9 == v23) {
        break;
      }
      uint64_t v24 = *((void *)v22 + 12);
      if (*(char *)(v24 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v24 + 24), *(void *)(v24 + 32));
        uint64_t v24 = *((void *)v22 + 12);
      }
      else
      {
        std::string v36 = *(std::string *)(v24 + 24);
      }
      if (v19 == v24)
      {
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v36.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v35, size + 4);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v26 = &v35;
        }
        else {
          uint64_t v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &v36;
          }
          else {
            uint64_t v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
          }
          memmove(v26, v27, size);
        }
        strcpy((char *)v26 + size, "/src");
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        std::string v36 = v35;
      }
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      int v28 = std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v39, (void **)&v36.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v35);
      uint64_t v29 = v23[7];
      *((unsigned char *)v28 + 64) = *((unsigned char *)v23 + 64);
      v28[7] = (uint64_t)v29;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      unint64_t v30 = (void *)v16[1];
      if (v30)
      {
        do
        {
          uint64_t v31 = v30;
          unint64_t v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          uint64_t v31 = (void *)v16[2];
          BOOL v14 = *v31 == (void)v16;
          uint64_t v16 = v31;
        }
        while (!v14);
      }
      uint64_t v16 = v31;
      if (v31 == v15) {
        goto LABEL_46;
      }
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    uint64_t v32 = 3;
  }
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v39, v40[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v38, (void *)v38[1]);
  return v32;
}

void sub_21122084C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26)
{
}

uint64_t ZinSerial::Serializer::Serialize<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>(ZinSerial::Serializer *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 1);
  if (v3)
  {
    if ((unint64_t)(*(void *)a1 + 4) > *((void *)a1 + 2)) {
      return 3;
    }
    *(_DWORD *)(v3 + *(void *)a1) = *(_DWORD *)(a2 + 24);
  }
  *(void *)a1 += 4;
  uint64_t v5 = (const ZinLargeStridePoolTransform ***)(a2 + 16);
  while (1)
  {
    uint64_t v5 = (const ZinLargeStridePoolTransform ***)*v5;
    if (!v5) {
      break;
    }
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *((void *)a1 + 1);
    if (v7)
    {
      if ((unint64_t)(v6 + 8) > *((void *)a1 + 2)) {
        return 3;
      }
      *(void *)(v7 + v6) = v5[2];
      uint64_t v6 = *(void *)a1;
    }
    *(void *)a1 = v6 + 8;
    uint64_t result = ZinSerial::Serializer::Serialize<std::unique_ptr<ZinShapeDependentTransform>>(a1, v5 + 3);
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t ZinSerial::SerializeGraphAndMetadata(uint64_t *a1, uint64_t a2)
{
  memset(v45, 0, sizeof(v45));
  LODWORD(v45[0]) = -1413844880;
  DWORD2(v45[0]) = 1179649;
  if (ZinSerial::Serializer::Serialize(a1, (uint64_t)v45))
  {
    BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v4) {
      ZinSerial::SerializeGraphAndMetadata(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    return 3;
  }
  uint64_t v12 = *a1;
  if (ZinSerial::SerializeIOData((ZinSerial::Serializer *)a1, *(void *)a2, *(void **)(a2 + 24), *(void **)(a2 + 32), *(void **)(a2 + 40), *(void *)(a2 + 48)))
  {
    BOOL v13 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v13) {
      ZinSerial::SerializeGraphAndMetadata(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    return 3;
  }
  uint64_t v21 = *a1;
  if (ZinSerial::SerializeBarUsage((ZinSerial::Serializer *)a1, *(void *)(a2 + 16), *(void **)(a2 + 24)))
  {
    BOOL v22 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v22) {
      ZinSerial::SerializeGraphAndMetadata(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    return 3;
  }
  uint64_t v30 = *a1;
  if (ZinSerial::SerializeGraphData((unint64_t *)a1, *(void **)(a2 + 64), *(void **)(a2 + 72), *(void **)(a2 + 80), *(void *)(a2 + 8)))return 3; {
  uint64_t v31 = *a1;
  }
  if (ZinSerial::Serializer::Serialize<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>((ZinSerial::Serializer *)a1, *(void *)(a2 + 56)))
  {
    BOOL v32 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v32) {
      ZinSerial::SerializeGraphAndMetadata(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    return 3;
  }
  uint64_t v41 = a1[1];
  if (!v41) {
    return 0;
  }
  uint64_t v42 = *a1;
  uint64_t v43 = *a1 - v31;
  *(void *)(v41 + 16) = v12;
  *(void *)(v41 + 24) = v21 - v12;
  *(void *)(v41 + 32) = v21;
  *(void *)(v41 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v30 - v21;
  *(void *)(v41 + 48) = v30;
  *(void *)(v41 + 56) = v31 - v30;
  *(void *)(v41 + 64) = v31;
  *(void *)(v41 + 72) = v43;
  int v44 = ZinHash((const void *)(v41 + 8), (int)v42 - 8);
  uint64_t result = 0;
  *(_DWORD *)(v41 + 4) = v44;
  return result;
}

uint64_t ZinSerial::SerializeDataAndWriteToSection(uint64_t a1, void **a2, uint64_t *a3)
{
  size_t SerializedDataSize = ZinSerial::GetSerializedDataSize(a1);
  *a3 = SerializedDataSize;
  uint64_t v7 = malloc_type_malloc(SerializedDataSize, 0x6B23A9CAuLL);
  *a2 = v7;
  uint64_t v8 = *a3;
  v10[0] = 0;
  v10[1] = (uint64_t)v7;
  int8x16_t v10[2] = v8;
  uint64_t result = ZinSerial::SerializeGraphAndMetadata(v10, a1);
  if (result)
  {
    free(*a2);
    return 3;
  }
  return result;
}

uint64_t ZinSerial::GetSerializedDataSize(uint64_t a1)
{
  memset(v2, 0, sizeof(v2));
  if (ZinSerial::SerializeGraphAndMetadata(v2, a1)) {
    ZinAssertImpl("Failed to calculate total size of serialized data.");
  }
  return v2[0];
}

void std::optional<ZinIrDMAConvertInfo>::operator=[abi:ne180100]<ZinIrDMAConvertInfo const&,void>(uint64_t a1, ZinIrOpLayerOpCode *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    int v3 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_DWORD *)(a1 + 12) = v3;
  }
  else
  {
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((ZinIrOpLayerOpCode *)a1, a2);
    *(void *)uint64_t v4 = &unk_26C34CB58;
    *(void *)(v4 + 12) = *(void *)((char *)a2 + 12);
    *(unsigned char *)(v4 + 24) = 1;
  }
}

uint64_t ZinSerial::SerializeNEKernelInfo(ZinSerial *this, ZinSerial::Serializer *a2, const ZinNELayer *a3)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  if (*((void *)a2 + 17)) {
    operator new();
  }
  if (ZinSerial::Serializer::Serialize<ZinKernelDescriptor>(this, 0)
    || ZinSerial::BufferWriter::Write<std::string const>(this, __p))
  {
    goto LABEL_5;
  }
  uint64_t v7 = *((void *)a2 + 17);
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(v7 + 800);
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    if ((unint64_t)(*(void *)this + 1) > *((void *)this + 2))
    {
LABEL_5:
      uint64_t v5 = 3;
      goto LABEL_6;
    }
    *(unsigned char *)(v9 + *(void *)this) = v8 != 0;
  }
  ++*(void *)this;
  if (v8)
  {
    uint64_t v10 = *((void *)a2 + 17);
    if (!*(void *)(v10 + 800)) {
      ZinAssertImpl("MIR Kernel Data is unexpectedly null.");
    }
    uint64_t v5 = ZinSerial::SerializeZinMirAneKernel(this, (uint64_t *)(v10 + 800));
  }
  else
  {
LABEL_16:
    uint64_t v5 = 0;
  }
LABEL_6:
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_211220D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v18) {
    MEMORY[0x21667D3C0](v18, 0x1000C40557A1F5BLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrStochasticRoundInfo>(ZinSerial::Serializer *a1, unsigned __int8 *a2)
{
  int v2 = a2[40];
  uint64_t v3 = *((void *)a1 + 1);
  if (v3)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v3 + *(void *)a1) = v2;
  }
  ++*(void *)a1;
  if (!v2) {
    return 0;
  }
  if (!a2[40]) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }

  return ZinSerial::Serializer::Serialize(a1, (const ZinIrStochasticRoundInfo *)a2);
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrBroadcastInfo>(ZinSerial::Serializer *a1, const ZinIrBroadcastInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrActivationParams>(ZinSerial::Serializer *a1, const ZinIrActivationParams *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrTransposeInfo>(ZinSerial::Serializer *a1, char **a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::SerializeZinMirAneKernel(ZinSerial::Serializer *a1, uint64_t *a2)
{
  uint64_t v4 = 3;
  if (!ZinSerial::Serializer::Serialize((unint64_t *)a1, *a2))
  {
    if (ZinSerial::Serializer::Serialize(a1, *(const ZinMirAneKernelCoeff **)(*a2 + 40))) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return v4;
}

uint64_t ZinSerial::Serializer::Serialize<ZinKernelDescriptor>(ZinSerial::Serializer *a1, const ZinKernelDescriptor *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrCopyInfo>(Layer2TDMapper::SourceLayer *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return Layer2TDMapper::SourceLayer::IsGraphInitialization(a1);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrPoolingInfo>(ZinSerial::Serializer *a1, const ZinIrPoolingInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrElementWiseInfo>(ZinSerial::Serializer *a1, const ZinIrElementWiseInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<SingularValue>(unint64_t *a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 8);
  unint64_t v3 = a1[1];
  if (v3)
  {
    if (*a1 + 1 > a1[2]) {
      return 3;
    }
    *(unsigned char *)(v3 + *a1) = v2;
  }
  ++*a1;
  if (!v2) {
    return 0;
  }
  if (!*(unsigned char *)(a2 + 8)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }

  return ZinSerial::Serializer::Serialize(a1, a2);
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrIndexInfo>(ZinSerial::Serializer *a1, const ZinIrIndexInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrScaledEWInfo>(ZinSerial::Serializer *a1, const ZinIrScaledEWInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrReductionInfo>(ZinSerial::Serializer *a1, const ZinIrReductionInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrDynamicGOCInfo>(ZinSerial::Serializer *a1, const ZinIrDynamicGOCInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinEngineLayerMirInfo>(ZinSerial::Serializer *a1, const ZinEngineLayerMirInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

unint64_t ZinSerial::GetMirUnitSymbolInfoFromL2Access(unsigned int *a1, void *a2)
{
  uint64_t v3 = a1[6];
  Symbol = (ZinIrSymbol *)ZinL2Access::GetSymbol((ZinL2Access *)a1);
  uint64_t v9 = Symbol;
  if (v3) {
    BOOL v5 = Symbol == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  int MemType = ZinIrSymbol::GetMemType(Symbol);
  if (MemType != 2) {
    ZinAssertImpl("Invalid symbol.  Symbol should be in L2.");
  }
  if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v9))ZinAssertImpl("L2 Symbol not found in map.  Symbol should have been serialized."); {
  uint64_t v8 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v9);
  }
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v8[3] & 0xFFFFFF00 | (unint64_t)(v3 << 32) | *((_DWORD *)v8 + 6);
}

uint64_t ZinSerial::Serializer::Serialize<ZinMirUnitL2Symbol>(unint64_t *a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 8);
  unint64_t v3 = a1[1];
  if (v3)
  {
    if (*a1 + 1 > a1[2]) {
      return 3;
    }
    *(unsigned char *)(v3 + *a1) = v2;
  }
  ++*a1;
  if (!v2) {
    return 0;
  }
  if (!*(unsigned char *)(a2 + 8)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }

  return ZinSerial::Serializer::Serialize(a1, (_DWORD *)a2);
}

uint64_t ZinSerial::GetMirUnitSymbolInfoFromDRAMAccess(uint64_t a1, void *a2)
{
  int v2 = *(ZinIrSymbol **)(a1 + 40);
  BOOL v13 = v2;
  if (v2
    && ((unsigned int v4 = *(_DWORD *)(*((void *)ZinIrSymbol::GetRootSymbol(v2) + 1) + 8), v5 = v4 > 7,
                                                                                  int v6 = (1 << v4) & 0x8C,
                                                                                  !v5)
      ? (BOOL v7 = v6 == 0)
      : (BOOL v7 = 1),
        v7))
  {
    if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v13))ZinAssertImpl("DRAM Symbol not found in map.  Symbol should have been serialized."); {
    uint64_t v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a2, &v13);
    }
    if (!v12) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unsigned int v9 = v12[3] & 0xFFFFFF00;
    int v8 = *((_DWORD *)v12 + 6);
    uint64_t v10 = 0x100000000;
  }
  else
  {
    int v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 0;
  }
  return v10 | v9 | v8;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrConcatInfo>(ZinSerial::Serializer *a1, const ZinIrConcatInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<std::unique_ptr<ZinIrInputViewUnitInfo>>(ZinSerial::Serializer *a1, const ZinIrInputViewUnitInfo ***a2)
{
  unint64_t v3 = *a2;
  unsigned int v4 = a2[1];
  uint64_t v5 = *((void *)a1 + 1);
  if (v5)
  {
    if ((unint64_t)(*(void *)a1 + 4) > *((void *)a1 + 2)) {
      return 3;
    }
    *(_DWORD *)(v5 + *(void *)a1) = (unint64_t)((char *)v4 - (char *)v3) >> 3;
    unint64_t v3 = *a2;
    unsigned int v4 = a2[1];
  }
  *(void *)a1 += 4;
  while (v3 != v4)
  {
    uint64_t result = ZinSerial::Serializer::Serialize<ZinIrInputViewUnitInfo>(a1, *v3);
    if (result) {
      return result;
    }
    ++v3;
  }
  return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrInputViewUnitInfo>(ZinSerial::Serializer *a1, const ZinIrInputViewUnitInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinIrReshapeInfo>(ZinSerial::Serializer *a1, const ZinIrReshapeInfo *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t ZinSerial::Serializer::Serialize<ZinMirUnitSymbolInfo>(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a1[1];
  if (v5)
  {
    if (*a1 + 4 > a1[2]) {
      return 3;
    }
    *(_DWORD *)(v5 + *a1) = -1171354717 * ((unint64_t)(v4 - v3) >> 5);
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
  }
  *a1 += 4;
  while (v3 != v4)
  {
    uint64_t result = ZinSerial::Serializer::Serialize(a1, v3);
    if (result) {
      return result;
    }
    v3 += 352;
  }
  return 0;
}

void std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<ZinMirUnitSymbolInfo>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<ZinMirUnitSymbolInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = v2 - 344;
    do
    {
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      uint64_t v5 = v4 - 8;
      v4 -= 352;
    }
    while (v5 != v3);
  }
  a1[1] = v3;
}

uint64_t ZinSerial::Serializer::Serialize<ZinMirUnitBasicBlock>(unint64_t *a1, char **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a1[1];
  if (v5)
  {
    if (*a1 + 4 > a1[2]) {
      return 3;
    }
    *(_DWORD *)(v5 + *a1) = -858993459 * ((unint64_t)(v4 - v3) >> 3);
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
  }
  *a1 += 4;
  while (v3 != v4)
  {
    uint64_t result = ZinSerial::Serializer::Serialize(a1, v3);
    if (result) {
      return result;
    }
    v3 += 40;
  }
  return 0;
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_211221830(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,ZinIrInputParamInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrInputParamInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrInputParamInfo>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      BOOL v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          BOOL v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  BOOL v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    BOOL v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2112219C0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_211221A54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinSerial::Serializer::Serialize<std::optional<ZinIrDMAConvertInfo>>(ZinSerial::Serializer *a1, unsigned __int8 **a2)
{
  uint64_t v3 = *a2;
  long long v4 = a2[1];
  uint64_t v5 = *((void *)a1 + 1);
  if (v5)
  {
    if ((unint64_t)(*(void *)a1 + 4) > *((void *)a1 + 2)) {
      return 3;
    }
    *(_DWORD *)(v5 + *(void *)a1) = (unint64_t)(v4 - v3) >> 5;
    uint64_t v3 = *a2;
    long long v4 = a2[1];
  }
  *(void *)a1 += 4;
  while (v3 != v4)
  {
    uint64_t result = ZinSerial::Serializer::Serialize<ZinIrDMAConvertInfo>(a1, v3);
    if (result) {
      return result;
    }
    v3 += 32;
  }
  return 0;
}

ZinIrOpLayerOpCode *std::vector<std::optional<ZinIrDMAConvertInfo>>::__init_with_size[abi:ne180100]<std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo> const*>(ZinIrOpLayerOpCode *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<ControlEdgeInfo>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo>*>((uint64_t)v6 + 16, a2, a3, *((ZinIrOpLayerOpCode **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_211221B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::optional<ZinIrDMAConvertInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

ZinIrOpLayerOpCode *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo> const*,std::optional<ZinIrDMAConvertInfo>*>(uint64_t a1, uint64_t a2, uint64_t a3, ZinIrOpLayerOpCode *this)
{
  long long v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__optional_copy_base<ZinIrDMAConvertInfo,false>::__optional_copy_base[abi:ne180100](v4, v6);
      v6 += 32;
      long long v4 = (ZinIrOpLayerOpCode *)((char *)v11 + 32);
      uint64_t v11 = (ZinIrOpLayerOpCode *)((char *)v11 + 32);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_211221C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

ZinIrOpLayerOpCode *std::__optional_copy_base<ZinIrDMAConvertInfo,false>::__optional_copy_base[abi:ne180100](ZinIrOpLayerOpCode *this, uint64_t a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(this, (const ZinIrOpLayerOpCode *)a2);
    *(void *)this = &unk_26C34CB58;
    *(void *)((char *)this + 12) = *(void *)(a2 + 12);
    *((unsigned char *)this + 24) = 1;
  }
  return this;
}

void sub_211221C98(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 24)) {
    ZinIrHalH13g::~ZinIrHalH13g(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<ZinIrDMAConvertInfo>>,std::optional<ZinIrDMAConvertInfo>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(ZinIrHalH13g ***)(a1 + 16);
  uint64_t v2 = **(ZinIrHalH13g ***)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      uint64_t v3 = (ZinIrHalH13g *)((char *)v1 - 32);
      if (*((unsigned char *)v1 - 8)) {
        ZinIrHalH13g::~ZinIrHalH13g(v3);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,long>,std::__tree_node<std::__value_type<std::string,long>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    BOOL v7 = result[1];
    std::string *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        char v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v8[7] = v9[7];
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(v5, v18, leaf_high, v17);
          uint64_t v17 = v16;
          if (v16) {
            uint64_t v16 = std::__tree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,std::allocator<ZinIrTensor *>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              char v9 = a2;
            }
            while (!v12);
          }
          int v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          char v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_multi<std::pair<std::string const,long> const&>(v5, (uint64_t)(a2 + 4));
      BOOL v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          BOOL v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_211221EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_multi<std::pair<std::string const,long> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__construct_node<std::pair<std::string const,ZinIrOpLayer *> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_211221F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

std::string *std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,ZinTensorDimensions>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_211222040(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t ZinSerial::Serializer::Serialize<std::unique_ptr<ZinShapeDependentTransform>>(ZinSerial::Serializer *a1, const ZinLargeStridePoolTransform ***a2)
{
  uint64_t v3 = *a2;
  long long v4 = a2[1];
  uint64_t v5 = *((void *)a1 + 1);
  if (v5)
  {
    if ((unint64_t)(*(void *)a1 + 4) > *((void *)a1 + 2)) {
      return 3;
    }
    *(_DWORD *)(v5 + *(void *)a1) = (unint64_t)((char *)v4 - (char *)v3) >> 3;
    uint64_t v3 = *a2;
    long long v4 = a2[1];
  }
  *(void *)a1 += 4;
  while (v3 != v4)
  {
    uint64_t result = ZinSerial::Serializer::Serialize<ZinShapeDependentTransform>(a1, *v3);
    if (result) {
      return result;
    }
    ++v3;
  }
  return 0;
}

uint64_t ZinSerial::Serializer::Serialize<ZinShapeDependentTransform>(ZinSerial::Serializer *a1, const ZinLargeStridePoolTransform *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    if ((unint64_t)(*(void *)a1 + 1) > *((void *)a1 + 2)) {
      return 3;
    }
    *(unsigned char *)(v2 + *(void *)a1) = a2 != 0;
  }
  ++*(void *)a1;
  if (a2) {
    return ZinSerial::Serializer::Serialize(a1, a2);
  }
  else {
    return 0;
  }
}

void ZinSerial::SerializeOrderedOpLayers(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  ZinIrEnumToStringUtil::OpCodeToString(*(_DWORD *)(*(void *)(a1 + 64) + 8), __p);
  uint64_t v2 = (void **)__p[0];
  if (v5 >= 0) {
    uint64_t v2 = __p;
  }
  uint64_t v3 = (void *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  *(_DWORD *)buf = 136315394;
  BOOL v7 = v2;
  __int16 v8 = 2080;
  uint64_t v9 = v3;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Unsupported OpLayer(%s): %s", buf, 0x16u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void ZinSerial::SerializeGraphData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to serialize basic blocks.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to serialize DRAM symbols table for Const Tensor.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to serialize DRAM symbols table for data tensor.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to serialize L2 symbols table.", a5, a6, a7, a8, 0);
}

void ZinSerial::SerializeGraphAndMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to serialize bar usage.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to serialize io data.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to serialize header.", a5, a6, a7, a8, 0);
}

uint64_t ZinMirSetActiveNE(ZinIrControlFlowGraph *a1, ZinIrNetworkStatus *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  long long v4 = a2;
  v5[0] = &unk_26C32D020;
  v5[1] = &v4;
  void v5[3] = v5;
  uint64_t v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v5, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v5);
  return v2;
}

void sub_2112224CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSetActiveNE(uint64_t **a1, CFArrayRef *a2)
{
  Hal = ZinIrTarget::GetHal(a1[2], (ZinIrTarget *)a1[2][20]);
  (*(void (**)(uint64_t *))(*Hal + 16))(Hal);
  if (ZinIrOpLayer::IsIntermediate((ZinIrOpLayer *)a1) && ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)a1))
  {
    if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a1))
    {
      if (!a1[33]) {
        operator new();
      }
    }
    else
    {
      BOOL IsTransposeEngineLayer = ZinIrOpLayer::IsTransposeEngineLayer((ZinIrOpLayer *)a1);
      uint64_t v6 = a1[33];
      if (IsTransposeEngineLayer)
      {
        if (!v6) {
          operator new();
        }
      }
      else
      {
        if (!v6) {
          operator new();
        }
        if (((unsigned int (*)(uint64_t **))(*a1)[51])(a1)
          && (((uint64_t (*)(uint64_t **))(*a1)[74])(a1) & 1) == 0)
        {
          ZinIrNetworkStatus::SetError(a2, @"NeTransposeFailure");
          return 3;
        }
      }
    }
  }
  return 0;
}

void sub_2112229A4(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B0C40CB92D005);
  _Unwind_Resume(a1);
}

uint64_t ZinMirOptimizeForDoubleInt8(ZinIrOpLayer *a1, ZinIrNetworkStatus *a2)
{
  if (*(_DWORD *)(*((void *)a1 + 8) + 8) == 85)
  {
    uint64_t v2 = *((void *)a1 + 33);
    if (v2)
    {
      if (*((void *)a1 + 54) && !*(unsigned char *)(v2 + 1) && !*(unsigned char *)(v2 + 148)) {
        *(unsigned char *)(*((void *)a1 + 33) + 1) = ZinNEConvLayer::CanUseDoubleInt8Mode(a1, *(_DWORD *)(v2 + 144), 0);
      }
    }
  }
  return 0;
}

uint64_t ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *a1, ZinIrNetworkStatus *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  long long v4 = a2;
  v5[0] = &unk_26C322CD0;
  v5[1] = &v4;
  void v5[3] = v5;
  uint64_t v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v5, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v5);
  return v2;
}

void sub_211222AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C32D020;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C32D020;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, uint64_t ***a3)
{
  return ZinMirSetActiveNE(*a3, **(CFArrayRef ***)(a1 + 8));
}

uint64_t std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirSetActiveNE(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C322CD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C322CD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrNetworkStatus *a2, ZinIrOpLayer **a3)
{
  return 0;
}

uint64_t std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirOptimizeForDoubleInt8(ZinIrControlFlowGraph *,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

BOOL ZinIrTransposeInfo::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)(a1 + 16);
  uint64_t v2 = *(char **)(a1 + 24);
  char v5 = *(char **)(a2 + 16);
  long long v4 = *(char **)(a2 + 24);
  if (v2 - v3 != v4 - v5) {
    return 0;
  }
  if (v3 != v2)
  {
    BOOL result = v5 != v4;
    while (v5 != v4)
    {
      BOOL v7 = *(void **)(a2 + 16);
      while (*(void *)v3 != *v7)
      {
        if (++v7 == (void *)v4) {
          return 0;
        }
      }
      v3 += 8;
      if (v3 == v2) {
        return result;
      }
    }
    return 0;
  }
  return 1;
}

void ZinIrTransposeInfo::GetInverseMappings(ZinIrTransposeInfo *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (unsigned int *)*((void *)this + 2);
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  if (v2 != v3)
  {
    char v5 = 0;
    uint64_t v6 = a2 + 2;
    do
    {
      uint64_t v7 = *v2;
      uint64_t v8 = v2[1];
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v9 = ((char *)v5 - *a2) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = *v6 - (void)*a2;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v12);
        }
        else {
          BOOL v13 = 0;
        }
        uint64_t v14 = &v13[8 * v9];
        *(void *)uint64_t v14 = v8 | (v7 << 32);
        char v5 = (uint64_t *)(v14 + 8);
        uint64_t v16 = *a2;
        uint64_t v15 = a2[1];
        if (v15 != *a2)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v14 - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          uint64_t v15 = *a2;
        }
        *a2 = v14;
        a2[1] = (char *)v5;
        a2[2] = &v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *v5++ = v8 | (v7 << 32);
      }
      a2[1] = (char *)v5;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_211222E8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrTransposeInfo::IsInverse(ZinIrTransposeInfo *this, const ZinIrTransposeInfo *a2)
{
  uint64_t v3 = (char *)*((void *)this + 2);
  uint64_t v2 = (char *)*((void *)this + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  if (v2 - v3 == v4 - v5)
  {
    if (v3 == v2) {
      return 1;
    }
    while (v5 != v4)
    {
      char v6 = 0;
      uint64_t v7 = v5 + 8;
      do
      {
        BOOL v8 = *(_DWORD *)v3 == *(_DWORD *)(v7 - 4) && *((_DWORD *)v3 + 1) == *(_DWORD *)(v7 - 8);
        char v9 = v8;
        v6 |= v9;
        if (v8) {
          break;
        }
        BOOL v8 = v7 == v4;
        v7 += 8;
      }
      while (!v8);
      if ((v6 & 1) == 0) {
        break;
      }
      v3 += 8;
      if (v3 == v2) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t ZinIrTransposeInfo::GetDstDimension(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(_DWORD **)(a1 + 16); i != *(_DWORD **)(a1 + 24); i += 2)
  {
    if (*i == a2) {
      return i[1];
    }
  }
  return a2;
}

uint64_t ZinIrTransposeInfo::GetSrcDimension(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(unsigned int **)(a1 + 16); i != *(unsigned int **)(a1 + 24); i += 2)
  {
    if (i[1] == a2) {
      return *i;
    }
  }
  return a2;
}

uint64_t ZinIrTransposeInfo::HasDimension(uint64_t a1, int a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 16);
  uint64_t v3 = *(_DWORD **)(a1 + 24);
  if (v2 == v3) {
    return 0;
  }
  do
  {
    BOOL v4 = *v2 == a2 || v2[1] == a2;
    uint64_t result = v4;
    if (v4) {
      break;
    }
    v2 += 2;
  }
  while (v2 != v3);
  return result;
}

uint64_t ZinIrTransposeInfo::TensorDimensions(ZinIrTransposeInfo *this, ZinTensorDimensions *a2)
{
  long long v2 = *((_OWORD *)a2 + 1);
  v4[0] = *(_OWORD *)a2;
  v4[1] = v2;
  uint64_t v5 = *((void *)a2 + 4);
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(v4, (uint64_t)this + 16, a2);
  return 0;
}

BOOL ZinTransposeLayer::NeedsTypeCastToRead(uint64_t a1, int a2)
{
  if (a2 == 10) {
    return *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0) + 88) != 10;
  }
  else {
    return !IsPrimaryFormat(a2);
  }
}

BOOL ZinTransposeLayer::NeedsTypeCastToWrite(ZinIrOpLayer *a1, int a2)
{
  if (a2 == 10) {
    return *(_DWORD *)(ZinIrOpLayer::GetInputTensor(a1, 0) + 88) != 10;
  }
  else {
    return !IsPrimaryFormat(a2);
  }
}

void ZinTransposeLayer::Clone()
{
}

void sub_2112231DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinTransposeLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  ZinTransposeLayer::TransposeKindToString(__p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11, a1);
  v9[0] = *MEMORY[0x263F8C2B8];
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v10 = v5;
  v11[0] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v13);
}

void sub_211223414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t ZinTransposeLayer::TransposeKindToString@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  v4[0] = *MEMORY[0x263F8C2B8];
  uint64_t v2 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  _OWORD v4[2] = v2;
  v5[0] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v7);
}

void sub_2112235A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ZinTransposeLayer::IsCNTranspose(ZinTransposeLayer *this)
{
  return ZinIrTransposeUnit::IsCNTranspose((int **)(*((void *)this + 8) + 16));
}

BOOL ZinTransposeLayer::IsCHTranspose(ZinTransposeLayer *this)
{
  return ZinIrTransposeUnit::IsCHTranspose((int **)(*((void *)this + 8) + 16));
}

BOOL ZinTransposeLayer::IsHWTranspose(ZinTransposeLayer *this)
{
  return ZinIrTransposeUnit::IsHWTranspose((int **)(*((void *)this + 8) + 16));
}

uint64_t ZinTransposeLayer::Hash(ZinTransposeLayer *this, int *a2)
{
  uint64_t v3 = *((void *)this + 8);
  std::string __p = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = (uint64_t *)v25;
  uint64_t v4 = *(uint64_t **)(v3 + 16);
  uint64_t v5 = *(uint64_t **)(v3 + 24);
  if (v4 == v5) {
    goto LABEL_28;
  }
  do
  {
    uint64_t v23 = *v4;
    std::__tree<std::pair<ZinIrDimension,ZinIrDimension>>::__emplace_unique_key_args<std::pair<ZinIrDimension,ZinIrDimension>,std::pair<ZinIrDimension,ZinIrDimension>>(&v24, (int *)&v23, &v23);
    ++v4;
  }
  while (v4 != v5);
  char v6 = v24;
  if (v24 == (uint64_t *)v25)
  {
LABEL_28:
    uint64_t v7 = v27;
  }
  else
  {
    uint64_t v7 = v27;
    do
    {
      uint64_t v8 = *((unsigned int *)v6 + 7);
      uint64_t v9 = *((unsigned int *)v6 + 8);
      if (v7 >= v28)
      {
        uint64_t v10 = (v7 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = (v28 - (unsigned char *)__p) >> 2;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if ((unint64_t)(v28 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v28, v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = &v13[8 * v10];
        *(void *)uint64_t v14 = v8 | (v9 << 32);
        uint64_t v7 = v14 + 8;
        uint64_t v16 = (char *)__p;
        uint64_t v15 = v27;
        if (v27 != __p)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v14 - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          uint64_t v15 = (char *)__p;
        }
        std::string __p = v14;
        uint64_t v27 = v7;
        uint64_t v28 = &v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)uint64_t v7 = v8 | (v9 << 32);
        v7 += 8;
      }
      uint64_t v27 = v7;
      uint64_t v18 = (uint64_t *)v6[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (uint64_t *)v6[2];
          BOOL v20 = *v19 == (void)v6;
          char v6 = v19;
        }
        while (!v20);
      }
      char v6 = v19;
    }
    while (v19 != (uint64_t *)v25);
  }
  if (__p == v7) {
    int v21 = 0;
  }
  else {
    int v21 = ZinHash(__p, (int)v7 - (int)__p);
  }
  *a2 = v21;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v24, v25[0]);
  if (__p)
  {
    uint64_t v27 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

void sub_2112237C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL ZinTransposeLayer::CanBeUnquantized(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0) + 88);

  return ZinQuantizationUtils::TensorFormatCompatible(v3, a2);
}

uint64_t *std::__tree<std::pair<ZinIrDimension,ZinIrDimension>>::__emplace_unique_key_args<std::pair<ZinIrDimension,ZinIrDimension>,std::pair<ZinIrDimension,ZinIrDimension>>(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t v5 = std::__tree<std::pair<ZinIrDimension,ZinIrDimension>>::__find_equal<std::pair<ZinIrDimension,ZinIrDimension>>((uint64_t)a1, &v9, a2);
  char v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    char v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 28) = *a3;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<std::pair<ZinIrDimension,ZinIrDimension>>::__find_equal<std::pair<ZinIrDimension,ZinIrDimension>>(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    int v7 = a3[1];
    while (1)
    {
      uint64_t v8 = v4;
      int v9 = *((_DWORD *)v4 + 7);
      if (v6 == v9)
      {
        int v10 = *((_DWORD *)v8 + 8);
        if (v7 >= v10)
        {
          BOOL v11 = v10 == v7;
          if (v10 >= v7) {
            char v12 = 1;
          }
          else {
            char v12 = -1;
          }
          if (v11) {
            char v12 = 0;
          }
          if ((v12 & 0x80) == 0) {
            goto LABEL_22;
          }
          goto LABEL_19;
        }
LABEL_13:
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_22;
        }
      }
      else
      {
        if (v6 < v9) {
          goto LABEL_13;
        }
        if (v9 >= v6) {
          char v13 = 1;
        }
        else {
          char v13 = -1;
        }
        if ((v13 & 0x80) == 0) {
          goto LABEL_22;
        }
LABEL_19:
        uint64_t result = v8 + 1;
        uint64_t v4 = (uint64_t *)v8[1];
        if (!v4) {
          goto LABEL_22;
        }
      }
    }
  }
  uint64_t v8 = result;
LABEL_22:
  *a2 = v8;
  return result;
}

char *ZinIrOptForkDilatedConvs(ZinIrOpLayerGraph *a1, ZinIrOpLayer *this)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*((void *)this + 8) + 8) || !ZinConvLayer::IsDilated(this)) {
    return 0;
  }
  uint64_t v3 = **((void **)this + 11);
  uint64_t v4 = *(char **)(v3 + 112);
  uint64_t v5 = *(char **)(v3 + 120);
  long long v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  long long v53 = &v50;
  unint64_t v6 = v5 - v4;
  if (v5 == v4)
  {
    uint64_t v8 = 0;
    int v7 = 0;
  }
  else
  {
    do
    {
      if (!*(_DWORD *)(*(void *)(*(void *)v4 + 64) + 8) && ZinConvLayer::IsDilated(*(ZinConvLayer **)v4)) {
        std::back_insert_iterator<std::vector<ZinIrOpLayer *>>::operator=[abi:ne180100](&v53, v4);
      }
      v4 += 8;
    }
    while (v4 != v5);
    uint64_t v8 = (char *)v50;
    int v7 = v51;
  }
  if (v6 < 9 || (unint64_t)(v7 - v8) < 9)
  {
    char v38 = 1;
    goto LABEL_60;
  }
  std::string __p = 0;
  long long v48 = 0;
  long long v49 = 0;
  int v44 = 0;
  uint64_t v45 = 0;
  long long v46 = 0;
  if (v8 == v7)
  {
LABEL_50:
    uint64_t GreatestCommonDivisor = FindGreatestCommonDivisor((uint64_t)&__p);
    uint64_t v35 = FindGreatestCommonDivisor((uint64_t)&v44);
    uint64_t v36 = v35;
    if (GreatestCommonDivisor != 1 || v35 != 1)
    {
      uint64_t v37 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v3 + 32))(v3, 0, 0);
      if (!(*(void *)(v37 + 72) % GreatestCommonDivisor))
      {
        if (!(*(void *)(v37 + 64) % v36))
        {
          long long v53 = (void **)__PAIR64__(v36, GreatestCommonDivisor);
          LODWORD(v54) = 1;
          ZinIrSpaceToBatchInfo::ZinIrSpaceToBatchInfo((uint64_t)v43, (uint64_t *)&v53);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_s2b", (const void **)(v3 + 24), (void **)&v53);
          __n128 v40 = ZinObjectNameFactory::ZinObjectNameFactory(&v42, &v53);
          if (v55 < 0) {
            operator delete(v53);
          }
          (*(void (**)(void ***__return_ptr, uint64_t, void, void, __n128))(*(void *)v3 + 80))(&v53, v3, 0, 0, v40);
          std::vector<ZinIrTensorInfo>::vector[abi:ne180100](&v41, &v53, 1uLL);
          ZinBuilder::CreateSpaceToBatch();
        }
        uint64_t v4 = 0;
        goto LABEL_54;
      }
    }
  }
  else
  {
    while (1)
    {
      int v9 = *(_DWORD **)(*(void *)v8 + 136);
      uint64_t v10 = (int)v9[96];
      BOOL v11 = v48;
      if (v48 >= v49)
      {
        char v13 = (char *)__p;
        uint64_t v14 = (v48 - (unsigned char *)__p) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v49 - (unsigned char *)__p;
        if ((v49 - (unsigned char *)__p) >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v49, v17);
          char v13 = (char *)__p;
          BOOL v11 = v48;
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[8 * v14];
        *(void *)uint64_t v19 = v10;
        char v12 = v19 + 8;
        while (v11 != v13)
        {
          uint64_t v20 = *((void *)v11 - 1);
          v11 -= 8;
          *((void *)v19 - 1) = v20;
          v19 -= 8;
        }
        std::string __p = v19;
        long long v48 = v12;
        long long v49 = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)long long v48 = v10;
        char v12 = v11 + 8;
      }
      long long v48 = v12;
      uint64_t v21 = (int)v9[97];
      BOOL v22 = v45;
      if (v45 >= v46)
      {
        uint64_t v24 = (char *)v44;
        uint64_t v25 = (v45 - (unsigned char *)v44) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v46 - (unsigned char *)v44;
        if ((v46 - (unsigned char *)v44) >> 2 > v26) {
          unint64_t v26 = v27 >> 2;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v46, v28);
          uint64_t v24 = (char *)v44;
          BOOL v22 = v45;
        }
        else
        {
          uint64_t v29 = 0;
        }
        uint64_t v30 = &v29[8 * v25];
        *(void *)uint64_t v30 = v21;
        uint64_t v23 = v30 + 8;
        while (v22 != v24)
        {
          uint64_t v31 = *((void *)v22 - 1);
          v22 -= 8;
          *((void *)v30 - 1) = v31;
          v30 -= 8;
        }
        int v44 = v30;
        uint64_t v45 = v23;
        long long v46 = &v29[8 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(void *)uint64_t v45 = v21;
        uint64_t v23 = v22 + 8;
      }
      uint64_t v45 = v23;
      int v32 = v9[96];
      if (v9[88] % v32) {
        break;
      }
      if (v9[89] % v32) {
        break;
      }
      int v33 = v9[97];
      if (v9[90] % v33 || v9[91] % v33) {
        break;
      }
      v8 += 8;
      if (v8 == v7) {
        goto LABEL_50;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_54:
  if (v44)
  {
    uint64_t v45 = (char *)v44;
    operator delete(v44);
  }
  if (__p)
  {
    long long v48 = (char *)__p;
    operator delete(__p);
  }
  char v38 = 0;
LABEL_60:
  if (v50)
  {
    uint64_t v51 = (char *)v50;
    operator delete(v50);
  }
  if (v38) {
    return 0;
  }
  return v4;
}

void sub_211224A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a19);
  a30 = &unk_26C34DA98;
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a41);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a45);
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  a53 = (uint64_t)&unk_26C34DA98;
  if (a59 < 0) {
    operator delete(a54);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a61);
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  _Unwind_Resume(a1);
}

void CreateOutputTensor(uint64_t a1, int *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  uint64_t v4 = v3;
  long long v5 = *(_OWORD *)(v3 + 64);
  long long v18 = *(_OWORD *)(v3 + 48);
  long long v19 = v5;
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = *(void *)(v3 + 80) / v8;
  *((void *)&v19 + 1) = *((void *)&v5 + 1) / v6;
  uint64_t v20 = v9;
  *(void *)&long long v19 = (uint64_t)v5 / v7;
  *(void *)&long long v18 = (int)v7 * (uint64_t)(int)v6 * v8 * v18;
  if (*(char *)(v3 + 47) >= 0) {
    size_t v10 = *(unsigned __int8 *)(v3 + 47);
  }
  else {
    size_t v10 = *(void *)(v3 + 32);
  }
  BOOL v11 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 4);
  if (v17 < 0) {
    BOOL v11 = (void **)__p[0];
  }
  if (v10)
  {
    uint64_t v14 = *(char **)(v4 + 24);
    char v13 = (char *)(v4 + 24);
    char v12 = v14;
    if (v13[23] >= 0) {
      unint64_t v15 = v13;
    }
    else {
      unint64_t v15 = v12;
    }
    memmove(v11, v15, v10);
  }
  strcpy((char *)v11 + v10, "_s2b");
  ZinIrTensor::CreateTensor();
}

void sub_21122511C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  BOOL v11 = va_arg(va1, std::__shared_weak_count *);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  ZinMirHoistSEWActivationForGOCConvFusion::UpdateTensorOfHoistLayer((uint64_t)va, (uint64_t *)va1, v7, (void **)va2);
  _Unwind_Resume(a1);
}

uint64_t FindJoinForSharingBatchToSpace(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v6, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  if (v7 == (unsigned char *)v6)
  {
LABEL_9:
    uint64_t v4 = *v6;
  }
  else
  {
    uint64_t v1 = 0;
    unint64_t v2 = (v7 - (unsigned char *)v6) >> 3;
    if (v2 <= 1) {
      unint64_t v2 = 1;
    }
    while (1)
    {
      uint64_t v3 = (void *)v6[v1];
      if (v3[15] - v3[14] == 8 && v3[12] - v3[11] == 8) {
        break;
      }
      if (v1 && v3 != (void *)v6[(v1 - 1)]) {
        break;
      }
      if (v2 == ++v1) {
        goto LABEL_9;
      }
    }
    uint64_t v4 = 0;
  }
  uint64_t v7 = v6;
  operator delete(v6);
  return v4;
}

uint64_t ZinParseGOCUnit(const __CFDictionary *a1, ZinIrGOCUnitInfo *a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Params");
  if (Value && (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    uint64_t result = ZinParseScalarInfo(v6, @"ScaleShift", @"ScaleScalar", @"ScaleCount", (BOOL *)a2 + 80, (signed __int8 *)a2 + 81, (float *)a2 + 21, a3);
    if (!result)
    {
      uint64_t result = ZinParseScalarInfo(v6, @"BiasShift", @"BiasScalar", @"BiasCount", (BOOL *)a2 + 92, (signed __int8 *)a2 + 93, (float *)a2 + 24, a3);
      if (!result)
      {
        CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(v6, @"BiasScaleGroupData");
        if (!v9 || (CFDictionaryRef v10 = v9, v11 = CFGetTypeID(v9), v11 != CFDictionaryGetTypeID()))
        {
          *((unsigned char *)a2 + 92) = 1;
          *((unsigned char *)a2 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 1;
          return 0;
        }
        uint64_t result = ZinGetFloatFormat(v10, @"ScaleType", (int *)a2 + 22, a3);
        if (!result)
        {
          uint64_t result = ZinGetFloatFormat(v10, @"BiasType", (int *)a2 + 25, a3);
          if (!result)
          {
            uint64_t result = ZinParseGroupDataInfo(v10, @"BiasMutable", @"BiasCount", @"BiasIndex", @"BiasOffset", (unsigned char *)a2 + 92, (uint64_t)a2 + 128, a3);
            if (!result)
            {
              uint64_t result = ZinParseGroupDataInfo(v10, @"ScaleMutable", @"ScaleCount", @"ScaleIndex", @"ScaleOffset", (unsigned char *)a2 + 80, (uint64_t)a2 + 104, a3);
              if (!result) {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    ZinIrUnitStatus::SetError(a3, @"InvalidParamSyntax");
    return 3;
  }
  return result;
}

uint64_t ZinParseScalarInfo(const __CFDictionary *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, BOOL *a5, signed __int8 *a6, float *a7, CFArrayRef *a8)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"BiasScaleGroupData");
  CFDictionaryRef v17 = Value;
  if (Value)
  {
    CFTypeID v18 = CFGetTypeID(Value);
    if (v18 != CFDictionaryGetTypeID()) {
      CFDictionaryRef v17 = 0;
    }
  }
  *a6 = 0;
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (v19)
  {
    CFNumberRef v20 = v19;
    CFTypeID v21 = CFGetTypeID(v19);
    if (v21 == CFNumberGetTypeID()) {
      CFNumberGetValue(v20, kCFNumberSInt8Type, a6);
    }
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, a3);
  if (result)
  {
    CFNumberRef v23 = (const __CFNumber *)result;
    CFTypeID v24 = CFGetTypeID((CFTypeRef)result);
    if (v24 == CFNumberGetTypeID())
    {
      *a5 = 1;
      if (v17
        && (valuePtr = 1, (CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(v17, a4)) != 0)
        && (CFNumberRef v26 = v25, v27 = CFGetTypeID(v25), v27 == CFNumberGetTypeID())
        && (CFNumberGetValue(v26, kCFNumberSInt32Type, &valuePtr), valuePtr != 1))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinParseScalarInfo();
        }
        ZinIrUnitStatus::SetError(a8, @"InvalidScaleBiasCount");
        return 3;
      }
      else
      {
        __int16 v34 = 0;
        CFNumberGetValue(v23, kCFNumberSInt16Type, &v34);
        uint64_t result = 0;
        _H0 = v34;
        __asm { FCVT            S0, H0 }
        *(_DWORD *)a7 = _S0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ZinParseGroupDataInfo(const __CFDictionary *a1, const __CFString *a2, void *key, const __CFString *a4, const __CFString *a5, unsigned char *a6, uint64_t a7, CFArrayRef *a8)
{
  if (*a6) {
    return 0;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
  if (!Value || (CFNumberRef v16 = Value, v17 = CFGetTypeID(Value), v17 != CFNumberGetTypeID()))
  {
    *(unsigned char *)a7 = 0;
    *a6 = 1;
    return 0;
  }
  CFNumberGetValue(v16, kCFNumberSInt32Type, (void *)(a7 + 8));
  int v18 = *(_DWORD *)(a7 + 8);
  if (v18 > 0)
  {
    ZinParseBoolean(a1, a2, (BOOL *)a7);
    ZinParseIndexToken(a1, a4, (int *)(a7 + 4));
    uint64_t result = ZinParseOffsetToken(a1, a5, @"InvalidScaleBiasOffsetSyntax", (uint64_t *)(a7 + 16), a8);
    if (result) {
      return result;
    }
    return 0;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinParseGroupDataInfo(v18);
  }
  ZinIrUnitStatus::SetError(a8, @"InvalidScaleBiasOffsetSyntax");
  return 3;
}

void ZinParseScalarInfo()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Scalar is set but data count is not 1.\n", v0, 2u);
}

void ZinParseGroupDataInfo(int a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid GOC GroupData count value: %d\n", (uint8_t *)v1, 8u);
}

uint64_t ZinCodegenUtil::ConvertInt32ToCustomUnsignedType(ZinCodegenUtil *this, unint64_t a2)
{
  int v2 = -1 << a2;
  if ((v2 & this) != v2 && (v2 & this) != 0) {
    ZinAssertImpl("Out of range");
  }
  if (a2 >= 0x21) {
    ZinAssertImpl("Invalid conversion.");
  }
  return this & ~v2;
}

BOOL ZinCodegenUtil::ValueToRegister(unint64_t a1, unsigned int *a2, _DWORD *a3)
{
  BOOL v4 = *a2 <= a1 && a2[1] >= a1;
  if (v4) {
    *a3 = a1;
  }
  return v4;
}

BOOL ZinCodegenUtil::SignedValueToRegister(ZinCodegenUtil *a1, unint64_t a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v6 = ZinCodegenUtil::ConvertInt32ToCustomUnsignedType(a1, a2);
  BOOL v8 = v6 >= *a3 && v6 <= a3[1];
  if (v8) {
    *a4 = v6;
  }
  return v8;
}

void *ZinCodegenUtil::SplitInstructionListByHWNetwork@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v11[0] = v11;
  v11[1] = v11;
  uint64_t v12 = 0;
  for (uint64_t i = *(void *)(a1 + 8); i != a1; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = *(void *)(i + 16);
    unsigned int v6 = operator new(0x18uLL);
    v6[1] = v11;
    _OWORD v6[2] = v5;
    uint64_t v7 = v11[0];
    *unsigned int v6 = v11[0];
    *(void *)(v7 + 8) = v6;
    v11[0] = v6;
    ++v12;
    if (*(unsigned char *)(v5 + 198))
    {
      unint64_t v8 = a2[1];
      if (v8 >= a2[2])
      {
        uint64_t v9 = std::vector<std::list<ZinAneInstruction *>>::__push_back_slow_path<std::list<ZinAneInstruction *> const&>(a2, (uint64_t)v11);
      }
      else
      {
        std::list<ZinAneInstruction *>::list((void *)a2[1], (uint64_t)v11);
        uint64_t v9 = v8 + 24;
        a2[1] = v8 + 24;
      }
      a2[1] = v9;
      std::__list_imp<ZinIrSection *>::clear(v11);
    }
  }
  return std::__list_imp<ZinIrSection *>::clear(v11);
}

void sub_211225908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  std::__list_imp<ZinIrSection *>::clear(&a10);
  a10 = (void **)v10;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::list<ZinAneInstruction *>>::__push_back_slow_path<std::list<ZinAneInstruction *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  CFTypeID v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  CFNumberRef v16 = &v10[24 * v9];
  std::list<ZinAneInstruction *>::list(v14, a2);
  unint64_t v15 = v14 + 24;
  std::vector<std::list<ZinAneInstruction *>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::list<ZinAneInstruction *>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_211225A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::list<ZinAneInstruction *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::list<ZinAneInstruction *>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    unsigned int v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      unsigned int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_211225AC4(_Unwind_Exception *a1)
{
  std::__list_imp<ZinIrSection *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrMatrixMultUnit::ZinIrMatrixMultUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = ZinIrUnit::ZinIrUnit((void *)a1, a3);
  *uint64_t v5 = &unk_26C34CD08;
  v5[7] = &unk_26C345B80;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    void v5[10] = *(void *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_26C3500E8;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_211225BD8(_Unwind_Exception *a1)
{
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

void ZinIrMatrixMultUnit::CreateOpcode(ZinIrMatrixMultUnit *this, const ZinIrHalParameters *a2)
{
}

void sub_211225D20(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C40D29F85BDLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrMatrixMultUnit::TensorDimensions(ZinIrMatrixMultUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  return ZinGetOutputTensorDimensionMatrixMult((const ZinTensorDimensions *)(*((void *)this + 1) + 8), (const ZinTensorDimensions *)(*((void *)this + 1) + 128), *(void *)(*((void *)this + 1) + 16), a3);
}

void ZinIrMatrixMultUnit::CreateLayer(ZinIrMatrixMultUnit *a1, const ZinIrHalParameters *a2)
{
}

void sub_211225E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

BOOL LayerAndUsageInfo::operator<(_DWORD *a1, _DWORD *a2)
{
  return *(void *)(*(void *)a1 + 8) < *(void *)(*(void *)a2 + 8) || a1[2] < a2[2];
}

uint64_t GetTensorFromLayerAndUsage(ZinIrOpLayer *a1, int a2)
{
  GetTensorPtrFromLayerAndUsage(a1, a2, &v4);
  uint64_t v2 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void *GetTensorPtrFromLayerAndUsage@<X0>(ZinIrOpLayer *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  switch(a2)
  {
    case 1:
      unint64_t v4 = 1;
      goto LABEL_6;
    case 2:
      a1 = *(ZinIrOpLayer **)(*((void *)a1 + 12) - 8);
      goto LABEL_4;
    case 3:
LABEL_4:
      uint64_t result = (void *)(*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a1 + 40))(a1, 0, 0);
      break;
    default:
      unint64_t v4 = 0;
LABEL_6:
      uint64_t result = (void *)ZinIrOpLayer::GetInputTensorPtr(a1, v4);
      break;
  }
  uint64_t v6 = result[1];
  *a3 = *result;
  a3[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ZinTensorFamilyUtil::ZinTensorFamilyUtil(ZinTensorFamilyUtil *this, const ZinIrControlFlowGraph *a2, int a3, int a4)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((void *)this + 11) = 0;
  *((void *)this + 1std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = (char *)this + 88;
  *((void *)this + 12) = 0;
  ZinTensorFamilyUtil::BuildRootTensorMap((uint64_t)this, a2, (uint64_t)this + 40);
  if (a3) {
    ZinTensorFamilyUtil::SetTensorFamilyAttributes((int)this, a2, this, a4);
  }
}

void sub_2112260E4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v3, *(void **)(v1 + 88));
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::BuildRootTensorMap(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a2 + 1;
  uint64_t v5 = (uint64_t *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    int v7 = (uint64_t *)&v17;
    do
    {
      Hal = ZinIrTarget::GetHal(v7, (ZinIrTarget *)v5[4]);
      std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v17, (uint64_t)Hal);
      std::string __p = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      unint64_t v9 = std::vector<ZinIrTensor *>::insert<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,0>((uint64_t)&__p, 0, v17, &v18);
      ZinTensorFamilyUtil::BuildRootTensorMap((uint64_t)v9, (uint64_t *)&__p, a3);
      if (__p)
      {
        unint64_t v15 = __p;
        operator delete(__p);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v17, v18);
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          int v7 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v7 = (uint64_t *)v5[2];
          BOOL v11 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v11);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  uint64_t v12 = *(void **)(a1 + 56);
  if (v12)
  {
    char v13 = (uint64_t **)(a1 + 80);
    do
    {
      std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(v13, v12 + 3, v12 + 3);
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
}

void sub_211226214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, void *a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::SetTensorFamilyAttributes(int a1, void *a2, void *a3, int a4)
{
  unint64_t v4 = a2 + 1;
  uint64_t v5 = (uint64_t *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    unint64_t v9 = (uint64_t *)&v16;
    do
    {
      Hal = ZinIrTarget::GetHal(v9, (ZinIrTarget *)v5[4]);
      std::set<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::set[abi:ne180100]((uint64_t *)&v16, (uint64_t)Hal);
      std::string __p = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      std::vector<ZinIrTensor *>::insert<std::__tree_const_iterator<ZinIrTensor *,std::__tree_node<ZinIrTensor *,void *> *,long>,0>((uint64_t)&__p, 0, v16, &v17);
      ZinTensorFamilyUtil::SetTensorFamilyAttributes(a1, (ZinIrOpLayer ***)&__p, a3, a4);
      if (__p)
      {
        uint64_t v14 = __p;
        operator delete(__p);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v17);
      BOOL v11 = (uint64_t *)v5[1];
      if (v11)
      {
        do
        {
          unint64_t v9 = v11;
          BOOL v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v9 = (uint64_t *)v5[2];
          BOOL v12 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v12);
      }
      uint64_t v5 = v9;
    }
    while (v9 != v4);
  }
}

void sub_211226330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, void *a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::BuildRootTensorMap(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      (*(void (**)(void *__return_ptr))(**(void **)v3 + 72))(v10);
      uint64_t v6 = (ZinIrTensor **)v10[0];
      int v7 = (ZinIrTensor **)v10[1];
      while (v6 != v7)
      {
        uint64_t RootTensor = ZinIrTensor::GetRootTensor(*v6);
        unint64_t v9 = *v6;
        BOOL v11 = &v12;
        BOOL v12 = (void **)v9;
        std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>(a3, &v12, (uint64_t)&std::piecewise_construct, &v11)[3] = RootTensor;
        v6 += 2;
      }
      BOOL v12 = (void **)v10;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v12);
      v3 += 8;
    }
    while (v3 != v4);
  }
}

void sub_21122644C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::SetTensorFamilyAttributes(int a1, ZinIrOpLayer ***a2, void *a3, int a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      unint64_t v9 = *v4;
      std::string __p = 0;
      int v18 = 0;
      uint64_t v19 = 0;
      char IsNoOp = ZinIrOpLayer::IsNoOp(v9, (uint64_t *)&__p);
      if (__p)
      {
        int v18 = (ZinIrTensor **)__p;
        operator delete(__p);
      }
      if ((IsNoOp & 1) == 0)
      {
        BOOL v11 = (uint64_t *)*((void *)v9 + 11);
        BOOL v12 = (uint64_t *)*((void *)v9 + 12);
        while (v11 != v12)
        {
          uint64_t v13 = *v11++;
          uint64_t v14 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v13 + 32))(v13, 0, 0);
          ZinTensorFamilyUtil::InitializeTensorFamilyAttributes(a1, v14, a3, a4);
        }
        (*(void (**)(void **__return_ptr, ZinIrOpLayer *))(*(void *)v9 + 72))(&__p, v9);
        uint64_t v15 = (ZinIrTensor **)__p;
        uint64_t v16 = v18;
        while (v15 != v16)
        {
          ZinTensorFamilyUtil::InitializeTensorFamilyAttributes(a1, *v15, a3, a4);
          v15 += 2;
        }
        p_p = &__p;
        std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&p_p);
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_2112265BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinTensorFamilyUtil::InitializeTensorFamilyAttributes(int a1, ZinIrTensor *this, void *a3, int a4)
{
  uint64_t RootTensor = ZinIrTensor::GetRootTensor(this);
  uint64_t v19 = RootTensor;
  if ((!a4 || !*(_DWORD *)(*(void *)(**(void **)(*((void *)RootTensor + 13) + 40) + 8) + 12))
    && !std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v19))
  {
    ZinTensorFamilyUtil::BuildTensorFamilyAttribute(v19, (uint64_t)v11);
    CFNumberRef v20 = &v19;
    int v7 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)a3, &v19, (uint64_t)&std::piecewise_construct, &v20);
    uint64_t v8 = (void *)v7[3];
    if (v8)
    {
      v7[4] = v8;
      operator delete(v8);
      v7[3] = 0;
      v7[4] = 0;
      void v7[5] = 0;
    }
    unint64_t v9 = (void *)v7[6];
    *(_OWORD *)(v7 + 3) = *(_OWORD *)v11;
    void v7[5] = v12;
    v11[1] = 0;
    uint64_t v12 = 0;
    v11[0] = 0;
    if (v9)
    {
      v7[7] = v9;
      operator delete(v9);
      v7[6] = 0;
      v7[7] = 0;
      v7[8] = 0;
    }
    uint64_t v10 = (void *)v7[9];
    *((_OWORD *)v7 + 3) = *(_OWORD *)__p;
    v7[8] = v14;
    __p[1] = 0;
    uint64_t v14 = 0;
    __p[0] = 0;
    if (v10)
    {
      void v7[10] = v10;
      operator delete(v10);
      v7[9] = 0;
      void v7[10] = 0;
      v7[11] = 0;
      uint64_t v10 = __p[0];
    }
    *(_OWORD *)(v7 + 9) = v15;
    v7[11] = v16;
    uint64_t v16 = 0;
    long long v15 = 0uLL;
    *((_WORD *)v7 + 48) = v17;
    *((unsigned char *)v7 + 98) = v18;
    if (v10)
    {
      __p[1] = v10;
      operator delete(v10);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
  }
}

void sub_211226770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ZinTensorFamilyUtil::BuildTensorFamilyAttribute(const ZinIrTensor *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  ZinIrTensor::GetTensorFamily(a1, (uint64_t)&v24);
  uint64_t v4 = *(void **)(a2 + 48);
  if (v4)
  {
    *(void *)(a2 + 56) = v4;
    operator delete(v4);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  *(_OWORD *)(a2 + 48) = v24;
  *(void *)(a2 + 64) = v25;
  ZinTensorFamilyUtil::FindUsers((uint64_t **)(a2 + 48), 0, (void **)&v24);
  ZinTensorFamilyUtil::SortLayersBySched((uint64_t)&v24, (unint64_t *)&v22);
  ZinTensorFamilyUtil::FindUsers((uint64_t **)(a2 + 48), 1, v21);
  ZinTensorFamilyUtil::SortLayersBySched((uint64_t)v21, (unint64_t *)&__p);
  if (&v22 != (void **)a2) {
    std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((char *)a2, (char *)v22, (uint64_t)v23, (v23 - (unsigned char *)v22) >> 4);
  }
  if ((void **)(a2 + 24) != &__p) {
    std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>((char *)(a2 + 24), (char *)__p, (uint64_t)v20, (v20 - (unsigned char *)__p) >> 4);
  }
  uint64_t v5 = *(ZinIrTensor ***)(a2 + 48);
  uint64_t v6 = *(ZinIrTensor ***)(a2 + 56);
  if (v5 == v6)
  {
    *(unsigned char *)(a2 + 73) = 0;
LABEL_28:
    BOOL v17 = 0;
    *(unsigned char *)(a2 + 72) = 0;
    goto LABEL_29;
  }
  while (*((void *)*v5 + 14) || !ZinIrTensor::IsLiveInLiveStateOrConstTensor(*v5))
  {
    if (++v5 == v6)
    {
      char v7 = 0;
      goto LABEL_14;
    }
  }
  char v7 = 1;
LABEL_14:
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  *(unsigned char *)(a2 + 73) = v7;
  if (v8 == v9) {
    goto LABEL_28;
  }
  uint64_t v10 = v8 + 8;
  do
  {
    BOOL IsLiveOut = ZinIrTensor::IsLiveOut(*(ZinIrTensor **)(v10 - 8));
    char v12 = v10 == v9 || IsLiveOut;
    v10 += 8;
  }
  while ((v12 & 1) == 0);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  *(unsigned char *)(a2 + 72) = IsLiveOut;
  if (v14 == v13)
  {
    BOOL v17 = 0;
  }
  else
  {
    uint64_t v15 = v14 + 8;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 112);
      BOOL v18 = v16 == 0;
      BOOL v17 = v16 != 0;
      BOOL v18 = !v18 || v15 == v13;
      v15 += 8;
    }
    while (!v18);
  }
LABEL_29:
  *(unsigned char *)(a2 + 74) = v17;
  if (__p)
  {
    CFNumberRef v20 = __p;
    operator delete(__p);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  if (v22)
  {
    CFNumberRef v23 = v22;
    operator delete(v22);
  }
  if ((void)v24)
  {
    *((void *)&v24 + 1) = v24;
    operator delete((void *)v24);
  }
}

void sub_211226968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  CFNumberRef v20 = *(void **)(v18 - 64);
  if (v20)
  {
    *(void *)(v18 - 56) = v20;
    operator delete(v20);
  }
  SplitOutputs::~SplitOutputs(v17);
  _Unwind_Resume(a1);
}

void ZinTensorFamilyUtil::FindUsers(uint64_t **a1@<X1>, char a2@<W2>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a1;
  long long v50 = a1[1];
  if (*a1 != v50)
  {
    do
    {
      uint64_t v52 = v4;
      uint64_t v5 = *v4;
      uint64_t v6 = *(void *)(*v4 + 96);
      uint64_t v8 = *(ZinIrOpLayer ***)(v6 + 112);
      char v7 = *(ZinIrOpLayer ***)(v6 + 120);
      while (v8 != v7)
      {
        uint64_t v9 = *v8;
        std::string __p = 0;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        char IsNoOp = ZinIrOpLayer::IsNoOp(v9, (uint64_t *)&__p);
        if (__p)
        {
          uint64_t v54 = __p;
          operator delete(__p);
        }
        if ((IsNoOp & 1) == 0 && *((void *)v9 + 12) != *((void *)v9 + 11))
        {
          for (unint64_t i = 0; i < (uint64_t)(*((void *)v9 + 12) - *((void *)v9 + 11)) >> 3; ++i)
          {
            if (ZinIrOpLayer::GetInputTensor(v9, i) == v5)
            {
              if (i == 1)
              {
                int v14 = (*(uint64_t (**)(ZinIrOpLayer *))(*(void *)v9 + 120))(v9);
                uint64_t v13 = (char *)a3[1];
                uint64_t v15 = (char *)a3[2];
                if (v14)
                {
                  if (v13 < v15)
                  {
                    *(void *)uint64_t v13 = v9;
                    int v16 = 2;
                    goto LABEL_27;
                  }
                  uint64_t v23 = (v13 - (unsigned char *)*a3) >> 4;
                  unint64_t v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 60) {
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v25 = v15 - (unsigned char *)*a3;
                  if (v25 >> 3 > v24) {
                    unint64_t v24 = v25 >> 3;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v20 = v24;
                  }
                  if (v20) {
                    CFTypeID v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a3 + 2), v20);
                  }
                  else {
                    CFTypeID v21 = 0;
                  }
                  uint64_t v29 = &v21[16 * v23];
                  *(void *)uint64_t v29 = v9;
                  *((_DWORD *)v29 + 2) = 2;
                  int v33 = (char *)*a3;
                  uint64_t v30 = (char *)a3[1];
                  int v32 = v29;
                  if (v30 == *a3) {
                    goto LABEL_57;
                  }
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v33);
                }
                else
                {
                  if (v13 < v15)
                  {
                    *(void *)uint64_t v13 = v9;
                    int v16 = 1;
LABEL_27:
                    *((_DWORD *)v13 + 2) = v16;
LABEL_28:
                    BOOL v22 = v13 + 16;
                    goto LABEL_59;
                  }
                  uint64_t v26 = (v13 - (unsigned char *)*a3) >> 4;
                  unint64_t v27 = v26 + 1;
                  if ((unint64_t)(v26 + 1) >> 60) {
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v28 = v15 - (unsigned char *)*a3;
                  if (v28 >> 3 > v27) {
                    unint64_t v27 = v28 >> 3;
                  }
                  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v20 = v27;
                  }
                  if (v20) {
                    CFTypeID v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a3 + 2), v20);
                  }
                  else {
                    CFTypeID v21 = 0;
                  }
                  uint64_t v29 = &v21[16 * v26];
                  *(void *)uint64_t v29 = v9;
                  *((_DWORD *)v29 + 2) = 1;
                  __int16 v34 = (char *)*a3;
                  uint64_t v30 = (char *)a3[1];
                  int v32 = v29;
                  if (v30 == *a3) {
                    goto LABEL_57;
                  }
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v34);
                }
LABEL_56:
                uint64_t v30 = (char *)*a3;
                goto LABEL_57;
              }
              if (!i)
              {
                uint64_t v13 = (char *)a3[1];
                char v12 = (char *)a3[2];
                if (v13 < v12)
                {
                  *(void *)uint64_t v13 = v9;
                  *((_DWORD *)v13 + 2) = 0;
                  goto LABEL_28;
                }
                uint64_t v17 = (v13 - (unsigned char *)*a3) >> 4;
                unint64_t v18 = v17 + 1;
                if ((unint64_t)(v17 + 1) >> 60) {
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v19 = v12 - (unsigned char *)*a3;
                if (v19 >> 3 > v18) {
                  unint64_t v18 = v19 >> 3;
                }
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v20 = v18;
                }
                if (v20) {
                  CFTypeID v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a3 + 2), v20);
                }
                else {
                  CFTypeID v21 = 0;
                }
                uint64_t v29 = &v21[16 * v17];
                *(void *)uint64_t v29 = v9;
                *((_DWORD *)v29 + 2) = 0;
                uint64_t v31 = (char *)*a3;
                uint64_t v30 = (char *)a3[1];
                int v32 = v29;
                if (v30 != *a3)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v31);
                  goto LABEL_56;
                }
LABEL_57:
                BOOL v22 = v29 + 16;
                *a3 = v32;
                a3[1] = v29 + 16;
                a3[2] = &v21[16 * v20];
                if (v30) {
                  operator delete(v30);
                }
LABEL_59:
                a3[1] = v22;
              }
            }
          }
        }
        ++v8;
      }
      if (a2)
      {
        uint64_t v35 = *(ZinIrOpLayer **)(v5 + 96);
        std::string __p = 0;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        char v36 = ZinIrOpLayer::IsNoOp(v35, (uint64_t *)&__p);
        if (__p)
        {
          uint64_t v54 = __p;
          operator delete(__p);
        }
        if ((v36 & 1) == 0)
        {
          uint64_t v37 = *(void *)(v5 + 96);
          uint64_t v39 = (char *)a3[1];
          char v38 = (char *)a3[2];
          if (v39 >= v38)
          {
            uint64_t v41 = (v39 - (unsigned char *)*a3) >> 4;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 60) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v43 = v38 - (unsigned char *)*a3;
            if (v43 >> 3 > v42) {
              unint64_t v42 = v43 >> 3;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44) {
              uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a3 + 2), v44);
            }
            else {
              uint64_t v45 = 0;
            }
            long long v46 = &v45[16 * v41];
            *(void *)long long v46 = v37;
            *((_DWORD *)v46 + 2) = 3;
            long long v48 = (char *)*a3;
            uint64_t v47 = (char *)a3[1];
            long long v49 = v46;
            if (v47 != *a3)
            {
              do
              {
                *((_OWORD *)v49 - 1) = *((_OWORD *)v47 - 1);
                v49 -= 16;
                v47 -= 16;
              }
              while (v47 != v48);
              uint64_t v47 = (char *)*a3;
            }
            __n128 v40 = v46 + 16;
            *a3 = v49;
            a3[1] = v46 + 16;
            a3[2] = &v45[16 * v44];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(void *)uint64_t v39 = v37;
            *((_DWORD *)v39 + 2) = 3;
            __n128 v40 = v39 + 16;
          }
          a3[1] = v40;
        }
      }
      uint64_t v4 = v52 + 1;
    }
    while (v52 + 1 != v50);
  }
}

void sub_211226E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void ZinTensorFamilyUtil::SortLayersBySched(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<LayerAndUsageInfo>::__init_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>(a2, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  uint64_t v3 = (ZinIrOpLayer **)a2[1];
  unint64_t v4 = 126 - 2 * __clz((uint64_t)((uint64_t)v3 - *a2) >> 4);
  if (v3 == (ZinIrOpLayer **)*a2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,false>(*a2, v3, v5, 1);
}

void sub_211226F08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinTensorFamilyUtil::GetNextUsage(ZinTensorFamilyUtil *this, const ZinIrTensor *a2, uint64_t a3)
{
  AllUsages = ZinTensorFamilyUtil::GetAllUsages(this, a2);
  uint64_t v5 = (void *)*AllUsages;
  uint64_t v6 = (void *)AllUsages[1];
  if (v6 != (void *)*AllUsages)
  {
    unint64_t v7 = ((uint64_t)v6 - *AllUsages) >> 4;
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = &v5[2 * (v7 >> 1)];
      uint64_t v11 = *v9;
      uint64_t v10 = v9 + 2;
      v7 += ~(v7 >> 1);
      if (*(void *)(v11 + 48) <= a3) {
        uint64_t v5 = v10;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  if (v5 == v6) {
    return 0;
  }
  else {
    return *v5;
  }
}

void *ZinTensorFamilyUtil::GetAllUsages(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  uint64_t v5 = a2;
  uint64_t v5 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((void *)this + 5, &v5)[3];
  uint64_t v3 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v5);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v3 + 6;
}

uint64_t ZinTensorFamilyUtil::GetNextReadUsage(ZinTensorFamilyUtil *this, const ZinIrTensor *a2, uint64_t a3)
{
  Usages = ZinTensorFamilyUtil::GetReadUsages(this, a2);
  uint64_t v5 = (void *)*Usages;
  uint64_t v6 = (void *)Usages[1];
  if (v6 != (void *)*Usages)
  {
    unint64_t v7 = ((uint64_t)v6 - *Usages) >> 4;
    do
    {
      unint64_t v8 = v7 >> 1;
      uint64_t v9 = &v5[2 * (v7 >> 1)];
      uint64_t v11 = *v9;
      uint64_t v10 = v9 + 2;
      v7 += ~(v7 >> 1);
      if (*(void *)(v11 + 48) <= a3) {
        uint64_t v5 = v10;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  if (v5 == v6) {
    return 0;
  }
  else {
    return *v5;
  }
}

void *ZinTensorFamilyUtil::GetReadUsages(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  uint64_t v5 = a2;
  uint64_t v5 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((void *)this + 5, &v5)[3];
  uint64_t v3 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v5);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v3 + 3;
}

char **ZinTensorFamilyUtil::GetNextReadUsages@<X0>(ZinTensorFamilyUtil *this@<X0>, const ZinIrTensor *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = (char **)ZinTensorFamilyUtil::GetReadUsages(this, a2);
  unint64_t v7 = *result;
  uint64_t v8 = (uint64_t)result[1];
  if ((char *)v8 == *result)
  {
    unint64_t v7 = result[1];
  }
  else
  {
    unint64_t v9 = (v8 - (uint64_t)*result) >> 4;
    do
    {
      unint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[16 * (v9 >> 1)];
      uint64_t v13 = *(void *)v11;
      char v12 = v11 + 16;
      v9 += ~(v9 >> 1);
      if (*(void *)(v13 + 48) <= a3) {
        unint64_t v7 = v12;
      }
      else {
        unint64_t v9 = v10;
      }
    }
    while (v9);
  }
  if ((char *)v8 == v7)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return (char **)std::vector<LayerAndUsageInfo>::__init_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>(a4, v7, v8, (v8 - (uint64_t)v7) >> 4);
  }
  return result;
}

uint64_t ZinTensorFamilyUtil::GetRootTensor(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  uint64_t v3 = a2;
  return std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((void *)this + 5, &v3)[3];
}

BOOL ZinTensorFamilyUtil::IsLastUsage(void *a1, uint64_t a2)
{
  uint64_t TensorFromLayerAndUsage = GetTensorFromLayerAndUsage(*(ZinIrOpLayer **)a2, *(_DWORD *)(a2 + 8));
  uint64_t TensorFromLayerAndUsage = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a1 + 5, &TensorFromLayerAndUsage)[3];
  unint64_t v4 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a1, &TensorFromLayerAndUsage);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if ((v4[4] - v4[3] < 0x11uLL || *(void *)(v4[4] - 16) != *(void *)(v4[4] - 32))
    && (uint64_t v5 = v4[7], *(void *)(v5 - 16) == *(void *)a2))
  {
    return *(_DWORD *)(v5 - 8) == *(_DWORD *)(a2 + 8);
  }
  else
  {
    return 0;
  }
}

void *ZinTensorFamilyUtil::GetLastReadUsage@<X0>(ZinTensorFamilyUtil *this@<X0>, const ZinIrTensor *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = ZinTensorFamilyUtil::GetReadUsages(this, a2);
  uint64_t v5 = result[1];
  if (*result == v5)
  {
    char v6 = 0;
    *a3 = 0;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)(v5 - 16);
    char v6 = 1;
  }
  a3[16] = v6;
  return result;
}

BOOL ZinTensorFamilyUtil::IsLiveInLiveOutOrConstIn(void *a1, uint64_t a2)
{
  uint64_t TensorFromLayerAndUsage = GetTensorFromLayerAndUsage(*(ZinIrOpLayer **)a2, *(_DWORD *)(a2 + 8));
  uint64_t TensorFromLayerAndUsage = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a1 + 5, &TensorFromLayerAndUsage)[3];
  uint64_t v3 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a1, &TensorFromLayerAndUsage);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v3[97] | v3[96] || v3[98] != 0;
}

BOOL ZinTensorFamilyUtil::HasReshapeInTensorFamily(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  TensorFamily = ZinTensorFamilyUtil::GetTensorFamily(this, a2);
  uint64_t v3 = TensorFamily[1];
  if (*TensorFamily == v3) {
    return 0;
  }
  uint64_t v4 = *TensorFamily + 8;
  do
  {
    int v5 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(v4 - 8) + 96) + 64) + 8);
    BOOL result = v5 == 35;
    BOOL v7 = v5 == 35 || v4 == v3;
    v4 += 8;
  }
  while (!v7);
  return result;
}

void *ZinTensorFamilyUtil::GetTensorFamily(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  int v5 = a2;
  int v5 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((void *)this + 5, &v5)[3];
  uint64_t v3 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v5);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v3 + 9;
}

uint64_t ZinTensorFamilyUtil::FindPath(uint64_t a1, uint64_t a2, void **a3)
{
  unint64_t v6 = (unint64_t)a3[2];
  BOOL v7 = a3[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a3) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - (void)*a3;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)int v14 = a1;
    uint64_t v8 = v14 + 8;
    uint64_t v17 = (char *)*a3;
    int v16 = (char *)a3[1];
    if (v16 != *a3)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int v16 = (char *)*a3;
    }
    *a3 = v14;
    a3[1] = v8;
    a3[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *BOOL v7 = a1;
    uint64_t v8 = v7 + 1;
  }
  a3[1] = v8;
  if (a1 != a2)
  {
    uint64_t v19 = *(ZinIrOpLayer ***)(a1 + 112);
    unint64_t v20 = *(ZinIrOpLayer ***)(a1 + 120);
    if (v19 == v20)
    {
LABEL_25:
      uint64_t result = 0;
      a3[1] = v8 - 1;
      return result;
    }
    while (1)
    {
      CFTypeID v21 = *v19;
      std::string __p = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      int IsNoOp = ZinIrOpLayer::IsNoOp(v21, (uint64_t *)&__p);
      if (__p)
      {
        uint64_t v25 = __p;
        operator delete(__p);
      }
      if (IsNoOp && (ZinTensorFamilyUtil::FindPath(v21, a2, a3) & 1) != 0) {
        break;
      }
      if (++v19 == v20)
      {
        uint64_t v8 = a3[1];
        goto LABEL_25;
      }
    }
  }
  return 1;
}

void sub_211227560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinTensorFamilyUtil::GetIntermediateLayers(uint64_t a1, ZinIrOpLayer *a2, unint64_t a3, char a4, void **a5)
{
  if (*a5 != a5[1])
  {
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v5) {
      ZinTensorFamilyUtil::GetIntermediateLayers(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    return 3;
  }
  if (a4)
  {
    unint64_t v17 = a3;
    uint64_t v18 = *((void *)a2 + 11);
    if (a3 >= (*((void *)a2 + 12) - v18) >> 3)
    {
      BOOL v19 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v19) {
        ZinTensorFamilyUtil::GetIntermediateLayers(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      return 3;
    }
  }
  else
  {
    unint64_t v27 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0);
    uint64_t RootTensor = ZinIrTensor::GetRootTensor(v27);
    if (*((void *)a2 + 12) == *((void *)a2 + 11))
    {
LABEL_14:
      BOOL v31 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v31) {
        ZinTensorFamilyUtil::GetIntermediateLayers(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      return 3;
    }
    uint64_t v29 = RootTensor;
    unint64_t v17 = 0;
    while (1)
    {
      InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a2, v17);
      if (v29 == ZinIrTensor::GetRootTensor(InputTensor)) {
        break;
      }
      if (++v17 >= (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3) {
        goto LABEL_14;
      }
    }
    uint64_t v18 = *((void *)a2 + 11);
  }
  uint64_t v39 = *(void *)(v18 + 8 * v17);
  __n128 v40 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v39 + 32))(v39, 0, 0);
  uint64_t v41 = ZinIrTensor::GetRootTensor(v40);
  unint64_t v42 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  if (v41 != ZinIrTensor::GetRootTensor(v42)) {
    return 0;
  }
  uint64_t result = ZinTensorFamilyUtil::FindPath(a1, v39, a5);
  if (result)
  {
    unint64_t v44 = (char *)*a5;
    uint64_t v43 = (char *)a5[1];
    uint64_t v45 = (char *)*a5 + 8;
    int64_t v46 = v43 - v45;
    if (v43 != v45) {
      memmove(*a5, v45, v43 - v45);
    }
    uint64_t result = 0;
    a5[1] = &v44[v46];
  }
  return result;
}

uint64_t ZinTensorFamilyUtil::FindAllIntermediateLayerPaths(uint64_t a1, ZinIrOpLayer *a2, uint64_t *a3)
{
  if (*((void *)a2 + 12) != *((void *)a2 + 11))
  {
    for (unint64_t i = 0; i < (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3; ++i)
    {
      std::string __p = 0;
      int v16 = 0;
      uint64_t v17 = 0;
      uint64_t IntermediateLayers = ZinTensorFamilyUtil::GetIntermediateLayers(a1, a2, i, 1, &__p);
      int v9 = IntermediateLayers;
      uint64_t v10 = IntermediateLayers;
      if (!IntermediateLayers)
      {
        uint64_t v11 = __p;
        if (__p == v16) {
          goto LABEL_10;
        }
        unint64_t v12 = a3[1];
        if (v12 >= a3[2])
        {
          uint64_t v13 = std::vector<std::vector<ZinIrOpLayer *>>::__push_back_slow_path<std::vector<ZinIrOpLayer *> const&>(a3, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<DimensionMapping>>::__construct_one_at_end[abi:ne180100]<std::vector<DimensionMapping> const&>((uint64_t)a3, (uint64_t)&__p);
          uint64_t v13 = v12 + 24;
        }
        a3[1] = v13;
        uint64_t v10 = v3;
      }
      uint64_t v11 = __p;
      uint64_t v3 = v10;
LABEL_10:
      if (v11)
      {
        int v16 = v11;
        operator delete(v11);
      }
      if (v9) {
        return v3;
      }
    }
  }
  return 0;
}

void sub_211227864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinTensorFamilyUtil::DeleteTensorFromFamilyAttributesAndRootTensorMap(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = (void *)((char *)this + 40);
  uint64_t v11 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((void *)this + 5, &v11)[3];
  TensorFamily = (uint64_t **)ZinTensorFamilyUtil::GetTensorFamily(this, a2);
  uint64_t v6 = *TensorFamily;
  uint64_t v7 = TensorFamily[1];
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    uint64_t v10 = v8;
    std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,long>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,long>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,long>>>::__erase_unique<ZinIrOpLayer *>(v4, &v10);
  }
  std::__tree<std::__value_type<ZinIrOpLayer *,float>,std::__map_value_compare<ZinIrOpLayer *,std::__value_type<ZinIrOpLayer *,float>,ZinIrIdComparator<ZinIrOpLayer *>,true>,std::allocator<std::__value_type<ZinIrOpLayer *,float>>>::__erase_unique<ZinIrOpLayer *>((uint64_t **)this + 10, (uint64_t *)&v11);
  return std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__erase_unique<ZinIrTensor *>(this, &v11);
}

void ZinTensorFamilyUtil::UpdateFamilyAttributesAndRootTensorMap(uint64_t **this, const ZinIrTensor *a2, char a3)
{
  uint64_t RootTensor = ZinIrTensor::GetRootTensor(a2);
  uint64_t v22 = RootTensor;
  ZinIrTensor::GetTensorFamily(RootTensor, (uint64_t)&v20);
  uint64_t v6 = (char *)v20;
  uint64_t v7 = v21;
  if (v20 != v21)
  {
    do
    {
      v12[0] = v6;
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)(this + 5), v6, (uint64_t)&std::piecewise_construct, (void **)v12)[3] = RootTensor;
      v6 += 8;
    }
    while (v6 != v7);
  }
  if ((a3 & 1) == 0 || !*(_DWORD *)(*(void *)(**(void **)(*((void *)RootTensor + 13) + 40) + 8) + 12))
  {
    std::__tree<ZinIrTensor const*,ZinIrIdComparator<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const*>(this + 10, (uint64_t *)&v22, (uint64_t *)&v22);
    ZinTensorFamilyUtil::BuildTensorFamilyAttribute(v22, (uint64_t)v12);
    uint64_t v23 = &v22;
    uint64_t v8 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)this, &v22, (uint64_t)&std::piecewise_construct, &v23);
    int v9 = (void *)v8[3];
    if (v9)
    {
      void v8[4] = v9;
      operator delete(v9);
      void v8[3] = 0;
      void v8[4] = 0;
      v8[5] = 0;
    }
    uint64_t v10 = (void *)v8[6];
    *(_OWORD *)(v8 + 3) = *(_OWORD *)v12;
    v8[5] = v13;
    v12[1] = 0;
    uint64_t v13 = 0;
    v12[0] = 0;
    if (v10)
    {
      v8[7] = v10;
      operator delete(v10);
      v8[6] = 0;
      v8[7] = 0;
      v8[8] = 0;
    }
    uint64_t v11 = (void *)v8[9];
    *((_OWORD *)v8 + 3) = *(_OWORD *)__p;
    v8[8] = v15;
    __p[1] = 0;
    uint64_t v15 = 0;
    __p[0] = 0;
    if (v11)
    {
      v8[10] = v11;
      operator delete(v11);
      v8[9] = 0;
      v8[10] = 0;
      v8[11] = 0;
      uint64_t v11 = __p[0];
    }
    *(_OWORD *)(v8 + 9) = v16;
    v8[11] = v17;
    uint64_t v17 = 0;
    long long v16 = 0uLL;
    *((_WORD *)v8 + 48) = v18;
    *((unsigned char *)v8 + 98) = v19;
    if (v11)
    {
      __p[1] = v11;
      operator delete(v11);
    }
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete(v12[0]);
    }
  }
  if (v20)
  {
    uint64_t v21 = (char *)v20;
    operator delete(v20);
  }
}

void sub_211227B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinTensorFamilyUtil::GetRootTensors(ZinTensorFamilyUtil *this)
{
  return (uint64_t)this + 80;
}

BOOL ZinTensorFamilyUtil::HasValidTensorAttributes(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  uint64_t v4 = a2;
  uint64_t v4 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((void *)this + 5, &v4)[3];
  return std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v4) != 0;
}

BOOL ZinTensorFamilyUtil::HasMultipleUsers(ZinTensorFamilyUtil *this, const ZinIrTensor *a2)
{
  BOOL v5 = a2;
  BOOL v5 = (const ZinIrTensor *)std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>((void *)this + 5, &v5)[3];
  uint64_t v3 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(this, &v5);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v3[4] - v3[3] > 0x10uLL;
}

char *std::vector<LayerAndUsageInfo>::__assign_with_size[abi:ne180100]<LayerAndUsageInfo*,LayerAndUsageInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      __int16 v18 = v9;
      char v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    __int16 v18 = v9;
    char v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,false>(unint64_t a1, ZinIrOpLayer **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v121 = a2 - 4;
    uint64_t v123 = a2 - 2;
    unint64_t v126 = a2;
    unint64_t v120 = a2 - 6;
    unint64_t v7 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v7;
          uint64_t v8 = (uint64_t)v126 - v7;
          uint64_t v9 = (uint64_t)((uint64_t)v126 - v7) >> 4;
          if (v5 || !v4)
          {
            switch(v9)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v54 = v126 - 2;
                if (ZinIrOpLayer::IsANELayer(*(v126 - 2)) && ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)v7))
                {
                  uint64_t v55 = (void *)((char *)*v54 + 360);
                  uint64_t v56 = (void *)(*(void *)v7 + 360);
                }
                else
                {
                  uint64_t v55 = (void *)((char *)*v54 + 48);
                  uint64_t v56 = (void *)(*(void *)v7 + 48);
                }
                if (*v55 < *v56)
                {
                  long long v132 = *(_OWORD *)v7;
                  *(_OWORD *)unint64_t v7 = *(_OWORD *)v54;
                  *(_OWORD *)uint64_t v54 = v132;
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>((ZinIrOpLayer **)v7, (ZinIrOpLayer **)(v7 + 16), v123);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>((ZinIrOpLayer **)v7, (ZinIrOpLayer **)(v7 + 16), (ZinIrOpLayer **)(v7 + 32), v123);
                break;
              case 5:
                std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,0>((ZinIrOpLayer **)v7, (ZinIrOpLayer **)(v7 + 16), (ZinIrOpLayer **)(v7 + 32), (ZinIrOpLayer **)(v7 + 48), v123);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v8 <= 383)
          {
            long long v57 = (ZinIrOpLayer **)(v7 + 16);
            BOOL v59 = (ZinIrOpLayer **)v7 == v126 || v57 == v126;
            if (a4)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                long long v61 = (ZinIrOpLayer **)v7;
                do
                {
                  char v62 = v57;
                  if (ZinIrOpLayer::IsANELayer(v61[2]) && ZinIrOpLayer::IsANELayer(*v61))
                  {
                    unint64_t v63 = *v62;
                    int v64 = (void *)((char *)*v62 + 360);
                    char v65 = (void *)((char *)*v61 + 360);
                  }
                  else
                  {
                    unint64_t v63 = *v62;
                    int v64 = (void *)((char *)*v62 + 48);
                    char v65 = (void *)((char *)*v61 + 48);
                  }
                  if (*v64 < *v65)
                  {
                    uint64_t v66 = v61[3];
                    uint64_t v67 = v60;
                    while (1)
                    {
                      uint64_t v68 = a1 + v67;
                      *(_OWORD *)(a1 + v67 + 16) = *(_OWORD *)(a1 + v67);
                      if (!v67) {
                        break;
                      }
                      if (ZinIrOpLayer::IsANELayer(v63) && ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(v68 - 16)))
                      {
                        uint64_t v69 = (void *)(*(void *)(v68 - 16) + 360);
                        uint64_t v70 = (void *)((char *)v63 + 360);
                      }
                      else
                      {
                        uint64_t v69 = (void *)(*(void *)(v68 - 16) + 48);
                        uint64_t v70 = (void *)((char *)v63 + 48);
                      }
                      v67 -= 16;
                      if (*v70 >= *v69)
                      {
                        uint64_t v71 = (void *)(a1 + v67 + 16);
                        goto LABEL_138;
                      }
                    }
                    uint64_t v71 = (void *)a1;
LABEL_138:
                    void *v71 = v63;
                    v71[1] = v66;
                  }
                  long long v57 = v62 + 2;
                  v60 += 16;
                  long long v61 = v62;
                }
                while (v62 + 2 != v126);
              }
            }
            else if (!v59)
            {
              uint64_t v111 = (_OWORD *)(v7 - 16);
              do
              {
                uint64_t v112 = v57;
                if (ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(a1 + 16))
                  && ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)a1))
                {
                  long long v113 = *v112;
                  uint64_t v114 = (void *)((char *)*v112 + 360);
                  uint64_t v115 = (void *)(*(void *)a1 + 360);
                }
                else
                {
                  long long v113 = *v112;
                  uint64_t v114 = (void *)((char *)*v112 + 48);
                  uint64_t v115 = (void *)(*(void *)a1 + 48);
                }
                if (*v114 < *v115)
                {
                  uint64_t v116 = *(void *)(a1 + 24);
                  uint64_t v117 = v111;
                  do
                  {
                    v117[2] = v117[1];
                    if (ZinIrOpLayer::IsANELayer(v113) && ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)v117))
                    {
                      uint64_t v118 = (void *)(*(void *)v117 + 360);
                      uint64_t v119 = (void *)((char *)v113 + 360);
                    }
                    else
                    {
                      uint64_t v118 = (void *)(*(void *)v117 + 48);
                      uint64_t v119 = (void *)((char *)v113 + 48);
                    }
                    --v117;
                  }
                  while (*v119 < *v118);
                  *((void *)v117 + 4) = v113;
                  *((void *)v117 + 5) = v116;
                }
                long long v57 = v112 + 2;
                ++v111;
                a1 = (unint64_t)v112;
              }
              while (v112 + 2 != v126);
            }
            return;
          }
          if (!a3)
          {
            if ((ZinIrOpLayer **)v7 != v126)
            {
              int64_t v72 = (unint64_t)(v9 - 2) >> 1;
              int64_t v73 = v72;
              do
              {
                int64_t v74 = v73;
                if (v72 >= v73)
                {
                  int64_t v125 = v73;
                  uint64_t v75 = (2 * v73) | 1;
                  uint64_t v76 = (ZinIrOpLayer **)(a1 + 16 * v75);
                  uint64_t v77 = 2 * v73 + 2;
                  if (v77 < v9)
                  {
                    if (ZinIrOpLayer::IsANELayer(*v76) && ZinIrOpLayer::IsANELayer(v76[2]))
                    {
                      uint64_t v78 = (void *)((char *)*v76 + 360);
                      uint64_t v79 = (void *)((char *)v76[2] + 360);
                    }
                    else
                    {
                      uint64_t v78 = (void *)((char *)*v76 + 48);
                      uint64_t v79 = (void *)((char *)v76[2] + 48);
                    }
                    if (*v78 < *v79)
                    {
                      v76 += 2;
                      uint64_t v75 = v77;
                    }
                  }
                  int64_t v74 = v125;
                  uint64_t v80 = (ZinIrOpLayer **)(a1 + 16 * v125);
                  if (ZinIrOpLayer::IsANELayer(*v76) && ZinIrOpLayer::IsANELayer(*v80))
                  {
                    BOOL v81 = (void *)((char *)*v76 + 360);
                    uint64_t v82 = *v80;
                    uint64_t v83 = (void *)((char *)*v80 + 360);
                  }
                  else
                  {
                    BOOL v81 = (void *)((char *)*v76 + 48);
                    uint64_t v82 = *v80;
                    uint64_t v83 = (void *)((char *)*v80 + 48);
                  }
                  if (*v81 >= *v83)
                  {
                    uint64_t v122 = v80[1];
                    do
                    {
                      uint64_t v84 = v80;
                      uint64_t v80 = v76;
                      *(_OWORD *)uint64_t v84 = *(_OWORD *)v76;
                      if (v72 < v75) {
                        break;
                      }
                      uint64_t v85 = (2 * v75) | 1;
                      uint64_t v76 = (ZinIrOpLayer **)(a1 + 16 * v85);
                      uint64_t v75 = 2 * v75 + 2;
                      if (v75 < v9)
                      {
                        if (ZinIrOpLayer::IsANELayer(*v76) && ZinIrOpLayer::IsANELayer(v76[2]))
                        {
                          uint64_t v86 = (void *)((char *)*v76 + 360);
                          uint64_t v87 = (void *)((char *)v76[2] + 360);
                        }
                        else
                        {
                          uint64_t v86 = (void *)((char *)*v76 + 48);
                          uint64_t v87 = (void *)((char *)v76[2] + 48);
                        }
                        if (*v86 >= *v87) {
                          uint64_t v75 = v85;
                        }
                        else {
                          v76 += 2;
                        }
                      }
                      else
                      {
                        uint64_t v75 = v85;
                      }
                      if (ZinIrOpLayer::IsANELayer(*v76) && ZinIrOpLayer::IsANELayer(v82))
                      {
                        uint64_t v88 = (void *)((char *)*v76 + 360);
                        uint64_t v89 = (void *)((char *)v82 + 360);
                      }
                      else
                      {
                        uint64_t v88 = (void *)((char *)*v76 + 48);
                        uint64_t v89 = (void *)((char *)v82 + 48);
                      }
                    }
                    while (*v88 >= *v89);
                    ZinIrOpLayerGraph *v80 = v82;
                    v80[1] = v122;
                    int64_t v74 = v125;
                  }
                }
                int64_t v73 = v74 - 1;
              }
              while (v74);
              uint64_t v90 = (unint64_t)v8 >> 4;
              int v91 = v126;
              do
              {
                uint64_t v92 = 0;
                long long v131 = *(_OWORD *)a1;
                int v93 = (_OWORD *)a1;
                do
                {
                  uint64_t v94 = (uint64_t)&v93[v92 + 1];
                  uint64_t v95 = (2 * v92) | 1;
                  uint64_t v96 = 2 * v92 + 2;
                  if (v96 < v90)
                  {
                    int v97 = (ZinIrOpLayer **)&v93[v92 + 2];
                    if (ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)v94) && ZinIrOpLayer::IsANELayer(*v97))
                    {
                      int v98 = (void *)(*(void *)v94 + 360);
                      char v99 = (void *)(*(void *)(v94 + 16) + 360);
                    }
                    else
                    {
                      int v98 = (void *)(*(void *)v94 + 48);
                      char v99 = (void *)(*(void *)(v94 + 16) + 48);
                    }
                    if (*v98 < *v99)
                    {
                      v94 += 16;
                      uint64_t v95 = v96;
                    }
                  }
                  _OWORD *v93 = *(_OWORD *)v94;
                  int v93 = (_OWORD *)v94;
                  uint64_t v92 = v95;
                }
                while (v95 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
                v91 -= 2;
                if ((ZinIrOpLayer **)v94 == v91)
                {
                  *(_OWORD *)uint64_t v94 = v131;
                }
                else
                {
                  *(_OWORD *)uint64_t v94 = *(_OWORD *)v91;
                  *(_OWORD *)int v91 = v131;
                  uint64_t v100 = v94 - a1 + 16;
                  if (v100 >= 17)
                  {
                    unint64_t v101 = (((unint64_t)v100 >> 4) - 2) >> 1;
                    char v102 = (ZinIrOpLayer **)(a1 + 16 * v101);
                    if (ZinIrOpLayer::IsANELayer(*v102) && ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)v94))
                    {
                      unint64_t v103 = (void *)((char *)*v102 + 360);
                      uint64_t v104 = *(ZinIrOpLayer **)v94;
                      std::string v105 = (void *)(*(void *)v94 + 360);
                    }
                    else
                    {
                      unint64_t v103 = (void *)((char *)*v102 + 48);
                      uint64_t v104 = *(ZinIrOpLayer **)v94;
                      std::string v105 = (void *)(*(void *)v94 + 48);
                    }
                    if (*v103 < *v105)
                    {
                      uint64_t v106 = *(void *)(v94 + 8);
                      do
                      {
                        int v107 = (_OWORD *)v94;
                        uint64_t v94 = (uint64_t)v102;
                        *int v107 = *(_OWORD *)v102;
                        if (!v101) {
                          break;
                        }
                        unint64_t v101 = (v101 - 1) >> 1;
                        char v102 = (ZinIrOpLayer **)(a1 + 16 * v101);
                        if (ZinIrOpLayer::IsANELayer(*v102) && ZinIrOpLayer::IsANELayer(v104))
                        {
                          std::string v108 = (void *)((char *)*v102 + 360);
                          uint64_t v109 = (void *)((char *)v104 + 360);
                        }
                        else
                        {
                          std::string v108 = (void *)((char *)*v102 + 48);
                          uint64_t v109 = (void *)((char *)v104 + 48);
                        }
                      }
                      while (*v108 < *v109);
                      *(void *)uint64_t v94 = v104;
                      *(void *)(v94 + 8) = v106;
                    }
                  }
                }
              }
              while (v90-- > 2);
            }
            return;
          }
          unint64_t v10 = (unint64_t)v9 >> 1;
          unint64_t v11 = (ZinIrOpLayer **)(v7 + 16 * ((unint64_t)v9 >> 1));
          if ((unint64_t)v8 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(v11, (ZinIrOpLayer **)v7, v123);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>((ZinIrOpLayer **)v7, v11, v123);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>((ZinIrOpLayer **)(v7 + 16), v11 - 2, v121);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>((ZinIrOpLayer **)(v7 + 32), (ZinIrOpLayer **)(v7 + 16 + 16 * v10), v120);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(v11 - 2, v11, (ZinIrOpLayer **)(v7 + 16 + 16 * v10));
            long long v128 = *(_OWORD *)v7;
            *(_OWORD *)unint64_t v7 = *(_OWORD *)v11;
            *(_OWORD *)unint64_t v11 = v128;
          }
          --a3;
          if (a4) {
            break;
          }
          if (ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(v7 - 16)) && ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)v7))
          {
            uint64_t v13 = (void *)(*(void *)(v7 - 16) + 360);
            unint64_t v12 = *(ZinIrOpLayer **)v7;
            int v14 = (void *)(*(void *)v7 + 360);
          }
          else
          {
            uint64_t v13 = (void *)(*(void *)(v7 - 16) + 48);
            unint64_t v12 = *(ZinIrOpLayer **)v7;
            int v14 = (void *)(*(void *)v7 + 48);
          }
          if (*v13 < *v14) {
            goto LABEL_16;
          }
          uint64_t v38 = *(void *)(v7 + 8);
          if (ZinIrOpLayer::IsANELayer(v12) && ZinIrOpLayer::IsANELayer(*v123))
          {
            uint64_t v39 = (void *)((char *)v12 + 360);
            __n128 v40 = (void *)((char *)*v123 + 360);
          }
          else
          {
            uint64_t v39 = (void *)((char *)v12 + 48);
            __n128 v40 = (void *)((char *)*v123 + 48);
          }
          if (*v39 >= *v40)
          {
            unint64_t v43 = v7 + 16;
            do
            {
              unint64_t v7 = v43;
              if (v43 >= (unint64_t)v126) {
                break;
              }
              if (ZinIrOpLayer::IsANELayer(v12) && ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)v7))
              {
                unint64_t v44 = (uint64_t *)(*(void *)v7 + 360);
                uint64_t v45 = (void *)((char *)v12 + 360);
              }
              else
              {
                unint64_t v44 = (uint64_t *)(*(void *)v7 + 48);
                uint64_t v45 = (void *)((char *)v12 + 48);
              }
              uint64_t v46 = *v44;
              unint64_t v43 = v7 + 16;
            }
            while (*v45 >= v46);
          }
          else
          {
            do
            {
              if (ZinIrOpLayer::IsANELayer(v12) && ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(v7 + 16)))
              {
                uint64_t v41 = (void *)(*(void *)(v7 + 16) + 360);
                unint64_t v42 = (void *)((char *)v12 + 360);
              }
              else
              {
                uint64_t v41 = (void *)(*(void *)(v7 + 16) + 48);
                unint64_t v42 = (void *)((char *)v12 + 48);
              }
              v7 += 16;
            }
            while (*v42 >= *v41);
          }
          uint64_t v47 = v126;
          if (v7 < (unint64_t)v126)
          {
            uint64_t v47 = v126;
            do
            {
              if (ZinIrOpLayer::IsANELayer(v12) && ZinIrOpLayer::IsANELayer(*(v47 - 2)))
              {
                long long v48 = (void *)((char *)*(v47 - 2) + 360);
                long long v49 = (void *)((char *)v12 + 360);
              }
              else
              {
                long long v48 = (void *)((char *)*(v47 - 2) + 48);
                long long v49 = (void *)((char *)v12 + 48);
              }
              v47 -= 2;
            }
            while (*v49 < *v48);
          }
          while (v7 < (unint64_t)v47)
          {
            long long v130 = *(_OWORD *)v7;
            *(_OWORD *)unint64_t v7 = *(_OWORD *)v47;
            *(_OWORD *)uint64_t v47 = v130;
            do
            {
              if (ZinIrOpLayer::IsANELayer(v12) && ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(v7 + 16)))
              {
                long long v50 = (void *)(*(void *)(v7 + 16) + 360);
                uint64_t v51 = (void *)((char *)v12 + 360);
              }
              else
              {
                long long v50 = (void *)(*(void *)(v7 + 16) + 48);
                uint64_t v51 = (void *)((char *)v12 + 48);
              }
              v7 += 16;
            }
            while (*v51 >= *v50);
            do
            {
              if (ZinIrOpLayer::IsANELayer(v12) && ZinIrOpLayer::IsANELayer(*(v47 - 2)))
              {
                uint64_t v52 = (void *)((char *)*(v47 - 2) + 360);
                long long v53 = (void *)((char *)v12 + 360);
              }
              else
              {
                uint64_t v52 = (void *)((char *)*(v47 - 2) + 48);
                long long v53 = (void *)((char *)v12 + 48);
              }
              v47 -= 2;
            }
            while (*v53 < *v52);
          }
          BOOL v4 = v7 - 16 >= a1;
          BOOL v5 = v7 - 16 == a1;
          if (v7 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v7 - 16);
          }
          a4 = 0;
          *(void *)(v7 - 16) = v12;
          *(void *)(v7 - 8) = v38;
        }
        unint64_t v12 = *(ZinIrOpLayer **)v7;
LABEL_16:
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(v7 + 8);
        do
        {
          uint64_t v17 = a1 + v15;
          if (ZinIrOpLayer::IsANELayer(*(ZinIrOpLayer **)(a1 + v15 + 16)) && ZinIrOpLayer::IsANELayer(v12))
          {
            __int16 v18 = (void *)(*(void *)(v17 + 16) + 360);
            char v19 = (void *)((char *)v12 + 360);
          }
          else
          {
            __int16 v18 = (void *)(*(void *)(v17 + 16) + 48);
            char v19 = (void *)((char *)v12 + 48);
          }
          v15 += 16;
        }
        while (*v18 < *v19);
        unint64_t v20 = a1 + v15;
        uint64_t v21 = v126;
        if (v15 == 16)
        {
          uint64_t v25 = v126;
          while (v20 < (unint64_t)v25)
          {
            uint64_t v22 = v25 - 2;
            if (ZinIrOpLayer::IsANELayer(*(v25 - 2)) && ZinIrOpLayer::IsANELayer(v12))
            {
              uint64_t v26 = (void *)((char *)*(v25 - 2) + 360);
              unint64_t v27 = (void *)((char *)v12 + 360);
            }
            else
            {
              uint64_t v26 = (void *)((char *)*(v25 - 2) + 48);
              unint64_t v27 = (void *)((char *)v12 + 48);
            }
            v25 -= 2;
            if (*v26 < *v27) {
              goto LABEL_38;
            }
          }
          uint64_t v22 = v25;
        }
        else
        {
          do
          {
            uint64_t v22 = v21 - 2;
            if (ZinIrOpLayer::IsANELayer(*(v21 - 2)) && ZinIrOpLayer::IsANELayer(v12))
            {
              uint64_t v23 = (void *)((char *)*(v21 - 2) + 360);
              uint64_t v24 = (void *)((char *)v12 + 360);
            }
            else
            {
              uint64_t v23 = (void *)((char *)*(v21 - 2) + 48);
              uint64_t v24 = (void *)((char *)v12 + 48);
            }
            v21 -= 2;
          }
          while (*v23 >= *v24);
        }
LABEL_38:
        unint64_t v7 = v20;
        if (v20 < (unint64_t)v22)
        {
          uint64_t v28 = v22;
          do
          {
            long long v129 = *(_OWORD *)v7;
            *(_OWORD *)unint64_t v7 = *(_OWORD *)v28;
            *(_OWORD *)uint64_t v28 = v129;
            unint64_t v29 = v7;
            do
            {
              uint64_t v30 = *(ZinIrOpLayer **)(v7 + 16);
              v7 += 16;
              if (ZinIrOpLayer::IsANELayer(v30) && ZinIrOpLayer::IsANELayer(v12))
              {
                BOOL v31 = (void *)(*(void *)(v29 + 16) + 360);
                uint64_t v32 = (void *)((char *)v12 + 360);
              }
              else
              {
                BOOL v31 = (void *)(*(void *)(v29 + 16) + 48);
                uint64_t v32 = (void *)((char *)v12 + 48);
              }
              unint64_t v29 = v7;
            }
            while (*v31 < *v32);
            uint64_t v33 = v28;
            do
            {
              uint64_t v34 = *(v28 - 2);
              v28 -= 2;
              if (ZinIrOpLayer::IsANELayer(v34) && ZinIrOpLayer::IsANELayer(v12))
              {
                uint64_t v35 = (void *)((char *)*(v33 - 2) + 360);
                uint64_t v36 = (void *)((char *)v12 + 360);
              }
              else
              {
                uint64_t v35 = (void *)((char *)*(v33 - 2) + 48);
                uint64_t v36 = (void *)((char *)v12 + 48);
              }
              uint64_t v33 = v28;
            }
            while (*v35 >= *v36);
          }
          while (v7 < (unint64_t)v28);
        }
        if (v7 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v7 - 16);
        }
        *(void *)(v7 - 16) = v12;
        *(void *)(v7 - 8) = v16;
        if (v20 >= (unint64_t)v22) {
          break;
        }
LABEL_58:
        std::__introsort<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,false>(a1, v7 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>((ZinIrOpLayer **)a1, (ZinIrOpLayer **)(v7 - 16));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>((ZinIrOpLayer **)v7, v126))
      {
        break;
      }
      if (!v37) {
        goto LABEL_58;
      }
    }
    a2 = (ZinIrOpLayer **)(v7 - 16);
    if (!v37) {
      continue;
    }
    break;
  }
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,0>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4, ZinIrOpLayer **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a2, a3, a4);
  if (ZinIrOpLayer::IsANELayer(*a5) && ZinIrOpLayer::IsANELayer(*a4))
  {
    unint64_t v11 = (void *)((char *)*a5 + 360);
    unint64_t v12 = (void *)((char *)*a4 + 360);
  }
  else
  {
    unint64_t v11 = (void *)((char *)*a5 + 48);
    unint64_t v12 = (void *)((char *)*a4 + 48);
  }
  if (*v11 < *v12)
  {
    long long v13 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v13;
    if (ZinIrOpLayer::IsANELayer(*a4) && ZinIrOpLayer::IsANELayer(*a3))
    {
      int v14 = (void *)((char *)*a4 + 360);
      uint64_t v15 = (void *)((char *)*a3 + 360);
    }
    else
    {
      int v14 = (void *)((char *)*a4 + 48);
      uint64_t v15 = (void *)((char *)*a3 + 48);
    }
    if (*v14 < *v15)
    {
      long long v16 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v16;
      if (ZinIrOpLayer::IsANELayer(*a3) && ZinIrOpLayer::IsANELayer(*a2))
      {
        uint64_t v17 = (void *)((char *)*a3 + 360);
        __int16 v18 = (void *)((char *)*a2 + 360);
      }
      else
      {
        uint64_t v17 = (void *)((char *)*a3 + 48);
        __int16 v18 = (void *)((char *)*a2 + 48);
      }
      if (*v17 < *v18)
      {
        long long v19 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v19;
        if (ZinIrOpLayer::IsANELayer(*a2) && ZinIrOpLayer::IsANELayer(*a1))
        {
          unint64_t v20 = (void *)((char *)*a2 + 360);
          uint64_t v21 = (void *)((char *)*a1 + 360);
        }
        else
        {
          unint64_t v20 = (void *)((char *)*a2 + 48);
          uint64_t v21 = (void *)((char *)*a1 + 48);
        }
        if (*v20 < *v21)
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3)
{
  if (ZinIrOpLayer::IsANELayer(*a2) && ZinIrOpLayer::IsANELayer(*a1))
  {
    uint64_t v6 = (uint64_t *)((char *)*a2 + 360);
    unint64_t v7 = (uint64_t *)((char *)*a1 + 360);
  }
  else
  {
    uint64_t v6 = (uint64_t *)((char *)*a2 + 48);
    unint64_t v7 = (uint64_t *)((char *)*a1 + 48);
  }
  uint64_t v8 = *v6;
  uint64_t v9 = *v7;
  BOOL result = ZinIrOpLayer::IsANELayer(*a3);
  if (v8 >= v9)
  {
    if (result && (BOOL result = ZinIrOpLayer::IsANELayer(*a2)))
    {
      long long v13 = (void *)((char *)*a3 + 360);
      int v14 = (void *)((char *)*a2 + 360);
    }
    else
    {
      long long v13 = (void *)((char *)*a3 + 48);
      int v14 = (void *)((char *)*a2 + 48);
    }
    if (*v13 < *v14)
    {
      long long v16 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v16;
      BOOL result = ZinIrOpLayer::IsANELayer(*a2);
      if (result && (BOOL result = ZinIrOpLayer::IsANELayer(*a1)))
      {
        uint64_t v17 = (void *)((char *)*a2 + 360);
        __int16 v18 = (void *)((char *)*a1 + 360);
      }
      else
      {
        uint64_t v17 = (void *)((char *)*a2 + 48);
        __int16 v18 = (void *)((char *)*a1 + 48);
      }
      if (*v17 < *v18)
      {
        long long v22 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v22;
      }
    }
  }
  else
  {
    if (result && (BOOL result = ZinIrOpLayer::IsANELayer(*a2)))
    {
      unint64_t v11 = (void *)((char *)*a3 + 360);
      unint64_t v12 = (void *)((char *)*a2 + 360);
    }
    else
    {
      unint64_t v11 = (void *)((char *)*a3 + 48);
      unint64_t v12 = (void *)((char *)*a2 + 48);
    }
    if (*v11 < *v12)
    {
      long long v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_29:
      *(_OWORD *)a3 = v15;
      return result;
    }
    long long v19 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v19;
    BOOL result = ZinIrOpLayer::IsANELayer(*a3);
    if (result && (BOOL result = ZinIrOpLayer::IsANELayer(*a2)))
    {
      unint64_t v20 = (void *)((char *)*a3 + 360);
      uint64_t v21 = (void *)((char *)*a2 + 360);
    }
    else
    {
      unint64_t v20 = (void *)((char *)*a3 + 48);
      uint64_t v21 = (void *)((char *)*a2 + 48);
    }
    if (*v20 < *v21)
    {
      long long v15 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_29;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(ZinIrOpLayer **a1, ZinIrOpLayer **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 2;
      if (ZinIrOpLayer::IsANELayer(*(a2 - 2)) && ZinIrOpLayer::IsANELayer(*a1))
      {
        unint64_t v7 = (void *)((char *)*v6 + 360);
        uint64_t v8 = (void *)((char *)*a1 + 360);
      }
      else
      {
        unint64_t v7 = (void *)((char *)*v6 + 48);
        uint64_t v8 = (void *)((char *)*a1 + 48);
      }
      if (*v7 < *v8)
      {
        long long v22 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)uint64_t v6 = v22;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == v2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (ZinIrOpLayer::IsANELayer(*v10) && ZinIrOpLayer::IsANELayer(*v9))
    {
      long long v13 = *v10;
      int v14 = (void *)((char *)*v10 + 360);
      long long v15 = (void *)((char *)*v9 + 360);
    }
    else
    {
      long long v13 = *v10;
      int v14 = (void *)((char *)*v10 + 48);
      long long v15 = (void *)((char *)*v9 + 48);
    }
    if (*v14 < *v15)
    {
      long long v16 = v2;
      uint64_t v23 = v10[1];
      uint64_t v17 = v11;
      while (1)
      {
        __int16 v18 = (char *)a1 + v17;
        *(_OWORD *)((char *)a1 + v17 + 48) = *(_OWORD *)((char *)a1 + v17 + 32);
        if (v17 == -32) {
          break;
        }
        if (ZinIrOpLayer::IsANELayer(v13) && ZinIrOpLayer::IsANELayer(*((ZinIrOpLayer **)v18 + 2)))
        {
          long long v19 = (void *)(*((void *)v18 + 2) + 360);
          unint64_t v20 = (void *)((char *)v13 + 360);
        }
        else
        {
          long long v19 = (void *)(*((void *)v18 + 2) + 48);
          unint64_t v20 = (void *)((char *)v13 + 48);
        }
        v17 -= 16;
        if (*v20 >= *v19)
        {
          uint64_t v21 = (ZinIrOpLayer **)((char *)a1 + v17 + 48);
          goto LABEL_21;
        }
      }
      uint64_t v21 = a1;
LABEL_21:
      uint64_t v2 = v16;
      *uint64_t v21 = v13;
      v21[1] = v23;
      if (++v12 == 8) {
        return v10 + 2 == v16;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == v2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(ZinIrOpLayer **a1, ZinIrOpLayer **a2, ZinIrOpLayer **a3, ZinIrOpLayer **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinTensorFamilyUtil::SortLayersBySched(std::vector<LayerAndUsageInfo> const&)::$_0 &,LayerAndUsageInfo*>(a1, a2, a3);
  if (ZinIrOpLayer::IsANELayer(*a4) && ZinIrOpLayer::IsANELayer(*a3))
  {
    uint64_t v9 = (void *)((char *)*a4 + 360);
    unint64_t v10 = (void *)((char *)*a3 + 360);
  }
  else
  {
    uint64_t v9 = (void *)((char *)*a4 + 48);
    unint64_t v10 = (void *)((char *)*a3 + 48);
  }
  if (*v9 < *v10)
  {
    long long v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if (ZinIrOpLayer::IsANELayer(*a3) && ZinIrOpLayer::IsANELayer(*a2))
    {
      int v12 = (void *)((char *)*a3 + 360);
      long long v13 = (void *)((char *)*a2 + 360);
    }
    else
    {
      int v12 = (void *)((char *)*a3 + 48);
      long long v13 = (void *)((char *)*a2 + 48);
    }
    if (*v12 < *v13)
    {
      long long v14 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v14;
      if (ZinIrOpLayer::IsANELayer(*a2) && ZinIrOpLayer::IsANELayer(*a1))
      {
        long long v15 = (void *)((char *)*a2 + 360);
        long long v16 = (void *)((char *)*a1 + 360);
      }
      else
      {
        long long v15 = (void *)((char *)*a2 + 48);
        long long v16 = (void *)((char *)*a1 + 48);
      }
      if (*v15 < *v16)
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    int v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      long long v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  long long v16 = (char *)operator new(0x68uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)long long v16 = 0;
  *((void *)v16 + 1) = v9;
  *((void *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  long long v13 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_211229458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>>>::__erase_unique<ZinIrTensor *>(void *a1, void *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrTensor *,TensorFamilyAttributes>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void ZinTensorFamilyUtil::GetIntermediateLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Operand index larger than input layer count", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Intermediates should be empty", a5, a6, a7, a8, 0);
}

__CFDictionary *ZinCreateLinearUnit(const ZinIrLinearUnitInfo *a1)
{
  CFMutableDictionaryRef Unit = ZinCreateUnit(a1);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (*((_DWORD *)a1 + 60) != 5)
  {
    BOOL v5 = ZinIrCoordinateToCFString((_DWORD *)a1 + 60);
    CFDictionaryAddValue(Mutable, @"GroupDimension", v5);
  }
  uint64_t v6 = ZinIrConvKernelModeToCFString(*((_DWORD *)a1 + 20));
  if (v6) {
    CFDictionaryAddValue(Mutable, @"KernelMode", v6);
  }
  unint64_t v7 = (const void **)MEMORY[0x263EFFB40];
  if (!*((unsigned char *)a1 + 180)) {
    unint64_t v7 = (const void **)MEMORY[0x263EFFB38];
  }
  CFDictionaryAddValue(Mutable, @"KernelMutable", *v7);
  unint64_t v8 = ZinIrKernelFormatToCFString(*((_DWORD *)a1 + 21));
  if (v8) {
    CFDictionaryAddValue(Mutable, @"KernelType", v8);
  }
  if (ZinKernelModeIsPalette(*((_DWORD *)a1 + 20)))
  {
    ZinDictionaryAddVector<long long>(Mutable, @"KernelPaletteLUTOffset", (const void **)a1 + 19);
    ZinDictionaryAddVector<int>(Mutable, @"KernelPaletteLUTIndex", (const void **)a1 + 16);
    CFNumberRef v9 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 176);
    CFDictionaryAddValue(Mutable, @"KernelPaletteVectorSize", v9);
    CFRelease(v9);
  }
  if (ZinKernelModeIsSparse(*((_DWORD *)a1 + 20)))
  {
    ZinAddWeightInfoToParamsDict(Mutable, @"KernelMaskIndex", @"KernelMaskByteOffset", (const int *)a1 + 26, (char *)a1 + 112);
    CFNumberRef v10 = CFNumberCreate(v3, kCFNumberSInt64Type, (char *)a1 + 120);
    CFDictionaryAddValue(Mutable, @"KernelCoeffCount", v10);
    CFRelease(v10);
  }
  if (*((_DWORD *)a1 + 20) != 15) {
    ZinAddWeightInfoToParamsDict(Mutable, @"KernelIndex", @"KernelOffset", (const int *)a1 + 22, (char *)a1 + 96);
  }
  if (*((unsigned char *)a1 + 184))
  {
    uint8x8_t v11 = ZinIrKernelFormatToCFString(*((_DWORD *)a1 + 56));
    if (v11) {
      CFDictionaryAddValue(Mutable, @"KernelPerCoutScaleFormat", v11);
    }
    ZinAddWeightInfoToParamsDict(Mutable, @"KernelScaleIndex", @"KernelScaleByteOffset", (const int *)a1 + 48, (char *)a1 + 200);
  }
  else if (!ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarScale((const ZinIrLinearUnitInfo *)((char *)a1 + 184)))
  {
    CFNumberRef v12 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 228);
    CFDictionaryAddValue(Mutable, @"KernelScaleScalar", v12);
    CFRelease(v12);
  }
  if (*((unsigned char *)a1 + 185))
  {
    ZinAddWeightInfoToParamsDict(Mutable, @"KernelZeroPointIndex", @"KernelZeroPointByteOffset", (const int *)a1 + 52, (char *)a1 + 216);
  }
  else if (!ZinIrKernelQuantizationInfo::HasDefaultQuantizationScalarZeroPoint((const ZinIrLinearUnitInfo *)((char *)a1 + 184)))
  {
    CFNumberRef v13 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 232);
    CFDictionaryAddValue(Mutable, @"KernelZeroPointScalar", v13);
    CFRelease(v13);
  }
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

void ZinBasicBlockOutLayer::ZinBasicBlockOutLayer()
{
}

void sub_211229988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ZinIrKernel *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinLayerNormLayer::ZinLayerNormLayer(&a12);
  _Unwind_Resume(a1);
}

void ZinBasicBlockOutLayer::Clone()
{
}

void sub_211229A78(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21667D3C0](v1, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

uint64_t ZinBasicBlockOutLayer::HasOutputParentTensor(ZinBasicBlockOutLayer *this)
{
  ZinIrControlFlowGraph::GetBasicBlockInConsumers(*(void *)(*(void *)(*((void *)this + 19) + 592) + 24), (uint64_t)this, (uint64_t *)&v6);
  uint64_t v1 = v6;
  if (v6 == v7)
  {
LABEL_9:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v6, v7[0]);
    return 0;
  }
  else
  {
    while (((*(uint64_t (**)(void *))(*v1[4] + 104))(v1[4]) & 1) == 0)
    {
      uint64_t v2 = v1[1];
      if (v2)
      {
        do
        {
          CFAllocatorRef v3 = (void **)v2;
          uint64_t v2 = (void *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          CFAllocatorRef v3 = (void **)v1[2];
          BOOL v4 = *v3 == v1;
          uint64_t v1 = v3;
        }
        while (!v4);
      }
      uint64_t v1 = v3;
      if (v3 == v7) {
        goto LABEL_9;
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v6, v7[0]);
    return 1;
  }
}

void sub_211229B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

__CFDictionary *ZinCreateLRNUnit(uint64_t a1)
{
  CFMutableDictionaryRef Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  BOOL v5 = Mutable;
  int v6 = *(_DWORD *)(a1 + 80);
  unint64_t v7 = @"Channel";
  if (v6 != 1) {
    unint64_t v7 = 0;
  }
  if (v6) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = @"Spatial";
  }
  CFDictionaryAddValue(Mutable, @"Type", v8);
  int valuePtr = 1;
  if (*(_DWORD *)(a1 + 80) == 1) {
    int valuePtr = *(void *)(a1 + 104);
  }
  CFNumberRef v9 = CFNumberCreate(v3, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v5, @"KernelChannel", v9);
  CFRelease(v9);
  if (!*(_DWORD *)(a1 + 80)) {
    ZinAddKernelSizeToParamsDict(v5, (void *)(a1 + 88), 1);
  }
  _S0 = *(_DWORD *)(a1 + 136);
  __asm { FCVT            H0, S0 }
  __int16 v19 = _S0;
  CFNumberRef v15 = CFNumberCreate(v3, kCFNumberSInt16Type, &v19);
  CFDictionaryAddValue(v5, @"Alpha", v15);
  CFRelease(v15);
  CFNumberRef v16 = CFNumberCreate(v3, kCFNumberFloat32Type, (const void *)(a1 + 140));
  CFDictionaryAddValue(v5, @"Beta", v16);
  CFRelease(v16);
  CFNumberRef v17 = CFNumberCreate(v3, kCFNumberFloat32Type, (const void *)(a1 + 144));
  CFDictionaryAddValue(v5, @"K", v17);
  CFRelease(v17);
  CFDictionaryAddValue(Unit, @"Params", v5);
  CFRelease(v5);
  return Unit;
}

ZinIrSymbol::Descriptor *ZinIrSymbol::Descriptor::Descriptor(ZinIrSymbol::Descriptor *this)
{
  *(void *)this = 6;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, &byte_211F4AA5D);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = -1;
  *((void *)this + 6) = -1;
  return this;
}

uint64_t ZinIrSymbol::Descriptor::Descriptor(uint64_t a1, int a2, long long *a3, _OWORD *a4, uint64_t a5, _OWORD *a6)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 1;
  CFNumberRef v10 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    v10->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(void *)(a1 + 32) = a5;
  *(_OWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *a4;
  long long v12 = a6[3];
  long long v13 = a6[4];
  long long v14 = a6[2];
  *(_OWORD *)(a1 + 72) = a6[1];
  *(_OWORD *)(a1 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v13;
  *(_OWORD *)(a1 + 104) = v12;
  *(_OWORD *)(a1 + 88) = v14;
  long long v15 = a6[7];
  long long v16 = a6[8];
  long long v17 = a6[6];
  *(_OWORD *)(a1 + 136) = a6[5];
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v17;
  long long v18 = a6[11];
  long long v19 = a6[12];
  long long v20 = a6[10];
  *(_OWORD *)(a1 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a6[9];
  *(_OWORD *)(a1 + 248) = v19;
  *(_OWORD *)(a1 + 232) = v18;
  *(_OWORD *)(a1 + 216) = v20;
  *(_OWORD *)(a1 + 56) = *a6;
  return a1;
}

uint64_t ZinIrSymbol::Descriptor::Descriptor(uint64_t a1, int a2, long long *a3, _OWORD *a4, uint64_t a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  unint64_t v8 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    v8->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(void *)(a1 + 32) = a5;
  *(_OWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *a4;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  int64x2_t v10 = vdupq_n_s64(1uLL);
  *(void *)(a1 + 96) = 0;
  *(int64x2_t *)(a1 + 104) = v10;
  *(int64x2_t *)(a1 + 12std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v10;
  *(int64x2_t *)(a1 + 136) = v10;
  *(int64x2_t *)(a1 + 152) = v10;
  *(int64x2_t *)(a1 + 168) = v10;
  *(int64x2_t *)(a1 + 184) = v10;
  *(int64x2_t *)(a1 + 20std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = v10;
  *(int64x2_t *)(a1 + 216) = v10;
  *(int64x2_t *)(a1 + 232) = v10;
  *(int64x2_t *)(a1 + 248) = v10;
  return a1;
}

uint64_t ZinIrSymbol::Descriptor::Descriptor(uint64_t a1, long long *a2, _OWORD *a3, uint64_t a4, void *__src)
{
  *(void *)a1 = 0x200000003;
  long long v9 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    v9->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(void *)(a1 + 32) = a4;
  *(_OWORD *)(a1 + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *a3;
  memcpy((void *)(a1 + 56), __src, 0x118uLL);
  return a1;
}

void *ZinIrSymbol::Descriptor::Descriptor(void *a1, long long *a2, uint64_t a3)
{
  *a1 = 0x300000003;
  BOOL v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[4] = a3;
  a1[5] = -1;
  a1[6] = -1;
  return a1;
}

uint64_t ZinIrSymbol::ZinIrSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6)
{
  *(void *)a1 = &unk_26C343BF0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = *(void *)a5;
  long long v9 = (std::string *)(a1 + 160);
  if (*(char *)(a5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a5 + 8), *(void *)(a5 + 16));
  }
  else
  {
    long long v10 = *(_OWORD *)(a5 + 8);
    v9->__r_.__value_.__r.__words[2] = *(void *)(a5 + 24);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  memcpy((void *)(a1 + 184), (const void *)(a5 + 32), 0x130uLL);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 488) = a1 + 496;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 52std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = *a6;
  return a1;
}

void sub_21122A0C4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 144)) {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

void *ZinIrSymbol::Descriptor::Descriptor(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  BOOL v4 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  memcpy(a1 + 4, (const void *)(a2 + 32), 0x130uLL);
  return a1;
}

void ZinIrSymbol::~ZinIrSymbol(ZinIrSymbol *this)
{
  *(void *)this = &unk_26C343BF0;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 488, *((void **)this + 62));
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((unsigned char *)this + 144)) {
    std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::~__hash_table((uint64_t)this + 96);
  }
}

{
  uint64_t vars8;

  ZinIrSymbol::~ZinIrSymbol(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t ZinIrSymbol::AddSymbolAlias(ZinIrSymbol *this, const ZinIrSymbol *a2)
{
  BOOL v4 = a2;
  if (ZinIrSymbol::VerifyChildSymbol((ZinIrSymbol **)this, a2)) {
    return 1;
  }
  std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)this + 61, (uint64_t *)&v4, (uint64_t *)&v4);
  return 0;
}

uint64_t ZinIrSymbol::VerifyChildSymbol(ZinIrSymbol **this, const ZinIrSymbol *a2)
{
  ZinIrSymbol::GetSpaceRanges(a2, 1, &v17);
  if (v19)
  {
    if (this)
    {
      while (1)
      {
        ZinIrSymbol::GetSpaceRanges((ZinIrSymbol *)this, 1, &v14);
        if (v19 > v16) {
          break;
        }
        CFAllocatorRef v3 = v18;
        if (v18 == &v17) {
          goto LABEL_26;
        }
        if (v15 != &v14)
        {
          do
          {
            BOOL v4 = v15;
            while (1)
            {
              unint64_t v5 = v4[2];
              unint64_t v6 = v4[3];
              if (v5 <= v6)
              {
                unint64_t v7 = v3[2];
                unint64_t v8 = v3[3];
                BOOL v9 = v6 < v8 || v5 > v7;
                if (!v9 && v7 <= v8) {
                  break;
                }
              }
              BOOL v4 = (uint64_t *)v4[1];
              if (v4 == &v14) {
                goto LABEL_20;
              }
            }
            CFAllocatorRef v3 = (uint64_t *)v3[1];
          }
          while (v3 != &v17);
LABEL_26:
          uint64_t v12 = 0;
          goto LABEL_30;
        }
LABEL_20:
        long long v11 = this[64];
        if (!v11)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrSymbol::VerifyChildSymbol();
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrSymbol::VerifyChildSymbol();
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrSymbol::VerifyChildSymbol();
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrSymbol::VerifyChildSymbol();
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrSymbol::VerifyChildSymbol();
          }
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrSymbol::VerifyChildSymbol();
          }
          ZinAssertImpl("Illegal symbol");
        }
        std::__list_imp<ZinIrSection *>::clear(&v14);
        this = (ZinIrSymbol **)v11;
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinIrSymbol::VerifyChildSymbol();
      }
      uint64_t v12 = 3;
LABEL_30:
      std::__list_imp<ZinIrSection *>::clear(&v14);
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinIrSymbol::VerifyChildSymbol();
    }
    uint64_t v12 = 3;
  }
  std::__list_imp<ZinIrSection *>::clear(&v17);
  return v12;
}

void sub_21122A454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t ZinIrSymbol::GetComputeProgramMutableSymbolSize(ZinIrSymbol *this)
{
  uint64_t result = *((void *)this + 23);
  if (*((_DWORD *)this + 39) == 1) {
    return *((void *)this + 3) + result - *((void *)this + 2);
  }
  return result;
}

ZinIrSymbol *ZinIrSymbol::GetRootSymbol(ZinIrSymbol *this)
{
  do
  {
    uint64_t v1 = this;
    this = (ZinIrSymbol *)*((void *)this + 64);
  }
  while (this);
  return v1;
}

uint64_t ZinIrSymbol::GetMemType(ZinIrSymbol *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 12);
}

uint64_t ZinIrSymbol::GetBarIdFromDynamicOffsetInfoOrSection(ZinIrSymbol *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*(_DWORD *)(v1 + 12)) {
    ZinAssertImpl("This API is only used to relocate base addresses for RDMA and WDMA.");
  }
  if (*((unsigned char *)this + 144) && *((unsigned char *)this + 137)) {
    uint64_t v2 = (unsigned __int8 *)this + 136;
  }
  else {
    uint64_t v2 = (unsigned __int8 *)(v1 + 56);
  }
  return *v2;
}

void *ZinIrSymbol::GetSpaceRanges@<X0>(ZinIrSymbol *this@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result = ZinIrSymbol::GetSpaceRangesWithoutWrapAround(this, a2, a3);
  uint64_t v6 = *(void *)(*((void *)this + 1) + 120);
  if (v6 && *(unsigned char *)(v6 + 40))
  {
    unint64_t v7 = *(void *)(v6 + 8);
    long long v18 = &v18;
    unint64_t v19 = &v18;
    uint64_t v20 = 0;
    uint64_t v8 = a3[1];
    if ((uint64_t *)v8 != a3)
    {
      uint64_t v9 = 0;
      long long v10 = &v18;
      while (1)
      {
        unint64_t v11 = *(void *)(v8 + 16);
        long long v17 = *(_OWORD *)(v8 + 24);
        uint64_t v12 = v17 - v7;
        if ((unint64_t)v17 <= v7) {
          break;
        }
        uint64_t v13 = v11 - v7;
        if (v11 >= v7)
        {
          long long v15 = operator new(0x28uLL);
          v15[2] = v13;
          void v15[3] = v12;
          v15[4] = v12 - v13;
          goto LABEL_10;
        }
        uint64_t v14 = operator new(0x28uLL);
        void v14[2] = v11;
        v14[3] = v7;
        v14[4] = v7 - v11;
        *uint64_t v14 = v10;
        v14[1] = &v18;
        v10[1] = v14;
        long long v18 = v14;
        uint64_t v20 = v9 + 1;
        long long v15 = operator new(0x28uLL);
        long long v10 = v15;
        v15[2] = 0;
        void v15[3] = v12;
        v15[4] = v12;
        *long long v15 = v14;
        v15[1] = &v18;
        v14[1] = v15;
        uint64_t v16 = 2;
LABEL_11:
        long long v18 = v15;
        v9 += v16;
        uint64_t v20 = v9;
        uint64_t v8 = *(void *)(v8 + 8);
        if ((uint64_t *)v8 == a3) {
          goto LABEL_12;
        }
      }
      long long v15 = operator new(0x28uLL);
      v15[2] = v11;
      *(_OWORD *)(v15 + 3) = v17;
LABEL_10:
      *long long v15 = v10;
      v15[1] = &v18;
      v10[1] = v15;
      uint64_t v16 = 1;
      long long v10 = v15;
      goto LABEL_11;
    }
LABEL_12:
    if (&v18 != (void **)a3) {
      std::list<ZinSpaceRange>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ZinSpaceRange,void *>,std::__list_const_iterator<ZinSpaceRange,void *>>(a3, (uint64_t)v19, (uint64_t)&v18);
    }
    return std::__list_imp<ZinIrSection *>::clear(&v18);
  }
  return result;
}

void sub_21122A674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  std::__list_imp<ZinIrSection *>::clear(v4);
  _Unwind_Resume(a1);
}

void *ZinIrSymbol::GetSpaceRangesWithoutWrapAround@<X0>(ZinIrSymbol *this@<X0>, char a2@<W1>, void *a3@<X8>)
{
  CFAllocatorRef v3 = (uint64_t *)this;
  uint64_t v83 = &v83;
  uint64_t v84 = &v83;
  uint64_t v85 = 0;
  unint64_t v77 = *((void *)this + 3);
  if ((a2 & 1) != 0 || *((_DWORD *)this + 39) != 1)
  {
    uint64_t v12 = *((void *)this + 23);
    uint64_t v13 = operator new(0x28uLL);
    unint64_t v14 = v12 + v77;
    v13[2] = v77;
    v13[3] = v12 + v77;
    v13[4] = v12;
    *uint64_t v13 = &v83;
    v13[1] = &v83;
    uint64_t v83 = v13;
    uint64_t v84 = v13;
    uint64_t v85 = 1;
    if ((v3[66] & 0x3FFFFFFFFFFFFFLL) == 0)
    {
      *a3 = a3;
      a3[1] = a3;
      uint64_t v23 = &v83;
      uint64_t v22 = 1;
      unint64_t v24 = &v83;
      uint64_t v25 = v13;
      a3[2] = 0;
      goto LABEL_73;
    }
    std::__list_imp<ZinIrSection *>::clear(&v83);
    uint64_t v15 = v3[65];
    if (v14 <= v15 << 10)
    {
      uint64_t v13 = operator new(0x28uLL);
      v13[2] = v77;
      v13[3] = v14;
    }
    else
    {
      uint64_t v16 = v15 << 10;
      uint64_t v17 = v3[66] << 10;
      unint64_t v18 = v77 - (v15 << 10);
      if (v77 < v15 << 10)
      {
        unint64_t v19 = operator new(0x28uLL);
        v19[2] = v77;
        v19[3] = v16;
        v19[4] = v16 - v77;
        uint64_t v20 = v83;
        *unint64_t v19 = v83;
        v19[1] = &v83;
        v20[1] = v19;
        uint64_t v21 = v85;
        uint64_t v83 = v19;
        ++v85;
        uint64_t v13 = operator new(0x28uLL);
        v13[2] = v17 + v16;
        v13[3] = v18 + v12 + v17 + v16;
        v13[4] = v18 + v12;
        *uint64_t v13 = v19;
        v13[1] = &v83;
        v19[1] = v13;
        uint64_t v22 = v21 + 2;
        uint64_t v83 = v13;
LABEL_71:
        uint64_t v85 = v22;
        *a3 = a3;
        a3[1] = a3;
        a3[2] = 0;
        if (!v22) {
          return std::__list_imp<ZinIrSection *>::clear(&v83);
        }
        uint64_t v25 = v84;
        unint64_t v24 = (void *)v13[1];
        uint64_t v23 = (void *)*v84;
LABEL_73:
        v23[1] = v24;
        *(void *)v13[1] = v23;
        uint64_t v65 = *a3;
        *(void *)(v65 + 8) = v25;
        *uint64_t v25 = v65;
        *a3 = v13;
        v13[1] = a3;
        a3[2] = v22;
        uint64_t v85 = 0;
        return std::__list_imp<ZinIrSection *>::clear(&v83);
      }
      uint64_t v13 = operator new(0x28uLL);
      v13[2] = v17 + v77;
      v13[3] = v17 + v77 + v12;
    }
    v13[4] = v12;
    int v64 = v83;
    *uint64_t v13 = v83;
    v13[1] = &v83;
    v64[1] = v13;
    uint64_t v83 = v13;
    uint64_t v22 = v85 + 1;
    goto LABEL_71;
  }
  unint64_t v5 = operator new(0x14uLL);
  uint64_t v6 = v3 + 37;
  uint64_t v79 = v5 + 5;
  uint64_t v80 = (char *)(v5 + 5);
  v5[4] = 4;
  *(_OWORD *)unint64_t v5 = xmmword_211EFD630;
  std::string __p = v5;
  ZinViewLayerUtils::GetSortedAxesByDimensionOrder(v3 + 37, (int **)&__p, (char **)&v81);
  int64_t v72 = (ZinViewLayerUtils *)(v3 + 32);
  if (__p)
  {
    uint64_t v79 = __p;
    operator delete(__p);
  }
  uint64_t v7 = v3[64];
  uint64_t v67 = a3;
  if (v7)
  {
    ZinViewLayerUtils::GetAxesOfView(v72, (const ZinTensorDimensions *)(v7 + 256), (char **)&__p);
    uint64_t v8 = __p;
    if (__p == v79)
    {
      unint64_t v9 = 4;
    }
    else
    {
      unint64_t v9 = 4;
      do
      {
        if (v81 == v82)
        {
          long long v10 = (char *)v81;
        }
        else
        {
          long long v10 = (char *)v81;
          while (*(_DWORD *)v10 != *v8)
          {
            v10 += 4;
            if (v10 == v82)
            {
              long long v10 = v82;
              break;
            }
          }
        }
        uint64_t v11 = (v10 - (unsigned char *)v81) >> 2;
        if (v9 >= v11 + 1) {
          unint64_t v9 = v11 + 1;
        }
        ++v8;
      }
      while (v8 != v79);
    }
    do
    {
      unint64_t v26 = v9;
      if (!v9) {
        break;
      }
      uint64_t Dimension = ZinTensorDimensions::GetDimension(v3 + 37, *((_DWORD *)v81 + v9 - 1));
      unint64_t v28 = v26;
      uint64_t v29 = ZinTensorDimensions::GetDimension(v3 + 37, *((_DWORD *)v81 + v26));
      uint64_t v30 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + v28));
      unint64_t v9 = v28 - 1;
      BOOL v31 = Dimension == v30 * v29;
      unint64_t v26 = v28;
    }
    while (v31);
    if (__p)
    {
      uint64_t v79 = __p;
      operator delete(__p);
    }
    if (!v26)
    {
      uint64_t v75 = 1;
      uint64_t v69 = 1;
      uint64_t v68 = 1;
      uint64_t v70 = 1;
      goto LABEL_40;
    }
  }
  else
  {
    unint64_t v26 = 4;
  }
  uint64_t v68 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *(_DWORD *)v81);
  if (v26 < 2)
  {
    uint64_t v70 = 1;
    uint64_t v69 = 1;
    goto LABEL_38;
  }
  uint64_t v69 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + 1));
  if (v26 < 3)
  {
    uint64_t v70 = 1;
    goto LABEL_38;
  }
  uint64_t v70 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + 2));
  if (v26 < 4)
  {
LABEL_38:
    uint64_t v75 = 1;
    goto LABEL_39;
  }
  uint64_t v75 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + 3));
LABEL_39:
  if (v68)
  {
LABEL_40:
    uint64_t v73 = 0;
    unint64_t v71 = v26;
    while (!v69)
    {
LABEL_58:
      if (++v73 == v68) {
        goto LABEL_59;
      }
    }
    uint64_t v74 = 0;
    while (!v70)
    {
LABEL_57:
      if (++v74 == v69) {
        goto LABEL_58;
      }
    }
    uint64_t v76 = 0;
    while (!v75)
    {
LABEL_56:
      if (++v76 == v70) {
        goto LABEL_57;
      }
    }
    uint64_t v32 = 0;
    while (1)
    {
      uint64_t v33 = ZinTensorDimensions::GetDimension(v6, *((_DWORD *)v81 + v26));
      uint64_t v34 = v3;
      uint64_t v35 = ZinTensorDimensions::GetDimension((uint64_t *)v72, *((_DWORD *)v81 + v26));
      uint64_t v36 = ZinTensorDimensions::GetDimension(v6, *(_DWORD *)v81);
      uint64_t v37 = ZinTensorDimensions::GetDimension(v6, *((_DWORD *)v81 + 1));
      uint64_t v38 = ZinTensorDimensions::GetDimension(v6, *((_DWORD *)v81 + 2));
      uint64_t v39 = ZinTensorDimensions::GetDimension(v6, *((_DWORD *)v81 + 3));
      __n128 v40 = v6;
      uint64_t v41 = operator new(0x28uLL);
      uint64_t v42 = v77 + v36 * v73 + v37 * v74 + v38 * v76 + v39 * v32;
      uint64_t v43 = v35 * v33;
      unint64_t v44 = v42 + v35 * v33;
      _OWORD v41[2] = v42;
      void v41[3] = v44;
      v41[4] = v35 * v33;
      uint64_t v45 = v83;
      void *v41 = v83;
      v41[1] = &v83;
      v45[1] = v41;
      uint64_t v46 = v85;
      uint64_t v83 = v41;
      ++v85;
      CFAllocatorRef v3 = v34;
      if ((v34[66] & 0x3FFFFFFFFFFFFFLL) != 0) {
        break;
      }
LABEL_55:
      ++v32;
      unint64_t v26 = v71;
      uint64_t v6 = v40;
      if (v75 == v32) {
        goto LABEL_56;
      }
    }
    v45[1] = v41[1];
    *(void *)v41[1] = v45;
    uint64_t v85 = v46;
    operator delete(v41);
    uint64_t v47 = v34[65];
    if (v44 <= v47 << 10)
    {
      uint64_t v55 = operator new(0x28uLL);
      v55[2] = v42;
      v55[3] = v44;
      v55[4] = v43;
      uint64_t v56 = v83;
      v55[1] = &v83;
    }
    else
    {
      uint64_t v48 = v47 << 10;
      uint64_t v49 = v34[66] << 10;
      if (v77 < v47 << 10)
      {
        long long v50 = operator new(0x28uLL);
        v50[2] = v42;
        v50[3] = v48;
        v50[4] = v48 - v42;
        uint64_t v51 = v83;
        *long long v50 = v83;
        v50[1] = &v83;
        v51[1] = v50;
        uint64_t v52 = v85;
        uint64_t v83 = v50;
        ++v85;
        long long v53 = operator new(0x28uLL);
        v53[2] = v49 + v48;
        void v53[3] = v49 + v44;
        v53[4] = v44 - v48;
        *long long v53 = v50;
        v53[1] = &v83;
        v50[1] = v53;
        uint64_t v54 = v52 + 2;
        uint64_t v83 = v53;
LABEL_54:
        uint64_t v85 = v54;
        goto LABEL_55;
      }
      uint64_t v55 = operator new(0x28uLL);
      v55[2] = v49 + v42;
      v55[3] = v49 + v44;
      v55[4] = v43;
      uint64_t v56 = v83;
      v55[1] = &v83;
    }
    void *v55 = v56;
    v56[1] = v55;
    uint64_t v83 = v55;
    uint64_t v54 = v85 + 1;
    goto LABEL_54;
  }
LABEL_59:
  *uint64_t v67 = v67;
  v67[1] = v67;
  v67[2] = 0;
  long long v57 = v84;
  if (v84 != &v83)
  {
    uint64_t v58 = 0;
    BOOL v59 = v67;
    do
    {
      uint64_t v60 = v57[3];
      long long v61 = &v83;
      if ((void **)v57[1] != &v83)
      {
        long long v61 = (void *)v57[1];
        while (v60 == v61[2])
        {
          uint64_t v60 = v61[3];
          long long v61 = (void *)v61[1];
          if (v61 == &v83)
          {
            long long v61 = &v83;
            break;
          }
        }
      }
      uint64_t v62 = v57[2];
      unint64_t v63 = operator new(0x28uLL);
      v63[2] = v62;
      v63[3] = v60;
      v63[4] = v60 - v62;
      void *v63 = v59;
      v63[1] = v67;
      v59[1] = v63;
      ++v58;
      *uint64_t v67 = v63;
      long long v57 = v61;
      BOOL v59 = v63;
      v67[2] = v58;
    }
    while (v61 != &v83);
  }
  if (v81)
  {
    uint64_t v82 = (char *)v81;
    operator delete(v81);
  }
  return std::__list_imp<ZinIrSection *>::clear(&v83);
}

void sub_21122ADD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  std::__list_imp<ZinIrSection *>::clear((void *)(v25 - 112));
  _Unwind_Resume(a1);
}

uint64_t AddrWrapInfo::GetWrapAddrInByte(AddrWrapInfo *this)
{
  return *(void *)this << 10;
}

uint64_t AddrWrapInfo::GetWrapAddrOffsetInByte(AddrWrapInfo *this)
{
  return *((void *)this + 1) << 10;
}

uint64_t ZinIrSection::GetPageAlignedDataSize(ZinIrSection *this, uint64_t a2)
{
  return ZinAlignPower2(*((void *)this + 4), a2);
}

uint64_t ZinIrSection::DebugPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_21122AFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ZinIrMemoryPool::ZinIrMemoryPool(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(void *)uint64_t result = &unk_26C3488D8;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(unsigned char *)(result + 4std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = a8;
  *(void *)(result + 48) = a4;
  *(unsigned char *)(result + 56) = a7;
  *(void *)(result + 64) = a5;
  *(void *)(result + 72) = a6;
  *(unsigned char *)(result + 8std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 88) = result + 96;
  uint64_t v8 = 0x20000000;
  if (a3 != 1) {
    uint64_t v8 = 0x10000000;
  }
  if (!a3) {
    uint64_t v8 = 805306368;
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = v8;
  return result;
}

void ZinIrMemoryPool::~ZinIrMemoryPool(ZinIrMemoryPool *this)
{
  *(void *)this = &unk_26C3488D8;
  uint64_t v2 = (char *)this + 88;
  uint64_t v3 = (char *)*((void *)this + 11);
  BOOL v4 = (char *)this + 96;
  if (v3 != (char *)this + 96)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 5);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      uint64_t v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          char v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          char v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v2, *((void **)this + 12));
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
}

{
  uint64_t vars8;

  ZinIrMemoryPool::~ZinIrMemoryPool(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t ZinIrMemoryPool::SetAllocator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t ZinIrMemoryPool::AllocateMemory(ZinIrMemoryPool *this, uint64_t a2, ZinIrSection *a3, uint64_t a4, void *a5, uint64_t a6)
{
  v17[42] = *(void **)MEMORY[0x263EF8340];
  uint64_t v6 = 1;
  if (a3
    && a5
    && *((_DWORD *)a3 + 3) == *((_DWORD *)this + 4)
    && *(void *)(a2 + 32)
    && ZinIrMemoryPool::MempoolHasSection(this, a3))
  {
    if (*(void *)(a2 + 32) <= *((void *)this + 1))
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      uint64_t v6 = (***((uint64_t (****)(void, uint64_t, ZinIrSection *, uint64_t, uint64_t *, uint64_t *, uint64_t))this
              + 3))(*((void *)this + 3), a2, a3, a4, &v16, &v14, a6);
      if (!v6)
      {
        ZinIrSymbol::Descriptor::Descriptor(v17, a2);
        ZinIrSection::CreateSymbolAtOffset((uint64_t)a3, (uint64_t)v17, 0, v16, v16, v14, v15);
      }
      *a5 = 0;
    }
    else
    {
      return 5;
    }
  }
  return v6;
}

void sub_21122B364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrSection::CreateSymbolAtOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a6;
  uint64_t v8 = a7;
  operator new();
}

void sub_21122B480(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C4013B7CD13);
  _Unwind_Resume(a1);
}

uint64_t ZinIrMemoryPool::CreateSymbolAlias(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t a4, void *a5, int a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a5) {
    return 1;
  }
  unint64_t v6 = a4;
  unint64_t v7 = a3;
  uint64_t result = 1;
  if (a4 >= a3)
  {
    long long v10 = a2 + 4;
    uint64_t v9 = a2[4];
    if (v9)
    {
      if (a5[23] + a5[3] >= a4)
      {
        uint64_t v12 = a5[66];
        if ((v12 & 0x3FFFFFFFFFFFFFLL) != 0)
        {
          if (a6)
          {
            uint64_t v13 = a5[65];
          }
          else
          {
            unint64_t v14 = a5[2] + a4;
            uint64_t v15 = a5[65];
            unint64_t v16 = a3 + (v12 << 10);
            unint64_t v17 = a4 + (v12 << 10);
            unint64_t v18 = v14 + v9;
            BOOL v19 = v18 > v15 << 10;
            if (v18 <= v15 << 10) {
              uint64_t v20 = 0;
            }
            else {
              uint64_t v20 = a5[65];
            }
            if (v19) {
              uint64_t v21 = a5[66];
            }
            else {
              uint64_t v21 = 0;
            }
            if (v14 < v15 << 10) {
              uint64_t v13 = v20;
            }
            else {
              uint64_t v13 = 0;
            }
            if (v14 < v15 << 10) {
              uint64_t v12 = v21;
            }
            else {
              uint64_t v12 = 0;
            }
            if (v14 >= v15 << 10)
            {
              unint64_t v6 = v17;
              unint64_t v7 = v16;
            }
          }
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v12 = 0;
        }
        uint64_t v22 = a5[1];
        uint64_t v23 = *a2;
        if (*((char *)a2 + 31) < 0) {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a2[1], a2[2]);
        }
        else {
          std::string __p = *(std::string *)(a2 + 1);
        }
        memcpy(v25, v10, sizeof(v25));
        ZinIrSection::CreateSymbolAtOffset(v22, (uint64_t)&v23, (uint64_t)a5, a5[2] + v7, a5[2] + v6, v13, v12);
      }
    }
  }
  return result;
}

void sub_21122B658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void *ZinIrMemoryPool::GetSections@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v14 = a2;
  *a3 = a3;
  a3[1] = a3;
  a3[2] = 0;
  uint64_t result = std::__tree<std::__value_type<ZinIrSection::SectType,ZinIrSection*>,std::__map_value_compare<ZinIrSection::SectType,std::__value_type<ZinIrSection::SectType,ZinIrSection*>,std::less<ZinIrSection::SectType>,true>,std::allocator<std::__value_type<ZinIrSection::SectType,ZinIrSection*>>>::__equal_range_multi<ZinIrSection::SectType>(a1 + 88, &v14);
  uint64_t v5 = result;
  unint64_t v7 = v6;
  if (result != v6)
  {
    uint64_t v8 = a3[2];
    uint64_t v9 = (void *)*a3;
    do
    {
      uint64_t result = operator new(0x18uLL);
      uint64_t v10 = v5[5];
      result[1] = a3;
      result[2] = v10;
      void *result = v9;
      v9[1] = result;
      *a3 = result;
      a3[2] = ++v8;
      uint64_t v11 = (void *)v5[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v5[2];
          BOOL v13 = *v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v13);
      }
      uint64_t v5 = v12;
      uint64_t v9 = result;
    }
    while (v12 != v7);
  }
  return result;
}

void sub_21122B744(_Unwind_Exception *a1)
{
  std::__list_imp<ZinIrSection *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSection::SetComputeProgramSectionAndTransferBarId(uint64_t result, uint64_t a2)
{
  if (!a2) {
    ZinAssertImpl("missing compute program section");
  }
  *(_DWORD *)(a2 + 56) = *(unsigned __int8 *)(result + 56);
  *(void *)(result + 128) = a2;
  return result;
}

uint64_t ZinIrMemoryPool::DebugPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_21122B8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float ZinIrMemoryPool::ComputeBankInterval(ZinIrMemoryPool *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = *((void *)this + 9);
  log2((double)v4);
  return (float)a3 / (float)v4;
}

uint64_t ZinIrMemoryPool::OverlapBankInterval(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v16 = a1;
  unint64_t v3 = *(void *)(a1 + 64);
  if (a2[1] >= v3 || a3[1] >= v3) {
    return 1;
  }
  ZinIrMemoryPool::OverlapBankInterval(ZinIrMemoryPool::BankInterval const&,ZinIrMemoryPool::BankInterval const&)const::$_0::operator()(&v16, a2, &v14);
  ZinIrMemoryPool::OverlapBankInterval(ZinIrMemoryPool::BankInterval const&,ZinIrMemoryPool::BankInterval const&)const::$_0::operator()(&v16, a3, &__p);
  char v7 = v14;
  if (v14 != v15)
  {
    uint64_t v8 = v14;
    while (__p == v13)
    {
LABEL_16:
      v8 += 2;
      if (v8 == v15) {
        goto LABEL_17;
      }
    }
    uint64_t v9 = __p;
    while (v8[1] < *v9 || v9[1] < *v8)
    {
      v9 += 2;
      if (v9 == v13) {
        goto LABEL_16;
      }
    }
    uint64_t v5 = 1;
    if (!__p) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v5 = 0;
  if (__p) {
LABEL_20:
  }
    operator delete(__p);
LABEL_21:
  if (v7) {
    operator delete(v7);
  }
  return v5;
}

void sub_21122BA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrMemoryPool::OverlapBankInterval(ZinIrMemoryPool::BankInterval const&,ZinIrMemoryPool::BankInterval const&)const::$_0::operator()(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = *a2 + v6 - 1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  unint64_t v8 = *(void *)(v4 + 64);
  if (v7 < v8)
  {
    uint64_t v9 = operator new(0x10uLL);
    *uint64_t v9 = v5;
    v9[1] = v7;
    a3[1] = v9 + 2;
    a3[2] = v9 + 2;
    *a3 = v9;
    return;
  }
  uint64_t v10 = operator new(0x10uLL);
  uint64_t v11 = (char *)(v10 + 2);
  *uint64_t v10 = v5;
  v10[1] = v8 - 1;
  a3[1] = v10 + 2;
  a3[2] = v10 + 2;
  *a3 = v10;
  unint64_t v12 = v5 - v8 + v6;
  if (v8 > v12)
  {
    unint64_t v13 = v7 % v8;
    int v14 = (char *)(v10 + 2);
    goto LABEL_30;
  }
  uint64_t v15 = 0;
  unint64_t v16 = v12 / v8;
  if (v16 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v16;
  }
  do
  {
    uint64_t v18 = *(void *)(v4 + 64) - 1;
    unint64_t v19 = a3[2];
    if ((unint64_t)v11 < v19)
    {
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = v18;
      v11 += 16;
      goto LABEL_27;
    }
    uint64_t v20 = (char *)*a3;
    uint64_t v21 = (uint64_t)&v11[-*a3] >> 4;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v19 - (void)v20;
    if (v23 >> 3 > v22) {
      unint64_t v22 = v23 >> 3;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v25 = (char *)operator new(16 * v24);
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t v26 = &v25[16 * v21];
    char v27 = &v25[16 * v24];
    *(void *)uint64_t v26 = 0;
    *((void *)v26 + 1) = v18;
    unint64_t v28 = v26 + 16;
    if (v11 == v20)
    {
      *a3 = v26;
      a3[1] = v28;
      a3[2] = v27;
    }
    else
    {
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v11 - 1);
        v26 -= 16;
        v11 -= 16;
      }
      while (v11 != v20);
      uint64_t v11 = (char *)*a3;
      *a3 = v26;
      a3[1] = v28;
      a3[2] = v27;
      if (!v11) {
        goto LABEL_26;
      }
    }
    operator delete(v11);
LABEL_26:
    uint64_t v11 = v28;
LABEL_27:
    a3[1] = v11;
    ++v15;
  }
  while (v15 != v17);
  int v14 = (char *)a3[2];
  unint64_t v13 = v7 % *(void *)(v4 + 64);
  if (v11 < v14)
  {
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = v13;
    uint64_t v29 = v11 + 16;
    goto LABEL_46;
  }
LABEL_30:
  uint64_t v30 = (char *)*a3;
  uint64_t v31 = (uint64_t)&v11[-*a3] >> 4;
  unint64_t v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 60) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v33 = v14 - v30;
  if (v33 >> 3 > v32) {
    unint64_t v32 = v33 >> 3;
  }
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v34)
  {
    if (v34 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v35 = (char *)operator new(16 * v34);
  }
  else
  {
    uint64_t v35 = 0;
  }
  uint64_t v36 = &v35[16 * v31];
  uint64_t v37 = &v35[16 * v34];
  *(void *)uint64_t v36 = 0;
  *((void *)v36 + 1) = v13;
  uint64_t v29 = v36 + 16;
  if (v11 == v30)
  {
    *a3 = v36;
    a3[1] = v29;
    a3[2] = v37;
LABEL_45:
    operator delete(v11);
    goto LABEL_46;
  }
  do
  {
    *((_OWORD *)v36 - 1) = *((_OWORD *)v11 - 1);
    v36 -= 16;
    v11 -= 16;
  }
  while (v11 != v30);
  uint64_t v11 = (char *)*a3;
  *a3 = v36;
  a3[1] = v29;
  a3[2] = v37;
  if (v11) {
    goto LABEL_45;
  }
LABEL_46:
  a3[1] = v29;
}

void sub_21122BCF4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *ZinIrSymbolTable::AddSymbol(ZinIrSymbolTable *this, ZinIrSymbol *a2)
{
  unint64_t v8 = a2;
  uint64_t v4 = (char *)a2 + 160;
  if (std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__count_unique<ZinIrSymbol *>((uint64_t)this, (uint64_t *)&v8))
  {
    if (*((char *)a2 + 183) < 0) {
      uint64_t v4 = *(char **)v4;
    }
    ZinAssertImpl("Symbol object already in symbol table: %s", v4);
  }
  uint64_t v5 = (uint64_t **)((char *)this + 24);
  if (std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__count_unique<std::string>((uint64_t)this + 24, (void **)v4))
  {
    if (*((char *)a2 + 183) < 0) {
      uint64_t v4 = *(char **)v4;
    }
    ZinAssertImpl("Symbol name already in symbol table: %s", v4);
  }
  std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)this, (uint64_t *)&v8, (uint64_t *)&v8);
  ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::Insert(*((uint64_t ***)this + 6), (uint64_t)v8, (void *)v8 + 24);
  uint64_t v6 = v8;
  uint64_t v9 = v4;
  uint64_t result = std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)v4, (uint64_t)&std::piecewise_construct, (long long **)&v9);
  result[7] = (uint64_t)v6;
  return result;
}

BOOL ZinIrSection::HasValidBarId(ZinIrSection *this)
{
  return *((unsigned __int8 *)this + 56) < *((unsigned __int8 *)this + 16);
}

void ZinIrSection::IncrementScheduleFrom(ZinIrSection *this)
{
}

void ZinIrSymbolTable::IncrementScheduleFrom(ZinIrSymbolTable *this)
{
  std::set<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::set[abi:ne180100](&v1, (uint64_t)this);
  operator new();
}

void sub_21122BF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void ZinIrSection::UpdateSchedule(ZinIrSection *this, ZinIrSymbol *a2, unint64_t a3, unint64_t a4)
{
}

void ZinIrSymbolTable::UpdateSchedule(ZinIrSymbolTable *this, ZinIrSymbol *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  v19[1] = a3;
  uint64_t v20 = a2;
  v19[0] = a3;
  char v18 = 1;
  unint64_t v7 = (uint64_t *)*((void *)this + 6);
  uint64_t v21 = (uint64_t *)&unk_26C32ECA8;
  unint64_t v22 = &v20;
  uint64_t v23 = &v18;
  unint64_t v24 = &v21;
  ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::TraverseIntersectNodeVisitor((uint64_t)v7, *v7, v19, (uint64_t)&v21);
  std::__function::__value_func<BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::~__value_func[abi:ne180100](&v21);
  if (!v18)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = (uint64_t *)&v22;
    if (v20)
    {
      do
      {
        std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>(&v21, (uint64_t *)&v20, (uint64_t *)&v20);
        uint64_t v20 = (ZinIrSymbol *)*((void *)v20 + 64);
      }
      while (v20);
      unint64_t v8 = v21;
      if (v21 != (uint64_t *)&v22)
      {
        do
        {
          ZinIrSymbolTable::RemoveSymbol((uint64_t **)this, (ZinIrSymbol *)v8[4]);
          uint64_t v9 = (uint64_t *)v8[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              uint64_t v9 = (uint64_t *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (uint64_t *)v8[2];
              BOOL v11 = *v10 == (void)v8;
              unint64_t v8 = v10;
            }
            while (!v11);
          }
          unint64_t v8 = v10;
        }
        while (v10 != (uint64_t *)&v22);
        unint64_t v12 = v21;
        if (v21 != (uint64_t *)&v22)
        {
          int8x16_t v16 = (int8x16_t)vdupq_n_s64(a4);
          int64x2_t v17 = vdupq_n_s64(a3);
          do
          {
            unint64_t v13 = (int64x2_t *)v12[4];
            v13[12] = (int64x2_t)vbslq_s8((int8x16_t)vceqq_s64(v13[12], v17), v16, (int8x16_t)v13[12]);
            ZinIrSymbolTable::AddSymbol(this, (ZinIrSymbol *)v13);
            int v14 = (uint64_t *)v12[1];
            if (v14)
            {
              do
              {
                uint64_t v15 = v14;
                int v14 = (uint64_t *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                uint64_t v15 = (uint64_t *)v12[2];
                BOOL v11 = *v15 == (void)v12;
                unint64_t v12 = v15;
              }
              while (!v11);
            }
            unint64_t v12 = v15;
          }
          while (v15 != (uint64_t *)&v22);
        }
      }
    }
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v21, v22);
  }
}

void sub_21122C124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSymbol::HasSpaceIntersect(ZinIrSymbol *this, const ZinIrSymbol *a2)
{
  if (*((void *)this + 1) != *((void *)a2 + 1)) {
    return 0;
  }
  ZinIrSymbol::GetSpaceRanges(this, 1, &v15);
  ZinIrSymbol::GetSpaceRanges(a2, 1, &v13);
  uint64_t v4 = v16;
  if (v16 == &v15)
  {
LABEL_17:
    uint64_t v2 = 0;
  }
  else
  {
    while (v14 == &v13)
    {
LABEL_16:
      uint64_t v4 = (uint64_t *)v4[1];
      if (v4 == &v15) {
        goto LABEL_17;
      }
    }
    unint64_t v5 = v4[2];
    unint64_t v6 = v4[3];
    unint64_t v7 = v14;
    while (1)
    {
      if (v5 <= v6)
      {
        unint64_t v9 = v7[2];
        unint64_t v8 = v7[3];
        BOOL v10 = v9 >= v6 || v5 >= v8;
        if (!v10 && v9 <= v8) {
          break;
        }
      }
      unint64_t v7 = (uint64_t *)v7[1];
      if (v7 == &v13) {
        goto LABEL_16;
      }
    }
    uint64_t v2 = 1;
  }
  std::__list_imp<ZinIrSection *>::clear(&v13);
  std::__list_imp<ZinIrSection *>::clear(&v15);
  return v2;
}

void sub_21122C230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL ZinIrSymbol::SpaceContains(ZinIrSymbol *this, const ZinIrSymbol *a2)
{
  if (*((void *)this + 1) != *((void *)a2 + 1)) {
    return 0;
  }
  ZinIrSymbol::GetSpaceRanges(this, 1, &v16);
  ZinIrSymbol::GetSpaceRanges(a2, 1, &v14);
  uint64_t v4 = v15;
  if (v15 == &v14)
  {
    BOOL v2 = 1;
  }
  else
  {
    BOOL v2 = v17 != &v16;
    do
    {
      if (v17 == &v16) {
        break;
      }
      unint64_t v5 = v4[2];
      unint64_t v6 = v4[3];
      unint64_t v7 = v17;
      while (1)
      {
        unint64_t v8 = v7[2];
        unint64_t v9 = v7[3];
        BOOL v10 = v8 <= v9 && v9 >= v6;
        BOOL v11 = !v10 || v5 > v6;
        if (!v11 && v8 <= v5) {
          break;
        }
        unint64_t v7 = (uint64_t *)v7[1];
        if (v7 == &v16)
        {
          BOOL v2 = 0;
          goto LABEL_23;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4 != &v14);
  }
LABEL_23:
  std::__list_imp<ZinIrSection *>::clear(&v14);
  std::__list_imp<ZinIrSection *>::clear(&v16);
  return v2;
}

void sub_21122C32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ZinIrSection::~ZinIrSection(void **this)
{
  *this = &unk_26C344980;
  free(this[3]);
  BOOL v2 = (ZinIrSection *)this[8];
  if (v2 != (ZinIrSection *)(this + 9))
  {
    do
    {
      uint64_t v3 = *((void *)v2 + 4);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = (ZinIrSection *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          uint64_t v4 = *(ZinIrSection **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (ZinIrSection *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          BOOL v2 = v5;
        }
        while (!v6);
      }
      BOOL v2 = v5;
    }
    while (v5 != (ZinIrSection *)(this + 9));
  }
  ZinIrSymbolTable::~ZinIrSymbolTable((ZinIrSymbolTable *)(this + 8));
}

{
  uint64_t vars8;

  ZinIrSection::~ZinIrSection(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::Insert(uint64_t **a1, uint64_t a2, void *a3)
{
  int v5 = 0;
  uint64_t result = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::InsertNodeVisitor((uint64_t)a1, *a1, a2, a3, &v5);
  *a1 = (uint64_t *)result;
  if (result)
  {
    *(void *)(result + 56) = 0;
    *(unsigned char *)(result + 48) = 1;
  }
  return result;
}

uint64_t ZinIrSymbolTable::RemoveSymbol(uint64_t **this, ZinIrSymbol *a2)
{
  unint64_t v7 = a2;
  uint64_t v3 = (ZinIrSymbolTable *)std::__tree<ZinIrSymbol const*,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol const*>>::find<ZinIrSymbol const*>((uint64_t)this, (uint64_t *)&v7);
  if (this + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)v3;
  int v5 = (void **)((char *)v7 + 160);
  uint64_t result = std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__count_unique<std::string>((uint64_t)(this + 3), (void **)v7 + 20);
  if (result)
  {
    std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(this, v4);
    operator delete(v4);
    ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::Remove(this[6], (uint64_t)v7, (void *)v7 + 24);
    std::__tree<std::string>::__erase_unique<std::string>(this + 3, v5);
    return 1;
  }
  return result;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::Remove(uint64_t *a1, uint64_t a2, void *a3)
{
  int v5 = 0;
  uint64_t result = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::RemoveNodeVisitor((uint64_t)a1, *a1, a2, a3, &v5);
  *a1 = result;
  if (result)
  {
    *(void *)(result + 56) = 0;
    *(unsigned char *)(result + 48) = 1;
  }
  return result;
}

void ZinIrSymbolTable::GetCoveringSymbols(uint64_t **this@<X0>, const ZinLiveRange *a2@<X1>, uint64_t a3@<X8>)
{
  ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodes(this[6], (unint64_t *)a2, (uint64_t)&v6);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v4 = v6;
  int v5 = v7;
  if (v6 != v7)
  {
    do
    {
      std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__emplace_unique_key_args<ZinIrSymbol *,ZinIrSymbol * const&>((uint64_t **)a3, *v4, *v4);
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v6;
  }
  if (v4)
  {
    unint64_t v7 = v4;
    operator delete(v4);
  }
}

void sub_21122C620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v11, *(void **)(v11 + 8));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodes@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodesVisitor((uint64_t)a1, *a1, a2, (void **)a3);
}

void sub_21122C680(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrSymbolTable::GetSymbolByName(uint64_t a1, void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 24);
  uint64_t result = std::__tree<std::__value_type<std::string,ZinIOBarInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIOBarInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIOBarInfo>>>::__count_unique<std::string>(a1 + 24, a2);
  if (result)
  {
    int v5 = a2;
    return std::__tree<std::__value_type<std::string,ZinIrOpLayer *>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrOpLayer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrOpLayer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, a2, (uint64_t)&std::piecewise_construct, (long long **)&v5)[7];
  }
  return result;
}

uint64_t ZinIrSymbol::GetWrapInfo@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(this + 88))
  {
    long long v2 = *(_OWORD *)(this + 64);
  }
  else
  {
    char v3 = *(unsigned char *)(this + 56);
    if (!v3)
    {
      *a2 = 0;
      goto LABEL_6;
    }
    long long v2 = *(_OWORD *)(this + 32);
  }
  *(_OWORD *)a2 = v2;
  char v3 = 1;
LABEL_6:
  a2[16] = v3;
  return this;
}

void ZinIrSymbolTable::ZinIrSymbolTable(ZinIrSymbolTable *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *((void *)this + 5) = 0;
  operator new();
}

void sub_21122C79C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy(v2, *(char **)(v1 + 32));
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ZinIrSymbolTable::~ZinIrSymbolTable(ZinIrSymbolTable *this)
{
}

void *std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::~ZinIntervalTree(result);
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

uint64_t StaticWrapInfo::GetWrapIndex(StaticWrapInfo *this)
{
  return (*((_DWORD *)this + 2) - *((_DWORD *)this + 4));
}

uint64_t std::__tree<ZinIrSymbol *,ZinIrSymbol::Compare,std::allocator<ZinIrSymbol *>>::__count_unique<ZinIrSymbol *>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      uint64_t v5 = *a2;
      uint64_t v6 = v2[4];
      if (*a2) {
        BOOL v7 = v6 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        if (v5) {
          BOOL v8 = v6 == 0;
        }
        else {
          BOOL v8 = 0;
        }
        if (v8) {
          goto LABEL_26;
        }
      }
      else
      {
        char v9 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v5 + 160), (void **)(v6 + 160));
        if (v9 < 0) {
          goto LABEL_26;
        }
        uint64_t v6 = v2[4];
        uint64_t v5 = *a2;
      }
      if (v6) {
        BOOL v10 = v5 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        if (!v6 || v5) {
          return v4;
        }
      }
      else
      {
        char v11 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v6 + 160), (void **)(v5 + 160));
        if ((v11 & 0x80) == 0) {
          return v4;
        }
      }
      ++v2;
LABEL_26:
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::InsertNodeVisitor(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, int *a5)
{
  *a5 = 0;
  if (!a2) {
    operator new();
  }
  uint64_t v8 = (uint64_t)a2;
  if (ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::LessThan::operator()((uint64_t)&v24, a3, *a2, a4, a2 + 1))
  {
    uint64_t inserted = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::InsertNodeVisitor(a1, *(void *)(v8 + 64), a3, a4, a5);
    if (inserted) {
      *(void *)(inserted + 56) = v8;
    }
    *(void *)(v8 + 64) = inserted;
  }
  else
  {
    uint64_t v11 = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::InsertNodeVisitor(a1, *(void *)(v8 + 72), a3, a4, a5);
    if (v11) {
      *(void *)(v11 + 56) = v8;
    }
    *(void *)(v8 + 72) = v11;
  }
  ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v8);
  switch(*a5)
  {
    case 1:
      goto LABEL_14;
    case 2:
      unint64_t v12 = *(void **)(v8 + 64);
      uint64_t v13 = (void *)v12[9];
      uint64_t v14 = v13[8];
      if (v14) {
        *(void *)(v14 + 56) = v12;
      }
      v12[9] = v14;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v12);
      v12[7] = v13;
      v13[8] = v12;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v13);
      v13[7] = v8;
      *(void *)(v8 + 64) = v13;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v8);
LABEL_14:
      uint64_t v15 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateClockwise(a1, (void *)v8);
      goto LABEL_19;
    case 3:
      uint64_t v16 = *(void **)(v8 + 72);
      int64x2_t v17 = (void *)v16[8];
      uint64_t v18 = v17[9];
      if (v18) {
        *(void *)(v18 + 56) = v16;
      }
      v16[8] = v18;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v16);
      v16[7] = v17;
      v17[9] = v16;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v17);
      v17[7] = v8;
      *(void *)(v8 + 72) = v17;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v8);
      goto LABEL_18;
    case 4:
LABEL_18:
      uint64_t v15 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateCounterClockwise(a1, (void *)v8);
LABEL_19:
      *(unsigned char *)(v8 + 48) = 0;
      *((unsigned char *)v15 + 48) = 1;
      uint64_t v8 = (uint64_t)v15;
      break;
    default:
      break;
  }
  if (ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::HasDoubleRed(v8, a5))
  {
    uint64_t v19 = *(void *)(v8 + 56);
    if (v19)
    {
      uint64_t v20 = *(void *)(v19 + 64);
      uint64_t v21 = v20;
      if (v20 == v8) {
        uint64_t v21 = *(void *)(v19 + 72);
      }
      if (v21 && !*(unsigned char *)(v21 + 48))
      {
        *(unsigned char *)(v19 + 48) = 0;
        uint64_t v22 = *(void *)(v19 + 72);
        if (v20) {
          *(unsigned char *)(v20 + 48) = 1;
        }
        if (v22) {
          *(unsigned char *)(v22 + 48) = 1;
        }
        *a5 = 0;
      }
    }
  }
  return v8;
}

BOOL ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::LessThan::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  BOOL v5 = *a4 < *a5;
  if (*a4 != *a5) {
    return v5;
  }
  uint64_t v6 = a4[1];
  uint64_t v7 = a5[1];
  BOOL v5 = v6 < v7;
  if (v6 != v7) {
    return v5;
  }
  if (a2 && a3) {
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a2 + 160), (void **)(a3 + 160)) & 0x80u) != 0;
  }
  return a2 && a3 == 0;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::RemoveNodeVisitor(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v24 = a2;
  if (!a2) {
    return 0;
  }
  BOOL v10 = (void *)(a2 + 8);
  if (ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::LessThan::operator()((uint64_t)&v23, a3, *(void *)a2, a4, (void *)(a2 + 8)))
  {
    uint64_t v11 = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::RemoveNodeVisitor(a1, *(void *)(a2 + 64), a3, a4, a5);
    if (v11) {
      *(void *)(v11 + 56) = a2;
    }
    *(void *)(a2 + 64) = v11;
LABEL_18:
    ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)a2);
    ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FixDoubleBlack(a1, a5, &v24);
    return v24;
  }
  if (*(void *)a2 != a3 || *v10 != *a4 || *(void *)(a2 + 16) != a4[1])
  {
    uint64_t v19 = *(void *)(a2 + 72);
    uint64_t v18 = a1;
    uint64_t v17 = a3;
    uint64_t v16 = a4;
LABEL_15:
    uint64_t v20 = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::RemoveNodeVisitor(v18, v19, v17, v16, a5);
    if (v20) {
      *(void *)(v20 + 56) = a2;
    }
    *(void *)(a2 + 72) = v20;
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  if (!v13)
  {
    if (v12)
    {
      if (*(unsigned char *)(a2 + 48) == 1) {
        *(unsigned char *)(v12 + 48) = 1;
      }
      MEMORY[0x21667D3C0](a2, 0x1020C40823E9ACBLL);
      return v12;
    }
    if (*(unsigned char *)(a2 + 48))
    {
      uint64_t v21 = *(void *)(a2 + 56);
      if (v21) {
        *a5 = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(a1, v21, a2);
      }
    }
    MEMORY[0x21667D3C0](a2, 0x1020C40823E9ACBLL);
    return 0;
  }
  if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 72);
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(void *)(v14 + 64);
    }
    while (v14);
    *(void *)a2 = *(void *)v15;
    uint64_t v16 = (void *)(v15 + 8);
    *(_OWORD *)BOOL v10 = *(_OWORD *)(v15 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v15 + 24);
    *(void *)(a2 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(void *)(v15 + 40);
    uint64_t v17 = *(void *)v15;
    uint64_t v18 = a1;
    uint64_t v19 = v12;
    goto LABEL_15;
  }
  if (*(unsigned char *)(a2 + 48) == 1) {
    *(unsigned char *)(v13 + 48) = 1;
  }
  MEMORY[0x21667D3C0](a2, 0x1020C40823E9ACBLL);
  return v13;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 72);
  uint64_t v4 = v3;
  if (v3 == a3) {
    uint64_t v4 = *(void *)(a2 + 64);
  }
  if (*(unsigned char *)(v4 + 48) != 1)
  {
    BOOL v8 = v3 == a3;
    unsigned int v9 = 5;
    unsigned int v10 = 2;
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v4 + 64);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 + 72);
    if (v7)
    {
      if (v3 != a3) {
        goto LABEL_16;
      }
      if (*(unsigned char *)(v7 + 48)) {
        return 3;
      }
      else {
        return 1;
      }
    }
    BOOL v8 = v3 == a3;
    unsigned int v9 = 6;
    unsigned int v10 = 3;
LABEL_10:
    if (v8) {
      return v10;
    }
    else {
      return v9;
    }
  }
  int v6 = *(unsigned __int8 *)(v5 + 48);
  if (v3 != a3)
  {
    if (!v6) {
      return 4;
    }
    uint64_t v7 = *(void *)(v4 + 72);
    if (!v7) {
      return 6;
    }
LABEL_16:
    if (*(unsigned char *)(v7 + 48)) {
      return 6;
    }
    return 4;
  }
  if (!v6) {
    return 1;
  }
  uint64_t v12 = *(void *)(v4 + 72);
  uint64_t result = 3;
  if (v12)
  {
    int v13 = *(unsigned __int8 *)(v12 + 48);
    uint64_t result = v13 ? 3 : 1;
    if (!v13) {
      return 1;
    }
  }
  return result;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FixDoubleBlack(uint64_t result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a3;
  int v7 = *(unsigned __int8 *)(*a3 + 48);
  switch(*a2)
  {
    case 1:
      uint64_t v8 = *(void *)(v6 + 64);
      uint64_t v9 = *(void *)(v8 + 64);
      if (v9 && *(unsigned char *)(v9 + 48) != 1)
      {
        uint64_t result = (uint64_t)ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateClockwise(result, (void *)*a3);
        goto LABEL_34;
      }
      uint64_t v10 = *(void *)(v8 + 72);
      uint64_t v11 = *(void *)(v10 + 64);
      if (v11) {
        *(void *)(v11 + 56) = v8;
      }
      *(void *)(v8 + 72) = v11;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v8);
      uint64_t v12 = *(void *)(v10 + 72);
      if (v12) {
        *(void *)(v12 + 56) = v6;
      }
      *(void *)(v6 + 64) = v12;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v6);
      *(void *)(v8 + 56) = v10;
      *(void *)(v10 + 64) = v8;
      ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v10);
      *(void *)(v6 + 56) = v10;
      *(void *)(v10 + 72) = v6;
      uint64_t result = (uint64_t)ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v10);
      *(unsigned char *)(v10 + 48) = v7;
      *(unsigned char *)(v8 + 48) = 1;
      *(unsigned char *)(v6 + 48) = 1;
      goto LABEL_24;
    case 2:
      int v13 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateClockwise(result, (void *)*a3);
      *a3 = (uint64_t)v13;
      *((unsigned char *)v13 + 48) = 1;
      uint64_t v14 = v13[9];
      *(unsigned char *)(v14 + 48) = 0;
      uint64_t v29 = v14;
      int DoubleBlackType = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(v5, v14, *(void *)(v14 + 72));
      ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FixDoubleBlack(v5, &DoubleBlackType, &v29);
      uint64_t v15 = (void *)*a3;
      uint64_t v16 = v29;
      if (v29) {
        *(void *)(v29 + 56) = v15;
      }
      v15[9] = v16;
      goto LABEL_28;
    case 3:
      *(unsigned char *)(v6 + 48) = 1;
      uint64_t v17 = *(void *)(v6 + 64);
      if (v17) {
        goto LABEL_13;
      }
      goto LABEL_14;
    case 4:
      uint64_t v19 = *(void *)(v6 + 72);
      uint64_t v20 = *(void *)(v19 + 72);
      if (v20 && *(unsigned char *)(v20 + 48) != 1)
      {
        uint64_t result = (uint64_t)ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateCounterClockwise(result, (void *)*a3);
LABEL_34:
        *a3 = result;
        *(unsigned char *)(result + 48) = v7;
        uint64_t v27 = *(void *)(result + 64);
        uint64_t v26 = *(void *)(result + 72);
        if (v27) {
          *(unsigned char *)(v27 + 48) = 1;
        }
        if (v26) {
          *(unsigned char *)(v26 + 48) = 1;
        }
      }
      else
      {
        uint64_t v10 = *(void *)(v19 + 64);
        uint64_t v21 = *(void *)(v10 + 64);
        if (v21) {
          *(void *)(v21 + 56) = v6;
        }
        *(void *)(v6 + 72) = v21;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v6);
        uint64_t v22 = *(void *)(v10 + 72);
        if (v22) {
          *(void *)(v22 + 56) = v19;
        }
        *(void *)(v19 + 64) = v22;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v19);
        *(void *)(v6 + 56) = v10;
        *(void *)(v10 + 64) = v6;
        ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v10);
        *(void *)(v19 + 56) = v10;
        *(void *)(v10 + 72) = v19;
        uint64_t result = (uint64_t)ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax((void *)v10);
        *(unsigned char *)(v10 + 48) = v7;
        *(unsigned char *)(v6 + 48) = 1;
        *(unsigned char *)(v19 + 48) = 1;
LABEL_24:
        *a3 = v10;
      }
      goto LABEL_29;
    case 5:
      char v23 = ZinIntervalTree<ZinIrTensor *,ZinIrIdComparator<ZinIrTensor *>,ZinLiveRange>::RotateCounterClockwise(result, (void *)*a3);
      *a3 = (uint64_t)v23;
      *((unsigned char *)v23 + 48) = 1;
      uint64_t v24 = v23[8];
      *(unsigned char *)(v24 + 48) = 0;
      uint64_t v29 = v24;
      int DoubleBlackType = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(v5, v24, *(void *)(v24 + 64));
      ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FixDoubleBlack(v5, &DoubleBlackType, &v29);
      uint64_t v15 = (void *)*a3;
      uint64_t v25 = v29;
      if (v29) {
        *(void *)(v29 + 56) = v15;
      }
      v15[8] = v25;
LABEL_28:
      uint64_t result = (uint64_t)ZinIntervalTreeNode<ZinIrTensor *,ZinLiveRange>::SetMinMax(v15);
      goto LABEL_29;
    case 6:
      *(unsigned char *)(v6 + 48) = 1;
      uint64_t v17 = *(void *)(v6 + 72);
      if (v17) {
LABEL_13:
      }
        *(unsigned char *)(v17 + 48) = 0;
LABEL_14:
      if (v7 && (uint64_t v18 = *(void *)(v6 + 56)) != 0)
      {
        uint64_t result = ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::FindDoubleBlackType(result, v18, v6);
        *a2 = result;
      }
      else
      {
LABEL_29:
        *a2 = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodesVisitor(uint64_t result, uint64_t a2, unint64_t *a3, void **a4)
{
  if (a2 && *(void *)(a2 + 32) >= *a3 && *(void *)(a2 + 40) <= a3[1])
  {
    uint64_t v7 = result;
    long long v21 = *(_OWORD *)(a2 + 8);
    if (ZinLiveRange::Contains((unint64_t *)&v21, a3))
    {
      unint64_t v8 = (unint64_t)a4[2];
      uint64_t v9 = a4[1];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = ((char *)v9 - (unsigned char *)*a4) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v8 - (void)*a4;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v15[8 * v11];
        uint64_t v17 = &v15[8 * v14];
        *(void *)uint64_t v16 = a2;
        uint64_t v10 = v16 + 8;
        uint64_t v19 = (char *)*a4;
        uint64_t v18 = (char *)a4[1];
        if (v18 != *a4)
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v16 - 1) = v20;
            v16 -= 8;
          }
          while (v18 != v19);
          uint64_t v18 = (char *)*a4;
        }
        *a4 = v16;
        a4[1] = v10;
        a4[2] = v17;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v9 = a2;
        uint64_t v10 = v9 + 1;
      }
      a4[1] = v10;
    }
    ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodesVisitor(v7, *(void *)(a2 + 64), a3, a4);
    return ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetCoveringNodesVisitor(v7, *(void *)(a2 + 72), a3, a4);
  }
  return result;
}

void *ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::~ZinIntervalTree(void *a1)
{
  ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetTreeNodes(a1, (void **)&v5);
  uint64_t v2 = v5;
  uint64_t v3 = v6;
  if (v5 != v6)
  {
    do
    {
      if (*v2) {
        MEMORY[0x21667D3C0](*v2, 0x1020C40823E9ACBLL);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = v5;
  }
  if (v2)
  {
    uint64_t v6 = v2;
    operator delete(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>::GetTreeNodes@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  if (*a1)
  {
    std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::push_back(v19, a1);
    for (uint64_t i = *((void *)&v20 + 1); *((void *)&v20 + 1); uint64_t i = *((void *)&v20 + 1))
    {
      uint64_t v4 = *(void *)(*(void *)(*((void *)&v19[0] + 1) + (((unint64_t)v20 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v20 & 0x1FF));
      *(void *)&long long v20 = v20 + 1;
      *((void *)&v20 + 1) = i - 1;
      if ((unint64_t)v20 >= 0x400)
      {
        operator delete(**((void ***)&v19[0] + 1));
        *((void *)&v19[0] + 1) += 8;
        *(void *)&long long v20 = v20 - 512;
      }
      if (*(void *)(v4 + 64))
      {
        uint64_t v18 = *(void *)(v4 + 64);
        std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      if (*(void *)(v4 + 72))
      {
        uint64_t v18 = *(void *)(v4 + 72);
        std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::push_back(v19, &v18);
      }
      uint64_t v6 = a2[1];
      unint64_t v5 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v8 = ((char *)v6 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = v5 - (void)*a2;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v11);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = &v12[8 * v8];
        *(void *)uint64_t v13 = v4;
        uint64_t v7 = v13 + 8;
        uint64_t v15 = (char *)*a2;
        unint64_t v14 = (char *)a2[1];
        if (v14 != *a2)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          unint64_t v14 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v7;
        a2[2] = &v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v6 = v4;
        uint64_t v7 = v6 + 1;
      }
      a2[1] = v7;
    }
  }
  return std::deque<unsigned long>::~deque[abi:ne180100](v19);
}

void sub_21122D4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va);
  unint64_t v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *,std::allocator<ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> *>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_21122D880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::~__func()
{
}

__n128 std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C32ECA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C32ECA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = **a2;
  uint64_t v3 = **(void **)(a1 + 8);
  if (v2 == v3) {
    **(unsigned char **)(a1 + 16) = 0;
  }
  return v2 != v3;
}

uint64_t std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0,std::allocator<ZinIrSymbolTable::UpdateSchedule(ZinIrSymbol *,unsigned long,unsigned long)::$_0>,BOOL ()(ZinIntervalTreeNode<ZinIrSymbol *,ZinLiveRange> const*)>::target_type()
{
}

void ZinIrSymbol::VerifyChildSymbol()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Child space ranges can not be empty.", v0, 2u);
}

{
  uint8_t v0[16];

  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Child can't have more space ranges than its parent.", v0, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Child symbol size   : %zu\n", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Child symbol begin offset : %zu\n", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Child symbol name   : %s\n", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Parent symbol size  : %zu\n", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Parent symbol begin offset: %zu\n", v1, v2, v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, v0, "Parent symbol name  : %s\n", v1, v2, v3, v4, v5);
}

void ZinIrFactoryJIT::ZinIrFactoryJIT(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, ZinIrCompilationStatus *a12)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = a5;
  *(void *)(a1 + 88) = a6;
  *(void *)(a1 + 96) = a7;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 12std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(void *)(a1 + 128) = a8;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = a9;
  *(void *)(a1 + 184) = a10;
  *(void *)(a1 + 192) = a11;
  *(_OWORD *)(a1 + 20std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)a1 = &unk_26C348628;
  *(void *)(a1 + 8) = a2;
  ZinIrFactoryJIT::FillContext(a1, a3, a4, a12);
}

{
  ZinIrFactoryJIT::ZinIrFactoryJIT(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_21122DE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::~__hash_table(v2 + 296);
  uint64_t v6 = *(void **)(v2 + 272);
  if (v6)
  {
    *(void *)(v2 + 28std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(v2 + 248);
  if (v7)
  {
    *(void *)(v2 + 256) = v7;
    operator delete(v7);
  }
  std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  unint64_t v8 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 144) = v8;
    operator delete(v8);
  }
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy(v3, *(char **)(v2 + 112));
  ZinIrFactoryBase::~ZinIrFactoryBase((ZinIrBindings **)v2);
  _Unwind_Resume(a1);
}

void ZinIrFactoryJIT::FillContext(uint64_t a1, uint64_t a2, int a3, ZinIrCompilationStatus *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 8);
  *(_DWORD *)(v7 + 52) = a3;
  std::string::operator=((std::string *)(v7 + 24), (const std::string *)a2);
  ZinIrCompilerParameters::setEnableDynamicShapes((ZinIrCompilerParameters *)(*(void *)(a1 + 8) + 176), 1);
  uint64_t v8 = *(void *)(a1 + 8);
  *(_DWORD *)(v8 + 84) = 2;
  *(unsigned char *)(v8 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "1.0.15");
  ZinIrVersion::ZinIrVersion(v16, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  ZinIrVersion::SetVersion((std::string *)(*(void *)(a1 + 8) + 952), v16);
  uint64_t v9 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
  *(_DWORD *)(*(void *)(a1 + 8) + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v10 = (const char *)a2;
  }
  else {
    uint64_t v10 = *(const char **)a2;
  }
  CFStringRef v11 = CFStringCreateWithCString(*v9, v10, 0x8000100u);
  CFStringRef v12 = v11;
  if (v11)
  {
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 != CFStringGetTypeID()) {
      CFStringRef v12 = 0;
    }
  }
  *(void *)(a1 + 32) = ZinIrCompilationStatus::AddNetwork(a4, v12);
  CFRelease(v12);
  operator new();
}

void sub_21122E31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  ZinIrVersion::~ZinIrVersion(&a20);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::AddOpLayers(ZinIrFactoryJIT *this)
{
  kdebug_trace();
  if (ZinIrFactoryJIT::ParseSymbolTables(this) && ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(this))
  {
    memset(v62, 0, sizeof(v62));
    if (ZinIrFactoryJIT::ParseUnits((uint64_t)this, v62))
    {
      kdebug_trace();
      kdebug_trace();
      if (ZinIrLiveIOManager::SetLiveIO(*((void *)this + 2), *((void *)this + 10), *((std::string ***)this + 11), *((CFArrayRef **)this + 4)))
      {
        v61[0] = 0;
        v61[1] = 0;
        uint64_t v60 = v61;
        if (ZinIrFactoryBase::CreateLiveIns((uint64_t)this))
        {
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          unint64_t v59 = 0;
          uint64_t v2 = (uint64_t *)v60;
          if (v60 != v61)
          {
            uint64_t v3 = 0;
            do
            {
              unint64_t v4 = (long long *)(v2 + 4);
              if ((unint64_t)v3 >= v59)
              {
                uint64_t v3 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v57, (uint64_t)v4);
              }
              else
              {
                if (*((char *)v2 + 55) < 0)
                {
                  std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v2[4], v2[5]);
                }
                else
                {
                  long long v5 = *v4;
                  v3->__r_.__value_.__r.__words[2] = v2[6];
                  *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v5;
                }
                ++v3;
              }
              uint64_t v58 = v3;
              uint64_t v6 = (char *)v2[1];
              if (v6)
              {
                do
                {
                  uint64_t v7 = (char **)v6;
                  uint64_t v6 = *(char **)v6;
                }
                while (v6);
              }
              else
              {
                do
                {
                  uint64_t v7 = (char **)v2[2];
                  BOOL v8 = *v7 == (char *)v2;
                  uint64_t v2 = (uint64_t *)v7;
                }
                while (!v8);
              }
              uint64_t v2 = (uint64_t *)v7;
            }
            while (v7 != v61);
          }
          uint64_t v9 = *(void *)(*((void *)this + 1) + 1000);
          if (*(void *)(v9 + 16) != 1) {
            ZinAssertImpl("ZinIrFactoryJIT does not support CFG with more than one basic block.");
          }
          Hal = (uint64_t **)ZinIrTarget::GetHal(*(uint64_t **)v9, *(ZinIrTarget **)(*(void *)v9 + 32));
          ZinIrBasicBlock::GetName(&__p);
          ZinObjectNameFactory::ZinObjectNameFactory(v55, &__p);
          if (SBYTE7(v53) < 0) {
            operator delete((void *)__p);
          }
          if (ZinIrFactoryBase::AddInputLayersIfNeeded((uint64_t)this, &v57, (uint64_t **)&v60, (uint64_t)v55, Hal))
          {
            long long __p = 0u;
            long long v53 = 0u;
            int v54 = 1065353216;
            uint64_t v11 = *((void *)this + 10);
            LODWORD(v51[0]) = 0;
            CFStringRef v12 = std::map<ZinIrDimension,unsigned long>::at(v11, (int *)v51);
            uint64_t v13 = *v12;
            uint64_t v14 = v12[1];
            if (*v12 != v14)
            {
              do
              {
                v51[0] = (long long *)v13;
                char v15 = std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, (unsigned __int8 *)v13, (uint64_t)&std::piecewise_construct, v51);
                long long v16 = *(_OWORD *)(v13 + 56);
                long long v17 = *(_OWORD *)(v13 + 72);
                *((void *)v15 + 9) = *(void *)(v13 + 88);
                *(_OWORD *)(v15 + 56) = v17;
                *(_OWORD *)(v15 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v16;
                v13 += 248;
              }
              while (v13 != v14);
            }
            if (ZinIrFactoryBase::PrepareLiveOuts(this)) {
              std::make_unique[abi:ne180100]<ZinMirUnitGraph>();
            }
            ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), @"InvalidOutput");
            BOOL v42 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v42) {
              ZinIrFactoryJIT::AddOpLayers(v42, v43, v44, v45, v46, v47, v48, v49);
            }
            std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&__p);
          }
          else
          {
            ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), @"InvalidUnit");
            BOOL v34 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v34) {
              ZinIrFactoryJIT::AddOpLayers(v34, v35, v36, v37, v38, v39, v40, v41);
            }
          }
          v55[0] = (void **)&unk_26C34DA98;
          if (v56 < 0) {
            operator delete(v55[1]);
          }
          v55[0] = (void **)&v57;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v55);
        }
        else
        {
          ZinIrNetworkStatus::SetError(*((CFArrayRef **)this + 4), @"InvalidInput");
          BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          if (v26) {
            ZinIrFactoryJIT::AddOpLayers(v26, v27, v28, v29, v30, v31, v32, v33);
          }
        }
        std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v60, v61[0]);
      }
      else
      {
        BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v18) {
          ZinIrFactoryJIT::AddOpLayers(v18, v19, v20, v21, v22, v23, v24, v25);
        }
      }
    }
    std::deque<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>::~deque[abi:ne180100](v62);
  }
  return 0;
}

void sub_21122ECB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&a24);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<ZinShapeDependentTransform>>>>>::~__hash_table((uint64_t)&a30);
  uint64_t v43 = a35;
  a35 = 0;
  if (v43) {
    std::default_delete<ZinMirUnitGraph>::operator()[abi:ne180100]((uint64_t)&a35, v43);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&a36);
  *(void *)(v41 - 20std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = &unk_26C34DA98;
  if (*(char *)(v41 - 169) < 0) {
    operator delete(*(void **)(v41 - 192));
  }
  *(void *)(v41 - 20std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v41 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 200));
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy(v41 - 136, *(char **)(v41 - 128));
  std::deque<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>::~deque[abi:ne180100]((void *)(v41 - 112));
  _Unwind_Resume(a1);
}

BOOL ZinIrFactoryJIT::ParseSymbolTables(ZinIrFactoryJIT *this)
{
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v2 = ZinSerial::DeserializeMirUnitSymbolTables((uint64_t *)this + 20, &v50, &v47, &v44);
  if (!v2)
  {
    PrivatePool = ZinIrMemoryPools::GetPrivatePool(*((void **)this + 16), 2, 0);
    ZinIrMemoryPool::GetSections((uint64_t)PrivatePool, 4, &v39);
    uint64_t v5 = *(void *)(__p + 16);
    std::__list_imp<ZinIrSection *>::clear(&v39);
    uint64_t v6 = ZinIrMemoryPools::GetPrivatePool(*((void **)this + 16), 0, 0);
    ZinIrMemoryPool::GetSections((uint64_t)v6, 4, &v39);
    uint64_t v7 = *(void *)(__p + 16);
    std::__list_imp<ZinIrSection *>::clear(&v39);
    BOOL v8 = ZinIrMemoryPools::GetPrivatePool(*((void **)this + 16), 0, 0);
    ZinIrMemoryPool::GetSections((uint64_t)v8, 0, &v39);
    uint64_t v9 = *(void *)(__p + 16);
    std::__list_imp<ZinIrSection *>::clear(&v39);
    uint64_t v10 = v50;
    for (uint64_t i = v51; v10 != i; v10 += 352)
    {
      uint64_t v39 = *(void ***)v10;
      long long v12 = *(_OWORD *)(v10 + 8);
      uint64_t v41 = *(void *)(v10 + 24);
      long long __p = v12;
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 8) = 0;
      memcpy(v42, (const void *)(v10 + 32), sizeof(v42));
      uint64_t v43 = v5;
      std::vector<SymbolInfoAndSection>::push_back[abi:ne180100]((uint64_t *)this + 25, (uint64_t)&v39);
      if (SHIBYTE(v41) < 0) {
        operator delete((void *)__p);
      }
    }
    uint64_t v13 = v47;
    for (uint64_t j = v48; v13 != j; v13 += 352)
    {
      uint64_t v39 = *(void ***)v13;
      long long v15 = *(_OWORD *)(v13 + 8);
      uint64_t v41 = *(void *)(v13 + 24);
      long long __p = v15;
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 8) = 0;
      memcpy(v42, (const void *)(v13 + 32), sizeof(v42));
      uint64_t v43 = v7;
      std::vector<SymbolInfoAndSection>::push_back[abi:ne180100]((uint64_t *)this + 28, (uint64_t)&v39);
      if (SHIBYTE(v41) < 0) {
        operator delete((void *)__p);
      }
    }
    uint64_t v16 = v44;
    for (uint64_t k = v45; v16 != k; v16 += 352)
    {
      uint64_t v39 = *(void ***)v16;
      long long v18 = *(_OWORD *)(v16 + 8);
      uint64_t v41 = *(void *)(v16 + 24);
      long long __p = v18;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 8) = 0;
      memcpy(v42, (const void *)(v16 + 32), sizeof(v42));
      uint64_t v43 = v9;
      std::vector<SymbolInfoAndSection>::push_back[abi:ne180100]((uint64_t *)this + 28, (uint64_t)&v39);
      if (SHIBYTE(v41) < 0) {
        operator delete((void *)__p);
      }
    }
    uint64_t v19 = *((void *)this + 25);
    uint64_t v20 = *((void *)this + 26);
    while (v19 != v20)
    {
      if (*(_DWORD *)v19 > 2u) {
        goto LABEL_2;
      }
      if (!ZinMirCreateSymbol(v19, *(void *)(v19 + 352), (void *)this + 25))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
LABEL_45:
        }
          ZinIrFactoryJIT::ParseSymbolTables(v19, v37, v38);
        goto LABEL_2;
      }
      v19 += 360;
    }
    uint64_t v19 = *((void *)this + 28);
    uint64_t v21 = *((void *)this + 29);
    if (v19 != v21)
    {
      uint64_t v22 = (char **)((char *)this + 248);
      while (*(_DWORD *)v19 <= 2u)
      {
        uint64_t Symbol = ZinMirCreateSymbol(v19, *(void *)(v19 + 352), (void *)this + 28);
        uint64_t v24 = Symbol;
        if (!Symbol)
        {
          if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            break;
          }
          goto LABEL_45;
        }
        if (!*(_DWORD *)(*(void *)(v19 + 352) + 8))
        {
          BOOL v26 = (uint64_t *)*((void *)this + 32);
          unint64_t v25 = *((void *)this + 33);
          if ((unint64_t)v26 >= v25)
          {
            uint64_t v28 = ((char *)v26 - *v22) >> 3;
            if ((unint64_t)(v28 + 1) >> 61) {
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v29 = v25 - (void)*v22;
            uint64_t v30 = v29 >> 2;
            if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
              uint64_t v30 = v28 + 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v30;
            }
            if (v31) {
              uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 264, v31);
            }
            else {
              uint64_t v32 = 0;
            }
            uint64_t v33 = (uint64_t *)&v32[8 * v28];
            *uint64_t v33 = v24;
            uint64_t v27 = v33 + 1;
            uint64_t v35 = (char *)*((void *)this + 31);
            BOOL v34 = (char *)*((void *)this + 32);
            if (v34 != v35)
            {
              do
              {
                uint64_t v36 = *((void *)v34 - 1);
                v34 -= 8;
                *--uint64_t v33 = v36;
              }
              while (v34 != v35);
              BOOL v34 = *v22;
            }
            *((void *)this + 31) = v33;
            *((void *)this + 32) = v27;
            *((void *)this + 33) = &v32[8 * v31];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *BOOL v26 = Symbol;
            uint64_t v27 = v26 + 1;
          }
          *((void *)this + 32) = v27;
        }
        v19 += 360;
        if (v19 == v21) {
          break;
        }
      }
    }
  }
LABEL_2:
  uint64_t v39 = (void **)&v44;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](&v39);
  uint64_t v39 = (void **)&v47;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](&v39);
  uint64_t v39 = (void **)&v50;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100](&v39);
  return v2 == 0;
}

void sub_21122F220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  a10 = v16 - 160;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v16 - 136;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v16 - 112;
  std::vector<ZinMirUnitSymbolInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SymbolInfoAndSection>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v11 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v11 + 1) > 0xB60B60B60B60B6) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x5B05B05B05B05BLL) {
      unint64_t v14 = 0xB60B60B60B60B6;
    }
    else {
      unint64_t v14 = v13;
    }
    v19[4] = v4;
    long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolInfoAndSection>>(v4, v14);
    uint64_t v16 = &v15[360 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[360 * v17];
    *(void *)uint64_t v16 = *(void *)a2;
    long long v18 = *(_OWORD *)(a2 + 8);
    *((void *)v16 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v16 + 8) = v18;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    memcpy(v16 + 32, (const void *)(a2 + 32), 0x13DuLL);
    *((void *)v16 + 44) = *(void *)(a2 + 352);
    _OWORD v19[2] = v16 + 360;
    std::vector<SymbolInfoAndSection>::__swap_out_circular_buffer(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = std::__split_buffer<SymbolInfoAndSection>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t result = (uint64_t)memcpy((void *)(v7 + 32), (const void *)(a2 + 32), 0x13DuLL);
    *(void *)(v7 + 352) = *(void *)(a2 + 352);
    uint64_t v10 = v7 + 360;
    a1[1] = v7 + 360;
  }
  a1[1] = v10;
  return result;
}

void sub_21122F408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SymbolInfoAndSection>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(ZinIrFactoryJIT *this)
{
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (!ZinSerial::DeserializeMirUnitBasicBlocks((char *)this + 160, &v46))
  {
    if (v47 == v46)
    {
      BOOL v10 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v10) {
        ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(v10, v11, v12, v13, v14, v15, v16, v17);
      }
    }
    else
    {
      uint64_t v4 = *(void *)(*((void *)this + 1) + 1000);
      uint64_t v5 = *(void *)(*(void *)v4 + 32);
      *(void *)(v5 + 8) = *(void *)(v46 + 8);
      unint64_t v6 = (char **)((char *)this + 272);
      long long v8 = (void *)*((void *)this + 35);
      unint64_t v7 = *((void *)this + 36);
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v18 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v18 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v7 - (void)*v6;
        uint64_t v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 288, v21);
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = &v22[8 * v18];
        uint64_t v24 = &v22[8 * v21];
        *(void *)uint64_t v23 = v5;
        uint64_t v9 = v23 + 8;
        BOOL v26 = (char *)*((void *)this + 34);
        unint64_t v25 = (char *)*((void *)this + 35);
        if (v25 != v26)
        {
          do
          {
            uint64_t v27 = *((void *)v25 - 1);
            v25 -= 8;
            *((void *)v23 - 1) = v27;
            v23 -= 8;
          }
          while (v25 != v26);
          unint64_t v25 = *v6;
        }
        *((void *)this + 34) = v23;
        *((void *)this + 35) = v9;
        *((void *)this + 36) = v24;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *long long v8 = v5;
        uint64_t v9 = v8 + 1;
      }
      *((void *)this + 35) = v9;
      uint64_t v29 = v46;
      uint64_t v28 = v47;
      if (0xCCCCCCCCCCCCCCCDLL * ((v47 - v46) >> 3) >= 2) {
        ZinIrControlFlowGraph::CreateBasicBlock<>(v4);
      }
      if (v47 == v46)
      {
        uint64_t v2 = 1;
        goto LABEL_3;
      }
      unint64_t v30 = 0;
      while (1)
      {
        uint64_t v31 = v29 + 40 * v30;
        uint64_t v32 = *(void *)(v31 + 16);
        uint64_t v33 = *(void *)(v31 + 24);
        if (v32 != v33) {
          break;
        }
LABEL_33:
        ++v30;
        uint64_t v2 = 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((v28 - v29) >> 3) <= v30) {
          goto LABEL_3;
        }
      }
      BOOL v34 = *(uint64_t **)&(*v6)[8 * v30];
      while (1)
      {
        unint64_t v35 = *(void *)(v32 + 8);
        uint64_t v36 = *((void *)this + 34);
        if (v35 >= (*((void *)this + 35) - v36) >> 3) {
          break;
        }
        uint64_t v37 = *(uint64_t **)(v36 + 8 * v35);
        if ((ZinIrControlFlowGraph::AddEdge(v4, v37, v34, *(_DWORD *)v32) & 1) == 0)
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(v37, v34);
          }
          goto LABEL_2;
        }
        v32 += 16;
        if (v32 == v33)
        {
          uint64_t v29 = v46;
          uint64_t v28 = v47;
          goto LABEL_33;
        }
      }
      BOOL v38 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v38) {
        ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(v38, v39, v40, v41, v42, v43, v44, v45);
      }
    }
  }
LABEL_2:
  uint64_t v2 = 0;
LABEL_3:
  uint64_t v49 = (void **)&v46;
  std::vector<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::__destroy_vector::operator()[abi:ne180100](&v49);
  return v2;
}

void sub_21122F7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<ZinMirRemoveSingleChannelEwOpCopy::EwCopyRemovalCandidate>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::ParseUnits(uint64_t a1, void *a2)
{
  Hal = ZinIrTarget::GetHal(*(uint64_t **)(a1 + 8), *(ZinIrTarget **)(*(void *)(a1 + 8) + 160));
  uint64_t v5 = (const ZinIrHalParameters *)(*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  memset(v26, 0, sizeof(v26));
  int v27 = 1065353216;
  memset(v28, 0, sizeof(v28));
  int v29 = 1065353216;
  memset(v30, 0, sizeof(v30));
  int v31 = 1065353216;
  unsigned int v25 = 0;
  ZinSerial::DeserializeNumberOfOrderedLayers((uint64_t *)(a1 + 160), &v25);
  if (!v25)
  {
LABEL_8:
    uint64_t v8 = 1;
    goto LABEL_28;
  }
  int v6 = 0;
  while (1)
  {
    uint64_t v24 = 0;
    if (ZinCreateMirUnit(v5, (ZinSerial::Deserializer *)(a1 + 160), &v24, *(ZinIrNetworkStatus **)(a1 + 32))|| ((*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v24 + 32))(v24, v26) & 1) == 0)
    {
      break;
    }
    std::deque<std::shared_ptr<ZinMirUnit>>::emplace_back<std::unique_ptr<ZinMirUnit>>(a2, &v24);
    uint64_t v7 = v24;
    uint64_t v24 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    if (++v6 >= v25) {
      goto LABEL_8;
    }
  }
  uint64_t v9 = (void **)a2[1];
  BOOL v10 = (void **)a2[2];
  if (v10 == v9)
  {
    uint64_t v11 = a2 + 5;
    BOOL v10 = (void **)a2[1];
  }
  else
  {
    uint64_t v11 = a2 + 5;
    unint64_t v12 = a2[4];
    uint64_t v13 = &v9[v12 >> 8];
    uint64_t v14 = (uint64_t)*v13;
    uint64_t v15 = (uint64_t)*v13 + 16 * v12;
    uint64_t v16 = *(uint64_t *)((char *)v9 + (((a2[5] + v12) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a2 + 40) + v12);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
        if (v17)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          uint64_t v14 = (uint64_t)*v13;
        }
        v15 += 16;
        if (v15 - v14 == 4096)
        {
          uint64_t v18 = (uint64_t)v13[1];
          ++v13;
          uint64_t v14 = v18;
          uint64_t v15 = v18;
        }
      }
      while (v15 != v16);
      uint64_t v9 = (void **)a2[1];
      BOOL v10 = (void **)a2[2];
    }
  }
  *uint64_t v11 = 0;
  unint64_t v19 = (char *)v10 - (char *)v9;
  if ((unint64_t)((char *)v10 - (char *)v9) >= 0x11)
  {
    do
    {
      operator delete(*v9);
      uint64_t v20 = a2[2];
      uint64_t v9 = (void **)(a2[1] + 8);
      a2[1] = v9;
      unint64_t v19 = v20 - (void)v9;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    uint64_t v21 = 128;
    goto LABEL_24;
  }
  if (v19 >> 3 == 2)
  {
    uint64_t v21 = 256;
LABEL_24:
    a2[4] = v21;
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v8 = 0;
LABEL_28:
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v30);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v26);
  return v8;
}

void sub_21122FA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ZinMirUnitValidationContext::~ZinMirUnitValidationContext((ZinMirUnitValidationContext *)va);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::shared_ptr<ZinMirUnit>>::emplace_back<std::unique_ptr<ZinMirUnit>>(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 32 * (v5 - v4) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::shared_ptr<ZinMirUnit>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (uint64_t *)(*(void *)(v4 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7);
  }
  std::shared_ptr<ZinMirUnit>::shared_ptr[abi:ne180100]<ZinMirUnit,std::default_delete<ZinMirUnit>,void>(v8, a2);
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5] + 1;
  a1[5] = v10;
  unint64_t v11 = v9 + v10;
  uint64_t v12 = a1[1];
  uint64_t v13 = (void *)(v12 + 8 * (v11 >> 8));
  uint64_t v14 = *v13 + 16 * v11;
  if (a1[2] == v12) {
    uint64_t v14 = 0;
  }
  if (v14 == *v13) {
    uint64_t v14 = *(v13 - 1) + 4096;
  }
  return v14 - 16;
}

void ZinMirUnitValidationContext::~ZinMirUnitValidationContext(ZinMirUnitValidationContext *this)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 40);

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)this);
}

uint64_t ZinIrFactoryJIT::UpdateLiveInAndAddToOrderedList(void *a1, ZinDynamicOffsetCustomBarCmd **a2)
{
  ZinIrControlFlowGraph::GetLiveInLayers(*(ZinIrControlFlowGraph ***)(a1[1] + 1000), (uint64_t)&v31);
  uint64_t v4 = v31;
  if (v31 == v32)
  {
LABEL_23:
    uint64_t v15 = 0;
    goto LABEL_41;
  }
  while (1)
  {
    uint64_t DynamicOffsetInfo = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*a2);
    uint64_t v6 = v4[4];
    uint64_t v7 = DynamicOffsetInfo[23];
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = DynamicOffsetInfo[23];
    }
    else {
      uint64_t v8 = *((void *)DynamicOffsetInfo + 1);
    }
    uint64_t v9 = *(unsigned __int8 *)(v6 + 47);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(v6 + 32);
    }
    if (v8 != v9) {
      goto LABEL_17;
    }
    unint64_t v11 = v10 >= 0 ? (unsigned __int8 *)(v6 + 24) : *(unsigned __int8 **)(v6 + 24);
    if ((v7 & 0x80) != 0) {
      break;
    }
    if (!DynamicOffsetInfo[23]) {
      goto LABEL_24;
    }
    while (*DynamicOffsetInfo == *v11)
    {
      ++DynamicOffsetInfo;
      ++v11;
      if (!--v7) {
        goto LABEL_24;
      }
    }
LABEL_17:
    uint64_t v12 = (void *)v4[1];
    if (v12)
    {
      do
      {
        uint64_t v13 = (void **)v12;
        uint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        uint64_t v13 = (void **)v4[2];
        BOOL v14 = *v13 == v4;
        uint64_t v4 = v13;
      }
      while (!v14);
    }
    uint64_t v4 = v13;
    if (v13 == v32) {
      goto LABEL_23;
    }
  }
  if (memcmp(*(const void **)DynamicOffsetInfo, v11, *((void *)DynamicOffsetInfo + 1))) {
    goto LABEL_17;
  }
LABEL_24:
  *(void *)(v6 + 48) = *((void *)*a2 + 9);
  unint64_t v16 = a1[19];
  uint64_t v17 = (void *)a1[18];
  if ((unint64_t)v17 >= v16)
  {
    uint64_t v19 = a1[17];
    uint64_t v20 = ((uint64_t)v17 - v19) >> 3;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v16 - v19;
    uint64_t v22 = v21 >> 2;
    if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
      uint64_t v22 = v20 + 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 19), v23);
      uint64_t v6 = v4[4];
    }
    else
    {
      uint64_t v24 = 0;
    }
    unsigned int v25 = &v24[8 * v20];
    BOOL v26 = &v24[8 * v23];
    *(void *)unsigned int v25 = v6;
    uint64_t v18 = v25 + 8;
    uint64_t v28 = (char *)a1[17];
    int v27 = (char *)a1[18];
    if (v27 != v28)
    {
      do
      {
        uint64_t v29 = *((void *)v27 - 1);
        v27 -= 8;
        *((void *)v25 - 1) = v29;
        v25 -= 8;
      }
      while (v27 != v28);
      int v27 = (char *)a1[17];
    }
    a1[17] = v25;
    a1[18] = v18;
    a1[19] = v26;
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    void *v17 = v6;
    uint64_t v18 = v17 + 1;
  }
  a1[18] = v18;
  uint64_t v15 = 1;
LABEL_41:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v31, v32[0]);
  return v15;
}

void sub_21122FD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t ZinIrFactoryJIT::ConvertMirUnitToLayerAndAddToGraph(uint64_t a1, unint64_t *a2, uint64_t *a3, void *a4)
{
  v24[3] = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  unint64_t v23 = (void ***)a2;
  uint64_t v8 = *a3;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)(*a3 + 64), (unint64_t **)&v23);
  int v10 = (uint64_t **)(v8 + 104);
  if (v9) {
    int v10 = v9 + 3;
  }
  unint64_t v11 = (ZinDynamicOffsetCustomBarCmd ***)*v10;
  uint64_t v12 = (ZinDynamicOffsetCustomBarCmd ***)v10[1];
  while (v11 != v12)
  {
    uint64_t DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(**v11);
    BOOL v14 = v21;
    if ((unint64_t)v21 >= v22)
    {
      unint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v20, DynamicOffsetInfo);
    }
    else
    {
      if (*(char *)(DynamicOffsetInfo + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)DynamicOffsetInfo, *(void *)(DynamicOffsetInfo + 8));
      }
      else
      {
        long long v15 = *(_OWORD *)DynamicOffsetInfo;
        v21->__r_.__value_.__r.__words[2] = *(void *)(DynamicOffsetInfo + 16);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      }
      unint64_t v16 = v14 + 1;
    }
    uint64_t v21 = v16;
    ++v11;
  }
  memset(v24, 0, 24);
  int v17 = ZinIrFactoryBase::InputReady(a1, &v20, (uint64_t)v24);
  unint64_t v23 = (void ***)v24;
  std::vector<std::unique_ptr<ZinIrUnit>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (!v17)
  {
    ZinIrNetworkStatus::SetError(*(CFArrayRef **)(a1 + 32), @"InvalidAOTSerializationData");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)*a2);
      ZinIrFactoryJIT::ConvertMirUnitToLayerAndAddToGraph();
    }
    goto LABEL_19;
  }
  if (!ZinIrFactoryJIT::AddInputReadyOpLayer(a1, (ZinDynamicOffsetCustomBarCmd **)a2, *a3, a4))
  {
    ZinIrNetworkStatus::SetError(*(CFArrayRef **)(a1 + 32), @"InvalidUnit");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)*a2);
      ZinIrFactoryJIT::ConvertMirUnitToLayerAndAddToGraph();
    }
LABEL_19:
    uint64_t v18 = 0;
    goto LABEL_20;
  }
  uint64_t v18 = 1;
LABEL_20:
  unint64_t v23 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  return v18;
}

void sub_21122FF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

BOOL ZinIrFactoryJIT::AddInputReadyOpLayer(uint64_t a1, ZinDynamicOffsetCustomBarCmd **a2, uint64_t a3, void *a4)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 8) + 1000) + 16) != 1) {
    ZinAssertImpl("ZinIrFactoryJIT does not support CFG with more than one basic block.");
  }
  unint64_t v6 = *((void *)*a2 + 16);
  uint64_t v7 = *(uint64_t **)(a1 + 272);
  if (v6 >= (uint64_t)(*(void *)(a1 + 280) - (void)v7) >> 3)
  {
    uint64_t DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*a2);
    if (*(char *)(DynamicOffsetInfo + 23) >= 0) {
      uint64_t v109 = (const char *)DynamicOffsetInfo;
    }
    else {
      uint64_t v109 = *(const char **)DynamicOffsetInfo;
    }
    ZinAssertImpl("Error: Basic block ID, %lu, for unit, %s, is out of bounds.", v6, v109);
  }
  Hal = (uint64_t **)ZinIrTarget::GetHal(v7, (ZinIrTarget *)v7[v6]);
  uint64_t v10 = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*a2);
  if (*(char *)(v10 + 23) >= 0) {
    unint64_t v11 = (const char *)v10;
  }
  else {
    unint64_t v11 = *(const char **)v10;
  }
  CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v11, 0x8000100u);
  if (v12)
  {
    CFStringRef v13 = v12;
    CFTypeID v14 = CFGetTypeID(v12);
    if (v14 == CFStringGetTypeID()) {
      CFStringRef v15 = v13;
    }
    else {
      CFStringRef v15 = 0;
    }
  }
  else
  {
    CFStringRef v15 = 0;
  }
  unint64_t v16 = (CFArrayRef *)ZinIrNetworkStatus::AddUnit(*(ZinIrNetworkStatus **)(a1 + 32), v15);
  CFRelease(v15);
  uint64_t v134 = 0;
  int v135 = 0;
  int v136 = 0;
  *(void *)&long long v129 = a2;
  int v17 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((void *)(a3 + 64), (unint64_t **)&v129);
  uint64_t v112 = a4;
  long long v113 = a2;
  uint64_t v18 = (uint64_t **)(a3 + 104);
  if (v17) {
    uint64_t v18 = v17 + 3;
  }
  uint64_t v20 = (ZinDynamicOffsetCustomBarCmd ***)*v18;
  uint64_t v19 = (ZinDynamicOffsetCustomBarCmd ***)v18[1];
  if (*v18 != (uint64_t *)v19)
  {
    do
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 56);
      unint64_t v22 = (void **)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(**v20);
      ZinTensorMap::GetTensor(v21, v22, (uint64_t)&v129);
      int v23 = v130;
      if ((_BYTE)v130)
      {
        uint64_t v24 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)&v129 + 1));
        uint64_t v25 = v129;
        if (!v24) {
          uint64_t v25 = 0;
        }
        uint64_t v26 = *(void *)(v25 + 96);
        int v27 = v135;
        if (v135 >= v136)
        {
          uint64_t v29 = (v135 - v134) >> 3;
          if ((unint64_t)(v29 + 1) >> 61) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v30 = (v136 - v134) >> 2;
          if (v30 <= v29 + 1) {
            unint64_t v30 = v29 + 1;
          }
          if ((unint64_t)(v136 - v134) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31) {
            uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v136, v31);
          }
          else {
            uint64_t v32 = 0;
          }
          uint64_t v33 = &v32[8 * v29];
          *(void *)uint64_t v33 = v26;
          uint64_t v28 = v33 + 8;
          unint64_t v35 = v134;
          BOOL v34 = v135;
          if (v135 != v134)
          {
            do
            {
              uint64_t v36 = *((void *)v34 - 1);
              v34 -= 8;
              *((void *)v33 - 1) = v36;
              v33 -= 8;
            }
            while (v34 != v35);
            BOOL v34 = v134;
          }
          uint64_t v134 = v33;
          int v135 = v28;
          int v136 = &v32[8 * v31];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(void *)int v135 = v26;
          uint64_t v28 = v27 + 8;
        }
        int v135 = v28;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
      }
      else
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinIrFactoryJIT::AddInputReadyOpLayer(&buf, v133);
        }
        ZinIrUnitStatus::SetError(v16, @"InvalidBottomName");
      }
      if ((_BYTE)v130 && *((void *)&v129 + 1)) {
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
      }
      if (!v23) {
        goto LABEL_61;
      }
      ++v20;
    }
    while (v20 != v19);
  }
  uint64_t v37 = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*v113);
  if (!ZinOutputShapes::Contains(v112, v37))
  {
    BOOL v48 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v48) {
      ZinIrFactoryJIT::AddInputReadyOpLayer(v48, v49, v50, v51, v52, v53, v54, v55);
    }
LABEL_61:
    BOOL v56 = 0;
    goto LABEL_118;
  }
  BOOL v38 = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*v113);
  Dimensions = ZinOutputShapes::GetDimensions(v112, v38);
  long long v40 = *(_OWORD *)Dimensions;
  long long v41 = *((_OWORD *)Dimensions + 1);
  uint64_t v131 = *((void *)Dimensions + 4);
  long long v129 = v40;
  long long v130 = v41;
  if (ZinMirUnit::IsOutput(*v113))
  {
    uint64_t v42 = (uint64_t *)(*(uint64_t (**)(void, void, void))(**(void **)v134 + 40))(*(void *)v134, 0, 0);
    uint64_t v44 = *v42;
    uint64_t v43 = v42[1];
    if (v43) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
    }
    if (*(char *)(v44 + 47) >= 0) {
      size_t v45 = *(unsigned __int8 *)(v44 + 47);
    }
    else {
      size_t v45 = *(void *)(v44 + 32);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v45 + 4);
    if (SHIBYTE(v116) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v45)
    {
      if (*(char *)(v44 + 47) >= 0) {
        uint64_t v47 = (const void *)(v44 + 24);
      }
      else {
        uint64_t v47 = *(const void **)(v44 + 24);
      }
      memmove(p_p, v47, v45);
    }
    strcpy((char *)p_p + v45, "/src");
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    uint64_t v126 = 0;
    LODWORD(v121) = 0;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    uint64_t v122 = 0;
    LODWORD(v125) = 0;
    ZinIrTensor::CreateTensor();
  }
  uint64_t v57 = (void **)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(*v113);
  int v58 = ZinMirUnit::Format(*v113);
  long long __p = 0;
  uint64_t v115 = 0;
  ZinIrFactoryBase::AddTensorToMap((void *)a1, v57, v58, &v121);
  unint64_t v59 = v121;
  uint64_t v60 = v122;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  if (v59)
  {
    uint64_t v110 = (std::__shared_weak_count *)v59;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    unint64_t v120 = 0;
    uint64_t v69 = v134;
    for (uint64_t i = v135; v69 != i; v69 += 8)
    {
      uint64_t v71 = (*(uint64_t (**)(void, void, void))(**(void **)v69 + 32))(*(void *)v69, 0, 0);
      uint64_t v72 = v71 + 48;
      uint64_t v73 = v119;
      if (v119 >= v120)
      {
        unint64_t v77 = v118;
        unint64_t v78 = 0xCCCCCCCCCCCCCCCDLL * ((v119 - (unsigned char *)v118) >> 3);
        unint64_t v79 = v78 + 1;
        if (v78 + 1 > 0x666666666666666) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((v120 - (unsigned char *)v118) >> 3) > v79) {
          unint64_t v79 = 0x999999999999999ALL * ((v120 - (unsigned char *)v118) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v120 - (unsigned char *)v118) >> 3) >= 0x333333333333333) {
          unint64_t v80 = 0x666666666666666;
        }
        else {
          unint64_t v80 = v79;
        }
        if (v80)
        {
          BOOL v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v120, v80);
          unint64_t v77 = v118;
          uint64_t v73 = v119;
        }
        else
        {
          BOOL v81 = 0;
        }
        uint64_t v82 = &v81[8 * ((v119 - (unsigned char *)v118) >> 3)];
        long long v83 = *(_OWORD *)v72;
        long long v84 = *(_OWORD *)(v72 + 16);
        *((void *)v82 + 4) = *(void *)(v72 + 32);
        *(_OWORD *)uint64_t v82 = v83;
        *((_OWORD *)v82 + 1) = v84;
        if (v73 == v77)
        {
          uint64_t v88 = &v81[40 * v78];
        }
        else
        {
          uint64_t v85 = &v81[40 * v78];
          do
          {
            long long v86 = *(_OWORD *)((char *)v73 - 40);
            long long v87 = *(_OWORD *)((char *)v73 - 24);
            uint64_t v88 = v85 - 40;
            *((void *)v85 - 1) = *((void *)v73 - 1);
            *(_OWORD *)(v85 - 24) = v87;
            *(_OWORD *)(v85 - 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v86;
            uint64_t v73 = (_OWORD *)((char *)v73 - 40);
            v85 -= 40;
          }
          while (v73 != v77);
        }
        uint64_t v76 = v82 + 40;
        uint64_t v118 = v88;
        uint64_t v119 = v82 + 40;
        unint64_t v120 = &v81[40 * v80];
        if (v77) {
          operator delete(v77);
        }
      }
      else
      {
        long long v74 = *(_OWORD *)v72;
        long long v75 = *(_OWORD *)(v71 + 64);
        *((void *)v119 + 4) = *(void *)(v71 + 80);
        _OWORD *v73 = v74;
        v73[1] = v75;
        uint64_t v76 = (char *)v73 + 40;
      }
      uint64_t v119 = v76;
    }
    uint64_t v121 = &v118;
    uint64_t v122 = v110;
    uint64_t v123 = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v124 = a1 + 200;
    uint64_t v125 = a1 + 224;
    uint64_t v89 = (ZinIrOpLayer *)(*(uint64_t (**)(ZinDynamicOffsetCustomBarCmd *, void ***))(*(void *)*v113 + 24))(*v113, &v121);
    uint64_t v90 = (uint64_t)v89;
    BOOL v56 = v89 != 0;
    if (v89)
    {
      *((void *)v89 + 6) = *((void *)*v113 + 9);
      uint64_t v115 = 0;
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      long long __p = &unk_26C359A20;
      ZinIrOpLayerGraph::AddNode(Hal, v89, (ZinIrOpLayer ***)&__p);
      long long __p = &unk_26C359A08;
      if (v115)
      {
        uint64_t v116 = v115;
        operator delete(v115);
      }
      int v91 = (uint64_t *)v134;
      uint64_t v92 = (uint64_t *)v135;
      while (v91 != v92)
        ZinIrOpLayerGraph::AddEdge((uint64_t)Hal, *v91++, v90, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      unint64_t v93 = *(void *)(a1 + 152);
      uint64_t v94 = *(uint64_t **)(a1 + 144);
      if ((unint64_t)v94 >= v93)
      {
        uint64_t v96 = *(void *)(a1 + 136);
        uint64_t v97 = ((uint64_t)v94 - v96) >> 3;
        if ((unint64_t)(v97 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v98 = v93 - v96;
        uint64_t v99 = v98 >> 2;
        if (v98 >> 2 <= (unint64_t)(v97 + 1)) {
          uint64_t v99 = v97 + 1;
        }
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v100 = v99;
        }
        if (v100) {
          unint64_t v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 152, v100);
        }
        else {
          unint64_t v101 = 0;
        }
        char v102 = (uint64_t *)&v101[8 * v97];
        unint64_t v103 = &v101[8 * v100];
        uint64_t *v102 = v90;
        uint64_t v95 = v102 + 1;
        std::string v105 = *(char **)(a1 + 136);
        uint64_t v104 = *(char **)(a1 + 144);
        if (v104 != v105)
        {
          do
          {
            uint64_t v106 = *((void *)v104 - 1);
            v104 -= 8;
            *--char v102 = v106;
          }
          while (v104 != v105);
          uint64_t v104 = *(char **)(a1 + 136);
        }
        *(void *)(a1 + 136) = v102;
        *(void *)(a1 + 144) = v95;
        *(void *)(a1 + 152) = v103;
        if (v104) {
          operator delete(v104);
        }
      }
      else
      {
        uint64_t *v94 = v90;
        uint64_t v95 = v94 + 1;
      }
      *(void *)(a1 + 144) = v95;
    }
    if (v123) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v123);
    }
    if (v118)
    {
      uint64_t v119 = (char *)v118;
      operator delete(v118);
    }
  }
  else
  {
    BOOL v61 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v61) {
      ZinIrFactoryJIT::AddInputReadyOpLayer(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    BOOL v56 = 0;
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
LABEL_118:
  if (v134)
  {
    int v135 = v134;
    operator delete(v134);
  }
  return v56;
}

void sub_2112308F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, void *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  uint64_t v37 = *(void **)(v35 - 120);
  if (v37)
  {
    *(void *)(v35 - 112) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrFactoryJIT::CalculateJITLiveOutStrides(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = v3 + 8;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < 1;
    if (v7 >= 1) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 + 8 || *(int *)(v6 + 32) > 1) {
    return 0;
  }
  uint64_t v10 = 1;
  v32.i32[0] = 1;
  unint64_t v11 = std::map<ZinIrDimension,unsigned long>::at(v3, v32.i32);
  Hal = ZinIrTarget::GetHal(*(uint64_t **)(a1 + 8), *(ZinIrTarget **)(*(void *)(a1 + 8) + 160));
  uint64_t v31 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  uint64_t v13 = *v11;
  uint64_t v14 = v11[1];
  if (*v11 != v14)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 96);
      if ((void **)(v15 + 8) == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v15, (void **)v13))return 0; {
      uint64_t v16 = std::map<std::string,BOOL>::at(*(void *)(a1 + 96), (void **)v13);
      }
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      long long __p = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, *(const void **)v16, *(void *)(v16 + 8), (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 2);
      int v41 = *(_DWORD *)(v16 + 24);
      DimensionOrderHint::DimensionOrderHint(&v32, 2);
      int v17 = (int *)__p;
      if (v32.i64[1] - v32.i64[0] != v39 - (unsigned char *)__p) {
        break;
      }
      if (v32.i64[0] != v32.i64[1])
      {
        uint64_t v18 = v32.i64[0] + 4;
        do
        {
          int v19 = *v17++;
          BOOL v20 = *(_DWORD *)(v18 - 4) == v19;
          BOOL v21 = *(_DWORD *)(v18 - 4) != v19 || v18 == v32.i64[1];
          v18 += 4;
        }
        while (!v21);
LABEL_23:
        if (!v32.i64[0]) {
          goto LABEL_25;
        }
LABEL_24:
        v32.i64[1] = v32.i64[0];
        operator delete((void *)v32.i64[0]);
        goto LABEL_25;
      }
      BOOL v20 = 1;
      if (v32.i64[0]) {
        goto LABEL_24;
      }
LABEL_25:
      if (v20)
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
      }
      else
      {
        if (!ZinOutputShapes::Contains(a2, (unsigned __int8 *)(v13 + 24)))
        {
          ZinIrNetworkStatus::SetError(*(CFArrayRef **)(a1 + 32), @"UnsupportedJITTransform");
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
            ZinIrFactoryJIT::CalculateJITLiveOutStrides(&buf, v37);
          }
          char v29 = 0;
          goto LABEL_33;
        }
        Dimensions = ZinOutputShapes::GetDimensions(a2, (unsigned __int8 *)(v13 + 24));
        ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)Dimensions, *(_DWORD *)(v13 + 48), 2, (uint64_t)&__p, *(void *)(v31 + 528), *(void *)(v13 + 144), 1, &v32);
        uint64_t v23 = v32.i64[1];
        uint64_t v24 = v32.i64[0];
        uint64_t v22 = v33;
        uint64_t v25 = v34;
        uint64_t v26 = v35;
      }
      v32.i64[0] = v13 + 24;
      uint64_t v28 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 104), (void **)(v13 + 24), (uint64_t)&std::piecewise_construct, (long long **)&v32);
      v28[7] = v24;
      v28[8] = v23;
      v28[9] = v22;
      v28[10] = v25;
      char v29 = 1;
      v28[11] = v26;
LABEL_33:
      if (__p)
      {
        uint64_t v39 = __p;
        operator delete(__p);
      }
      if ((v29 & 1) == 0) {
        return 0;
      }
      v13 += 248;
      if (v13 == v14) {
        return 1;
      }
    }
    BOOL v20 = 0;
    goto LABEL_23;
  }
  return v10;
}

void sub_211230CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<ZinMirUnitGraph>()
{
}

void sub_211230D94(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B2C404A64EC4FLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::CreateMirUnitGraph(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    memset(v31, 0, sizeof(v31));
    int v32 = 1065353216;
    unint64_t v5 = a2[4];
    unint64_t v6 = v5 >> 8;
    uint64_t v7 = a2[1];
    uint64_t v8 = a2[2];
    if (v8 == v7)
    {
      unint64_t v11 = a2 + 5;
    }
    else
    {
      uint64_t v9 = (void *)(v7 + 8 * v6);
      uint64_t v10 = *v9 + 16 * v5;
      unint64_t v11 = a2 + 5;
      uint64_t v12 = *(void *)(v7 + (((a2[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((unsigned char *)a2 + 40) + v5);
      if (v10 != v12)
      {
        while (1)
        {
          uint64_t v13 = *(std::__shared_weak_count **)(v10 + 8);
          char v29 = *(ZinDynamicOffsetCustomBarCmd **)v10;
          unint64_t v30 = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!ZinMirUnitGraph::AddNode(a3, &v29)) {
            break;
          }
          uint64_t DynamicOffsetInfo = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo(v29);
          uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v31, DynamicOffsetInfo, (uint64_t)&std::piecewise_construct, (long long **)&DynamicOffsetInfo);
          uint64_t v16 = v29;
          uint64_t v15 = v30;
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v17 = (std::__shared_weak_count *)*((void *)v14 + 6);
          *((void *)v14 + 5) = v16;
          *((void *)v14 + 6) = v15;
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          v10 += 16;
          if (v10 - *v9 == 4096)
          {
            uint64_t v18 = v9[1];
            ++v9;
            uint64_t v10 = v18;
          }
          if (v10 == v12)
          {
            unint64_t v5 = a2[4];
            uint64_t v7 = a2[1];
            uint64_t v8 = a2[2];
            unint64_t v6 = v5 >> 8;
            goto LABEL_19;
          }
        }
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
LABEL_33:
        uint64_t v19 = 3;
        goto LABEL_34;
      }
    }
LABEL_19:
    if (v8 == v7
      || (BOOL v20 = (void *)(v7 + 8 * v6),
          BOOL v21 = (ZinMirL2Config::NE **)(*v20 + 16 * v5),
          uint64_t v22 = *(void *)(v7 + (((*v11 + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (*(unsigned char *)v11 + v5),
          v21 == (ZinMirL2Config::NE **)v22))
    {
      uint64_t v19 = 0;
    }
    else
    {
      do
      {
        uint64_t ChannelAssignment = ZinMirL2Config::NE::GetChannelAssignment(*v21);
        uint64_t v24 = *(unsigned __int8 **)ChannelAssignment;
        uint64_t v25 = *(unsigned __int8 **)(ChannelAssignment + 8);
        while (v24 != v25)
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long>>>::find<std::string>(v31, v24))goto LABEL_33; {
          char v29 = (ZinDynamicOffsetCustomBarCmd *)v24;
          }
          uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v31, v24, (uint64_t)&std::piecewise_construct, (long long **)&v29);
          if ((ZinMirUnitGraph::AddEdge(a3, (ZinDynamicOffsetCustomBarCmd **)v26 + 5, v21, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_33; {
          v24 += 24;
          }
        }
        v21 += 2;
        if ((ZinMirL2Config::NE **)((char *)v21 - *v20) == (ZinMirL2Config::NE **)4096)
        {
          int v27 = (ZinMirL2Config::NE **)v20[1];
          ++v20;
          BOOL v21 = v27;
        }
        uint64_t v19 = 0;
      }
      while (v21 != (ZinMirL2Config::NE **)v22);
    }
LABEL_34:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::~__hash_table((uint64_t)v31);
    return v19;
  }
  return 3;
}

void sub_211231000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::PopulateDependencyMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 296;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::clear(a1 + 296);
  unint64_t v6 = *(void **)(a2 + 16);
  if (v6)
  {
    while (2)
    {
      uint64_t v7 = (void *)v6[3];
      uint64_t v8 = (void *)v6[4];
      while (v7 != v8)
      {
        if ((*(unsigned int (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 32))(*v7, a3, v5)) {
          return 3;
        }
        ++v7;
      }
      unint64_t v6 = (void *)*v6;
      if (v6) {
        continue;
      }
      break;
    }
  }
  return 0;
}

unsigned __int8 *ZinIrFactoryJIT::AddOpLayers(void)::$_1::operator()@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = *(void *)result + 8;
  uint64_t v4 = **(void ***)result;
  if (v4 != (void *)v3)
  {
    do
    {
      uint64_t DynamicOffsetInfo = (unsigned __int8 *)ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)v4[4]);
      uint64_t result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, DynamicOffsetInfo, (uint64_t)DynamicOffsetInfo);
      unint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != (void *)v3);
  }
  return result;
}

void sub_21123116C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL ZinIrFactoryJIT::AddLiveOuts(ZinIrFactoryJIT *this)
{
  v26[4] = *MEMORY[0x263EF8340];
  if (!ZinIrLiveIOManager::ValidateMultiplanarLiveOutput(*((ZinIrLiveIOManager **)this + 2)))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinIrFactoryJIT::AddLiveOuts(result, v12, v13, v14, v15, v16, v17, v18);
    return 0;
  }
  if (!ZinIrLiveIOManager::PrepareLiveOutBinding(*((void *)this + 2), *((void *)this + 1), (uint64_t *)this + 3, *((CFArrayRef **)this + 4)))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinIrFactoryJIT::AddLiveOuts(result, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  uint64_t v2 = *(void **)(*((void *)this + 1) + 1000);
  v26[0] = &unk_26C386078;
  v26[1] = this;
  void v26[3] = v26;
  int v3 = ZinIrControlFlowGraph::TraverseForward(v2, (uint64_t)v26, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v26);
  if (!v3) {
    return 1;
  }
  BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinIrFactoryJIT::AddLiveOuts(result, v5, v6, v7, v8, v9, v10, v11);
    return 0;
  }
  return result;
}

void sub_211231298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrFactoryJIT::GetOrderedLayers(uint64_t a1, char *a2)
{
  uint64_t v4 = *(char **)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 144);
  uint64_t v2 = (char *)(a1 + 136);
  if ((char *)v3 == v4) {
    return 3;
  }
  if (v2 != a2) {
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(a2, v4, v3, (v3 - (uint64_t)v4) >> 3);
  }
  return 0;
}

uint64_t ZinIrFactoryJIT::GetConstTensorSymbols(ZinIrFactoryJIT *this)
{
  return (uint64_t)this + 248;
}

void ZinIrFactoryJIT::~ZinIrFactoryJIT(ZinIrFactoryJIT *this)
{
  ZinIrFactoryJIT::~ZinIrFactoryJIT(this);

  JUMPOUT(0x21667D3C0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(void *)this = &unk_26C348628;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::~__hash_table((uint64_t)this + 296);
  uint64_t v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    *((void *)this + 32) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)((char *)this + 224);
  std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 200);
  std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)this + 104, *((char **)this + 14));
  ZinIrFactoryBase::~ZinIrFactoryBase((ZinIrBindings **)this);
}

void std::vector<SymbolInfoAndSection>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<SymbolInfoAndSection>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<SymbolInfoAndSection>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = v2 - 352;
    do
    {
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      uint64_t v5 = v4 - 8;
      v4 -= 360;
    }
    while (v5 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<SymbolInfoAndSection>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>,std::reverse_iterator<SymbolInfoAndSection*>,std::reverse_iterator<SymbolInfoAndSection*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SymbolInfoAndSection>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB60B60B60B60B7) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(360 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>,std::reverse_iterator<SymbolInfoAndSection*>,std::reverse_iterator<SymbolInfoAndSection*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 360;
    do
    {
      uint64_t v10 = v7 - 360;
      *(void *)uint64_t v10 = *(void *)v9;
      long long v11 = *(_OWORD *)(v9 + 8);
      *(void *)(v10 + 24) = *(void *)(v9 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 8) = 0;
      memcpy((void *)(v7 - 328), (const void *)(v9 + 32), 0x13DuLL);
      *(void *)(v7 - 8) = *(void *)(v9 + 352);
      uint64_t v7 = *((void *)&v18 + 1) - 360;
      *((void *)&v18 + 1) -= 360;
      BOOL v12 = v9 == a5;
      v9 -= 360;
    }
    while (!v12);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<SymbolInfoAndSection>,std::reverse_iterator<SymbolInfoAndSection*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 360;
  }
}

uint64_t std::__split_buffer<SymbolInfoAndSection>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<SymbolInfoAndSection>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 360;
      *(void *)(a1 + 16) = v2 - 360;
      if (*(char *)(v2 - 329) < 0)
      {
        operator delete(*(void **)(v2 - 352));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::unordered_map<std::string,ZinTensorDimensions>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ZinTensorDimensions> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_211231700(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ZinTensorDimensions> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__construct_node_hash<std::pair<std::string const,ZinTensorDimensions> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_211231974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PerfTracerCategory>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<std::string,ZinTensorDimensions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ZinTensorDimensions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ZinTensorDimensions>>>::__construct_node_hash<std::pair<std::string const,ZinTensorDimensions> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v8 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_OWORD *)(a3 + 24);
  __n128 result = *(__n128 *)(a3 + 40);
  *(__n128 *)(v8 + 56) = result;
  *((void *)v8 + 9) = *(void *)(a3 + 56);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_211231A38(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PerfTracerCategory>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<ZinMirUnit> const,std::vector<std::shared_ptr<ZinMirUnit>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::deque<std::shared_ptr<ZinMirUnit>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      BOOL v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_211231E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<ZinMirUnit>::shared_ptr[abi:ne180100]<ZinMirUnit,std::default_delete<ZinMirUnit>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

uint64_t std::__shared_ptr_pointer<ZinMirUnit  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ZinMirUnit  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::default_delete<ZinMirUnitGraph>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::__unordered_map_hasher<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>,std::equal_to<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,std::hash<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinBondedAne::ZinDeploymentComponent<std::vector<ZinIrOpLayer *>>>,long>>>::~__hash_table(a2 + 160);
    if (*(char *)(a2 + 151) < 0) {
      operator delete(*(void **)(a2 + 128));
    }
    BOOL v3 = *(void **)(a2 + 104);
    if (v3)
    {
      *(void *)(a2 + 112) = v3;
      operator delete(v3);
    }
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(a2 + 64);
    std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table(a2 + 24);
    std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy(a2, *(void **)(a2 + 8));
    JUMPOUT(0x21667D3C0);
  }
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::remove(a1, a2, (uint64_t)&__p);
  BOOL v3 = (void **)__p;
  long long __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,PerfTracerCategory>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C386078;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C386078;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = (void ***)*a3;
  if (*(_DWORD *)(*(void *)(*a3 + 64) + 8) != 31) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void **)(((uint64_t (*)(void, void, void))(*v3)[4])(*a3, 0, 0) + 24);
  if ((void **)(v5 + 112) == std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v5 + 104, v6))return 3; {
  uint64_t v7 = (const ZinTensorDimensions *)std::map<std::string,BOOL>::at(v5 + 104, v6);
  }
  unint64_t v8 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(**v3[11] + 32))(*v3[11], 0, 0);
  if (ZinIrTensor::SetCustomStrides(v8, v7)) {
    return 3;
  }
  unint64_t v9 = (ZinIrTensor *)((uint64_t (*)(void ***, void, void))(*v3)[4])(v3, 0, 0);
  if (ZinIrTensor::SetCustomStrides(v9, v7)) {
    return 3;
  }
  Hal = ZinIrTarget::GetHal(*(uint64_t **)(v5 + 8), *(ZinIrTarget **)(*(void *)(v5 + 8) + 160));
  uint64_t v13 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  uint64_t v14 = *(void *)(v5 + 8) + 176;
  v15[0] = v13;
  v15[1] = v14;
  int v19 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long __p = 0;
  v20[0] = v15;
  v20[1] = 0;
  uint64_t v21 = 0;
  uint64_t v10 = ((uint64_t (*)(void ***, uint64_t, void *))(*v3)[21])(v3, v4, v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  return v10;
}

void sub_211232318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<ZinIrFactoryJIT::AddLiveOuts(void)::$_0,std::allocator<ZinIrFactoryJIT::AddLiveOuts(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ZinMirUnit>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ZinMirUnit>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_2112326E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_211232784(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ZinMirUnit>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ZinMirUnit>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::__unordered_map_hasher<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::hash<std::shared_ptr<ZinMirUnit>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,true>,std::__unordered_map_equal<std::shared_ptr<ZinMirUnit>,std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>,std::equal_to<std::shared_ptr<ZinMirUnit>>,std::hash<std::shared_ptr<ZinMirUnit>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<ZinMirUnit>,std::vector<std::shared_ptr<ZinMirUnit>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void ZinIrFactoryJIT::AddOpLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unable to calculate JIT live-out strides", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unable to remove implicit dependencies!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Dynamic shapes transform handling pass failed!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unable to add implicit dependencies!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unable to parse shape dependent transform map!", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Failed to create MirUnit graph", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Failed to prepare liveout tensors!\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Failed to add LiveIO layers\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Failed to add input tensors!\n", a5, a6, a7, a8, 0);
}

void ZinIrFactoryJIT::ParseSymbolTables(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  int v4 = 136315138;
  uint64_t v5 = v3;
  OUTLINED_FUNCTION_1(&dword_210C72000, &_os_log_internal, a3, "Failed to create symbol %s.\n", (uint8_t *)&v4);
}

void ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Basic block ID is out of bounds.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Error: Failed to add basic block to graph.\n", a5, a6, a7, a8, 0);
}

void ZinIrFactoryJIT::ParseBasicBlocksAndAddToCFG(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = 134218240;
  uint64_t v5 = v2;
  __int16 v6 = 2048;
  uint64_t v7 = v3;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Failed to add edge from basic block %llu to basic block %llu.\n", (uint8_t *)&v4, 0x16u);
}

void ZinIrFactoryJIT::ConvertMirUnitToLayerAndAddToGraph()
{
  OUTLINED_FUNCTION_1_11();
  *(_DWORD *)uint64_t v0 = 136315138;
  *(void *)(v0 + 4) = v1;
  OUTLINED_FUNCTION_1(&dword_210C72000, &_os_log_internal, v2, "Failed to add an input-ready %s layer.\n", v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_11();
  *(_DWORD *)uint64_t v0 = 136315138;
  *(void *)(v0 + 4) = v1;
  OUTLINED_FUNCTION_1(&dword_210C72000, &_os_log_internal, v2, "%s layer is not ready.\n", v3);
}

void ZinIrFactoryJIT::AddInputReadyOpLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "No output shape for unit!\n", a5, a6, a7, a8, 0);
}

void ZinIrFactoryJIT::AddInputReadyOpLayer(uint8_t *buf, unsigned char *a2)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Cannot find the required input tensor in tensor map!\n", buf, 2u);
}

void ZinIrFactoryJIT::CalculateJITLiveOutStrides(uint8_t *buf, unsigned char *a2)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Fails to infer live-out shapes", buf, 2u);
}

void ZinIrFactoryJIT::AddLiveOuts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Failed to add bindings for liveouts\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Invalid multiplanar liveouts\n", a5, a6, a7, a8, 0);
}

uint64_t ZinIrOpt::SumSquareDetection(void *a1, uint64_t a2)
{
  v29[1] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v20, "ew_add");
  v21[0] = &unk_26C331268;
  v21[3] = v21;
  int v8 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v22, &v8, 1);
  std::string::basic_string[abi:ne180100]<0>(v23, "ew_sqr");
  v24[0] = &unk_26C3312C0;
  v24[3] = v24;
  int v7 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v25, &v7, 1);
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  long long v11 = 0;
  unint64_t v16 = &v9;
  char v17 = 0;
  unint64_t v9 = (char *)operator new(0xC0uLL);
  uint64_t v10 = (uint64_t)v9;
  long long v11 = v9 + 192;
  uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v11, (uint64_t)v20, (uint64_t)v26, (uint64_t)v9);
  v19[3] = 0;
  ZinLinearPattern::ZinLinearPattern(v26, &v9, a2, 0, v19, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v26, &v12);
  long long v28 = v12;
  long long v12 = 0uLL;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v13 = 0;
  unint64_t v16 = (char **)&v13;
  char v17 = 0;
  unint64_t v13 = operator new(0x10uLL);
  uint64_t v14 = v13;
  uint64_t v15 = v13 + 2;
  uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinPattern>>,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern> const*,std::shared_ptr<ZinPattern>*>((uint64_t)&v15, &v28, v29, v13);
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  v26[0] = (void **)&unk_26C349BA8;
  unint64_t v16 = (char **)&v27;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  ZinPattern::~ZinPattern((ZinPattern *)v26);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v19);
  unint64_t v16 = &v9;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  for (uint64_t i = 0; i != -24; i -= 12)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v25[i * 8]);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v24[i]);
    if (SHIBYTE(v23[i + 2]) < 0) {
      operator delete((void *)v23[i]);
    }
  }
  v18[0] = &unk_26C331318;
  v18[1] = &v13;
  v18[3] = v18;
  uint64_t v5 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v18, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v18);
  v26[0] = (void **)&v13;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](v26);
  return v5;
}

void sub_211233194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53)
{
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C331268;
  return result;
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C331268;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  uint64_t v3 = v2[8];
  BOOL v4 = *(_DWORD *)(v3 + 8) == 6
    && v2[12] - v2[11] == 16
    && !*(_DWORD *)(v3 + 12)
    && *(float *)(v3 + 20) == 1.0
    && *(float *)(v3 + 24) == 0.0;
  return v4 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3312C0;
  return result;
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3312C0;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  uint64_t v3 = v2[8];
  int v4 = *(_DWORD *)(v3 + 8);
  if (v4 == 6)
  {
    if (v2[12] - v2[11] != 8 || *(_DWORD *)(v3 + 12) != 2 || *(float *)(v3 + 16) != 1.0) {
      goto LABEL_9;
    }
  }
  else if (v4 != 5 || *(_DWORD *)(v3 + 12) != 3)
  {
LABEL_9:
    int v5 = 0;
    return v5 | 0x100u;
  }
  int v5 = 1;
  return v5 | 0x100u;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

void *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C331318;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C331318;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  int v5 = *v3;
  int v4 = v3[1];
  if (*v3 != v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = *a3;
    do
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, v6, v7))
      {
        uint64_t v8 = *v5;
        std::string::basic_string[abi:ne180100]<0>(__p, "ew_add");
        uint64_t SingleMatch = (void *)ZinPattern::GetSingleMatch(v8, (unsigned __int8 *)__p);
        if (SBYTE7(v28) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v10 = *v5;
        std::string::basic_string[abi:ne180100]<0>(__p, "ew_sqr");
        uint64_t v11 = ZinPattern::GetSingleMatch(v10, (unsigned __int8 *)__p);
        if (SBYTE7(v28) < 0)
        {
          operator delete(__p[0]);
          if (SingleMatch)
          {
LABEL_10:
            if (v11)
            {
              if (*(char *)(v11 + 47) >= 0) {
                size_t v12 = *(unsigned __int8 *)(v11 + 47);
              }
              else {
                size_t v12 = *(void *)(v11 + 32);
              }
              std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 7);
              if ((SBYTE7(v28) & 0x80u) == 0) {
                unint64_t v13 = __p;
              }
              else {
                unint64_t v13 = (void **)__p[0];
              }
              if (v12)
              {
                if (*(char *)(v11 + 47) >= 0) {
                  uint64_t v14 = (const void *)(v11 + 24);
                }
                else {
                  uint64_t v14 = *(const void **)(v11 + 24);
                }
                memmove(v13, v14, v12);
              }
              strcpy((char *)v13 + v12, "_sumsqr");
              __n128 v15 = ZinObjectNameFactory::ZinObjectNameFactory(&v26, __p);
              if (SBYTE7(v28) < 0) {
                operator delete(__p[0]);
              }
              (*(void (**)(void **__return_ptr, void *, void, void, __n128))(*SingleMatch + 80))(__p, SingleMatch, 0, 0, v15);
              (*(void (**)(void *, void, void))(*SingleMatch + 80))(SingleMatch, 0, 0);
              unint64_t v16 = operator new(0xF0uLL);
              long long v17 = v40[0];
              v16[12] = v39;
              v16[13] = v17;
              *(_OWORD *)((char *)v16 + 22std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_OWORD *)((char *)v40 + 12);
              long long v18 = v36;
              v16[8] = v35;
              v16[9] = v18;
              long long v19 = v38;
              v16[10] = v37;
              v16[11] = v19;
              long long v20 = v32;
              v16[4] = v31;
              v16[5] = v20;
              long long v21 = v34;
              v16[6] = v33;
              v16[7] = v21;
              long long v22 = v28;
              *unint64_t v16 = *(_OWORD *)__p;
              v16[1] = v22;
              long long v23 = v30;
              std::string v16[2] = v29;
              void v16[3] = v23;
              uint64_t v24 = SingleMatch[2];
              (*(void (**)(void *, void, void))(*SingleMatch + 32))(SingleMatch, 0, 0);
              (*(void (**)(void *, void, void))(*SingleMatch + 32))(SingleMatch, 0, 0);
              ZinBuilder::CreateScaledElementWise(v24, (uint64_t)&v26);
            }
          }
        }
        else if (SingleMatch)
        {
          goto LABEL_10;
        }
      }
      v5 += 2;
    }
    while (v5 != v4);
  }
  return 0;
}

void sub_2112339D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  a19 = &unk_26C34DA98;
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2,std::allocator<ZinIrOpt::SumSquareDetection(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Unable to merge sumsqr\n", v0, 2u);
}

void ZinMirLiveInUnit::ZinMirLiveInUnit(ZinMirLiveInUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  *(void *)ZinMirUnit::ZinMirUnit((uint64_t)this, 28, (long long *)a2) = &unk_26C349C78;
}

uint64_t ZinMirLiveInUnit::DynamicShapeOutputTensorDimensions(uint64_t a1, long long **a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 40) {
    return 3;
  }
  uint64_t result = 0;
  long long v5 = *v3;
  long long v6 = v3[1];
  *(void *)(a3 + 32) = *((void *)v3 + 4);
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  return result;
}

void ZinMirLiveInUnit::CreateLayer(uint64_t a1)
{
  if (!*(void *)(a1 + 104)) {
    operator new();
  }
  ZinAssertImpl("LiveIn layer should not have MIR info");
}

void sub_211233C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

void ZinMirLiveInUnit::~ZinMirLiveInUnit(ZinMirLiveInUnit *this)
{
  ZinMirUnit::~ZinMirUnit(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t ZinIrStochasticRoundInfo::GetSeeds(ZinIrStochasticRoundInfo *this)
{
  return *((void *)this + 2);
}

uint64_t ZinStochasticRoundLayer::Lower()
{
  return 0;
}

void ZinStochasticRoundLayer::Clone()
{
}

void sub_211233E84(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, _Unwind_Exception *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinDropoutLayer::Clone(&a12, a1, a2, (uint64_t)&a13);
  unint64_t v16 = a13;
  MEMORY[0x21667D3C0](v13, 0x10B3C4024B96488);
  _Unwind_Resume(v16);
}

uint64_t ZinStochasticRoundLayer::ComputeOutputDimensions(uint64_t a1, long long **a2, uint64_t a3)
{
  long long v3 = **a2;
  long long v4 = (*a2)[1];
  *(void *)(a3 + 32) = *((void *)*a2 + 4);
  *(_OWORD *)a3 = v3;
  *(_OWORD *)(a3 + 16) = v4;
  return 0;
}

void ZinStochasticRoundLayer::Split(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5 = (*(uint64_t (**)(unint64_t))(*(void *)*a3 + 576))(*a3);
  ZinMirKernelSizeSplitterEngine::GetKernelSplittingNames(v5, a2, a3, &v6);
  operator new();
}

void sub_211234118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  KernelSplittingNames::~KernelSplittingNames(&a22);
  _Unwind_Resume(a1);
}

void *ZinStochasticRoundLayer::OpCodeKindToString@<X0>(ZinStochasticRoundLayer *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_26418C2B0[*(int *)(*((void *)this + 8) + 12)]);
}

uint64_t ZinStochasticRoundLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_211234348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ZinChannelToSpaceCompositeLayer::ZinChannelToSpaceCompositeLayer(ZinChannelToSpaceCompositeLayer *this, ZinConvLayer *a2, ZinGOCLayer *a3, ZinActivationLayer *a4, ZinChannelToSpaceLayer *a5)
{
}

void sub_2112345DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a9, 0);
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  long long v35 = *(std::__shared_weak_count **)(v33 - 80);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v36 = *(void *)(v33 - 72);
  *(void *)(v33 - 72) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinChannelToSpaceCompositeLayer::Lower(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  _OWORD v41[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 192);
  if (!v3) {
    ZinAssertImpl("Conv is required in a ChannelToSpaceCompositeLayer");
  }
  __n128 v7 = ZinObjectNameFactory::ZinObjectNameFactory(v37, *(void *)(a1 + 216) + 24);
  uint64_t v8 = (*(uint64_t (**)(void, void, void, __n128))(***(void ***)(a1 + 88) + 32))(**(void **)(a1 + 88), 0, 0, v7);
  unint64_t v9 = *(void **)(a1 + 216);
  uint64_t v10 = (*(uint64_t (**)(void, void, void))(***(void ***)(a1 + 88) + 32))(**(void **)(a1 + 88), 0, 0);
  FusedDeconv = (ZinIrOpLayer *)ZinChannelToSpaceUtils::CreateFusedDeconv((uint64_t)v37, v3, v8 + 48, v9, *(unsigned int *)(v10 + 88), **a3);
  if (FusedDeconv)
  {
    v41[0] = a1;
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    v36.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v30, &v36);
    BOOL v12 = ZinIrOpLayerGraph::AddNode(a2, FusedDeconv, (ZinIrOpLayer ***)&v30);
    long long v30 = &unk_26C359A08;
    if (__p)
    {
      long long v32 = __p;
      operator delete(__p);
    }
    int v13 = v12 & ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, FusedDeconv);
    uint64_t v14 = *(void *)(a1 + 200);
    if (v14)
    {
      __n128 v15 = *(_DWORD **)(*(void *)(a1 + 216) + 64);
      int v16 = v15[3];
      int v17 = v15[4];
      int v18 = v15[5];
      if (v16 != 2 || v17 != 2 || v18 != 1) {
        ZinAssertImpl("C2S Composite supports only 2x2x1 expansion. Incorrect factors: %d/%d/%d\n", v16, v17, v18);
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v14 + 32))(v14, 0, 0);
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)FusedDeconv + 32))(FusedDeconv, 0, 0);
      ZinObjectNameFactory::CreateName((uint64_t)v37, 0, &v36);
      ZinIrTensor::CopyTensorMirInfo(v21, &v35);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      LODWORD(v3std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
      long long v32 = 0;
      uint64_t v33 = 0;
      long long __p = 0;
      int v34 = 0;
      ZinIrTensor::CreateTensor();
    }
    uint64_t v22 = *(void *)(a1 + 208);
    if (v22)
    {
      (*(void (**)(uint64_t, void, void))(*(void *)v22 + 32))(v22, 0, 0);
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)FusedDeconv + 32))(FusedDeconv, 0, 0);
      ZinObjectNameFactory::CreateName((uint64_t)v37, 0, &v36);
      uint64_t v23 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 208) + 32))(*(void *)(a1 + 208), 0, 0);
      ZinIrTensor::CopyTensorMirInfo(v23, &v29);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      LODWORD(v3std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
      long long v32 = 0;
      uint64_t v33 = 0;
      long long __p = 0;
      int v34 = 0;
      ZinIrTensor::CreateTensor();
    }
    memset(v27, 0, sizeof(v27));
    int v28 = 1065353216;
    int v24 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a1, FusedDeconv, v27);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v27);
    if ((v13 & v24 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)a1, 0)) != 0) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = 3;
    }
  }
  else
  {
    uint64_t v25 = 3;
  }
  v37[0] = &unk_26C34DA98;
  if (v38 < 0) {
    operator delete((void *)v37[1]);
  }
  return v25;
}

void sub_211234DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  long long v37 = *(std::__shared_weak_count **)(v35 - 96);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  *(void *)(v35 - 16std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = &unk_26C34DA98;
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinChannelToSpaceCompositeLayer::MatchConv(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8)) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void **)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "c2s");
  uint64_t SingleMatch = (void *)ZinPattern::State::GetSingleMatch(v2, (unsigned __int8 *)__p);
  if (SBYTE7(v20) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = SingleMatch[8];
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 32))(v5, 0, 0);
  uint64_t v7 = *(void *)(v5 + 136);
  if (ZinIrKernel::IsMutable((ZinIrKernel *)v7)) {
    goto LABEL_17;
  }
  int v8 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 32))(v5, 0, 0) + 88);
  uint64_t v9 = (*(uint64_t (**)(void *, void, void))(*SingleMatch + 32))(SingleMatch, 0, 0);
  if (!ZinQuantizationUtils::TensorFormatCompatible(v8, *(_DWORD *)(v9 + 88))) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(v7 + 340) != 1) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(v7 + 344) != 1) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(v7 + 348) != 1) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(v7 + 328) != 1) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(v7 + 332) != 1) {
    goto LABEL_17;
  }
  if (*(_DWORD *)(v7 + 336) != 1) {
    goto LABEL_17;
  }
  if (*(void *)(v7 + 400) >= 2uLL) {
    goto LABEL_17;
  }
  if (ZinIrKernel::HasVectorPalettizedWeight(*(ZinIrKernel **)(v5 + 136))) {
    goto LABEL_17;
  }
  uint64_t v21 = 0;
  *(_OWORD *)long long __p = 0u;
  long long v20 = 0u;
  double WeightDimensions = ZinIrKernel::GetWeightDimensions(*(ZinIrKernel **)(v5 + 136), (uint64_t)v18);
  uint64_t v11 = **(void **)(a1 + 16);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void, void, double))(*(void *)v5 + 32))(v5, 0, 0, WeightDimensions);
  if ((ZinPixelShuffleUtils::GetShuffledKernelDimensions(v18, (int *)(v4 + 12), v11, *(_DWORD *)(v12 + 88), (uint64_t *)__p) & 1) == 0)goto LABEL_17; {
  memset(v17, 0, sizeof(v17));
  }
  uint64_t v13 = (*(uint64_t (**)(void, void, void))(***(void ***)(v5 + 88) + 32))(**(void **)(v5 + 88), 0, 0)+ 48;
  ZinIrKernel::GetWeightDimensions(*(ZinIrKernel **)(v5 + 136), (uint64_t)v18);
  if (ZinPixelShuffleUtils::GetFusedPadding(v13, v6 + 48, (uint64_t)v18, (int *)(v7 + 352), __p, (int *)(v4 + 12), (int *)v17))
  {
    LOBYTE(v14) = 1;
    int v15 = 1;
  }
  else
  {
LABEL_17:
    __int16 v14 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v15 = HIBYTE(v14);
  }
  return v14 | (v15 << 8);
}

void sub_211235264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinChannelToSpaceCompositeLayer::MatchGOC(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (*(_DWORD *)(v2[8] + 8) != 2
    || (*(unsigned int (**)(void *))(*v2 + 120))(v2)
    || (uint64_t v3 = a1[1], ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v3 + 136))))
  {
    __int16 v4 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    unsigned __int8 v5 = v4;
    int v6 = HIBYTE(v4);
  }
  else
  {
    int v8 = (void *)a1[3];
    std::string::basic_string[abi:ne180100]<0>(v24, "goc");
    ZinPattern::State::GetMatch(v8, (unsigned __int8 *)v24, &__p);
    ZinPatternUtils::ToGOC((uint64_t **)&__p, &v26);
    if (__p)
    {
      uint64_t v22 = __p;
      operator delete(__p);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    uint64_t v9 = v27;
    if ((unint64_t)v27 >= v28)
    {
      uint64_t v11 = v27 - v26;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = (uint64_t)(v28 - (void)v26) >> 2;
      if (v12 <= v11 + 1) {
        unint64_t v12 = v11 + 1;
      }
      if (v28 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        __int16 v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v28, v13);
      }
      else {
        __int16 v14 = 0;
      }
      int v15 = (uint64_t *)&v14[8 * v11];
      int v16 = &v14[8 * v13];
      *int v15 = v3;
      uint64_t v10 = v15 + 1;
      int v18 = v26;
      int v17 = v27;
      if (v27 != v26)
      {
        do
        {
          uint64_t v19 = *--v17;
          *--int v15 = v19;
        }
        while (v17 != v18);
        int v17 = v26;
      }
      uint64_t v26 = v15;
      uint64_t v27 = v10;
      unint64_t v28 = (unint64_t)v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *uint64_t v27 = v3;
      uint64_t v10 = v9 + 1;
    }
    uint64_t v27 = v10;
    ZinObjectNameFactory::ZinObjectNameFactory(&__p, v3 + 24);
    if (ZinMergeGOCSequence(*a1, (uint64_t)&__p, (uint64_t)&v26))
    {
      unsigned __int8 v5 = 1;
      int v6 = 1;
    }
    else
    {
      __int16 v20 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
      unsigned __int8 v5 = v20;
      int v6 = HIBYTE(v20);
    }
    long long __p = &unk_26C34DA98;
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
  }
  return v5 | (v6 << 8);
}

void sub_21123549C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  char v25 = *(void **)(v23 - 56);
  if (v25)
  {
    *(void *)(v23 - 48) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinChannelToSpaceCompositeLayer::MatchActivation(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 4)
  {
    int v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

uint64_t ZinChannelToSpaceCompositeLayer::MatchSingularGOC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  if (*(_DWORD *)(v2[8] + 8) != 2
    || (*(unsigned int (**)(void *))(*v2 + 120))(v2)
    || (uint64_t v3 = *(void *)(a1 + 8), ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v3 + 136)))
    || ZinIrKernel::HasPerCoutBias(*(ZinIrKernel **)(v3 + 136)))
  {
    __int16 v4 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v5 = HIBYTE(v4);
  }
  else
  {
    LOBYTE(v4) = 1;
    int v5 = 1;
  }
  return v4 | (v5 << 8);
}

uint64_t ZinChannelToSpaceCompositeLayer::Clone()
{
  return 0;
}

void ZinChannelToSpaceCompositeLayer::MakeComposite()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Failed in making ChannelToSpaceCompositeLayer.\n", v0, 2u);
}

uint64_t ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates(uint64_t a1, unsigned int a2, uint64_t a3, char **a4, unint64_t a5, unsigned __int8 a6)
{
  if (*(_DWORD *)(*(void *)(a1 + 64) + 8) == 93)
  {
    uint64_t ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
    uint64_t v10 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize(v10);
    MirInfoChannelAssignment::MirInfoChannelAssignment((MirInfoChannelAssignment *)__dst, NumNeededNEs, OCGSize, 0, 0);
    *(int64x2_t *)&__dst[40] = vdupq_n_s64(0x10uLL);
    *(void *)&__dst[56] = 16;
    *(void *)&__dst[64] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 368))(a1, 3);
    *(_DWORD *)&__dst[72] = 0;
    *(_WORD *)&__dst[76] = 256;
    unint64_t v12 = (unint64_t)a4[2];
    unint64_t v13 = a4[1];
    if ((unint64_t)v13 < v12)
    {
LABEL_3:
      *(_OWORD *)unint64_t v13 = *(_OWORD *)__dst;
      long long v14 = *(_OWORD *)&__dst[16];
      long long v15 = *(_OWORD *)&__dst[32];
      long long v16 = *(_OWORD *)&__dst[64];
      *((_OWORD *)v13 + 3) = *(_OWORD *)&__dst[48];
      *((_OWORD *)v13 + 4) = v16;
      *((_OWORD *)v13 + 1) = v14;
      *((_OWORD *)v13 + 2) = v15;
      int v17 = v13 + 80;
LABEL_140:
      uint64_t result = 0;
      a4[1] = v17;
      return result;
    }
    unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a4) >> 4);
    unint64_t v28 = v27 + 1;
    if (v27 + 1 <= 0x333333333333333)
    {
      unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)*a4) >> 4);
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 >= 0x199999999999999) {
        unint64_t v30 = 0x333333333333333;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30) {
        long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v30);
      }
      else {
        long long v31 = 0;
      }
      uint64_t v89 = &v31[80 * v27];
      uint64_t v90 = &v31[80 * v30];
      *(_OWORD *)uint64_t v89 = *(_OWORD *)__dst;
      long long v91 = *(_OWORD *)&__dst[16];
      long long v92 = *(_OWORD *)&__dst[32];
      long long v93 = *(_OWORD *)&__dst[64];
      *((_OWORD *)v89 + 3) = *(_OWORD *)&__dst[48];
      *((_OWORD *)v89 + 4) = v93;
      *((_OWORD *)v89 + 1) = v91;
      *((_OWORD *)v89 + 2) = v92;
      int v17 = v89 + 80;
      uint64_t v95 = *a4;
      uint64_t v94 = a4[1];
      if (v94 == *a4) {
        goto LABEL_138;
      }
      do
      {
        *((_OWORD *)v89 - 5) = *((_OWORD *)v94 - 5);
        long long v96 = *((_OWORD *)v94 - 4);
        long long v97 = *((_OWORD *)v94 - 3);
        long long v98 = *((_OWORD *)v94 - 2);
        *(_OWORD *)(v89 - 18) = *(_OWORD *)(v94 - 18);
        *((_OWORD *)v89 - 3) = v97;
        *((_OWORD *)v89 - 2) = v98;
        *((_OWORD *)v89 - 4) = v96;
        v89 -= 80;
        v94 -= 80;
      }
      while (v94 != v95);
LABEL_137:
      uint64_t v94 = *a4;
LABEL_138:
      *a4 = v89;
      a4[1] = v17;
      a4[2] = v90;
      if (v94) {
        operator delete(v94);
      }
      goto LABEL_140;
    }
    goto LABEL_142;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1);
  Hal = ZinIrTarget::GetHal(*(uint64_t **)(a1 + 16), *(ZinIrTarget **)(*(void *)(a1 + 16) + 160));
  uint64_t v24 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  uint64_t v25 = *(void *)(a1 + 264);
  int v114 = *(_DWORD *)(v25 + 144);
  if (*(unsigned char *)(v25 + 151)) {
    BOOL v26 = 1;
  }
  else {
    BOOL v26 = *(unsigned char *)(v25 + 150) != 0;
  }
  if (v114 == 1 && !NERasterization::CanUseFlexibleWUShapeInSSM((NERasterization *)a1, (const ZinNELayer *)v24, v23))
  {
    unint64_t v79 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    uint64_t v80 = MirInfoChannelAssignment::GetNumNeededNEs(v79);
    BOOL v81 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    uint64_t v82 = MirInfoChannelAssignment::GetOCGSize(v81);
    MirInfoChannelAssignment::MirInfoChannelAssignment((MirInfoChannelAssignment *)__dst, v80, v82, 0, 0);
    *(int64x2_t *)&__dst[40] = vdupq_n_s64(0x10uLL);
    *(void *)&__dst[56] = 16;
    *(void *)&__dst[64] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 368))(a1, 3);
    *(_DWORD *)&__dst[72] = 1;
    *(_WORD *)&__dst[76] = 256;
    unint64_t v83 = (unint64_t)a4[2];
    unint64_t v13 = a4[1];
    if ((unint64_t)v13 < v83) {
      goto LABEL_3;
    }
    unint64_t v84 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a4) >> 4);
    unint64_t v85 = v84 + 1;
    if (v84 + 1 <= 0x333333333333333)
    {
      unint64_t v86 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v83 - (void)*a4) >> 4);
      if (2 * v86 > v85) {
        unint64_t v85 = 2 * v86;
      }
      if (v86 >= 0x199999999999999) {
        unint64_t v87 = 0x333333333333333;
      }
      else {
        unint64_t v87 = v85;
      }
      if (v87) {
        uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a4 + 2), v87);
      }
      else {
        uint64_t v88 = 0;
      }
      uint64_t v89 = &v88[80 * v84];
      uint64_t v90 = &v88[80 * v87];
      *(_OWORD *)uint64_t v89 = *(_OWORD *)__dst;
      long long v104 = *(_OWORD *)&__dst[16];
      long long v105 = *(_OWORD *)&__dst[32];
      long long v106 = *(_OWORD *)&__dst[64];
      *((_OWORD *)v89 + 3) = *(_OWORD *)&__dst[48];
      *((_OWORD *)v89 + 4) = v106;
      *((_OWORD *)v89 + 1) = v104;
      *((_OWORD *)v89 + 2) = v105;
      int v17 = v89 + 80;
      int v107 = *a4;
      uint64_t v94 = a4[1];
      if (v94 == *a4) {
        goto LABEL_138;
      }
      do
      {
        *((_OWORD *)v89 - 5) = *((_OWORD *)v94 - 5);
        long long v108 = *((_OWORD *)v94 - 4);
        long long v109 = *((_OWORD *)v94 - 3);
        long long v110 = *((_OWORD *)v94 - 2);
        *(_OWORD *)(v89 - 18) = *(_OWORD *)(v94 - 18);
        *((_OWORD *)v89 - 3) = v109;
        *((_OWORD *)v89 - 2) = v110;
        *((_OWORD *)v89 - 4) = v108;
        v89 -= 80;
        v94 -= 80;
      }
      while (v94 != v107);
      goto LABEL_137;
    }
LABEL_142:
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  BOOL v111 = v26;
  unint64_t v124 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 368))(a1, 4);
  uint64_t v125 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 368))(a1, 3);
  unint64_t WorkUnitHeightLimit = NERasterization::GetWorkUnitHeightLimit((uint64_t **)a1, v32);
  unint64_t v132 = v33;
  long long v148 = 0uLL;
  LOBYTE(v149) = 0;
  if (ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a1)
    && NERasterization::CanUseNonPowerOf2WUs((void *)a1, v24, a2))
  {
    NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(a1, (void *)v24, a2, a3, (void **)a4, a5, a6);
  }
  unsigned int v34 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, 0, 0) + 88);
  if (IsFormatDMAConvertibleToFP16(a2)) {
    int v35 = 3;
  }
  else {
    int v35 = a2;
  }
  if (IsFormatDMAConvertibleToFP16(v34)) {
    unsigned int v34 = 3;
  }
  std::string v36 = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
  uint64_t Lut = ZinIrTarget::GetLut(v36);
  long long v37 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
  unsigned __int8 FatTileEnable = MirInfoChannelAssignment::GetFatTileEnable(v37);
  unsigned int v128 = v35;
  BOOL v38 = Has16bitTo8bitFormatConversion(v35, v34);
  uint64_t v39 = a1;
  uint64_t v118 = (void **)a4;
  BOOL v131 = *(unsigned char *)(v24 + 1134)
      && *(_DWORD *)(*(void *)(a1 + 64) + 8) == 85
      && ZinNEConvLayer::CanUseHalfWorkUnitMode(a1, a2, 0, 0);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 384))(v144, a1);
  uint64_t v142 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1);
  int v143 = v40;
  if (IsFormatDMAConvertibleToFP16(a2)) {
    int v41 = 3;
  }
  else {
    int v41 = a2;
  }
  unsigned int v115 = v41;
  if ((v114 - 3) >= 2) {
    int v42 = v114;
  }
  else {
    int v42 = 0;
  }
  if (WorkUnitHeightLimit <= v132)
  {
    char v127 = !v38 | FatTileEnable;
    unint64_t v120 = v21 & 0xFFFFFFFF00000000;
    uint64_t v121 = v21;
    unint64_t v43 = v125;
    if (a6) {
      unint64_t v43 = a5;
    }
    unint64_t v119 = v43;
    uint64_t v113 = (uint64_t)(a4 + 2);
    unint64_t v44 = WorkUnitHeightLimit;
    uint64_t v126 = a1;
    while (1)
    {
      unint64_t v45 = v44;
      if (v44 >= WorkUnitHeightLimit) {
        break;
      }
LABEL_100:
      v44 *= 2;
      if (v44 > v132) {
        goto LABEL_101;
      }
    }
    while (v44 > v132)
    {
LABEL_99:
      v45 >>= 1;
      if (v45 < WorkUnitHeightLimit) {
        goto LABEL_100;
      }
    }
    BOOL v47 = v44 > 0xF && v45 > 0xF;
    BOOL v117 = v47;
    unint64_t v48 = v44;
    while (1)
    {
      BOOL v49 = v131;
      if (v48 > *(void *)(v24 + 664)) {
        BOOL v49 = 0;
      }
      char v50 = v49
         && ZinMirConvUtils::IsHalfWUBeneficial(v24, *(void *)(a3 + 8), *(void *)(a3 + 24), v144[1], v145, v146, (int *)&v142, v44, v42);
      int v51 = v42;
      if ((v42 - 1) > 1) {
        goto LABEL_62;
      }
      if (v44 == v45 && v44 == v48)
      {
        unint64_t WUCost = NERasterization::GetWUCost(v44, v44, v44, v125, v42, v50, v124, v125, Lut, FatTileEnable, v115, v24);
        if (v42 == 2 && WUCost <= 1)
        {
          if (ZinMirConvUtils::IsValidShPrefForTinySourceMode((ZinMirConvUtils *)v24, (const ZinIrHalParameters *)v44, v145))
          {
            int v51 = 2;
          }
          else
          {
            int v51 = 1;
          }
LABEL_62:
          if ((v127 & 1) != 0
            || (NERasterization::HasWorkUnitWidthOf8(v24, v128, v48, v45, v44, v51, v50, v125, v124, Lut, 0) & 1) == 0)
          {
            if (!*(unsigned char *)(v24 + 1896)
              || v121 != 2
              || v120 != 0x200000000
              || ((BOOL v53 = IsFp16(v128), v48 != 16) ? (v54 = 1) : (v54 = v53), (v54 | v117) == 1))
            {
              uint64_t v55 = ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(v39 + 264));
              long long v148 = *(_OWORD *)v55;
              uint64_t v129 = *(void *)(v55 + 24);
              uint64_t v149 = *(void *)(v55 + 16);
              char v130 = *(unsigned char *)(v55 + 32);
              BOOL v56 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(v39 + 264));
              if (!MirInfoChannelAssignment::IsMulticastEnabled(v56) || *(_DWORD *)(*(void *)(v39 + 64) + 8) != 85) {
                goto LABEL_81;
              }
              uint64_t v57 = *(_DWORD **)(v39 + 264);
              memcpy(__dst, v57 + 30, sizeof(__dst));
              std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v134, (uint64_t)(v57 + 144));
              int v136 = v57[154];
              std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v137, (uint64_t)(v57 + 156));
              int v139 = v57[166];
              std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v140, (uint64_t)(v57 + 168));
              uint64_t v58 = *(void *)(v126 + 264);
              if (!*(unsigned char *)(v58 + 150))
              {
                *(void *)(v58 + 12std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v45;
                *(void *)(v58 + 128) = v48;
                *(void *)(v58 + 136) = v44;
              }
              if (!*(unsigned char *)(v58 + 233)) {
                *(void *)(v58 + 20std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v119;
              }
              ZinMirL2Config::NE::SetSmallSourceMode(v58 + 120, v51);
              char CanUseKernelStreamingMode = ZinNEConvLayer::CanUseKernelStreamingMode(v126, v128);
              memcpy((void *)(v58 + 120), __dst, 0x1C0uLL);
              *(_DWORD *)(v58 + 568) = *(_DWORD *)&__dst[448];
              if ((unsigned char *)(v58 + 120) == __dst)
              {
                *(_DWORD *)(v58 + 616) = v136;
                *(_DWORD *)(v58 + 664) = v139;
              }
              else
              {
                *(_DWORD *)(v58 + 608) = v135;
                std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v58 + 576), v134[2], 0);
                *(_DWORD *)(v58 + 616) = v136;
                *(_DWORD *)(v58 + 656) = v138;
                std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v58 + 624), v137[2], 0);
                *(_DWORD *)(v58 + 664) = v139;
                *(_DWORD *)(v58 + 704) = v141;
                std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v58 + 672), v140[2], 0);
              }
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v140);
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v137);
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v134);
              uint64_t v39 = v126;
              if ((CanUseKernelStreamingMode & 1) == 0)
              {
LABEL_81:
                uint64_t v60 = (char *)v118[1];
                BOOL v61 = (char *)v118[2];
                if (v60 >= v61)
                {
                  unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((v60 - (unsigned char *)*v118) >> 4);
                  unint64_t v64 = v63 + 1;
                  if (v63 + 1 > 0x333333333333333) {
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((v61 - (unsigned char *)*v118) >> 4);
                  if (2 * v65 > v64) {
                    unint64_t v64 = 2 * v65;
                  }
                  if (v65 >= 0x199999999999999) {
                    unint64_t v66 = 0x333333333333333;
                  }
                  else {
                    unint64_t v66 = v64;
                  }
                  if (v66) {
                    uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v113, v66);
                  }
                  else {
                    uint64_t v67 = 0;
                  }
                  uint64_t v68 = &v67[80 * v63];
                  *(_OWORD *)uint64_t v68 = v148;
                  *((void *)v68 + 2) = v149;
                  *((void *)v68 + 3) = v129;
                  v68[32] = v130;
                  *((_DWORD *)v68 + 9) = *(_DWORD *)&v147[3];
                  *(_DWORD *)(v68 + 33) = *(_DWORD *)v147;
                  *((void *)v68 + 5) = v44;
                  *((void *)v68 + 6) = v45;
                  *((void *)v68 + 7) = v48;
                  *((void *)v68 + 8) = v119;
                  *((_DWORD *)v68 + 18) = v51;
                  v68[76] = v50;
                  v68[77] = 1;
                  uint64_t v70 = (char *)*v118;
                  uint64_t v69 = (char *)v118[1];
                  uint64_t v71 = v68;
                  if (v69 != *v118)
                  {
                    do
                    {
                      *((_OWORD *)v71 - 5) = *((_OWORD *)v69 - 5);
                      long long v72 = *((_OWORD *)v69 - 4);
                      long long v73 = *((_OWORD *)v69 - 3);
                      long long v74 = *((_OWORD *)v69 - 2);
                      *(_OWORD *)(v71 - 18) = *(_OWORD *)(v69 - 18);
                      *((_OWORD *)v71 - 3) = v73;
                      *((_OWORD *)v71 - 2) = v74;
                      *((_OWORD *)v71 - 4) = v72;
                      v71 -= 80;
                      v69 -= 80;
                    }
                    while (v69 != v70);
                    uint64_t v69 = (char *)*v118;
                  }
                  uint64_t v62 = v68 + 80;
                  *uint64_t v118 = v71;
                  v118[1] = v68 + 80;
                  v118[2] = &v67[80 * v66];
                  if (v69) {
                    operator delete(v69);
                  }
                }
                else
                {
                  *(_OWORD *)uint64_t v60 = v148;
                  *((void *)v60 + 2) = v149;
                  *((void *)v60 + 3) = v129;
                  v60[32] = v130;
                  *(_DWORD *)(v60 + 33) = *(_DWORD *)v147;
                  *((_DWORD *)v60 + 9) = *(_DWORD *)&v147[3];
                  *((void *)v60 + 5) = v44;
                  *((void *)v60 + 6) = v45;
                  *((void *)v60 + 7) = v48;
                  *((void *)v60 + 8) = v119;
                  *((_DWORD *)v60 + 18) = v51;
                  v60[76] = v50;
                  uint64_t v62 = v60 + 80;
                  v60[77] = 1;
                }
                v118[1] = v62;
                uint64_t v39 = v126;
              }
            }
          }
          goto LABEL_98;
        }
        int v51 = v114;
        if (WUCost <= 1) {
          goto LABEL_62;
        }
      }
LABEL_98:
      v48 *= 2;
      if (v48 > v132) {
        goto LABEL_99;
      }
    }
  }
LABEL_101:
  uint64_t v76 = *v118;
  long long v75 = v118[1];
  if (!v111) {
    goto LABEL_129;
  }
  if (v76 != v75)
  {
    unint64_t v77 = v76 + 5;
    while (*((_DWORD *)v77 - 2) == v114)
    {
      BOOL v78 = v77 == v75;
      v77 += 5;
      if (v78) {
        goto LABEL_129;
      }
    }
    uint64_t v99 = v77 - 5;
    if (v77 - 5 != v75 && v77 != v75)
    {
      do
      {
        if (*((_DWORD *)v77 + 18) == v114)
        {
          *uint64_t v99 = *v77;
          long long v100 = v77[1];
          long long v101 = v77[2];
          long long v102 = v77[3];
          *(_OWORD *)((char *)v99 + 62) = *(_OWORD *)((char *)v77 + 62);
          v99[2] = v101;
          v99[3] = v102;
          v99[1] = v100;
          v99 += 5;
        }
        v77 += 5;
      }
      while (v77 != v75);
      uint64_t v76 = *v118;
      long long v75 = v118[1];
    }
    if (v99 != v75)
    {
      long long v75 = v99;
      v118[1] = v99;
    }
LABEL_129:
    if (v76 != v75) {
      return 0;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates();
  }
  return 3;
}

void sub_211236320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  int v2 = v1;
  unint64_t v87 = v3;
  long long v91 = v4;
  int v90 = v5;
  uint64_t v7 = v6;
  int v8 = (uint64_t *)v0;
  uint64_t v324 = *MEMORY[0x263EF8340];
  uint64_t v85 = *(void *)(v6 + 16);
  Hal = ZinIrTarget::GetHal((uint64_t *)v85, *(ZinIrTarget **)(v85 + 160));
  long long v93 = (ZinIrHalParameters *)(*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  long long v96 = (ZinANELayer *)v7;
  if (*(_DWORD *)(*(void *)(v7 + 64) + 8) == 93)
  {
    uint64_t ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(v7 + 264));
    uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
    unint64_t v12 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(v7 + 264));
    uint64_t OCGSize = MirInfoChannelAssignment::GetOCGSize(v12);
    MirInfoChannelAssignment::MirInfoChannelAssignment((MirInfoChannelAssignment *)v293, NumNeededNEs, OCGSize, 0, 0);
    *(int64x2_t *)&v294[8] = vdupq_n_s64(0x10uLL);
    *(void *)&v294[24] = 16;
    uint64_t v14 = 0;
    *(void *)&v294[32] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 368))(v7, 3);
    *(_DWORD *)&v294[40] = 0;
    *(_WORD *)&v294[44] = 256;
    long long v15 = *(_OWORD *)&v294[16];
    v87[2] = *(_OWORD *)v294;
    v87[3] = v15;
    long long v16 = v293[1];
    _OWORD *v87 = v293[0];
    v87[1] = v16;
    *(_OWORD *)((char *)v87 + 62) = *(_OWORD *)&v294[30];
    return v14;
  }
  uint64_t v17 = *(void *)(v7 + 136);
  float v18 = -1.0;
  long long v92 = v2;
  if (v17)
  {
    uint64_t v19 = *(void *)(v17 + 800);
    if (v19)
    {
      if (**(unsigned char **)(v19 + 40)
        && *(_DWORD *)(v17 + 332)
         * *(_DWORD *)(v17 + 328)
         * *(_DWORD *)(v17 + 336)
         * *(_DWORD *)(v17 + 340)
         * *(_DWORD *)(v17 + 344)
         * *(_DWORD *)(v17 + 348) == 1)
      {
        uint64_t KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v7 + 16));
        ZinIrKernel::GetSparsityRatio((ZinIrKernel *)v17, 4, KernelSparsityCache);
        if (v21 <= 0.95) {
          float v18 = v21;
        }
        else {
          float v18 = -1.0;
        }
      }
    }
  }
  long long v97 = 0;
  long long v98 = 0;
  uint64_t v99 = 0;
  unint64_t v84 = v8;
  std::vector<ZinMirWorkUnitShapeCandidate>::__init_with_size[abi:ne180100]<ZinMirWorkUnitShapeCandidate*,ZinMirWorkUnitShapeCandidate*>(&v97, (const void *)*v8, v8[1], 0xCCCCCCCCCCCCCCCDLL * ((v8[1] - *v8) >> 4));
  int v22 = 0;
  if (!v2[2])
  {
    uint64_t v14 = 0;
    uint64_t v23 = (ZinANELayer *)v7;
    goto LABEL_61;
  }
  uint64_t v23 = (ZinANELayer *)v7;
  if (v2[3])
  {
    uint64_t v14 = 0;
    goto LABEL_61;
  }
  uint64_t v14 = 0;
  if (!v2[4]) {
    goto LABEL_61;
  }
  uint64_t v24 = *(void *)(v7 + 264);
  ZinMirNERastParamsOpt::FindCandidate((uint64_t *)&v97, *(void *)(v24 + 120), *(void *)(v24 + 136), 1u, *(void *)(v24 + 128), 1u, (char **)&v299);
  uint64_t v25 = v299;
  if (v299 == v300)
  {
    int v22 = 0;
    uint64_t v14 = 0;
    if (v299)
    {
LABEL_60:
      v300 = v25;
      operator delete(v25);
    }
  }
  else
  {
    *(_WORD *)v296 = 257;
    v296[2] = 1;
    memset(&v296[3], 0, 7);
    char v297 = 1;
    int v298 = 0x1000000;
    uint64_t v26 = *((void *)v96 + 2);
    unint64_t v27 = ZinIrTarget::GetHal((uint64_t *)0x1000000, *(ZinIrTarget **)(v26 + 160));
    unint64_t v28 = (ZinIrHalParameters *)(*(uint64_t (**)(uint64_t *))(*v27 + 16))(v27);
    ZinIrHalParameters::GetOperationCondition(v28, *(double *)(v26 + 280), *(_DWORD *)(v26 + 288), *(_DWORD *)(v26 + 292), (uint64_t)buf);
    ZinIrPerf::ZinIrPerf((uint64_t)v293, (uint64_t)v28, (long long *)buf, (uint64_t *)v296);
    uint64_t v311 = 0;
    long long v310 = 0u;
    long long v309 = 0u;
    long long v308 = 0u;
    long long v307 = 0u;
    long long v306 = 0u;
    long long v305 = 0u;
    long long v304 = 0u;
    long long v303 = 0u;
    long long v302 = 0u;
    memset(v301, 0, sizeof(v301));
    unint64_t v29 = operator new(8uLL);
    v312 = v29;
    void *v29 = 0;
    v314 = v29 + 1;
    v313 = v29 + 1;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v315 = 0u;
    long long v316 = _Q0;
    long long v317 = _Q0;
    long long v318 = _Q0;
    long long v94 = _Q0;
    long long v319 = _Q0;
    char v321 = 0;
    unint64_t v320 = 0;
    unint64_t v323 = 0;
    BYTE8(v220[0]) = 0;
    LOBYTE(v225) = 0;
    BYTE8(v225) = 0;
    LOBYTE(v234) = 0;
    LOBYTE(v235) = 0;
    char v244 = 0;
    LOBYTE(v245) = 0;
    char v246 = 0;
    char v247 = 0;
    char v248 = 0;
    char v249 = 0;
    char v250 = 0;
    char v251 = 0;
    char v252 = 0;
    char v253 = 0;
    char v254 = 0;
    char v255 = 0;
    char v256 = 0;
    char v257 = 0;
    char v258 = 0;
    char v259 = 0;
    char v260 = 0;
    char v261 = 0;
    char v262 = 0;
    char v263 = 0;
    char v264 = 0;
    *(void *)&v220[0] = &unk_26C34D080;
    __int16 v265 = 0;
    char v269 = 0;
    char v270 = 0;
    __int16 v271 = 256;
    long long v266 = 0u;
    uint64_t v267 = 0;
    __int16 v268 = 0;
    char v272 = 0;
    char v273 = 0;
    __int16 v274 = 0;
    char v275 = 0;
    char v276 = 0;
    char v277 = 0;
    char v278 = 0;
    char v279 = 0;
    char v280 = 0;
    char v281 = 0;
    char v282 = 0;
    char v283 = 0;
    char v284 = 0;
    char v285 = 0;
    char v286 = 0;
    char v287 = 0;
    char v288 = 0;
    __int16 v289 = 0;
    char v290 = 0;
    char v291 = 0;
    int v292 = 0;
    if (v2[2])
    {
      char v35 = *v2;
      BYTE8(v220[0]) = 0;
      LOBYTE(v221) = 0;
      BYTE8(v221) = 0;
      BYTE12(v221) = 0;
      LOBYTE(v222) = v35;
      BYTE1(v222) = 1;
      BYTE8(v222) = 0;
      LOBYTE(v225) = 1;
      LOBYTE(v223) = 0;
      BYTE8(v223) = 0;
      BYTE8(v224) = 0;
      char v36 = v2[1];
      LOBYTE(v235) = 0;
      LOBYTE(v238) = 0;
      BYTE8(v238) = 0;
      BYTE12(v238) = 0;
      LOBYTE(v239) = v36;
      BYTE1(v239) = 1;
      BYTE8(v239) = 0;
      char v244 = 1;
      LOBYTE(v24std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
      char v241 = 0;
      char v243 = 0;
      uint64_t v245 = *(v300 - 2);
      char v246 = 1;
    }
    if (ZinANELayer::CalculatePerf(v96, (ZinIrPerf *)v293, (const ZinCustomPerfInfo *)v220, (ZinPerfDescriptor *)v301))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates();
        int v22 = 0;
        uint64_t v14 = 3;
        uint64_t v23 = v96;
      }
      else
      {
        int v22 = 0;
        uint64_t v14 = 3;
      }
    }
    else
    {
      double v37 = *(double *)&v302 + *((double *)&v302 + 1);
      if (*(double *)&v302 + *((double *)&v302 + 1) < *(double *)&v303) {
        double v37 = *(double *)&v303;
      }
      if (v37 < *((double *)&v303 + 1)) {
        double v37 = *((double *)&v303 + 1);
      }
      BOOL v38 = v37 != *((double *)&v303 + 1) && (v322 == 2 || *((double *)&v301[2] + 1) <= *(double *)&v301[2] * 1.5);
      uint64_t v14 = 0;
      int v22 = 1;
      if (*((void *)&v305 + 1) <= 0x4000000uLL && *((void *)&v306 + 1) <= 0x4000000uLL)
      {
        uint64_t v211 = 0;
        char v212 = 0;
        v209[1] = 0;
        v209[0] = 0;
        char v210 = 0;
        char v219 = 1;
        unint64_t v39 = *(void *)(v24 + 128);
        uint64_t v40 = *(void *)(v24 + 120);
        uint64_t v213 = *(void *)(v24 + 136);
        uint64_t v214 = v40;
        uint64_t v41 = *(void *)(v24 + 200);
        unint64_t v215 = v39;
        uint64_t v216 = v41;
        int v42 = *(_DWORD *)(v24 + 144);
        int v217 = v42;
        char v218 = *(unsigned char *)(v24 + 149);
        unint64_t PreferredShPref = ZinMirNERastParamsOpt::GetPreferredShPref((uint64_t)v96, (uint64_t)v209);
        uint64_t v44 = PreferredShPref;
        uint64_t v14 = 0;
        if (PreferredShPref - 1 >= v39)
        {
          uint64_t v23 = v96;
        }
        else
        {
          uint64_t v23 = v96;
          if (!v42)
          {
            if (*(void *)(v24 + 136) <= PreferredShPref)
            {
              uint64_t v14 = 0;
            }
            else
            {
              ZinMirNERastParamsOpt::FindCandidate((uint64_t *)&v97, PreferredShPref, PreferredShPref, 1u, 0, 0, (char **)&v207);
              unint64_t v45 = v207;
              if (v207 == v208)
              {
                uint64_t v14 = 0;
                uint64_t v23 = v96;
              }
              else
              {
                ZinMirNERastParamsOpt::PruneAndSortCandidates((unint64_t *)&v207, v44);
                uint64_t v47 = *((void *)v207 + 5);
                uint64_t v46 = *((void *)v207 + 6);
                uint64_t v49 = *((void *)v207 + 7);
                uint64_t v48 = *((void *)v207 + 8);
                ZinNECustomPerfInfo::ZinNECustomPerfInfo((ZinNECustomPerfInfo *)v198, (const ZinNECustomPerfInfo *)v220);
                uint64_t v201 = v47;
                char v202 = 1;
                uint64_t v205 = v46;
                char v206 = 1;
                uint64_t v203 = v49;
                char v204 = 1;
                uint64_t v199 = v48;
                char v200 = 1;
                uint64_t v185 = 0;
                long long v184 = 0u;
                long long v183 = 0u;
                long long v182 = 0u;
                long long v181 = 0u;
                long long v180 = 0u;
                long long v179 = 0u;
                long long v178 = 0u;
                long long v177 = 0u;
                long long v176 = 0u;
                long long v175 = 0u;
                memset(v174, 0, sizeof(v174));
                char v50 = operator new(8uLL);
                long long __p = v50;
                *char v50 = 0;
                int v188 = v50 + 1;
                int v187 = v50 + 1;
                uint64_t v190 = 0;
                uint64_t v189 = 0;
                long long v191 = v94;
                long long v192 = v94;
                long long v193 = v94;
                long long v194 = v94;
                unint64_t v195 = 0;
                char v196 = 0;
                unint64_t v197 = 0;
                ZinIrPerf::ZinIrPerf((uint64_t)&v100, (uint64_t)v28, (long long *)buf, (uint64_t *)v296);
                uint64_t v23 = v96;
                if (ZinANELayer::CalculatePerf(v96, (ZinIrPerf *)&v100, (const ZinCustomPerfInfo *)v198, (ZinPerfDescriptor *)v174))
                {
                  uint64_t v14 = 3;
                }
                else
                {
                  if (v320 < v195 || v323 < v197 || *((double *)&v301[2] + 1) < *((double *)&v175 + 1)) {
                    BOOL v38 = 0;
                  }
                  uint64_t v14 = 0;
                }
                ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&v100);
                if (__p)
                {
                  int v187 = __p;
                  operator delete(__p);
                }
                ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)v198);
                unint64_t v45 = v207;
              }
              if (v45)
              {
                uint64_t v208 = v45;
                operator delete(v45);
              }
            }
          }
        }
        int v22 = v38;
      }
    }
    *(void *)&v220[0] = &unk_26C34D080;
    if ((void)v266)
    {
      *((void *)&v266 + 1) = v266;
      operator delete((void *)v266);
    }
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v220);
    if (v312)
    {
      v313 = v312;
      operator delete(v312);
    }
    ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v293);
    uint64_t v25 = v299;
    if (v299) {
      goto LABEL_60;
    }
  }
LABEL_61:
  if (v97)
  {
    long long v98 = v97;
    operator delete(v97);
  }
  if (!v14)
  {
    int v83 = v22;
    unint64_t v52 = *(void *)(v84[1] - 16);
    BOOL v53 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)v23 + 33));
    unsigned __int8 FatTileEnable = MirInfoChannelAssignment::GetFatTileEnable(v53);
    int v54 = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment(*((ZinEngineLayerMirInfo **)v96 + 33));
    uint64_t Lut = ZinIrTarget::GetLut(v54);
    uint64_t v55 = *v84;
    uint64_t v56 = v84[1];
    if (*v84 == v56)
    {
      unint64_t v95 = -1;
    }
    else
    {
      unint64_t v95 = -1;
      do
      {
        if (*(void *)(v55 + 64) == v52)
        {
          unint64_t v57 = *(void *)(v55 + 40);
          unint64_t v58 = *(void *)(v55 + 48);
          unint64_t v59 = *(void *)(v55 + 56);
          int v60 = *(_DWORD *)(v55 + 72);
          char v61 = *(unsigned char *)(v55 + 76);
          unint64_t v62 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(void *)v96 + 368))(v96, 4);
          uint64_t v63 = (*(uint64_t (**)(ZinANELayer *, uint64_t))(*(void *)v96 + 368))(v96, 3);
          TileSrc = (unsigned int *)ZinMirL2Config::GetTileSrc(*((void *)v96 + 33) + 120, 0);
          unint64_t WUCost = NERasterization::GetWUCost(v57, v58, v59, v52, v60, v61, v62, v63, Lut, FatTileEnable, *TileSrc, (uint64_t)v93);
          unint64_t v66 = v95;
          if (WUCost < v95) {
            unint64_t v66 = WUCost;
          }
          unint64_t v95 = v66;
        }
        v55 += 80;
      }
      while (v55 != v56);
    }
    LOWORD(v174[0]) = 257;
    BYTE2(v174[0]) = 1;
    *(_DWORD *)((char *)v174 + 6) = 0;
    *(_DWORD *)((char *)v174 + 3) = 0;
    *(_DWORD *)((char *)v174 + 11) = 0;
    *(_DWORD *)((char *)v174 + 1std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_DWORD *)(*((void *)v96 + 8) + 8) != 85;
    ZinIrHalParameters::GetOperationCondition(v93, *(double *)(v85 + 280), *(_DWORD *)(v85 + 288), *(_DWORD *)(v85 + 292), (uint64_t)v198);
    ZinIrPerf::ZinIrPerf((uint64_t)v293, (uint64_t)v93, v198, (uint64_t *)v174);
    uint64_t v68 = *v84;
    uint64_t v67 = v84[1];
    if (*v84 == v67)
    {
      ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v293);
      return 0;
    }
    else
    {
      __asm { FMOV            V0.2D, #-1.0 }
      long long v86 = _Q0;
      while (*(unsigned char *)(*((void *)v96 + 2) + 541) && *(void *)(v68 + 40) > 4uLL)
      {
        v68 += 80;
        if (v68 == v67)
        {
          uint64_t v14 = 0;
          goto LABEL_120;
        }
      }
      char v71 = *v91;
      uint64_t v230 = 0;
      long long v229 = 0u;
      long long v228 = 0u;
      long long v227 = 0u;
      long long v226 = 0u;
      long long v225 = 0u;
      long long v224 = 0u;
      long long v223 = 0u;
      long long v222 = 0u;
      long long v221 = 0u;
      memset(v220, 0, sizeof(v220));
      long long v72 = operator new(8uLL);
      BOOL v73 = 0;
      int v231 = v72;
      void *v72 = 0;
      int v233 = v72 + 1;
      int v232 = v72 + 1;
      uint64_t v234 = 0;
      uint64_t v235 = 0;
      long long v236 = v86;
      long long v237 = v86;
      long long v238 = v86;
      long long v239 = v86;
      uint64_t v240 = 0;
      char v241 = 0;
      uint64_t v242 = 0;
      int v74 = v92[2];
      if (v92[2] && *v92) {
        BOOL v73 = v92[1] != 0;
      }
      long long v75 = *(_OWORD *)(v91 + 17);
      v301[0] = *(_OWORD *)(v91 + 1);
      v301[1] = v75;
      *(void *)((char *)&v301[1] + 15) = *((void *)v91 + 4);
      int v76 = v92[2];
      int v77 = *(unsigned __int16 *)v92;
      char v101 = 0;
      char v112 = 0;
      char v113 = 0;
      char v114 = 0;
      char v115 = 0;
      char v124 = 0;
      LOBYTE(v125) = 0;
      char v126 = 0;
      char v127 = 0;
      char v128 = 0;
      char v129 = 0;
      char v130 = 0;
      char v131 = 0;
      char v132 = 0;
      char v133 = 0;
      char v134 = 0;
      char v135 = 0;
      char v136 = 0;
      char v137 = 0;
      char v138 = 0;
      char v139 = 0;
      char v140 = 0;
      char v141 = 0;
      char v142 = 0;
      char v143 = 0;
      char v144 = 0;
      long long v100 = &unk_26C34D080;
      __int16 v145 = 0;
      LOBYTE(v15std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
      char v151 = 0;
      __int16 v152 = 256;
      long long v147 = 0;
      uint64_t v148 = 0;
      unint64_t v146 = 0;
      __int16 v149 = 0;
      LOBYTE(v153) = 0;
      char v154 = 0;
      __int16 v155 = 0;
      char v156 = 0;
      char v157 = 0;
      LOBYTE(v158) = 0;
      char v159 = 0;
      LOBYTE(v16std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
      char v161 = 0;
      LOBYTE(v162) = 0;
      char v163 = 0;
      LOBYTE(v164) = 0;
      char v165 = 0;
      LOBYTE(v166) = 0;
      char v167 = 0;
      char v168 = 0;
      char v169 = 0;
      __int16 v170 = 0;
      LOBYTE(v171) = 0;
      char v172 = 0;
      int v173 = 0;
      LOWORD(v173) = MirInfoChannelAssignment::GetFatTileEnable((MirInfoChannelAssignment *)v68) | 0x100;
      uint64_t v171 = ZinIrTarget::GetLut((ZinIrTarget *)v68);
      char v172 = 1;
      uint64_t ActiveNEPerCluster = MirInfoChannelAssignment::GetActiveNEPerCluster((MirInfoChannelAssignment *)v68);
      if (!v154) {
        char v154 = 1;
      }
      uint64_t v153 = ActiveNEPerCluster;
      uint64_t v158 = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)v68);
      char v159 = 1;
      uint64_t v164 = *(void *)(v68 + 48);
      char v165 = 1;
      uint64_t v160 = *(void *)(v68 + 40);
      char v161 = 1;
      uint64_t v162 = *(void *)(v68 + 56);
      char v163 = 1;
      uint64_t v125 = *(void *)(v68 + 64);
      char v126 = 1;
      int v150 = *(_DWORD *)(v68 + 72);
      char v151 = 1;
      char v79 = *(unsigned char *)(v68 + 76);
      if (!HIBYTE(v152)) {
        HIBYTE(v152) = 1;
      }
      LOBYTE(v152) = v79;
      if (v18 > 0.0)
      {
        float v166 = v18;
        char v167 = 1;
      }
      char v101 = v71;
      unsigned int v80 = v77 | (v76 << 16);
      long long v102 = v301[0];
      *(_OWORD *)unint64_t v103 = v301[1];
      *(void *)&v103[15] = *(void *)((char *)&v301[1] + 15);
      char v104 = 1;
      int v105 = v90;
      char v106 = 1;
      __int16 v81 = v77 | 0x100;
      if (v80 < 0x10000) {
        __int16 v81 = 0;
      }
      __int16 v107 = v81;
      char v108 = 0;
      if (!v112) {
        char v112 = 1;
      }
      char v109 = 0;
      char v110 = 0;
      char v111 = 0;
      if (v80 >= 0x10000)
      {
        char v115 = 0;
        char v116 = 0;
        char v117 = 0;
        char v118 = 0;
        __int16 v119 = BYTE1(v77) | 0x100;
        char v120 = 0;
        if (!v124) {
          char v124 = 1;
        }
        char v121 = 0;
        char v122 = 0;
        char v123 = 0;
      }
      if (!ZinANELayer::CalculatePerf(v96, (ZinIrPerf *)v293, (const ZinCustomPerfInfo *)&v100, (ZinPerfDescriptor *)v220))
      {
        if (!*(_DWORD *)(*((void *)v96 + 33) + 144) && (unint64_t)v228 / v95 != 1) {
          (*(void (**)(ZinANELayer *, uint64_t))(*(void *)v96 + 368))(v96, 3);
        }
        MirInfoChannelAssignment::IsMulticastEnabled((MirInfoChannelAssignment *)v68);
        if (v74)
        {
          if (v83 && v92[4]) {
            FifoMode::GetFifoModeUtil(v93, v82);
          }
          if (v73) {
            operator new();
          }
          operator new();
        }
        operator new();
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates(buf, &buf[1]);
      }
      uint64_t v14 = 3;
      long long v100 = &unk_26C34D080;
      if (v146)
      {
        long long v147 = v146;
        operator delete(v146);
      }
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v100);
      if (v231)
      {
        int v232 = v231;
        operator delete(v231);
      }
LABEL_120:
      ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v293);
    }
  }
  return v14;
}

void sub_2112377B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38)
{
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&a38);
  unint64_t v39 = (void *)STACK[0x518];
  if (STACK[0x518])
  {
    STACK[0x520] = (unint64_t)v39;
    operator delete(v39);
  }
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0x5A0]);
  uint64_t v40 = (void *)STACK[0x878];
  if (STACK[0x878])
  {
    STACK[0x880] = (unint64_t)v40;
    operator delete(v40);
  }
  ZinNECustomPerfInfo::~ZinNECustomPerfInfo((ZinNECustomPerfInfo *)&STACK[0x8E0]);
  uint64_t v41 = (void *)STACK[0x1038];
  if (STACK[0x1038])
  {
    STACK[0x1040] = (unint64_t)v41;
    operator delete(v41);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0xBB8]);
  int v42 = (void *)STACK[0xF58];
  if (STACK[0xF58])
  {
    STACK[0xF60] = (unint64_t)v42;
    operator delete(v42);
  }
  if (a35) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

BOOL ZinMirNERastParamsOpt::CheckAvailabilityForSmallerTileHeightThanWorkHeight(ZinMirNERastParamsOpt *this, const ZinNELayer *a2, const ZinIrHalParameters *a3)
{
  uint64_t v3 = *((void *)this + 33);
  if (*(unsigned char *)(v3 + 233) || *(_DWORD *)(*((void *)this + 8) + 8) == 93) {
    return 0;
  }
  if (*((unsigned char *)a2 + 640))
  {
    InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 0);
    if (ZinIrTensor::IsResident(InputTensor)) {
      return 0;
    }
    uint64_t v3 = *((void *)this + 33);
  }
  return *(_DWORD *)(v3 + 144) != 1;
}

void ZinMirNERastParamsOpt::EnumerateTileWorkUnitCandidates(uint64_t **a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, void *a8@<X8>)
{
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  uint64_t v14 = 16;
  if (a5 < 0x10) {
    uint64_t v14 = a5;
  }
  if (a7) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = a4;
  }
  Hal = ZinIrTarget::GetHal(a1[2], (ZinIrTarget *)a1[2][20]);
  uint64_t v17 = (const ZinNELayer *)(*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  BOOL v19 = !ZinMirNERastParamsOpt::CheckAvailabilityForSmallerTileHeightThanWorkHeight((ZinMirNERastParamsOpt *)a1, v17, v18);
  if (v15 >= a5) {
    LOBYTE(v19) = 1;
  }
  if (!v19)
  {
    do
    {
      long long __p = 0;
      int v22 = 0;
      uint64_t v23 = 0;
      ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates((uint64_t)a1, a2, a3, (char **)&__p, v15, 1u);
      std::vector<ZinMirWorkUnitShapeCandidate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>>((uint64_t)a8, a8[1], (char *)__p, v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (unsigned char *)__p) >> 4));
      if (__p)
      {
        int v22 = (char *)__p;
        operator delete(__p);
      }
      if (a5 / a6 < 0x65) {
        unint64_t Pow2 = ZinRoundDownToMultipleOf(v15 + a6, a6);
      }
      else {
        unint64_t Pow2 = ZinRoundUpToNextPow2(v15 + 1);
      }
      unint64_t v15 = Pow2;
    }
    while (Pow2 < a5);
  }
  long long __p = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates((uint64_t)a1, a2, a3, (char **)&__p, a5, 1u);
  std::vector<ZinMirWorkUnitShapeCandidate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>>((uint64_t)a8, a8[1], (char *)__p, v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (unsigned char *)__p) >> 4));
  if (__p)
  {
    int v22 = (char *)__p;
    operator delete(__p);
  }
}

void sub_211237B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void ZinMirNERastParamsOpt::CostWithoutResidencyMode::~CostWithoutResidencyMode(ZinMirNERastParamsOpt::CostWithoutResidencyMode *this)
{
}

void ZinMirNERastParamsOpt::CostWidenWorkunitsMode::~CostWidenWorkunitsMode(ZinMirNERastParamsOpt::CostWidenWorkunitsMode *this)
{
}

void ZinMirNERastParamsOpt::FindCandidate(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, unsigned __int8 a6@<W5>, char **a7@<X8>)
{
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 != v8)
  {
    unint64_t v13 = 0;
    uint64_t v14 = a4;
    uint64_t v15 = a6;
    long long v16 = a7 + 2;
    char v35 = a7 + 2;
    do
    {
      if (*(void *)(v7 + 40) != a2) {
        goto LABEL_31;
      }
      if (v14)
      {
        BOOL v17 = a3 == *(void *)(v7 + 48);
        if (!v15)
        {
          if (a3 == *(void *)(v7 + 48)) {
            goto LABEL_12;
          }
          goto LABEL_31;
        }
      }
      else
      {
        if (!v15) {
          goto LABEL_12;
        }
        BOOL v17 = 1;
      }
      if (a5 == *(void *)(v7 + 56) && v17)
      {
LABEL_12:
        if ((unint64_t)v13 >= *v16)
        {
          float v21 = *a7;
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a7) >> 4);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x333333333333333) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((uint64_t)(*v16 - (void)v21) >> 4) > v23) {
            unint64_t v23 = 0x999999999999999ALL * ((uint64_t)(*v16 - (void)v21) >> 4);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v16 - (void)v21) >> 4) >= 0x199999999999999) {
            unint64_t v24 = 0x333333333333333;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24)
          {
            uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)v16, v24);
            float v21 = *a7;
            unint64_t v13 = a7[1];
            long long v16 = v35;
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v26 = &v25[80 * v22];
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v7;
          long long v27 = *(_OWORD *)(v7 + 16);
          long long v28 = *(_OWORD *)(v7 + 32);
          long long v29 = *(_OWORD *)(v7 + 64);
          *((_OWORD *)v26 + 3) = *(_OWORD *)(v7 + 48);
          *((_OWORD *)v26 + 4) = v29;
          *((_OWORD *)v26 + 1) = v27;
          *((_OWORD *)v26 + 2) = v28;
          if (v13 == v21)
          {
            unsigned int v34 = &v25[80 * v22];
          }
          else
          {
            unint64_t v30 = &v25[80 * v22];
            do
            {
              *((_OWORD *)v30 - 5) = *((_OWORD *)v13 - 5);
              long long v31 = *((_OWORD *)v13 - 4);
              long long v32 = *((_OWORD *)v13 - 3);
              long long v33 = *((_OWORD *)v13 - 2);
              unsigned int v34 = v30 - 80;
              *(_OWORD *)(v30 - 18) = *(_OWORD *)(v13 - 18);
              *((_OWORD *)v30 - 3) = v32;
              *((_OWORD *)v30 - 2) = v33;
              *((_OWORD *)v30 - 4) = v31;
              v13 -= 80;
              v30 -= 80;
            }
            while (v13 != v21);
          }
          unint64_t v13 = v26 + 80;
          *a7 = v34;
          a7[1] = v26 + 80;
          a7[2] = &v25[80 * v24];
          if (v21)
          {
            operator delete(v21);
            long long v16 = v35;
          }
        }
        else
        {
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v7;
          long long v18 = *(_OWORD *)(v7 + 16);
          long long v19 = *(_OWORD *)(v7 + 32);
          long long v20 = *(_OWORD *)(v7 + 64);
          *((_OWORD *)v13 + 3) = *(_OWORD *)(v7 + 48);
          *((_OWORD *)v13 + 4) = v20;
          *((_OWORD *)v13 + 1) = v18;
          *((_OWORD *)v13 + 2) = v19;
          v13 += 80;
        }
        a7[1] = v13;
      }
LABEL_31:
      v7 += 80;
    }
    while (v7 != v8);
  }
}

void sub_211237E04(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirNERastParamsOpt::GetPreferredShPref(uint64_t a1, uint64_t a2)
{
  Hal = ZinIrTarget::GetHal(*(uint64_t **)(a1 + 16), *(ZinIrTarget **)(*(void *)(a1 + 16) + 160));
  uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  unint64_t v6 = *(void *)(a2 + 64);
  BOOL v7 = v6 >= *(void *)(*(void *)(a1 + 264) + 200) >> 1 || v6 >= 0x10;
  if (v7 && *(void *)(a2 + 40) < *(void *)(v5 + 656)) {
    return 2 * (*(void *)(a1 + 200) == 0);
  }
  else {
    return 0;
  }
}

void ZinMirNERastParamsOpt::PruneAndSortCandidates(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  __int16 v4 = (_OWORD *)a1[1];
  unint64_t v5 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v4 - v3) >> 4));
  uint64_t v15 = a2;
  if (v4 == (_OWORD *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*,false>(v3, v4, v6, 1);
  uint64_t v8 = (char *)*a1;
  unint64_t v7 = a1[1];
  if (*a1 == v7)
  {
    uint64_t v10 = (char *)a1[1];
  }
  else
  {
    uint64_t v9 = *(void *)(v7 - 16);
    uint64_t v10 = (char *)a1[1];
    do
    {
      if (*((void *)v8 + 8) == v9)
      {
        v8 += 80;
      }
      else
      {
        int64_t v11 = v10 - (v8 + 80);
        if (v10 != v8 + 80) {
          memmove(v8, v8 + 80, v11 - 2);
        }
        uint64_t v10 = &v8[v11];
        a1[1] = (unint64_t)&v8[v11];
      }
    }
    while (v8 != v10);
    unint64_t v7 = *a1;
  }
  uint64_t v14 = &v15;
  long long v16 = &v14;
  unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v10[-v7] >> 4));
  if (v10 == (char *)v7) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*,false>(v7, v10, (int ***)&v16, v13, 1);
}

void ZinNECustomPerfInfo::ZinNECustomPerfInfo(ZinNECustomPerfInfo *this, const ZinNECustomPerfInfo *a2)
{
  *(void *)this = &unk_26C34A990;
  memcpy((char *)this + 8, (char *)a2 + 8, 0x201uLL);
  *(void *)this = &unk_26C34D080;
  *((_WORD *)this + 264) = *((_WORD *)a2 + 264);
  *((void *)this + 68) = 0;
  *((void *)this + 69) = 0;
  *((void *)this + 67) = 0;
  std::vector<WorkUnit>::__init_with_size[abi:ne180100]<WorkUnit*,WorkUnit*>((void *)this + 67, *((const void **)a2 + 67), *((void *)a2 + 68), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 68) - *((void *)a2 + 67)) >> 4));
  long long v4 = *((_OWORD *)a2 + 35);
  long long v5 = *((_OWORD *)a2 + 37);
  *((_OWORD *)this + 36) = *((_OWORD *)a2 + 36);
  *((_OWORD *)this + 37) = v5;
  *((_OWORD *)this + 35) = v4;
  long long v6 = *((_OWORD *)a2 + 38);
  long long v7 = *((_OWORD *)a2 + 39);
  long long v8 = *((_OWORD *)a2 + 41);
  *((_OWORD *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *((_OWORD *)a2 + 40);
  *((_OWORD *)this + 41) = v8;
  *((_OWORD *)this + 38) = v6;
  *((_OWORD *)this + 39) = v7;
  long long v9 = *((_OWORD *)a2 + 42);
  long long v10 = *((_OWORD *)a2 + 43);
  long long v11 = *((_OWORD *)a2 + 44);
  *((_DWORD *)this + 18std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *((_DWORD *)a2 + 180);
  *((_OWORD *)this + 43) = v10;
  *((_OWORD *)this + 44) = v11;
  *((_OWORD *)this + 42) = v9;
}

void sub_2112380AC(_Unwind_Exception *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*,false>(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((void *)a2 - 2) < *(void *)(v10 + 64))
                {
                  long long v151 = *(_OWORD *)v10;
                  *(_OWORD *)int v187 = *(_OWORD *)(v10 + 48);
                  *(_OWORD *)&v187[16] = *(_OWORD *)(v10 + 64);
                  long long v163 = *(_OWORD *)(v10 + 16);
                  long long v175 = *(_OWORD *)(v10 + 32);
                  long long v60 = *(a2 - 3);
                  long long v59 = *(a2 - 2);
                  long long v61 = *(a2 - 4);
                  *(_OWORD *)(v10 + 62) = *(_OWORD *)((char *)a2 - 18);
                  *(_OWORD *)(v10 + 32) = v60;
                  *(_OWORD *)(v10 + 48) = v59;
                  *(_OWORD *)(v10 + 16) = v61;
                  *(_OWORD *)unint64_t v10 = *(a2 - 5);
                  *(_OWORD *)((char *)a2 - 18) = *(_OWORD *)&v187[14];
                  *(a2 - 3) = v175;
                  *(a2 - 2) = *(_OWORD *)v187;
                  *(a2 - 4) = v163;
                  *(a2 - 5) = v151;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((_OWORD *)v10, v10 + 80, (uint64_t)(a2 - 5));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((__n128 *)v10, (__n128 *)(v10 + 80), (__n128 *)(v10 + 160), (uint64_t)(a2 - 5));
                break;
              case 5uLL:
                unint64_t v62 = (long long *)(v10 + 80);
                uint64_t v63 = (long long *)(v10 + 160);
                unint64_t v64 = (long long *)(v10 + 240);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((__n128 *)v10, (__n128 *)(v10 + 80), (__n128 *)(v10 + 160), v10 + 240);
                if (*((void *)a2 - 2) < *(void *)(v10 + 304))
                {
                  long long v176 = *(_OWORD *)(v10 + 272);
                  *(_OWORD *)int v188 = *(_OWORD *)(v10 + 288);
                  *(_OWORD *)&v188[16] = *(_OWORD *)(v10 + 304);
                  long long v152 = *v64;
                  long long v164 = *(_OWORD *)(v10 + 256);
                  long long v66 = *(a2 - 3);
                  long long v65 = *(a2 - 2);
                  long long v67 = *(a2 - 4);
                  *(_OWORD *)(v10 + 302) = *(_OWORD *)((char *)a2 - 18);
                  *(_OWORD *)(v10 + 272) = v66;
                  *(_OWORD *)(v10 + 288) = v65;
                  *(_OWORD *)(v10 + 256) = v67;
                  *unint64_t v64 = *(a2 - 5);
                  *(a2 - 5) = v152;
                  *(_OWORD *)((char *)a2 - 18) = *(_OWORD *)&v188[14];
                  *(a2 - 3) = v176;
                  *(a2 - 2) = *(_OWORD *)v188;
                  *(a2 - 4) = v164;
                  if (*(void *)(v10 + 304) < *(void *)(v10 + 224))
                  {
                    long long v177 = *(_OWORD *)(v10 + 192);
                    *(_OWORD *)uint64_t v189 = *(_OWORD *)(v10 + 208);
                    *(_OWORD *)&v189[16] = *(_OWORD *)(v10 + 224);
                    long long v153 = *v63;
                    long long v165 = *(_OWORD *)(v10 + 176);
                    long long v68 = *(_OWORD *)(v10 + 288);
                    *(_OWORD *)(v10 + 192) = *(_OWORD *)(v10 + 272);
                    *(_OWORD *)(v10 + 208) = v68;
                    *(_OWORD *)(v10 + 222) = *(_OWORD *)(v10 + 302);
                    long long v69 = *(_OWORD *)(v10 + 256);
                    long long *v63 = *v64;
                    *(_OWORD *)(v10 + 176) = v69;
                    *(_OWORD *)(v10 + 302) = *(_OWORD *)&v189[14];
                    *(_OWORD *)(v10 + 272) = v177;
                    *(_OWORD *)(v10 + 288) = *(_OWORD *)v189;
                    *unint64_t v64 = v153;
                    *(_OWORD *)(v10 + 256) = v165;
                    if (*(void *)(v10 + 224) < *(void *)(v10 + 144))
                    {
                      long long v178 = *(_OWORD *)(v10 + 112);
                      *(_OWORD *)uint64_t v190 = *(_OWORD *)(v10 + 128);
                      *(_OWORD *)&v190[16] = *(_OWORD *)(v10 + 144);
                      long long v154 = *v62;
                      long long v166 = *(_OWORD *)(v10 + 96);
                      long long v70 = *(_OWORD *)(v10 + 208);
                      *(_OWORD *)(v10 + 112) = *(_OWORD *)(v10 + 192);
                      *(_OWORD *)(v10 + 128) = v70;
                      *(_OWORD *)(v10 + 142) = *(_OWORD *)(v10 + 222);
                      long long v71 = *(_OWORD *)(v10 + 176);
                      long long *v62 = *v63;
                      *(_OWORD *)(v10 + 96) = v71;
                      *(_OWORD *)(v10 + 222) = *(_OWORD *)&v190[14];
                      *(_OWORD *)(v10 + 192) = v178;
                      *(_OWORD *)(v10 + 208) = *(_OWORD *)v190;
                      long long *v63 = v154;
                      *(_OWORD *)(v10 + 176) = v166;
                      if (*(void *)(v10 + 144) < *(void *)(v10 + 64))
                      {
                        long long v155 = *(_OWORD *)v10;
                        *(_OWORD *)long long v191 = *(_OWORD *)(v10 + 48);
                        *(_OWORD *)&v191[16] = *(_OWORD *)(v10 + 64);
                        long long v167 = *(_OWORD *)(v10 + 16);
                        long long v179 = *(_OWORD *)(v10 + 32);
                        *(_OWORD *)(v10 + 62) = *(_OWORD *)(v10 + 142);
                        long long v72 = *(_OWORD *)(v10 + 128);
                        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 112);
                        *(_OWORD *)(v10 + 48) = v72;
                        long long v73 = *(_OWORD *)(v10 + 96);
                        *(_OWORD *)unint64_t v10 = *v62;
                        *(_OWORD *)(v10 + 16) = v73;
                        *(_OWORD *)(v10 + 142) = *(_OWORD *)&v191[14];
                        *(_OWORD *)(v10 + 112) = v179;
                        *(_OWORD *)(v10 + 128) = *(_OWORD *)v191;
                        long long *v62 = v155;
                        *(_OWORD *)(v10 + 96) = v167;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1919)
          {
            int v74 = (_OWORD *)(v10 + 80);
            BOOL v76 = (_OWORD *)v10 == a2 || v74 == a2;
            if (a4)
            {
              if (!v76)
              {
                uint64_t v77 = 0;
                BOOL v78 = (void *)v10;
                do
                {
                  char v79 = v74;
                  unint64_t v80 = v78[18];
                  if (v80 < v78[8])
                  {
                    long long v180 = v79[2];
                    long long v192 = v79[3];
                    long long v156 = *v79;
                    long long v168 = v79[1];
                    uint64_t v81 = v78[19];
                    uint64_t v82 = v77;
                    while (1)
                    {
                      int v83 = (_OWORD *)(v10 + v82);
                      long long v84 = *(_OWORD *)(v10 + v82 + 48);
                      v83[7] = *(_OWORD *)(v10 + v82 + 32);
                      v83[8] = v84;
                      *(_OWORD *)((char *)v83 + 142) = *(_OWORD *)(v10 + v82 + 62);
                      long long v85 = *(_OWORD *)(v10 + v82 + 16);
                      v83[5] = *(_OWORD *)(v10 + v82);
                      v83[6] = v85;
                      if (!v82) {
                        break;
                      }
                      v82 -= 80;
                      if (v80 >= *((void *)v83 - 2))
                      {
                        uint64_t v86 = v10 + v82 + 80;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v86 = v10;
LABEL_84:
                    *(_OWORD *)(v86 + 32) = v180;
                    *(_OWORD *)(v86 + 48) = v192;
                    *(_OWORD *)uint64_t v86 = v156;
                    *(_OWORD *)(v86 + 16) = v168;
                    *(void *)(v86 + 64) = v80;
                    *(_DWORD *)(v86 + 72) = v81;
                    *(_WORD *)(v86 + 76) = WORD2(v81);
                  }
                  int v74 = v79 + 5;
                  v77 += 80;
                  BOOL v78 = v79;
                }
                while (v79 + 5 != a2);
              }
            }
            else if (!v76)
            {
              do
              {
                char v129 = v74;
                unint64_t v130 = *(void *)(a1 + 144);
                if (v130 < *(void *)(a1 + 64))
                {
                  long long v183 = v74[2];
                  long long v195 = v74[3];
                  long long v159 = *v74;
                  long long v171 = v74[1];
                  uint64_t v131 = *(void *)(a1 + 152);
                  char v132 = v129;
                  do
                  {
                    long long v133 = *(v132 - 2);
                    v132[2] = *(v132 - 3);
                    v132[3] = v133;
                    *(_OWORD *)((char *)v132 + 62) = *(_OWORD *)((char *)v132 - 18);
                    long long v134 = *(v132 - 4);
                    *char v132 = *(v132 - 5);
                    v132[1] = v134;
                    unint64_t v135 = *((void *)v132 - 12);
                    v132 -= 5;
                  }
                  while (v130 < v135);
                  v132[2] = v183;
                  v132[3] = v195;
                  *char v132 = v159;
                  v132[1] = v171;
                  *((void *)v132 + 8) = v130;
                  *((_DWORD *)v132 + 18) = v131;
                  *((_WORD *)v132 + 38) = WORD2(v131);
                }
                int v74 = v129 + 5;
                a1 = (unint64_t)v129;
              }
              while (v129 + 5 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((_OWORD *)v10 != a2)
            {
              int64_t v87 = (v12 - 2) >> 1;
              int64_t v88 = v87;
              do
              {
                int64_t v89 = v88;
                if (v87 >= v88)
                {
                  uint64_t v90 = (2 * v88) | 1;
                  unint64_t v91 = v10 + 80 * v90;
                  if (2 * v88 + 2 < (uint64_t)v12)
                  {
                    unint64_t v92 = *(void *)(v10 + 80 * v90 + 64);
                    unint64_t v93 = *(void *)(v91 + 144);
                    v91 += 80 * (v92 < v93);
                    if (v92 < v93) {
                      uint64_t v90 = 2 * v88 + 2;
                    }
                  }
                  unint64_t v94 = *(void *)(v10 + 80 * v88 + 64);
                  if (*(void *)(v91 + 64) >= v94)
                  {
                    unint64_t v95 = v10 + 80 * v89;
                    long long v181 = *(_OWORD *)(v95 + 32);
                    long long v193 = *(_OWORD *)(v95 + 48);
                    long long v157 = *(_OWORD *)v95;
                    long long v169 = *(_OWORD *)(v95 + 16);
                    uint64_t v96 = *(void *)(v95 + 72);
                    do
                    {
                      long long v97 = (_OWORD *)v95;
                      unint64_t v95 = v91;
                      *long long v97 = *(_OWORD *)v91;
                      long long v98 = *(_OWORD *)(v91 + 16);
                      long long v99 = *(_OWORD *)(v91 + 32);
                      long long v100 = *(_OWORD *)(v91 + 48);
                      *(_OWORD *)((char *)v97 + 62) = *(_OWORD *)(v91 + 62);
                      v97[2] = v99;
                      v97[3] = v100;
                      v97[1] = v98;
                      if (v87 < v90) {
                        break;
                      }
                      uint64_t v101 = (2 * v90) | 1;
                      unint64_t v91 = v10 + 80 * v101;
                      uint64_t v102 = 2 * v90 + 2;
                      if (v102 < (uint64_t)v12)
                      {
                        unint64_t v103 = *(void *)(v10 + 80 * v101 + 64);
                        unint64_t v104 = *(void *)(v91 + 144);
                        v91 += 80 * (v103 < v104);
                        if (v103 < v104) {
                          uint64_t v101 = v102;
                        }
                      }
                      uint64_t v90 = v101;
                    }
                    while (*(void *)(v91 + 64) >= v94);
                    *(_OWORD *)(v95 + 32) = v181;
                    *(_OWORD *)(v95 + 48) = v193;
                    *(_OWORD *)unint64_t v95 = v157;
                    *(_OWORD *)(v95 + 16) = v169;
                    *(void *)(v95 + 64) = v94;
                    *(_DWORD *)(v95 + 72) = v96;
                    *(_WORD *)(v95 + 76) = WORD2(v96);
                  }
                }
                int64_t v88 = v89 - 1;
              }
              while (v89);
              int64_t v105 = v11 / 0x50uLL;
              do
              {
                uint64_t v106 = 0;
                long long v158 = *(_OWORD *)v10;
                *(_OWORD *)long long v194 = *(_OWORD *)(v10 + 48);
                *(_OWORD *)&v194[16] = *(_OWORD *)(v10 + 64);
                long long v170 = *(_OWORD *)(v10 + 16);
                long long v182 = *(_OWORD *)(v10 + 32);
                __int16 v107 = (_OWORD *)v10;
                do
                {
                  uint64_t v108 = v106 + 1;
                  char v109 = &v107[5 * v106 + 5];
                  uint64_t v110 = (2 * v106) | 1;
                  uint64_t v111 = 2 * v106 + 2;
                  if (v111 < v105)
                  {
                    unint64_t v112 = *(void *)&v107[5 * v108 + 4];
                    unint64_t v113 = *((void *)v109 + 18);
                    v109 += 5 * (v112 < v113);
                    if (v112 < v113) {
                      uint64_t v110 = v111;
                    }
                  }
                  *__int16 v107 = *v109;
                  long long v114 = v109[1];
                  long long v115 = v109[2];
                  long long v116 = v109[3];
                  *(_OWORD *)((char *)v107 + 62) = *(_OWORD *)((char *)v109 + 62);
                  v107[2] = v115;
                  void v107[3] = v116;
                  v107[1] = v114;
                  __int16 v107 = v109;
                  uint64_t v106 = v110;
                }
                while (v110 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
                a2 -= 5;
                if (v109 == a2)
                {
                  _OWORD *v109 = v158;
                  *(_OWORD *)((char *)v109 + 62) = *(_OWORD *)&v194[14];
                  v109[2] = v182;
                  v109[3] = *(_OWORD *)v194;
                  v109[1] = v170;
                }
                else
                {
                  _OWORD *v109 = *a2;
                  long long v117 = a2[1];
                  long long v118 = a2[2];
                  long long v119 = a2[3];
                  *(_OWORD *)((char *)v109 + 62) = *(_OWORD *)((char *)a2 + 62);
                  v109[2] = v118;
                  v109[3] = v119;
                  v109[1] = v117;
                  *(_OWORD *)((char *)a2 + 62) = *(_OWORD *)&v194[14];
                  a2[2] = v182;
                  a2[3] = *(_OWORD *)v194;
                  a2[1] = v170;
                  *a2 = v158;
                  uint64_t v120 = (uint64_t)v109 - v10 + 80;
                  if (v120 >= 81)
                  {
                    unint64_t v121 = (v120 / 0x50uLL - 2) >> 1;
                    unint64_t v122 = *((void *)v109 + 8);
                    if (*(void *)(v10 + 80 * v121 + 64) < v122)
                    {
                      long long v144 = v109[2];
                      long long v147 = v109[3];
                      long long v138 = *v109;
                      long long v141 = v109[1];
                      uint64_t v123 = *((void *)v109 + 9);
                      do
                      {
                        char v124 = v109;
                        char v109 = (_OWORD *)(v10 + 80 * v121);
                        *char v124 = *v109;
                        long long v125 = v109[1];
                        long long v126 = v109[2];
                        long long v127 = v109[3];
                        *(_OWORD *)((char *)v124 + 62) = *(_OWORD *)((char *)v109 + 62);
                        v124[2] = v126;
                        v124[3] = v127;
                        v124[1] = v125;
                        if (!v121) {
                          break;
                        }
                        unint64_t v121 = (v121 - 1) >> 1;
                      }
                      while (*(void *)(v10 + 80 * v121 + 64) < v122);
                      v109[2] = v144;
                      v109[3] = v147;
                      _OWORD *v109 = v138;
                      v109[1] = v141;
                      *((void *)v109 + 8) = v122;
                      *((_DWORD *)v109 + 18) = v123;
                      *((_WORD *)v109 + 38) = WORD2(v123);
                    }
                  }
                }
              }
              while (v105-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (_OWORD *)(v10 + 80 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x2801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((_OWORD *)a1, a1 + 80 * (v12 >> 1), (uint64_t)(a2 - 5));
            uint64_t v15 = 5 * v13;
            long long v16 = (_OWORD *)(a1 + 80 * v13 - 80);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((_OWORD *)(a1 + 80), (uint64_t)v16, (uint64_t)(a2 - 10));
            uint64_t v17 = a1 + 80 + 16 * v15;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((_OWORD *)(a1 + 160), v17, (uint64_t)(a2 - 15));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(v16, (uint64_t)v14, v17);
            long long v148 = *(_OWORD *)a1;
            *(_OWORD *)long long v184 = *(_OWORD *)(a1 + 48);
            *(_OWORD *)&v184[16] = *(_OWORD *)(a1 + 64);
            long long v160 = *(_OWORD *)(a1 + 16);
            long long v172 = *(_OWORD *)(a1 + 32);
            long long v19 = v14[2];
            long long v18 = v14[3];
            long long v20 = v14[1];
            *(_OWORD *)(a1 + 62) = *(_OWORD *)((char *)v14 + 62);
            *(_OWORD *)(a1 + 32) = v19;
            *(_OWORD *)(a1 + 48) = v18;
            *(_OWORD *)(a1 + 16) = v20;
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)((char *)v14 + 62) = *(_OWORD *)&v184[14];
            void v14[2] = v172;
            v14[3] = *(_OWORD *)v184;
            v14[1] = v160;
            *uint64_t v14 = v148;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((_OWORD *)(a1 + 80 * (v12 >> 1)), a1, (uint64_t)(a2 - 5));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v21 = *(void *)(a1 + 64);
          if (*(void *)(a1 - 16) < v21) {
            goto LABEL_12;
          }
          long long v143 = *(_OWORD *)(a1 + 32);
          long long v146 = *(_OWORD *)(a1 + 48);
          long long v137 = *(_OWORD *)a1;
          long long v140 = *(_OWORD *)(a1 + 16);
          if (v21 >= *((void *)a2 - 2))
          {
            unint64_t v44 = a1 + 80;
            do
            {
              unint64_t v10 = v44;
              if (v44 >= (unint64_t)a2) {
                break;
              }
              unint64_t v45 = *(void *)(v44 + 64);
              v44 += 80;
            }
            while (v21 >= v45);
          }
          else
          {
            unint64_t v42 = a1;
            do
            {
              unint64_t v10 = v42 + 80;
              unint64_t v43 = *(void *)(v42 + 144);
              v42 += 80;
            }
            while (v21 >= v43);
          }
          uint64_t v46 = a2;
          if (v10 < (unint64_t)a2)
          {
            uint64_t v47 = a2;
            do
            {
              uint64_t v46 = v47 - 5;
              unint64_t v48 = *((void *)v47 - 2);
              v47 -= 5;
            }
            while (v21 < v48);
          }
          uint64_t v49 = *(void *)(a1 + 72);
          while (v10 < (unint64_t)v46)
          {
            long long v150 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v186 = *(_OWORD *)(v10 + 48);
            *(_OWORD *)&v186[16] = *(_OWORD *)(v10 + 64);
            long long v162 = *(_OWORD *)(v10 + 16);
            long long v174 = *(_OWORD *)(v10 + 32);
            long long v51 = v46[2];
            long long v50 = v46[3];
            long long v52 = v46[1];
            *(_OWORD *)(v10 + 62) = *(_OWORD *)((char *)v46 + 62);
            *(_OWORD *)(v10 + 32) = v51;
            *(_OWORD *)(v10 + 48) = v50;
            *(_OWORD *)(v10 + 16) = v52;
            *(_OWORD *)unint64_t v10 = *v46;
            *(_OWORD *)((char *)v46 + 62) = *(_OWORD *)&v186[14];
            long long v46[2] = v174;
            v46[3] = *(_OWORD *)v186;
            v46[1] = v162;
            *uint64_t v46 = v150;
            do
            {
              unint64_t v53 = *(void *)(v10 + 144);
              v10 += 80;
            }
            while (v21 >= v53);
            do
            {
              unint64_t v54 = *((void *)v46 - 2);
              v46 -= 5;
            }
            while (v21 < v54);
          }
          uint64_t v55 = (_OWORD *)(v10 - 80);
          BOOL v4 = v10 - 80 >= a1;
          BOOL v5 = v10 - 80 == a1;
          if (v10 - 80 != a1)
          {
            *(_OWORD *)a1 = *v55;
            long long v56 = *(_OWORD *)(v10 - 64);
            long long v57 = *(_OWORD *)(v10 - 48);
            long long v58 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 62) = *(_OWORD *)(v10 - 18);
            *(_OWORD *)(a1 + 32) = v57;
            *(_OWORD *)(a1 + 48) = v58;
            *(_OWORD *)(a1 + 16) = v56;
          }
          a4 = 0;
          *(_OWORD *)(v10 - 48) = v143;
          *(_OWORD *)(v10 - 32) = v146;
          _OWORD *v55 = v137;
          *(_OWORD *)(v10 - 64) = v140;
          *(void *)(v10 - 16) = v21;
          *(_DWORD *)(v10 - 8) = v49;
          *(_WORD *)(v10 - 4) = WORD2(v49);
        }
        unint64_t v21 = *(void *)(a1 + 64);
LABEL_12:
        uint64_t v22 = 0;
        long long v142 = *(_OWORD *)(a1 + 32);
        long long v145 = *(_OWORD *)(a1 + 48);
        long long v136 = *(_OWORD *)a1;
        long long v139 = *(_OWORD *)(a1 + 16);
        uint64_t v23 = *(void *)(a1 + 72);
        do
        {
          unint64_t v24 = *(void *)(a1 + v22 + 144);
          v22 += 80;
        }
        while (v24 < v21);
        unint64_t v25 = a1 + v22;
        uint64_t v26 = a2;
        if (v22 == 80)
        {
          long long v29 = a2;
          while (v25 < (unint64_t)v29)
          {
            long long v27 = v29 - 5;
            unint64_t v30 = *((void *)v29 - 2);
            v29 -= 5;
            if (v30 < v21) {
              goto LABEL_22;
            }
          }
          long long v27 = v29;
        }
        else
        {
          do
          {
            long long v27 = v26 - 5;
            unint64_t v28 = *((void *)v26 - 2);
            v26 -= 5;
          }
          while (v28 >= v21);
        }
LABEL_22:
        unint64_t v10 = v25;
        if (v25 < (unint64_t)v27)
        {
          long long v31 = v27;
          do
          {
            long long v149 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v185 = *(_OWORD *)(v10 + 48);
            *(_OWORD *)&v185[16] = *(_OWORD *)(v10 + 64);
            long long v161 = *(_OWORD *)(v10 + 16);
            long long v173 = *(_OWORD *)(v10 + 32);
            long long v33 = v31[2];
            long long v32 = v31[3];
            long long v34 = v31[1];
            *(_OWORD *)(v10 + 62) = *(_OWORD *)((char *)v31 + 62);
            *(_OWORD *)(v10 + 32) = v33;
            *(_OWORD *)(v10 + 48) = v32;
            *(_OWORD *)(v10 + 16) = v34;
            *(_OWORD *)unint64_t v10 = *v31;
            *(_OWORD *)((char *)v31 + 62) = *(_OWORD *)&v185[14];
            _OWORD v31[2] = v173;
            v31[3] = *(_OWORD *)v185;
            v31[1] = v161;
            *long long v31 = v149;
            do
            {
              unint64_t v35 = *(void *)(v10 + 144);
              v10 += 80;
            }
            while (v35 < v21);
            do
            {
              unint64_t v36 = *((void *)v31 - 2);
              v31 -= 5;
            }
            while (v36 >= v21);
          }
          while (v10 < (unint64_t)v31);
        }
        double v37 = (_OWORD *)(v10 - 80);
        if (v10 - 80 != a1)
        {
          *(_OWORD *)a1 = *v37;
          long long v38 = *(_OWORD *)(v10 - 64);
          long long v39 = *(_OWORD *)(v10 - 48);
          long long v40 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 62) = *(_OWORD *)(v10 - 18);
          *(_OWORD *)(a1 + 32) = v39;
          *(_OWORD *)(a1 + 48) = v40;
          *(_OWORD *)(a1 + 16) = v38;
        }
        *(_OWORD *)(v10 - 48) = v142;
        *(_OWORD *)(v10 - 32) = v145;
        _OWORD *v37 = v136;
        *(_OWORD *)(v10 - 64) = v139;
        *(void *)(v10 - 16) = v21;
        *(_DWORD *)(v10 - 8) = v23;
        *(_WORD *)(v10 - 4) = WORD2(v23);
        if (v25 >= (unint64_t)v27) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*,false>(a1, v10 - 80, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v41 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(a1, v10 - 80);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v41) {
        goto LABEL_33;
      }
    }
    a2 = (_OWORD *)(v10 - 80);
    if (!v41) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a2 + 64);
  unint64_t v4 = *(void *)(a3 + 64);
  if (v3 >= *((void *)a1 + 8))
  {
    if (v4 < v3)
    {
      long long v30 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)long long v34 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v34[16] = *(_OWORD *)(a2 + 64);
      __n128 v22 = *(__n128 *)a2;
      long long v26 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v9 = *(_OWORD *)(a3 + 32);
      long long v8 = *(_OWORD *)(a3 + 48);
      long long v10 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v9;
      *(_OWORD *)(a2 + 48) = v8;
      *(_OWORD *)(a2 + 16) = v10;
      *(_OWORD *)(a3 + 62) = *(_OWORD *)&v34[14];
      *(_OWORD *)(a3 + 32) = v30;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v34;
      __n128 result = v22;
      *(__n128 *)a3 = v22;
      *(_OWORD *)(a3 + 16) = v26;
      if (*(void *)(a2 + 64) < *((void *)a1 + 8))
      {
        long long v31 = a1[2];
        *(_OWORD *)unint64_t v35 = a1[3];
        *(_OWORD *)&v35[16] = a1[4];
        __n128 v23 = *(__n128 *)a1;
        long long v27 = a1[1];
        *a1 = *(_OWORD *)a2;
        long long v13 = *(_OWORD *)(a2 + 32);
        long long v12 = *(_OWORD *)(a2 + 48);
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)((char *)a1 + 62) = *(_OWORD *)(a2 + 62);
        a1[2] = v13;
        a1[3] = v12;
        a1[1] = v14;
        *(_OWORD *)(a2 + 62) = *(_OWORD *)&v35[14];
        *(_OWORD *)(a2 + 32) = v31;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v35;
        __n128 result = v23;
        *(__n128 *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v27;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v32 = a1[2];
      *(_OWORD *)unint64_t v36 = a1[3];
      *(_OWORD *)&v36[16] = a1[4];
      __n128 v24 = *(__n128 *)a1;
      long long v28 = a1[1];
      *a1 = *(_OWORD *)a2;
      long long v16 = *(_OWORD *)(a2 + 32);
      long long v15 = *(_OWORD *)(a2 + 48);
      long long v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)((char *)a1 + 62) = *(_OWORD *)(a2 + 62);
      a1[2] = v16;
      a1[3] = v15;
      a1[1] = v17;
      *(_OWORD *)(a2 + 62) = *(_OWORD *)&v36[14];
      *(_OWORD *)(a2 + 32) = v32;
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v36;
      __n128 result = v24;
      *(__n128 *)a2 = v24;
      *(_OWORD *)(a2 + 16) = v28;
      if (*(void *)(a3 + 64) >= *(void *)(a2 + 64)) {
        return result;
      }
      long long v29 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)long long v33 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v33[16] = *(_OWORD *)(a2 + 64);
      __n128 v21 = *(__n128 *)a2;
      long long v25 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v19 = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a3 + 48);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v19;
      *(_OWORD *)(a2 + 48) = v18;
      *(_OWORD *)(a2 + 16) = v20;
    }
    else
    {
      long long v29 = a1[2];
      *(_OWORD *)long long v33 = a1[3];
      *(_OWORD *)&v33[16] = a1[4];
      __n128 v21 = *(__n128 *)a1;
      long long v25 = a1[1];
      *a1 = *(_OWORD *)a3;
      long long v6 = *(_OWORD *)(a3 + 32);
      long long v5 = *(_OWORD *)(a3 + 48);
      long long v7 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)((char *)a1 + 62) = *(_OWORD *)(a3 + 62);
      a1[2] = v6;
      a1[3] = v5;
      a1[1] = v7;
    }
    *(_OWORD *)(a3 + 62) = *(_OWORD *)&v33[14];
    *(_OWORD *)(a3 + 32) = v29;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v33;
    __n128 result = v21;
    *(__n128 *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v25;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 16) < *(void *)(a1 + 64))
      {
        long long v44 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)long long v50 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v50[16] = *(_OWORD *)(a1 + 64);
        long long v32 = *(_OWORD *)a1;
        long long v38 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        long long v7 = *(_OWORD *)(a2 - 48);
        long long v6 = *(_OWORD *)(a2 - 32);
        long long v8 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 - 18);
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 18) = *(_OWORD *)&v50[14];
        *(_OWORD *)(a2 - 48) = v44;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v50;
        *(_OWORD *)(a2 - 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v32;
        *(_OWORD *)(a2 - 64) = v38;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((_OWORD *)a1, a1 + 80, a2 - 80);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((__n128 *)a1, (__n128 *)(a1 + 80), (__n128 *)(a1 + 160), a2 - 80);
      return 1;
    case 5uLL:
      long long v20 = (long long *)(a1 + 80);
      __n128 v21 = (long long *)(a1 + 160);
      __n128 v22 = (long long *)(a1 + 240);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((__n128 *)a1, (__n128 *)(a1 + 80), (__n128 *)(a1 + 160), a1 + 240);
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 304)) {
        return 1;
      }
      long long v46 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)long long v52 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 304);
      long long v34 = *v22;
      long long v40 = *(_OWORD *)(a1 + 256);
      *__n128 v22 = *(_OWORD *)(a2 - 80);
      long long v24 = *(_OWORD *)(a2 - 48);
      long long v23 = *(_OWORD *)(a2 - 32);
      long long v25 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 302) = *(_OWORD *)(a2 - 18);
      *(_OWORD *)(a1 + 272) = v24;
      *(_OWORD *)(a1 + 288) = v23;
      *(_OWORD *)(a1 + 256) = v25;
      *(_OWORD *)(a2 - 18) = *(_OWORD *)&v52[14];
      *(_OWORD *)(a2 - 48) = v46;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v52;
      *(_OWORD *)(a2 - 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v34;
      *(_OWORD *)(a2 - 64) = v40;
      if (*(void *)(a1 + 304) >= *(void *)(a1 + 224)) {
        return 1;
      }
      long long v47 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)unint64_t v53 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)&v53[16] = *(_OWORD *)(a1 + 224);
      long long v35 = *v21;
      long long v41 = *(_OWORD *)(a1 + 176);
      long long v26 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 208) = v26;
      *(_OWORD *)(a1 + 222) = *(_OWORD *)(a1 + 302);
      long long v27 = *(_OWORD *)(a1 + 256);
      *__n128 v21 = *v22;
      *(_OWORD *)(a1 + 176) = v27;
      *(_OWORD *)(a1 + 302) = *(_OWORD *)&v53[14];
      *(_OWORD *)(a1 + 272) = v47;
      *(_OWORD *)(a1 + 288) = *(_OWORD *)v53;
      *__n128 v22 = v35;
      *(_OWORD *)(a1 + 256) = v41;
      if (*(void *)(a1 + 224) >= *(void *)(a1 + 144)) {
        return 1;
      }
      long long v48 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)unint64_t v54 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)&v54[16] = *(_OWORD *)(a1 + 144);
      long long v36 = *v20;
      long long v42 = *(_OWORD *)(a1 + 96);
      long long v28 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 128) = v28;
      *(_OWORD *)(a1 + 142) = *(_OWORD *)(a1 + 222);
      long long v29 = *(_OWORD *)(a1 + 176);
      *long long v20 = *v21;
      *(_OWORD *)(a1 + 96) = v29;
      *(_OWORD *)(a1 + 222) = *(_OWORD *)&v54[14];
      *(_OWORD *)(a1 + 192) = v48;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)v54;
      *__n128 v21 = v36;
      *(_OWORD *)(a1 + 176) = v42;
      if (*(void *)(a1 + 144) >= *(void *)(a1 + 64)) {
        return 1;
      }
      long long v49 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)uint64_t v55 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v55[16] = *(_OWORD *)(a1 + 64);
      long long v37 = *(_OWORD *)a1;
      long long v43 = *(_OWORD *)(a1 + 16);
      long long v30 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 48) = v30;
      *(_OWORD *)(a1 + 62) = *(_OWORD *)(a1 + 142);
      long long v31 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v20;
      *(_OWORD *)(a1 + 16) = v31;
      *(_OWORD *)(a1 + 142) = *(_OWORD *)&v55[14];
      *(_OWORD *)(a1 + 112) = v49;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)v55;
      BOOL result = 1;
      *long long v20 = v37;
      *(_OWORD *)(a1 + 96) = v43;
      return result;
    default:
      uint64_t v9 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>((_OWORD *)a1, a1 + 80, a1 + 160);
      uint64_t v10 = a1 + 240;
      if (a1 + 240 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v10 + 64);
    if (v13 < *(void *)(v9 + 64))
    {
      long long v33 = *(_OWORD *)v10;
      long long v39 = *(_OWORD *)(v10 + 16);
      long long v45 = *(_OWORD *)(v10 + 32);
      long long v51 = *(_OWORD *)(v10 + 48);
      uint64_t v14 = *(void *)(v10 + 72);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 208);
        *(_OWORD *)(v16 + 272) = *(_OWORD *)(a1 + v15 + 192);
        *(_OWORD *)(v16 + 288) = v17;
        *(_OWORD *)(a1 + v15 + 302) = *(_OWORD *)(a1 + v15 + 222);
        long long v18 = *(_OWORD *)(a1 + v15 + 176);
        *(_OWORD *)(v16 + 24std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_OWORD *)(a1 + v15 + 160);
        *(_OWORD *)(v16 + 256) = v18;
        if (v15 == -160) {
          break;
        }
        v15 -= 80;
        if (v13 >= *(void *)(v16 + 144))
        {
          uint64_t v19 = a1 + v15 + 240;
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v19 = v33;
      *(_OWORD *)(v19 + 16) = v39;
      *(_OWORD *)(v19 + 32) = v45;
      *(_OWORD *)(v19 + 48) = v51;
      *(void *)(v19 + 64) = v13;
      *(_DWORD *)(v19 + 72) = v14;
      ++v12;
      *(_WORD *)(v19 + 76) = WORD2(v14);
      if (v12 == 8) {
        return v10 + 80 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 80;
    v10 += 80;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_0 &,ZinMirWorkUnitShapeCandidate*>(a1, (uint64_t)a2, (uint64_t)a3).n128_u64[0];
  if (*(void *)(a4 + 64) < a3[4].n128_u64[0])
  {
    __n128 v24 = a3[2];
    *(__n128 *)long long v27 = a3[3];
    *(__n128 *)&v27[16] = a3[4];
    __n128 v18 = *a3;
    __n128 v21 = a3[1];
    *a3 = *(__n128 *)a4;
    __n128 v10 = *(__n128 *)(a4 + 32);
    __n128 v9 = *(__n128 *)(a4 + 48);
    __n128 v11 = *(__n128 *)(a4 + 16);
    *(__n128 *)((char *)a3 + 62) = *(__n128 *)(a4 + 62);
    a3[2] = v10;
    a3[3] = v9;
    a3[1] = v11;
    *(_OWORD *)(a4 + 62) = *(_OWORD *)&v27[14];
    *(__n128 *)(a4 + 32) = v24;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v27;
    __n128 result = v18;
    *(__n128 *)a4 = v18;
    *(__n128 *)(a4 + 16) = v21;
    if (a3[4].n128_u64[0] < a2[4].n128_u64[0])
    {
      __n128 v25 = a2[2];
      *(__n128 *)long long v28 = a2[3];
      *(__n128 *)&v28[16] = a2[4];
      __n128 v19 = *a2;
      __n128 v22 = a2[1];
      *a2 = *a3;
      __n128 v13 = a3[2];
      __n128 v12 = a3[3];
      __n128 v14 = a3[1];
      *(__n128 *)((char *)a2 + 62) = *(__n128 *)((char *)a3 + 62);
      a2[2] = v13;
      a2[3] = v12;
      a2[1] = v14;
      *(__n128 *)((char *)a3 + 62) = *(__n128 *)&v28[14];
      a3[2] = v25;
      a3[3] = *(__n128 *)v28;
      __n128 result = v19;
      *a3 = v19;
      a3[1] = v22;
      if (a2[4].n128_u64[0] < a1[4].n128_u64[0])
      {
        __n128 v26 = a1[2];
        *(__n128 *)long long v29 = a1[3];
        *(__n128 *)&v29[16] = a1[4];
        __n128 v20 = *a1;
        __n128 v23 = a1[1];
        *a1 = *a2;
        __n128 v16 = a2[2];
        __n128 v15 = a2[3];
        __n128 v17 = a2[1];
        *(__n128 *)((char *)a1 + 62) = *(__n128 *)((char *)a2 + 62);
        a1[2] = v16;
        a1[3] = v15;
        a1[1] = v17;
        *(__n128 *)((char *)a2 + 62) = *(__n128 *)&v29[14];
        a2[2] = v26;
        a2[3] = *(__n128 *)v29;
        __n128 result = v20;
        *a2 = v20;
        a2[1] = v23;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*,false>(unint64_t a1, _OWORD *a2, int ***a3, uint64_t a4, char a5)
{
__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int ***a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a2, a3, a4, a6).n128_u64[0];
  int v13 = ***a6;
  int v14 = *(_DWORD *)(a5 + 40) - v13;
  if (v14 < 0) {
    int v14 = v13 - *(_DWORD *)(a5 + 40);
  }
  int v15 = *(_DWORD *)(a4 + 40) - v13;
  if (v15 < 0) {
    int v15 = v13 - *(_DWORD *)(a4 + 40);
  }
  if (v14 < v15) {
    goto LABEL_16;
  }
  int v16 = *(_DWORD *)(a5 + 48) - v13;
  if (v16 < 0) {
    int v16 = v13 - *(_DWORD *)(a5 + 48);
  }
  int v17 = *(_DWORD *)(a4 + 48) - v13;
  if (v17 < 0) {
    int v17 = v13 - *(_DWORD *)(a4 + 48);
  }
  if (v16 < v17) {
    goto LABEL_16;
  }
  int v18 = *(_DWORD *)(a5 + 56) - v13;
  if (v18 < 0) {
    int v18 = v13 - *(_DWORD *)(a5 + 56);
  }
  int v19 = *(_DWORD *)(a4 + 56) - v13;
  if (v19 < 0) {
    int v19 = -v19;
  }
  if (v18 < v19)
  {
LABEL_16:
    long long v61 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)int v65 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&v65[16] = *(_OWORD *)(a4 + 64);
    __n128 v53 = *(__n128 *)a4;
    long long v57 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    long long v21 = *(_OWORD *)(a5 + 32);
    long long v20 = *(_OWORD *)(a5 + 48);
    long long v22 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(a4 + 62) = *(_OWORD *)(a5 + 62);
    *(_OWORD *)(a4 + 32) = v21;
    *(_OWORD *)(a4 + 48) = v20;
    *(_OWORD *)(a4 + 16) = v22;
    *(_OWORD *)(a5 + 62) = *(_OWORD *)&v65[14];
    *(_OWORD *)(a5 + 32) = v61;
    *(_OWORD *)(a5 + 48) = *(_OWORD *)v65;
    __n128 result = v53;
    *(__n128 *)a5 = v53;
    *(_OWORD *)(a5 + 16) = v57;
    int v23 = ***a6;
    int v24 = *(_DWORD *)(a4 + 40) - v23;
    if (v24 < 0) {
      int v24 = v23 - *(_DWORD *)(a4 + 40);
    }
    int v25 = *(_DWORD *)(a3 + 40) - v23;
    if (v25 < 0) {
      int v25 = v23 - *(_DWORD *)(a3 + 40);
    }
    if (v24 < v25) {
      goto LABEL_31;
    }
    int v26 = *(_DWORD *)(a4 + 48) - v23;
    if (v26 < 0) {
      int v26 = v23 - *(_DWORD *)(a4 + 48);
    }
    int v27 = *(_DWORD *)(a3 + 48) - v23;
    if (v27 < 0) {
      int v27 = v23 - *(_DWORD *)(a3 + 48);
    }
    if (v26 < v27) {
      goto LABEL_31;
    }
    int v28 = *(_DWORD *)(a4 + 56) - v23;
    if (v28 < 0) {
      int v28 = v23 - *(_DWORD *)(a4 + 56);
    }
    int v29 = *(_DWORD *)(a3 + 56) - v23;
    if (v29 < 0) {
      int v29 = -v29;
    }
    if (v28 < v29)
    {
LABEL_31:
      long long v62 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)int v66 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)&v66[16] = *(_OWORD *)(a3 + 64);
      __n128 v54 = *(__n128 *)a3;
      long long v58 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      long long v31 = *(_OWORD *)(a4 + 32);
      long long v30 = *(_OWORD *)(a4 + 48);
      long long v32 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a3 + 62) = *(_OWORD *)(a4 + 62);
      *(_OWORD *)(a3 + 32) = v31;
      *(_OWORD *)(a3 + 48) = v30;
      *(_OWORD *)(a3 + 16) = v32;
      *(_OWORD *)(a4 + 62) = *(_OWORD *)&v66[14];
      *(_OWORD *)(a4 + 32) = v62;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)v66;
      __n128 result = v54;
      *(__n128 *)a4 = v54;
      *(_OWORD *)(a4 + 16) = v58;
      int v33 = ***a6;
      int v34 = *(_DWORD *)(a3 + 40) - v33;
      if (v34 < 0) {
        int v34 = v33 - *(_DWORD *)(a3 + 40);
      }
      int v35 = *(_DWORD *)(a2 + 40) - v33;
      if (v35 < 0) {
        int v35 = v33 - *(_DWORD *)(a2 + 40);
      }
      if (v34 < v35) {
        goto LABEL_46;
      }
      int v36 = *(_DWORD *)(a3 + 48) - v33;
      if (v36 < 0) {
        int v36 = v33 - *(_DWORD *)(a3 + 48);
      }
      int v37 = *(_DWORD *)(a2 + 48) - v33;
      if (v37 < 0) {
        int v37 = v33 - *(_DWORD *)(a2 + 48);
      }
      if (v36 < v37) {
        goto LABEL_46;
      }
      int v38 = *(_DWORD *)(a3 + 56) - v33;
      if (v38 < 0) {
        int v38 = v33 - *(_DWORD *)(a3 + 56);
      }
      int v39 = *(_DWORD *)(a2 + 56) - v33;
      if (v39 < 0) {
        int v39 = -v39;
      }
      if (v38 < v39)
      {
LABEL_46:
        long long v63 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)unsigned int v67 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v67[16] = *(_OWORD *)(a2 + 64);
        __n128 v55 = *(__n128 *)a2;
        long long v59 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        long long v41 = *(_OWORD *)(a3 + 32);
        long long v40 = *(_OWORD *)(a3 + 48);
        long long v42 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
        *(_OWORD *)(a2 + 32) = v41;
        *(_OWORD *)(a2 + 48) = v40;
        *(_OWORD *)(a2 + 16) = v42;
        *(_OWORD *)(a3 + 62) = *(_OWORD *)&v67[14];
        *(_OWORD *)(a3 + 32) = v63;
        *(_OWORD *)(a3 + 48) = *(_OWORD *)v67;
        __n128 result = v55;
        *(__n128 *)a3 = v55;
        *(_OWORD *)(a3 + 16) = v59;
        int v43 = ***a6;
        int v44 = *(_DWORD *)(a2 + 40) - v43;
        if (v44 < 0) {
          int v44 = v43 - *(_DWORD *)(a2 + 40);
        }
        int v45 = *(_DWORD *)(a1 + 40) - v43;
        if (v45 < 0) {
          int v45 = v43 - *(_DWORD *)(a1 + 40);
        }
        if (v44 < v45) {
          goto LABEL_61;
        }
        int v46 = *(_DWORD *)(a2 + 48) - v43;
        if (v46 < 0) {
          int v46 = v43 - *(_DWORD *)(a2 + 48);
        }
        int v47 = *(_DWORD *)(a1 + 48) - v43;
        if (v47 < 0) {
          int v47 = v43 - *(_DWORD *)(a1 + 48);
        }
        if (v46 < v47) {
          goto LABEL_61;
        }
        int v48 = *(_DWORD *)(a2 + 56) - v43;
        if (v48 < 0) {
          int v48 = v43 - *(_DWORD *)(a2 + 56);
        }
        int v49 = *(_DWORD *)(a1 + 56) - v43;
        if (v49 < 0) {
          int v49 = -v49;
        }
        if (v48 < v49)
        {
LABEL_61:
          long long v64 = *(_OWORD *)(a1 + 32);
          *(_OWORD *)long long v68 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v68[16] = *(_OWORD *)(a1 + 64);
          __n128 v56 = *(__n128 *)a1;
          long long v60 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          long long v51 = *(_OWORD *)(a2 + 32);
          long long v50 = *(_OWORD *)(a2 + 48);
          long long v52 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
          *(_OWORD *)(a1 + 32) = v51;
          *(_OWORD *)(a1 + 48) = v50;
          *(_OWORD *)(a1 + 16) = v52;
          *(_OWORD *)(a2 + 62) = *(_OWORD *)&v68[14];
          *(_OWORD *)(a2 + 32) = v64;
          *(_OWORD *)(a2 + 48) = *(_OWORD *)v68;
          __n128 result = v56;
          *(__n128 *)a2 = v56;
          *(_OWORD *)(a2 + 16) = v60;
        }
      }
    }
  }
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(uint64_t a1, uint64_t a2, uint64_t a3, int ***a4)
{
  int v4 = ***a4;
  unsigned int v5 = *(_DWORD *)(a2 + 40) - v4;
  if ((v5 & 0x80000000) != 0) {
    unsigned int v5 = v4 - *(_DWORD *)(a2 + 40);
  }
  int v6 = *(_DWORD *)(a1 + 40) - v4;
  if (v6 < 0) {
    int v6 = v4 - *(_DWORD *)(a1 + 40);
  }
  if (v5 < v6) {
    goto LABEL_16;
  }
  int v7 = *(_DWORD *)(a2 + 48) - v4;
  if (v7 < 0) {
    int v7 = v4 - *(_DWORD *)(a2 + 48);
  }
  int v8 = *(_DWORD *)(a1 + 48) - v4;
  if (v8 < 0) {
    int v8 = v4 - *(_DWORD *)(a1 + 48);
  }
  if (v7 < v8) {
    goto LABEL_16;
  }
  int v9 = *(_DWORD *)(a2 + 56) - v4;
  if (v9 < 0) {
    int v9 = v4 - *(_DWORD *)(a2 + 56);
  }
  int v10 = *(_DWORD *)(a1 + 56) - v4;
  if (v10 < 0) {
    int v10 = v4 - *(_DWORD *)(a1 + 56);
  }
  if (v9 >= v10)
  {
    int v20 = *(_DWORD *)(a3 + 40) - v4;
    if (v20 < 0) {
      int v20 = v4 - *(_DWORD *)(a3 + 40);
    }
    if (v20 < v5) {
      goto LABEL_41;
    }
    int v21 = *(_DWORD *)(a3 + 48) - v4;
    if (v21 < 0) {
      int v21 = v4 - *(_DWORD *)(a3 + 48);
    }
    if (v21 < v7) {
      goto LABEL_41;
    }
    int v22 = *(_DWORD *)(a3 + 56) - v4;
    if (v22 < 0) {
      int v22 = -v22;
    }
    if (v22 < v9)
    {
LABEL_41:
      long long v58 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)long long v62 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a2 + 64);
      __n128 v50 = *(__n128 *)a2;
      long long v54 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v24 = *(_OWORD *)(a3 + 32);
      long long v23 = *(_OWORD *)(a3 + 48);
      long long v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v24;
      *(_OWORD *)(a2 + 48) = v23;
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)(a3 + 62) = *(_OWORD *)&v62[14];
      *(_OWORD *)(a3 + 32) = v58;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v62;
      __n128 result = v50;
      *(__n128 *)a3 = v50;
      *(_OWORD *)(a3 + 16) = v54;
      int v26 = ***a4;
      int v27 = *(_DWORD *)(a2 + 40) - v26;
      if (v27 < 0) {
        int v27 = v26 - *(_DWORD *)(a2 + 40);
      }
      int v28 = *(_DWORD *)(a1 + 40) - v26;
      if (v28 < 0) {
        int v28 = v26 - *(_DWORD *)(a1 + 40);
      }
      if (v27 < v28) {
        goto LABEL_56;
      }
      int v29 = *(_DWORD *)(a2 + 48) - v26;
      if (v29 < 0) {
        int v29 = v26 - *(_DWORD *)(a2 + 48);
      }
      int v30 = *(_DWORD *)(a1 + 48) - v26;
      if (v30 < 0) {
        int v30 = v26 - *(_DWORD *)(a1 + 48);
      }
      if (v29 < v30) {
        goto LABEL_56;
      }
      int v31 = *(_DWORD *)(a2 + 56) - v26;
      if (v31 < 0) {
        int v31 = v26 - *(_DWORD *)(a2 + 56);
      }
      int v32 = *(_DWORD *)(a1 + 56) - v26;
      if (v32 < 0) {
        int v32 = -v32;
      }
      if (v31 < v32)
      {
LABEL_56:
        long long v59 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)long long v63 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 64);
        __n128 v51 = *(__n128 *)a1;
        long long v55 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        long long v34 = *(_OWORD *)(a2 + 32);
        long long v33 = *(_OWORD *)(a2 + 48);
        long long v35 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
        *(_OWORD *)(a1 + 32) = v34;
        *(_OWORD *)(a1 + 48) = v33;
        *(_OWORD *)(a1 + 16) = v35;
        *(_OWORD *)(a2 + 62) = *(_OWORD *)&v63[14];
        *(_OWORD *)(a2 + 32) = v59;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v63;
        __n128 result = v51;
        *(__n128 *)a2 = v51;
        *(_OWORD *)(a2 + 16) = v55;
      }
    }
  }
  else
  {
LABEL_16:
    int v11 = *(_DWORD *)(a3 + 40) - v4;
    if (v11 < 0) {
      int v11 = v4 - *(_DWORD *)(a3 + 40);
    }
    if (v11 < v5) {
      goto LABEL_29;
    }
    int v12 = *(_DWORD *)(a3 + 48) - v4;
    if (v12 < 0) {
      int v12 = v4 - *(_DWORD *)(a3 + 48);
    }
    int v13 = *(_DWORD *)(a2 + 48) - v4;
    if (v13 < 0) {
      int v13 = v4 - *(_DWORD *)(a2 + 48);
    }
    if (v12 < v13) {
      goto LABEL_29;
    }
    int v14 = *(_DWORD *)(a3 + 56) - v4;
    if (v14 < 0) {
      int v14 = v4 - *(_DWORD *)(a3 + 56);
    }
    int v15 = *(_DWORD *)(a2 + 56) - v4;
    if (v15 < 0) {
      int v15 = -v15;
    }
    if (v14 < v15)
    {
LABEL_29:
      long long v57 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)long long v61 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 64);
      __n128 v49 = *(__n128 *)a1;
      long long v53 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      long long v17 = *(_OWORD *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 48);
      long long v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)(a1 + 48) = v16;
      *(_OWORD *)(a1 + 16) = v18;
LABEL_30:
      *(_OWORD *)(a3 + 62) = *(_OWORD *)&v61[14];
      *(_OWORD *)(a3 + 32) = v57;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v61;
      __n128 result = v49;
      *(__n128 *)a3 = v49;
      *(_OWORD *)(a3 + 16) = v53;
      return result;
    }
    long long v60 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)long long v64 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v64[16] = *(_OWORD *)(a1 + 64);
    __n128 v52 = *(__n128 *)a1;
    long long v56 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v37 = *(_OWORD *)(a2 + 32);
    long long v36 = *(_OWORD *)(a2 + 48);
    long long v38 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
    *(_OWORD *)(a1 + 32) = v37;
    *(_OWORD *)(a1 + 48) = v36;
    *(_OWORD *)(a1 + 16) = v38;
    *(_OWORD *)(a2 + 62) = *(_OWORD *)&v64[14];
    *(_OWORD *)(a2 + 32) = v60;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v64;
    __n128 result = v52;
    *(__n128 *)a2 = v52;
    *(_OWORD *)(a2 + 16) = v56;
    int v39 = ***a4;
    int v40 = *(_DWORD *)(a3 + 40) - v39;
    if (v40 < 0) {
      int v40 = v39 - *(_DWORD *)(a3 + 40);
    }
    int v41 = *(_DWORD *)(a2 + 40) - v39;
    if (v41 < 0) {
      int v41 = v39 - *(_DWORD *)(a2 + 40);
    }
    if (v40 < v41) {
      goto LABEL_72;
    }
    int v42 = *(_DWORD *)(a3 + 48) - v39;
    if (v42 < 0) {
      int v42 = v39 - *(_DWORD *)(a3 + 48);
    }
    int v43 = *(_DWORD *)(a2 + 48) - v39;
    if (v43 < 0) {
      int v43 = v39 - *(_DWORD *)(a2 + 48);
    }
    if (v42 < v43) {
      goto LABEL_72;
    }
    int v44 = *(_DWORD *)(a3 + 56) - v39;
    if (v44 < 0) {
      int v44 = v39 - *(_DWORD *)(a3 + 56);
    }
    int v45 = *(_DWORD *)(a2 + 56) - v39;
    if (v45 < 0) {
      int v45 = -v45;
    }
    if (v44 < v45)
    {
LABEL_72:
      long long v57 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)long long v61 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a2 + 64);
      __n128 v49 = *(__n128 *)a2;
      long long v53 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v47 = *(_OWORD *)(a3 + 32);
      long long v46 = *(_OWORD *)(a3 + 48);
      long long v48 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v47;
      *(_OWORD *)(a2 + 48) = v46;
      *(_OWORD *)(a2 + 16) = v48;
      goto LABEL_30;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(uint64_t a1, uint64_t a2, int ***a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v8 = ***a3;
      int v9 = *(_DWORD *)(a2 - 40) - v8;
      if (v9 < 0) {
        int v9 = v8 - *(_DWORD *)(a2 - 40);
      }
      int v10 = *(_DWORD *)(a1 + 40) - v8;
      if (v10 < 0) {
        int v10 = v8 - *(_DWORD *)(a1 + 40);
      }
      if (v9 < v10) {
        goto LABEL_17;
      }
      int v11 = *(_DWORD *)(a2 - 32) - v8;
      if (v11 < 0) {
        int v11 = v8 - *(_DWORD *)(a2 - 32);
      }
      int v12 = *(_DWORD *)(a1 + 48) - v8;
      if (v12 < 0) {
        int v12 = v8 - *(_DWORD *)(a1 + 48);
      }
      if (v11 < v12) {
        goto LABEL_17;
      }
      int v13 = *(_DWORD *)(a2 - 24) - v8;
      if (v13 < 0) {
        int v13 = v8 - *(_DWORD *)(a2 - 24);
      }
      int v14 = *(_DWORD *)(a1 + 56) - v8;
      if (v14 < 0) {
        int v14 = -v14;
      }
      if (v13 < v14)
      {
LABEL_17:
        int v15 = (_OWORD *)(a2 - 80);
        long long v54 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)long long v56 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v56[16] = *(_OWORD *)(a1 + 64);
        long long v50 = *(_OWORD *)a1;
        long long v52 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        long long v17 = *(_OWORD *)(a2 - 48);
        long long v16 = *(_OWORD *)(a2 - 32);
        long long v18 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 - 18);
        *(_OWORD *)(a1 + 32) = v17;
        *(_OWORD *)(a1 + 48) = v16;
        *(_OWORD *)(a1 + 16) = v18;
        *(_OWORD *)((char *)v15 + 62) = *(_OWORD *)&v56[14];
        void v15[2] = v54;
        void v15[3] = *(_OWORD *)v56;
        *int v15 = v50;
        v15[1] = v52;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a1 + 80, a2 - 80, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a1 + 80, a1 + 160, a2 - 80, a3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*,0>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80, a3);
      return 1;
    default:
      uint64_t v19 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a1 + 80, a1 + 160, a3);
      uint64_t v20 = a1 + 240;
      if (a1 + 240 == a2) {
        return 1;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      break;
  }
  while (1)
  {
    uint64_t v23 = *(void *)(v20 + 40);
    int v24 = ***a3;
    unsigned int v25 = v23 - v24;
    if ((int)v23 - v24 < 0) {
      unsigned int v25 = v24 - v23;
    }
    int v26 = *(_DWORD *)(v19 + 40) - v24;
    if (v26 < 0) {
      int v26 = v24 - *(_DWORD *)(v19 + 40);
    }
    if (v25 < v26) {
      break;
    }
    uint64_t v27 = *(void *)(v20 + 48);
    unsigned int v28 = v27 - v24;
    if ((int)v27 - v24 < 0) {
      unsigned int v28 = v24 - v27;
    }
    int v29 = *(_DWORD *)(v19 + 48) - v24;
    if (v29 < 0) {
      int v29 = v24 - *(_DWORD *)(v19 + 48);
    }
    if (v28 < v29) {
      goto LABEL_37;
    }
    int v30 = *(_DWORD *)(v20 + 56) - v24;
    if (v30 < 0) {
      int v30 = v24 - *(_DWORD *)(v20 + 56);
    }
    int v31 = *(_DWORD *)(v19 + 56) - v24;
    if (v31 < 0) {
      int v31 = -v31;
    }
    if (v30 < v31) {
      goto LABEL_37;
    }
LABEL_59:
    uint64_t v19 = v20;
    v21 += 80;
    v20 += 80;
    if (v20 == a2) {
      return 1;
    }
  }
  uint64_t v27 = *(void *)(v20 + 48);
LABEL_37:
  uint64_t v55 = *(void *)(v20 + 32);
  long long v51 = *(_OWORD *)v20;
  long long v53 = *(_OWORD *)(v20 + 16);
  uint64_t v32 = *(void *)(v20 + 56);
  long long v49 = *(_OWORD *)(v20 + 64);
  *(_OWORD *)(v20 + 62) = *(_OWORD *)(v19 + 62);
  long long v33 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v20 + 48) = v33;
  long long v34 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v19;
  *(_OWORD *)(v20 + 16) = v34;
  uint64_t v35 = a1;
  if (v19 != a1)
  {
    uint64_t v36 = v21;
    while (1)
    {
      uint64_t v37 = a1 + v36;
      int v38 = ***a3;
      unsigned int v39 = v23 - v38;
      if ((int)v23 - v38 < 0) {
        unsigned int v39 = v38 - v23;
      }
      int v40 = *(_DWORD *)(v37 + 120) - v38;
      if (v40 < 0) {
        int v40 = v38 - *(_DWORD *)(v37 + 120);
      }
      if (v39 >= v40)
      {
        unsigned int v41 = v27 - v38;
        if ((int)v27 - v38 < 0) {
          unsigned int v41 = v38 - v27;
        }
        int v42 = *(_DWORD *)(v37 + 128) - v38;
        if (v42 < 0) {
          int v42 = v38 - *(_DWORD *)(v37 + 128);
        }
        if (v41 >= v42)
        {
          if ((int)v32 - v38 >= 0) {
            unsigned int v43 = v32 - v38;
          }
          else {
            unsigned int v43 = v38 - v32;
          }
          int v44 = *(_DWORD *)(a1 + v36 + 136) - v38;
          if (v44 < 0) {
            int v44 = -v44;
          }
          if (v43 >= v44) {
            break;
          }
        }
      }
      int v45 = (_OWORD *)(v37 + 160);
      long long v46 = (_OWORD *)(v37 + 80);
      long long v47 = v46[3];
      v45[2] = v46[2];
      v45[3] = v47;
      *(_OWORD *)((char *)v45 + 62) = *(_OWORD *)((char *)v46 + 62);
      long long v48 = v46[1];
      *int v45 = *v46;
      v45[1] = v48;
      v36 -= 80;
      if (v36 == -160)
      {
        uint64_t v35 = a1;
        goto LABEL_58;
      }
    }
    uint64_t v35 = a1 + v36 + 160;
  }
LABEL_58:
  *(_OWORD *)uint64_t v35 = v51;
  *(_OWORD *)(v35 + 16) = v53;
  *(void *)(v35 + 32) = v55;
  *(void *)(v35 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v23;
  *(void *)(v35 + 48) = v27;
  *(void *)(v35 + 56) = v32;
  *(void *)(v35 + 64) = v49;
  ++v22;
  *(void *)(v35 + 7std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(void *)((char *)&v49 + 6);
  if (v22 != 8) {
    goto LABEL_59;
  }
  return v20 + 80 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int ***a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirNERastParamsOpt::PruneAndSortCandidates(std::vector<ZinMirWorkUnitShapeCandidate> &,unsigned long)::$_1 &,ZinMirWorkUnitShapeCandidate*>(a1, a2, a3, a5).n128_u64[0];
  int v11 = ***a5;
  int v12 = *(_DWORD *)(a4 + 40) - v11;
  if (v12 < 0) {
    int v12 = v11 - *(_DWORD *)(a4 + 40);
  }
  int v13 = *(_DWORD *)(a3 + 40) - v11;
  if (v13 < 0) {
    int v13 = v11 - *(_DWORD *)(a3 + 40);
  }
  if (v12 < v13) {
    goto LABEL_16;
  }
  int v14 = *(_DWORD *)(a4 + 48) - v11;
  if (v14 < 0) {
    int v14 = v11 - *(_DWORD *)(a4 + 48);
  }
  int v15 = *(_DWORD *)(a3 + 48) - v11;
  if (v15 < 0) {
    int v15 = v11 - *(_DWORD *)(a3 + 48);
  }
  if (v14 < v15) {
    goto LABEL_16;
  }
  int v16 = *(_DWORD *)(a4 + 56) - v11;
  if (v16 < 0) {
    int v16 = v11 - *(_DWORD *)(a4 + 56);
  }
  int v17 = *(_DWORD *)(a3 + 56) - v11;
  if (v17 < 0) {
    int v17 = -v17;
  }
  if (v16 < v17)
  {
LABEL_16:
    long long v47 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 64);
    __n128 v41 = *(__n128 *)a3;
    long long v44 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    long long v19 = *(_OWORD *)(a4 + 32);
    long long v18 = *(_OWORD *)(a4 + 48);
    long long v20 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a3 + 62) = *(_OWORD *)(a4 + 62);
    *(_OWORD *)(a3 + 32) = v19;
    *(_OWORD *)(a3 + 48) = v18;
    *(_OWORD *)(a3 + 16) = v20;
    *(_OWORD *)(a4 + 62) = *(_OWORD *)&v50[14];
    *(_OWORD *)(a4 + 32) = v47;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v50;
    __n128 result = v41;
    *(__n128 *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v44;
    int v21 = ***a5;
    int v22 = *(_DWORD *)(a3 + 40) - v21;
    if (v22 < 0) {
      int v22 = v21 - *(_DWORD *)(a3 + 40);
    }
    int v23 = *(_DWORD *)(a2 + 40) - v21;
    if (v23 < 0) {
      int v23 = v21 - *(_DWORD *)(a2 + 40);
    }
    if (v22 < v23) {
      goto LABEL_31;
    }
    int v24 = *(_DWORD *)(a3 + 48) - v21;
    if (v24 < 0) {
      int v24 = v21 - *(_DWORD *)(a3 + 48);
    }
    int v25 = *(_DWORD *)(a2 + 48) - v21;
    if (v25 < 0) {
      int v25 = v21 - *(_DWORD *)(a2 + 48);
    }
    if (v24 < v25) {
      goto LABEL_31;
    }
    int v26 = *(_DWORD *)(a3 + 56) - v21;
    if (v26 < 0) {
      int v26 = v21 - *(_DWORD *)(a3 + 56);
    }
    int v27 = *(_DWORD *)(a2 + 56) - v21;
    if (v27 < 0) {
      int v27 = -v27;
    }
    if (v26 < v27)
    {
LABEL_31:
      long long v48 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 64);
      __n128 v42 = *(__n128 *)a2;
      long long v45 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v29 = *(_OWORD *)(a3 + 32);
      long long v28 = *(_OWORD *)(a3 + 48);
      long long v30 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 62) = *(_OWORD *)(a3 + 62);
      *(_OWORD *)(a2 + 32) = v29;
      *(_OWORD *)(a2 + 48) = v28;
      *(_OWORD *)(a2 + 16) = v30;
      *(_OWORD *)(a3 + 62) = *(_OWORD *)&v51[14];
      *(_OWORD *)(a3 + 32) = v48;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v51;
      __n128 result = v42;
      *(__n128 *)a3 = v42;
      *(_OWORD *)(a3 + 16) = v45;
      int v31 = ***a5;
      int v32 = *(_DWORD *)(a2 + 40) - v31;
      if (v32 < 0) {
        int v32 = v31 - *(_DWORD *)(a2 + 40);
      }
      int v33 = *(_DWORD *)(a1 + 40) - v31;
      if (v33 < 0) {
        int v33 = v31 - *(_DWORD *)(a1 + 40);
      }
      if (v32 < v33) {
        goto LABEL_46;
      }
      int v34 = *(_DWORD *)(a2 + 48) - v31;
      if (v34 < 0) {
        int v34 = v31 - *(_DWORD *)(a2 + 48);
      }
      int v35 = *(_DWORD *)(a1 + 48) - v31;
      if (v35 < 0) {
        int v35 = v31 - *(_DWORD *)(a1 + 48);
      }
      if (v34 < v35) {
        goto LABEL_46;
      }
      int v36 = *(_DWORD *)(a2 + 56) - v31;
      if (v36 < 0) {
        int v36 = v31 - *(_DWORD *)(a2 + 56);
      }
      int v37 = *(_DWORD *)(a1 + 56) - v31;
      if (v37 < 0) {
        int v37 = -v37;
      }
      if (v36 < v37)
      {
LABEL_46:
        long long v49 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)long long v52 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 64);
        __n128 v43 = *(__n128 *)a1;
        long long v46 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        long long v39 = *(_OWORD *)(a2 + 32);
        long long v38 = *(_OWORD *)(a2 + 48);
        long long v40 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 62) = *(_OWORD *)(a2 + 62);
        *(_OWORD *)(a1 + 32) = v39;
        *(_OWORD *)(a1 + 48) = v38;
        *(_OWORD *)(a1 + 16) = v40;
        *(_OWORD *)(a2 + 62) = *(_OWORD *)&v52[14];
        *(_OWORD *)(a2 + 32) = v49;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)v52;
        __n128 result = v43;
        *(__n128 *)a2 = v43;
        *(_OWORD *)(a2 + 16) = v46;
      }
    }
  }
  return result;
}

void *std::vector<ZinMirWorkUnitShapeCandidate>::__init_with_size[abi:ne180100]<ZinMirWorkUnitShapeCandidate*,ZinMirWorkUnitShapeCandidate*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<ZinDramDependentInfo>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8 - 2);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21123B294(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<double,double,double,double,double,double,double,double,double,double,double,double,0ul,1ul,2ul,3ul,4ul,5ul>(double *a1, double *a2)
{
  if (*a1 == *a2) {
    LODWORD(v2) = 0;
  }
  else {
    LODWORD(v2) = -127;
  }
  if (*a1 > *a2) {
    LODWORD(v2) = 1;
  }
  if (*a1 < *a2) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v2;
  }
  if (!v2)
  {
    double v3 = a1[1];
    double v4 = a2[1];
    if (v3 == v4) {
      LODWORD(v2) = 0;
    }
    else {
      LODWORD(v2) = -127;
    }
    if (v3 > v4) {
      LODWORD(v2) = 1;
    }
    if (v3 < v4) {
      uint64_t v2 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v2 = v2;
    }
    if (!v2)
    {
      double v5 = a1[2];
      double v6 = a2[2];
      if (v5 == v6) {
        LODWORD(v2) = 0;
      }
      else {
        LODWORD(v2) = -127;
      }
      if (v5 > v6) {
        LODWORD(v2) = 1;
      }
      if (v5 < v6) {
        uint64_t v2 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v2 = v2;
      }
      if (!v2)
      {
        double v7 = a1[3];
        double v8 = a2[3];
        if (v7 == v8) {
          LODWORD(v2) = 0;
        }
        else {
          LODWORD(v2) = -127;
        }
        if (v7 > v8) {
          LODWORD(v2) = 1;
        }
        if (v7 < v8) {
          uint64_t v2 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v2 = v2;
        }
        if (!v2)
        {
          double v9 = a1[4];
          double v10 = a2[4];
          if (v9 == v10) {
            LODWORD(v2) = 0;
          }
          else {
            LODWORD(v2) = -127;
          }
          if (v9 > v10) {
            LODWORD(v2) = 1;
          }
          if (v9 < v10) {
            uint64_t v2 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v2 = v2;
          }
          if (!v2)
          {
            double v11 = a1[5];
            double v12 = a2[5];
            if (v11 == v12) {
              LODWORD(v2) = 0;
            }
            else {
              LODWORD(v2) = -127;
            }
            if (v11 > v12) {
              LODWORD(v2) = 1;
            }
            if (v11 < v12) {
              return 0xFFFFFFFFLL;
            }
            else {
              return v2;
            }
          }
        }
      }
    }
  }
  return v2;
}

char *std::vector<ZinMirWorkUnitShapeCandidate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>,std::__wrap_iter<ZinMirWorkUnitShapeCandidate*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  double v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  double v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 4)) < a5)
  {
    int v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 > 0x333333333333333) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((__dst - (uint64_t)v13) >> 4);
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (uint64_t)v13) >> 4);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x199999999999999) {
      unint64_t v18 = 0x333333333333333;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v41 = v9;
    if (v18) {
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v9, v18);
    }
    else {
      long long v19 = 0;
    }
    long long v30 = &v19[80 * v15];
    long long __p = v19;
    long long v38 = v30;
    long long v40 = &v19[80 * v18];
    int v31 = &v30[80 * a5];
    uint64_t v32 = 80 * a5;
    do
    {
      *(_OWORD *)long long v30 = *(_OWORD *)v7;
      long long v33 = *((_OWORD *)v7 + 1);
      long long v34 = *((_OWORD *)v7 + 2);
      long long v35 = *((_OWORD *)v7 + 4);
      *((_OWORD *)v30 + 3) = *((_OWORD *)v7 + 3);
      *((_OWORD *)v30 + 4) = v35;
      *((_OWORD *)v30 + 1) = v33;
      *((_OWORD *)v30 + 2) = v34;
      v30 += 80;
      v7 += 80;
      v32 -= 80;
    }
    while (v32);
    long long v39 = v31;
    double v5 = (char *)std::vector<ZinMirWorkUnitShapeCandidate>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v39 != v38) {
      long long v39 = &v38[(v39 - v38 - 80) % 0x50uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - __dst) >> 4)) >= a5)
  {
    int v21 = &__src[80 * a5];
    int v23 = *(char **)(v9 - 8);
LABEL_17:
    int v24 = &v5[80 * a5];
    int v25 = &v23[-80 * a5];
    int v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      int v26 = v23;
      do
      {
        *(_OWORD *)int v26 = *(_OWORD *)v25;
        long long v27 = *((_OWORD *)v25 + 1);
        long long v28 = *((_OWORD *)v25 + 2);
        long long v29 = *((_OWORD *)v25 + 4);
        *((_OWORD *)v26 + 3) = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 4) = v29;
        *((_OWORD *)v26 + 1) = v27;
        *((_OWORD *)v26 + 2) = v28;
        v25 += 80;
        v26 += 80;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(v24, v5, v23 - v24 - 2);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7 - 2);
    }
    return v5;
  }
  int v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], v22 - 2);
  }
  int v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_21123B5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ZinMirWorkUnitShapeCandidate>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  double v5 = *(void **)(a2 + 8);
  double v6 = (char *)*a1;
  double v7 = v5;
  if (*a1 != __src)
  {
    double v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      *(_OWORD *)(v9 - 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *((_OWORD *)v8 - 5);
      long long v10 = *((_OWORD *)v8 - 4);
      long long v11 = *((_OWORD *)v8 - 3);
      long long v12 = *((_OWORD *)v8 - 2);
      double v7 = (void *)(v9 - 80);
      *(_OWORD *)(v9 - 18) = *(_OWORD *)(v8 - 18);
      *(_OWORD *)(v9 - 48) = v11;
      *(_OWORD *)(v9 - 32) = v12;
      *(_OWORD *)(v9 - 64) = v10;
      v8 -= 80;
      v9 -= 80;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  int v13 = a1[1];
  uint64_t v14 = *(void *)(a2 + 16);
  int64_t v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v15 - 2);
    double v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v14 + v15;
  unint64_t v16 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v17;
  unint64_t v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v18;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void ZinMirNERastParamsOpt::EnumerateWorkUnitCandidates()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Cannot find valid work unit shape candidate.\n", v0, 2u);
}

uint64_t ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates(uint8_t *buf, unsigned char *a2)
{
  *uint8_t buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "[MIR] WorkUnit cost computation failed.\n", buf, 2u);
}

void ZinMirNERastParamsOpt::EvaluateComputeCostForTileHeightCandidates()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "[MIR] Memory bound test using perf model failed.\n", v0, 2u);
}

const char **ZinComputeProgramGetSectionWithName(uint64_t a1, char *__s2, const char *a3)
{
  double v3 = 0;
  if (__s2 && a1 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 176);
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      double v8 = *(void **)v5;
      uint64_t v9 = *(void *)v5 + 24 * v6;
      while (1)
      {
        uint64_t v10 = *v8;
        if (!strncmp((const char *)(*v8 + 8), __s2, 0x10uLL))
        {
          uint64_t v11 = *(unsigned int *)(v10 + 64);
          if (v11) {
            break;
          }
        }
LABEL_7:
        v8 += 3;
        if (v8 == (void *)v9) {
          return 0;
        }
      }
      double v3 = (const char **)v8[1];
      uint64_t v12 = 40 * v11;
      while (strncmp(*v3, a3, 0x10uLL))
      {
        v3 += 5;
        v12 -= 40;
        if (!v12) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t ZinComputeProgramGetIndexOfCompilationUnitFromDebugInfo(const unsigned __int8 *a1, int a2, const char *__s)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1 && a2 && __s)
  {
    double v4 = a1;
    LOBYTE(v5) = 0;
    char v6 = 0;
    int v7 = -1;
    uint64_t v8 = 0xFFFFFFFFLL;
    uint64_t v9 = &a1[a2];
    while (1)
    {
      int v10 = *(_DWORD *)v4;
      uint64_t v11 = *((unsigned int *)v4 + 1);
      if (*(int *)v4 <= 7) {
        break;
      }
      if (v10 == 8)
      {
        LOBYTE(v5) = 1;
      }
      else
      {
        uint64_t v12 = (const char *)(v4 + 8);
        if (v10 == 2048)
        {
          if ((v6 & 1) == 0)
          {
            char v6 = 0;
            goto LABEL_26;
          }
          if (*(_DWORD *)v12 == v7)
          {
            if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
            {
              int v24 = 136315138;
              int v25 = __s;
              _os_log_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_INFO, "Found procedure name = %s", (uint8_t *)&v24, 0xCu);
            }
            return v8;
          }
LABEL_22:
          char v6 = 1;
          goto LABEL_26;
        }
        if (v10 == 2051)
        {
          if ((v5 & 1) == 0) {
            goto LABEL_24;
          }
          int v5 = v11 - 8;
          if (v11 != 8)
          {
            int v13 = &v12[v5];
            size_t v14 = strlen(__s);
            int v7 = 0;
            while (strncmp(v12, __s, v14))
            {
              v12 += strlen(v12) + 1;
              ++v7;
              if (v12 >= v13)
              {
                LOBYTE(v5) = 0;
                goto LABEL_15;
              }
            }
LABEL_24:
            LOBYTE(v5) = 0;
            goto LABEL_26;
          }
LABEL_15:
          int v7 = -1;
        }
      }
LABEL_26:
      v4 += v11;
      if (v4 >= v9)
      {
        if (v6) {
          return v8;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
    }
    if (!v10)
    {
      char v6 = 0;
      uint64_t v8 = (v8 + 1);
      goto LABEL_26;
    }
    if (v10 != 1) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  BOOL v15 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  if (v15) {
    ZinComputeProgramGetIndexOfCompilationUnitFromDebugInfo(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  return 0xFFFFFFFFLL;
}

uint64_t ZinComputeProgramGetSymbolSection(uint64_t a1, uint64_t a2, char *__s2)
{
  if ((unint64_t)(a2 - 1) > 0xFFFFFFFD || __s2 == 0) {
    return 0;
  }
  uint64_t v6 = a2;
  for (uint64_t i = a1 + 16; strcmp(*(const char **)(i - 8), __s2); i += 32)
  {
    if (!--v6) {
      return 0;
    }
  }
  return *(void *)i;
}

void ZinComputeProgramMakeWithMappedSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: Buffer overrun while parsing ident command", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: Buffer overrun while parsing macho structure", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal (null) 'data' parameter", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: Buffer overrun while parsing symbol table", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: load segments buffer overrun", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Jit operation count needs to be 0 or match operation count", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "No procedure name found.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Cannot find procedure name from thread.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: Buffer overrun while parsing macho header", a5, a6, a7, a8, 2u);
}

void ZinComputeProgramMakeWithMappedSize()
{
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_7(&dword_210C72000, &_os_log_internal, v0, "%s: illegal segment parameters: segments=%p segment_count=%zu", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_7(&dword_210C72000, &_os_log_internal, v0, "%s: illegal segment_index=%zu, (segment_count=%zu)", v1, v2, v3, v4, 2u);
}

void ZinComputeProgramMakeWithMappedSize(int a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v2 = 136315650;
  uint64_t v3 = "ZinComputeProgramStatus ZinComputeProgramMakeSymbolsHelper(const void *const, const void *const, std::span<ZinCom"
       "puteProgramSegment> &, const struct symtab_command *, std::span<ZinComputeProgramSymbol> &)";
  __int16 v4 = 1024;
  int v5 = a1;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s: illegal symbol idx=%u, symtab_cmd->nsyms=%u", (uint8_t *)&v2, 0x18u);
}

void ZinComputeProgramMakeRelocations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal (null) 'segments' parameter", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal segment", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal reloc info", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: Buffer overrun while parsing relocations", a5, a6, a7, a8, 2u);
}

void ZinComputeProgramMakeRelocations()
{
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "%s: illegal 'segment_count' parameter =%zu", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_7(&dword_210C72000, &_os_log_internal, v0, "%s: illegal symbol parameters: symbols=%p symbol_count=%zu", v1, v2, v3, v4, 2u);
}

void ZinComputeProgramMakeOperations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinComputeProgramMakeOperations()
{
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "%s: illegal 'operation_count' parameter = %zu", v1, v2, v3, v4, 2u);
}

void ZinComputeProgramMakeOperations(uint8_t *a1, void *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "ZinComputeProgramStatus ZinComputeProgramMakeAneOperations(ZinComputeProcedureOperation *, const struct compute_"
        "thread_command *, uint32_t, std::span<ZinComputeProgramSegment> &, const void *)";
  OUTLINED_FUNCTION_1(&dword_210C72000, &_os_log_internal, a3, "%s: illegal thread state flavor", a1);
}

{
  *(_DWORD *)a1 = 136315138;
  *a2 = "ZinComputeProgramStatus ZinComputeProgramMakeAneOperations(ZinComputeProcedureOperation *, const struct compute_"
        "thread_command *, uint32_t, std::span<ZinComputeProgramSegment> &, const void *)";
  OUTLINED_FUNCTION_1(&dword_210C72000, &_os_log_internal, a3, "%s: ane_thread_state_64 out of bounds", a1);
}

{
  *(_DWORD *)a1 = 136315138;
  *a2 = "ZinComputeProgramStatus ZinComputeProgramMakeAneOperations(ZinComputeProcedureOperation *, const struct compute_"
        "thread_command *, uint32_t, std::span<ZinComputeProgramSegment> &, const void *)";
  OUTLINED_FUNCTION_1(&dword_210C72000, &_os_log_internal, a3, "%s: ane_seg_thread_state_64 out of bounds", a1);
}

void ZinComputeProgramMakeBindings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal (null) 'bindings' parameter", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: Buffer overrun while parsing binding thread commands", a5, a6, a7, a8, 2u);
}

void ZinComputeProgramMakeBindings()
{
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "%s: illegal 'binding_count' parameter = %zu", v1, v2, v3, v4, 2u);
}

void ZinComputeProgramMakeProcedures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal 'procedures' parameter", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Parse error: compute_thread_command", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Allocation error: ZinComputeProgramMakeAneProcedures", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal 'proc_operation_count', no proc operations", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal 'proc_fvmlib_count', no fvmlibs", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal (null) 'proc_operations'", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, a3, "   proc_fvmlib_idx=%.4zu    proc_fvmlib_count=%.4zu", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: Unable to parse all inputs/outputs for all procedures: ", a5, a6, a7, a8, 2u);
}

void ZinComputeProgramMakeProcedures()
{
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "%s: illegal 'operation_count' parameter = %zu", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "%s: illegal 'procedure_count' parameter = %zu", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "%s: illegal 'binding_count' parameter = %zu", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "   proc_operation_idx=%.4zu    proc_operation_count=%.4zu", v1, v2, v3, v4, 0);
}

void ZinComputeProgramGetIndexOfCompilationUnitFromDebugInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinComputeProgramMakeFvmlibsHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinComputeProgramMakePreCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal (null) 'segments' parameter", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_2(&dword_210C72000, &_os_log_internal, a3, "%s: illegal 'fvmlibs' parameter", a5, a6, a7, a8, 2u);
}

void ZinComputeProgramMakePreCheck()
{
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "%s: illegal 'segment_count' parameter =%zu", v1, v2, v3, v4, 2u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_6(&dword_210C72000, &_os_log_internal, v0, "%s: illegal fvmlib_count parameter = %zu", v1, v2, v3, v4, 2u);
}

uint64_t ZinIrLRNUnit::ZinIrLRNUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = ZinIrUnit::ZinIrUnit((void *)a1, a3);
  *int v5 = &unk_26C3445F8;
  v5[7] = &unk_26C345B80;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    void v5[10] = *(void *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 12std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 56) = &unk_26C349960;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 20std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  return a1;
}

void sub_21123D2F8(_Unwind_Exception *a1)
{
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLRNUnit::TensorDimensions(ZinIrLRNUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4 = *((void *)this + 1);
  long long v5 = *(_OWORD *)(v4 + 8);
  long long v6 = *(_OWORD *)(v4 + 24);
  *((void *)a3 + 4) = *(void *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  return 0;
}

void ZinIrLRNUnit::CreateOpcode(ZinIrLRNUnit *this, const ZinIrHalParameters *a2)
{
}

void sub_21123D3C0(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x1081C40C871E4E7);
  _Unwind_Resume(a1);
}

void ZinIrLRNUnit::CreateLayer(ZinIrLRNUnit *a1, const ZinIrHalParameters *a2)
{
}

void sub_21123D4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C409D855DA1);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinParseFurthestPointSamplingUnit(CFDictionaryRef *a1, uint64_t a2, CFArrayRef *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, @"Params");
  if (!Value || (CFDictionaryRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseFurthestPointSamplingUnit();
    }
    ZinIrUnitStatus::SetError(a3, @"InvalidParamSyntax");
    return 3;
  }
  long long v8 = CFDictionaryGetValue(v6, @"CentroidCount");
  if (v8)
  {
    long long v9 = v8;
    CFTypeID v10 = CFGetTypeID(v8);
    if (v10 == CFNumberGetTypeID()) {
      long long v8 = v9;
    }
    else {
      long long v8 = 0;
    }
  }
  int valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v8, kCFNumberSInt32Type, &valuePtr);
  *(_DWORD *)(a2 + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = valuePtr;
  CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(v6, @"DistanceMetric");
  if (!v11) {
    goto LABEL_16;
  }
  CFStringRef v12 = v11;
  CFTypeID v13 = CFGetTypeID(v11);
  if (v13 != CFStringGetTypeID()) {
    goto LABEL_16;
  }
  if (!ZinCFStringEquals(v12, @"L1"))
  {
    if (ZinCFStringEquals(v12, @"L2"))
    {
LABEL_16:
      uint64_t result = 0;
      int v15 = 2;
      goto LABEL_17;
    }
    ZinIrUnitStatus::SetError(a3, @"InvalidFPSDistanceMetric");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinParseFurthestPointSamplingUnit();
    }
    return 3;
  }
  uint64_t result = 0;
  int v15 = 1;
LABEL_17:
  *(_DWORD *)(a2 + 84) = v15;
  return result;
}

void ZinParseFurthestPointSamplingUnit()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Missing FurthestPointSampling params\n", v0, 2u);
}

{
  uint8_t v0[16];

  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Unrecognized Distance Metric requested in Furthest Point Sampling unit. \n", v0, 2u);
}

long long *ZinIrHalH16s::GetParams(ZinIrHalH16s *this)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  {
    ZinIrHalH16s::GetParams(void)const::ZinIrHalH16sParameters = xmmword_211ED32D0;
    dword_26777DAF0 = 8;
    unk_26777DAF8 = xmmword_211ED25C0;
    unk_26777DB08 = xmmword_211ED32E0;
    unk_26777DB18 = xmmword_211ED32F0;
    unk_26777DB28 = xmmword_211ED2760;
    unk_26777DB38 = xmmword_211ED3300;
    unk_26777DB48 = xmmword_211ED32F0;
    unk_26777DB58 = xmmword_211ED2610;
    unk_26777DB68 = xmmword_211ED3310;
    unk_26777DB78 = xmmword_211ED3320;
    unk_26777DB88 = xmmword_211ED2640;
    unk_26777DB98 = vdupq_n_s64(4uLL);
    qword_26777DBA8 = 4;
    xmmword_26777DBB0 = xmmword_211EFDD00;
    unk_26777DBC0 = unk_211EFDD10;
    xmmword_26777DBD0 = xmmword_211EFDD00;
    unk_26777DBE0 = unk_211EFDD10;
    qword_26777DC00 = 4;
    xmmword_26777DBF0 = xmmword_211EFDD20;
    xmmword_26777DC08 = xmmword_211ED2650;
    xmmword_26777DC18 = xmmword_211ED2670;
    xmmword_26777DC28 = xmmword_211ED2670;
    xmmword_26777DC38 = xmmword_211ED2670;
    xmmword_26777DC48 = xmmword_211ED2670;
    xmmword_26777DC58 = xmmword_211ED2670;
    xmmword_26777DC68 = xmmword_211ED2690;
    xmmword_26777DC78 = xmmword_211ED26A0;
    xmmword_26777DC88 = xmmword_211ED26B0;
    xmmword_26777DC98 = xmmword_211ED2780;
    xmmword_26777DCA8 = xmmword_211ED3330;
    xmmword_26777DCB8 = xmmword_211ED26E0;
    xmmword_26777DCC8 = xmmword_211ED26F0;
    xmmword_26777DCD8 = xmmword_211ED3340;
    xmmword_26777DCE8 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_26777DCF8 = xmmword_211ED5530;
    xmmword_26777DD08 = xmmword_211ED2720;
    xmmword_26777DD18 = xmmword_211ED2730;
    xmmword_26777DD28 = xmmword_211ED2740;
    xmmword_26777DD38 = xmmword_211ED3350;
    xmmword_26777DD48 = xmmword_211ED3360;
    qword_26777DD58 = 0;
    word_26777DD60 = 256;
    xmmword_26777DD68 = xmmword_211ED2760;
    xmmword_26777DD78 = xmmword_211ED2770;
    xmmword_26777DD88 = xmmword_211ED2780;
    qword_26777DD98 = 0x10000;
    byte_26777DDA0 = 122;
    xmmword_26777DDA8 = xmmword_211ED3370;
    dword_26777DDB8 = 520097776;
    qword_26777DDBC = 0xFFFFFFEB0000000BLL;
    xmmword_26777DDC8 = xmmword_211ED27A0;
    xmmword_26777DDD8 = xmmword_211ED27B0;
    xmmword_26777DDE8 = xmmword_211ED27C0;
    int64x2_t v95 = vdupq_n_s64(8uLL);
    long long v96 = xmmword_211ED3380;
    long long v97 = xmmword_211ED3390;
    long long v98 = xmmword_211ED2730;
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_26777DDF8, (uint64_t)&v95, 4uLL);
    xmmword_26777DE10 = xmmword_211ED33A0;
    unk_26777DE20 = xmmword_211ED27E0;
    xmmword_26777DE30 = (__int128)vdupq_n_s64(0x20uLL);
    unk_26777DE40 = xmmword_211ED2610;
    xmmword_26777DE50 = (__int128)vdupq_n_s64(8uLL);
    unk_26777DE60 = xmmword_211ED27F0;
    xmmword_26777DE70 = xmmword_211ED2800;
    unk_26777DE80 = vdupq_n_s64(0x100uLL);
    xmmword_26777DE90 = (__int128)vdupq_n_s64(0x80uLL);
    unk_26777DEA0 = xmmword_211ED33B0;
    xmmword_26777DEB0 = xmmword_211ED33C0;
    unk_26777DEC0 = xmmword_211ED33D0;
    xmmword_26777DED0 = xmmword_211ED2840;
    unk_26777DEE0 = xmmword_211ED2850;
    xmmword_26777DEF0 = (__int128)vdupq_n_s64(2uLL);
    unk_26777DF00 = xmmword_211ED2670;
    xmmword_26777DF10 = (__int128)vdupq_n_s64(0x10000uLL);
    unk_26777DF20 = xmmword_211ED33E0;
    word_26777DF30 = 257;
    byte_26777DF36 = 0;
    dword_26777DF32 = 0;
    word_26777DF37 = 1;
    dword_26777DF49 = 16843009;
    qword_26777DF39 = 0x101010101010101;
    unk_26777DF41 = 0x101010101010101;
    word_26777DF4D = 0;
    byte_26777DF4F = 0;
    dword_26777DF50 = 16843009;
    word_26777DF54 = 1;
    qword_26777DF56 = 0x101010101010101;
    word_26777DF5E = 0;
    xmmword_26777DF60 = xmmword_211ED2760;
    unk_26777DF70 = xmmword_211ED2880;
    qword_26777DF88 = 0;
    unk_26777DF90 = 0;
    qword_26777DF80 = 40;
    word_26777DF98 = 1;
    *(int *)((char *)&dword_26777DF9A + 3) = 16843009;
    dword_26777DF9A = 16843009;
    qword_26777DFA8 = 16;
    byte_26777DFB0 = 0;
    dword_26777DFB1 = 16843009;
    qword_26777DFB5 = 0x1000000000000;
    dword_26777DFBD = 16843009;
    word_26777DFC1 = 2056;
    qword_26777DFC3 = 0x101010101010101;
    byte_26777DFCB = 1;
    qword_26777DFCC = 0x1010100010000;
    dword_26777DFD4 = 16777473;
    word_26777DFD8 = 2056;
    xmmword_26777DFE0 = xmmword_211ED33F0;
    qword_26777DFF0 = 4;
    word_26777DFF8 = 0;
    dword_26777DFFC = 1;
    dword_26777E000 = 0x10000;
    word_26777E008 = 257;
    dword_26777E004 = 16843009;
    byte_26777E00A = 0;
    word_26777E00F = 257;
    dword_26777E00B = 16843009;
    qword_26777E011 = 0x101000100000606;
    byte_26777E019 = 1;
    std::string::basic_string[abi:ne180100]<0>(&qword_26777E020, "Simple");
    qword_26777E038 = 25165824;
    dword_26777E040 = 1071225242;
    *(void *)algn_26777E044 = 0x230000000ELL;
    *(_OWORD *)&algn_26777E044[12] = xmmword_211ED2890;
    *(int64x2_t *)&algn_26777E044[28] = vdupq_n_s64(0x40uLL);
    *(_OWORD *)&algn_26777E044[44] = xmmword_211ED27D0;
    qword_26777E080 = 8;
    byte_26777E088 = 0;
    unk_26777E08C = 0xF3E800000;
    byte_26777E094 = 1;
    long long v129 = xmmword_211EFDD38;
    int v130 = 9;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_26777E098, &v129, 5uLL);
    v127[0] = xmmword_211EFDD4C;
    v127[1] = unk_211EFDD5C;
    v128[0] = xmmword_211EFDD6C;
    *(_OWORD *)((char *)v128 + 12) = *(long long *)((char *)&xmmword_211EFDD6C + 12);
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_26777E0B0, v127, 0xFuLL);
    v125[4] = xmmword_211EFDDC8;
    v125[5] = unk_211EFDDD8;
    v126[0] = xmmword_211EFDDE8;
    *(_OWORD *)((char *)v126 + 12) = *(long long *)((char *)&xmmword_211EFDDE8 + 12);
    v125[0] = xmmword_211EFDD88;
    v125[1] = unk_211EFDD98;
    v125[2] = xmmword_211EFDDA8;
    v125[3] = unk_211EFDDB8;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_26777E0C8, v125, 0x1FuLL);
    v123[7] = unk_211EFDE74;
    v123[8] = xmmword_211EFDE84;
    v124[0] = unk_211EFDE94;
    *(_OWORD *)((char *)v124 + 12) = unk_211EFDEA0;
    v123[4] = xmmword_211EFDE44;
    v123[5] = unk_211EFDE54;
    v123[6] = xmmword_211EFDE64;
    v123[0] = xmmword_211EFDE04;
    v123[1] = unk_211EFDE14;
    v123[2] = xmmword_211EFDE24;
    v123[3] = unk_211EFDE34;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_26777E0E0, v123, 0x2BuLL);
    int v91 = 2;
    long long v92 = xmmword_211ED28C0;
    uint64_t v93 = 0x1100000002;
    int v94 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v30, &v91, 1uLL);
    v95.i32[0] = 641877825;
    long long v96 = 0uLL;
    v95.i64[1] = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v95.i64[1], v30, (uint64_t)v31, 0xCCCCCCCCCCCCCCCDLL * ((v31 - (unsigned char *)v30) >> 3));
    int v87 = 2;
    long long v88 = xmmword_211ED28C0;
    uint64_t v89 = 0x1100000002;
    int v90 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v28, &v87, 1uLL);
    LODWORD(v97) = 759318337;
    long long v98 = 0uLL;
    *((void *)&v97 + 1) = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>((void *)&v97 + 1, v28, (uint64_t)v29, 0xCCCCCCCCCCCCCCCDLL * ((v29 - (unsigned char *)v28) >> 3));
    int v83 = 2;
    long long v84 = xmmword_211ED28C0;
    uint64_t v85 = 0x1100000002;
    int v86 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v26, &v83, 1uLL);
    int v99 = 792872769;
    memset(v100, 0, sizeof(v100));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v100, v26, (uint64_t)v27, 0xCCCCCCCCCCCCCCCDLL * ((v27 - (unsigned char *)v26) >> 3));
    int v79 = 2;
    long long v80 = xmmword_211ED28C0;
    uint64_t v81 = 0x1100000002;
    int v82 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v24, &v79, 1uLL);
    int v101 = 2084718401;
    memset(v102, 0, sizeof(v102));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v102, v24, (uint64_t)v25, 0xCCCCCCCCCCCCCCCDLL * ((v25 - (unsigned char *)v24) >> 3));
    int v75 = 10;
    int64x2_t v76 = vdupq_n_s64(1uLL);
    uint64_t v77 = 0x800000001;
    int v78 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v22, &v75, 1uLL);
    int v103 = 642527542;
    memset(v104, 0, sizeof(v104));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v104, v22, (uint64_t)v23, 0xCCCCCCCCCCCCCCCDLL * ((v23 - (unsigned char *)v22) >> 3));
    int v71 = 3;
    int64x2_t v72 = vdupq_n_s64(1uLL);
    uint64_t v73 = 0x700000002;
    int v74 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v20, &v71, 1uLL);
    int v105 = 642527336;
    memset(v106, 0, sizeof(v106));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v106, v20, (uint64_t)v21, 0xCCCCCCCCCCCCCCCDLL * ((v21 - (unsigned char *)v20) >> 3));
    int v67 = 3;
    int64x2_t v68 = vdupq_n_s64(1uLL);
    uint64_t v69 = 0x700000002;
    int v70 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v18, &v67, 1uLL);
    int v107 = 759967848;
    memset(v108, 0, sizeof(v108));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v108, v18, (uint64_t)v19, 0xCCCCCCCCCCCCCCCDLL * ((v19 - (unsigned char *)v18) >> 3));
    int v63 = 3;
    int64x2_t v64 = vdupq_n_s64(1uLL);
    uint64_t v65 = 0x700000002;
    int v66 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v16, &v63, 1uLL);
    int v109 = 793522280;
    memset(v110, 0, sizeof(v110));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v110, v16, (uint64_t)v17, 0xCCCCCCCCCCCCCCCDLL * ((v17 - (unsigned char *)v16) >> 3));
    int v59 = 3;
    int64x2_t v60 = vdupq_n_s64(1uLL);
    uint64_t v61 = 0x700000002;
    int v62 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v14, &v59, 1uLL);
    int v111 = 2085367912;
    memset(v112, 0, sizeof(v112));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v112, v14, (uint64_t)v15, 0xCCCCCCCCCCCCCCCDLL * ((v15 - (unsigned char *)v14) >> 3));
    int v55 = 3;
    long long v56 = xmmword_211ED28C0;
    uint64_t v57 = 0x1300000002;
    int v58 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v12, &v55, 1uLL);
    int v113 = 642934849;
    memset(v114, 0, sizeof(v114));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v114, v12, (uint64_t)v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - (unsigned char *)v12) >> 3));
    int v51 = 3;
    long long v52 = xmmword_211ED28C0;
    uint64_t v53 = 0x1300000002;
    int v54 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v10, &v51, 1uLL);
    int v115 = 760375361;
    memset(v116, 0, sizeof(v116));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v116, v10, (uint64_t)v11, 0xCCCCCCCCCCCCCCCDLL * ((v11 - (unsigned char *)v10) >> 3));
    int v47 = 3;
    long long v48 = xmmword_211ED28C0;
    uint64_t v49 = 0x1300000002;
    int v50 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v8, &v47, 1uLL);
    int v117 = 793929793;
    memset(v118, 0, sizeof(v118));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v118, v8, (uint64_t)v9, 0xCCCCCCCCCCCCCCCDLL * ((v9 - (unsigned char *)v8) >> 3));
    int v43 = 3;
    long long v44 = xmmword_211ED28C0;
    uint64_t v45 = 0x1300000002;
    int v46 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v6, &v43, 1uLL);
    int v119 = 2085775425;
    memset(v120, 0, sizeof(v120));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v120, v6, (uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)v6) >> 3));
    int v39 = 3;
    int64x2_t v40 = vdupq_n_s64(1uLL);
    uint64_t v41 = 0x700000002;
    int v42 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v39, 1uLL);
    int v121 = 707153000;
    memset(v122, 0, sizeof(v122));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v122, __p, (uint64_t)v5, 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_26777E0F8, (unsigned int *)&v95, 14);
    dword_26777E110 = 65793;
    word_26777E114 = 256;
    byte_26777E116 = 0;
    qword_26777E118 = 0;
    dword_26777E120 = 0;
    unk_26777E128 = 0u;
    unk_26777E138 = 0u;
    word_26777E148 = 257;
    qword_26777E170 = 8;
    xmmword_26777E150 = xmmword_211EFDEB0;
    unk_26777E160 = unk_211EFDEC0;
    unk_26777E178 = xmmword_211ED3400;
    v37[10] = xmmword_211EFDF78;
    v37[11] = unk_211EFDF88;
    uint64_t v38 = 0x41E19CF8E0000000;
    v37[6] = xmmword_211EFDF38;
    char v37[7] = unk_211EFDF48;
    v37[8] = xmmword_211EFDF58;
    v37[9] = unk_211EFDF68;
    _OWORD v37[2] = xmmword_211EFDEF8;
    void v37[3] = unk_211EFDF08;
    void v37[4] = xmmword_211EFDF18;
    v37[5] = unk_211EFDF28;
    v37[0] = xmmword_211EFDED8;
    v37[1] = unk_211EFDEE8;
    std::vector<double>::vector[abi:ne180100](&qword_26777E188, v37, 0x19uLL);
    v36[0] = xmmword_211EFDFA0;
    v36[1] = unk_211EFDFB0;
    std::vector<double>::vector[abi:ne180100](&qword_26777E1A0, v36, 4uLL);
    v35[0] = xmmword_211EFDFC0;
    v35[1] = unk_211EFDFD0;
    v35[2] = xmmword_211EFDFE0;
    std::vector<double>::vector[abi:ne180100](&qword_26777E1B8, v35, 6uLL);
    memcpy(__dst, &unk_211EFDFF0, sizeof(__dst));
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_26777E1D0, __dst, 25);
    xmmword_26777E1E8 = xmmword_211ED28E0;
    v32[0] = xmmword_211EFE180;
    v32[1] = unk_211EFE190;
    v32[2] = xmmword_211EFE1A0;
    int v33 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_26777E1F8, v32, 0xDuLL);
    xmmword_26777E210 = xmmword_211ED3410;
    unk_26777E220 = xmmword_211ED28F0;
    qword_26777E230 = 64;
    unk_26777E238 = 0x101010101010101;
    unk_26777E23E = 0x101010101010101;
    unk_26777E2C8 = 0u;
    *(_OWORD *)&qword_26777E2D8 = 0u;
    unk_26777E248 = 0u;
    unk_26777E258 = 0u;
    unk_26777E268 = 0u;
    unk_26777E278 = 0u;
    unk_26777E288 = 0u;
    unk_26777E298 = 0u;
    unk_26777E2A8 = 0u;
    unk_26777E2B8 = 0u;
    byte_26777E2D2 = 1;
    qword_26777E2D8 = 65504;
    byte_26777E2E0 = 1;
    dword_26777E2E8 = 0;
    word_26777E2EC = 257;
    dword_26777E2F0 = 0;
    word_26777E2F4 = 256;
    unk_26777E2F8 = vdupq_n_s64(0x10uLL);
    byte_26777E308 = 1;
    qword_26777E310 = 0xFFFFLL;
    byte_26777E318 = 0;
    qword_26777E320 = 3;
    word_26777E328 = 257;
    byte_26777E32A = 1;
    uint64_t v2 = 448;
    qword_26777E330 = 0x80000000;
    do
    {
      uint64_t v3 = *(void **)((char *)&v92 + v2 + 8);
      if (v3)
      {
        *(uint64_t *)((char *)&v93 + v2) = (uint64_t)v3;
        operator delete(v3);
      }
      v2 -= 32;
    }
    while (v2);
    if (__p)
    {
      long long v5 = __p;
      operator delete(__p);
    }
    if (v6)
    {
      CFTypeID v7 = v6;
      operator delete(v6);
    }
    if (v8)
    {
      long long v9 = v8;
      operator delete(v8);
    }
    if (v10)
    {
      CFStringRef v11 = v10;
      operator delete(v10);
    }
    if (v12)
    {
      CFTypeID v13 = v12;
      operator delete(v12);
    }
    if (v14)
    {
      int v15 = v14;
      operator delete(v14);
    }
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    if (v22)
    {
      int v23 = v22;
      operator delete(v22);
    }
    if (v24)
    {
      int v25 = v24;
      operator delete(v24);
    }
    if (v26)
    {
      long long v27 = v26;
      operator delete(v26);
    }
    if (v28)
    {
      long long v29 = v28;
      operator delete(v28);
    }
    if (v30)
    {
      int v31 = v30;
      operator delete(v30);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalH16s::GetParams(void)const::ZinIrHalH16sParameters, &dword_210C72000);
  }
  return &ZinIrHalH16s::GetParams(void)const::ZinIrHalH16sParameters;
}

void sub_21123E7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v33, *(void **)(v33 + 8));
  if (qword_26777E1B8)
  {
    qword_26777E1C0 = qword_26777E1B8;
    operator delete((void *)qword_26777E1B8);
  }
  if (qword_26777E1A0)
  {
    qword_26777E1A8 = qword_26777E1A0;
    operator delete((void *)qword_26777E1A0);
  }
  if (qword_26777E188)
  {
    qword_26777E190 = qword_26777E188;
    operator delete((void *)qword_26777E188);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v32, *(void **)(v32 + 8));
  uint64_t v36 = 448;
  while (1)
  {
    int v37 = *(void **)((char *)&STACK[0x6B0] + v36 - 24);
    if (v37)
    {
      *(unint64_t *)((char *)&STACK[0x6B0] + v36 - 16) = (unint64_t)v37;
      operator delete(v37);
    }
    v36 -= 32;
    if (!v36)
    {
      if (__p) {
        operator delete(__p);
      }
      if (a20) {
        operator delete(a20);
      }
      if (a23) {
        operator delete(a23);
      }
      if (a26) {
        operator delete(a26);
      }
      if (a29) {
        operator delete(a29);
      }
      if (a32)
      {
        v34[1] = a32;
        operator delete(a32);
      }
      uint64_t v38 = (void *)v34[3];
      if (v38)
      {
        v34[4] = v38;
        operator delete(v38);
      }
      int v39 = (void *)v34[6];
      if (v39)
      {
        v34[7] = v39;
        operator delete(v39);
      }
      int64x2_t v40 = (void *)v34[9];
      if (v40)
      {
        v34[10] = v40;
        operator delete(v40);
      }
      uint64_t v41 = (void *)v34[12];
      if (v41)
      {
        v34[13] = v41;
        operator delete(v41);
      }
      int v42 = (void *)v34[15];
      if (v42)
      {
        v34[16] = v42;
        operator delete(v42);
      }
      int v43 = (void *)v34[18];
      if (v43)
      {
        v34[19] = v43;
        operator delete(v43);
      }
      long long v44 = (void *)v34[21];
      if (v44)
      {
        v34[22] = v44;
        operator delete(v44);
      }
      uint64_t v45 = (void *)v34[24];
      if (v45)
      {
        v34[25] = v45;
        operator delete(v45);
      }
      if (qword_26777E0E0)
      {
        qword_26777E0E8 = qword_26777E0E0;
        operator delete((void *)qword_26777E0E0);
      }
      if (qword_26777E0C8)
      {
        qword_26777E0D0 = qword_26777E0C8;
        operator delete((void *)qword_26777E0C8);
      }
      if (qword_26777E0B0)
      {
        qword_26777E0B8 = qword_26777E0B0;
        operator delete((void *)qword_26777E0B0);
      }
      if (qword_26777E098)
      {
        qword_26777E0A0 = qword_26777E098;
        operator delete((void *)qword_26777E098);
      }
      if (byte_26777E037 < 0) {
        operator delete((void *)qword_26777E020);
      }
      if (qword_26777DDF8)
      {
        qword_26777DE00 = qword_26777DDF8;
        operator delete((void *)qword_26777DDF8);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_21123EA8C()
{
}

void sub_21123EA9C()
{
}

void sub_21123EAAC()
{
}

void sub_21123EABC()
{
}

void sub_21123EACC()
{
}

void sub_21123EADC()
{
}

void sub_21123EAEC()
{
}

void sub_21123EAFC()
{
}

void sub_21123EB14()
{
}

void sub_21123EB1C()
{
}

void sub_21123EB24()
{
}

void sub_21123EB2C()
{
}

void sub_21123EB34()
{
}

void sub_21123EB3C()
{
}

void sub_21123EB44()
{
}

uint64_t ZinCreateUnit(__CFDictionary *a1, uint64_t a2, uint64_t *a3, CFArrayRef *a4)
{
  uint64_t v194 = a1;
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"Type");
  if (Value)
  {
    CFStringRef v7 = Value;
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 == CFStringGetTypeID())
    {
      int v193 = 0;
      CFStringToZinUnitType(v7, &v193);
      switch(v193)
      {
        case 0:
        case 10:
        case 56:
          uint64_t v9 = *a3;
          *a3 = 0;
          if (v9) {
            (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
          }
          return 3;
        case 1:
          ZinIrConvUnitInfo::ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&v179);
          int v14 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseConvUnit(v194, (ZinIrConvUnitInfo *)&v179, a4) | v14)) {
            std::make_unique[abi:ne180100]<ZinIrConvUnit,ZinIrConvUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v131 = *a3;
          *a3 = 0;
          if (v131)
          {
            (*(void (**)(uint64_t))(*(void *)v131 + 8))(v131);
            uint64_t v132 = v192;
            uint64_t v192 = 0;
            if (v132) {
              (*(void (**)(uint64_t))(*(void *)v132 + 8))(v132);
            }
          }
          ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&v179);
          return 3;
        case 2:
          ZinIrPoolUnitInfo::ZinIrPoolUnitInfo((ZinIrPoolUnitInfo *)&v179);
          int v16 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParsePoolUnit(v194, (ZinIrPoolUnitInfo *)&v179, a4) | v16)) {
            std::make_unique[abi:ne180100]<ZinIrPoolUnit,ZinIrPoolUnitInfo &>();
          }
          goto LABEL_302;
        case 3:
          long long v180 = 0uLL;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34C998;
          v184[12] = 0;
          *(_DWORD *)&v184[8] = 2;
          DWORD2(v181) = 3;
          int v18 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseConcatUnit(v194, (ZinIrConcatUnitInfo *)&v179, a4) | v18)) {
            std::make_unique[abi:ne180100]<ZinIrConcatUnit,ZinIrConcatUnitInfo &>();
          }
          goto LABEL_302;
        case 4:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C348608;
          *(_DWORD *)&v184[8] = 0;
          int v20 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseEWUnit(v194, (ZinIrEWUnitInfo *)&v179, a4) | v20)) {
            std::make_unique[abi:ne180100]<ZinIrEWUnit,ZinIrEWUnitInfo &>();
          }
          goto LABEL_302;
        case 5:
          long long v180 = 0uLL;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34E990;
          __asm { FMOV            V0.2S, #1.0 }
          *(void *)&v184[12] = _D0;
          *(_DWORD *)&v184[20] = 0;
          *(_WORD *)&v184[24] = 0;
          *(_DWORD *)&v184[8] = 0;
          DWORD2(v181) = 5;
          int v26 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseScaledEWUnit(v194, (uint64_t)&v179, a4) | v26)) {
            std::make_unique[abi:ne180100]<ZinIrScaledEWUnit,ZinIrScaledEWUnitInfo &>();
          }
          goto LABEL_302;
        case 6:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34CEC8;
          *(_DWORD *)&v184[8] = 0;
          *(_OWORD *)&v184[12] = xmmword_211EDF3A0;
          __asm { FMOV            V0.2S, #1.0 }
          *(void *)&unsigned char v184[28] = _D0;
          *(_DWORD *)&v184[36] = 0;
          int v29 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseNeuronUnit(v194, (uint64_t)&v179, a4) | v29)) {
            std::make_unique[abi:ne180100]<ZinIrNeuronUnit,ZinIrNeuronUnitInfo &>();
          }
          goto LABEL_302;
        case 7:
          ZinIrCustomNeuronUnitInfo::ZinIrCustomNeuronUnitInfo((ZinIrCustomNeuronUnitInfo *)&v179);
          int v31 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseCustomNeuronUnit(v194, (ZinIrCustomNeuronUnitInfo *)&v179, a4) | v31)) {
            std::make_unique[abi:ne180100]<ZinIrCustomNeuronUnit,ZinIrCustomNeuronUnitInfo &>();
          }
          goto LABEL_302;
        case 8:
          ZinIrGOCUnitInfo::ZinIrGOCUnitInfo((ZinIrGOCUnitInfo *)&v179);
          int v33 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseGOCUnit(v194, (ZinIrGOCUnitInfo *)&v179, a4) | v33)) {
            std::make_unique[abi:ne180100]<ZinIrGOCUnit,ZinIrGOCUnitInfo &,ZinIrVersion const&>();
          }
          goto LABEL_302;
        case 9:
          ZinIrDynamicGOCUnitInfo::ZinIrDynamicGOCUnitInfo((ZinIrDynamicGOCUnitInfo *)&v179);
          int v35 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseDynamicGOCUnit(v194, (ZinIrDynamicGOCUnitInfo *)&v179, a4) | v35)) {
            std::make_unique[abi:ne180100]<ZinIrDynamicGOCUnit,ZinIrDynamicGOCUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v133 = *a3;
          *a3 = 0;
          if (v133)
          {
            (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
            uint64_t v134 = v192;
            uint64_t v192 = 0;
            if (v134) {
              (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
            }
          }
          ZinIrDynamicGOCUnitInfo::~ZinIrDynamicGOCUnitInfo((ZinIrDynamicGOCUnitInfo *)&v179);
          return 3;
        case 11:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34D980;
          *(_DWORD *)&v184[8] = 0;
          int v37 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseFlattenUnit(v194, (ZinIrFlattenUnitInfo *)&v179, a4) | v37)) {
            std::make_unique[abi:ne180100]<ZinIrFlattenUnit,ZinIrFlattenUnitInfo &>();
          }
          goto LABEL_302;
        case 12:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(_OWORD *)unsigned int v184 = 0xFFFFFFFFFFFFFFFFLL;
          *(void *)&v184[16] = 0;
          int v179 = &unk_26C34F9A8;
          int v39 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseUnflattenUnit(v194, (ZinIrUnflattenUnitInfo *)&v179, a4) | v39)) {
            std::make_unique[abi:ne180100]<ZinIrUnflattenUnit,ZinIrUnflattenUnitInfo &>();
          }
          goto LABEL_302;
        case 13:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          int v179 = &unk_26C352E08;
          *(_OWORD *)unsigned int v184 = xmmword_211EDF390;
          memset(&v184[16], 0, 32);
          int v41 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseCrossCorrelationUnit(v194, (uint64_t *)&v179, a4) | v41)) {
            std::make_unique[abi:ne180100]<ZinIrCrossCorrelationUnit,ZinIrCrossCorrelationUnitInfo &>();
          }
          goto LABEL_302;
        case 14:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C352E28;
          *(_DWORD *)&v184[8] = 0;
          *(void *)&v184[16] = 1;
          int v42 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseKernelRasterizerUnit(v194, (uint64_t)&v179, a4) | v42)) {
            std::make_unique[abi:ne180100]<ZinIrKernelRasterizerUnit,ZinIrKernelRasterizerUnitInfo &>();
          }
          goto LABEL_302;
        case 15:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34F820;
          *(void *)&long long v44 = 0x100000001;
          *((void *)&v44 + 1) = 0x100000001;
          *(_OWORD *)&v184[8] = v44;
          memset(&v184[24], 0, 28);
          int v45 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (ZinParseArgMinMaxUnit(v194, (ZinIrArgMinMaxUnitInfo *)&v179, a4) | v45) {
            _ZF = 1;
          }
          else {
            _ZF = *(_DWORD *)&v184[48] == 0;
          }
          char v47 = !_ZF;
          if (!_ZF) {
            std::make_unique[abi:ne180100]<ZinIrArgMinMaxUnit,ZinIrArgMinMaxUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v127 = *a3;
          *a3 = 0;
          if (v127)
          {
            (*(void (**)(uint64_t))(*(void *)v127 + 8))(v127);
            uint64_t v128 = v192;
            uint64_t v192 = 0;
            if (v128) {
              (*(void (**)(uint64_t))(*(void *)v128 + 8))(v128);
            }
          }
          ZinIrUnitInfo::~ZinIrUnitInfo(&v179);
          if ((v47 & 1) == 0) {
            return 3;
          }
          return 0;
        case 16:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C352608;
          *(void *)&v184[8] = 0x400000006;
          int v48 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseGlobalArgMinMaxUnit(&v194, (ZinIrGlobalArgMinMaxUnitInfo *)&v179, a4) | v48)) {
            std::make_unique[abi:ne180100]<ZinIrGlobalArgMinMaxUnit,ZinIrGlobalArgMinMaxUnitInfo &>();
          }
          goto LABEL_302;
        case 17:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34F860;
          *(_OWORD *)&v184[8] = xmmword_211EDF380;
          int v50 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseInputViewUnit(v194, (ZinIrInputViewUnitInfo *)&v179, a4) | v50)) {
            std::make_unique[abi:ne180100]<ZinIrInputViewUnit,ZinIrInputViewUnitInfo &>();
          }
          goto LABEL_302;
        case 18:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C3500E8;
          v184[8] = 0;
          int v52 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseMatrixMultUnit(v194, (ZinIrMatrixMultUnitInfo *)&v179, (ZinIrUnitStatus *)a4) | v52)) {
            std::make_unique[abi:ne180100]<ZinIrMatrixMultUnit,ZinIrMatrixMultUnitInfo &>();
          }
          goto LABEL_302;
        case 19:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34F840;
          memset(&v184[8], 0, 32);
          *(_DWORD *)&v184[40] = 1065353216;
          int v54 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (ZinParseBroadcastUnit(v194, (ZinIrBroadcastUnitInfo *)&v179, a4) | v54) {
            BOOL v55 = 1;
          }
          else {
            BOOL v55 = *(void *)&v184[32] == 0;
          }
          char v56 = !v55;
          if (!v55) {
            std::make_unique[abi:ne180100]<ZinIrBroadcastUnit,ZinIrBroadcastUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v129 = *a3;
          *a3 = 0;
          if (v129)
          {
            (*(void (**)(uint64_t))(*(void *)v129 + 8))(v129);
            uint64_t v130 = v192;
            uint64_t v192 = 0;
            if (v130) {
              (*(void (**)(uint64_t))(*(void *)v130 + 8))(v130);
            }
          }
          ZinIrBroadcastUnitInfo::~ZinIrBroadcastUnitInfo((ZinIrBroadcastUnitInfo *)&v179);
          if ((v56 & 1) == 0) {
            return 3;
          }
          return 0;
        case 20:
          ZinIrReductionUnitInfo::ZinIrReductionUnitInfo((ZinIrReductionUnitInfo *)&v179);
          int v57 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseReductionUnit(v194, (ZinIrReductionUnitInfo *)&v179, a4) | v57)) {
            std::make_unique[abi:ne180100]<ZinIrReductionUnit,ZinIrReductionUnitInfo &>();
          }
          goto LABEL_302;
        case 21:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(_OWORD *)unsigned int v184 = 0xFFFFFFFFFFFFFFFFLL;
          int v179 = &unk_26C34F988;
          *(_OWORD *)&v184[16] = 0uLL;
          int v104 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseTransposeUnit(&v194, (ZinIrTransposeUnitInfo *)&v179, a4) | v104)) {
            std::make_unique[abi:ne180100]<ZinIrTransposeUnit,ZinIrTransposeUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v159 = *a3;
          *a3 = 0;
          if (v159)
          {
            (*(void (**)(uint64_t))(*(void *)v159 + 8))(v159);
            uint64_t v160 = v192;
            uint64_t v192 = 0;
            if (v160) {
              (*(void (**)(uint64_t))(*(void *)v160 + 8))(v160);
            }
          }
          ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&v179);
          return 3;
        case 22:
          ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&v179);
          int v106 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseReshapeUnit(&v194, (ZinIrReshapeUnitInfo *)&v179, a4) | v106)) {
            std::make_unique[abi:ne180100]<ZinIrReshapeUnit,ZinIrReshapeUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v161 = *a3;
          *a3 = 0;
          if (v161)
          {
            (*(void (**)(uint64_t))(*(void *)v161 + 8))(v161);
            uint64_t v162 = v192;
            uint64_t v192 = 0;
            if (v162) {
              (*(void (**)(uint64_t))(*(void *)v162 + 8))(v162);
            }
          }
          ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&v179);
          return 3;
        case 23:
          long long v180 = 0uLL;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34C0B0;
          DWORD2(v181) = 23;
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)) {
            std::make_unique[abi:ne180100]<ZinIrShapeUnit,ZinIrShapeUnitInfo &>();
          }
          goto LABEL_302;
        case 24:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34D9C0;
          memset(&v184[8], 0, 32);
          *(_DWORD *)&v184[40] = 1065353216;
          v184[48] = 0;
          int v60 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseSoftmaxUnit(v194, (ZinIrSoftmaxUnitInfo *)&v179, a4) | v60)) {
            std::make_unique[abi:ne180100]<ZinIrSoftmaxUnit,ZinIrSoftmaxUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v135 = *a3;
          *a3 = 0;
          if (v135)
          {
            (*(void (**)(uint64_t))(*(void *)v135 + 8))(v135);
            uint64_t v136 = v192;
            uint64_t v192 = 0;
            if (v136) {
              (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
            }
          }
          ZinIrSoftmaxUnitInfo::~ZinIrSoftmaxUnitInfo((ZinIrSoftmaxUnitInfo *)&v179);
          return 3;
        case 25:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 32);
          *(_DWORD *)&v184[40] = 1065353216;
          *(_DWORD *)&v184[48] = 730643660;
          int v179 = &unk_26C351438;
          int v61 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseNormUnit(v194, (ZinIrNormUnitInfoBase *)&v179, a4) | v61)) {
            std::make_unique[abi:ne180100]<ZinIrInstanceNormUnit,ZinIrInstanceNormUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v137 = *a3;
          *a3 = 0;
          if (v137)
          {
            (*(void (**)(uint64_t))(*(void *)v137 + 8))(v137);
            uint64_t v138 = v192;
            uint64_t v192 = 0;
            if (v138) {
              (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
            }
          }
          ZinIrInstanceNormUnitInfo::~ZinIrInstanceNormUnitInfo((ZinIrInstanceNormUnitInfo *)&v179);
          return 3;
        case 26:
          long long v183 = 0u;
          long long v182 = 0u;
          long long v181 = 0u;
          long long v180 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 32);
          *(void *)&v184[40] = 1065353216;
          *(_DWORD *)&v184[48] = 730643660;
          int v179 = &unk_26C34CC90;
          int v62 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseNormUnit(v194, (ZinIrNormUnitInfoBase *)&v179, a4) | v62)) {
            std::make_unique[abi:ne180100]<ZinIrL2NormUnit,ZinIrL2NormUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v139 = *a3;
          *a3 = 0;
          if (v139)
          {
            (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
            uint64_t v140 = v192;
            uint64_t v192 = 0;
            if (v140) {
              (*(void (**)(uint64_t))(*(void *)v140 + 8))(v140);
            }
          }
          goto LABEL_215;
        case 27:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C350108;
          memset(&v184[8], 0, 32);
          *(_DWORD *)&v184[40] = 1065353216;
          int v108 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseMinMaxNormUnit(v194, (ZinIrMinMaxNormUnitInfo *)&v179, a4) | v108)) {
            std::make_unique[abi:ne180100]<ZinIrMinMaxNormUnit,ZinIrMinMaxNormUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v163 = *a3;
          *a3 = 0;
          if (v163)
          {
            (*(void (**)(uint64_t))(*(void *)v163 + 8))(v163);
            uint64_t v164 = v192;
            uint64_t v192 = 0;
            if (v164) {
              (*(void (**)(uint64_t))(*(void *)v164 + 8))(v164);
            }
          }
          ZinIrMinMaxNormUnitInfo::~ZinIrMinMaxNormUnitInfo(&v179);
          return 3;
        case 28:
          *(_DWORD *)&v184[44] = 0;
          long long v183 = 0u;
          long long v182 = 0u;
          long long v181 = 0u;
          long long v180 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 32);
          *(_DWORD *)&v184[40] = 1065353216;
          *(_DWORD *)&v184[48] = 730643660;
          int v179 = &unk_26C34F880;
          *(void *)&v184[56] = 1;
          int v109 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          int v110 = ZinParseUnitNumGroups(v194, (uint64_t *)&v184[56], a4);
          if (!(v110 | v109 | ZinParseNormUnit(v194, (ZinIrNormUnitInfoBase *)&v179, a4))) {
            std::make_unique[abi:ne180100]<ZinIrLayerNormUnit,ZinIrLayerNormUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v177 = *a3;
          *a3 = 0;
          if (v177)
          {
            (*(void (**)(uint64_t))(*(void *)v177 + 8))(v177);
            uint64_t v178 = v192;
            uint64_t v192 = 0;
            if (v178) {
              (*(void (**)(uint64_t))(*(void *)v178 + 8))(v178);
            }
          }
LABEL_215:
          ZinIrLayerNormUnitInfo::~ZinIrLayerNormUnitInfo(&v179);
          return 3;
        case 29:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C349960;
          *(_DWORD *)&v184[8] = 0;
          *(int64x2_t *)&v184[16] = vdupq_n_s64(1uLL);
          *(void *)&unsigned char v184[32] = 1;
          memset(&v184[40], 0, 24);
          *(void *)&v184[64] = 0x3F0000003F800000;
          *(_DWORD *)&v184[72] = 1065353216;
          int v63 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseLRNUnit(v194, (uint64_t)&v179, a4) | v63)) {
            std::make_unique[abi:ne180100]<ZinIrLRNUnit,ZinIrLRNUnitInfo &>();
          }
          goto LABEL_302;
        case 30:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C350080;
          __asm { FMOV            V0.2S, #1.0 }
          *(void *)&v184[16] = _D0;
          int v65 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseCostVolumeUnit(v194, (float *)&v179, a4) | v65)) {
            std::make_unique[abi:ne180100]<ZinIrCostVolumeUnit,ZinIrCostVolumeUnitInfo &>();
          }
          goto LABEL_302;
        case 31:
          long long v180 = 0uLL;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C351540;
          *(void *)&v184[8] = 0x100000001;
          *(_DWORD *)&v184[16] = 1;
          DWORD2(v181) = 31;
          int v67 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParsePixelShuffleUnit(&v194, (ZinIrPixelShuffleUnitInfo *)&v179, a4) | v67)) {
            std::make_unique[abi:ne180100]<ZinIrPixelShuffleUnit,ZinIrPixelShuffleUnitInfo &>();
          }
          goto LABEL_302;
        case 32:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C352340;
          *(void *)&v184[8] = 0x100000001;
          *(_DWORD *)&v184[16] = 1;
          int v69 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParsePixelUnshuffleUnit(&v194, (ZinIrPixelUnshuffleUnitInfo *)&v179, a4) | v69)) {
            std::make_unique[abi:ne180100]<ZinIrPixelUnshuffleUnit,ZinIrPixelUnshuffleUnitInfo &>();
          }
          goto LABEL_302;
        case 33:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(_OWORD *)unsigned int v184 = 0xFFFFFFFFFFFFFFFFLL;
          int v179 = &unk_26C353C08;
          int v71 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseFurthestPointSamplingUnit(&v194, (uint64_t)&v179, a4) | v71)) {
            std::make_unique[abi:ne180100]<ZinIrFurthestPointSamplingUnit,ZinIrFurthestPointSamplingUnitInfo &>();
          }
          goto LABEL_302;
        case 34:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C351720;
          *(void *)&v184[8] = 0x100000001;
          *(_DWORD *)&v184[16] = 1;
          int v73 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseSpaceToBatchUnit(v194, (ZinIrSpaceToBatchUnitInfo *)&v179, a4) | v73)) {
            std::make_unique[abi:ne180100]<ZinIrSpaceToBatchUnit,ZinIrSpaceToBatchUnitInfo &>();
          }
          goto LABEL_302;
        case 35:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C3512E0;
          *(void *)&v184[8] = 0x100000001;
          *(_DWORD *)&v184[16] = 1;
          int v75 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseBatchToSpaceUnit(v194, (ZinIrBatchToSpaceUnitInfo *)&v179, a4) | v75)) {
            std::make_unique[abi:ne180100]<ZinIrBatchToSpaceUnit,ZinIrBatchToSpaceUnitInfo &>();
          }
          goto LABEL_302;
        case 36:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C352360;
          *(void *)&v184[8] = 0x100000001;
          *(_DWORD *)&v184[16] = 1;
          int v77 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseSpaceToChannelUnit(v194, (ZinIrSpaceToChannelUnitInfo *)&v179, a4) | v77)) {
            std::make_unique[abi:ne180100]<ZinIrSpaceToChannelUnit,ZinIrSpaceToChannelUnitInfo &>();
          }
          goto LABEL_302;
        case 37:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C352320;
          *(void *)&v184[8] = 0x100000001;
          *(_DWORD *)&v184[16] = 1;
          int v111 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseChannelToSpaceUnit(v194, (ZinIrChannelToSpaceUnitInfo *)&v179, a4) | v111)) {
            std::make_unique[abi:ne180100]<ZinIrChannelToSpaceUnit,ZinIrChannelToSpaceUnitInfo &>();
          }
          goto LABEL_302;
        case 38:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C351560;
          *(_DWORD *)&v184[8] = 0;
          int v113 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseRadiusSearchUnit(&v194, (uint64_t)&v179, a4) | v113)) {
            std::make_unique[abi:ne180100]<ZinIrRadiusSearchUnit,ZinIrRadiusSearchUnitInfo &>();
          }
          goto LABEL_302;
        case 39:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 74);
          int v179 = &unk_26C34CC48;
          memset(&v184[88], 0, 24);
          int v79 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseGatherUnit(v194, (ZinIrGatherUnitInfo *)&v179, a4) | v79)) {
            std::make_unique[abi:ne180100]<ZinIrGatherUnit,ZinIrGatherUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v141 = *a3;
          *a3 = 0;
          if (v141)
          {
            (*(void (**)(uint64_t))(*(void *)v141 + 8))(v141);
            uint64_t v142 = v192;
            uint64_t v192 = 0;
            if (v142) {
              (*(void (**)(uint64_t))(*(void *)v142 + 8))(v142);
            }
          }
          ZinIrGatherUnitInfo::~ZinIrGatherUnitInfo((ZinIrGatherUnitInfo *)&v179);
          return 3;
        case 40:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 74);
          int v179 = &unk_26C3525E0;
          memset(&v184[88], 0, 48);
          long long v185 = 0u;
          int v80 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseAffineTransformUnit(v194, (char **)&v179, a4) | v80)) {
            std::make_unique[abi:ne180100]<ZinIrAffineTransformUnit,ZinIrAffineTransformUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v143 = *a3;
          *a3 = 0;
          if (v143)
          {
            (*(void (**)(uint64_t))(*(void *)v143 + 8))(v143);
            uint64_t v144 = v192;
            uint64_t v192 = 0;
            if (v144) {
              (*(void (**)(uint64_t))(*(void *)v144 + 8))(v144);
            }
          }
          ZinIrAffineTransformUnitInfo::~ZinIrAffineTransformUnitInfo((ZinIrAffineTransformUnitInfo *)&v179);
          return 3;
        case 41:
          long long v180 = 0uLL;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 74);
          int v179 = &unk_26C34CF28;
          *(void *)&v184[84] = 0x100000001;
          __asm { FMOV            V0.2S, #-1.0 }
          *(void *)&v184[92] = _D0;
          memset(&v184[104], 0, 25);
          DWORD2(v181) = 41;
          int v116 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseResizeUnit(v194, (ZinIrResizeUnitInfo *)&v179, a4) | v116)) {
            std::make_unique[abi:ne180100]<ZinIrResizeUnit,ZinIrResizeUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v165 = *a3;
          *a3 = 0;
          if (v165)
          {
            (*(void (**)(uint64_t))(*(void *)v165 + 8))(v165);
            uint64_t v166 = v192;
            uint64_t v192 = 0;
            if (v166) {
              (*(void (**)(uint64_t))(*(void *)v166 + 8))(v166);
            }
          }
          ZinIrResizeUnitInfo::~ZinIrResizeUnitInfo((ZinIrResizeUnitInfo *)&v179);
          return 3;
        case 42:
          long long v180 = 0uLL;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 74);
          int v179 = &unk_26C34E968;
          memset(&v184[88], 0, 24);
          DWORD2(v181) = 42;
          int v81 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseResizeAsUnit(v194, (char **)&v179, a4) | v81)) {
            std::make_unique[abi:ne180100]<ZinIrResizeAsUnit,ZinIrResizeAsUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v145 = *a3;
          *a3 = 0;
          if (v145)
          {
            (*(void (**)(uint64_t))(*(void *)v145 + 8))(v145);
            uint64_t v146 = v192;
            uint64_t v192 = 0;
            if (v146) {
              (*(void (**)(uint64_t))(*(void *)v146 + 8))(v146);
            }
          }
          ZinIrResizeAsUnitInfo::~ZinIrResizeAsUnitInfo((ZinIrResizeAsUnitInfo *)&v179);
          return 3;
        case 43:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 74);
          int v179 = &unk_26C34E940;
          memset(&v184[88], 0, 28);
          int v82 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseResampleUnit(v194, (void ***)&v179, a4) | v82)) {
            std::make_unique[abi:ne180100]<ZinIrResampleUnit,ZinIrResampleUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v147 = *a3;
          *a3 = 0;
          if (v147)
          {
            (*(void (**)(uint64_t))(*(void *)v147 + 8))(v147);
            uint64_t v148 = v192;
            uint64_t v192 = 0;
            if (v148) {
              (*(void (**)(uint64_t))(*(void *)v148 + 8))(v148);
            }
          }
          ZinIrResampleUnitInfo::~ZinIrResampleUnitInfo((ZinIrResampleUnitInfo *)&v179);
          return 3;
        case 44:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 74);
          memset(&v184[84], 0, 40);
          int v179 = &unk_26C3499A0;
          *(void *)&v184[128] = 0;
          long long v185 = 0uLL;
          __int16 v186 = 0;
          int v83 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParsePadUnit(v194, (ZinIrPadUnitInfo *)&v179, a4) | v83)) {
            std::make_unique[abi:ne180100]<ZinIrPadUnit,ZinIrPadUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v149 = *a3;
          *a3 = 0;
          if (v149)
          {
            (*(void (**)(uint64_t))(*(void *)v149 + 8))(v149);
            uint64_t v150 = v192;
            uint64_t v192 = 0;
            if (v150) {
              (*(void (**)(uint64_t))(*(void *)v150 + 8))(v150);
            }
          }
          ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&v179);
          return 3;
        case 45:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34AE48;
          memset(&v184[8], 0, 32);
          *(_DWORD *)&v184[40] = 1065353216;
          int v117 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseTileUnit(v194, (ZinIrTileUnitInfo *)&v179, a4) | v117)) {
            std::make_unique[abi:ne180100]<ZinIrTileUnit,ZinIrTileUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v167 = *a3;
          *a3 = 0;
          if (v167)
          {
            (*(void (**)(uint64_t))(*(void *)v167 + 8))(v167);
            uint64_t v168 = v192;
            uint64_t v192 = 0;
            if (v168) {
              (*(void (**)(uint64_t))(*(void *)v168 + 8))(v168);
            }
          }
          ZinIrTileUnitInfo::~ZinIrTileUnitInfo((ZinIrTileUnitInfo *)&v179);
          return 3;
        case 46:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 74);
          int v179 = &unk_26C3500A0;
          *(_DWORD *)&v184[84] = 5;
          memset(&v184[88], 0, 24);
          *(void *)&long long v84 = 0x100000001;
          *((void *)&v84 + 1) = 0x100000001;
          *(_OWORD *)&v184[112] = v84;
          int v85 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseCropResizeUnit(v194, (ZinIrCropResizeUnitInfo *)&v179, a4) | v85)) {
            std::make_unique[abi:ne180100]<ZinIrCropResizeUnit,ZinIrCropResizeUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v151 = *a3;
          *a3 = 0;
          if (v151)
          {
            (*(void (**)(uint64_t))(*(void *)v151 + 8))(v151);
            uint64_t v152 = v192;
            uint64_t v192 = 0;
            if (v152) {
              (*(void (**)(uint64_t))(*(void *)v152 + 8))(v152);
            }
          }
          ZinIrCropResizeUnitInfo::~ZinIrCropResizeUnitInfo((ZinIrCropResizeUnitInfo *)&v179);
          return 3;
        case 47:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 74);
          int v179 = &unk_26C3513F0;
          memset(&v184[88], 0, 48);
          int v86 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseDynamicSliceUnit(v194, (ZinIrDynamicSliceUnitInfo *)&v179, a4) | v86)) {
            std::make_unique[abi:ne180100]<ZinIrDynamicSliceUnit,ZinIrDynamicSliceUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v153 = *a3;
          *a3 = 0;
          if (v153)
          {
            (*(void (**)(uint64_t))(*(void *)v153 + 8))(v153);
            uint64_t v154 = v192;
            uint64_t v192 = 0;
            if (v154) {
              (*(void (**)(uint64_t))(*(void *)v154 + 8))(v154);
            }
          }
          ZinIrDynamicSliceUnitInfo::~ZinIrDynamicSliceUnitInfo((ZinIrDynamicSliceUnitInfo *)&v179);
          return 3;
        case 48:
        case 49:
          uint64_t v12 = *a3;
          *a3 = 0;
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
          return 0;
        case 50:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34ADE8;
          *(void *)&v184[8] = 0x200000000;
          *(_DWORD *)&v184[16] = 4;
          memset(&v184[32], 0, 17);
          *(void *)&v184[24] = &v184[32];
          int v118 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseSortUnit(&v194, (ZinIrSortUnitInfo *)&v179, a4) | v118)) {
            std::make_unique[abi:ne180100]<ZinIrSortUnit,ZinIrSortUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v169 = *a3;
          *a3 = 0;
          if (v169)
          {
            (*(void (**)(uint64_t))(*(void *)v169 + 8))(v169);
            uint64_t v170 = v192;
            uint64_t v192 = 0;
            if (v170) {
              (*(void (**)(uint64_t))(*(void *)v170 + 8))(v170);
            }
          }
          ZinIrSortUnitInfo::~ZinIrSortUnitInfo((ZinIrSortUnitInfo *)&v179);
          return 3;
        case 51:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34AE68;
          *(_DWORD *)&v184[8] = 0;
          *(void *)&v184[16] = 1;
          *(void *)&v184[24] = 0x400000002;
          memset(&v184[40], 0, 17);
          *(void *)&unsigned char v184[32] = &v184[40];
          int v119 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseTopKUnit(&v194, (ZinIrTopKUnitInfo *)&v179, a4) | v119)) {
            std::make_unique[abi:ne180100]<ZinIrTopKUnit,ZinIrTopKUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v171 = *a3;
          *a3 = 0;
          if (v171)
          {
            (*(void (**)(uint64_t))(*(void *)v171 + 8))(v171);
            uint64_t v172 = v192;
            uint64_t v192 = 0;
            if (v172) {
              (*(void (**)(uint64_t))(*(void *)v172 + 8))(v172);
            }
          }
          ZinIrTopKUnitInfo::~ZinIrTopKUnitInfo((ZinIrTopKUnitInfo *)&v179);
          return 3;
        case 52:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(_OWORD *)unsigned int v184 = 0xFFFFFFFFFFFFFFFFLL;
          *(_DWORD *)&v184[24] = 0;
          int v179 = &unk_26C349980;
          *(void *)&v184[14] = 0;
          int v87 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseNMSUnit(&v194, (uint64_t)&v179, a4) | v87)) {
            std::make_unique[abi:ne180100]<ZinIrNMSUnit,ZinIrNMSUnitInfo &>();
          }
          goto LABEL_302;
        case 53:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C353A40;
          *(_DWORD *)&v184[8] = 0;
          memset(&v184[16], 0, 72);
          *(_DWORD *)&v184[88] = 897988541;
          int v120 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseMatrixDecompositionUnit(v194, (ZinIrMatrixDecompositionUnitInfo *)&v179, a4) | v120)) {
            std::make_unique[abi:ne180100]<ZinIrMatrixDecompositionUnit,ZinIrMatrixDecompositionUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v173 = *a3;
          *a3 = 0;
          if (v173)
          {
            (*(void (**)(uint64_t))(*(void *)v173 + 8))(v173);
            uint64_t v174 = v192;
            uint64_t v192 = 0;
            if (v174) {
              (*(void (**)(uint64_t))(*(void *)v174 + 8))(v174);
            }
          }
          ZinIrMatrixDecompositionUnitInfo::~ZinIrMatrixDecompositionUnitInfo((ZinIrMatrixDecompositionUnitInfo *)&v179);
          return 3;
        case 54:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34D940;
          *(_DWORD *)&v184[8] = 0;
          *(void *)&v184[16] = 0;
          v184[24] = 1;
          int v121 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseDropoutUnit(&v194, (uint64_t)&v179, a4) | v121)) {
            std::make_unique[abi:ne180100]<ZinIrDropoutUnit,ZinIrDropoutUnitInfo &>();
          }
          goto LABEL_302;
        case 55:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C34CF08;
          memset(&v184[8], 0, 44);
          *(_DWORD *)&v184[52] = 1065353216;
          *(void *)&v184[56] = 0;
          int v89 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseRandomUnit(&v194, (uint64_t)&v179, a4) | v89)) {
            std::make_unique[abi:ne180100]<ZinIrRandomUnit,ZinIrRandomUnitInfo &>();
          }
          goto LABEL_302;
        case 57:
          int v179 = &unk_26C345B80;
          long long v180 = 0uLL;
          *(void *)&long long v181 = 0;
          DWORD2(v181) = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)) {
            std::make_unique[abi:ne180100]<ZinIrCrossProductUnit,ZinIrUnitInfo &>();
          }
          goto LABEL_302;
        case 58:
          ZinIrQuantUnitInfo::ZinIrQuantUnitInfo((ZinIrQuantUnitInfo *)&v179);
          int v90 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseQuantUnit(v194, (ZinIrQuantUnitInfo *)&v179, a4) | v90)) {
            std::make_unique[abi:ne180100]<ZinIrQuantUnit,ZinIrQuantUnitInfo &>();
          }
          goto LABEL_302;
        case 59:
          ZinIrDeQuantUnitInfo::ZinIrDeQuantUnitInfo((ZinIrDeQuantUnitInfo *)&v179);
          int v124 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseDeQuantUnit(v194, (ZinIrDeQuantUnitInfo *)&v179, a4) | v124)) {
            std::make_unique[abi:ne180100]<ZinIrDeQuantUnit,ZinIrDeQuantUnitInfo &>();
          }
          goto LABEL_302;
        case 60:
          ZinIrLinearUnitInfo::ZinIrLinearUnitInfo((ZinIrLinearUnitInfo *)&v179);
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)
            && !ZinParseLinearUnit(v194, (ZinIrLinearUnitInfo *)&v179, a4))
          {
            std::make_unique[abi:ne180100]<ZinIrLinearUnit,ZinIrLinearUnitInfo &>();
          }
          uint64_t v92 = *a3;
          *a3 = 0;
          if (v92) {
            (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
          }
          uint64_t v10 = 3;
          ZinIrLinearUnitInfo::~ZinIrLinearUnitInfo((ZinIrLinearUnitInfo *)&v179);
          return v10;
        case 61:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          int v179 = &unk_26C3501F8;
          memset(&v184[8], 0, 32);
          *(_DWORD *)&v184[40] = 1065353216;
          memset(&v184[48], 0, 32);
          *(_DWORD *)&v184[80] = 1065353216;
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)
            && !ZinParseRingBufferWriterUnit(v194, (ZinIrRingBufferUnitInfo *)&v179, a4))
          {
            std::make_unique[abi:ne180100]<ZinIrRingBufferWriterUnit,ZinIrRingBufferUnitInfo &>();
          }
          uint64_t v93 = *a3;
          *a3 = 0;
          if (v93) {
            (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
          }
          uint64_t v10 = 3;
          ZinIrRingBufferUnitInfo::~ZinIrRingBufferUnitInfo(&v179);
          return v10;
        case 62:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          memset(&v184[8], 0, 32);
          *(_DWORD *)&v184[40] = 1065353216;
          memset(&v184[48], 0, 32);
          *(_DWORD *)&v184[80] = 1065353216;
          int v179 = &unk_26C352E48;
          memset(&v184[88], 0, 32);
          *(_DWORD *)&v184[120] = 1065353216;
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)
            && !ZinParseRingBufferReaderUnit(v194, (ZinIrRingBufferReaderUnitInfo *)&v179, a4))
          {
            std::make_unique[abi:ne180100]<ZinIrRingBufferReaderUnit,ZinIrRingBufferReaderUnitInfo &>();
          }
          uint64_t v94 = *a3;
          *a3 = 0;
          if (v94) {
            (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
          }
          uint64_t v10 = 3;
          ZinIrRingBufferReaderUnitInfo::~ZinIrRingBufferReaderUnitInfo(&v179);
          return v10;
        case 63:
          int v179 = &unk_26C345B80;
          long long v180 = 0uLL;
          *(void *)&long long v181 = 0;
          DWORD2(v181) = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)) {
            std::make_unique[abi:ne180100]<ZinIrPhiUnit,ZinIrUnitInfo &>();
          }
          goto LABEL_302;
        case 64:
          int v179 = &unk_26C345B80;
          long long v180 = 0uLL;
          *(void *)&long long v181 = 0;
          DWORD2(v181) = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)) {
            std::make_unique[abi:ne180100]<ZinIrConditionUnit,ZinIrUnitInfo &>();
          }
LABEL_302:
          uint64_t v192 = 0;
          uint64_t v175 = *a3;
          *a3 = 0;
          if (v175)
          {
            (*(void (**)(uint64_t))(*(void *)v175 + 8))(v175);
            uint64_t v176 = v192;
            uint64_t v192 = 0;
            if (v176) {
              (*(void (**)(uint64_t))(*(void *)v176 + 8))(v176);
            }
          }
          ZinIrUnitInfo::~ZinIrUnitInfo(&v179);
          return 3;
        case 65:
          ZinIrNEConvUnitInfo::ZinIrNEConvUnitInfo((ZinIrNEConvUnitInfo *)&v179);
          int v97 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParseNEConvUnit(v194, (ZinIrNEConvUnitInfo *)&v179, a4) | v97)) {
            std::make_unique[abi:ne180100]<ZinIrNEConvUnit,ZinIrNEConvUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v155 = *a3;
          *a3 = 0;
          if (v155)
          {
            (*(void (**)(uint64_t))(*(void *)v155 + 8))(v155);
            uint64_t v156 = v192;
            uint64_t v192 = 0;
            if (v156) {
              (*(void (**)(uint64_t))(*(void *)v156 + 8))(v156);
            }
          }
          ZinIrNEConvUnitInfo::~ZinIrNEConvUnitInfo((ZinIrNEConvUnitInfo *)&v179);
          return 3;
        case 66:
          ZinIrNEMatMulUnitInfo::ZinIrNEMatMulUnitInfo((ZinIrNEMatMulUnitInfo *)&v179);
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)
            && !ZinParseNEMatMulUnit(v194, (ZinIrNEMatMulUnitInfo *)&v179, a4))
          {
            std::make_unique[abi:ne180100]<ZinIrNEMatMulUnit,ZinIrNEMatMulUnitInfo &>();
          }
          uint64_t v99 = *a3;
          *a3 = 0;
          if (v99) {
            (*(void (**)(uint64_t))(*(void *)v99 + 8))(v99);
          }
          uint64_t v10 = 3;
          ZinIrNEMatMulUnitInfo::~ZinIrNEMatMulUnitInfo(&v179);
          return v10;
        case 67:
          ZinIrNEPoolUnitInfo::ZinIrNEPoolUnitInfo((ZinIrNEPoolUnitInfo *)&v179);
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)
            && !ZinParseNEPoolUnit(v194, (ZinIrNEPoolUnitInfo *)&v179, a4))
          {
            std::make_unique[abi:ne180100]<ZinIrNEPoolUnit,ZinIrNEPoolUnitInfo &>();
          }
          uint64_t v100 = *a3;
          *a3 = 0;
          if (v100) {
            (*(void (**)(uint64_t))(*(void *)v100 + 8))(v100);
          }
          uint64_t v10 = 3;
          ZinIrNEPoolUnitInfo::~ZinIrNEPoolUnitInfo(&v179);
          return v10;
        case 68:
          long long v180 = 0uLL;
          DWORD2(v181) = 0;
          *(void *)&long long v181 = 0;
          long long v182 = 0u;
          long long v183 = 0u;
          *(void *)unsigned int v184 = -1;
          v184[8] = 0;
          char v187 = 0;
          char v188 = 0;
          char v189 = 0;
          char v190 = 0;
          char v191 = 0;
          int v179 = &unk_26C34E728;
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)
            && !ZinParseNEBypassUnit(v194, &v179, a4))
          {
            std::make_unique[abi:ne180100]<ZinIrNEBypassUnit,ZinIrNEBypassUnitInfo &>();
          }
          uint64_t v126 = *a3;
          *a3 = 0;
          if (v126) {
            (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
          }
          uint64_t v10 = 3;
          ZinIrNEUnitInfo::~ZinIrNEUnitInfo(&v179);
          return v10;
        case 69:
          ZinIrPEPoolUnitInfo::ZinIrPEPoolUnitInfo((ZinIrPEPoolUnitInfo *)&v179);
          int v101 = ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4);
          if (!(ZinParsePEPoolUnit(v194, (ZinIrPEPoolUnitInfo *)&v179, a4) | v101)) {
            std::make_unique[abi:ne180100]<ZinIrPEPoolUnit,ZinIrPEPoolUnitInfo &>();
          }
          uint64_t v192 = 0;
          uint64_t v157 = *a3;
          *a3 = 0;
          if (v157)
          {
            (*(void (**)(uint64_t))(*(void *)v157 + 8))(v157);
            uint64_t v158 = v192;
            uint64_t v192 = 0;
            if (v158) {
              (*(void (**)(uint64_t))(*(void *)v158 + 8))(v158);
            }
          }
          ZinIrPEPoolUnitInfo::~ZinIrPEPoolUnitInfo(&v179);
          return 3;
        case 70:
          ZinIrPEElementWiseUnitInfo::ZinIrPEElementWiseUnitInfo((ZinIrPEElementWiseUnitInfo *)&v179);
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)
            && !ZinParsePEElementWiseUnit(v194, (ZinIrPEElementWiseUnitInfo *)&v179, a4))
          {
            std::make_unique[abi:ne180100]<ZinIrPEElementWiseUnit,ZinIrPEElementWiseUnitInfo &>();
          }
          uint64_t v13 = *a3;
          *a3 = 0;
          if (v13) {
            (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          }
          uint64_t v10 = 3;
          ZinIrPEElementWiseUnitInfo::~ZinIrPEElementWiseUnitInfo(&v179);
          return v10;
        case 71:
          ZinIrPEGOCUnitInfo::ZinIrPEGOCUnitInfo((ZinIrPEGOCUnitInfo *)&v179);
          if (!ZinParseUnit(v194, (ZinIrUnitInfo *)&v179, a4)
            && !ZinParsePEGOCUnit(v194, (ZinIrPEGOCUnitInfo *)&v179, a4))
          {
            std::make_unique[abi:ne180100]<ZinIrPEGOCUnit,ZinIrPEGOCUnitInfo &>();
          }
          uint64_t v103 = *a3;
          *a3 = 0;
          if (v103) {
            (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
          }
          uint64_t v10 = 3;
          ZinIrPEGOCUnitInfo::~ZinIrPEGOCUnitInfo((ZinIrPEGOCUnitInfo *)&v179);
          return v10;
        default:
          return 3;
      }
    }
  }
  ZinIrUnitStatus::SetError(a4, @"InvalidUnitTypeSyntax");
  return 3;
}

void sub_211241EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void std::make_unique[abi:ne180100]<ZinIrConvUnit,ZinIrConvUnitInfo &>()
{
}

void sub_211242404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C408C2DD427);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPoolUnit,ZinIrPoolUnitInfo &>()
{
}

void sub_2112424B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C402A538098);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrConcatUnit,ZinIrConcatUnitInfo &>()
{
}

void sub_21124255C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40EABE0AFALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrEWUnit,ZinIrEWUnitInfo &>()
{
}

void sub_211242608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40916FB9FCLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrScaledEWUnit,ZinIrScaledEWUnitInfo &>()
{
}

void sub_2112426B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40268D61AFLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrNeuronUnit,ZinIrNeuronUnitInfo &>()
{
}

void sub_211242760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C403096705CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrCustomNeuronUnit,ZinIrCustomNeuronUnitInfo &>()
{
}

void sub_2112427E8(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40969395FFLL);
  _Unwind_Resume(a1);
}

void ZinIrGOCUnitInfo::ZinIrGOCUnitInfo(ZinIrGOCUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *(void *)this = &unk_26C349940;
  *((_WORD *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(void *)((char *)this + 84) = 1065353216;
  *((_WORD *)this + 46) = 0;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 104) = 0;
  *(void *)((char *)this + 108) = -1;
  *((void *)this + 15) = -1;
  *((unsigned char *)this + 128) = 0;
  *(void *)((char *)this + 132) = -1;
  *((void *)this + 18) = -1;
}

void std::make_unique[abi:ne180100]<ZinIrGOCUnit,ZinIrGOCUnitInfo &,ZinIrVersion const&>()
{
}

void sub_2112428D8(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40D25B138BLL);
  _Unwind_Resume(a1);
}

void ZinIrDynamicGOCUnitInfo::ZinIrDynamicGOCUnitInfo(ZinIrDynamicGOCUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *(void *)this = &unk_26C3500C8;
  *((_DWORD *)this + 2std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 1065353216;
  *((_WORD *)this + 42) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 3std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 2std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = -1;
  *((void *)this + 11) = &unk_26C34F840;
  *((void *)this + 12) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 5std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 1065353216;
  *((_WORD *)this + 104) = 0;
  *((unsigned char *)this + 21std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
}

void std::make_unique[abi:ne180100]<ZinIrDynamicGOCUnit,ZinIrDynamicGOCUnitInfo &>()
{
}

void sub_211242A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40700454B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrFlattenUnit,ZinIrFlattenUnitInfo &>()
{
}

void sub_211242AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40916FB9FCLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrUnflattenUnit,ZinIrUnflattenUnitInfo &>()
{
}

void sub_211242B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40D483CAEALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrCrossCorrelationUnit,ZinIrCrossCorrelationUnitInfo &>()
{
}

void sub_211242C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40AA29E5E7);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrKernelRasterizerUnit,ZinIrKernelRasterizerUnitInfo &>()
{
}

void sub_211242C90(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C407B636525);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrArgMinMaxUnit,ZinIrArgMinMaxUnitInfo &>()
{
}

void sub_211242D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40CCA78E7CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrBroadcastUnit,ZinIrBroadcastUnitInfo &>()
{
}

void sub_211242DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40643987F4);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrInputViewUnit,ZinIrInputViewUnitInfo &>()
{
}

void sub_211242E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40D483CAEALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrMatrixMultUnit,ZinIrMatrixMultUnitInfo &>()
{
}

void sub_211242F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C401CE9E38ELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrReductionUnit,ZinIrReductionUnitInfo &>()
{
}

void sub_211242FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40CF299463);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrTransposeUnit,ZinIrTransposeUnitInfo &>()
{
}

void sub_211243088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C400D43BBFELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrReshapeUnit,ZinIrReshapeUnitInfo &>()
{
}

void sub_211243134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40F343EBDBLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrShapeUnit,ZinIrShapeUnitInfo &>()
{
}

void sub_2112431E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C400022C6FFLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrSoftmaxUnit,ZinIrSoftmaxUnitInfo &>()
{
}

void sub_21124328C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C402C4C3889);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrInstanceNormUnit,ZinIrInstanceNormUnitInfo &>()
{
}

void sub_211243338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40560BEDC2);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrL2NormUnit,ZinIrL2NormUnitInfo &>()
{
}

void sub_2112433E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40560BEDC2);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrMinMaxNormUnit,ZinIrMinMaxNormUnitInfo &>()
{
}

void sub_211243490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40560BEDC2);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrLayerNormUnit,ZinIrLayerNormUnitInfo &>()
{
}

void sub_21124353C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40CA54C831);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrLRNUnit,ZinIrLRNUnitInfo &>()
{
}

void sub_2112435E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40D610EE6ELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrCostVolumeUnit,ZinIrCostVolumeUnitInfo &>()
{
}

void sub_211243670(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40D483CAEALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPixelShuffleUnit,ZinIrPixelShuffleUnitInfo &>()
{
}

void sub_21124370C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPixelUnshuffleUnit,ZinIrPixelUnshuffleUnitInfo &>()
{
}

void sub_2112437B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrFurthestPointSamplingUnit,ZinIrFurthestPointSamplingUnitInfo &>()
{
}

void sub_211243864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40E3A28A69);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrSpaceToBatchUnit,ZinIrSpaceToBatchUnitInfo &>()
{
}

void sub_211243910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrBatchToSpaceUnit,ZinIrBatchToSpaceUnitInfo &>()
{
}

void sub_2112439BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrChannelToSpaceUnit,ZinIrChannelToSpaceUnitInfo &>()
{
}

void sub_211243A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrSpaceToChannelUnit,ZinIrSpaceToChannelUnitInfo &>()
{
}

void sub_211243B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4064CE7D0CLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrRadiusSearchUnit,ZinIrRadiusSearchUnitInfo &>()
{
}

void sub_211243BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40916FB9FCLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrGatherUnit,ZinIrGatherUnitInfo &>()
{
}

void sub_211243C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4075C22333);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrAffineTransformUnit,ZinIrAffineTransformUnitInfo &>()
{
}

void sub_211243D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4008FE49C6);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrResizeUnit,ZinIrResizeUnitInfo &>()
{
}

void sub_211243DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4048329A03);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrResizeAsUnit,ZinIrResizeAsUnitInfo &>()
{
}

void sub_211243E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C401A02D76FLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrResampleUnit,ZinIrResampleUnitInfo &>()
{
}

void sub_211243F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40A3B92BB8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPadUnit,ZinIrPadUnitInfo &>()
{
}

void sub_211243FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4015392E2ELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrTileUnit,ZinIrTileUnitInfo &>()
{
}

void sub_211244074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40643987F4);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrCropResizeUnit,ZinIrCropResizeUnitInfo &>()
{
}

void sub_211244120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4077A31195);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrDynamicSliceUnit,ZinIrDynamicSliceUnitInfo &>()
{
}

void sub_2112441CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C402DFD0A37);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrGlobalArgMinMaxUnit,ZinIrGlobalArgMinMaxUnitInfo &>()
{
}

void sub_211244278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40E3A28A69);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrSortUnit,ZinIrSortUnitInfo &>()
{
}

void sub_211244324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C405B421C95);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrTopKUnit,ZinIrTopKUnitInfo &>()
{
}

void sub_2112443D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40ABF93603);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrNMSUnit,ZinIrNMSUnitInfo &>()
{
}

void sub_21124447C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C408D2572CELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrMatrixDecompositionUnit,ZinIrMatrixDecompositionUnitInfo &>()
{
}

void sub_211244504(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40A38921DDLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrDropoutUnit,ZinIrDropoutUnitInfo &>()
{
}

void sub_2112445A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C4078F2ED1BLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrRandomUnit,ZinIrRandomUnitInfo &>()
{
}

void sub_21124464C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C405FF2D9E1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrCrossProductUnit,ZinIrUnitInfo &>()
{
}

void sub_2112446F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C400022C6FFLL);
  _Unwind_Resume(a1);
}

void ZinIrQuantUnitInfo::ZinIrQuantUnitInfo(ZinIrQuantUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *(void *)this = &unk_26C34BFA0;
  *((unsigned char *)this + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(void *)((char *)this + 84) = -1;
  *((void *)this + 12) = -1;
  *((unsigned char *)this + 104) = 0;
  *(void *)((char *)this + 108) = -1;
  *((void *)this + 15) = -1;
  *((_DWORD *)this + 32) = 1065353216;
  *(void *)((char *)this + 132) = 0x600000000;
  *((_DWORD *)this + 35) = 0;
}

void std::make_unique[abi:ne180100]<ZinIrQuantUnit,ZinIrQuantUnitInfo &>()
{
}

void sub_2112447F4(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40A9DA204DLL);
  _Unwind_Resume(a1);
}

void ZinIrDeQuantUnitInfo::ZinIrDeQuantUnitInfo(ZinIrDeQuantUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *(void *)this = &unk_26C34D920;
  *((unsigned char *)this + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(void *)((char *)this + 84) = -1;
  *((void *)this + 12) = -1;
  *((unsigned char *)this + 104) = 0;
  *(void *)((char *)this + 108) = -1;
  *((void *)this + 15) = -1;
  *((_DWORD *)this + 32) = 1065353216;
  *(void *)((char *)this + 132) = 0x600000000;
  *((_DWORD *)this + 35) = 0;
}

void std::make_unique[abi:ne180100]<ZinIrDeQuantUnit,ZinIrDeQuantUnitInfo &>()
{
}

void sub_2112448E0(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40A9DA204DLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrPhiUnit,ZinIrUnitInfo &>()
{
}

void sub_21124497C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C400022C6FFLL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrConditionUnit,ZinIrUnitInfo &>()
{
}

void sub_211244A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C400022C6FFLL);
  _Unwind_Resume(a1);
}

void ZinIrNEConvUnitInfo::ZinIrNEConvUnitInfo(ZinIrNEConvUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *((unsigned char *)this + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 232) = 0;
  *((unsigned char *)this + 24std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 352) = 0;
  *((unsigned char *)this + 36std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 364) = 0;
  *(void *)this = &unk_26C34CE88;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 47) = 0;
  *((_DWORD *)this + 10std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((void *)this + 55) = -1;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 114) = -1;
  *((void *)this + 58) = -1;
  *((_DWORD *)this + 118) = -1;
  *((void *)this + 6std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = -1;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 52std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *((void *)this + 67) = 0;
  *((_DWORD *)this + 136) = 1;
  *((unsigned char *)this + 548) = 0;
  *((_WORD *)this + 276) = 0;
  *((_DWORD *)this + 14std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = -1;
  *((void *)this + 71) = -1;
  *((_DWORD *)this + 144) = -1;
  *((void *)this + 73) = -1;
  *((void *)this + 74) = 0x3F80000000000006;
  *((_DWORD *)this + 15std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((void *)this + 46) = &unk_26C34A9B8;
  *((_DWORD *)this + 152) = 0;
  *((unsigned char *)this + 612) = 0;
  *((void *)this + 77) = 1;
  *((int64x2_t *)this + 39) = vdupq_n_s64(1uLL);
  *((void *)this + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 1;
  *(void *)&long long v1 = 0x100000001;
  *((void *)&v1 + 1) = 0x100000001;
  *(_OWORD *)((char *)this + 648) = v1;
  *((void *)this + 83) = 0x100000001;
  *((void *)this + 86) = 0;
  *((void *)this + 84) = 0;
  *((void *)this + 85) = 0;
  *((_DWORD *)this + 174) = 1;
}

void std::make_unique[abi:ne180100]<ZinIrNEConvUnit,ZinIrNEConvUnitInfo &>()
{
}

void sub_211244BD0(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C4046841447);
  _Unwind_Resume(a1);
}

void ZinIrNEConvUnitInfo::~ZinIrNEConvUnitInfo(ZinIrNEConvUnitInfo *this)
{
  *(void *)this = &unk_26C34CE88;
  uint64_t v2 = (void **)((char *)this + 368);
  *((void *)this + 46) = &unk_26C34CC70;
  uint64_t v3 = (void *)*((void *)this + 65);
  if (v3)
  {
    *((void *)this + 66) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 62);
  if (v4)
  {
    *((void *)this + 63) = v4;
    operator delete(v4);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  *(void *)this = &unk_26C348A60;
  if (*((unsigned char *)this + 352)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 30);
  }
  if (*((unsigned char *)this + 232)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 10);
  }

  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this);
}

{
  void **v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C34CE88;
  uint64_t v2 = (void **)((char *)this + 368);
  *((void *)this + 46) = &unk_26C34CC70;
  uint64_t v3 = (void *)*((void *)this + 65);
  if (v3)
  {
    *((void *)this + 66) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 62);
  if (v4)
  {
    *((void *)this + 63) = v4;
    operator delete(v4);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  *(void *)this = &unk_26C348A60;
  if (*((unsigned char *)this + 352)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 30);
  }
  if (*((unsigned char *)this + 232)) {
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 10);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this);

  JUMPOUT(0x21667D3C0);
}

void ZinIrNEMatMulUnitInfo::ZinIrNEMatMulUnitInfo(ZinIrNEMatMulUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *((unsigned char *)this + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 232) = 0;
  *((unsigned char *)this + 24std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 352) = 0;
  *((unsigned char *)this + 36std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 364) = 0;
  *(void *)this = &unk_26C34E748;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((_DWORD *)this + 10std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((void *)this + 55) = -1;
  *((void *)this + 46) = &unk_26C3500E8;
  *((void *)this + 47) = 0;
  *((unsigned char *)this + 448) = 0;
}

void std::make_unique[abi:ne180100]<ZinIrNEMatMulUnit,ZinIrNEMatMulUnitInfo &>()
{
}

void sub_211244DAC(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C406C17794ALL);
  _Unwind_Resume(a1);
}

void ZinIrNEMatMulUnitInfo::~ZinIrNEMatMulUnitInfo(void **this)
{
  *this = &unk_26C34E748;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 46);
  *this = &unk_26C348A60;
  if (*((unsigned char *)this + 352)) {
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 30);
  }
  if (*((unsigned char *)this + 232)) {
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 10);
  }

  ZinIrUnitInfo::~ZinIrUnitInfo(this);
}

{
  uint64_t vars8;

  *this = &unk_26C34E748;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 46);
  *this = &unk_26C348A60;
  if (*((unsigned char *)this + 352)) {
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 30);
  }
  if (*((unsigned char *)this + 232)) {
    ZinIrUnitInfo::~ZinIrUnitInfo(this + 10);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(this);

  JUMPOUT(0x21667D3C0);
}

void ZinIrNEPoolUnitInfo::ZinIrNEPoolUnitInfo(ZinIrNEPoolUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *((unsigned char *)this + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 232) = 0;
  *((unsigned char *)this + 24std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 352) = 0;
  *((unsigned char *)this + 36std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 364) = 0;
  *(void *)this = &unk_26C34CEA8;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((void *)this + 55) = -1;
  *((void *)this + 46) = &unk_26C34AB58;
  *((void *)this + 47) = 0;
  *((_DWORD *)this + 112) = 1;
  *((void *)this + 57) = 1;
  *((int64x2_t *)this + 29) = vdupq_n_s64(1uLL);
  *((void *)this + 6std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0x100000001;
  *((_DWORD *)this + 122) = 1;
  *(void *)((char *)this + 508) = 0;
  *(void *)((char *)this + 492) = 0;
  *(void *)((char *)this + 50std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 516) = 0;
  *((void *)this + 65) = 0x3F80000000000001;
  *((_DWORD *)this + 132) = 0;
  *((_DWORD *)this + 10std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 2;
}

void std::make_unique[abi:ne180100]<ZinIrNEPoolUnit,ZinIrNEPoolUnitInfo &>()
{
}

void sub_211244F88(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40E4462E51);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrNEBypassUnit,ZinIrNEBypassUnitInfo &>()
{
}

void sub_211245000(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40FB8E29FCLL);
  _Unwind_Resume(a1);
}

void ZinIrPEPoolUnitInfo::ZinIrPEPoolUnitInfo(ZinIrPEPoolUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *((unsigned char *)this + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 20std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 312) = 0;
  *((unsigned char *)this + 32std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 408) = 0;
  *((unsigned char *)this + 416) = 0;
  *((unsigned char *)this + 528) = 0;
  *((unsigned char *)this + 536) = 0;
  *((unsigned char *)this + 688) = 0;
  *((unsigned char *)this + 696) = 0;
  *((unsigned char *)this + 808) = 0;
  *((unsigned char *)this + 816) = 0;
  *((unsigned char *)this + 96std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(void *)this = &unk_26C34CEE8;
  *((void *)this + 124) = 0;
  *((void *)this + 122) = 0;
  *((void *)this + 123) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((void *)this + 13std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = -1;
  *((void *)this + 121) = &unk_26C34AB58;
  *((_DWORD *)this + 262) = 1;
  *((int64x2_t *)this + 66) = vdupq_n_s64(1uLL);
  *((void *)this + 134) = 1;
  *((void *)this + 135) = 0x100000001;
  *((_DWORD *)this + 272) = 1;
  *(void *)((char *)this + 1108) = 0;
  *(void *)((char *)this + 1092) = 0;
  *(void *)((char *)this + 110std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 1116) = 0;
  *((void *)this + 14std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0x3F80000000000001;
  *((_DWORD *)this + 282) = 0;
  *((_DWORD *)this + 25std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 2;
}

void std::make_unique[abi:ne180100]<ZinIrPEPoolUnit,ZinIrPEPoolUnitInfo &>()
{
}

void sub_21124516C(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40DFE0914FLL);
  _Unwind_Resume(a1);
}

void ZinIrPEElementWiseUnitInfo::ZinIrPEElementWiseUnitInfo(ZinIrPEElementWiseUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *((unsigned char *)this + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 20std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 312) = 0;
  *((unsigned char *)this + 32std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 408) = 0;
  *((unsigned char *)this + 416) = 0;
  *((unsigned char *)this + 528) = 0;
  *((unsigned char *)this + 536) = 0;
  *((unsigned char *)this + 688) = 0;
  *((unsigned char *)this + 696) = 0;
  *((unsigned char *)this + 808) = 0;
  *((unsigned char *)this + 816) = 0;
  *((unsigned char *)this + 96std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(void *)this = &unk_26C351AA8;
  *((unsigned char *)this + 968) = 0;
  *((unsigned char *)this + 1072) = 0;
  *((unsigned char *)this + 108std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 1184) = 0;
}

void std::make_unique[abi:ne180100]<ZinIrPEElementWiseUnit,ZinIrPEElementWiseUnitInfo &>()
{
}

void sub_21124526C(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40227051EDLL);
  _Unwind_Resume(a1);
}

void ZinIrPEGOCUnitInfo::ZinIrPEGOCUnitInfo(ZinIrPEGOCUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *((unsigned char *)this + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 20std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 312) = 0;
  *((unsigned char *)this + 32std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((unsigned char *)this + 408) = 0;
  *((unsigned char *)this + 416) = 0;
  *((unsigned char *)this + 528) = 0;
  *((unsigned char *)this + 536) = 0;
  *((unsigned char *)this + 688) = 0;
  *((unsigned char *)this + 696) = 0;
  *((unsigned char *)this + 808) = 0;
  *((unsigned char *)this + 816) = 0;
  *((unsigned char *)this + 96std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(void *)this = &unk_26C34BF80;
  *((void *)this + 124) = 0;
  *((_DWORD *)this + 25std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((void *)this + 122) = 0;
  *((void *)this + 123) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((void *)this + 13std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = -1;
  *((void *)this + 121) = &unk_26C3500C8;
  *((_DWORD *)this + 262) = 1065353216;
  *((_WORD *)this + 526) = 0;
  *((void *)this + 135) = 0;
  *((_DWORD *)this + 272) = 0;
  *((void *)this + 133) = 0;
  *((void *)this + 134) = 0;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *((void *)this + 141) = -1;
  *((void *)this + 132) = &unk_26C34F840;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_DWORD *)this + 292) = 1065353216;
  *((_WORD *)this + 588) = 0;
  *((unsigned char *)this + 1178) = 0;
}

void std::make_unique[abi:ne180100]<ZinIrPEGOCUnit,ZinIrPEGOCUnitInfo &>()
{
}

void sub_2112453EC(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0x10B3C40D7AE3209);
  _Unwind_Resume(a1);
}

void ZinIrLinearUnitInfo::ZinIrLinearUnitInfo(ZinIrLinearUnitInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = -1;
  *((void *)this + 1std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((_DWORD *)this + 22) = -1;
  *((void *)this + 12) = -1;
  *((_DWORD *)this + 26) = -1;
  *((void *)this + 14) = -1;
  *(_OWORD *)((char *)this + 12std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 44) = 1;
  *((unsigned char *)this + 18std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((_WORD *)this + 92) = 0;
  *((_DWORD *)this + 48) = -1;
  *((void *)this + 25) = -1;
  *((_DWORD *)this + 52) = -1;
  *((void *)this + 27) = -1;
  *((void *)this + 28) = 0x3F80000000000006;
  *((_DWORD *)this + 58) = 0;
  *(void *)this = &unk_26C34CCC8;
  *((_DWORD *)this + 6std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 5;
}

void std::make_unique[abi:ne180100]<ZinIrLinearUnit,ZinIrLinearUnitInfo &>()
{
}

void sub_211245520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40105C88E8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrRingBufferWriterUnit,ZinIrRingBufferUnitInfo &>()
{
}

void sub_2112455CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C40646894DELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ZinIrRingBufferReaderUnit,ZinIrRingBufferReaderUnitInfo &>()
{
}

void sub_211245678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667D3C0](v11, 0x10B3C407B952C5CLL);
  _Unwind_Resume(a1);
}

uint64_t ZinCreateUnit(CFDictionaryRef theDict, const __CFString *key, uint64_t a3, uint64_t *a4, CFArrayRef *a5)
{
  uint64_t result = 3;
  if (theDict && key)
  {
    CFStringRef Value = (__CFDictionary *)CFDictionaryGetValue(theDict, key);
    if (Value && (uint64_t v12 = Value, v13 = CFGetTypeID(Value), v13 == CFDictionaryGetTypeID()))
    {
      uint64_t result = ZinCreateUnit(v12, a3, a4, a5);
      if (!result)
      {
        if (!*a4) {
          return 0;
        }
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)*a4 + 112))(*a4);
        if (*(void *)(v14 + 40) == *(void *)(v14 + 48)) {
          return 0;
        }
        uint64_t result = ZinValidateUnitBottoms(theDict, v12, (ZinIrUnitStatus *)a5);
        if (!result) {
          return 0;
        }
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v16 = 0;
      ZinGetCFObject((uint64_t)__p, key);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinCreateUnit((uint64_t *)__p);
      }
      ZinIrUnitStatus::SetError(a5, @"InvalidUnitSyntax");
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      return 3;
    }
  }
  return result;
}

void sub_2112457F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinCreateConstInput(const __CFDictionary *a1, const __CFString *a2, uint64_t a3, CFArrayRef *a4)
{
  int v10 = 0;
  *(_OWORD *)CFTypeID v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)CFStringRef v7 = 0u;
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  long long v11 = v4;
  long long v12 = v4;
  uint64_t v13 = -1;
  char v14 = 0;
  char v15 = 0;
  uint64_t v18 = -1;
  long long v16 = v4;
  v17[0] = v4;
  *(_OWORD *)((char *)v17 + 12) = v4;
  char v19 = 0;
  memset(__p, 0, sizeof(__p));
  int v21 = 0;
  int v22 = 5;
  uint64_t v23 = -1;
  uint64_t v5 = ZinParseConstInput(a1, a2, (ZinIrIOInfo *)v7, a4);
  if (!v5) {
    operator new();
  }
  if (*(void **)((char *)__p + 4))
  {
    *(void **)((char *)&__p[1] + 4) = *(void **)((char *)__p + 4);
    operator delete(*(void **)((char *)__p + 4));
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v8[0]) < 0) {
    operator delete(v7[0]);
  }
  return v5;
}

void sub_211245930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x21667D3C0](v9, 0x10B3C4024D165B5);
  ZinIrIOInfo::~ZinIrIOInfo((ZinIrIOInfo *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinRetrieveNetworkName(const __CFDictionary *a1, const __CFString **a2)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, @"Networks");
  if (result)
  {
    CFArrayRef v4 = (const __CFArray *)result;
    CFTypeID v5 = CFGetTypeID((CFTypeRef)result);
    if (v5 == CFArrayGetTypeID() && CFArrayGetCount(v4) == 1)
    {
      uint64_t result = (uint64_t)CFArrayGetValueAtIndex(v4, 0);
      if (!result) {
        return result;
      }
      CFStringRef v6 = (const __CFString *)result;
      CFTypeID v7 = CFGetTypeID((CFTypeRef)result);
      if (v7 == CFStringGetTypeID() && CFStringGetLength(v6) <= 511)
      {
        *a2 = v6;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void ZinCreateUnit(uint64_t *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = (uint64_t *)*a1;
  }
  int v2 = 136315138;
  uint64_t v3 = v1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: Specified unit \"%s\" in unit list is not found.\n", (uint8_t *)&v2, 0xCu);
}

uint64_t ZinMirInsertCopyForInputView::ZinMirInsertCopyForInputView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  CFTypeID v5 = (std::string *)(a1 + 24);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 40);
  return a1;
}

uint64_t ZinMirInsertCopyForInputView::GetOffsetXInBytesWrtRootBase(ZinIrTensor *a1, uint64_t a2, char a3)
{
  CFTypeID v5 = a1;
  ZinIrTensor::GetMemorySharingInfo(a1, (uint64_t)v24);
  if (v26)
  {
    uint64_t v6 = 0;
    while (1)
    {
      ZinIrTensor::GetMemorySharingInfo(v5, (uint64_t)&v18);
      int v7 = v21;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v22, v23);
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v28);
      if (v7 == 7) {
        break;
      }
      ZinIrTensor::GetMemorySharingInfo(v5, (uint64_t)v24);
      if (v25 != 1) {
        ZinAssertImpl("Step in width is not supported.");
      }
      if (v26 - 1 > 1)
      {
        if (v26 <= 8 && ((1 << v26) & 0x128) != 0) {
          goto LABEL_24;
        }
      }
      else
      {
        Hal = ZinIrTarget::GetHal(*(uint64_t **)(*((void *)v5 + 12) + 16), *(ZinIrTarget **)(*(void *)(*((void *)v5 + 12) + 16) + 160));
        if (*(unsigned char *)((*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal) + 1331)) {
          BOOL v9 = 0;
        }
        else {
          BOOL v9 = v26 == 2;
        }
        if (v9)
        {
LABEL_24:
          char v15 = v28;
          goto LABEL_25;
        }
        uint64_t v17 = 0;
        if (ZinTensorFormatGetSizeInBits(*((_DWORD *)v5 + 22), &v17)) {
          ZinAssertImpl("Invalid tensor format.");
        }
        uint64_t v10 = a2;
        if (!a3)
        {
          uint64_t Interleave = ZinIrTensor::GetInterleave(v5);
          if (v12) {
            uint64_t v10 = Interleave;
          }
          else {
            uint64_t v10 = 1;
          }
        }
        uint64_t v13 = v17;
        ZinIrTensor::GetMemorySharingInfo(v5, (uint64_t)&v18);
        unint64_t v14 = v13 * v10 * v20;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v22, v23);
        v6 += v14 >> 3;
      }
      ZinIrTensor::GetParentTensor(v5, &v18);
      CFTypeID v5 = v18;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v28);
      ZinIrTensor::GetMemorySharingInfo(v5, (uint64_t)v24);
      if (!v26) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
LABEL_23:
    char v15 = v28;
LABEL_25:
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v27, v15);
  }
  return v6;
}

void sub_211245EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v38, a38);
  _Unwind_Resume(a1);
}

void ZinMirInsertCopyForInputView::Run(ZinMirInsertCopyForInputView *this)
{
  v113[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)this + 8;
  if (*(unsigned char *)(*((void *)this + 1) + 1327))
  {
    std::string::basic_string[abi:ne180100]<0>(v94, "view0");
    v96[0] = &unk_26C380F00;
    v96[1] = MatchUnalignedInputViewInW;
    v96[3] = v96;
    memset(v97, 0, sizeof(v97));
    int v98 = 1065353216;
    int v63 = 0;
    int v61 = 0;
    uint64_t v62 = 0;
    int v77 = &v61;
    char v78 = 0;
    int v61 = operator new(0x60uLL);
    uint64_t v62 = (uint64_t)v61;
    int v63 = (void ***)((char *)v61 + 96);
    uint64_t v62 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v63, (uint64_t)v94, (uint64_t)&v99, (uint64_t)v61);
    std::string::basic_string[abi:ne180100]<0>(&v77, "view1");
    int v80 = &unk_26C380F00;
    int v81 = MatchUnalignedInputViewInW;
    int v82 = &v80;
    long long v83 = 0u;
    long long v84 = 0u;
    int v85 = 1065353216;
    uint64_t v65 = 0;
    int v66 = 0;
    int64x2_t v64 = 0;
    int64x2_t v64 = (void ***)operator new(0x60uLL);
    uint64_t v65 = (uint64_t)v64;
    int v66 = v64 + 12;
    uint64_t v65 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v66, (uint64_t)&v77, (uint64_t)v86, (uint64_t)v64);
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v22 = 0;
    long long __p = &v22;
    char v47 = 0;
    uint64_t v22 = operator new(0x30uLL);
    uint64_t v23 = (uint64_t)v22;
    int v24 = (void ***)((char *)v22 + 48);
    uint64_t v23 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItemDesc>>,std::vector<ZinLinearPattern::AtomItemDesc> const*,std::vector<ZinLinearPattern::AtomItemDesc> const*,std::vector<ZinLinearPattern::AtomItemDesc>*>((uint64_t)&v24, (uint64_t *)&v61, (uint64_t *)&v67, v22);
    int v31 = &v22;
    uint64_t v32 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "pe_ew");
    uint64_t v49 = &unk_26C380F00;
    int v50 = MatchPEEW;
    int v51 = &v49;
    long long v52 = 0u;
    long long v53 = 0u;
    int v54 = 1065353216;
    int v73 = 0;
    int v71 = 0;
    int64x2_t v72 = 0;
    int v71 = operator new(0x60uLL);
    int64x2_t v72 = v71;
    int v73 = v71 + 12;
    int64x2_t v72 = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v73, (uint64_t)&__p, (uint64_t)v55, (uint64_t)v71);
    char v15 = 0;
    long long v16 = 0;
    uint64_t v17 = 0;
    int v33 = &v71;
    long long v34 = &v15;
    *(void *)&long long v37 = 0;
    v106[0] = &unk_26C3868B8;
    void v106[3] = v106;
    ZinManyToOnePattern::ZinManyToOnePattern(v107, &v31, v1, 0, v106, 0);
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v106);
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v35);
    char v12 = &v15;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    char v15 = (void **)&v71;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v15);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v52);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v49);
    if (v48 < 0) {
      operator delete(__p);
    }
    long long __p = &v22;
    std::vector<std::vector<ZinLinearPattern::AtomItemDesc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    for (uint64_t i = 24; i != -24; i -= 24)
    {
      long long __p = (char *)&v61 + i;
      std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v83);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v80);
    if (v79 < 0) {
      operator delete(v77);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v97);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](v96);
    if (v95 < 0) {
      operator delete(v94[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v77, "view0");
    int v80 = &unk_26C380F00;
    int v81 = MatchUnalignedInputViewInW;
    int v82 = &v80;
    long long v83 = 0u;
    long long v84 = 0u;
    int v85 = 1065353216;
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v22 = 0;
    long long __p = &v22;
    char v47 = 0;
    uint64_t v22 = operator new(0x60uLL);
    uint64_t v23 = (uint64_t)v22;
    int v24 = (void ***)((char *)v22 + 96);
    uint64_t v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v24, (uint64_t)&v77, (uint64_t)v86, (uint64_t)v22);
    std::string::basic_string[abi:ne180100]<0>(&__p, "view1");
    uint64_t v49 = &unk_26C380F00;
    int v50 = MatchUnalignedInputViewInW;
    int v51 = &v49;
    long long v52 = 0u;
    long long v53 = 0u;
    int v54 = 1065353216;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    int v31 = &v25;
    LOBYTE(v32) = 0;
    uint64_t v25 = (void ***)operator new(0x60uLL);
    uint64_t v26 = (uint64_t)v25;
    uint64_t v27 = v25 + 12;
    uint64_t v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v27, (uint64_t)&__p, (uint64_t)v55, (uint64_t)v25);
    int v73 = 0;
    int v71 = 0;
    int64x2_t v72 = 0;
    int v31 = &v71;
    LOBYTE(v32) = 0;
    int v71 = operator new(0x30uLL);
    int64x2_t v72 = v71;
    int v73 = v71 + 6;
    int64x2_t v72 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItemDesc>>,std::vector<ZinLinearPattern::AtomItemDesc> const*,std::vector<ZinLinearPattern::AtomItemDesc> const*,std::vector<ZinLinearPattern::AtomItemDesc>*>((uint64_t)&v73, (uint64_t *)&v22, (uint64_t *)&v28, v71);
    int v61 = &v71;
    uint64_t v62 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v31, "pe_pool");
    long long v34 = (void ***)&unk_26C380F00;
    v35[0] = MatchPEPool;
    uint64_t v36 = &v34;
    long long v37 = 0u;
    long long v38 = 0u;
    int v39 = 1065353216;
    long long v16 = 0;
    uint64_t v17 = 0;
    char v15 = 0;
    char v12 = &v15;
    LOBYTE(v13) = 0;
    char v15 = (void **)operator new(0x60uLL);
    long long v16 = v15;
    uint64_t v17 = v15 + 12;
    long long v16 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v17, (uint64_t)&v31, (uint64_t)v40, (uint64_t)v15);
    char v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    int v63 = &v15;
    int64x2_t v64 = (void ***)&v12;
    *(void *)&long long v68 = 0;
    v93[0] = &unk_26C3868B8;
    v93[3] = v93;
    ZinManyToOnePattern::ZinManyToOnePattern(v94, &v61, v1, 0, v93, 0);
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v93);
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](&v65);
    BOOL v9 = &v12;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
    char v12 = &v15;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v37);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v34);
    if (SHIBYTE(v33) < 0) {
      operator delete(v31);
    }
    int v31 = &v71;
    std::vector<std::vector<ZinLinearPattern::AtomItemDesc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    for (uint64_t j = 24; j != -24; j -= 24)
    {
      int v31 = (char *)&v22 + j;
      std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v52);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v49);
    if (v48 < 0) {
      operator delete(__p);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v83);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v80);
    if (v79 < 0) {
      operator delete(v77);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "view0");
    uint64_t v49 = &unk_26C380F00;
    int v50 = MatchUnalignedInputViewInW;
    int v51 = &v49;
    long long v52 = 0u;
    long long v53 = 0u;
    int v54 = 1065353216;
    int v73 = 0;
    int v71 = 0;
    int64x2_t v72 = 0;
    int v31 = &v71;
    LOBYTE(v32) = 0;
    int v71 = operator new(0x60uLL);
    int64x2_t v72 = v71;
    int v73 = v71 + 12;
    int64x2_t v72 = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v73, (uint64_t)&__p, (uint64_t)v55, (uint64_t)v71);
    std::string::basic_string[abi:ne180100]<0>(&v31, "view1");
    long long v34 = (void ***)&unk_26C380F00;
    v35[0] = MatchUnalignedInputViewInW;
    uint64_t v36 = &v34;
    long long v37 = 0u;
    long long v38 = 0u;
    int v39 = 1065353216;
    uint64_t v75 = 0;
    int64x2_t v76 = 0;
    int v74 = 0;
    int v61 = &v74;
    LOBYTE(v62) = 0;
    int v74 = (char *)operator new(0x60uLL);
    uint64_t v75 = (uint64_t)v74;
    int64x2_t v76 = v74 + 96;
    uint64_t v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v76, (uint64_t)&v31, (uint64_t)v40, (uint64_t)v74);
    long long v16 = 0;
    uint64_t v17 = 0;
    char v15 = 0;
    int v61 = &v15;
    LOBYTE(v62) = 0;
    char v15 = (void **)operator new(0x30uLL);
    long long v16 = v15;
    uint64_t v17 = v15 + 6;
    long long v16 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinLinearPattern::AtomItemDesc>>,std::vector<ZinLinearPattern::AtomItemDesc> const*,std::vector<ZinLinearPattern::AtomItemDesc> const*,std::vector<ZinLinearPattern::AtomItemDesc>*>((uint64_t)&v17, (uint64_t *)&v71, (uint64_t *)&v77, v15);
    uint64_t v22 = &v15;
    uint64_t v23 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v61, "pe_goc");
    int64x2_t v64 = (void ***)&unk_26C380F00;
    uint64_t v65 = (uint64_t)MatchPEGOC;
    int v67 = &v64;
    long long v68 = 0u;
    long long v69 = 0u;
    int v70 = 1065353216;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    char v12 = 0;
    BOOL v9 = &v12;
    LOBYTE(v1std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
    char v12 = (void ***)operator new(0x60uLL);
    uint64_t v13 = (void **)v12;
    unint64_t v14 = (void **)(v12 + 12);
    uint64_t v13 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v14, (uint64_t)&v61, (uint64_t)&v71, (uint64_t)v12);
    BOOL v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v24 = (void ***)&v12;
    uint64_t v25 = (void ***)&v9;
    v29[0] = 0;
    v60[0] = &unk_26C3868B8;
    v60[3] = v60;
    ZinManyToOnePattern::ZinManyToOnePattern(&v77, &v22, v1, 0, v60, 0);
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v60);
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](&v26);
    uint64_t v18 = (void ***)&v9;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
    BOOL v9 = &v12;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v68);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v64);
    if (SHIBYTE(v63) < 0) {
      operator delete(v61);
    }
    int v61 = &v15;
    std::vector<std::vector<ZinLinearPattern::AtomItemDesc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    for (uint64_t k = 3; k != -3; k -= 3)
    {
      int v61 = &(&v71)[k];
      std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v37);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v34);
    if (SHIBYTE(v33) < 0) {
      operator delete(v31);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v52);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v49);
    if (v48 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&v31, "view");
    long long v34 = (void ***)&unk_26C380F00;
    v35[0] = MatchUnalignedInputViewInWBasedOnResidency;
    uint64_t v36 = &v34;
    LODWORD(v9) = 1;
    std::unordered_set<Attribute>::unordered_set((uint64_t)&v37, (int *)&v9, 1);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    int v61 = &v22;
    LOBYTE(v62) = 0;
    uint64_t v22 = operator new(0x60uLL);
    uint64_t v23 = (uint64_t)v22;
    int v24 = (void ***)((char *)v22 + 96);
    uint64_t v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v24, (uint64_t)&v31, (uint64_t)v40, (uint64_t)v22);
    char v12 = (void ***)&v22;
    std::string::basic_string[abi:ne180100]<0>(&v61, "alias");
    int64x2_t v64 = (void ***)&unk_26C380F00;
    uint64_t v65 = (uint64_t)MatchAlias;
    int v67 = &v64;
    long long v68 = 0u;
    long long v69 = 0u;
    int v70 = 1065353216;
    int v73 = 0;
    int v71 = 0;
    int64x2_t v72 = 0;
    char v15 = (void **)&v71;
    LOBYTE(v16) = 0;
    int v71 = operator new(0x60uLL);
    int64x2_t v72 = v71;
    int v73 = v71 + 12;
    int64x2_t v72 = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v73, (uint64_t)&v61, (uint64_t)&v71, (uint64_t)v71);
    uint64_t v13 = (void **)&v71;
    v45[0] = &unk_26C386808;
    v45[3] = v45;
    ZinOneToVariablePattern::ZinOneToVariablePattern(&__p, &v12, v1, 0, v45, 0);
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v45);
    char v15 = (void **)&v71;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100](&v15);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v68);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v64);
    if (SHIBYTE(v63) < 0) {
      operator delete(v61);
    }
    int v61 = &v22;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v37);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v34);
    if (SHIBYTE(v33) < 0) {
      operator delete(v31);
    }
    std::string::basic_string[abi:ne180100]<0>(&v61, "view");
    int64x2_t v64 = (void ***)&unk_26C380F00;
    uint64_t v65 = (uint64_t)MatchUnalignedInputViewInWBasedOnResidency;
    int v67 = &v64;
    LODWORD(v18) = 1;
    std::unordered_set<Attribute>::unordered_set((uint64_t)&v68, (int *)&v18, 1);
    int64x2_t v72 = 0;
    int v71 = 0;
    int v73 = 0;
    uint64_t v22 = &v71;
    LOBYTE(v23) = 0;
    int v71 = operator new(0x60uLL);
    int64x2_t v72 = v71;
    int v73 = v71 + 12;
    int64x2_t v72 = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v73, (uint64_t)&v61, (uint64_t)&v71, (uint64_t)v71);
    BOOL v9 = (void ****)&v71;
    std::string::basic_string[abi:ne180100]<0>(&v22, "tensor_kernel_consumer");
    uint64_t v25 = (void ***)&unk_26C380F00;
    uint64_t v26 = (uint64_t)MatchTensorKernelConsumer;
    long long v28 = &v25;
    memset(v29, 0, sizeof(v29));
    int v30 = 1065353216;
    long long v16 = 0;
    uint64_t v17 = 0;
    char v15 = 0;
    char v12 = &v15;
    LOBYTE(v13) = 0;
    char v15 = (void **)operator new(0x60uLL);
    long long v16 = v15;
    uint64_t v17 = v15 + 12;
    long long v16 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v17, (uint64_t)&v22, (uint64_t)&v31, (uint64_t)v15);
    uint64_t v10 = &v15;
    v21[0] = &unk_26C386860;
    v21[3] = v21;
    ZinOneToVariablePattern::ZinOneToVariablePattern(&v31, &v9, v1, 0, v21, 0);
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v21);
    char v12 = &v15;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v29);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v25);
    if (SHIBYTE(v24) < 0) {
      operator delete(v22);
    }
    uint64_t v22 = &v71;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v68);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v64);
    if (SHIBYTE(v63) < 0) {
      operator delete(v61);
    }
    uint64_t v6 = *(void **)this;
    uint64_t v20 = 0;
    int v7 = operator new(0x38uLL);
    *int v7 = &unk_26C386910;
    v7[1] = &__p;
    v7[2] = &v31;
    v7[3] = v107;
    v7[4] = v94;
    void v7[5] = &v77;
    v7[6] = this;
    uint64_t v20 = v7;
    int v8 = ZinIrControlFlowGraph::TraverseForward(v6, (uint64_t)v19, 1);
    std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v19);
    if (v8)
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinMirInsertCopyForInputView::Run();
      }
    }
    int v31 = &unk_26C350430;
    int v61 = &v44;
    std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    int v42 = &unk_26C349BA8;
    int v61 = &v43;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    ZinPattern::~ZinPattern((ZinPattern *)&v42);
    int v61 = &v41;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    ZinPattern::~ZinPattern((ZinPattern *)&v31);
    long long __p = &unk_26C350430;
    int v31 = &v59;
    std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    int v57 = &unk_26C349BA8;
    int v31 = &v58;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    ZinPattern::~ZinPattern((ZinPattern *)&v57);
    int v31 = &v56;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    ZinPattern::~ZinPattern((ZinPattern *)&__p);
    int v77 = &unk_26C34CFE8;
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v92);
    int v90 = &unk_26C349BA8;
    long long __p = &v91;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    ZinPattern::~ZinPattern((ZinPattern *)&v90);
    long long v88 = &unk_26C349BA8;
    long long __p = &v89;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    ZinPattern::~ZinPattern((ZinPattern *)&v88);
    long long __p = &v87;
    std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    ZinPattern::~ZinPattern((ZinPattern *)&v77);
    v94[0] = &unk_26C34CFE8;
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v105);
    uint64_t v103 = &unk_26C349BA8;
    int v77 = &v104;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    ZinPattern::~ZinPattern((ZinPattern *)&v103);
    int v101 = &unk_26C349BA8;
    int v77 = &v102;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    ZinPattern::~ZinPattern((ZinPattern *)&v101);
    int v77 = &v100;
    std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    ZinPattern::~ZinPattern((ZinPattern *)v94);
    v107[0] = &unk_26C34CFE8;
    std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v113);
    int v111 = &unk_26C349BA8;
    v94[0] = &v112;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    ZinPattern::~ZinPattern((ZinPattern *)&v111);
    int v109 = &unk_26C349BA8;
    v94[0] = &v110;
    std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    ZinPattern::~ZinPattern((ZinPattern *)&v109);
    v94[0] = &v108;
    std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    ZinPattern::~ZinPattern((ZinPattern *)v107);
  }
}

void sub_2112471E8(_Unwind_Exception *a1)
{
}

uint64_t MatchUnalignedInputViewInW(uint64_t a1)
{
  if (IsUnalignedInWidth(*(const ZinIrOpLayer **)(a1 + 8), *(void *)(**(void **)(a1 + 16) + 416)))
  {
    LOBYTE(v1) = 1;
    int v2 = 1;
  }
  else
  {
    __int16 v1 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v2 = HIBYTE(v1);
  }
  return v1 | (v2 << 8);
}

uint64_t MatchPEEW(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 81)
  {
    int v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

{
  void *v1;
  __int16 v2;
  int v3;
  uint64_t v6;

  int v1 = *(void **)(a1 + 8);
  if (*(_DWORD *)(v1[8] + 8) != 81 || v1[12] - v1[11] != 8 || !v1[63])
  {
LABEL_6:
    int v2 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    uint64_t v3 = HIBYTE(v2);
    return v2 | (v3 << 8);
  }
  if (*(void *)(v1[33] + 216))
  {
    if (!ZinANELayer::IsChainedProducer(*(ZinANELayer **)(a1 + 8))) {
      ZinAssertImpl("Overlap should be zero on all layers but chained producer");
    }
    goto LABEL_6;
  }
  uint64_t v6 = (*(uint64_t (**)(void, void))(*v1 + 360))(*(void *)(a1 + 8), 0);
  LOBYTE(v2) = 0;
  if (v6 == 1) {
    LOBYTE(v2) = (unint64_t)(*(uint64_t (**)(void *, uint64_t))(*v1 + 360))(v1, 2) <= *(void *)(**(void **)(a1 + 16) + 960);
  }
  uint64_t v3 = 1;
  return v2 | (v3 << 8);
}

uint64_t MatchPEPool(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 83)
  {
    int v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

uint64_t MatchPEGOC(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 84)
  {
    int v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

uint64_t MatchUnalignedInputViewInWBasedOnResidency(uint64_t a1)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 0, 0)+ 104);
  if (v2 && *(_DWORD *)(v2 + 96) == 1)
  {
    __int16 matched = MatchUnalignedInputViewInW(a1);
LABEL_7:
    int v4 = HIBYTE(matched);
    return matched | (v4 << 8);
  }
  if (!IsUnalignedInWidth(*(const ZinIrOpLayer **)(a1 + 8), *(void *)(**(void **)(a1 + 16) + 528)))
  {
    __int16 matched = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    goto LABEL_7;
  }
  LOBYTE(matched) = 1;
  int v4 = 1;
  return matched | (v4 << 8);
}

uint64_t MatchAlias(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 8);
  LOBYTE(a1) = 1;
  if (v1 == 33)
  {
    int v2 = 1;
  }
  else
  {
    LOWORD(a1) = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v2 = BYTE1(a1);
  }
  return a1 | (v2 << 8);
}

uint64_t MatchTensorKernelConsumer(uint64_t a1)
{
  int v1 = *(ZinMirCacheTensors **)(a1 + 8);
  int v2 = *(void **)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "view");
  uint64_t SingleMatch = ZinPattern::State::GetSingleMatch(v2, (unsigned __int8 *)__p);
  int v4 = (ZinMirCacheTensors **)(*(uint64_t (**)(uint64_t, void, void))(*(void *)SingleMatch + 32))(SingleMatch, 0, 0);
  char IsUsedAsKernelTensor = ZinMirCacheTensors::IsUsedAsKernelTensor(v1, v4, v5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  LOBYTE(v7) = 1;
  if (IsUsedAsKernelTensor)
  {
    int v8 = 1;
  }
  else
  {
    __int16 v7 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    int v8 = HIBYTE(v7);
  }
  return v7 | (v8 << 8);
}

void sub_211247940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL IsUnalignedInWidth(const ZinIrOpLayer *a1, unint64_t a2)
{
  long long __p = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  char IsNoOp = ZinIrOpLayer::IsNoOp(a1, (uint64_t *)&__p);
  if (__p)
  {
    int v8 = __p;
    operator delete(__p);
  }
  if ((IsNoOp & 1) == 0) {
    return 0;
  }
  CFTypeID v5 = (ZinIrTensor *)(*(uint64_t (**)(const ZinIrOpLayer *, void, void))(*(void *)a1 + 32))(a1, 0, 0);
  return ZinMirInsertCopyForInputView::GetOffsetXInBytesWrtRootBase(v5, 0, 0) % a2 != 0;
}

void sub_211247A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3868B8;
  return result;
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3868B8;
}

BOOL std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, const ZinIrHalParameters **a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v23, "view0");
  if (ZinPattern::HasMatched(v5, (unsigned __int8 *)&v23))
  {
    char v6 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "view1");
    char v6 = ZinPattern::HasMatched(v5, (unsigned __int8 *)__p) ^ 1;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v25 < 0)
  {
    operator delete(v23);
    if (v6) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "pe_ew");
  unsigned int v8 = ZinPattern::HasMatched(v5, (unsigned __int8 *)&v23);
  unsigned int v9 = v8;
  if (v25 < 0)
  {
    operator delete(v23);
    if (v9) {
      goto LABEL_11;
    }
  }
  else if (v8)
  {
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v23, "pe_ew");
    uint64_t SingleMatch = ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)&v23);
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "pe_pool");
  unsigned int v11 = ZinPattern::HasMatched(v5, (unsigned __int8 *)&v23);
  unsigned int v12 = v11;
  if (v25 < 0)
  {
    operator delete(v23);
    if (v12) {
      goto LABEL_15;
    }
  }
  else if (v11)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&v23, "pe_pool");
    uint64_t SingleMatch = ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)&v23);
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "pe_goc");
  unsigned int v13 = ZinPattern::HasMatched(v5, (unsigned __int8 *)&v23);
  unsigned int v14 = v13;
  if (v25 < 0)
  {
    operator delete(v23);
    if (v14) {
      goto LABEL_19;
    }
  }
  else if (v13)
  {
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(&v23, "pe_goc");
    uint64_t SingleMatch = ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)&v23);
LABEL_20:
    char v15 = (const ZinPELayer *)SingleMatch;
    if (v25 < 0) {
      operator delete(v23);
    }
    goto LABEL_24;
  }
  char v15 = 0;
LABEL_24:
  std::string::basic_string[abi:ne180100]<0>(__p, "view0");
  long long v16 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)__p);
  std::string::basic_string[abi:ne180100]<0>(v19, "view1");
  uint64_t v17 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)v19);
  GetCopyIndices(v15, v16, v17, *a3, (unint64_t *)&v23);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  BOOL v7 = v23 != v24;
  if (v23)
  {
    int v24 = v23;
    operator delete(v23);
  }
  return v7;
}

void sub_211247CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_2,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_2>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void GetCopyIndices(const ZinPELayer *a1@<X0>, const ZinIrOpLayer *a2@<X1>, const ZinIrOpLayer *a3@<X2>, const ZinIrHalParameters *a4@<X3>, unint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a1)
  {
    if (a2)
    {
      if ((*(unsigned int (**)(const ZinPELayer *))(*(void *)a1 + 640))(a1))
      {
        uint64_t v10 = (unsigned char *)a5[1];
        unint64_t v9 = a5[2];
        if ((unint64_t)v10 >= v9)
        {
          unint64_t v13 = *a5;
          unsigned int v14 = &v10[-*a5];
          unint64_t v15 = (unint64_t)(v14 + 1);
          if ((uint64_t)(v14 + 1) < 0) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v16 = v9 - v13;
          if (2 * v16 > v15) {
            unint64_t v15 = 2 * v16;
          }
          if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v17 = v15;
          }
          if (v17) {
            unint64_t v18 = (unint64_t)operator new(v17);
          }
          else {
            unint64_t v18 = 0;
          }
          char v19 = (char *)(v18 + v17);
          v14[v18] = 0;
          uint64_t v11 = (uint64_t)&v14[v18 + 1];
          if (v10 == (unsigned char *)v13)
          {
            v18 += (unint64_t)v14;
          }
          else
          {
            char v20 = &v10[~v13];
            do
            {
              char v21 = *--v10;
              (v20--)[v18] = v21;
            }
            while (v10 != (unsigned char *)v13);
            uint64_t v10 = (unsigned char *)*a5;
          }
          *a5 = v18;
          a5[1] = v11;
          a5[2] = (unint64_t)v19;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *uint64_t v10 = 0;
          uint64_t v11 = (uint64_t)(v10 + 1);
        }
        a5[1] = v11;
      }
      else if (*((unsigned char *)a4 + 1337))
      {
        if ((*(unsigned int (**)(const ZinPELayer *))(*(void *)a1 + 656))(a1))
        {
          uint64_t v12 = *(void *)((*(uint64_t (**)(const ZinPELayer *))(*(void *)a1 + 696))(a1) + 64);
          if (ZinIrBroadcastInfo::HasDimension(v12, 4)
            && !ZinIrBroadcastInfo::HasDimension(v12, 3)
            && (*(uint64_t (**)(const ZinPELayer *, uint64_t))(*(void *)a1 + 360))(a1, 4) > (unint64_t)(*((void *)a4 + 40) - 8))
          {
            char v54 = 0;
            std::vector<unsigned char>::push_back[abi:ne180100](a5, &v54);
          }
        }
      }
    }
    if (a3)
    {
      if ((*(unsigned int (**)(const ZinPELayer *))(*(void *)a1 + 648))(a1))
      {
        uint64_t v23 = (unsigned char *)a5[1];
        unint64_t v22 = a5[2];
        if ((unint64_t)v23 < v22)
        {
LABEL_32:
          *uint64_t v23 = 1;
          uint64_t v24 = (uint64_t)(v23 + 1);
LABEL_86:
          a5[1] = v24;
          return;
        }
        unint64_t v34 = *a5;
        int v35 = &v23[-*a5];
        unint64_t v36 = (unint64_t)(v35 + 1);
        if ((uint64_t)(v35 + 1) < 0) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v37 = v22 - v34;
        if (2 * v37 > v36) {
          unint64_t v36 = 2 * v37;
        }
        if (v37 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v38 = v36;
        }
        if (v38) {
          unint64_t v33 = (unint64_t)operator new(v38);
        }
        else {
          unint64_t v33 = 0;
        }
        int v45 = &v35[v33];
        int v46 = (char *)(v33 + v38);
        v35[v33] = 1;
        uint64_t v24 = (uint64_t)&v35[v33 + 1];
        if (v23 != (unsigned char *)v34)
        {
          char v47 = &v23[~v34];
          do
          {
            char v48 = *--v23;
            (v47--)[v33] = v48;
          }
          while (v23 != (unsigned char *)v34);
LABEL_72:
          uint64_t v23 = (unsigned char *)*a5;
          goto LABEL_84;
        }
        goto LABEL_83;
      }
      if (*((unsigned char *)a4 + 1337) && (*(unsigned int (**)(const ZinPELayer *))(*(void *)a1 + 664))(a1))
      {
        uint64_t v25 = *(void *)((*(uint64_t (**)(const ZinPELayer *))(*(void *)a1 + 704))(a1) + 64);
        if (ZinIrBroadcastInfo::HasDimension(v25, 4)
          && !ZinIrBroadcastInfo::HasDimension(v25, 3)
          && (*(uint64_t (**)(const ZinPELayer *, uint64_t))(*(void *)a1 + 360))(a1, 4) > (unint64_t)(*((void *)a4 + 40) - 8))
        {
          char v53 = 1;
          std::vector<unsigned char>::push_back[abi:ne180100](a5, &v53);
        }
      }
      else
      {
        int v26 = *(_DWORD *)(*((void *)a1 + 8) + 8);
        if (v26 == 84)
        {
          uint64_t v23 = (unsigned char *)a5[1];
          unint64_t v39 = a5[2];
          if ((unint64_t)v23 < v39) {
            goto LABEL_32;
          }
          unint64_t v40 = *a5;
          uint64_t v41 = &v23[-*a5];
          unint64_t v42 = (unint64_t)(v41 + 1);
          if ((uint64_t)(v41 + 1) < 0) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v43 = v39 - v40;
          if (2 * v43 > v42) {
            unint64_t v42 = 2 * v43;
          }
          if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v44 = v42;
          }
          if (v44) {
            unint64_t v33 = (unint64_t)operator new(v44);
          }
          else {
            unint64_t v33 = 0;
          }
          int v45 = &v41[v33];
          int v46 = (char *)(v33 + v44);
          v41[v33] = 1;
          uint64_t v24 = (uint64_t)&v41[v33 + 1];
          if (v23 != (unsigned char *)v40)
          {
            uint64_t v49 = &v23[~v40];
            do
            {
              char v50 = *--v23;
              (v49--)[v33] = v50;
            }
            while (v23 != (unsigned char *)v40);
            goto LABEL_72;
          }
          goto LABEL_83;
        }
        if (v26 == 83 && (*(unsigned int (**)(const ZinPELayer *))(*(void *)a1 + 568))(a1))
        {
          uint64_t v23 = (unsigned char *)a5[1];
          unint64_t v27 = a5[2];
          if ((unint64_t)v23 < v27) {
            goto LABEL_32;
          }
          unint64_t v28 = *a5;
          int v29 = &v23[-*a5];
          unint64_t v30 = (unint64_t)(v29 + 1);
          if ((uint64_t)(v29 + 1) < 0) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v31 = v27 - v28;
          if (2 * v31 > v30) {
            unint64_t v30 = 2 * v31;
          }
          if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v32 = v30;
          }
          if (v32) {
            unint64_t v33 = (unint64_t)operator new(v32);
          }
          else {
            unint64_t v33 = 0;
          }
          int v45 = &v29[v33];
          int v46 = (char *)(v33 + v32);
          v29[v33] = 1;
          uint64_t v24 = (uint64_t)&v29[v33 + 1];
          if (v23 != (unsigned char *)v28)
          {
            int v51 = &v23[~v28];
            do
            {
              char v52 = *--v23;
              (v51--)[v33] = v52;
            }
            while (v23 != (unsigned char *)v28);
            goto LABEL_72;
          }
LABEL_83:
          unint64_t v33 = (unint64_t)v45;
LABEL_84:
          *a5 = v33;
          a5[1] = v24;
          a5[2] = (unint64_t)v46;
          if (v23) {
            operator delete(v23);
          }
          goto LABEL_86;
        }
      }
    }
  }
}

void sub_211248368(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::push_back[abi:ne180100](unint64_t *a1, unsigned char *a2)
{
  uint64_t v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    unsigned int v8 = &v5[-*a1];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v13 = (char *)(v12 + v11);
    v8[v12] = *a2;
    uint64_t v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      unsigned int v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      uint64_t v5 = (unsigned char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C386808;
  return result;
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C386808;
}

BOOL std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "alias");
  ZinPattern::GetMatch(v4, (unsigned __int8 *)__p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v12 == v13)
  {
    BOOL v7 = 0;
    if (!v12) {
      return v7;
    }
    goto LABEL_11;
  }
  uint64_t v5 = v12 + 8;
  do
  {
    uint64_t v6 = *((void *)v5 - 1);
    BOOL v7 = v6 != 0;
    if (v6) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v5 == v13;
    }
    v5 += 8;
  }
  while (!v8);
  if (v12)
  {
LABEL_11:
    unint64_t v13 = v12;
    operator delete(v12);
  }
  return v7;
}

void sub_2112485B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_0,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C386860;
  return result;
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C386860;
}

BOOL std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_kernel_consumer");
  ZinPattern::GetMatch(v4, (unsigned __int8 *)__p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v12 == v13)
  {
    BOOL v7 = 0;
    if (!v12) {
      return v7;
    }
    goto LABEL_11;
  }
  uint64_t v5 = v12 + 8;
  do
  {
    uint64_t v6 = *((void *)v5 - 1);
    BOOL v7 = v6 != 0;
    if (v6) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v5 == v13;
    }
    v5 += 8;
  }
  while (!v8);
  if (v12)
  {
LABEL_11:
    unint64_t v13 = v12;
    operator delete(v12);
  }
  return v7;
}

void sub_211248730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_1,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_1>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x38uLL);
  *(void *)int v2 = &unk_26C386910;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = result;
  return result;
}

__n128 std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C386910;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2, ZinIrOpLayer **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 48);
  if (ZinOneToVariablePattern::Match(*(ZinOneToVariablePattern **)(a1 + 8), *a2, *a3))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "alias");
    ZinPattern::GetMatch(v7, (unsigned __int8 *)__p, &v35);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    BOOL v8 = (ZinIrOpLayer **)v35;
    if (v35 != v36)
    {
      do
      {
        if (*v8) {
          InsertCopyBeforeLayer(v4, *v8, 0);
        }
        ++v8;
      }
      while (v8 != v36);
      BOOL v8 = (ZinIrOpLayer **)v35;
    }
LABEL_46:
    if (v8)
    {
      unint64_t v36 = v8;
      size_t v17 = v8;
      goto LABEL_48;
    }
    return 0;
  }
  if (!ZinOneToVariablePattern::Match(*(ZinOneToVariablePattern **)(a1 + 16), v4, v5))
  {
    if (ZinManyToOnePattern::Match(*(ZinManyToOnePattern **)(a1 + 24), v4, v5))
    {
      uint64_t v18 = *(void *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(&v35, "pe_ew");
      uint64_t SingleMatch = (const ZinPELayer *)ZinPattern::GetSingleMatch(v18, (unsigned __int8 *)&v35);
      if (v37 < 0) {
        operator delete(v35);
      }
      uint64_t v20 = *(void *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(&v35, "view0");
      char v21 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v20, (unsigned __int8 *)&v35);
      if (v37 < 0) {
        operator delete(v35);
      }
      uint64_t v22 = *(void *)(a1 + 24);
      std::string::basic_string[abi:ne180100]<0>(&v35, "view1");
      uint64_t v23 = ZinPattern::GetSingleMatch(v22, (unsigned __int8 *)&v35);
    }
    else if (ZinManyToOnePattern::Match(*(ZinManyToOnePattern **)(a1 + 32), v4, v5))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v35, "pe_pool");
      uint64_t SingleMatch = (const ZinPELayer *)ZinPattern::GetSingleMatch(v24, (unsigned __int8 *)&v35);
      if (v37 < 0) {
        operator delete(v35);
      }
      uint64_t v25 = *(void *)(a1 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v35, "view0");
      char v21 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v25, (unsigned __int8 *)&v35);
      if (v37 < 0) {
        operator delete(v35);
      }
      uint64_t v26 = *(void *)(a1 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v35, "view1");
      uint64_t v23 = ZinPattern::GetSingleMatch(v26, (unsigned __int8 *)&v35);
    }
    else
    {
      if (!ZinManyToOnePattern::Match(*(ZinManyToOnePattern **)(a1 + 40), v4, v5)) {
        return 0;
      }
      uint64_t v27 = *(void *)(a1 + 40);
      std::string::basic_string[abi:ne180100]<0>(&v35, "pe_goc");
      uint64_t SingleMatch = (const ZinPELayer *)ZinPattern::GetSingleMatch(v27, (unsigned __int8 *)&v35);
      if (v37 < 0) {
        operator delete(v35);
      }
      uint64_t v28 = *(void *)(a1 + 40);
      std::string::basic_string[abi:ne180100]<0>(&v35, "view0");
      char v21 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v28, (unsigned __int8 *)&v35);
      if (v37 < 0) {
        operator delete(v35);
      }
      uint64_t v29 = *(void *)(a1 + 40);
      std::string::basic_string[abi:ne180100]<0>(&v35, "view1");
      uint64_t v23 = ZinPattern::GetSingleMatch(v29, (unsigned __int8 *)&v35);
    }
    unint64_t v30 = (const ZinIrOpLayer *)v23;
    if (v37 < 0)
    {
      operator delete(v35);
      if (!SingleMatch) {
        return 0;
      }
    }
    else if (!SingleMatch)
    {
      return 0;
    }
    GetCopyIndices(SingleMatch, v21, v30, *(const ZinIrHalParameters **)(v6 + 8), (unint64_t *)&v35);
    BOOL v8 = (ZinIrOpLayer **)v35;
    if (v35 != v36) {
      InsertCopyBeforeLayer(v4, SingleMatch, *(unsigned __int8 *)v35);
    }
    goto LABEL_46;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_kernel_consumer");
  ZinPattern::GetMatch(v9, (unsigned __int8 *)__p, &v35);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v10 = (const ZinIrTensor **)v35;
  if (v35 != v36)
  {
    do
    {
      char v11 = *v10;
      if (*v10)
      {
        unint64_t v32 = 0;
        uint64_t v12 = *(void *)(a1 + 16);
        std::string::basic_string[abi:ne180100]<0>(__p, "view");
        uint64_t v13 = ZinPattern::GetSingleMatch(v12, (unsigned __int8 *)__p);
        unsigned int v14 = (ZinIrOpLayerGraphUtil *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v13 + 32))(v13, 0, 0);
        char IncomingIndex = ZinIrOpLayerGraphUtil::GetIncomingIndex(v14, v11, (const ZinIrOpLayer *)&v32, v15);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        if (IncomingIndex) {
          InsertCopyBeforeLayer(v4, v11, v32);
        }
        ZinAssertImpl("GetIncomingIndex API call failed.");
      }
      ++v10;
    }
    while (v10 != v36);
    unint64_t v10 = (const ZinIrTensor **)v35;
  }
  if (v10)
  {
    unint64_t v36 = v10;
    size_t v17 = v10;
LABEL_48:
    operator delete(v17);
  }
  return 0;
}

void sub_211248CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_211248D54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x211248D3CLL);
}

uint64_t std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirInsertCopyForInputView::Run(void)::$_3,std::allocator<ZinMirInsertCopyForInputView::Run(void)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void InsertCopyBeforeLayer(ZinIrOpLayerGraph *a1, ZinIrOpLayer *a2, unint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(*((void *)a2 + 11) + 8 * a3);
  if (*((char *)a2 + 47) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 47);
  }
  else {
    size_t v6 = *((void *)a2 + 4);
  }
  uint64_t v7 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v6 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 47) >= 0) {
      BOOL v8 = (char *)a2 + 24;
    }
    else {
      BOOL v8 = (char *)*((void *)a2 + 3);
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  std::to_string(&v31, a3);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v31;
  }
  else {
    uint64_t v9 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
  }
  char v11 = std::string::append(&v32, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v35, "_", 1uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v28, "ualign_view");
  char v15 = std::string::append(&v28, "_xfm", 4uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v30 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v29 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v30 >= 0) {
    size_t v17 = v29;
  }
  else {
    size_t v17 = (void **)v29[0];
  }
  if (v30 >= 0) {
    std::string::size_type v18 = HIBYTE(v30);
  }
  else {
    std::string::size_type v18 = (std::string::size_type)v29[1];
  }
  char v19 = std::string::append(&v33, (const std::string::value_type *)v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  __n128 v21 = ZinObjectNameFactory::ZinObjectNameFactory(&v34, __p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  uint64_t v22 = v5[2];
  uint64_t v23 = *(unsigned int *)((*(uint64_t (**)(void *, void, void, __n128))(*v5 + 32))(v5, 0, 0, v21)
                        + 88);
  uint64_t v27 = 0;
  v26[0] = 0;
  v26[168] = 0;
  ZinBuilder::CreateNEBypass(v22, (uint64_t)&v34, (uint64_t)v5, v23, &v27, 0, (uint64_t)v26, 1.0);
}

void sub_211249118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v47 - 136) = &unk_26C34DA98;
  if (*(char *)(v47 - 105) < 0) {
    operator delete(*(void **)(v47 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_21124924C()
{
}

void ZinMirInsertCopyForInputView::Run()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "TraverseForward failed during copy insertion for unaligned input views.\n", v0, 2u);
}

uint64_t GetSlices(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  if (a1 == a4)
  {
    BOOL v6 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v6) {
      GetSlices(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 3;
  }
  else
  {
    int v16 = a2;
    int v18 = a1 - a4;
    int v19 = -(int)a3;
    a6[1] = *a6;
    unint64_t v20 = a5 + a2;
    unint64_t v21 = ZinDivRoundUp(a5 + a2 + a3, a1);
    std::vector<ZinIrOpLayer *>::reserve((void **)a6, v21);
    uint64_t v22 = a6 + 2;
    uint64_t v23 = a6[1];
    do
    {
      unsigned int v24 = (v19 & (v19 >> 31)) + a1;
      uint64_t v25 = v19 & ~(v19 >> 31);
      if (v16 - (int)v25 >= (int)v24) {
        uint64_t v26 = v24;
      }
      else {
        uint64_t v26 = (v16 - v25);
      }
      if ((unint64_t)v23 >= *v22)
      {
        uint64_t v27 = (v23 - *a6) >> 3;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = *v22 - (void)*a6;
        uint64_t v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
          uint64_t v29 = v27 + 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30) {
          std::string v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a6 + 2), v30);
        }
        else {
          std::string v31 = 0;
        }
        std::string v32 = &v31[8 * v27];
        *(void *)std::string v32 = v26 | (v25 << 32);
        uint64_t v23 = v32 + 8;
        uint64_t v34 = *a6;
        std::string v33 = a6[1];
        if (v33 != *a6)
        {
          do
          {
            uint64_t v35 = *((void *)v33 - 1);
            v33 -= 8;
            *((void *)v32 - 1) = v35;
            v32 -= 8;
          }
          while (v33 != v34);
          std::string v33 = *a6;
        }
        *a6 = v32;
        a6[1] = v23;
        a6[2] = &v31[8 * v30];
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(void *)uint64_t v23 = v26 | (v25 << 32);
        v23 += 8;
      }
      unint64_t v36 = a1 + v19;
      a6[1] = v23;
      v19 += v18;
    }
    while (v36 < v20);
    return 0;
  }
}

double ComputeSpatialUtilization(void *a1)
{
  uint64_t v1 = (void *)*a1;
  int v2 = (void *)a1[1];
  if ((void *)*a1 == v2) {
    return -1.0;
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  do
  {
    v3 += v1[3] * v1[2];
    v4 += v1[9] * v1[8];
    v1 += 10;
  }
  while (v1 != v2);
  return fmin((double)v4 / (double)v3, 1.0);
}

uint64_t PERasterization::ComputeWUShape(ZinOpLayerUtils *a1, const ZinIrOpLayer *a2, void *a3, int *a4, uint64_t a5, int *a6, int a7, int a8)
{
  if (ZinOpLayerUtils::IsPEPool(a1, a2))
  {
    uint64_t v15 = *(void *)(*((void *)a1 + 54) + 64);
    unint64_t v16 = *(void *)(v15 + 16);
    uint64_t v17 = *(int *)(v15 + 40);
    uint64_t v24 = *(int *)(v15 + 44);
    unint64_t v25 = *(void *)(v15 + 24);
    uint64_t v18 = *(int *)(v15 + 64);
  }
  else
  {
    unint64_t v16 = 1;
    unint64_t v25 = 1;
    uint64_t v17 = 1;
    uint64_t v24 = 1;
    uint64_t v18 = 1;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (ZinTensorFormatGetSizeInBytes(*a4, &v28) || ZinTensorFormatGetSizeInBytes(*a6, &v27)) {
    ZinAssertImpl("Error in getting tensor format size in bytes");
  }
  if ((a8 & 1) == 0)
  {
    if (IsFp16(*a4)
      || !ZinOpLayerUtils::HasReductionLayer(a1, v19) && IsFp16(*a6)
      || (int v21 = *(unsigned __int8 *)(a5 + 4), !ZinOpLayerUtils::IsPEDynamicGOC(a1, v20)) && v21 && IsFp16(*(_DWORD *)a5))
    {
      if (v27 == 1) {
        return 64;
      }
    }
  }
  if (a7 && v16 >= 5 && v17 == 2 && v18 == 2 && v28 == 2) {
    return 64;
  }
  if (a7)
  {
    if (v25 <= 3 && v24 == 1) {
      uint64_t v23 = a3 + 117;
    }
    else {
      uint64_t v23 = a3 + 118;
    }
  }
  else
  {
    uint64_t v23 = a3 + 115;
    if (a8) {
      uint64_t v23 = a3 + 116;
    }
  }
  if (*v23 >= (unint64_t)a2) {
    return 16;
  }
  else {
    return 64;
  }
}

uint64_t PERasterization::IsHalfWU(void *a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v32 = 1;
  if (ZinTensorFormatGetSizeInBytes(a2, &v32)) {
    return 0;
  }
  uint64_t v31 = 1;
  if (ZinTensorFormatGetSizeInBytes(a4, &v31)) {
    return 0;
  }
  uint64_t v30 = 1;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (ZinTensorFormatGetSizeInBytes(a3, &v30)) {
      return 0;
    }
  }
  BOOL v10 = *(_DWORD *)(a1[8] + 8) == 81 && a1[63] != 0;
  (*(void (**)(unsigned char **__return_ptr, void *))(*a1 + 512))(&v28, a1);
  int64_t v11 = v29 - v28;
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  int v12 = *(_DWORD *)(a1[8] + 8);
  BOOL v14 = v12 != 83 || v11 == 8;
  int v15 = v12 == 84 && a1[55] != 0;
  if (!*(unsigned char *)(a5 + 1137))
  {
    (*(void (**)(unsigned char **__return_ptr, void *))(*a1 + 512))(&v28, a1);
    BOOL v21 = v29 - v28 == 16;
    if (v28)
    {
      uint64_t v29 = v28;
      operator delete(v28);
    }
    if (v32 != 2 && (v31 != 2 || v10))
    {
      if (v30 == 2) {
        return v21 & ~v15 & v14;
      }
      else {
        return 0;
      }
    }
    return 1;
  }
  BOOL v17 = v12 == 83 && v11 == 8;
  if ((*(unsigned int (**)(void *))(*a1 + 656))(a1))
  {
    uint64_t v18 = *(void *)((*(uint64_t (**)(void *))(*a1 + 696))(a1) + 64);
    BOOL v19 = !ZinIrBroadcastInfo::HasDimension(v18, 4);
    BOOL v20 = !ZinIrBroadcastInfo::HasDimension(v18, 3);
  }
  else
  {
    BOOL v19 = 1;
    BOOL v20 = 1;
  }
  if ((*(unsigned int (**)(void *))(*a1 + 664))(a1))
  {
    uint64_t v23 = (*(uint64_t (**)(void *))(*a1 + 832))(a1);
    Hasuint64_t Dimension = ZinIrBroadcastInfo::HasDimension(v23, 4);
    int v25 = HasDimension & ZinIrBroadcastInfo::HasDimension(v23, 3) ^ 1;
  }
  else
  {
    int v25 = 1;
  }
  if (v32 == 2 && (v17 || v19 || !v14 || v20)) {
    return 1;
  }
  if (v31 == 2 && !v10) {
    return 1;
  }
  int v27 = (v30 == 2) & ~(_BYTE)v15 & v14;
  if (v11 == 8) {
    int v27 = 0;
  }
  return v27 & v25;
}

uint64_t PERasterization::GetWorkunitSize(PERasterization *this, const ZinPELayer *a2, const ZinIrHalParameters *a3)
{
  uint64_t v5 = *((void *)this + 33) + 120;
  int v6 = *(_DWORD *)ZinMirL2Config::GetTileSrc(v5, 0);
  uint64_t v7 = *(unsigned int *)ZinMirL2Config::GetTileSrc(v5, 1);
  uint64_t v8 = (*(uint64_t (**)(PERasterization *, void, void))(*(void *)this + 32))(this, 0, 0);
  return *((void *)a2 + 75) >> PERasterization::IsHalfWU(this, v6, v7 | 0x100000000, *(_DWORD *)(v8 + 88), (uint64_t)a2);
}

int64x2_t PERasterization::ComputeL2FetchRequest@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, int64x2_t *a5@<X8>)
{
  uint64_t v5 = a1[1];
  BOOL v7 = a4 == 1 && a3 == 0 && a2 == 1;
  uint64_t v8 = 1;
  if (!v7) {
    uint64_t v8 = 2;
  }
  if (*a1 == 16 && v5 == 4) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 4;
  }
  a5->i64[0] = v10;
  a5->i64[1] = v5;
  int64x2_t result = vdupq_n_s64(1uLL);
  a5[1] = result;
  return result;
}

int64x2_t PERasterization::ComputeL2WBRequest@<Q0>(void *a1@<X0>, uint64_t a2@<X6>, int64x2_t *a3@<X8>)
{
  uint64_t v3 = a1[1];
  a3->i64[0] = *a1 / *(void *)(a2 + 416);
  a3->i64[1] = v3;
  int64x2_t result = vdupq_n_s64(1uLL);
  a3[1] = result;
  return result;
}

uint64_t *PERasterization::GetWUFrequency@<X0>(PERasterization *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = (uint64_t *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v6 = *((void *)this + 33);
  int v7 = *(_DWORD *)(v6 + 240);
  LODWORD(v8) = *(_DWORD *)(v6 + 248);
  unint64_t v9 = (*(uint64_t (**)(PERasterization *, uint64_t))(*(void *)this + 368))(this, 4);
  uint64_t v10 = (*(uint64_t (**)(PERasterization *, uint64_t))(*(void *)this + 368))(this, 3);
  (*(void (**)(unint64_t **__return_ptr, PERasterization *))(*(void *)this + 512))(&v45, this);
  int v12 = (uint64_t *)v45;
  int64_t v11 = v46;
  if (v45)
  {
    int v46 = (uint64_t *)v45;
    operator delete(v45);
  }
  uint64_t v13 = *((void *)this + 33) + 120;
  int v44 = *(_DWORD *)ZinMirL2Config::GetTileSrc(v13, 0);
  if ((unint64_t)((char *)v11 - (char *)v12) < 9)
  {
    char v14 = 0;
    LOBYTE(v42) = 0;
  }
  else
  {
    int v42 = *(_DWORD *)ZinMirL2Config::GetTileSrc(v13, 1);
    char v14 = 1;
  }
  char v43 = v14;
  unsigned int v15 = *(_DWORD *)((*(uint64_t (**)(PERasterization *, void, void))(*(void *)this + 32))(this, 0, 0)+ 88);
  if (IsFormatDMAConvertibleToFP16(v15)) {
    int v17 = 3;
  }
  else {
    int v17 = v15;
  }
  int v41 = v17;
  BOOL IsPEPool = ZinOpLayerUtils::IsPEPool(this, v16);
  int64x2_t result = (uint64_t *)ZinOpLayerUtils::HasReductionLayer(this, v19);
  int v21 = (int)result;
  uint64_t v22 = (const ZinIrOpLayer *)(1 << v7);
  if (v9 >= (unint64_t)v22)
  {
    uint64_t v40 = v10;
    char v23 = v8;
    Hal = ZinIrTarget::GetHal(*((uint64_t **)this + 2), *(ZinIrTarget **)(*((void *)this + 2) + 160));
    int v25 = (void *)(*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
    unint64_t v8 = PERasterization::ComputeWUShape(this, v22, v25, &v44, (uint64_t)&v42, &v41, IsPEPool, v21);
    unint64_t v47 = (unint64_t)v26 << 16;
    int v45 = &v47;
    int64x2_t result = std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)a2, &v47, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45);
    result[5] += ((unint64_t)v22 + v8 - 1) / v8 * (v9 / (unint64_t)v22);
    LOBYTE(v8) = v23;
    uint64_t v10 = v40;
  }
  unint64_t v27 = v9 % (unint64_t)v22;
  if (v27)
  {
    uint64_t v28 = ZinIrTarget::GetHal(*((uint64_t **)this + 2), *(ZinIrTarget **)(*((void *)this + 2) + 160));
    uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t *))(*v28 + 16))(v28);
    unint64_t v30 = PERasterization::ComputeWUShape(this, (const ZinIrOpLayer *)v27, v29, &v44, (uint64_t)&v42, &v41, IsPEPool, v21);
    unint64_t v47 = (unint64_t)v31 << 16;
    int v45 = &v47;
    int64x2_t result = std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)a2, &v47, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45);
    result[5] += (v27 + v30 - 1) / v30;
  }
  uint64_t v32 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 != v5)
  {
    unint64_t v33 = 1 << v8;
    unint64_t v34 = v33 - 1;
    unint64_t v35 = (v33 - 1 + v10) / v33;
    do
    {
      uint64_t v36 = v32[4];
      int v45 = (unint64_t *)(v32 + 4);
      int64x2_t result = std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)v32 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45);
      result[5] *= v35 * ((v34 + BYTE2(v36)) / BYTE2(v36));
      char v37 = (uint64_t *)v32[1];
      if (v37)
      {
        do
        {
          size_t v38 = v37;
          char v37 = (uint64_t *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          size_t v38 = (uint64_t *)v32[2];
          BOOL v39 = *v38 == (void)v32;
          uint64_t v32 = v38;
        }
        while (!v39);
      }
      uint64_t v32 = v38;
    }
    while (v38 != v5);
  }
  return result;
}

void sub_211249E78(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

unint64_t PERasterization::RasterizePEPatches@<X0>(unint64_t this@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  unint64_t v41 = this;
  unint64_t v8 = (unint64_t **)a8;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  int64_t v11 = a8 + 2;
  unint64_t v12 = 1 << a3;
  unint64_t v13 = 1 << a4;
  int v42 = a8 + 2;
  uint64_t v37 = a2;
  do
  {
    uint64_t v14 = a6;
    if (v10) {
      uint64_t v14 = 0;
    }
    unint64_t v15 = a5 - v14;
    if (a2 - v10 >= v15) {
      unint64_t v16 = v15;
    }
    else {
      unint64_t v16 = a2 - v10;
    }
    if (this)
    {
      unint64_t v17 = 0;
      unint64_t v43 = v16;
      do
      {
        unint64_t v18 = this - v17;
        if (this - v17 >= v12) {
          unint64_t v18 = v12;
        }
        unint64_t v44 = v18;
        if (v16)
        {
          for (unint64_t i = 0; i < v16; i += v20)
          {
            if (v16 - i >= v13) {
              unint64_t v20 = v13;
            }
            else {
              unint64_t v20 = v16 - i;
            }
            unint64_t v21 = i + v10;
            if ((unint64_t)v9 >= *v11)
            {
              unint64_t v22 = v10;
              unint64_t v23 = v12;
              uint64_t v24 = v8;
              int v25 = *v8;
              unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (char *)*v8) >> 4);
              unint64_t v27 = v26 + 1;
              if (v26 + 1 > 0x333333333333333) {
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              }
              if (0x999999999999999ALL * ((uint64_t)(*v11 - (void)v25) >> 4) > v27) {
                unint64_t v27 = 0x999999999999999ALL * ((uint64_t)(*v11 - (void)v25) >> 4);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v11 - (void)v25) >> 4) >= 0x199999999999999) {
                unint64_t v28 = 0x333333333333333;
              }
              else {
                unint64_t v28 = v27;
              }
              if (v28)
              {
                uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)v11, v28);
                int v25 = *v24;
                unint64_t v9 = v24[1];
              }
              else
              {
                uint64_t v29 = 0;
              }
              unint64_t v30 = &v29[80 * v26];
              *(void *)unint64_t v30 = v17;
              *((void *)v30 + 1) = v21;
              *((void *)v30 + 2) = v13;
              *((void *)v30 + 3) = v23;
              unint64_t v12 = v23;
              unint64_t v10 = v22;
              *((void *)v30 + 4) = v22;
              *((void *)v30 + 5) = v43;
              *((void *)v30 + 6) = 0;
              *((_DWORD *)v30 + 14) = 0;
              *((void *)v30 + 8) = v44;
              *((void *)v30 + 9) = v20;
              if (v9 == v25)
              {
                unint64_t v35 = v30;
              }
              else
              {
                unsigned __int8 v31 = v30;
                do
                {
                  *((_OWORD *)v31 - 5) = *((_OWORD *)v9 - 5);
                  long long v32 = *((_OWORD *)v9 - 4);
                  long long v33 = *((_OWORD *)v9 - 3);
                  long long v34 = *((_OWORD *)v9 - 1);
                  unint64_t v35 = v31 - 80;
                  *((_OWORD *)v31 - 2) = *((_OWORD *)v9 - 2);
                  *((_OWORD *)v31 - 1) = v34;
                  *((_OWORD *)v31 - 4) = v32;
                  *((_OWORD *)v31 - 3) = v33;
                  v9 -= 10;
                  v31 -= 80;
                }
                while (v9 != v25);
              }
              unint64_t v9 = (unint64_t *)(v30 + 80);
              *uint64_t v24 = (unint64_t *)v35;
              v24[1] = (unint64_t *)(v30 + 80);
              _OWORD v24[2] = (unint64_t *)&v29[80 * v28];
              if (v25) {
                operator delete(v25);
              }
              int64_t v11 = v42;
              unint64_t v16 = v43;
              unint64_t v8 = v24;
            }
            else
            {
              *unint64_t v9 = v17;
              v9[1] = v21;
              void v9[2] = v13;
              v9[3] = v12;
              v9[4] = v10;
              void v9[5] = v16;
              v9[6] = 0;
              *((_DWORD *)v9 + 14) = 0;
              v9[8] = v44;
              v9[9] = v20;
              v9 += 10;
            }
            v8[1] = v9;
          }
        }
        v17 += v44;
        this = v41;
      }
      while (v17 < v41);
    }
    unint64_t v36 = v16 + v10;
    a2 = v37;
    unint64_t v10 = v16 + v10 - a7;
  }
  while (v36 != v37);
  return this;
}

void sub_21124A130(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NERasterization::ComputeL2FetchRequest@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X5>, unint64_t *a6@<X8>)
{
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = a5[74] / v6;
  unint64_t v8 = a5[54];
  if (v8 >= v7) {
    unint64_t v8 = a5[74] / v6;
  }
  unint64_t v9 = a5[52];
  unint64_t v10 = v8 / v9;
  unint64_t v11 = v6 >> 1;
  if (v6 == 1) {
    unint64_t v11 = 1;
  }
  if (a4) {
    unint64_t v12 = v10 + 1;
  }
  else {
    unint64_t v12 = v10;
  }
  *a6 = v12;
  a6[1] = v11;
  a6[2] = v7 / (v10 * v9) * a2 * (v6 / v11);
  a6[3] = a3;
  return result;
}

uint64_t NERasterization::ComputeL2WBRequest@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  unint64_t v8 = *(void *)(result + 8);
  unint64_t v9 = a5 * a2 * (a4 / a6 / v8);
  unint64_t v10 = *(void *)(a7 + 416);
  unint64_t v11 = *(void *)(a7 + 440);
  if (v9 <= v10)
  {
    unint64_t v13 = 1;
  }
  else
  {
    if (v11 >= v9) {
      unint64_t v12 = a5 * a2 * (a4 / a6 / v8);
    }
    else {
      unint64_t v12 = *(void *)(a7 + 440);
    }
    unint64_t v13 = v12 / v10;
  }
  unint64_t v14 = v8 * a3;
  unint64_t v15 = v11 / (v13 * v10);
  if (v14 < v15) {
    unint64_t v15 = v14;
  }
  unint64_t v16 = v9 / v13 * v10;
  if (v16 <= 1) {
    unint64_t v16 = 1;
  }
  *a8 = v13;
  a8[1] = v15;
  a8[2] = v16 * (v14 / v15);
  a8[3] = 1;
  return result;
}

uint64_t NERasterization::RasterizeWorkUnit(uint64_t a1, void **a2, void *a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, int a8, unint64_t a9, uint64_t a10, unsigned int a11, int a12, char a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20,char a21)
{
  char v26 = IsFormatDMAConvertibleToFP16(a11);
  if (a11 == 3 || (v26 & 1) == 0)
  {
    if (!a7)
    {
      BOOL v36 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v36) {
        NERasterization::RasterizeWorkUnit(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      return 3;
    }
    if (a8)
    {
      if (a4 != a5 || a4 != a6)
      {
        BOOL v53 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v53) {
          NERasterization::RasterizeWorkUnit(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        return 3;
      }
      BOOL v27 = a8 == 3;
      if (a4 != 6 && a8 == 3)
      {
        BOOL v28 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v28) {
          NERasterization::RasterizeWorkUnit(v28, v29, v30, v31, v32, v33, v34, v35);
        }
        return 3;
      }
      BOOL v44 = a8 == 4;
      if (a4 != 10 && a8 == 4)
      {
        BOOL v70 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v70) {
          NERasterization::RasterizeWorkUnit(v70, v71, v72, v73, v74, v75, v76, v77);
        }
        return 3;
      }
    }
    else
    {
      BOOL v44 = 0;
      BOOL v27 = 0;
    }
    uint64_t v175 = 1 << a14;
    if (*(unsigned char *)(a16 + 1585))
    {
      if (1 << a14 > (1 << *(_DWORD *)(a16 + 2112)))
      {
        BOOL v45 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v45) {
          NERasterization::RasterizeWorkUnit(v45, v46, v47, v48, v49, v50, v51, v52);
        }
        return 3;
      }
    }
    else if (a14 + a15)
    {
      BOOL v78 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v78) {
        NERasterization::RasterizeWorkUnit(v78, v79, v80, v81, v82, v83, v84, v85);
      }
      return 3;
    }
    if (a13)
    {
      if (a8 && a8 != 3)
      {
        BOOL v94 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v94) {
          NERasterization::RasterizeWorkUnit(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        return 3;
      }
      unint64_t v61 = *(void *)(a16 + 664);
      if (v61 < a6 || v61 < a4)
      {
        BOOL v86 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v86) {
          NERasterization::RasterizeWorkUnit(v86, v87, v88, v89, v90, v91, v92, v93);
        }
        return 3;
      }
      if (a11 == 3)
      {
        BOOL v62 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v62) {
          NERasterization::RasterizeWorkUnit(v62, v63, v64, v65, v66, v67, v68, v69);
        }
        return 3;
      }
      if (a14 || a15)
      {
        BOOL v118 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v118) {
          NERasterization::RasterizeWorkUnit(v118, v119, v120, v121, v122, v123, v124, v125);
        }
        return 3;
      }
    }
    BOOL v182 = v44;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1, *(void **)(a1 + 8));
    *(void *)a1 = a1 + 8;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    a2[1] = *a2;
    *a3 = 0;
    char v188 = 0;
    char v189 = 0;
    uint64_t v190 = 0;
    uint64_t v102 = 1 << a14;
    if (GetSlices(a7, a10, a17, a18, a19, &v188))
    {
      BOOL v103 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v103) {
        NERasterization::RasterizeWorkUnit(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      uint64_t v111 = 3;
      goto LABEL_120;
    }
    int v112 = IsFp16(a11);
    int v113 = v112;
    if ((a8 - 1) <= 1)
    {
      unsigned __int8 v114 = a15;
      if (a4 == 16)
      {
        unint64_t v186 = 8;
        unint64_t v115 = 8;
      }
      else
      {
        unint64_t v115 = a4;
        unint64_t v186 = *(void *)(a16 + 784) / a4;
      }
      goto LABEL_60;
    }
    if (v182)
    {
      unint64_t v116 = *(void *)(a16 + 1168);
      unint64_t v186 = v116 >> v112;
      unint64_t v117 = *(void *)(a16 + 824);
    }
    else
    {
      if (!v27)
      {
        unint64_t v186 = (*(void *)(a16 + 592) / a4) >> v112 >> a13;
        unint64_t v115 = a4;
        goto LABEL_59;
      }
      unint64_t v116 = *(void *)(a16 + 1184);
      unint64_t v186 = v116 >> v112 >> a13;
      unint64_t v117 = *(void *)(a16 + 824);
    }
    unint64_t v115 = v117 / v116;
LABEL_59:
    unsigned __int8 v114 = a15;
LABEL_60:
    if (a20)
    {
      unint64_t v127 = ZinDivRoundUp(a9 << v112, v186);
      unint64_t v128 = ZinDivRoundUp(a10, v115);
      std::vector<ZinIrTensor::ViewOriginAndStep>::reserve(a2, v128 * v127);
    }
    uint64_t v129 = (int *)v188;
    uint64_t v164 = (int *)v189;
    if (v188 == v189)
    {
      uint64_t v111 = 0;
      if (!v188) {
        return v111;
      }
      goto LABEL_121;
    }
    unint64_t v130 = v115;
    unint64_t v163 = a4;
    int v171 = a8;
    if (v113) {
      unint64_t v131 = 8;
    }
    else {
      unint64_t v131 = 16;
    }
    uint64_t v132 = a2 + 2;
    char v165 = v113;
    uint64_t v178 = a2 + 2;
    unint64_t v169 = v131;
    unint64_t v170 = a6;
    do
    {
      unint64_t v133 = *v129;
      if (!a8)
      {
        unint64_t v134 = v163;
        do
        {
          unint64_t v130 = v134;
          if (v134 <= a5) {
            break;
          }
          v134 >>= 1;
        }
        while (v130 * v102 > v133);
      }
      if (a9)
      {
        unint64_t v185 = 0;
        unint64_t v172 = v133 - 1;
        uint64_t v166 = (v133 & 0xFFFFFF) << 24;
        int v135 = a20;
        if (!v133) {
          int v135 = 0;
        }
        int v173 = v135;
        uint64_t v177 = v129;
        unint64_t v179 = *v129;
        do
        {
          if (a8)
          {
            if (a9 - v185 >= v186) {
              unint64_t v136 = v186;
            }
            else {
              unint64_t v136 = a9 - v185;
            }
          }
          else
          {
            unint64_t v186 = (*(void *)(a16 + 592) / v130) >> v165 >> a13;
            unint64_t v137 = v186 << v114;
            unint64_t v138 = a9 - v185;
            if (a9 - v185 >= v186 << v114) {
              unint64_t v136 = v186 << v114;
            }
            else {
              unint64_t v136 = a9 - v185;
            }
            for (; v137 > v138; unint64_t v136 = v138 >= v186 << v114 ? v186 << v114 : a9 - v185)
            {
              if (v137 - v136 < v131 || v130 >= a6 || *(void *)(a16 + 1152) * v102 * v130 > v133) {
                break;
              }
              v130 *= 2;
              v186 >>= 1;
              unint64_t v137 = v186 << v114;
            }
          }
          unint64_t v176 = v186 << v114;
          unint64_t v184 = v130;
          if (v173)
          {
            unint64_t v139 = 0;
            unint64_t v140 = a9 - v185;
            if (a9 - v185 >= v186) {
              unint64_t v140 = v186;
            }
            unint64_t v183 = v140;
            BOOL v181 = v185 == 0;
            unint64_t v141 = v130 * v175;
            BOOL v180 = v176 + v185 >= a9;
            uint64_t v142 = (char *)a2[1];
            do
            {
              uint64_t v143 = a2;
              if (v133 - v139 >= v130) {
                unint64_t v144 = v130;
              }
              else {
                unint64_t v144 = v133 - v139;
              }
              uint64_t v145 = v129[1];
              uint64_t v146 = v139 + v145;
              BOOL v147 = v139 == 0;
              BOOL v148 = v139 + v145 + v141 >= v145 + v133;
              if ((unint64_t)v142 >= *v132)
              {
                unint64_t v149 = 0xCCCCCCCCCCCCCCCDLL * ((v142 - (unsigned char *)*v143) >> 4);
                unint64_t v150 = v149 + 1;
                if (v149 + 1 > 0x333333333333333) {
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v151 = v136;
                if (0x999999999999999ALL * ((uint64_t)(*v132 - (void)*v143) >> 4) > v150) {
                  unint64_t v150 = 0x999999999999999ALL * ((uint64_t)(*v132 - (void)*v143) >> 4);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v132 - (void)*v143) >> 4) >= 0x199999999999999) {
                  unint64_t v152 = 0x333333333333333;
                }
                else {
                  unint64_t v152 = v150;
                }
                if (v152)
                {
                  uint64_t v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)v132, v152);
                  uint64_t v132 = v178;
                }
                else
                {
                  uint64_t v153 = 0;
                }
                uint64_t v154 = &v153[80 * v149];
                *(void *)uint64_t v154 = v185;
                *((void *)v154 + 1) = v146;
                *((void *)v154 + 2) = v184;
                *((void *)v154 + 3) = v186;
                *((void *)v154 + 4) = v145;
                *((void *)v154 + 5) = v179;
                *((void *)v154 + 6) = v151;
                v154[56] = v147;
                v154[57] = v181;
                v154[58] = v148;
                v154[59] = v180;
                *((_DWORD *)v154 + 15) = 0;
                *((void *)v154 + 8) = v183;
                *((void *)v154 + 9) = v144;
                a2 = v143;
                uint64_t v156 = (char *)*v143;
                uint64_t v155 = (char *)v143[1];
                uint64_t v157 = v154;
                if (v155 != *v143)
                {
                  do
                  {
                    *((_OWORD *)v157 - 5) = *((_OWORD *)v155 - 5);
                    long long v158 = *((_OWORD *)v155 - 4);
                    long long v159 = *((_OWORD *)v155 - 3);
                    long long v160 = *((_OWORD *)v155 - 1);
                    *((_OWORD *)v157 - 2) = *((_OWORD *)v155 - 2);
                    *((_OWORD *)v157 - 1) = v160;
                    *((_OWORD *)v157 - 4) = v158;
                    *((_OWORD *)v157 - 3) = v159;
                    v157 -= 80;
                    v155 -= 80;
                  }
                  while (v155 != v156);
                  uint64_t v155 = (char *)*v143;
                }
                uint64_t v142 = v154 + 80;
                *uint64_t v143 = v157;
                v143[1] = v154 + 80;
                v143[2] = &v153[80 * v152];
                if (v155)
                {
                  operator delete(v155);
                  uint64_t v132 = v178;
                }
                unint64_t v130 = v184;
                uint64_t v129 = v177;
                unint64_t v136 = v151;
                unint64_t v133 = v179;
              }
              else
              {
                *(void *)uint64_t v142 = v185;
                *((void *)v142 + 1) = v146;
                *((void *)v142 + 2) = v130;
                *((void *)v142 + 3) = v186;
                *((void *)v142 + 4) = v145;
                *((void *)v142 + 5) = v133;
                *((void *)v142 + 6) = v136;
                v142[56] = v147;
                v142[57] = v181;
                v142[58] = v148;
                v142[59] = v180;
                *((_DWORD *)v142 + 15) = 0;
                *((void *)v142 + 8) = v183;
                *((void *)v142 + 9) = v144;
                v142 += 80;
                a2 = v143;
              }
              a2[1] = v142;
              v139 += v141;
            }
            while (v139 < v133);
          }
          uint64_t v102 = 1 << a14;
          unint64_t v161 = (v172 + v130 * v175) / (v130 * v175);
          a8 = v171;
          if (a21)
          {
            unint64_t v187 = v166 | ((unint64_t)v130 << 16) | (v136 << 48) | (unsigned __int16)v186;
            char v191 = &v187;
            uint64_t v162 = std::__tree<std::__value_type<unsigned long,ZinIrOpLayer *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,ZinIrOpLayer *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,ZinIrOpLayer *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)a1, &v187, (uint64_t)&std::piecewise_construct, (uint64_t **)&v191);
            v162[5] += v161;
            unint64_t v130 = v184;
            uint64_t v129 = v177;
            uint64_t v132 = v178;
          }
          *a3 += v161;
          v185 += v176;
          unint64_t v131 = v169;
          a6 = v170;
          unsigned __int8 v114 = a15;
        }
        while (v185 < a9);
      }
      v129 += 2;
    }
    while (v129 != v164);
    uint64_t v111 = 0;
LABEL_120:
    uint64_t v129 = (int *)v188;
    if (!v188) {
      return v111;
    }
LABEL_121:
    char v189 = (char *)v129;
    operator delete(v129);
    return v111;
  }
  return 3;
}

void sub_21124AAB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 12std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void NERasterization::GetWUFrequency(NERasterization *this@<X0>, void *a2@<X8>)
{
  uint64_t v21 = (*(uint64_t (**)(NERasterization *, uint64_t))(*(void *)this + 368))(this, 3);
  unint64_t v20 = (*(uint64_t (**)(NERasterization *, uint64_t))(*(void *)this + 368))(this, 4);
  uint64_t v5 = *((void *)this + 33);
  unsigned int v19 = *(_DWORD *)ZinMirL2Config::GetTileSrc(v5 + 120, 0);
  Hal = ZinIrTarget::GetHal(*((uint64_t **)this + 2), *(ZinIrTarget **)(*((void *)this + 2) + 160));
  uint64_t v7 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v9 = *(void *)(v5 + 128);
  unint64_t v8 = *(void *)(v5 + 136);
  unint64_t v10 = *(void *)(v5 + 120);
  unint64_t v11 = *(void *)(v5 + 200);
  int v12 = *(_DWORD *)(v5 + 144);
  char v13 = *(unsigned char *)(v5 + 149);
  uint64_t ChannelAssignment = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)v5);
  uint64_t Lut = ZinIrTarget::GetLut(ChannelAssignment);
  unint64_t v16 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)v5);
  unsigned __int8 FatTileEnable = MirInfoChannelAssignment::GetFatTileEnable(v16);
  uint64_t v22 = 0;
  NERasterization::RasterizeWorkUnit((uint64_t)a2, &v23, &v22, v8, v10, v9, v11, v12, v20, v21, v19, v18, v13, Lut, FatTileEnable, v7, *(void *)(v5 + 216), *(void *)(v5 + 208), *(void *)(v5 + 224),
    0,
    1);
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
}

void sub_21124AC9C(_Unwind_Exception *a1)
{
  unint64_t v4 = *(void **)(v2 - 104);
  if (v4)
  {
    *(void *)(v2 - 96) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t NERasterization::GetWUCost(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, char a6, unint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned int a11, uint64_t a12)
{
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v18 = 0;
  unsigned int v19 = v20;
  unint64_t v16 = 0;
  unint64_t v17 = 0;
  uint64_t v15 = 0;
  NERasterization::RasterizeWorkUnit((uint64_t)&v19, &v16, &v15, a1, a2, a3, a4, a5, a7, a8, a11, v14, a6, a9, a10, a12, 0, 0, 0,
    0,
    0);
  uint64_t v12 = v15;
  if (v16)
  {
    unint64_t v17 = v16;
    operator delete(v16);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v19, v20[0]);
  return v12;
}

void sub_21124AD80(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 64);
  if (v3)
  {
    *(void *)(v1 - 56) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 40, *(void **)(v1 - 32));
  _Unwind_Resume(a1);
}

BOOL NERasterization::CanUseFlexibleWUShapeInSSM(NERasterization *this, const ZinNELayer *a2, const ZinIrHalParameters *a3)
{
  int v4 = *((unsigned __int8 *)a2 + 1145);
  (*(void (**)(void *__return_ptr))(*(void *)this + 328))(v16);
  BOOL v7 = (*(uint64_t (**)(NERasterization *))(*(void *)this + 344))(this) == 0x100000001 && v5 == 1;
  BOOL v10 = v16[0] == 1 && v16[1] == 1 && v4 != 0 && v7;
  (*(void (**)(uint64_t *__return_ptr, NERasterization *))(*(void *)this + 136))(v13, this);
  if (v15) {
    return v14 != 3 && v14 != 6 && v10;
  }
  return v10;
}

uint64_t NERasterization::CanUseNonPowerOf2WUs(void *a1, uint64_t a2, unsigned int a3)
{
  if (!*(unsigned char *)(a2 + 1146)) {
    return 0;
  }
  BOOL v6 = (*(uint64_t (**)(void *))(*a1 + 344))(a1) == 0x100000001 && v5 == 1;
  if (!v6 || ((*(uint64_t (**)(void *))(*a1 + 408))(a1) & 1) != 0) {
    return 0;
  }
  (*(void (**)(void *__return_ptr, void *))(*a1 + 136))(v14, a1);
  if (!v16 || (uint64_t result = 0, v15 != 3) && v15 != 6)
  {
    unsigned int v8 = *(_DWORD *)((*(uint64_t (**)(void *, void, void))(*a1 + 32))(a1, 0, 0) + 88);
    if (IsFormatDMAConvertibleToFP16(a3)) {
      a3 = 3;
    }
    int v9 = IsFormatDMAConvertibleToFP16(v8);
    if (v8 == 3) {
      int v10 = 1;
    }
    else {
      int v10 = v9;
    }
    if (v10 != (a3 != 3))
    {
      unint64_t v11 = (ZinEngineLayerMirInfo *)a1[33];
      if (!v11) {
        return 1;
      }
      uint64_t ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v11);
      if ((MirInfoChannelAssignment::GetFatTileEnable(ChannelAssignment) & 1) == 0)
      {
        uint64_t v13 = a1[33];
        if (!v13 || !*(unsigned char *)(v13 + 148) || a3 - 1 <= 1) {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

void NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, void **a5, unint64_t a6, unsigned __int8 a7)
{
  if (*(unsigned char *)(*(void *)(a1 + 16) + 668)) {
    return;
  }
  uint64_t v91 = 0;
  if (ZinTensorFormatGetSizeInBytes(a3, &v91)) {
    ZinAssertImpl("Error in getting tensor format size in bytes");
  }
  int v85 = a7;
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 328))(v89, a1);
  uint64_t v13 = v89[0];
  uint64_t v14 = (*(int (**)(uint64_t))(*(void *)a1 + 344))(a1);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 384))(v89, a1);
  unint64_t v86 = v89[2];
  unint64_t v80 = v90;
  unint64_t v81 = v89[1];
  double v15 = (double)((v13 - 1) / v14);
  uint64_t v16 = v91 * v90;
  uint64_t v17 = (v90 + (uint64_t)v15) * v91;
  uint64_t ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
  BOOL IsMulticastEnabled = MirInfoChannelAssignment::IsMulticastEnabled(ChannelAssignment);
  uint64_t v20 = ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
  uint64_t v21 = 0;
  long long v92 = *(_OWORD *)v20;
  uint64_t v83 = *(void *)(v20 + 24);
  uint64_t v93 = *(void *)(v20 + 16);
  char v84 = *(unsigned char *)(v20 + 32);
  if ((unint64_t)v16 <= a2[145])
  {
    unint64_t v22 = 0;
LABEL_14:
    if (IsMulticastEnabled) {
      goto LABEL_31;
    }
    goto LABEL_33;
  }
  unint64_t v22 = 0;
  if ((unint64_t)v17 > a2[146]) {
    goto LABEL_14;
  }
  if (v85) {
    uint64_t v21 = a6;
  }
  else {
    uint64_t v21 = v86;
  }
  if (IsMulticastEnabled && *(_DWORD *)(*(void *)(a1 + 64) + 8) == 85)
  {
    unint64_t v22 = 10;
    if (NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(ZinNELayer const*,ZinIrHalParameters const&,ZinTensorFormat,ZinTensorDimensions const&,std::vector<ZinMirWorkUnitShapeCandidate> &,std::optional<unsigned long>)::$_0::operator()(a1, 10, 10, 10, v21, 4, a3))goto LABEL_31; {
  }
    }
  unint64_t v23 = (char *)a5[2];
  uint64_t v24 = (char *)a5[1];
  if (v24 >= v23)
  {
    unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - (unsigned char *)*a5) >> 4);
    unint64_t v27 = v26 + 1;
    if (v26 + 1 > 0x333333333333333) {
      goto LABEL_81;
    }
    unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - (unsigned char *)*a5) >> 4);
    if (2 * v28 > v27) {
      unint64_t v27 = 2 * v28;
    }
    if (v28 >= 0x199999999999999) {
      unint64_t v29 = 0x333333333333333;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29) {
      uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a5 + 2), v29);
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = &v30[80 * v26];
    uint64_t v32 = &v30[80 * v29];
    uint64_t v33 = v93;
    *(_OWORD *)uint64_t v31 = v92;
    *((void *)v31 + 2) = v33;
    *((void *)v31 + 3) = v83;
    v31[32] = v84;
    *(int64x2_t *)(v31 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = vdupq_n_s64(0xAuLL);
    *((void *)v31 + 7) = 10;
    *((void *)v31 + 8) = v21;
    *((_DWORD *)v31 + 18) = 4;
    *((_WORD *)v31 + 38) = 256;
    uint64_t v25 = v31 + 80;
    uint64_t v35 = (char *)*a5;
    uint64_t v34 = (char *)a5[1];
    if (v34 != *a5)
    {
      do
      {
        *((_OWORD *)v31 - 5) = *((_OWORD *)v34 - 5);
        long long v36 = *((_OWORD *)v34 - 4);
        long long v37 = *((_OWORD *)v34 - 3);
        long long v38 = *((_OWORD *)v34 - 2);
        *(_OWORD *)(v31 - 18) = *(_OWORD *)(v34 - 18);
        *((_OWORD *)v31 - 3) = v37;
        *((_OWORD *)v31 - 2) = v38;
        *((_OWORD *)v31 - 4) = v36;
        v31 -= 80;
        v34 -= 80;
      }
      while (v34 != v35);
      uint64_t v34 = (char *)*a5;
    }
    *a5 = v31;
    a5[1] = v25;
    a5[2] = v32;
    if (v34) {
      operator delete(v34);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v24 = v92;
    *((void *)v24 + 2) = v93;
    *((void *)v24 + 3) = v83;
    v24[32] = v84;
    *(int64x2_t *)(v24 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = vdupq_n_s64(0xAuLL);
    *((void *)v24 + 7) = 10;
    *((void *)v24 + 8) = v21;
    *((_DWORD *)v24 + 18) = 4;
    *((_WORD *)v24 + 38) = 256;
    uint64_t v25 = v24 + 80;
  }
  a5[1] = v25;
  unint64_t v22 = 10;
  if (IsMulticastEnabled)
  {
LABEL_31:
    if (*(_DWORD *)(*(void *)(a1 + 64) + 8) == 85
      && (NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(ZinNELayer const*,ZinIrHalParameters const&,ZinTensorFormat,ZinTensorDimensions const&,std::vector<ZinMirWorkUnitShapeCandidate> &,std::optional<unsigned long>)::$_0::operator()(a1, 6, 6, 6, v21, 3, a3) & 1) != 0)
    {
      return;
    }
  }
LABEL_33:
  if (v16 > a2[147] && v17 <= a2[148])
  {
    if (v85) {
      unint64_t v39 = a6;
    }
    else {
      unint64_t v39 = v86;
    }
    uint64_t v40 = (char *)a5[2];
    uint64_t v41 = (char *)a5[1];
    if (v41 >= v40)
    {
      unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((v41 - (unsigned char *)*a5) >> 4);
      unint64_t v44 = v43 + 1;
      if (v43 + 1 > 0x333333333333333) {
        goto LABEL_81;
      }
      unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((v40 - (unsigned char *)*a5) >> 4);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0x199999999999999) {
        unint64_t v46 = 0x333333333333333;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46) {
        uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a5 + 2), v46);
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = &v47[80 * v43];
      uint64_t v49 = &v47[80 * v46];
      uint64_t v50 = v93;
      *(_OWORD *)uint64_t v48 = v92;
      *((void *)v48 + 2) = v50;
      *((void *)v48 + 3) = v83;
      v48[32] = v84;
      *(int64x2_t *)(v48 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = vdupq_n_s64(6uLL);
      *((void *)v48 + 7) = 6;
      *((void *)v48 + 8) = v39;
      *((_DWORD *)v48 + 18) = 3;
      *((_WORD *)v48 + 38) = 256;
      uint64_t v42 = v48 + 80;
      uint64_t v52 = (char *)*a5;
      uint64_t v51 = (char *)a5[1];
      if (v51 != *a5)
      {
        do
        {
          *((_OWORD *)v48 - 5) = *((_OWORD *)v51 - 5);
          long long v53 = *((_OWORD *)v51 - 4);
          long long v54 = *((_OWORD *)v51 - 3);
          long long v55 = *((_OWORD *)v51 - 2);
          *(_OWORD *)(v48 - 18) = *(_OWORD *)(v51 - 18);
          *((_OWORD *)v48 - 3) = v54;
          *((_OWORD *)v48 - 2) = v55;
          *((_OWORD *)v48 - 4) = v53;
          v48 -= 80;
          v51 -= 80;
        }
        while (v51 != v52);
        uint64_t v51 = (char *)*a5;
      }
      *a5 = v48;
      a5[1] = v42;
      a5[2] = v49;
      if (v51) {
        operator delete(v51);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v41 = v92;
      *((void *)v41 + 2) = v93;
      *((void *)v41 + 3) = v83;
      unsigned char v41[32] = v84;
      *(int64x2_t *)(v41 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = vdupq_n_s64(6uLL);
      *((void *)v41 + 7) = 6;
      *((void *)v41 + 8) = v39;
      *((_DWORD *)v41 + 18) = 3;
      *((_WORD *)v41 + 38) = 256;
      uint64_t v42 = v41 + 80;
    }
    a5[1] = v42;
    unint64_t v22 = 6;
  }
  if (*(_DWORD *)(*(void *)(a1 + 64) + 8) == 85)
  {
    uint64_t v56 = *(ZinEngineLayerMirInfo **)(a1 + 264);
    char v57 = *((unsigned char *)v56 + 148);
    uint64_t v58 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(v56);
    char FatTileEnable = MirInfoChannelAssignment::GetFatTileEnable(v58);
    uint64_t v60 = (ZinIrTarget *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a1 + 264));
    uint64_t Lut = ZinIrTarget::GetLut(v60);
    if (ZinMirConvUtils::CanUseHalfWorkUnitMode((uint64_t)a2, a3, 3, v57, FatTileEnable, Lut, 6uLL, 1)
      && v16 > a2[149]
      && v17 <= a2[150])
    {
      unint64_t v62 = *(void *)(a4 + 8);
      unint64_t v63 = *(void *)(a4 + 24);
      uint64_t v87 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1);
      int v88 = v64;
      if (ZinMirConvUtils::IsHalfWUBeneficial((uint64_t)a2, v62, v63, v81, v86, v80, (int *)&v87, v22, 3))
      {
        if (!v85) {
          a6 = v86;
        }
        uint64_t v65 = (char *)a5[2];
        uint64_t v66 = (char *)a5[1];
        if (v66 < v65)
        {
          *(_OWORD *)uint64_t v66 = v92;
          *((void *)v66 + 2) = v93;
          *((void *)v66 + 3) = v83;
          unsigned char v66[32] = v84;
          *(_DWORD *)(v66 + 33) = v87;
          *((_DWORD *)v66 + 9) = *(_DWORD *)((char *)&v87 + 3);
          *(int64x2_t *)(v66 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = vdupq_n_s64(6uLL);
          *((void *)v66 + 7) = 6;
          *((void *)v66 + 8) = a6;
          *((_DWORD *)v66 + 18) = 3;
          *((_WORD *)v66 + 38) = 257;
          uint64_t v67 = v66 + 80;
LABEL_78:
          a5[1] = v67;
          return;
        }
        unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((v66 - (unsigned char *)*a5) >> 4);
        unint64_t v69 = v68 + 1;
        if (v68 + 1 <= 0x333333333333333)
        {
          unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - (unsigned char *)*a5) >> 4);
          if (2 * v70 > v69) {
            unint64_t v69 = 2 * v70;
          }
          if (v70 >= 0x199999999999999) {
            unint64_t v71 = 0x333333333333333;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71) {
            uint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)(a5 + 2), v71);
          }
          else {
            uint64_t v72 = 0;
          }
          uint64_t v73 = &v72[80 * v68];
          uint64_t v74 = &v72[80 * v71];
          *(_OWORD *)uint64_t v73 = v92;
          *((void *)v73 + 2) = v93;
          *((void *)v73 + 3) = v83;
          v73[32] = v84;
          *((_DWORD *)v73 + 9) = *(_DWORD *)((char *)&v87 + 3);
          *(_DWORD *)(v73 + 33) = v87;
          *(int64x2_t *)(v73 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = vdupq_n_s64(6uLL);
          *((void *)v73 + 7) = 6;
          *((void *)v73 + 8) = a6;
          *((_DWORD *)v73 + 18) = 3;
          *((_WORD *)v73 + 38) = 257;
          uint64_t v67 = v73 + 80;
          uint64_t v76 = (char *)*a5;
          uint64_t v75 = (char *)a5[1];
          if (v75 != *a5)
          {
            do
            {
              *((_OWORD *)v73 - 5) = *((_OWORD *)v75 - 5);
              long long v77 = *((_OWORD *)v75 - 4);
              long long v78 = *((_OWORD *)v75 - 3);
              long long v79 = *((_OWORD *)v75 - 2);
              *(_OWORD *)(v73 - 18) = *(_OWORD *)(v75 - 18);
              *((_OWORD *)v73 - 3) = v78;
              *((_OWORD *)v73 - 2) = v79;
              *((_OWORD *)v73 - 4) = v77;
              v73 -= 80;
              v75 -= 80;
            }
            while (v75 != v76);
            uint64_t v75 = (char *)*a5;
          }
          *a5 = v73;
          a5[1] = v67;
          a5[2] = v74;
          if (v75) {
            operator delete(v75);
          }
          goto LABEL_78;
        }
LABEL_81:
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
    }
  }
}

uint64_t NERasterization::EnumerateWorkUnitCandidateForNonPowerOf2(ZinNELayer const*,ZinIrHalParameters const&,ZinTensorFormat,ZinTensorDimensions const&,std::vector<ZinMirWorkUnitShapeCandidate> &,std::optional<unsigned long>)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  uint64_t v13 = *(_DWORD **)(a1 + 264);
  memcpy(__dst, v13 + 30, sizeof(__dst));
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v19, (uint64_t)(v13 + 144));
  int v21 = v13[154];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v22, (uint64_t)(v13 + 156));
  int v24 = v13[166];
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v25, (uint64_t)(v13 + 168));
  uint64_t v14 = *(void *)(a1 + 264);
  if (!*(unsigned char *)(v14 + 150))
  {
    *(void *)(v14 + 12std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = a2;
    *(void *)(v14 + 128) = a3;
    *(void *)(v14 + 136) = a4;
  }
  if (!*(unsigned char *)(v14 + 233)) {
    *(void *)(v14 + 20std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = a5;
  }
  ZinMirL2Config::NE::SetSmallSourceMode(v14 + 120, a6);
  uint64_t CanUseKernelStreamingMode = ZinNEConvLayer::CanUseKernelStreamingMode(a1, a7);
  memcpy((void *)(v14 + 120), __dst, 0x1C0uLL);
  *(_DWORD *)(v14 + 568) = __dst[112];
  if ((_DWORD *)(v14 + 120) == __dst)
  {
    *(_DWORD *)(v14 + 616) = v21;
    *(_DWORD *)(v14 + 664) = v24;
  }
  else
  {
    *(_DWORD *)(v14 + 608) = v20;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v14 + 576), v19[2], 0);
    *(_DWORD *)(v14 + 616) = v21;
    *(_DWORD *)(v14 + 656) = v23;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v14 + 624), v22[2], 0);
    *(_DWORD *)(v14 + 664) = v24;
    *(_DWORD *)(v14 + 704) = v26;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((void *)(v14 + 672), v25[2], 0);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v25);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v19);
  return CanUseKernelStreamingMode;
}

void sub_21124B9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ZinMirL2Config::~ZinMirL2Config((ZinMirL2Config *)va);
  _Unwind_Resume(a1);
}

uint64_t NERasterization::HasWorkUnitWidthOf8(uint64_t a1, unsigned int a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6, char a7, unint64_t a8, unint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v19 = 0;
  int v20 = v21;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  NERasterization::RasterizeWorkUnit((uint64_t)&v20, (void **)&v17, &v16, a5, a4, a3, a8, a6, a9, a8, a2, v15, a7, a10, a11, a1, 0, 0, 0,
    1u,
    0);
  if (v17 == v18)
  {
    uint64_t v13 = 0;
    if (!v17) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  unint64_t v11 = v17 + 80;
  do
  {
    BOOL v12 = *((void *)v11 - 2) != 8 || a9 - *((void *)v11 - 10) == 8;
    uint64_t v13 = !v12;
    if (!v12) {
      break;
    }
    BOOL v12 = v11 == v18;
    v11 += 80;
  }
  while (!v12);
  if (v17)
  {
LABEL_14:
    uint64_t v18 = v17;
    operator delete(v17);
  }
LABEL_15:
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21[0]);
  return v13;
}

void sub_21124BB00(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 64);
  if (v3)
  {
    *(void *)(v1 - 56) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1 - 40, *(void **)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t NERasterization::GetWorkUnitHeightLimit(uint64_t **this, const ZinNELayer *a2)
{
  unint64_t v3 = ((uint64_t (*)(uint64_t **, uint64_t))(*this)[46])(this, 4);
  Hal = ZinIrTarget::GetHal(this[2], (ZinIrTarget *)this[2][20]);
  uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*Hal + 16))(Hal);
  uint64_t v6 = *(void *)(v5 + 592) / *(void *)(v5 + 680);
  if (*((_DWORD *)this[8] + 2) == 90 && (*(_DWORD *)(this[57][8] + 12) & 0xFFFFFFFE) == 2)
  {
    BOOL v7 = (void *)v5;
    if (*(_DWORD *)((*(uint64_t (**)(void, void, void))(*(void *)*this[11] + 32))(*this[11], 0, 0)+ 88) == 3)
    {
      unint64_t v8 = v3 % v7[232];
      BOOL v9 = v6 == 1;
      unint64_t v10 = v7[234];
    }
    else
    {
      unint64_t v8 = v3 % v7[233];
      BOOL v9 = v6 == 1;
      unint64_t v10 = v7[232];
    }
    if (v9 && v8 <= v10) {
      uint64_t v6 = 2;
    }
  }
  if (*((_DWORD *)this[8] + 2) == 93) {
    return 16;
  }
  else {
    return v6;
  }
}

BOOL WorkunitFrequencyInfo::operator<(void *a1, void *a2)
{
  return *a1 < *a2;
}

void GetSlices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void NERasterization::RasterizeWorkUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Slice rasterization failed.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Small source mode SSM/NP2_10 is not supported for HalfWU", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "sh_max has to be less than 9 for HalfWU", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "FP16 input is not supported for HalfWU", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Multicast is not supported for HalfWU", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Multicast is not supported\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "WUStack have to be less than or equal to 3", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "sh_pref has to be 6, if ZinSmallSourceMode is NP2_6\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "sh_pref has to be 10, if ZinSmallSourceMode is NP2_10\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "sh_pref sh_min, and sh_max have to be the same, when any type of small source mode is used\n", a5, a6, a7, a8, 0);
}

uint64_t ZinNMSLayer::Lower(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a1 + 88);
  uint64_t v7 = *v6;
  unint64_t v8 = (ZinIrOpLayer *)v6[1];
  uint64_t v9 = *(void *)(a1 + 64);
  int v10 = *(_DWORD *)(v9 + 32);
  *(void *)(a1 + 248) = 0;
  unint64_t v11 = (uint64_t *)(a1 + 248);
  *(unsigned char *)(a1 + 232) = 1;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 24std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  if (v10 == 2)
  {
    NMSCFMutableDictionaryRef Unit = ZinNMSLayer::FindNMSUnit(a1, v7, (uint64_t)v8, v9, 0);
    *(void *)(a1 + 24std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = NMSUnit;
    *(void *)(a1 + 256) = a1;
    int v13 = 1;
  }
  else
  {
    unint64_t v11 = (uint64_t *)(a1 + 256);
    if (v10 == 1)
    {
      NMSCFMutableDictionaryRef Unit = ZinNMSLayer::FindNMSUnit(a1, v7, (uint64_t)v8, v9, 0);
      *(void *)(a1 + 24std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = NMSUnit;
      *(void *)(a1 + 248) = a1;
    }
    else
    {
      if (v10) {
        ZinAssertImpl("Invalid NMS Type.");
      }
      *(void *)(a1 + 24std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = a1;
      NMSCFMutableDictionaryRef Unit = ZinNMSLayer::FindNMSUnit(a1, v7, (uint64_t)v8, v9, 1);
      *(void *)(a1 + 248) = NMSUnit;
    }
    int v13 = 2;
  }
  *unint64_t v11 = ZinNMSLayer::FindNMSUnit(NMSUnit, v7, (uint64_t)v8, v9, v13);
  uint64_t v14 = *(void *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v8 + 32))(v8, 0, 0) + 56);
  if (*(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)v8 + 32))(v8, 0, 0) + 88) != 3) {
    ZinAssertImpl("NMS: only fp16 is supported for scores.");
  }
  if (v14 == 1)
  {
    uint64_t v15 = a1;
    uint64_t v16 = (ZinIrOpLayerGraph *)a2;
    uint64_t v17 = a3;
    uint64_t v18 = (ZinIrOpLayer *)v7;
    uint64_t v19 = v8;
  }
  else
  {
    if (*(unsigned char *)(v9 + 28))
    {
      ZinNMSLayer::LowerMultiClasses((ZinNMSLayer *)a1, a2, a3, v7, v8);
    }
    Reduction = ZinNMSLayer::GenerateReduction(a1, 2, 2u, v8);
    if (!*(unsigned char *)(a1 + 232)) {
      ZinAssertImpl("NMS: failed to add reduced scores.");
    }
    uint64_t v19 = Reduction;
    uint64_t v15 = a1;
    uint64_t v16 = (ZinIrOpLayerGraph *)a2;
    uint64_t v17 = a3;
    uint64_t v18 = (ZinIrOpLayer *)v7;
  }
  ZinNMSLayer::LowerSingleClass(v15, v16, v17, v18, v19);
  return 0;
}

uint64_t ZinNMSLayer::FindNMSUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  for (unint64_t i = *(uint64_t **)(a2 + 112); i != *(uint64_t **)(a2 + 120); ++i)
  {
    uint64_t result = *i;
    uint64_t v7 = *(void *)(*i + 64);
    if (*(_DWORD *)(v7 + 8) == 69
      && *(_DWORD *)(v7 + 32) == a5
      && *(void *)(*(void *)(result + 88) + 8) == a3
      && *(void *)(v7 + 16) == *(void *)(a4 + 16)
      && *(float *)(v7 + 24) == *(float *)(a4 + 24)
      && (*(unsigned char *)(v7 + 28) != 0) == (*(unsigned char *)(a4 + 28) != 0)
      && (*(unsigned char *)(v7 + 29) != 0) == (*(unsigned char *)(a4 + 29) != 0))
    {
      return result;
    }
  }
  return 0;
}

uint64_t ZinNMSLayer::LowerSingleClass(uint64_t a1, ZinIrOpLayerGraph *a2, uint64_t a3, ZinIrOpLayer *a4, void *a5)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  ZinNMSLayer::LoweringHelper((ZinNMSLayer *)a1, (uint64_t)a2, a3, a4, a5, (const void **)(a1 + 24), (uint64_t)&v38);
  uint64_t v7 = *(void *)(a1 + 240);
  if (v7)
  {
    unint64_t v8 = v38;
    if (!v38) {
      ZinAssertImpl("NMS: Single Class Lowering failed.");
    }
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 32))(v7, 0, 0) + 88) == 10)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      (*(void (**)(_OWORD *__return_ptr, ZinIrOpLayer *, void, void))(*(void *)v8 + 80))(v43, v8, 0, 0);
      int v10 = operator new(0x78uLL);
      long long v36 = (char *)(v10 + 30);
      long long v37 = (char *)(v10 + 30);
      v10[28] = v44;
      long long v11 = v43[6];
      long long v12 = v43[4];
      *((_OWORD *)v10 + 5) = v43[5];
      *((_OWORD *)v10 + 6) = v11;
      long long v13 = v43[1];
      *(_OWORD *)int v10 = v43[0];
      *((_OWORD *)v10 + 1) = v13;
      long long v14 = v43[3];
      *((_OWORD *)v10 + 2) = v43[2];
      *((_OWORD *)v10 + 3) = v14;
      *((_OWORD *)v10 + 4) = v12;
      long long __p = v10;
      (*(void (**)(void, void, void))(**(void **)(a1 + 240) + 32))(*(void *)(a1 + 240), 0, 0);
      ZinBuilder::CreateReinterpretCastLayer(v9, a1 + 192);
    }
    uint64_t v15 = *(uint64_t ***)(a1 + 240);
    memset(v33, 0, sizeof(v33));
    int v34 = 1065353216;
    char v16 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, v15, v8, v33);
    if (*(unsigned char *)(a1 + 232)) {
      char v17 = v16;
    }
    else {
      char v17 = 0;
    }
    *(unsigned char *)(a1 + 232) = v17;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v33);
    BOOL v18 = ZinIrOpLayerGraph::RemoveNode(a2, *(ZinIrOpLayer **)(a1 + 240), 0);
    if (*(unsigned char *)(a1 + 232)) {
      BOOL v19 = v18;
    }
    else {
      BOOL v19 = 0;
    }
    *(unsigned char *)(a1 + 232) = v19;
  }
  int v20 = *(uint64_t ***)(a1 + 248);
  if (v20)
  {
    if (!v39) {
      ZinAssertImpl("NMS: Single Class Lowering failed.");
    }
    memset(v31, 0, sizeof(v31));
    int v32 = 1065353216;
    char v21 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, v20, v39, v31);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v31);
    if ((v21 & 1) == 0) {
      ZinAssertImpl("NMS: moving edge failed for single class.");
    }
    BOOL v22 = ZinIrOpLayerGraph::RemoveNode(a2, *(ZinIrOpLayer **)(a1 + 248), 0);
    if (*(unsigned char *)(a1 + 232)) {
      BOOL v23 = v22;
    }
    else {
      BOOL v23 = 0;
    }
    *(unsigned char *)(a1 + 232) = v23;
  }
  int v24 = *(uint64_t ***)(a1 + 256);
  if (!v24)
  {
    if (*(unsigned char *)(a1 + 232)) {
      goto LABEL_26;
    }
LABEL_30:
    ZinAssertImpl("NMS: there is an error in graph manipulation.");
  }
  if (!v40) {
    ZinAssertImpl("NMS: Single Class Lowering failed.");
  }
  memset(v29, 0, sizeof(v29));
  int v30 = 1065353216;
  char v25 = ZinIrOpLayerGraph::MoveOutgoingEdges(a2, v24, v40, v29);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v29);
  if ((v25 & 1) == 0) {
    ZinAssertImpl("NMS: moving edge failed for single class.");
  }
  BOOL v26 = ZinIrOpLayerGraph::RemoveNode(a2, *(ZinIrOpLayer **)(a1 + 256), 0);
  if (*(unsigned char *)(a1 + 232)) {
    BOOL v27 = v26;
  }
  else {
    BOOL v27 = 0;
  }
  *(unsigned char *)(a1 + 232) = v27;
  if (!v27) {
    goto LABEL_30;
  }
LABEL_26:
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  return 0;
}

void sub_21124C634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ZinIrOpLayer *ZinNMSLayer::GenerateReduction(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v8 = a4[2];
  uint64_t v9 = (uint64_t **)a4[19];
  uint64_t v10 = (*(uint64_t (**)(void *, void, void))(*a4 + 32))(a4, 0, 0);
  if (a3 >= 5) {
    std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
  }
  uint64_t v11 = v10;
  (*(void (**)(void **__return_ptr, void *, void, void))(*a4 + 80))(v27, a4, 0, 0);
  long long v12 = (char *)operator new(0x78uLL);
  long long __p = v12;
  char v25 = v12 + 120;
  *((_DWORD *)v12 + 28) = v34;
  long long v13 = v33;
  long long v14 = v31;
  *((_OWORD *)v12 + 5) = v32;
  *((_OWORD *)v12 + 6) = v13;
  long long v15 = v28;
  *(_OWORD *)long long v12 = *(_OWORD *)v27;
  *((_OWORD *)v12 + 1) = v15;
  long long v16 = v30;
  *((_OWORD *)v12 + 2) = v29;
  *((_OWORD *)v12 + 3) = v16;
  *((_OWORD *)v12 + 4) = v14;
  uint64_t v24 = (uint64_t)(v12 + 120);
  char v17 = (ZinIrOpLayer *)ZinBuilder::CreateReduction(v8, a1 + 192, &__p, *(_DWORD *)(v11 + 88), a2, 1 << a3, 0, 0, 0, 0);
  if (__p)
  {
    uint64_t v24 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v26 = a1;
  long long __p = &v26;
  uint64_t v24 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(v27, &__p);
  BOOL v18 = ZinIrOpLayerGraph::AddNode(v9, v17, (ZinIrOpLayer ***)v27);
  if (*(unsigned char *)(a1 + 232)) {
    BOOL v19 = v18;
  }
  else {
    BOOL v19 = 0;
  }
  *(unsigned char *)(a1 + 232) = v19;
  v27[0] = &unk_26C359A08;
  if (v27[1])
  {
    *(void **)&long long v28 = v27[1];
    operator delete(v27[1]);
  }
  char v20 = ZinIrOpLayerGraph::AddEdge((uint64_t)v9, (uint64_t)a4, (uint64_t)v17, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (*(unsigned char *)(a1 + 232)) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  *(unsigned char *)(a1 + 232) = v21;
  return v17;
}

void sub_21124C914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinNMSLayer::LowerMultiClasses(ZinNMSLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v13 = *((void *)a1 + 2);
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(void *)((*(uint64_t (**)(void *, void, void))(*a5 + 32))(a5, 0, 0) + 56);
  Reduction = ZinNMSLayer::GenerateReduction((uint64_t)a1, 2, 2u, a5);
  ZinNMSLayer::GenerateEW2((uint64_t)a1, 16, (uint64_t)a5, (uint64_t)Reduction);
  std::string::basic_string[abi:ne180100]<0>(&__p, "nms_disambiguation_vector");
  DisambiguationVector = (ZinIrOpLayer *)ZinConstantTensorManager::CreateDisambiguationVector(v9, v10, (uint64_t)&__p, a2, v13);
  if (v15 < 0) {
    operator delete(__p);
  }
  ZinNMSLayer::GenerateTransposeCW(a1, DisambiguationVector);
}

void sub_21124D83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50)
{
  if (__p) {
    operator delete(__p);
  }
  if (a47) {
    operator delete(a47);
  }
  if (a50) {
    operator delete(a50);
  }
  uint64_t v52 = *(void **)(v50 - 128);
  if (v52)
  {
    *(void *)(v50 - 12std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v52;
    operator delete(v52);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_21124DAC8()
{
  uint64_t v1 = *(void *)(v0 - 176);
  if (v1)
  {
    *(void *)(v0 - 168) = v1;
    JUMPOUT(0x21124DAD8);
  }
  JUMPOUT(0x21124DA60);
}

void ZinNMSLayer::LoweringHelper(ZinNMSLayer *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ZinIrOpLayer *a4@<X3>, void *a5@<X4>, const void **a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 16);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v75 = v11;
  (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)a4 + 32))(a4, 0, 0);
  unint64_t v12 = *(void *)(*((void *)a1 + 8) + 16);
  uint64_t v76 = (*(uint64_t (**)(void *, void, void))(*a5 + 32))(a5, 0, 0);
  BOOL v94 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v91 = 0;
  long long v92 = 0;
  uint64_t v93 = 0;
  long long __p = 0;
  int v88 = 0;
  unint64_t v90 = 0;
  unint64_t v86 = 0;
  std::vector<unsigned int> __src = 0;
  unint64_t v87 = 0;
  std::vector<ZinIrOpLayer *>::reserve(&v88, v12);
  std::vector<ZinIrOpLayer *>::reserve((void **)&v94, v12);
  std::vector<ZinIrOpLayer *>::reserve((void **)&v91, v12);
  std::vector<ZinIrOpLayer *>::reserve(&__src, v12);
  if (*((void *)a1 + 30) || *((void *)a1 + 31))
  {
    BOOL v13 = 1;
  }
  else
  {
    if (*(uint64_t *)(v76 + 56) < 2)
    {
      BOOL v77 = 0;
      if (!v12) {
        goto LABEL_122;
      }
      goto LABEL_7;
    }
    BOOL v13 = *(unsigned char *)(*((void *)a1 + 8) + 29) == 0;
  }
  BOOL v77 = v13;
  if (!v12) {
    goto LABEL_122;
  }
LABEL_7:
  uint64_t __val = 0;
  unint64_t v79 = v12 - 1;
  do
  {
    if (*((char *)a6 + 23) >= 0) {
      size_t v14 = *((unsigned __int8 *)a6 + 23);
    }
    else {
      size_t v14 = (size_t)a6[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v97, v14 + 1);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v15 = &v97;
    }
    else {
      char v15 = (std::string *)v97.__r_.__value_.__r.__words[0];
    }
    if (v14)
    {
      if (*((char *)a6 + 23) >= 0) {
        uint64_t v16 = a6;
      }
      else {
        uint64_t v16 = *a6;
      }
      memmove(v15, v16, v14);
    }
    *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 95;
    std::to_string(&v83, __val);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v17 = &v83;
    }
    else {
      char v17 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v83.__r_.__value_.__l.__size_;
    }
    BOOL v19 = std::string::append(&v97, (const std::string::value_type *)v17, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    char v21 = std::string::append(&v82, "_", 1uLL);
    std::string v84 = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    Reduction = ZinNMSLayer::GenerateReduction((uint64_t)a1, 2, 4u, a5);
    uint64_t v23 = (uint64_t)Reduction;
    uint64_t v24 = (char *)__p;
    if ((unint64_t)__p >= v90)
    {
      int64_t v26 = ((unsigned char *)__p - (unsigned char *)v88) >> 3;
      if ((unint64_t)(v26 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v27 = (uint64_t)(v90 - (void)v88) >> 2;
      if (v27 <= v26 + 1) {
        unint64_t v27 = v26 + 1;
      }
      if (v90 - (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v90, v28);
      }
      else {
        long long v29 = 0;
      }
      long long v30 = (uint64_t *)&v29[8 * v26];
      *long long v30 = v23;
      char v25 = v30 + 1;
      long long v31 = (char *)__p;
      long long v32 = (char *)v88;
      if (__p != v88)
      {
        do
        {
          uint64_t v33 = *((void *)v31 - 1);
          v31 -= 8;
          *--long long v30 = v33;
        }
        while (v31 != v32);
        long long v31 = (char *)v88;
      }
      int v88 = v30;
      long long __p = v25;
      unint64_t v90 = (unint64_t)&v29[8 * v28];
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *(void *)long long __p = Reduction;
      char v25 = v24 + 8;
    }
    long long __p = v25;
    if (v77)
    {
      MaxScoreMasuint64_t k = ZinNMSLayer::GenerateMaxScoreMask((uint64_t)a1, a2, a3, v23, (uint64_t)a5, (const void **)&v84.__r_.__value_.__l.__data_);
      uint64_t v35 = (ZinIrOpLayer *)MaxScoreMask;
      long long v36 = (char *)v86;
      if ((unint64_t)v86 >= v87)
      {
        int64_t v38 = ((unsigned char *)v86 - (unsigned char *)__src) >> 3;
        if ((unint64_t)(v38 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v39 = (uint64_t)(v87 - (void)__src) >> 2;
        if (v39 <= v38 + 1) {
          unint64_t v39 = v38 + 1;
        }
        if (v87 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v39;
        }
        if (v40) {
          uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v87, v40);
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v42 = (ZinIrOpLayer **)&v41[8 * v38];
        void *v42 = v35;
        long long v37 = v42 + 1;
        unint64_t v43 = (char *)v86;
        int v44 = (char *)__src;
        if (v86 != __src)
        {
          do
          {
            uint64_t v45 = (ZinIrOpLayer *)*((void *)v43 - 1);
            v43 -= 8;
            *--uint64_t v42 = v45;
          }
          while (v43 != v44);
          unint64_t v43 = (char *)__src;
        }
        std::vector<unsigned int> __src = v42;
        unint64_t v86 = v37;
        unint64_t v87 = (unint64_t)&v41[8 * v40];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *(void *)unint64_t v86 = MaxScoreMask;
        long long v37 = v36 + 8;
      }
      unint64_t v86 = v37;
    }
    else
    {
      uint64_t v35 = 0;
    }
    if (*((void *)a1 + 30))
    {
      IndexFromMasuint64_t k = ZinNMSLayer::GenerateIndexFromMask((uint64_t)a1, a2, a3, (uint64_t)v35);
      uint64_t v47 = IndexFromMask;
      uint64_t v48 = v95;
      if (v95 >= v96)
      {
        uint64_t v50 = (v95 - v94) >> 3;
        if ((unint64_t)(v50 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v51 = (v96 - v94) >> 2;
        if (v51 <= v50 + 1) {
          unint64_t v51 = v50 + 1;
        }
        if ((unint64_t)(v96 - v94) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v52) {
          long long v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v96, v52);
        }
        else {
          long long v53 = 0;
        }
        long long v54 = (ZinIrOpLayer **)&v53[8 * v50];
        ZinIrTarget *v54 = v47;
        uint64_t v49 = (char *)(v54 + 1);
        uint64_t v56 = v94;
        long long v55 = v95;
        if (v95 != v94)
        {
          do
          {
            char v57 = (ZinIrOpLayer *)*((void *)v55 - 1);
            v55 -= 8;
            *--long long v54 = v57;
          }
          while (v55 != v56);
          long long v55 = v94;
        }
        BOOL v94 = (char *)v54;
        uint64_t v95 = v49;
        uint64_t v96 = &v53[8 * v52];
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        *(void *)uint64_t v95 = IndexFromMask;
        uint64_t v49 = v48 + 8;
      }
      uint64_t v95 = v49;
    }
    if (*((void *)a1 + 31))
    {
      uint64_t MaskedValueOverWidthDim = ZinNMSLayer::GenerateMaskedValueOverWidthDim(a1, a4, v35);
      uint64_t v59 = MaskedValueOverWidthDim;
      uint64_t v60 = v92;
      if (v92 >= v93)
      {
        uint64_t v62 = v92 - v91;
        if ((unint64_t)(v62 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v63 = ((char *)v93 - (char *)v91) >> 2;
        if (v63 <= v62 + 1) {
          unint64_t v63 = v62 + 1;
        }
        if ((unint64_t)((char *)v93 - (char *)v91) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64) {
          uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v93, v64);
        }
        else {
          uint64_t v65 = 0;
        }
        uint64_t v66 = (uint64_t *)&v65[8 * v62];
        *uint64_t v66 = v59;
        unint64_t v61 = v66 + 1;
        unint64_t v68 = v91;
        uint64_t v67 = v92;
        if (v92 != v91)
        {
          do
          {
            uint64_t v69 = *--v67;
            *--uint64_t v66 = v69;
          }
          while (v67 != v68);
          uint64_t v67 = v91;
        }
        uint64_t v91 = v66;
        long long v92 = v61;
        uint64_t v93 = (uint64_t *)&v65[8 * v64];
        if (v67) {
          operator delete(v67);
        }
      }
      else
      {
        *long long v92 = MaskedValueOverWidthDim;
        unint64_t v61 = v60 + 1;
      }
      long long v92 = v61;
    }
    if (__val != v79)
    {
      if (!v35) {
        ZinNMSLayer::GenerateMaxScoreMask((uint64_t)a1, a2, a3, v23, (uint64_t)a5, (const void **)&v84.__r_.__value_.__l.__data_);
      }
      if (*((char *)a6 + 23) >= 0) {
        size_t v70 = *((unsigned __int8 *)a6 + 23);
      }
      else {
        size_t v70 = (size_t)a6[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v97, v70 + 6);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v71 = &v97;
      }
      else {
        unint64_t v71 = (std::string *)v97.__r_.__value_.__r.__words[0];
      }
      if (v70)
      {
        if (*((char *)a6 + 23) >= 0) {
          uint64_t v72 = a6;
        }
        else {
          uint64_t v72 = *a6;
        }
        memmove(v71, v72, v70);
      }
      strcpy((char *)v71 + v70, "_boxes");
      ZinNMSLayer::GenerateArea((uint64_t)a1, a2, (uint64_t)a4, (const void **)&v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
  }
  while (__val++ != v79);
LABEL_122:
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)a7 = 0u;
  if ((void **)(a7 + 24) != &__src) {
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a7 + 24), (char *)__src, (uint64_t)v86, ((unsigned char *)v86 - (unsigned char *)__src) >> 3);
  }
  if (*((void *)a1 + 32) || *(uint64_t *)(v76 + 56) >= 2 && !*(unsigned char *)(*((void *)a1 + 8) + 29)) {
    *(void *)(a7 + 16) = ZinNMSLayer::GenerateConcat((uint64_t)a1, (uint64_t)&v88, 4);
  }
  if (*((void *)a1 + 30)) {
    *(void *)a7 = ZinNMSLayer::GenerateConcat((uint64_t)a1, (uint64_t)&v94, 4);
  }
  if (*((void *)a1 + 31)) {
    *(void *)(a7 + 8) = ZinNMSLayer::GenerateConcat((uint64_t)a1, (uint64_t)&v91, 4);
  }
  if (__src)
  {
    unint64_t v86 = __src;
    operator delete(__src);
  }
  if (v88)
  {
    long long __p = v88;
    operator delete(v88);
  }
  if (v91)
  {
    long long v92 = v91;
    operator delete(v91);
  }
  if (v94)
  {
    uint64_t v95 = v94;
    operator delete(v94);
  }
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
}

void sub_21124EB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinNMSLayer::GenerateMaxScoreMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6)
{
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a5 + 32))(a5, 0, 0);
  unint64_t v13 = v12[9];
  uint64_t v14 = *(void *)(a3 + 8);
  if (*((char *)a6 + 23) >= 0) {
    size_t v15 = *((unsigned __int8 *)a6 + 23);
  }
  else {
    size_t v15 = (size_t)a6[1];
  }
  uint64_t v16 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v15 + 25);
  if (SBYTE7(v29) < 0) {
    uint64_t v16 = (void **)__p[0];
  }
  if (v15)
  {
    if (*((char *)a6 + 23) >= 0) {
      char v17 = a6;
    }
    else {
      char v17 = *a6;
    }
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "nms_disambiguation_vector");
  uint64_t DisambiguationVector = ZinConstantTensorManager::CreateDisambiguationVector(v14, v13, (uint64_t)__p, a2, v11);
  if (SBYTE7(v29) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v20 = v12[6];
  uint64_t v19 = v12[7];
  if (v20 > 1 || v19 >= 2)
  {
    *(_OWORD *)long long __p = 0u;
    long long v29 = 0u;
    int v30 = 1065353216;
    if (v20 >= 2)
    {
      int v27 = 0;
      long long v31 = &v27;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)__p, &v27, (uint64_t)&std::piecewise_construct, &v31)[3] = v20;
      uint64_t v19 = v12[7];
    }
    if (v19 >= 2)
    {
      int v27 = 2;
      long long v31 = &v27;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)__p, &v27, (uint64_t)&std::piecewise_construct, &v31)[3] = v19;
    }
    ZinNMSLayer::GenerateBroadcast(a1, DisambiguationVector);
  }
  uint64_t EW2 = ZinNMSLayer::GenerateEW2(a1, 16, a5, a4);
  uint64_t v23 = (void *)ZinNMSLayer::GenerateEW2(a1, 2, EW2, DisambiguationVector);
  Reduction = ZinNMSLayer::GenerateReduction(a1, 2, 4u, v23);
  return ZinNMSLayer::GenerateEW2(a1, 16, (uint64_t)v23, (uint64_t)Reduction);
}

void sub_21124EFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

ZinIrOpLayer *ZinNMSLayer::GenerateIndexFromMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    ZinAssertImpl("NMS: mask==nullptr for GenerateIndexFromMask.");
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a4 + 32))(a4, 0, 0);
  std::to_string((std::string *)v22, v9[9]);
  unint64_t v10 = std::string::insert((std::string *)v22, 0, "const_index_", 0xCuLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((v22[23] & 0x80000000) != 0) {
    operator delete(*(void **)v22);
  }
  uint64_t v12 = *(void *)(a1 + 240);
  if (v12) {
    int v13 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void, void))(*(void *)v12 + 32))(v12, 0, 0) + 88);
  }
  else {
    int v13 = 3;
  }
  uint64_t ConstIndexVector = ZinConstantTensorManager::CreateConstIndexVector(*(void *)(a3 + 8), v9[9], (uint64_t)__p, a2, v8, a1, v13, 3);
  uint64_t v16 = v9[6];
  uint64_t v15 = v9[7];
  if (v16 > 1 || v15 >= 2)
  {
    memset(v22, 0, sizeof(v22));
    int v23 = 1065353216;
    if (v16 >= 2)
    {
      int v21 = 0;
      int64_t v26 = &v21;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)v22, &v21, (uint64_t)&std::piecewise_construct, &v26)[3] = v16;
      uint64_t v15 = v9[7];
    }
    if (v15 >= 2)
    {
      int v21 = 2;
      int64_t v26 = &v21;
      std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>((uint64_t)v22, &v21, (uint64_t)&std::piecewise_construct, &v26)[3] = v15;
    }
    ZinNMSLayer::GenerateBroadcast(a1, ConstIndexVector);
  }
  uint64_t EW2 = (void *)ZinNMSLayer::GenerateEW2(a1, 2, a4, ConstIndexVector);
  Reduction = ZinNMSLayer::GenerateReduction(a1, 2, 4u, EW2);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  return Reduction;
}

void sub_21124F20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_21124F24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    JUMPOUT(0x21124F240);
  }
  JUMPOUT(0x21124F244);
}

uint64_t ZinNMSLayer::GenerateMaskedValueOverWidthDim(ZinNMSLayer *this, ZinIrOpLayer *a2, ZinIrOpLayer *a3)
{
  if (a2)
  {
    if (a3)
    {
      (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
      ZinNMSLayer::GenerateTransposeHC(this, a3);
    }
    ZinAssertImpl("NMS: mask==nullptr for GenerateMaskedValueOverWidthDim.");
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinNMSLayer::GenerateMaskedValueOverWidthDim();
  }
  return 0;
}

void sub_21124F3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ZinNMSLayer::GenerateArea(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  uint64_t v18 = *(void *)(v6 + 48);
  uint64_t v19 = 2;
  long long v20 = *(_OWORD *)(v6 + 64);
  uint64_t v21 = 1;
  if (*((char *)a4 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v7 = (size_t)a4[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 5);
  if (v11 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (v7)
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = *a4;
    }
    memmove(p_p, v9, v7);
  }
  strcpy((char *)p_p + v7, "_x1y1");
  (*(void (**)(uint64_t, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  long long v12 = 0u;
  long long v13 = 0u;
  int64x2_t v15 = vdupq_n_s64(1uLL);
  int64x2_t v16 = v15;
  uint64_t v14 = 0;
  uint64_t v17 = 1;
  ZinBuilder::CreateView();
}

void sub_21124FB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinNMSLayer::GenerateBroadcast(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)a2 + 80))(v11, a2, 0, 0);
  unint64_t v3 = (char *)operator new(0x78uLL);
  long long __p = v3;
  unint64_t v10 = v3 + 120;
  *((_DWORD *)v3 + 28) = v18;
  long long v4 = v17;
  long long v5 = v15;
  *((_OWORD *)v3 + 5) = v16;
  *((_OWORD *)v3 + 6) = v4;
  long long v6 = v12;
  *(_OWORD *)unint64_t v3 = *(_OWORD *)v11;
  *((_OWORD *)v3 + 1) = v6;
  long long v7 = v14;
  *((_OWORD *)v3 + 2) = v13;
  *((_OWORD *)v3 + 3) = v7;
  *((_OWORD *)v3 + 4) = v5;
  uint64_t v9 = v3 + 120;
  ZinBuilder::CreateBroadcast();
}

void sub_21124FE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinNMSLayer::GenerateEW2(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v7 = (int64x2_t *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  uint64_t v8 = (int64x2_t *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)a4 + 32))(a4, 0, 0);
  if ((a2 - 9) >= 7 && a2 != 3 && a2)
  {
    int8x16_t v10 = vbslq_s8((int8x16_t)vcgtq_s64(v7[4], v8[4]), (int8x16_t)v7[4], (int8x16_t)v8[4]);
    int8x16_t v23 = vbslq_s8((int8x16_t)vcgtq_s64(v7[3], v8[3]), (int8x16_t)v7[3], (int8x16_t)v8[3]);
    int8x16_t v24 = v10;
    uint64_t v11 = v7[5].i64[0];
    if (v11 <= v8[5].i64[0]) {
      uint64_t v11 = v8[5].i64[0];
    }
    uint64_t v25 = v11;
    (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)a3 + 80))(v26, a3, 0, 0);
    (*(void (**)(void *__return_ptr, uint64_t, void, void))(*(void *)a4 + 80))((void *)v33 + 1, a4, 0, 0);
    long long v12 = operator new(0xF0uLL);
    long long __p = v12;
    uint64_t v22 = v12 + 15;
    long long v13 = v34[0];
    v12[12] = v33[5];
    v12[13] = v13;
    *(_OWORD *)((char *)v12 + 22std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_OWORD *)((char *)v34 + 12);
    long long v14 = v33[2];
    v12[8] = v33[1];
    v12[9] = v14;
    long long v15 = v33[4];
    void v12[10] = v33[3];
    v12[11] = v15;
    long long v16 = v31;
    v12[4] = v30;
    v12[5] = v16;
    long long v17 = v33[0];
    v12[6] = v32;
    v12[7] = v17;
    long long v18 = v27;
    *long long v12 = *(_OWORD *)v26;
    v12[1] = v18;
    long long v19 = v29;
    void v12[2] = v28;
    v12[3] = v19;
    uint64_t v21 = v12 + 15;
    ZinBuilder::CreateElementWiseLayer();
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinNMSLayer::GenerateEW2();
  }
  return 0;
}

void sub_211250198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinNMSLayer::GenerateTransposeHC(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  uint64_t v2 = operator new(0x10uLL);
  unint64_t v3 = v2;
  _OWORD *v2 = xmmword_211ED39B0;
  long long v4 = v2 + 1;
  long long v5 = v2 + 1;
  ZinBuilder::CreateTranspose();
}

void sub_211250388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinNMSLayer::GenerateConcat(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  uint64_t v5 = v4 >> 3;
  if (!(v4 >> 3)) {
    return 0;
  }
  if (v5 != 1)
  {
    uint64_t v9 = (void *)(*(uint64_t (**)(void, void, void))(*(void *)*v3 + 32))(*v3, 0, 0);
    if (v4 >= 9)
    {
      uint64_t v10 = 2;
      if (v5 > 2) {
        uint64_t v10 = v4 >> 3;
      }
      uint64_t v11 = 8 * v10;
      uint64_t v12 = 8;
      do
      {
        uint64_t v13 = (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)a2 + v12) + 32))(*(void *)(*(void *)a2 + v12), 0, 0);
        if (!ZinTensorDimensionsEqual(v9 + 6, (void *)(v13 + 48))) {
          ZinAssertImpl("NMS: concat input shapes are different.");
        }
        v12 += 8;
      }
      while (v11 != v12);
    }
    int64x2_t v47 = vdupq_n_s64(1uLL);
    int64x2_t v48 = v47;
    uint64_t v49 = 1;
    switch(a3)
    {
      case 0:
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v14 = v9[7];
        uint64_t v15 = v9[8];
        uint64_t v16 = v9[9];
        uint64_t v17 = v9[10];
        v47.i64[0] = v9[6] * v5;
        uint64_t v39 = 1;
        goto LABEL_17;
      case 1:
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v39 = 0;
        uint64_t v14 = v9[7];
        uint64_t v15 = v9[8];
        uint64_t v16 = v9[9];
        uint64_t v17 = v9[10] * v5;
        v47.i64[0] = v9[6];
        uint64_t v40 = 1;
        uint64_t v41 = 0;
        goto LABEL_17;
      case 2:
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v14 = v9[7] * v5;
        uint64_t v15 = v9[8];
        uint64_t v16 = v9[9];
        uint64_t v17 = v9[10];
        v47.i64[0] = v9[6];
        uint64_t v41 = 1;
        goto LABEL_17;
      case 3:
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v39 = 0;
        uint64_t v14 = v9[7];
        uint64_t v16 = v9[9];
        uint64_t v15 = v9[8] * v5;
        uint64_t v17 = v9[10];
        v47.i64[0] = v9[6];
        uint64_t v42 = 1;
        uint64_t v43 = 0;
        goto LABEL_17;
      case 4:
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v14 = v9[7];
        uint64_t v15 = v9[8];
        uint64_t v16 = v9[9] * v5;
        uint64_t v17 = v9[10];
        v47.i64[0] = v9[6];
        uint64_t v43 = 1;
LABEL_17:
        v47.i64[1] = v14;
        v48.i64[0] = v15;
        v48.i64[1] = v16;
        uint64_t v49 = v17;
        break;
      case 5:
        ZinAssertImpl("Invalid axis to concat.");
      default:
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v39 = 0;
        break;
    }
    long long __p = 0;
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    std::vector<ZinIrTensor::ViewOriginAndStep>::reserve(&__p, v4 >> 3);
    if (v4 >= 1)
    {
      uint64_t v18 = 0;
      if (v5 <= 1) {
        uint64_t v5 = 1;
      }
      long long v19 = (uint64_t *)v45;
      int64x2_t v38 = vdupq_n_s64(1uLL);
      do
      {
        uint64_t v20 = v18 * v39;
        uint64_t v21 = v18 * v41;
        uint64_t v22 = v18 * v42;
        uint64_t v23 = v18 * v43;
        uint64_t v24 = v18 * v40;
        if (v19 >= (uint64_t *)v46)
        {
          uint64_t v25 = (uint64_t *)__p;
          unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v19 - (unsigned char *)__p) >> 4);
          unint64_t v27 = v26 + 1;
          if (v26 + 1 > 0x333333333333333) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((v46 - (unsigned char *)__p) >> 4) > v27) {
            unint64_t v27 = 0x999999999999999ALL * ((v46 - (unsigned char *)__p) >> 4);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v46 - (unsigned char *)__p) >> 4) >= 0x199999999999999) {
            unint64_t v28 = 0x333333333333333;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28)
          {
            long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>((uint64_t)&v46, v28);
            uint64_t v25 = (uint64_t *)__p;
            long long v19 = (uint64_t *)v45;
          }
          else
          {
            long long v29 = 0;
          }
          long long v30 = &v29[80 * v26];
          *(void *)long long v30 = v20;
          *((void *)v30 + 1) = v21;
          *((void *)v30 + 2) = v22;
          *((void *)v30 + 3) = v23;
          *((void *)v30 + 4) = v24;
          int64x2_t v31 = vdupq_n_s64(1uLL);
          *(int64x2_t *)(v30 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v31;
          *(int64x2_t *)(v30 + 56) = v31;
          *((void *)v30 + 9) = 1;
          if (v19 == v25)
          {
            long long v36 = &v29[80 * v26];
          }
          else
          {
            long long v32 = &v29[80 * v26];
            do
            {
              *((_OWORD *)v32 - 5) = *((_OWORD *)v19 - 5);
              long long v33 = *((_OWORD *)v19 - 4);
              long long v34 = *((_OWORD *)v19 - 3);
              long long v35 = *((_OWORD *)v19 - 1);
              long long v36 = v32 - 80;
              *((_OWORD *)v32 - 2) = *((_OWORD *)v19 - 2);
              *((_OWORD *)v32 - 1) = v35;
              *((_OWORD *)v32 - 4) = v33;
              *((_OWORD *)v32 - 3) = v34;
              v19 -= 10;
              v32 -= 80;
            }
            while (v19 != v25);
          }
          long long v19 = (uint64_t *)(v30 + 80);
          long long __p = v36;
          uint64_t v45 = v30 + 80;
          unint64_t v46 = &v29[80 * v28];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *long long v19 = v20;
          v19[1] = v21;
          _OWORD v19[2] = v22;
          void v19[3] = v23;
          void v19[4] = v24;
          *(int64x2_t *)(v19 + 5) = v38;
          *(int64x2_t *)(v19 + 7) = v38;
          v19[9] = 1;
          v19 += 10;
        }
        uint64_t v45 = (char *)v19;
        ++v18;
      }
      while (v18 != v5);
    }
    ZinBuilder::CreateConcat();
  }
  return *v3;
}

void sub_211250934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void ZinNMSLayer::GenerateTransposeCW(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  v23[2] = *MEMORY[0x263EF8340];
  (*(void (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  long long __p = 0;
  uint64_t v22 = 0;
  v23[0] = 0;
  unint64_t v3 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v23, 1uLL);
  uint64_t v4 = &v3[8 * v2];
  *(void *)unint64_t v3 = 0x400000002;
  uint64_t v5 = v3 + 8;
  long long v7 = (char *)__p;
  uint64_t v6 = v22;
  uint64_t v8 = v3;
  if (v22 != __p)
  {
    do
    {
      uint64_t v9 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v8 - 1) = v9;
      v8 -= 8;
    }
    while (v6 != v7);
    uint64_t v6 = (char *)__p;
  }
  long long __p = v8;
  uint64_t v22 = v3 + 8;
  v23[0] = &v3[8 * v2];
  if (v6)
  {
    operator delete(v6);
    uint64_t v4 = (char *)v23[0];
  }
  uint64_t v22 = v3 + 8;
  if (v5 >= v4)
  {
    uint64_t v11 = (v5 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - (unsigned char *)__p;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v23, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = 0x200000004;
    uint64_t v10 = v16 + 8;
    long long v19 = (char *)__p;
    uint64_t v18 = v22;
    if (v22 != __p)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)__p;
    }
    long long __p = v16;
    uint64_t v22 = v10;
    v23[0] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *((void *)v3 + 1) = 0x200000004;
    uint64_t v10 = v3 + 16;
  }
  uint64_t v22 = v10;
  ZinBuilder::CreateTranspose();
}

void sub_211250C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinNMSLayer::GenerateReshapeCtoW(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  long long v5 = *(_OWORD *)(v4 + 64);
  long long v11 = *(_OWORD *)(v4 + 48);
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 72) * *(void *)(v4 + 56);
  *((void *)&v11 + 1) = 1;
  *((void *)&v12 + 1) = v7;
  uint64_t v13 = v6;
  uint64_t v8 = operator new(0x14uLL);
  v9[1] = v8 + 5;
  void v9[2] = v8 + 5;
  void v8[4] = 4;
  *(_OWORD *)uint64_t v8 = xmmword_211EFE640;
  v9[0] = v8;
  DimensionOrderHint::DimensionOrderHint(&__p, v9);
  ZinBuilder::CreateReshape(v3, (uint64_t)this + 192);
}

void sub_211250EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinNMSLayer::GenerateReshapeHtoW(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  long long v5 = *(_OWORD *)(v4 + 64);
  long long v11 = *(_OWORD *)(v4 + 48);
  long long v12 = v5;
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 72) * *(void *)(v4 + 64);
  *(void *)&long long v12 = 1;
  *((void *)&v12 + 1) = v7;
  uint64_t v13 = v6;
  uint64_t v8 = operator new(0x14uLL);
  v9[1] = v8 + 5;
  void v9[2] = v8 + 5;
  void v8[4] = 4;
  *(_OWORD *)uint64_t v8 = xmmword_211EFE640;
  v9[0] = v8;
  DimensionOrderHint::DimensionOrderHint(&__p, v9);
  ZinBuilder::CreateReshape(v3, (uint64_t)this + 192);
}

void sub_211251100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinNMSLayer::GenerateReshapeHtoC(ZinNMSLayer *this, ZinIrOpLayer *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = (*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a2 + 32))(a2, 0, 0);
  long long v5 = *(_OWORD *)(v4 + 64);
  long long v9 = *(_OWORD *)(v4 + 48);
  long long v10 = v5;
  uint64_t v11 = *(void *)(v4 + 80);
  *((void *)&v9 + 1) = *(void *)(v4 + 64) * *(void *)(v4 + 56);
  *(void *)&long long v10 = 1;
  uint64_t v6 = operator new(0x14uLL);
  v7[1] = v6 + 5;
  v7[2] = v6 + 5;
  _DWORD v6[4] = 4;
  *(_OWORD *)uint64_t v6 = xmmword_211EFE640;
  v7[0] = v6;
  DimensionOrderHint::DimensionOrderHint(&__p, v7);
  ZinBuilder::CreateReshape(v3, (uint64_t)this + 192);
}

void sub_211251348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ZinNMSLayer::Clone()
{
}

void sub_2112514E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, _Unwind_Exception *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ZinDropoutLayer::Clone(&a12, a1, a2, (uint64_t)&a13);
  uint64_t v16 = a13;
  MEMORY[0x21667D3C0](v13, 0x10B3C406F529117);
  _Unwind_Resume(v16);
}

uint64_t ZinNMSLayer::ComputeOutputDimensionsUtil(void *a1, void *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a6 == 2)
  {
    if (a4)
    {
LABEL_8:
      uint64_t v7 = a1[1];
LABEL_10:
      uint64_t v6 = 1;
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v6 = 1;
    uint64_t v7 = 1;
    goto LABEL_11;
  }
  if (a6 != 1)
  {
    if (a5) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (!a5)
  {
    uint64_t v7 = 4;
    goto LABEL_10;
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = 4;
LABEL_11:
  *a2 = *a1;
  a2[1] = v7;
  a2[2] = v6;
  a2[3] = a3;
  a2[4] = 1;
  return 0;
}

uint64_t ZinNMSLayer::ComputeOutputDimensions(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(v4 + 16);
  int v6 = *(_DWORD *)(v4 + 32);
  if (v6 == 2)
  {
    if (*(unsigned char *)(v4 + 28))
    {
LABEL_8:
      uint64_t v9 = *(void *)(v3 + 48);
LABEL_10:
      uint64_t v8 = 1;
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v8 = 1;
    uint64_t v9 = 1;
    goto LABEL_11;
  }
  int v7 = *(unsigned __int8 *)(v4 + 29);
  if (v6 != 1)
  {
    if (v7) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (!v7)
  {
    uint64_t v9 = 4;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v3 + 48);
  uint64_t v9 = 4;
LABEL_11:
  *a3 = *(void *)(v3 + 40);
  a3[1] = v9;
  a3[2] = v8;
  a3[3] = v5;
  a3[4] = 1;
  return 0;
}

void *ZinNMSLayer::OpCodeKindToString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "NMS");
}

uint64_t ZinNMSLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_2112517A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ZinNMSLayer::NeedsTypeCastToWrite(uint64_t a1, int a2)
{
  return a2 != 10 && !IsPrimaryFormat(a2);
}

void ZinNMSLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1] - *a2;
  if (v4 != 240) {
    ZinAssertImpl("NMS layer must have 2 inputs. Input Count: %zd", 0xEEEEEEEEEEEEEEEFLL * (v4 >> 3));
  }
  if (*(_DWORD *)v3 != 3 || *(_DWORD *)(v3 + 120) != 3) {
    ZinAssertImpl("Input tensors must have type of Float 16.");
  }
  uint64_t v9 = *((void *)a1 + 8);
  int v10 = *(_DWORD *)(v9 + 32);
  int v11 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, void, void))(*(void *)a1 + 32))(a1, 0, 0) + 88);
  if (v11 != 3 && v11 != 10) {
    ZinAssertImpl("NMS output format must be either Float 16 or UInt 16.");
  }
  if (v11 == 10 && v10 != 0) {
    ZinAssertImpl("Output type can be UInt16 only when NMS type is Indices.");
  }
  float v14 = *(float *)(v9 + 24);
  if (v14 < 0.0 || v14 > 1.0) {
    ZinAssertImpl("NMS IoU threshold must be between 0 and 1. IoU threshold: %.2f", v14);
  }
  if (*(uint64_t *)(v9 + 16) <= 0) {
    ZinAssertImpl("NMS num rounds must be >= 1. Num rounds: %zd", *(void *)(v9 + 16));
  }
  if (*(unsigned char *)(v9 + 29)) {
    BOOL v16 = *(unsigned char *)(v9 + 28) == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16) {
    ZinAssertImpl("Invalid NMS return mode: returnPerClassResults is true but perClassSuppression is false.");
  }
  uint64_t v17 = *(void *)(v3 + 16);
  if (v17 != 4) {
    ZinAssertImpl("NMS Boxes channels must be %zd. Boxes Channels: %zd", 4uLL, v17);
  }
  uint64_t v18 = *(void *)(v3 + 128);
  if (*(void *)(v3 + 8) != v18) {
    ZinAssertImpl("NMS Boxes batch must equal Scores batch. Boxes Batch: %zd, Scores Batch: %zd", *(void *)(v3 + 8), v18);
  }
  uint64_t v19 = *(void *)(v3 + 152);
  if (*(void *)(v3 + 32) != v19) {
    ZinAssertImpl("NMS Boxes width must equal Scores width. Boxes Width: %zd, Scores Width: %zd", *(void *)(v3 + 32), v19);
  }
  uint64_t v20 = *(void *)(v3 + 144);
  if (*(void *)(v3 + 24) != 1 || v20 != 1) {
    ZinAssertImpl("NMS Boxes height and Scores height must equal 1. Boxes Height: %zd, Scores Height: %zd", *(void *)(v3 + 24), v20);
  }

  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
}

void ZinNMSLayer::~ZinNMSLayer(ZinNMSLayer *this)
{
  *(void *)this = &unk_26C343E48;
  *((void *)this + 24) = &unk_26C34DA98;
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }

  ZinIrOpLayer::~ZinIrOpLayer(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C343E48;
  *((void *)this + 24) = &unk_26C34DA98;
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  ZinIrOpLayer::~ZinIrOpLayer(this);

  JUMPOUT(0x21667D3C0);
}

void ZinNMSLayer::GenerateMaskedValueOverWidthDim()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "NMS: input==nullptr for GenerateMaskedValueOverWidthDim.", v0, 2u);
}

void ZinNMSLayer::GenerateEW2()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid EW type", v0, 2u);
}

uint64_t ZinIrCircularBufferUtil::GetWrapAxis(unsigned int a1)
{
  if (a1 > 5) {
    return 5;
  }
  else {
    return dword_211EFE6BC[a1];
  }
}

BOOL ZinIrCircularBufferUtil::ZinLayerScheduleComp::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(a2 + 48) < *(void *)(a3 + 48);
}

uint64_t ZinIrCircularBufferUtil::CheckConcatProducer(void *a1, int a2)
{
  uint64_t v2 = *(int *)(a1[8] + 12);
  if (v2 > 5) {
    unsigned int v3 = 5;
  }
  else {
    unsigned int v3 = dword_211EFE6BC[v2];
  }
  if (v3 == a2) {
    return 0;
  }
  uint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  while (v5 != v6)
  {
    if (*(_DWORD *)(*(void *)(*(void *)v5 + 64) + 8) == 7)
    {
      uint64_t result = ZinIrCircularBufferUtil::CheckConcatProducer();
      if (!result) {
        return result;
      }
    }
    v5 += 8;
  }
  return 1;
}

uint64_t ZinIrCircularBufferUtil::ValidateConcatTreeStructure(uint64_t a1, int a2)
{
  uint64_t v2 = *(void ***)(a1 + 88);
  if (*(void *)(a1 + 96) - (void)v2 != 16) {
    return 0;
  }
  uint64_t v4 = v2[1];
  uint64_t v5 = v4[8];
  if (*(_DWORD *)(v5 + 8) == 7)
  {
    uint64_t v6 = *(int *)(v5 + 12);
    if (v6 > 5) {
      unsigned int v7 = 5;
    }
    else {
      unsigned int v7 = dword_211EFE6BC[v6];
    }
    if (v7 == a2) {
      return 0;
    }
    uint64_t result = ZinIrCircularBufferUtil::CheckConcatProducer(v4, a2);
    if (!result) {
      return result;
    }
  }
  uint64_t v9 = (*v2)[8];
  if (*(_DWORD *)(v9 + 8) == 7)
  {
    uint64_t v10 = *(int *)(v9 + 12);
    if (v10 > 5) {
      unsigned int v11 = 5;
    }
    else {
      unsigned int v11 = dword_211EFE6BC[v10];
    }
    if (v11 == a2)
    {
      if ((ZinIrCircularBufferUtil::ValidateConcatTreeStructure() & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = ZinIrCircularBufferUtil::CheckConcatProducer(*v2, a2);
      if (!result) {
        return result;
      }
    }
  }
  return 1;
}

uint64_t **ZinIrCircularBufferUtil::AddToProducerMap(uint64_t **a1, void *a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v20 = a2;
  uint64_t v10 = (*(uint64_t (**)(void *, void, void))(*a2 + 32))(a2, 0, 0);
  uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v10 + 48), a4);
  uint64_t v12 = ValueAt;
  uint64_t v13 = ValueAt + a3;
  uint64_t v14 = *a5;
  if (ValueAt + a3 < (unint64_t)*a5) {
    uint64_t v14 = ValueAt + a3;
  }
  *a5 = v14;
  if (*(_DWORD *)(a2[8] + 8) == 85)
  {
    uint64_t v15 = (*(uint64_t (**)(void *))(*a2 + 344))(a2);
    uint64_t v17 = 1;
    if (a4 == 4) {
      uint64_t v17 = (int)v15;
    }
    if (a4 == 3) {
      uint64_t v17 = v15 >> 32;
    }
    if (a4 == 1) {
      uint64_t v17 = v16;
    }
    v12 += v12 & (v17 > 1);
    uint64_t v13 = v12 + a3;
  }
  v19[0] = a3;
  v19[1] = v13;
  _OWORD v19[2] = v12;
  return std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(a1, (uint64_t)&v20, &v20, (uint64_t)v19);
}

uint64_t **ZinIrCircularBufferUtil::AddToConsumerMap(uint64_t **a1, uint64_t **a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  uint64_t v8 = a4;
  unint64_t v26 = a4;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a3 + 32))(a3, 0, 0);
  long long v12 = *(_OWORD *)(v11 + 64);
  v24[0] = *(_OWORD *)(v11 + 48);
  v24[1] = v12;
  uint64_t v25 = *(void *)(v11 + 80);
  uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v24, a6);
  uint64_t v14 = v8[8];
  if (*(_DWORD *)(v14 + 8) == 36)
  {
    do
    {
      long long v15 = *(_OWORD *)(v14 + 32);
      long long v21 = *(_OWORD *)(v14 + 16);
      long long v22 = v15;
      uint64_t v23 = *(void *)(v14 + 48);
      a5 += GetValueAtDimension<ZinTensorPosition>((uint64_t *)&v21, a6);
      uint64_t v16 = (*(uint64_t (**)(void *, void, void))(*v8 + 32))(v8, 0, 0);
      uint64_t v17 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v16 + 48), a6);
      uint64_t v18 = v17 + a5;
      v20[0] = a5;
      v20[1] = v17 + a5;
      void v20[2] = v17;
      std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(a2, (uint64_t)&v26, &v26, (uint64_t)v20);
      uint64_t v8 = *(void **)v26[14];
      unint64_t v26 = v8;
      uint64_t v14 = v8[8];
    }
    while (*(_DWORD *)(v14 + 8) == 36);
  }
  else
  {
    uint64_t v18 = ValueAt + a5;
  }
  *(void *)&long long v21 = a5;
  *((void *)&v21 + 1) = v18;
  *(void *)&long long v22 = v18 - a5;
  return std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(a1, (uint64_t)&v26, &v26, (uint64_t)&v21);
}

uint64_t **ZinIrCircularBufferUtil::DetermineProducersAndConsumers(uint64_t **result, uint64_t **a2, uint64_t **a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v10 = a4;
  long long v30 = a4;
  if (*(_DWORD *)(a4[8] + 8) == 7)
  {
    uint64_t v13 = a4[11];
    if (a4[12] != v13)
    {
      unint64_t v26 = result;
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = v10[8];
        uint64_t v17 = *(void *)(v16 + 16);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v16 + 24) - v17) >> 4) <= v15) {
          std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v18 = *(void *)(v13 + 8 * v15);
        long long v19 = *(_OWORD *)(v17 + v14);
        long long v20 = *(_OWORD *)(v17 + v14 + 16);
        uint64_t v29 = *(void *)(v17 + v14 + 32);
        v28[0] = v19;
        v28[1] = v20;
        uint64_t v21 = GetValueAtDimension<ZinTensorPosition>((uint64_t *)v28, a6) + a5;
        uint64_t v22 = (*(uint64_t (**)(void *, void, void))(*v30 + 32))(v30, 0, 0);
        uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v22 + 48), a6);
        v27[0] = v21;
        v27[1] = ValueAt + v21;
        _OWORD v27[2] = ValueAt;
        std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(a3, (uint64_t)&v30, &v30, (uint64_t)v27);
        uint64_t result = (uint64_t **)ZinIrCircularBufferUtil::DetermineProducersAndConsumers(v26, a2, a3, v18, v21, a6, a7);
        ++v15;
        uint64_t v13 = v30[11];
        v14 += 80;
      }
      while (v15 < (v30[12] - v13) >> 3);
      uint64_t v10 = v30;
    }
  }
  else
  {
    uint64_t result = ZinIrCircularBufferUtil::AddToProducerMap(result, a4, a5, a6, a7);
  }
  uint64_t v25 = (void **)v10[14];
  uint64_t v24 = (void **)v10[15];
  while (v25 != v24)
  {
    if (*(_DWORD *)((*v25)[8] + 8) != 7) {
      uint64_t result = ZinIrCircularBufferUtil::AddToConsumerMap(a2, a3, (uint64_t)v30, *v25, a5, a6);
    }
    ++v25;
  }
  return result;
}

uint64_t **ZinIrCircularBufferUtil::DetermineLayerToSpaceRangeMapVecs(uint64_t *a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v28 = a4;
  uint64_t v11 = *a6;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a4 + 32))(a4, 0, 0);
  uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v12 + 48), a5);
  v27[0] = v11;
  v27[1] = ValueAt + v11;
  _OWORD v27[2] = ValueAt;
  uint64_t result = std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_impl<ZinConcatLayer const*&,ZinSpaceRange>(a3, &v28, (uint64_t)v27);
  uint64_t v26 = *a6;
  uint64_t v15 = v28;
  uint64_t v16 = *(void **)(v28 + 88);
  uint64_t v17 = *(void **)(v28 + 96);
  if (v16 != v17)
  {
    do
    {
      uint64_t v18 = (void *)*v16;
      uint64_t v19 = *(void *)(*v16 + 64);
      if (*(_DWORD *)(v19 + 8) == 7
        && ((uint64_t v20 = *(int *)(v19 + 12), v20 > 5) ? (v21 = 5) : (v21 = dword_211EFE6BC[v20]),
            v21 == a5))
      {
        uint64_t result = (uint64_t **)ZinIrCircularBufferUtil::DetermineLayerToSpaceRangeMapVecs(a1, a2, a3, *v16, a5, a6);
      }
      else
      {
        uint64_t v22 = (uint64_t **)std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::emplace_back<>(a1);
        uint64_t v23 = (uint64_t **)std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::emplace_back<>(a2);
        v27[0] = -1;
        uint64_t result = ZinIrCircularBufferUtil::DetermineProducersAndConsumers(v22, v23, a3, v18, *a6, a5, v27);
        if (v22[2])
        {
          if (v27[0] == -1) {
            ZinAssertImpl("This value should have been updated");
          }
          *a6 = v27[0];
        }
        else if (v27[0] != -1)
        {
          ZinAssertImpl("This value should not have been updated");
        }
      }
      ++v16;
    }
    while (v16 != v17);
    uint64_t v15 = v28;
  }
  uint64_t v24 = *(void ***)(v15 + 112);
  for (unint64_t i = *(void ***)(v15 + 120); v24 != i; ++v24)
  {
    if (*(_DWORD *)((*v24)[8] + 8) != 7) {
      uint64_t result = ZinIrCircularBufferUtil::AddToConsumerMap((uint64_t **)(a2[1] - 24), a3, v28, *v24, v26, a5);
    }
  }
  return result;
}

void *std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::emplace_back<>(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t v2 = a1 + 2;
  unint64_t v3 = v4;
  uint64_t v5 = (void *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    v14[4] = v2;
    if (v10) {
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v2, v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[24 * v7];
    v14[0] = v11;
    v14[1] = v12;
    v14[3] = &v11[24 * v10];
    *((void *)v12 + 2) = 0;
    *((void *)v12 + 1) = 0;
    *(void *)uint64_t v12 = v12 + 8;
    void v14[2] = v12 + 24;
    std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::__swap_out_circular_buffer(a1, v14);
    uint64_t v6 = (void *)a1[1];
    std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer(v14);
  }
  else
  {
    v5[2] = 0;
    v5[1] = 0;
    *uint64_t v5 = v5 + 1;
    uint64_t v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return v6 - 3;
}

void sub_2112524AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::map<ZinIrDimension,unsigned long>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

BOOL ZinIrCircularBufferUtil::ValidateLayerToSpaceRangeMapVecs(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 - 1;
  if (v3 == 1)
  {
    unint64_t v7 = 0;
LABEL_19:
    unint64_t v17 = 0;
    do
    {
      unint64_t v18 = v17;
      if (v17 == v4) {
        break;
      }
      if (v17 == v3 || v17 == v7) {
        goto LABEL_29;
      }
      uint64_t v19 = v2 + 24 * v17;
      uint64_t v22 = *(void **)(v19 + 8);
      uint64_t v20 = (void *)(v19 + 8);
      unsigned int v21 = v22;
      if (v22)
      {
        do
        {
          uint64_t v23 = v21;
          unsigned int v21 = (void *)v21[1];
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v20[2];
          BOOL v15 = *v23 == (void)v20;
          uint64_t v20 = v23;
        }
        while (v15);
      }
      unint64_t v17 = v18 + 1;
    }
    while (*(void *)(*(void *)(*(void *)(v2 + 24 * (v18 + 1)) + 32) + 48) >= *(void *)(v23[4] + 48));
    return v18 >= v4;
  }
  else
  {
    uint64_t v5 = 0;
    if (v3 <= 1) {
      unint64_t v6 = 1;
    }
    else {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
    }
    unint64_t v7 = v6 - 1;
    while (1)
    {
      if (v5 == v7) {
LABEL_29:
      }
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      if (v5 == (a2[1] - *a2) / 24) {
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v8 = v5 + 1;
      unint64_t v9 = (void *)(v2 + 24 * (v5 + 1));
      if (!v9[2]) {
        return 0;
      }
      uint64_t v10 = *a2 + 24 * v5;
      if (*(void *)(v10 + 16))
      {
        uint64_t v13 = *(void **)(v10 + 8);
        uint64_t v12 = (void *)(v10 + 8);
        uint64_t v11 = v13;
        if (v13)
        {
          do
          {
            uint64_t v14 = v11;
            uint64_t v11 = (void *)v11[1];
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v12[2];
            BOOL v15 = *v14 == (void)v12;
            uint64_t v12 = v14;
          }
          while (v15);
        }
        if (*(void *)(v14[4] + 48) > *(void *)(*(void *)(*v9 + 32) + 48)) {
          return 0;
        }
      }
      uint64_t v5 = v8;
      if (v8 == v4) {
        goto LABEL_19;
      }
    }
  }
}

uint64_t ZinIrCircularBufferUtil::DetermineMaxCircularBufferSize(uint64_t *a1, void *a2, unint64_t *a3)
{
  *a3 = 0;
  uint64_t v3 = *a1;
  if (a1[1] == *a1) {
    return 1;
  }
  unint64_t v6 = 0;
  while (1)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v6) {
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v7 = (void *)(v3 + 24 * v6);
    uint64_t v10 = (void *)*v7;
    unint64_t v9 = v7 + 1;
    uint64_t v8 = v10;
    unint64_t v11 = v10[6];
    uint64_t v12 = v10;
    if (v10 != v9)
    {
      do
      {
        if (v11 <= v12[6]) {
          unint64_t v11 = v12[6];
        }
        uint64_t v13 = (void *)v12[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v12[2];
            BOOL v15 = *v14 == (void)v12;
            uint64_t v12 = v14;
          }
          while (!v15);
        }
        uint64_t v12 = v14;
      }
      while (v14 != v9);
    }
    uint64_t v16 = (void *)(*a2 + 24 * v6);
    unint64_t v17 = v8[5];
    unint64_t v18 = v8[7];
    *(void *)&long long v37 = v17;
    *((void *)&v37 + 1) = v11;
    unint64_t v38 = v18;
    char v19 = v16[2] == 0;
    uint64_t v20 = (void *)*v16;
    unsigned int v21 = v16 + 1;
    if ((void *)*v16 != v16 + 1)
    {
      do
      {
        long long v22 = *((_OWORD *)v20 + 3);
        *(_OWORD *)long long v36 = *((_OWORD *)v20 + 2);
        *(_OWORD *)&v36[16] = v22;
        long long v34 = *(_OWORD *)&v36[8];
        uint64_t v35 = *((void *)&v22 + 1);
        BOOL v25 = v17 <= v11 && (unint64_t)v34 < v11 && v17 < *((void *)&v34 + 1);
        BOOL v26 = (unint64_t)v34 <= *((void *)&v34 + 1) && v25;
        ZinSpaceRange::Union((unint64_t *)&v37, (unint64_t *)&v34, (unint64_t *)&v32);
        long long v37 = v32;
        unint64_t v38 = v33;
        unint64_t v27 = (void *)v20[1];
        if (v27)
        {
          do
          {
            uint64_t v28 = v27;
            unint64_t v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            uint64_t v28 = (void *)v20[2];
            BOOL v15 = *v28 == (void)v20;
            uint64_t v20 = v28;
          }
          while (!v15);
        }
        v19 |= v26;
        uint64_t v20 = v28;
      }
      while (v28 != v21);
    }
    if ((v19 & 1) == 0) {
      break;
    }
    unint64_t v29 = v38;
    if (*a3 > v38) {
      unint64_t v29 = *a3;
    }
    *a3 = v29;
    ++v6;
    uint64_t v3 = *a1;
    if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3)) {
      return 1;
    }
  }
  return 0;
}

unint64_t *ZinSpaceRange::Union@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v3 = result[1];
  if (*result > v3 || (unint64_t v5 = a2[1], *a2 > v5)) {
    ZinAssertImpl("Live ranges must be in range");
  }
  if (result[2])
  {
    if (a2[2])
    {
      if (*a2 < v4) {
        unint64_t v4 = *a2;
      }
      if (v3 <= v5) {
        unint64_t v3 = a2[1];
      }
      *a3 = v4;
      a3[1] = v3;
      unint64_t v6 = v3 - v4;
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)result;
      unint64_t v6 = result[2];
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    unint64_t v6 = a2[2];
  }
  a3[2] = v6;
  return result;
}

uint64_t ZinIrCircularBufferUtil::QualifyForCircularBuffer(ZinIrCircularBufferUtil *this, const ZinIrTensor *a2, const ZinIrHalParameters *a3, StaticWrapInfo *a4)
{
  if (!(*((unsigned __int8 *)a2 + 1215) | *((unsigned __int8 *)a2 + 1239))) {
    return 0;
  }
  if (*(_DWORD *)(*(void *)(*((void *)this + 12) + 64) + 8) != 7) {
    return 0;
  }
  if (ZinIrTensor::GetRootTensor(this) != this) {
    return 0;
  }
  uint64_t v6 = *((void *)this + 12);
  uint64_t v7 = *(int *)(*(void *)(v6 + 64) + 12);
  if (v7 > 5) {
    return 0;
  }
  if (((0x35u >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = dword_211EFE6D4[v7];
  if (!ZinIrCircularBufferUtil::ValidateConcatTreeStructure(*((void *)this + 12), dword_211EFE6D4[v7])) {
    return 0;
  }
  *(_DWORD *)a3 = v8;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v13 = 0;
  uint64_t v14 = (void ***)v15;
  ZinIrCircularBufferUtil::DetermineLayerToSpaceRangeMapVecs(v17, (uint64_t *)v16, (uint64_t **)&v14, v6, v8, &v13);
  if (ZinIrCircularBufferUtil::ValidateLayerToSpaceRangeMapVecs(v17, v16)
    && (unint64_t v12 = 0, (ZinIrCircularBufferUtil::DetermineMaxCircularBufferSize(v17, v16, &v12) & 1) != 0)
    && (unint64_t v9 = v12, v9 < GetValueAtDimension<ZinTensorDimensions>((uint64_t *)this + 6, v8)))
  {
    *((void *)a3 + 1) = v9;
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
  uint64_t v14 = v16;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v16[0] = (void **)v17;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v16);
  return v10;
}

{
  unsigned char v5[24];

  return ZinIrCircularBufferUtil::QualifyForCircularBuffer(this, a2, (const ZinIrHalParameters *)v5, a4);
}

void sub_211252A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, void *a13, uint64_t a14, void **a15)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a12, a13);
  a12 = &a15;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a15 = (void **)(v15 - 56);
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCircularBufferUtil::IsCircularBufferProducerCandidate(uint64_t a1, uint64_t a2, ZinIrOpLayer *this)
{
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v23 = 0;
  if (ZinIrOpLayer::IsNoOp(this, (uint64_t *)__p))
  {
    int v6 = *(_DWORD *)(*((void *)this + 8) + 8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v6 != 7) {
      return 0;
    }
  }
  else if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)long long __p = 0u;
  unint64_t v9 = (void **)*((void *)this + 14);
  uint64_t v8 = (void **)*((void *)this + 15);
  if (v9 == v8) {
    goto LABEL_25;
  }
  do
  {
    unint64_t v18 = *v9;
    std::deque<ZinIrOpLayer *>::push_back(__p, &v18);
    ++v9;
  }
  while (v9 != v8);
  uint64_t v10 = *((void *)&v24 + 1);
  if (!*((void *)&v24 + 1))
  {
LABEL_25:
    uint64_t v7 = 0;
    goto LABEL_26;
  }
  while (1)
  {
    unsigned int v21 = 0;
    unint64_t v11 = *(ZinIrOpLayer **)(*(void *)((char *)__p[1] + (((unint64_t)v24 >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v24 & 0x1FF));
    unsigned int v21 = v11;
    *(void *)&long long v24 = v24 + 1;
    *((void *)&v24 + 1) = v10 - 1;
    if ((unint64_t)v24 >= 0x400)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(void *)&long long v24 = v24 - 512;
      unint64_t v11 = v21;
    }
    unint64_t v18 = 0;
    char v19 = 0;
    uint64_t v20 = 0;
    if (!ZinIrOpLayer::IsNoOp(v11, (uint64_t *)&v18)) {
      break;
    }
    int v12 = *(_DWORD *)(*((void *)v21 + 8) + 8);
    if (v18)
    {
      char v19 = v18;
      operator delete(v18);
    }
    if (v12 == 7) {
      goto LABEL_22;
    }
    uint64_t v13 = (void **)*((void *)v21 + 14);
    uint64_t v14 = (void **)*((void *)v21 + 15);
    while (v13 != v14)
    {
      unint64_t v18 = 0;
      unint64_t v18 = *v13;
      std::deque<ZinIrOpLayer *>::push_back(__p, &v18);
      ++v13;
    }
LABEL_24:
    uint64_t v10 = *((void *)&v24 + 1);
    if (!*((void *)&v24 + 1)) {
      goto LABEL_25;
    }
  }
  if (v18)
  {
    char v19 = v18;
    operator delete(v18);
  }
LABEL_22:
  if (a1 + 80 == std::__tree<ZinIrOpLayer *,ScheduleComparator,std::allocator<ZinIrOpLayer *>>::find<ZinIrOpLayer *>(a1 + 72, &v21))goto LABEL_24; {
  unint64_t v17 = 0;
  }
  unint64_t v18 = 0;
  unint64_t v16 = 0;
  if (!ZinIrCircularBufferUtil::IsCircularBufferConsumerCandidate(a1, a2, v21, (const ZinIrOpLayer *)&v18, &v17, &v16)) {
    goto LABEL_24;
  }
  uint64_t v7 = 1;
LABEL_26:
  std::deque<unsigned long>::~deque[abi:ne180100](__p);
  return v7;
}

void sub_211252C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinIrCircularBufferUtil::IsCircularBufferConsumerCandidate(uint64_t a1, uint64_t a2, ZinMirSpatialSplitUtils *a3, const ZinIrOpLayer *a4, unint64_t *a5, unint64_t *a6)
{
  int v12 = (ZinIrTensor *)(*(uint64_t (**)(void, void, void))(***((void ***)a3 + 11) + 32))(**((void **)a3 + 11), 0, 0);
  ZinIrTensor::GetTensorFamily(v12, (uint64_t)&__p);
  uint64_t v14 = (char *)__p;
  uint64_t v15 = v22;
  if (__p == v22)
  {
    int v19 = 1;
    if (__p)
    {
LABEL_9:
      long long v22 = v14;
      operator delete(v14);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v16 = *(void *)v14;
      unint64_t v17 = *(ZinIrOpLayer **)(*(void *)v14 + 96);
      int v18 = *(_DWORD *)(*((void *)v17 + 8) + 8);
      if ((ZinIrOpLayer::IsIntermediate(v17) & 1) == 0
        || v18 == 7
        && !ZinMirSpatialSplitUtils::CanConcatBeCircularBufferProducer(a1, a2, *(ZinIrOpLayer **)(v16 + 96)))
      {
        break;
      }
      v14 += 8;
      if (v14 == v15)
      {
        int v19 = 1;
        goto LABEL_8;
      }
    }
    int v19 = 0;
LABEL_8:
    uint64_t v14 = (char *)__p;
    if (__p) {
      goto LABEL_9;
    }
  }
  if (!v19) {
    return 0;
  }
  *a5 = 0;
  *a6 = 0;
  return ZinMirSpatialSplitUtils::HasKernelSupportOnHeight(a3, a4, a5, a6, v13);
}

void sub_211252E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ZinIrCircularBufferUtil::IsCircularBufferConsumerCandidate(uint64_t a1, uint64_t a2, ZinMirSpatialSplitUtils *a3)
{
  uint64_t v6 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  return ZinIrCircularBufferUtil::IsCircularBufferConsumerCandidate(a1, a2, a3, (const ZinIrOpLayer *)&v6, &v5, &v4);
}

uint64_t ZinIrCircularBufferUtil::ExtractNonOverlappingBufferDescriptors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  memset(v54, 0, sizeof(v54));
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v51 = 0;
  unint64_t v52 = (uint64_t *)v53;
  ZinIrCircularBufferUtil::DetermineLayerToSpaceRangeMapVecs(&v55, v54, &v52, *(void *)(a1 + 96), a2, &v51);
  int64x2_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v5 = v55;
  if (v56 != v55)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 3);
    __format = "Only one producer is supported per branch\n";
    while (1)
    {
      unint64_t v9 = (uint64_t *)(v5 + v6);
      if (*(void *)(v5 + v6 + 16) != 1) {
        goto LABEL_53;
      }
      uint64_t v10 = v54[0];
      if (*(void *)(v54[0] + v6 + 16) != 1) {
        break;
      }
      uint64_t v11 = *v9;
      long long v58 = *(_OWORD *)(*v9 + 40);
      uint64_t v59 = *(void *)(v11 + 56);
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      uint64_t v43 = 0;
      int v44 = 0;
      uint64_t v45 = 0;
      if (v8 - 1 > v7)
      {
        uint64_t v12 = *((void *)&v58 + 1);
        uint64_t v13 = v58;
        if ((unint64_t)v58 > *((void *)&v58 + 1)
          || ((uint64_t v14 = *(void **)(v54[0] + v6 + 24), v16 = v14[5], v15 = v14[6], v16 < *((void *)&v58 + 1))
            ? (BOOL v17 = v16 > v15)
            : (BOOL v17 = 1),
              !v17 ? (BOOL v18 = (unint64_t)v58 >= v15) : (BOOL v18 = 1),
              v18))
        {
          long long v46 = 0uLL;
          uint64_t v47 = 0;
        }
        else
        {
          if ((unint64_t)v58 <= v16) {
            uint64_t v13 = v14[5];
          }
          if (v15 < *((void *)&v58 + 1)) {
            uint64_t v12 = v14[6];
          }
          *(void *)&long long v46 = v13;
          *((void *)&v46 + 1) = v12;
          uint64_t v47 = v12 - v13;
          if (v12 != v13)
          {
            uint64_t v24 = *(void *)(*(void *)(*v9 + 32) + 48);
            uint64_t v25 = *(void *)(v14[4] + 48);
            BOOL v26 = (char *)operator new(0x48uLL);
            *((void *)v26 + 1) = 0;
            *((void *)v26 + 2) = 0;
            *(void *)BOOL v26 = &unk_26C388E40;
            *(_OWORD *)(v26 + 24) = v46;
            *((void *)v26 + 5) = v47;
            *((void *)v26 + 6) = v24;
            *((void *)v26 + 7) = v25;
            *((_DWORD *)v26 + 16) = 1;
            *(void *)&long long v42 = v26 + 24;
            *((void *)&v42 + 1) = v26;
            std::vector<std::shared_ptr<ZinBufferDescriptor>>::push_back[abi:ne180100]((uint64_t *)&v43, &v42);
            std::vector<std::shared_ptr<ZinBufferDescriptor>>::push_back[abi:ne180100]((uint64_t *)&v48, &v42);
            if (*((void *)&v42 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
            }
          }
        }
      }
      ZinSpaceRange::Subtract((unint64_t *)&v58, (unint64_t *)&v46, (char **)&v42);
      int v19 = (void *)v42;
      if (*((void *)&v42 + 1) - (void)v42 != 24) {
        ZinAssertImpl("Only one contiguous space range should be returned");
      }
      if (*(void *)(v42 + 16))
      {
        uint64_t v20 = *(void *)(*(void *)(*v9 + 32) + 48);
        uint64_t v21 = *(void *)(*(void *)(*(void *)(v10 + v6) + 32) + 48);
        long long v22 = (char *)operator new(0x48uLL);
        *((void *)v22 + 1) = 0;
        *((void *)v22 + 2) = 0;
        *(void *)long long v22 = &unk_26C388E40;
        uint64_t v23 = v19[2];
        *(_OWORD *)(v22 + 24) = *(_OWORD *)v19;
        *((void *)v22 + 5) = v23;
        *((void *)v22 + 6) = v20;
        *((void *)v22 + 7) = v21;
        *((_DWORD *)v22 + 16) = 0;
        *(void *)&long long v42 = v22 + 24;
        *((void *)&v42 + 1) = v22;
        std::vector<std::shared_ptr<ZinBufferDescriptor>>::push_back[abi:ne180100]((uint64_t *)&v43, &v42);
        std::vector<std::shared_ptr<ZinBufferDescriptor>>::push_back[abi:ne180100]((uint64_t *)&v48, &v42);
        if (*((void *)&v42 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
        }
      }
      if (v44 != v43) {
        std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>&>(a4, *v9 + 32, (void *)(*v9 + 32), &v43);
      }
      *(void *)&long long v42 = &v43;
      std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
      operator delete(v19);
      ++v7;
      uint64_t v5 = v55;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 3);
      v6 += 24;
      if (v8 <= v7) {
        goto LABEL_31;
      }
    }
    __format = "Only one consumer is supported per branch\n";
LABEL_53:
    ZinAssertImpl(__format);
  }
LABEL_31:
  unint64_t v27 = v52;
  if (v52 != (uint64_t *)v53)
  {
    do
    {
      uint64_t v28 = v48;
      for (unint64_t i = v49; v28 != i; ++v28)
      {
        unint64_t v30 = v27[5];
        unint64_t v31 = v27[6];
        if (v30 <= v31)
        {
          unint64_t v33 = **(void **)v28;
          unint64_t v32 = *(void *)(*(void *)v28 + 8);
          BOOL v34 = v33 >= v31 || v33 > v32;
          if (!v34 && v30 < v32)
          {
            if ((void *)(a4 + 8) == std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::find<ZinIrOpLayer const*>(a4, (uint64_t)(v27 + 4)))
            {
              long long v58 = 0uLL;
              uint64_t v59 = 0;
              std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>>((uint64_t **)a4, (uint64_t)(v27 + 4), v27 + 4, (uint64_t)&v58);
              *(void *)&long long v46 = &v58;
              std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
            }
            *(void *)&long long v46 = v27 + 4;
            long long v36 = std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>((uint64_t **)a4, (uint64_t)(v27 + 4), (uint64_t)&std::piecewise_construct, (uint64_t **)&v46);
            std::vector<std::shared_ptr<ZinBufferDescriptor>>::push_back[abi:ne180100](v36 + 5, v28);
          }
        }
      }
      long long v37 = (uint64_t *)v27[1];
      if (v37)
      {
        do
        {
          unint64_t v38 = v37;
          long long v37 = (uint64_t *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          unint64_t v38 = (uint64_t *)v27[2];
          BOOL v39 = *v38 == (void)v27;
          unint64_t v27 = v38;
        }
        while (!v39);
      }
      unint64_t v27 = v38;
    }
    while (v38 != (uint64_t *)v53);
  }
  *(void *)&long long v58 = &v48;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v52, v53[0]);
  *(void *)&long long v58 = v54;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  *(void *)&long long v58 = &v55;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  return 1;
}

void sub_2112532CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25,uint64_t a26,char a27)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a24, a25);
  *(void *)(v27 - 112) = &a27;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 112));
  *(void *)(v27 - 112) = v27 - 136;
  std::vector<std::map<ZinIrDimension,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 112));
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<ZinBufferDescriptor>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v18[2] = v15 + 16;
    std::vector<std::shared_ptr<ZinBufferDescriptor>>::__swap_out_circular_buffer(a1, v18);
    unint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<ZinIrConstData>>::~__split_buffer(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2112534C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<ZinIrConstData>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void ZinSpaceRange::Subtract(unint64_t *a1@<X0>, unint64_t *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (*a1 > v5 || (unint64_t v7 = *a2, v8 = a2[1], *a2 > v8)) {
    ZinAssertImpl("Live ranges must be in range");
  }
  if (a2[2]) {
    BOOL v10 = v7 >= v5;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10 || v4 >= v8)
  {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), 1uLL);
    uint64_t v14 = &v12[24 * v13];
    long long v15 = *(_OWORD *)a1;
    *((void *)v12 + 2) = a1[2];
    *(_OWORD *)uint64_t v12 = v15;
    uint64_t v16 = v12 + 24;
    BOOL v18 = *a3;
    long long v17 = a3[1];
    if (v17 != *a3)
    {
      do
      {
        long long v19 = *(_OWORD *)(v17 - 24);
        *((void *)v12 - 1) = *((void *)v17 - 1);
        *(_OWORD *)(v12 - 24) = v19;
        v12 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      long long v17 = *a3;
    }
    *a3 = v12;
    a3[1] = v16;
    a3[2] = v14;
    if (!v17) {
      goto LABEL_30;
    }
    uint64_t v20 = v17;
    goto LABEL_29;
  }
  if (v7 == v4 && v5 == v8)
  {
    long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), 1uLL);
    uint64_t v20 = *a3;
    uint64_t v27 = a3[1];
    uint64_t v25 = &v22[24 * v28];
    uint64_t v16 = v22 + 24;
    *(void *)long long v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = 0;
    if (v27 == v20) {
      goto LABEL_28;
    }
    do
    {
      long long v29 = *(_OWORD *)(v27 - 24);
      *((void *)v22 - 1) = *((void *)v27 - 1);
      *(_OWORD *)(v22 - 24) = v29;
      v22 -= 24;
      v27 -= 24;
    }
    while (v27 != v20);
LABEL_27:
    uint64_t v20 = *a3;
LABEL_28:
    *a3 = v22;
    a3[1] = v16;
    a3[2] = v25;
    if (!v20)
    {
LABEL_30:
      a3[1] = v16;
      return;
    }
LABEL_29:
    operator delete(v20);
    goto LABEL_30;
  }
  if (v7 <= v4 && v5 <= v8)
  {
    long long v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 2), 1uLL);
    uint64_t v20 = *a3;
    uint64_t v23 = a3[1];
    uint64_t v25 = &v22[24 * v24];
    uint64_t v16 = v22 + 24;
    *(void *)long long v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = 0;
    if (v23 == v20) {
      goto LABEL_28;
    }
    do
    {
      long long v26 = *(_OWORD *)(v23 - 24);
      *((void *)v22 - 1) = *((void *)v23 - 1);
      *(_OWORD *)(v22 - 24) = v26;
      v22 -= 24;
      v23 -= 24;
    }
    while (v23 != v20);
    goto LABEL_27;
  }
  if (v7 <= v4)
  {
    *(void *)&long long v31 = a2[1];
    *((void *)&v31 + 1) = v5;
    unint64_t v32 = v5 - v8;
    std::vector<ZinSpaceRange>::push_back[abi:ne180100]((void **)a3, &v31);
  }
  else
  {
    *(void *)&long long v31 = *a1;
    *((void *)&v31 + 1) = v7;
    unint64_t v32 = v7 - v4;
    if (v5 > v8)
    {
      std::vector<ZinSpaceRange>::push_back[abi:ne180100]((void **)a3, &v31);
      unint64_t v30 = a1[1];
      *(void *)&long long v31 = a2[1];
      *((void *)&v31 + 1) = v30;
      unint64_t v32 = v30 - v31;
    }
    std::vector<ZinSpaceRange>::push_back[abi:ne180100]((void **)a3, &v31);
  }
}

void sub_21125371C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  std::string v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      BOOL v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *BOOL v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>>,std::reverse_iterator<std::map<ZinIrOpLayer const*,ZinSpaceRange,ZinIrCircularBufferUtil::ZinLayerScheduleComp,std::allocator<std::pair<ZinIrOpLayer const* const,ZinSpaceRange>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<ZinIrDimension,unsigned long>>,std::reverse_iterator<std::map<ZinIrDimension,unsigned long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<ZinBufferDescriptor>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<ZinBufferDescriptor>>,std::reverse_iterator<std::shared_ptr<ZinBufferDescriptor>*>,std::reverse_iterator<std::shared_ptr<ZinBufferDescriptor>*>,std::reverse_iterator<std::shared_ptr<ZinBufferDescriptor>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<ZinBufferDescriptor>>,std::reverse_iterator<std::shared_ptr<ZinBufferDescriptor>*>,std::reverse_iterator<std::shared_ptr<ZinBufferDescriptor>*>,std::reverse_iterator<std::shared_ptr<ZinBufferDescriptor>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ZinBufferDescriptor>>,std::reverse_iterator<std::shared_ptr<ZinBufferDescriptor>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ZinBufferDescriptor>>,std::reverse_iterator<std::shared_ptr<ZinBufferDescriptor>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ZinIrConstData>>,std::reverse_iterator<std::shared_ptr<ZinIrConstData>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<ZinSpaceRange>::push_back[abi:ne180100](void **a1, long long *a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = &v14[24 * v10];
    uint64_t v16 = &v14[24 * v13];
    long long v17 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long v15 = v17;
    long long v9 = v15 + 24;
    long long v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v15 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v15 - 24) = v20;
        v15 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    long long v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
}

void *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::find<ZinIrOpLayer const*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  uint64_t v5 = *(void *)(*(void *)a2 + 48);
  uint64_t v6 = v2;
  do
  {
    uint64_t v7 = *(void *)(v3[4] + 48);
    BOOL v8 = v7 < v5;
    if (v7 >= v5) {
      long long v9 = v3;
    }
    else {
      long long v9 = v3 + 1;
    }
    if (!v8) {
      uint64_t v6 = v3;
    }
    unint64_t v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < *(void *)(v6[4] + 48)) {
    return v2;
  }
  return v6;
}

uint64_t **std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>>(uint64_t **a1, uint64_t a2, void *a3, uint64_t a4)
{
  BOOL v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    uint64_t v9 = *(void *)(*(void *)a2 + 48);
    while (1)
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v7;
        uint64_t v11 = *(void *)(v7[4] + 48);
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        BOOL v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        BOOL v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
LABEL_10:
    unint64_t v12 = (char *)operator new(0x40uLL);
    *((void *)v12 + 4) = *a3;
    *(_OWORD *)(v12 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_OWORD *)a4;
    *((void *)v12 + 7) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = __p + 5;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ZinBufferDescriptor>>,std::shared_ptr<ZinBufferDescriptor>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ZinIrConstData>>,std::shared_ptr<ZinIrConstData>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer const* const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *(void *)(*(void *)a2 + 48);
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = *(void *)(v6[4] + 48);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    void v11[5] = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t **std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const*&,ZinSpaceRange>(uint64_t **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    uint64_t v9 = *(void *)(*(void *)a2 + 48);
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v7;
        uint64_t v11 = *(void *)(v7[4] + 48);
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        uint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        uint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v10 = a1 + 1;
LABEL_10:
    uint64_t v12 = (char *)operator new(0x40uLL);
    *((void *)v12 + 4) = *a3;
    *(_OWORD *)(v12 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_OWORD *)a4;
    *((void *)v12 + 7) = *(void *)(a4 + 16);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t **std::__tree<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,ZinSpaceRange>>>::__emplace_unique_impl<ZinConcatLayer const*&,ZinSpaceRange>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x40uLL);
  uint64_t v7 = v6;
  uint64_t v8 = *a2;
  *((void *)v6 + 4) = *a2;
  *(_OWORD *)(v6 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_OWORD *)a3;
  *((void *)v6 + 7) = *(void *)(a3 + 16);
  uint64_t v9 = a1 + 1;
  uint64_t v10 = a1[1];
  if (v10)
  {
    uint64_t v11 = *(void *)(v8 + 48);
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v10;
        uint64_t v13 = *(void *)(v10[4] + 48);
        if (v11 >= v13) {
          break;
        }
        uint64_t v10 = *v12;
        uint64_t v9 = v12;
        if (!*v12) {
          goto LABEL_10;
        }
      }
      if (v13 >= v11) {
        break;
      }
      uint64_t v10 = v12[1];
      if (!v10)
      {
        uint64_t v9 = v12 + 1;
        goto LABEL_10;
      }
    }
    operator delete(v6);
    return v12;
  }
  else
  {
    uint64_t v12 = a1 + 1;
LABEL_10:
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v12, v9, (uint64_t *)v6);
  }
  return (uint64_t **)v7;
}

void std::__shared_ptr_emplace<ZinBufferDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C388E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinBufferDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C388E40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__emplace_unique_key_args<ZinIrOpLayer const*,ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>&>(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = *(void *)(*(void *)a2 + 48);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        uint64_t v9 = *(void *)(v5[4] + 48);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__construct_node<ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>&>(a1, a3, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

void *std::__tree<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,std::__map_value_compare<ZinIrOpLayer const*,std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,ZinIrCircularBufferUtil::ZinLayerScheduleComp,true>,std::allocator<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>>>::__construct_node<ZinIrOpLayer const* const&,std::vector<std::shared_ptr<ZinBufferDescriptor>>&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void v8[4] = *a2;
  v8[6] = 0;
  v8[7] = 0;
  v8[5] = 0;
  uint64_t result = std::vector<std::shared_ptr<ZinBufferDescriptor>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinBufferDescriptor>*,std::shared_ptr<ZinBufferDescriptor>*>(v8 + 5, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21125411C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ZinIrOpLayer const*,std::vector<std::shared_ptr<ZinBufferDescriptor>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<ZinBufferDescriptor>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinBufferDescriptor>*,std::shared_ptr<ZinBufferDescriptor>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinBufferDescriptor>>,std::shared_ptr<ZinBufferDescriptor>*,std::shared_ptr<ZinBufferDescriptor>*,std::shared_ptr<ZinBufferDescriptor>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2112541A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ZinBufferDescriptor>>,std::shared_ptr<ZinBufferDescriptor>*,std::shared_ptr<ZinBufferDescriptor>*,std::shared_ptr<ZinBufferDescriptor>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ZinBufferDescriptor>>,std::shared_ptr<ZinBufferDescriptor>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t ZinParseKernelRasterizerUnit(const __CFDictionary *a1, uint64_t a2, CFArrayRef *a3)
{
  uint64_t result = ZinParseUnitNumGroups(a1, (uint64_t *)(a2 + 88), a3);
  if (!result)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"RasterizerMode");
    if (Value && (CFStringRef v8 = Value, v9 = CFGetTypeID(Value), v9 == CFStringGetTypeID()))
    {
      int v10 = CFStringToZinIrKernelRasterizerMode(v8);
      *(_DWORD *)(a2 + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v10;
      if (v10 == 2)
      {
        ZinIrUnitStatus::SetError(a3, @"InvalidMode");
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinParseKernelRasterizerUnit();
        }
        return 3;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      *(_DWORD *)(a2 + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
    }
  }
  return result;
}

void ZinParseKernelRasterizerUnit()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid Mode", v0, 2u);
}

uint64_t ZinMirKernelRasterizer::GetPaddedTemplateSize@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int64x2_t *a4@<X8>)
{
  if (result == 6 && a2 == 6 && a3 == 3)
  {
    unint64_t v4 = 7;
  }
  else
  {
    if (result != 4 || a2 != 4 || a3 != 3)
    {
      char v5 = 0;
      a4->i8[0] = 0;
      goto LABEL_11;
    }
    unint64_t v4 = 5;
  }
  *a4 = vdupq_n_s64(v4);
  char v5 = 1;
LABEL_11:
  a4[1].i8[0] = v5;
  return result;
}

BOOL ZinCodegen::SetSecondarySourceDMA<11u>(ZinIrTensor *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, uint64_t a11)
{
  uint64_t v71 = a2;
  uint64_t v11 = *(void *)(a3 + 96 * a4 + 752);
  if (*(_DWORD *)(v11 + 156) != 1)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetResultDMA<7u>(result, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  uint64_t BarIdFromDynamicOffsetInfoOrSection = ZinIrSymbol::GetBarIdFromDynamicOffsetInfoOrSection(*(ZinIrSymbol **)(a3 + 96 * a4 + 752));
  unsigned int v18 = *(_DWORD *)(v11 + 208);
  ZinAneTd<11u>::SetL2Src2DmaFormat(a2, v18);
  if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v11)
    && ZinIrSymbol::GetMemType((ZinIrSymbol *)v11) != 1)
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetPrimarySourceDMA<7u>(result, v35, v36, v37, v38, v39, v40, v41);
    return 0;
  }
  if (!ZinIrSection::HasValidBarId(*(ZinIrSection **)(v11 + 8)))
  {
    BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    ZinCodegen::SetUniversalCompressionForSecondarySource<7u>(result, v28, v29, v30, v31, v32, v33, v34);
    return 0;
  }
  ZinAneTdHw_v11::AddRelocInfo((uint64_t *)(a2 + 8), v11 + 160, 1098, BarIdFromDynamicOffsetInfoOrSection, 1, 1, 0, 0);
  *(_DWORD *)(a2 + 58std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_DWORD *)(a2 + 580) & 0xFFFFFF0F | (16
                                                              * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 1, *(_DWORD *)(a3 + 1420)) & 0xF));
  *(_DWORD *)(a2 + 588) = *(_DWORD *)(a2 + 588) & 0xFFFFFFF0 | ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 2, *(_DWORD *)(a3 + 1424)) & 0xF;
  *(_DWORD *)(a2 + 588) = *(_DWORD *)(a2 + 588) & 0xFFFFFF0F | (16
                                                              * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 3, *(_DWORD *)(a3 + 1428)) & 0xF));
  switch(v18)
  {
    case 1u:
      unsigned int v19 = *(_DWORD *)(a2 + 660) & 0xFFFFCFFC | 0x1000;
      break;
    case 2u:
      unsigned int v19 = *(_DWORD *)(a2 + 660) & 0xFFFFCFFC;
      break;
    case 3u:
      unsigned int v42 = *(_DWORD *)(a2 + 660) & 0xFFFFCFCC;
      int v43 = 8241;
      goto LABEL_29;
    case 4u:
      unsigned int v19 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC | 1;
      break;
    case 5u:
      unsigned int v42 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC;
      int v43 = 257;
      goto LABEL_29;
    case 6u:
      unsigned int v42 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC;
      int v43 = 17;
      goto LABEL_29;
    case 7u:
      unsigned int v42 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC;
      int v43 = 273;
      goto LABEL_29;
    case 8u:
      BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      ZinCodegen::SetSecondarySourceDMA<11u>(result, v44, v45, v46, v47, v48, v49, v50);
      return 0;
    case 9u:
      unsigned int v51 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC;
      if (!a11 && !a10) {
        goto LABEL_27;
      }
      int v52 = 4401;
      goto LABEL_31;
    case 0xAu:
      unsigned int v51 = *(_DWORD *)(a2 + 660) & 0xFFFFCECC;
      if (a11 || a10) {
        int v52 = 305;
      }
      else {
LABEL_27:
      }
        int v52 = 8497;
LABEL_31:
      unsigned int v19 = v51 | v52;
      break;
    case 0xBu:
      unsigned int v42 = *(_DWORD *)(a2 + 660) & 0xFFFFFFCF;
      int v43 = 12547;
LABEL_29:
      unsigned int v19 = v42 | v43;
      break;
    default:
      return 0;
  }
  *(_DWORD *)(a2 + 66std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v19;
  unint64_t v53 = ZinTensorDescriptorDmaInterleave(v11 + 208);
  *(_DWORD *)(a2 + 80std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_DWORD *)(a2 + 800) & 0xFFFFF0FF | ((v53 & 0xF) << 8);
  BOOL result = CheckRegValueRange(v53, (unsigned int *)(*(void *)(a2 + 1040) + 592));
  if (result)
  {
    *(_DWORD *)(a2 + 66std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = *(_DWORD *)(a2 + 660) & 0xF0FFFFFF | ((v53 & 0xF) << 24);
    BOOL result = CheckRegValueRange(v53, (unsigned int *)(*(void *)(a2 + 1040) + 592));
    if (result)
    {
      uint64_t v54 = *(void *)(a3 + 840);
      uint64_t v55 = *(void *)(a3 + 832);
      uint64_t v56 = *(void *)(a3 + 824);
      unint64_t v57 = *(void *)(a3 + 816) / a6;
      *(_DWORD *)(a2 + 624) = *(_DWORD *)(a2 + 624) & 0x3F | (v57 << 6);
      BOOL result = CheckRegValueRange(v57, (unsigned int *)(*(void *)(a2 + 1040) + 440));
      if (result)
      {
        *(_DWORD *)(a2 + 628) = *(_DWORD *)(a2 + 628) & 0x3F | ((v56 / a6) << 6);
        BOOL result = CheckRegValueRange(v56 / a6, (unsigned int *)(*(void *)(a2 + 1040) + 448));
        if (result)
        {
          *(_DWORD *)(a2 + 632) = *(_DWORD *)(a2 + 632) & 0x3F | ((v55 / a6) << 6);
          BOOL result = CheckRegValueRange(v55 / a6, (unsigned int *)(*(void *)(a2 + 1040) + 456));
          if (result)
          {
            *(_DWORD *)(a2 + 636) = *(_DWORD *)(a2 + 636) & 0x3F | ((v54 / a6) << 6);
            BOOL result = CheckRegValueRange(v54 / a6, (unsigned int *)(*(void *)(a2 + 1040) + 464));
            if (result)
            {
              *(_DWORD *)(a2 + 576) |= 1u;
              if (!ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808))) {
                return 1;
              }
              long long v58 = (char *)ZinIrTensor::GetRootTensor(a1) + 48;
              int v59 = *(_DWORD *)(a3 + 888);
              int v60 = *(_DWORD *)(a3 + 892);
              int v61 = *(_DWORD *)(v11 + 232);
              int v62 = *(_DWORD *)(a3 + 896);
              int IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808));
              if (ZinCodegen::SetUniversalCompressionForSecondarySource<11u>(a3, (uint64_t)v58, v59, v60, &v71, v62, IsCompressed, v61))
              {
                return 1;
              }
              BOOL result = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (result)
              {
                ZinCodegen::SetSecondarySourceDMA<11u>(result, v64, v65, v66, v67, v68, v69, v70);
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void ZinCodegen::SetSecondarySourceDMA<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "packed10 format not fully implemented yet\n", a5, a6, a7, a8, 0);
}

uint64_t ZinGOCLayer::ComputeOutputDimensions(uint64_t a1, long long **a2, uint64_t a3)
{
  long long v3 = **a2;
  long long v4 = (*a2)[1];
  *(void *)(a3 + 32) = *((void *)*a2 + 4);
  *(_OWORD *)a3 = v3;
  *(_OWORD *)(a3 + 16) = v4;
  return 0;
}

void ZinGOCLayer::Split(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5 = *(void *)(*a3 + 384);
  uint64_t v8 = 0;
  ZinMirKernelSizeSplitterEngine::GetKernelSplittingNames(v5, a2, a3, &v7);
  ZinIrContext::GetAlternativeNameForTensor(*(void *)(a1 + 16), (uint64_t)&v7, (uint64_t)__p);
  ZinMirKernelSizeSplitterEngine::CreateSplitOutputTensor((uint64_t)a3, (uint64_t)__p, v5);
}

void sub_2112549E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *a19)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  KernelSplittingNames::~KernelSplittingNames(&a19);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)(v20 - 40), 0);
  _Unwind_Resume(a1);
}

void ZinGOCLayer::Split(uint64_t a1, uint64_t *a2, const void **a3)
{
  Hal = ZinIrTarget::GetHal(*(uint64_t **)(a1 + 16), *(ZinIrTarget **)(*(void *)(a1 + 16) + 160));
  (*(void (**)(uint64_t *))(*Hal + 16))(Hal);
  ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(a1 + 16));
  std::string v7 = *(void **)(a1 + 136);
  uint64_t v8 = a2[1];
  v14[0] = *a2;
  v14[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  int v10 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 7);
  if (v13 < 0) {
    int v10 = (void **)__p[0];
  }
  if (v9)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *a3;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "_kernel");
  ZinIrKernel::Partial(v7, v14, (uint64_t)__p);
}

void sub_211254C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, ZinIrKernel *a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  MEMORY[0x21667D3C0](v21, 0x10B3C4024B96488);
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a20, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinGOCLayer::DebugDetailPrint@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 2std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x21667D2B0](&v8);
}

void sub_211254EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ZinGOCLayer::IsSingularScaleAndPerCoutBias(ZinGOCLayer *this)
{
  uint64_t v2 = (ZinIrKernel *)*((void *)this + 17);
  if (!v2 || !ZinIrKernel::HasSingularScale(v2)) {
    return 0;
  }
  uint64_t v3 = (ZinIrKernel *)*((void *)this + 17);

  return ZinIrKernel::HasPerCoutBias(v3);
}

BOOL ZinGOCLayer::IsOnlyPerCoutBias(ZinGOCLayer *this)
{
  uint64_t v2 = (ZinIrKernel *)*((void *)this + 17);
  if (!v2 || (ZinIrKernel::HasScale(v2) & 1) != 0) {
    return 0;
  }
  long long v4 = (ZinIrKernel *)*((void *)this + 17);

  return ZinIrKernel::HasPerCoutBias(v4);
}

uint64_t ZinGOCLayer::CanMergeWithFollowingGOC(ZinGOCLayer *this, ZinIrKernel **a2)
{
  uint64_t result = ZinIrOpLayer::CanMergeWithFollowingGOC(this, (const ZinGOCLayer *)a2);
  if (result)
  {
    int v5 = *(_DWORD *)((*(uint64_t (**)(ZinGOCLayer *, void, void))(*(void *)this + 32))(this, 0, 0)
                   + 88);
    uint64_t v6 = (*((uint64_t (**)(ZinIrKernel **, void, void))*a2 + 4))(a2, 0, 0);
    uint64_t result = ZinQuantizationUtils::TensorFormatCompatible(v5, *(_DWORD *)(v6 + 88));
    if (result)
    {
      char v7 = (ZinIrKernel *)*((void *)this + 17);
      if (v7)
      {
        int HasScale = ZinIrKernel::HasScale(v7);
        char v7 = (ZinIrKernel *)*((void *)this + 17);
        if (HasScale)
        {
          uint64_t v9 = *((void *)v7 + 71);
          uint64_t v10 = (*(uint64_t (**)(ZinGOCLayer *, void, void))(*(void *)this + 32))(this, 0, 0);
          BOOL v11 = 1;
          ZinIrVector::GetValuesAsVector<float>(v9, *(void *)(v10 + 56), 1, (uint64_t)&v19);
          if (v19 != v20)
          {
            uint64_t v12 = (float *)(v19 + 4);
            do
            {
              float v13 = *(v12 - 1);
              BOOL v11 = v13 != 0.0;
            }
            while (v13 != 0.0 && v12++ != (float *)v20);
          }
          if (v19)
          {
            uint64_t v20 = v19;
            operator delete(v19);
          }
          if (!v11) {
            return 0;
          }
          char v7 = (ZinIrKernel *)*((void *)this + 17);
        }
      }
      BOOL HasPerCoutBias = ZinIrKernel::HasPerCoutBias(v7);
      BOOL v16 = ZinIrKernel::HasPerCoutBias(a2[17]);
      if (HasPerCoutBias)
      {
        uint64_t v17 = *(void *)(*(void *)(*((void *)this + 17) + 576) + 56);
        if (!v16)
        {
LABEL_18:
          uint64_t v18 = 0;
          return v17 == v18 || !HasPerCoutBias || !v16;
        }
      }
      else
      {
        uint64_t v17 = 0;
        if (!v16) {
          goto LABEL_18;
        }
      }
      uint64_t v18 = *(void *)(*((void *)a2[17] + 72) + 56);
      return v17 == v18 || !HasPerCoutBias || !v16;
    }
  }
  return result;
}

uint64_t ZinGOCLayer::GetSingularScale(ZinGOCLayer *this, float *a2, signed __int8 *a3)
{
  *a2 = 1.0;
  *a3 = 0;
  uint64_t result = *((void *)this + 17);
  if (result)
  {
    uint64_t result = ZinIrKernel::HasSingularScale((ZinIrKernel *)result);
    if (result)
    {
      uint64_t v7 = *((void *)this + 17);
      *a2 = *(float *)(v7 + 180);
      *a3 = *(unsigned char *)(v7 + 184);
      return 1;
    }
  }
  return result;
}

uint64_t ZinGOCLayer::GetSingularBias(ZinGOCLayer *this, float *a2, signed __int8 *a3)
{
  *a2 = 0.0;
  *a3 = 0;
  uint64_t result = *((void *)this + 17);
  if (result)
  {
    uint64_t result = ZinIrKernel::HasSingularBias((ZinIrKernel *)result);
    if (result)
    {
      uint64_t v7 = *((void *)this + 17);
      *a2 = *(float *)(v7 + 188);
      *a3 = *(unsigned char *)(v7 + 192);
      return 1;
    }
  }
  return result;
}

BOOL ZinGOCLayer::Hash(ZinIrKernel **this, int *a2)
{
  BOOL IsSingularScaleBias = ZinGOCLayer::IsSingularScaleBias((ZinGOCLayer *)this);
  if (IsSingularScaleBias)
  {
    int v5 = operator new(8uLL);
    *(void *)int v5 = 0;
    uint64_t v6 = (char *)operator new(2uLL);
    *(_WORD *)uint64_t v6 = 0;
    *int v5 = 1065353216;
    uint64_t v7 = this[17];
    if (v7)
    {
      BOOL HasSingularScale = ZinIrKernel::HasSingularScale(v7);
      uint64_t v9 = this[17];
      if (HasSingularScale)
      {
        *int v5 = *((_DWORD *)v9 + 45);
        *(_WORD *)uint64_t v6 = *((unsigned __int8 *)v9 + 184);
        uint64_t v10 = v6 + 1;
        v5[1] = 0;
        goto LABEL_7;
      }
      v6[1] = 0;
      uint64_t v10 = v6 + 1;
      v5[1] = 0;
      if (v9)
      {
LABEL_7:
        if (ZinIrKernel::HasSingularBias(v9))
        {
          BOOL v11 = this[17];
          v5[1] = *((_DWORD *)v11 + 47);
          *uint64_t v10 = *((unsigned char *)v11 + 192);
        }
      }
    }
    else
    {
      v5[1] = 0;
      v6[1] = 0;
    }
    unsigned int v12 = ZinHash(v5, 8u);
    uint64_t v13 = ZinHash(v6, 2u);
    long long v14 = operator new(8uLL);
    *long long v14 = v12 | (unint64_t)(v13 << 32);
    *a2 = ZinHash(v14, 8u);
    operator delete(v14);
    operator delete(v6);
    operator delete(v5);
  }
  return IsSingularScaleBias;
}

void sub_211255328(_Unwind_Exception *a1)
{
  operator delete(v3);
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

ZinIrKernel *ZinGOCLayer::RemoveScale(ZinGOCLayer *this, ZinObjectNameFactory *a2)
{
  uint64_t v3 = (char *)this + 136;
  uint64_t result = (ZinIrKernel *)*((void *)this + 17);
  if (result)
  {
    uint64_t result = (ZinIrKernel *)ZinIrKernel::HasScale(result);
    if (result)
    {
      uint64_t v5 = *(void *)v3;
      uint64_t v6 = *(ZinIrVector **)(*(void *)v3 + 576);
      if (v6)
      {
        ZinIrVector::Clone(v6, &v11);
        uint64_t v5 = *(void *)v3;
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v7 = *(ZinIrVector **)(v5 + 592);
      if (v7)
      {
        ZinIrVector::Clone(v7, &v10);
        uint64_t v5 = *(void *)v3;
      }
      else
      {
        uint64_t v10 = 0;
      }
      memcpy(__dst, (const void *)(v5 + 176), sizeof(__dst));
      __dst[272] &= ~8u;
      (*(void (**)(void **__return_ptr, ZinObjectNameFactory *, uint64_t))(*(void *)a2 + 16))(&__p, a2, 2);
      std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),decltype(nullptr),std::unique_ptr<ZinIrVector>,std::unique_ptr<ZinIrVector>,SHAUpdateMode>();
    }
  }
  return result;
}

void sub_2112554D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v20 = *(void *)(v17 + 8);
  *(void *)(v17 + 8) = 0;
  if (v20) {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v18 - 56, v20);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),decltype(nullptr),std::unique_ptr<ZinIrVector>,std::unique_ptr<ZinIrVector>,SHAUpdateMode>()
{
}

void sub_211255608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = a9;
  a9 = 0;
  if (v12) {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  }
  std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),std::unique_ptr<ZinIrVector>,std::unique_ptr<ZinIrVector>>((uint64_t)&a9, &a10);
  MEMORY[0x21667D3C0](v10, 0x1032C40C25AA5B7);
  _Unwind_Resume(a1);
}

ZinIrKernel *ZinGOCLayer::RemoveBias(ZinGOCLayer *this, ZinObjectNameFactory *a2)
{
  uint64_t v3 = (char *)this + 136;
  uint64_t result = (ZinIrKernel *)*((void *)this + 17);
  if (result)
  {
    uint64_t result = (ZinIrKernel *)ZinIrKernel::HasBias(result);
    if (result)
    {
      uint64_t v5 = *(void *)v3;
      uint64_t v6 = *(ZinIrVector **)(*(void *)v3 + 568);
      if (v6)
      {
        ZinIrVector::Clone(v6, &v11);
        uint64_t v5 = *(void *)v3;
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v7 = *(ZinIrVector **)(v5 + 592);
      if (v7)
      {
        ZinIrVector::Clone(v7, &v10);
        uint64_t v5 = *(void *)v3;
      }
      else
      {
        uint64_t v10 = 0;
      }
      memcpy(__dst, (const void *)(v5 + 176), sizeof(__dst));
      __dst[272] &= ~0x10u;
      (*(void (**)(void **__return_ptr, ZinObjectNameFactory *, uint64_t))(*(void *)a2 + 16))(&__p, a2, 2);
      std::make_unique[abi:ne180100]<ZinIrKernel,std::string,ZinKernelDescriptor &,decltype(nullptr),std::unique_ptr<ZinIrVector>,decltype(nullptr),std::unique_ptr<ZinIrVector>,SHAUpdateMode>();
    }
  }
  return result;
}

void sub_2112557C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v20 = *(void *)(v17 + 8);
  *(void *)(v17 + 8) = 0;
  if (v20) {
    std::default_delete<ZinIrVector>::operator()[abi:ne180100](v18 - 56, v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(TransposeAndConvolutionResizePatternHandler *this, const ZinIrOpLayer *a2, const ZinIrOpLayerGraph *a3)
{
  Layer2TDMapper::LayerTracker::GetRootSourceLayers((const ZinIrOpLayerGraph *)((char *)a3 + 152), a2, &v6);
  uint64_t v3 = (v7 - v6) >> 3;
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)v6;
    if (*(_DWORD *)(*(void *)(*(void *)v6 + 64) + 8) == 60)
    {
LABEL_8:
      uint64_t v7 = v6;
      operator delete(v6);
      return v4;
    }
LABEL_6:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)v6;
    if (*(_DWORD *)(*(void *)(*(void *)v6 + 64) + 8) == 59) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  uint64_t v4 = 0;
  if (v6) {
    goto LABEL_8;
  }
  return v4;
}

uint64_t TransposeAndConvolutionResizePatternHandler::MatchAndCombine(TransposeAndConvolutionResizePatternHandler *this, const ZinIrMemoryPressureAnalyzer *a2, uint64_t a3, BOOL *a4)
{
  v40[3] = *MEMORY[0x263EF8340];
  uint64_t v22 = a3;
  std::string::basic_string[abi:ne180100]<0>(v30, "CH_tranpose1");
  v31[0] = &unk_26C386F40;
  v31[1] = this;
  v31[3] = v31;
  int v16 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v32, &v16, 1);
  std::string::basic_string[abi:ne180100]<0>(v33, "1x1_conv");
  v34[0] = &unk_26C386F98;
  v34[1] = this;
  v34[3] = v34;
  int v15 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v35, &v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v36, "CH_tranpose2");
  v37[0] = &unk_26C386F40;
  v37[1] = this;
  void v37[3] = v37;
  int v14 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v38, &v14, 1);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  uint64_t v23 = &v17;
  char v24 = 0;
  uint64_t v17 = (char *)operator new(0x120uLL);
  uint64_t v18 = (uint64_t)v17;
  unsigned int v19 = v17 + 288;
  uint64_t v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc*>((uint64_t)&v19, (uint64_t)v30, (uint64_t)v39, (uint64_t)v17);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v29 = 0;
  uint64_t v8 = operator new(0x20uLL);
  *uint64_t v8 = &unk_26C386EE8;
  v8[1] = a2;
  _OWORD v8[2] = &v22;
  void v8[3] = this;
  uint64_t v29 = v8;
  ZinLinearPattern::ZinLinearPattern(v39, &v17, v7, 0, v28, 0);
  std::allocate_shared[abi:ne180100]<ZinLinearPattern,std::allocator<ZinLinearPattern>,ZinLinearPattern,void>((uint64_t)v39, &v20);
  long long v21 = v20;
  long long v20 = 0uLL;
  v39[0] = &unk_26C349BA8;
  uint64_t v23 = (char **)v40;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  ZinPattern::~ZinPattern((ZinPattern *)v39);
  std::__function::__value_func<BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__value_func[abi:ne180100](v28);
  uint64_t v23 = &v17;
  std::vector<ZinLinearPattern::AtomItemDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  unint64_t v9 = 288;
  do
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v28[v9 / 8 - 1]);
    std::__function::__value_func<MatchStatus ()(MatchParams const&)>::~__value_func[abi:ne180100](&v25[v9 + 1]);
    if ((char)v25[v9] < 0) {
      operator delete(*(void **)((char *)&v22 + v9));
    }
    v9 -= 96;
  }
  while (v9);
  uint64_t v10 = (void *)*((void *)this + 1);
  uint64_t v27 = 0;
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = &unk_26C386FF0;
  v11[1] = &v21;
  void v11[2] = a4;
  void v11[3] = this;
  uint64_t v27 = v11;
  int v12 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v26, 1);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](v26);
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (v12) {
    return 3;
  }
  else {
    return 0;
  }
}

void sub_211255BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__function::__value_func<ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__value_func[abi:ne180100](va);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

uint64_t TransposeAndConvolutionResizePatternHandler::Combine(uint64_t a1, const ZinIrOpLayerGraph *a2, uint64_t *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "CH_tranpose1");
  uint64_t SingleMatch = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v5, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "1x1_conv");
  uint64_t v8 = ZinPattern::GetSingleMatch(v7, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "CH_tranpose2");
  uint64_t v10 = ZinPattern::GetSingleMatch(v9, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v11 = SingleMatch;
  *((void *)v11 + 1) = v8;
  *((void *)v11 + 2) = v10;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  uint64_t v23 = 0;
  v17[5] = a2;
  int v12 = std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v18, v11, (uint64_t)(v11 + 24), 3uLL);
  uint64_t SourceResizeOrResizeAsLayer = TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer((TransposeAndConvolutionResizePatternHandler *)v12, SingleMatch, a2);
  uint64_t v14 = SourceResizeOrResizeAsLayer;
  if (!SourceResizeOrResizeAsLayer) {
    ZinAssertImpl("Failed to find source Resize or ResizeAs layer");
  }
  *((void *)&v19 + 1) = SourceResizeOrResizeAsLayer;
  if (std::__tree<ZinIrOpLayer *,ZinIrIdComparator<ZinIrOpLayer *>,std::allocator<ZinIrOpLayer *>>::__count_unique<ZinIrOpLayer *>((uint64_t)a2, (uint64_t *)v11))
  {
    ZinObjectNameFactory::ZinObjectNameFactory(v17, v14 + 24);
    ZinIrOpLayer::GetInputTensor(SingleMatch, 0);
    (*(void (**)(uint64_t, void, void))(*(void *)v14 + 32))(v14, 0, 0);
    ZinObjectNameFactory::CreateName((uint64_t)v17, 0, __p);
    ZinIrTensor::CreateTensor();
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (*((void *)&v20 + 1))
  {
    *(void *)&long long v21 = *((void *)&v20 + 1);
    operator delete(*((void **)&v20 + 1));
  }
  if ((void)v18)
  {
    *((void *)&v18 + 1) = v18;
    operator delete((void *)v18);
  }
  operator delete(v11);
  return 3;
}

void sub_211256290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)&a12);
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a49);
  }
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  uint64_t v70 = *(std::__shared_weak_count **)(v68 - 240);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  *(void *)(v68 - 232) = &unk_26C34DA98;
  if (*(char *)(v68 - 201) < 0) {
    operator delete(*(void **)(v68 - 224));
  }
  SplitPatternHandler::ChainInfo::~ChainInfo((SplitPatternHandler::ChainInfo *)(v68 - 192));
  operator delete(v67);
  _Unwind_Resume(a1);
}

void sub_211256470()
{
}

uint64_t std::vector<SplitPatternHandler::ChainInfo>::push_back[abi:ne180100](uint64_t *a1, const SplitPatternHandler::ChainInfo *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<SplitPatternHandler::ChainInfo>::__push_back_slow_path<SplitPatternHandler::ChainInfo const&>(a1, a2);
  }
  else
  {
    SplitPatternHandler::ChainInfo::ChainInfo((SplitPatternHandler::ChainInfo *)a1[1], a2);
    uint64_t result = v3 + 96;
    a1[1] = v3 + 96;
  }
  a1[1] = result;
  return result;
}

void sub_2112564C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void SplitPatternHandler::ChainInfo::~ChainInfo(SplitPatternHandler::ChainInfo *this)
{
  uint64_t v4 = (void **)((char *)this + 72);
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

BOOL TransposeAndConvolutionResizePatternHandler::IsLayerCreated(TransposeAndConvolutionResizePatternHandler *this, const ZinIrOpLayer *a2)
{
  uint64_t v4 = (void *)*((void *)this + 7);
  uint64_t v2 = (char *)this + 56;
  unint64_t v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = (char *)v3;
    }
    unint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 == v2 || *((void *)v5 + 4) > (unint64_t)a2) {
LABEL_12:
  }
    uint64_t v5 = v2;
  return v5 != v2;
}

uint64_t TransposeAndConvolutionResizePatternHandler::SpatialSplitCopy(TransposeAndConvolutionResizePatternHandler *this, const ZinIrOpLayer *a2, const TiledLayerTensorRegions *a3)
{
  uint64_t v5 = (void *)*((void *)this + 7);
  unint64_t v3 = (char *)this + 56;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_17;
  }
  BOOL v7 = v3;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      BOOL v7 = (char *)v4;
    }
    uint64_t v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v3 || *((void *)v7 + 4) > (unint64_t)a2) {
LABEL_17:
  }
    ZinAssertImpl("error in resize pattern handler", a2, a3);
  uint64_t result = (*(uint64_t (**)(const ZinIrOpLayer *, const TiledLayerTensorRegions *))(*(void *)a2 + 320))(a2, a3);
  uint64_t v12 = *(void *)(result + 200);
  if (v12 && !*(void *)(result + 192))
  {
    uint64_t v13 = *(_DWORD **)(v12 + 64);
    if (v13[2] == 59)
    {
      v13[43] = *((void *)a3 + 7);
      v13[56] = *(void *)(*((void *)a3 + 16) + 56);
    }
  }
  return result;
}

uint64_t TransposeAndConvolutionResizePatternHandler::AdjustInputRegionOfTiledCombinedLayer(uint64_t result, unint64_t a2, void *a3, int a4)
{
  if (!a4)
  {
    unint64_t v6 = *(void **)(result + 56);
    uint64_t v4 = result + 56;
    uint64_t v5 = v6;
    if (!v6) {
      goto LABEL_24;
    }
    unint64_t v8 = (void *)v4;
    do
    {
      unint64_t v9 = v5[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = v5 + 1;
      }
      if (v10) {
        unint64_t v8 = v5;
      }
      uint64_t v5 = (void *)*v11;
    }
    while (*v11);
    if (v8 == (void *)v4 || v8[4] > a2) {
LABEL_24:
    }
      ZinAssertImpl("error in resize pattern handler");
    uint64_t v12 = *(void *)(*(void *)(a2 + 200) + 64);
    if (*(_DWORD *)(*(void *)(v12 + 144) + 4)) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = *(_DWORD *)(*(void *)(v12 + 192) + 4) == 3;
    }
    if (!v13) {
      ZinAssertImpl("unsupported sampling mode");
    }
    float v14 = (float)*(unsigned int *)(v12 + 172) / (float)*(unsigned int *)(v12 + 224);
    uint64_t result = (*(uint64_t (**)(void, void, void))(***(void ***)(a2 + 88) + 32))(**(void **)(a2 + 88), 0, 0);
    float v15 = (float)(uint64_t)a3[16];
    uint64_t v16 = vcvtms_s32_f32(v15 / v14);
    if (v16 <= 1) {
      uint64_t v16 = 1;
    }
    uint64_t v17 = v16 - 1;
    uint64_t v18 = *(void *)(result + 64) - 1;
    unint64_t v19 = vcvtps_s32_f32((float)((float)(v15 + (float)(uint64_t)a3[21]) + -1.0) / v14);
    if ((uint64_t)(v19 + 1) < v18) {
      uint64_t v18 = v19 + 1;
    }
    a3[2] = v17;
    uint64_t v20 = v18 - v17 + 1;
    a3[7] = v20;
    a3[24] = v20;
  }
  return result;
}

uint64_t TransposeAndConvolutionResizePatternHandler::GetSupportedSplitDimension(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 56);
  unint64_t v3 = (void *)(a1 + 56);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_13;
  }
  unint64_t v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v4 + 1;
    }
    if (v8) {
      unint64_t v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > a2) {
LABEL_13:
  }
    ZinAssertImpl("error when getting splitting dimension");
  unsigned int v11 = 1;
  return std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>(a3, &v11);
}

uint64_t TransposeAndConvolutionResizePatternHandler::InsertSplitLayer(TransposeAndConvolutionResizePatternHandler *this, ZinANELayer *a2, ZinIrOpLayer *a3, const TiledLayerTensorRegions *a4)
{
  uint64_t v40 = a2;
  uint64_t v4 = (char *)this + 56;
  uint64_t v5 = (void *)*((void *)this + 7);
  if (!v5) {
    goto LABEL_32;
  }
  unint64_t v9 = (char *)this + 48;
  BOOL v10 = v4;
  do
  {
    unint64_t v11 = v5[4];
    BOOL v12 = v11 >= (unint64_t)a2;
    if (v11 >= (unint64_t)a2) {
      BOOL v13 = v5;
    }
    else {
      BOOL v13 = v5 + 1;
    }
    if (v12) {
      BOOL v10 = (char *)v5;
    }
    uint64_t v5 = (void *)*v13;
  }
  while (*v13);
  if (v10 == v4 || *((void *)v10 + 4) > (unint64_t)a2) {
LABEL_32:
  }
    ZinAssertImpl("Error when inserting split layers", a2, a3, a4);
  uint64_t v14 = *std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v9, (unint64_t *)&v40);
  uint64_t v15 = *((void *)this + 3);
  uint64_t v16 = v15 + 96 * v14;
  unint64_t v19 = *(void *)(v16 + 64);
  uint64_t v18 = (char **)(v16 + 64);
  unint64_t v17 = v19;
  uint64_t v20 = (void **)(v18 - 1);
  long long v21 = *(v18 - 1);
  if ((unint64_t)v21 >= v19)
  {
    uint64_t v23 = (void **)(v18 - 2);
    uint64_t v24 = (uint64_t)*(v18 - 2);
    uint64_t v25 = ((uint64_t)v21 - v24) >> 3;
    if ((unint64_t)(v25 + 1) >> 61) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v17 - v24;
    uint64_t v27 = v26 >> 2;
    if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
      uint64_t v27 = v25 + 1;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28) {
      uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v18, v28);
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = &v29[8 * v25];
    uint64_t v31 = &v29[8 * v28];
    *(void *)uint64_t v30 = a3;
    long long v22 = v30 + 8;
    uint64_t v32 = (char *)*v20;
    uint64_t v33 = (char *)*v23;
    if (*v20 != *v23)
    {
      do
      {
        uint64_t v34 = *((void *)v32 - 1);
        v32 -= 8;
        *((void *)v30 - 1) = v34;
        v30 -= 8;
      }
      while (v32 != v33);
      uint64_t v32 = (char *)*v23;
    }
    *uint64_t v23 = v30;
    *uint64_t v20 = v22;
    *uint64_t v18 = v31;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    *long long v21 = a3;
    long long v22 = v21 + 1;
  }
  *uint64_t v20 = v22;
  uint64_t v35 = v15 + 96 * v14;
  uint64_t v37 = *(TiledLayerTensorRegions **)(v35 + 80);
  unint64_t v36 = *(void *)(v35 + 88);
  uint64_t v38 = (void *)(v35 + 80);
  if ((unint64_t)v37 >= v36)
  {
    uint64_t result = std::vector<TiledLayerTensorRegions>::__push_back_slow_path<TiledLayerTensorRegions const&>((uint64_t *)(v15 + 96 * v14 + 72), a4);
  }
  else
  {
    TiledLayerTensorRegions::TiledLayerTensorRegions(v37, a4);
    uint64_t result = (uint64_t)v37 + 224;
    void *v38 = (char *)v37 + 224;
  }
  void *v38 = result;
  return result;
}

void sub_2112569C0(_Unwind_Exception *a1)
{
  void *v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t TransposeAndConvolutionResizePatternHandler::Flatten(TransposeAndConvolutionResizePatternHandler *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)this + 4) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = (uint64_t *)(v1 + 96 * v3);
    unint64_t v6 = v4 + 6;
    uint64_t v5 = v4[6];
    if (v4[7] != v5) {
      break;
    }
    if (!ZinIrOpLayerGraph::ReplaceNode(*v4, *(ZinIrOpLayer **)(v1 + 96 * v3 + 40), (ZinIrOpLayer ***)(v1 + 96 * v3 + 8)))return 3; {
LABEL_9:
    }
    ++v3;
    uint64_t v1 = *((void *)this + 3);
    if (v3 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 4) - v1) >> 5)) {
      return 0;
    }
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = (void *)(v1 + 96 * v3 + 72);
  while (!TransposeAndConvolutionResizePatternHandler::FlattenSplitLayer(this, *(ZinIrOpLayer **)(v5 + 8 * v8), (const TiledLayerTensorRegions *)(*v9 + v7), (const SplitPatternHandler::ChainInfo *)v4))
  {
    ++v8;
    uint64_t v5 = *v6;
    v7 += 224;
    if (v8 >= (v4[7] - *v6) >> 3) {
      goto LABEL_9;
    }
  }
  return 3;
}

uint64_t TransposeAndConvolutionResizePatternHandler::FlattenSplitLayer(TransposeAndConvolutionResizePatternHandler *this, ZinIrOpLayer *a2, const TiledLayerTensorRegions *a3, const SplitPatternHandler::ChainInfo *a4)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  BOOL v94 = 0;
  uint64_t v95 = 0;
  unint64_t v96 = 0;
  uint64_t v4 = (ZinReshapeLayer **)*((void *)a4 + 1);
  if (*((void *)a4 + 2) - (void)v4 != 24) {
    ZinAssertImpl("wrong chain size", a2, a3);
  }
  uint64_t v5 = *v4;
  if (*(_DWORD *)(*((void *)*v4 + 8) + 8) != 37) {
    ZinAssertImpl("wrong layer", a2, a3);
  }
  uint64_t v93 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  uint64_t v9 = ZinReshapeLayer::GetReshapeInfo(v5) + 16;
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorPosition>(*((void **)a3 + 16), v9, &v91);
  int64x2_t v88 = vdupq_n_s64(1uLL);
  int64x2_t v89 = v88;
  uint64_t v90 = 1;
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>((void *)(*((void *)a3 + 16) + 40), v9, &v88);
  BOOL v10 = (long long *)((char *)a3 + 152);
  int64x2_t v64 = v88;
  int64x2_t v65 = v89;
  uint64_t v63 = v93;
  uint64_t v66 = v90;
  *(_OWORD *)int v61 = v91;
  long long v62 = v92;
  TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)&v80, (long long *)((char *)a3 + 152), v61, (uint64_t)a3 + 80, (uint64_t)a3 + 104, (uint64_t)a3 + 128, 0, 0);
  unint64_t v11 = v95;
  if ((unint64_t)v95 >= v96)
  {
    BOOL v12 = (TiledLayerTensorRegions *)std::vector<TiledLayerTensorRegions>::__push_back_slow_path<TiledLayerTensorRegions const&>((uint64_t *)&v94, (const TiledLayerTensorRegions *)&v80);
  }
  else
  {
    TiledLayerTensorRegions::TiledLayerTensorRegions(v95, (const TiledLayerTensorRegions *)&v80);
    BOOL v12 = (TiledLayerTensorRegions *)((char *)v11 + 224);
  }
  uint64_t v95 = v12;
  uint64_t v79 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorPosition>(a3, v9, &v77);
  int64x2_t v74 = vdupq_n_s64(1uLL);
  int64x2_t v75 = v74;
  uint64_t v76 = 1;
  ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>((void *)a3 + 5, v9, &v74);
  *(_OWORD *)uint64_t v30 = v77;
  long long v31 = v78;
  int64x2_t v33 = v74;
  uint64_t v32 = v79;
  int64x2_t v34 = v75;
  uint64_t v35 = v76;
  BOOL v13 = v94;
  *(_OWORD *)uint64_t v55 = *(_OWORD *)v94;
  long long v56 = *((_OWORD *)v94 + 1);
  uint64_t v57 = *((void *)v94 + 4);
  uint64_t v14 = operator new(0x28uLL);
  int v60 = (char *)v14 + 40;
  long long v15 = v56;
  *uint64_t v14 = *(_OWORD *)v55;
  v14[1] = v15;
  *((void *)v14 + 4) = v57;
  long long v58 = v14;
  int v59 = (char *)v14 + 40;
  memset(v51, 0, sizeof(v51));
  LogicalDimensions::LogicalDimensions((uint64_t)v97, (uint64_t)v13 + 40, v51);
  uint64_t v16 = operator new(0x48uLL);
  uint64_t v54 = (char *)v16 + 72;
  long long v17 = v97[3];
  std::string v16[2] = v97[2];
  void v16[3] = v17;
  *((void *)v16 + 8) = v98;
  long long v18 = v97[1];
  *uint64_t v16 = v97[0];
  v16[1] = v18;
  int v52 = v16;
  unint64_t v53 = (char *)v16 + 72;
  long long v44 = *((_OWORD *)v94 + 1);
  long long v45 = *((_OWORD *)v94 + 2);
  long long v46 = *((_OWORD *)v94 + 3);
  long long v47 = *((_OWORD *)v94 + 4);
  *(_OWORD *)int v43 = *(_OWORD *)v94;
  unint64_t v19 = operator new(0x50uLL);
  uint64_t v49 = v19 + 5;
  uint64_t v50 = v19 + 5;
  long long v20 = v46;
  _OWORD v19[2] = v45;
  void v19[3] = v20;
  void v19[4] = v47;
  long long v21 = v44;
  *unint64_t v19 = *(_OWORD *)v43;
  v19[1] = v21;
  long long __p = v19;
  TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)v61, v10, v30, (uint64_t)&v58, (uint64_t)&v52, (uint64_t)&__p, 0, 0);
  if (__p)
  {
    uint64_t v49 = __p;
    operator delete(__p);
  }
  if (v52)
  {
    unint64_t v53 = v52;
    operator delete(v52);
  }
  if (v58)
  {
    int v59 = v58;
    operator delete(v58);
  }
  long long v22 = v95;
  if ((unint64_t)v95 >= v96)
  {
    uint64_t v23 = (TiledLayerTensorRegions *)std::vector<TiledLayerTensorRegions>::__push_back_slow_path<TiledLayerTensorRegions const&>((uint64_t *)&v94, (const TiledLayerTensorRegions *)v61);
  }
  else
  {
    TiledLayerTensorRegions::TiledLayerTensorRegions(v95, (const TiledLayerTensorRegions *)v61);
    uint64_t v23 = (TiledLayerTensorRegions *)((char *)v22 + 224);
  }
  uint64_t v95 = v23;
  TiledLayerTensorRegions::TiledLayerTensorRegions((uint64_t)v30, v10, a3, (uint64_t)v94 + 304, (uint64_t)v94 + 328, (uint64_t)v94 + 352, 0, 0);
  uint64_t v24 = v95;
  if ((unint64_t)v95 >= v96)
  {
    uint64_t v25 = (TiledLayerTensorRegions *)std::vector<TiledLayerTensorRegions>::__push_back_slow_path<TiledLayerTensorRegions const&>((uint64_t *)&v94, (const TiledLayerTensorRegions *)v30);
  }
  else
  {
    TiledLayerTensorRegions::TiledLayerTensorRegions(v95, (const TiledLayerTensorRegions *)v30);
    uint64_t v25 = (TiledLayerTensorRegions *)((char *)v24 + 224);
  }
  uint64_t v95 = v25;
  if (v42) {
    operator delete(v42);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  if (v38)
  {
    uint64_t v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v73) {
    operator delete(v73);
  }
  if (v71)
  {
    uint64_t v72 = v71;
    operator delete(v71);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  if (v67)
  {
    uint64_t v68 = v67;
    operator delete(v67);
  }
  if (v87) {
    operator delete(v87);
  }
  if (v85)
  {
    unint64_t v86 = v85;
    operator delete(v85);
  }
  if (v83)
  {
    std::string v84 = v83;
    operator delete(v83);
  }
  if (v81)
  {
    std::string v82 = v81;
    operator delete(v81);
  }
  v61[1] = 0;
  v61[0] = 0;
  *(void *)&long long v62 = 0;
  uint64_t v26 = (ZinIrOpLayer **)*((void *)a4 + 1);
  if (*((ZinIrOpLayer ***)a4 + 2) != v26) {
    ZinIrOpLayer::CreateSpatialSplitCopyTensor(*v26, v94);
  }
  BOOL v27 = ZinIrOpLayerGraph::ReplaceNode(*(void *)a4, a2, (ZinIrOpLayer ***)v61);
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  if (v27) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = 3;
  }
  unint64_t v80 = &v94;
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  return v28;
}

void sub_2112575F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  TiledLayerTensorRegions::~TiledLayerTensorRegions((TiledLayerTensorRegions *)&a27);
  TiledLayerTensorRegions::~TiledLayerTensorRegions((TiledLayerTensorRegions *)&STACK[0x260]);
  TiledLayerTensorRegions::~TiledLayerTensorRegions((TiledLayerTensorRegions *)&STACK[0x3A0]);
  STACK[0x3A0] = v27 - 208;
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3A0]);
  _Unwind_Resume(a1);
}

uint64_t ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorPosition>(void *a1, uint64_t a2, void *a3)
{
  long long v3 = *(_OWORD *)a1;
  long long v4 = *((_OWORD *)a1 + 1);
  a3[4] = a1[4];
  *(_OWORD *)a3 = v3;
  *((_OWORD *)a3 + 1) = v4;
  uint64_t v5 = *(_DWORD **)a2;
  unint64_t v6 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v6)
  {
    while (2)
    {
      uint64_t v7 = a1;
      switch(*v5)
      {
        case 0:
          goto LABEL_7;
        case 1:
          uint64_t v7 = a1 + 4;
          goto LABEL_7;
        case 2:
          uint64_t v7 = a1 + 1;
          goto LABEL_7;
        case 3:
          uint64_t v7 = a1 + 2;
          goto LABEL_7;
        case 4:
          uint64_t v7 = a1 + 3;
LABEL_7:
          unint64_t v8 = a3 + 3;
          switch(v5[1])
          {
            case 0:
              unint64_t v8 = a3;
              break;
            case 1:
              unint64_t v8 = a3 + 4;
              break;
            case 2:
              unint64_t v8 = a3 + 1;
              break;
            case 3:
              unint64_t v8 = a3 + 2;
              break;
            case 4:
              break;
            default:
              return 3;
          }
          *unint64_t v8 = *v7;
          v5 += 2;
          if (v5 == v6) {
            return 0;
          }
          continue;
        default:
          return 3;
      }
    }
  }
  return 0;
}

void SplitPatternHandlerMgr::SplitPatternHandlerMgr(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = a3;
  operator new();
}

void sub_211257A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
}

uint64_t SplitPatternHandlerMgr::MatchAndCombine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  if (*(void **)a1 == v5) {
    return 0;
  }
  while (!(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v4 + 16))(*v4, a2, a3, a4))
  {
    if (++v4 == v5) {
      return 0;
    }
  }
  return 3;
}

uint64_t SplitPatternHandlerMgr::IsLayerCreated(SplitPatternHandlerMgr *this, const ZinIrOpLayer *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this == v2) {
    return 0;
  }
  uint64_t v4 = *(void *)this + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, const ZinIrOpLayer *))(**(void **)(v4 - 8) + 24))(*(void *)(v4 - 8), a2);
    if (result) {
      break;
    }
    BOOL v6 = v4 == v2;
    v4 += 8;
  }
  while (!v6);
  return result;
}

uint64_t SplitPatternHandlerMgr::SpatialSplitCopy(SplitPatternHandlerMgr *this, const ZinIrOpLayer *a2, const TiledLayerTensorRegions *a3)
{
  long long v3 = *(void **)this;
  uint64_t v4 = (void *)*((void *)this + 1);
  if (*(void **)this == v4) {
    goto LABEL_4;
  }
  while (((*(uint64_t (**)(void, const ZinIrOpLayer *))(*(void *)*v3 + 24))(*v3, a2) & 1) == 0)
  {
    if (++v3 == v4) {
      goto LABEL_4;
    }
  }
  if (!*v3) {
LABEL_4:
  }
    ZinAssertImpl("error in pattern handler");
  BOOL v6 = *(uint64_t (**)(void))(*(void *)*v3 + 32);

  return v6();
}

uint64_t SplitPatternHandlerMgr::AdjustInputRegionOfTiledCombinedLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  long long v3 = *(void **)(a1 + 8);
  if (*(void **)a1 == v3) {
    goto LABEL_4;
  }
  while (((*(uint64_t (**)(void, uint64_t))(*(void *)*v2 + 24))(*v2, a2) & 1) == 0)
  {
    if (++v2 == v3) {
      goto LABEL_4;
    }
  }
  if (!*v2) {
LABEL_4:
  }
    ZinAssertImpl("error in pattern handler");
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)*v2 + 40);

  return v5();
}

uint64_t SplitPatternHandlerMgr::GetSupportedSplitDimension(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  long long v3 = *(void **)(a1 + 8);
  if (*(void **)a1 == v3) {
    goto LABEL_4;
  }
  while (((*(uint64_t (**)(void, uint64_t))(*(void *)*v2 + 24))(*v2, a2) & 1) == 0)
  {
    if (++v2 == v3) {
      goto LABEL_4;
    }
  }
  if (!*v2) {
LABEL_4:
  }
    ZinAssertImpl("error in pattern handler");
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)*v2 + 48);

  return v5();
}

uint64_t SplitPatternHandlerMgr::InsertSplitLayer(SplitPatternHandlerMgr *this, ZinIrOpLayer *a2, ZinIrOpLayer *a3, const TiledLayerTensorRegions *a4)
{
  uint64_t v4 = *(void **)this;
  uint64_t v5 = (void *)*((void *)this + 1);
  if (*(void **)this == v5) {
    goto LABEL_4;
  }
  while (((*(uint64_t (**)(void, ZinIrOpLayer *))(*(void *)*v4 + 24))(*v4, a2) & 1) == 0)
  {
    if (++v4 == v5) {
      goto LABEL_4;
    }
  }
  if (!*v4) {
LABEL_4:
  }
    ZinAssertImpl("error in pattern handler");
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)*v4 + 56);

  return v7();
}

uint64_t SplitPatternHandlerMgr::FlattenCombinedLayers(SplitPatternHandlerMgr *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  while (1)
  {
    if (v1 == v2) {
      return 0;
    }
    if ((*(unsigned int (**)(void))(**(void **)v1 + 64))()) {
      break;
    }
    v1 += 8;
  }
  return 3;
}

void TransposeAndConvolutionResizePatternHandler::~TransposeAndConvolutionResizePatternHandler(TransposeAndConvolutionResizePatternHandler *this)
{
  *(void *)this = &unk_26C354838;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  uint64_t v2 = (void **)((char *)this + 24);
  std::vector<SplitPatternHandler::ChainInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *(void *)this = &unk_26C354838;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  uint64_t v2 = (void **)((char *)this + 24);
  std::vector<SplitPatternHandler::ChainInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x21667D3C0](this, 0x10E1C401C2137EFLL);
}

uint64_t std::vector<SplitPatternHandler::ChainInfo>::__push_back_slow_path<SplitPatternHandler::ChainInfo const&>(uint64_t *a1, const SplitPatternHandler::ChainInfo *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  BOOL v13 = v10;
  uint64_t v14 = (SplitPatternHandler::ChainInfo *)&v10[96 * v4];
  uint64_t v16 = &v10[96 * v9];
  SplitPatternHandler::ChainInfo::ChainInfo(v14, a2);
  long long v15 = (char *)v14 + 96;
  std::vector<SplitPatternHandler::ChainInfo>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<SplitPatternHandler::ChainInfo>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_211258144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SplitPatternHandler::ChainInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

SplitPatternHandler::ChainInfo *SplitPatternHandler::ChainInfo::ChainInfo(SplitPatternHandler::ChainInfo *this, const SplitPatternHandler::ChainInfo *a2)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)this + 1, *((const void **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  long long v4 = *((_OWORD *)a2 + 2);
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 2) = v4;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  *((void *)this + 9) = 0;
  *((void *)this + 1std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *((void *)this + 11) = 0;
  std::vector<TiledLayerTensorRegions>::__init_with_size[abi:ne180100]<TiledLayerTensorRegions*,TiledLayerTensorRegions*>((void *)this + 9, *((void *)a2 + 9), *((void *)a2 + 10), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 5));
  return this;
}

void sub_21125820C(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  BOOL v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<SplitPatternHandler::ChainInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 96;
    v4 -= 96;
    std::construct_at[abi:ne180100]<SplitPatternHandler::ChainInfo,SplitPatternHandler::ChainInfo,SplitPatternHandler::ChainInfo*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::construct_at[abi:ne180100]<SplitPatternHandler::ChainInfo,SplitPatternHandler::ChainInfo,SplitPatternHandler::ChainInfo*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(void *)(a1 + 88) = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0;
  *(void *)(a2 + 88) = 0;
  return result;
}

void std::__destroy_at[abi:ne180100]<SplitPatternHandler::ChainInfo,0>(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 72);
  std::vector<TiledLayerTensorRegions>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<SplitPatternHandler::ChainInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<SplitPatternHandler::ChainInfo,0>(i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<SplitPatternHandler>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<SplitPatternHandler>>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<SplitPatternHandler>>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<SplitPatternHandler>>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<SplitPatternHandler>>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<SplitPatternHandler>>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<SplitPatternHandler>>,std::reverse_iterator<std::unique_ptr<SplitPatternHandler>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<SplitPatternHandler>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<SplitPatternHandler>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      _OWORD v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<SplitPatternHandler::ChainInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<SplitPatternHandler::ChainInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C386F40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C386F40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2)
{
  uint64_t v2 = a2[1];
  BOOL v5 = *(_DWORD *)(*((void *)v2 + 8) + 8) == 37
    && (BOOL IsCHTranspose = ZinTransposeLayer::IsCHTranspose(v2))
    && TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer((TransposeAndConvolutionResizePatternHandler *)IsCHTranspose, a2[1], *a2) != 0;
  return v5 | 0x100u;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_1>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::~__func()
{
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C386F98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C386F98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2)
{
  uint64_t v2 = a2[1];
  if (*(_DWORD *)(*((void *)v2 + 8) + 8) != 85) {
    goto LABEL_7;
  }
  uint64_t v3 = *((void *)v2 + 54);
  if (v3)
  {
    if (*(void *)(ZinNEConvLayer::GetKernelDescriptor(a2[1]) + 96) == 1
      && *(void *)(ZinNEConvLayer::GetKernelDescriptor(v2) + 88) == 1)
    {
      KernelDescriptor = (TransposeAndConvolutionResizePatternHandler *)ZinNEConvLayer::GetKernelDescriptor(v2);
      if (*((void *)KernelDescriptor + 13) == 1)
      {
        LODWORD(v3) = TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(KernelDescriptor, a2[1], *a2) != 0;
        return v3 | 0x100;
      }
    }
LABEL_7:
    LODWORD(v3) = 0;
  }
  return v3 | 0x100;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_2>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

void std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
}

__n128 std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C386EE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C386EE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2, uint64_t a3, uint64_t *a4)
{
  BOOL v5 = *a2;
  uint64_t v6 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "CH_tranpose1");
  uint64_t SingleMatch = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v6, (unsigned __int8 *)__p);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "1x1_conv");
  uint64_t v8 = (const ZinIrOpLayer *)ZinPattern::GetSingleMatch(v6, (unsigned __int8 *)__p);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CH_tranpose2");
  uint64_t v9 = (TransposeAndConvolutionResizePatternHandler *)ZinPattern::GetSingleMatch(v6, (unsigned __int8 *)__p);
  uint64_t v10 = v9;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  uint64_t SourceResizeOrResizeAsLayer = (TransposeAndConvolutionResizePatternHandler *)TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(v9, SingleMatch, v5);
  BOOL v12 = (TransposeAndConvolutionResizePatternHandler *)TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(SourceResizeOrResizeAsLayer, v8, v5);
  uint64_t v13 = TransposeAndConvolutionResizePatternHandler::GetSourceResizeOrResizeAsLayer(v12, v10, v5);
  BOOL v14 = 0;
  if (SourceResizeOrResizeAsLayer == v12
    && SourceResizeOrResizeAsLayer == (TransposeAndConvolutionResizePatternHandler *)v13)
  {
    uint64_t v15 = *((void *)SingleMatch + 6);
    long long v16 = operator new(0x18uLL);
    uint64_t v17 = 0;
    *long long v16 = v15;
    v16[1] = v15 + 1;
    std::string v16[2] = v15 + 2;
    unint64_t v19 = *(ZinIrMemoryPressureAnalyzer **)(a1 + 8);
    long long v18 = *(unint64_t **)(a1 + 16);
    do
    {
      __p[0] = (void *)v16[v17];
      __p[1] = __p[0];
      unint64_t PeakPressure = ZinIrMemoryPressureAnalyzer::GetPeakPressure(v19, (const ZinLiveRange *)__p);
      BOOL v14 = PeakPressure > *v18;
    }
    while (PeakPressure <= *v18 && v17++ != 2);
    operator delete(v16);
  }
  return v14;
}

void sub_211258B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

void std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
}

__n128 std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C386FF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C386FF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, const ZinIrOpLayerGraph **a2, void *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if ((*(unsigned int (**)(void, const ZinIrOpLayerGraph *, void))(***(void ***)(a1 + 8) + 8))(**(void **)(a1 + 8), *a2, *a3)&& TransposeAndConvolutionResizePatternHandler::Combine(v5, v4, *(uint64_t **)(a1 + 8)))
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3,std::allocator<TransposeAndConvolutionResizePatternHandler::MatchAndCombine(ZinIrMemoryPressureAnalyzer const&,unsigned long,BOOL &)::$_3>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t std::__tree<SpatialDimension>::__erase_unique<SpatialDimension>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void *std::allocate_shared[abi:ne180100]<ZinIrTransformPartial,std::allocator<ZinIrTransformPartial>,long &,long &,ZinPartialTransformDimension,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x40uLL);
  __n128 result = std::__shared_ptr_emplace<ZinIrTransformPartial>::__shared_ptr_emplace[abi:ne180100]<unsigned long const&,unsigned long &,ZinPartialTransformDimension,std::allocator<ZinIrTransformPartial>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_211258E4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void TransposeAndConvolutionResizePatternHandler::Combine()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v0[0] = 67109378;
  v0[1] = 200;
  __int16 v1 = 2080;
  uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/libs/inference/compiler/ZinMirPrepare/src/ZinMirSplitPatternHandler.cpp";
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Error: failed set active ne, line: %d, file: %s", (uint8_t *)v0, 0x12u);
}

void ZinMirNEConvUnit::ZinMirNEConvUnit(ZinMirNEConvUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  ZinMirNEUnit::ZinMirNEUnit((uint64_t)this, 85, (long long *)a2);
  *(void *)uint64_t v2 = &unk_26C349CB8;
  *(void *)(v2 + 384) = 0;
  *(unsigned char *)(v2 + 392) = 1;
}

void ZinMirNEConvUnit::~ZinMirNEConvUnit(ZinMirNEConvUnit *this)
{
  *(void *)this = &unk_26C349CB8;
  uint64_t v2 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  ZinMirNEUnit::~ZinMirNEUnit(this);
}

{
  uint64_t vars8;

  ZinMirNEConvUnit::~ZinMirNEConvUnit(this);

  JUMPOUT(0x21667D3C0);
}

double ZinMirNEConvUnit::DynamicShapeOutputTensorDimensions(uint64_t a1, long long **a2, long long *a3)
{
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v29 = **a2;
  long long v30 = v7;
  uint64_t v31 = v6;
  uint64_t v8 = *(void **)(a1 + 288);
  if (v8)
  {
    ZinIrBroadcastInfo::ExtractDimensionsNotEqualToOne(v8, (uint64_t)&v26);
    uint64_t v9 = *((void *)&v27 + 1);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v26);
    if (v9) {
      return result;
    }
  }
  uint64_t v11 = *(void *)(a1 + 96);
  if (v11)
  {
    if ((*(unsigned int (**)(uint64_t, long long **, long long *))(*(void *)v11 + 16))(v11, a2, &v29)) {
      return result;
    }
  }
  if (!*(unsigned char *)(a1 + 392)) {
    goto LABEL_15;
  }
  uint64_t v12 = *(void *)(a1 + 328);
  if (!v12) {
    goto LABEL_15;
  }
  if ((*(char *)(a1 + 359) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 359)) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 344))
  {
LABEL_15:
    uint64_t v17 = *(void *)(a1 + 312);
    if (v17)
    {
      ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(&v29, v17 + 16, a3);
      long long v18 = a3[1];
      long long v29 = *a3;
      long long v30 = v18;
      uint64_t v31 = *((void *)a3 + 4);
    }
    double result = *(double *)&v29;
    long long v19 = v30;
    *a3 = v29;
    a3[1] = v19;
    *((void *)a3 + 4) = v31;
    return result;
  }
LABEL_11:
  ZinMirConvUtils::ZinConvertProgrammedToLogicalKernelStrides((int *)(v12 + 152), (int *)(v12 + 164), (int *)v24);
  uint64_t v13 = *(void *)(a1 + 328);
  int8x16_t v22 = vextq_s8(*(int8x16_t *)(v13 + 88), *(int8x16_t *)(v13 + 88), 8uLL);
  uint64_t v23 = *(void *)(v13 + 104);
  BOOL v14 = (int *)(v13 + 176);
  uint64_t v15 = *(void *)(v13 + 72);
  if (*(char *)(v13 + 272) < 0) {
    uint64_t v16 = *(void *)(v13 + 224);
  }
  else {
    uint64_t v16 = 1;
  }
  uint64_t v20 = 0x100000001;
  int v21 = 1;
  ZinGetOutputTensorDimension((uint64_t)&v29, &v22, v24, v25, v14, v16 * v15, (int *)&v20, (uint64_t)&v26);
  long long v29 = v26;
  long long v30 = v27;
  uint64_t v31 = v28;
  if (ZinTensorDimensions::IsValid((ZinTensorDimensions *)&v29)) {
    goto LABEL_15;
  }
  return result;
}

void ZinMirNEConvUnit::CreateLayer(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 8)) {
    ZinAssertImpl("Invalid params when creating layer");
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v22 = *(void *)(a2 + 8);
  uint64_t v23 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ZinMirNEUnit::CreateBroadcast(a1);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  unsigned int v5 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v20 = *(void *)(a2 + 8);
  int v21 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ZinMirNEUnit::CreateInputRelu(a1);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 8);
  long long v19 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ZinMirNEUnit::CreateActivation(a1);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  long long v7 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v16 = *(void *)(a2 + 8);
  uint64_t v17 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ZinMirNEUnit::CreateTranspose(a1);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v15 = 0;
  if (*(void *)(a1 + 328))
  {
    if (*(char *)(a1 + 359) < 0)
    {
      if (*(void *)(a1 + 344))
      {
LABEL_21:
        uint64_t DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)a1);
        uint64_t v9 = (char *)DynamicOffsetInfo;
        if (*(char *)(DynamicOffsetInfo + 23) >= 0) {
          size_t v10 = *(unsigned __int8 *)(DynamicOffsetInfo + 23);
        }
        else {
          size_t v10 = *(void *)(DynamicOffsetInfo + 8);
        }
        uint64_t v11 = v13;
        std::string::basic_string[abi:ne180100]((uint64_t)v13, v10 + 7);
        if (v14 < 0) {
          uint64_t v11 = (void **)v13[0];
        }
        if (v10)
        {
          if (v9[23] >= 0) {
            uint64_t v12 = v9;
          }
          else {
            uint64_t v12 = *(char **)v9;
          }
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, "_kernel");
        operator new();
      }
    }
    else if (*(unsigned char *)(a1 + 359))
    {
      goto LABEL_21;
    }
  }
  if (*(void *)(a1 + 384)) {
    operator new();
  }
  operator new();
}

void sub_2112597B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,ZinIrKernel *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,ZinIrKernel *a37)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  ZinResizeLayer::Clone(&a23);
  uint64_t v39 = *(_Unwind_Exception **)(v38 - 104);
  MEMORY[0x21667D3C0](v37, 0x10B3C4024B96488);
  if (a29 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a30, 0);
  if (a36 < 0) {
    operator delete(a31);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a37, 0);
  _Unwind_Resume(v39);
}

BOOL ZinMirNEConvUnit::IsValid(ZinMirNEConvUnit *this, ZinMirUnitValidationContext *a2)
{
  return *((void *)this + 13) && ZinMirUnit::IsValid(this, a2);
}

uint64_t ZinMirNEConvUnit::SetHasConv(ZinMirNEConvUnit *this, char a2)
{
  *((unsigned char *)this + 392) = a2;
  return 0;
}

uint64_t ZinParseRingBufferOffset(const __CFArray *a1, ZinIrRingBufferUnitInfo *a2, CFArrayRef *a3)
{
  valuePtr[3] = *(_DWORD **)MEMORY[0x263EF8340];
  int Count = CFArrayGetCount(a1);
  if (Count <= 0)
  {
    BOOL v37 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v37) {
      ZinParseRingBufferOffset(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferOffset");
    return 3;
  }
  else
  {
    CFIndex v7 = 0;
    long long v56 = 0;
    uint64_t v57 = 0;
    long long v58 = 0;
    uint64_t v8 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
      size_t v10 = ValueAtIndex;
      if (!ValueAtIndex || (CFTypeID v11 = CFGetTypeID(ValueAtIndex), v11 != CFDictionaryGetTypeID()))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
          ZinParseRingBufferOffset(v7);
        }
        ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferOffset");
        goto LABEL_39;
      }
      uint64_t v12 = v57;
      if (v57 >= v58)
      {
        uint64_t v14 = (v57 - (unsigned char *)v56) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = (v58 - (unsigned char *)v56) >> 2;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if ((unint64_t)(v58 - (unsigned char *)v56) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v58, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[8 * v14];
        *(void *)uint64_t v18 = v10;
        uint64_t v13 = v18 + 8;
        uint64_t v20 = (char *)v56;
        long long v19 = v57;
        if (v57 != v56)
        {
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          long long v19 = (char *)v56;
        }
        long long v56 = v18;
        uint64_t v57 = v13;
        long long v58 = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)uint64_t v57 = v10;
        uint64_t v13 = v12 + 8;
      }
      uint64_t v57 = v13;
      ++v7;
    }
    while (v7 != v8);
    uint64_t v22 = (const __CFDictionary **)v56;
    if (v56 == v13)
    {
      uint64_t v36 = 0;
      if (v56) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v23 = (void *)((char *)a2 + 80);
      char v24 = (void *)((char *)a2 + 120);
      while (1)
      {
        CFDictionaryRef v25 = *v22;
        int v55 = 0;
        if (ZinParseRingBufferDimension(v25, (uint64_t)&v55, a3)) {
          break;
        }
        if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v23, &v55)|| std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v24, &v55))
        {
          if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
          {
            DimensionToString(v55, &__p);
            ZinParseRingBufferOffset();
          }
          ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferDimension");
          break;
        }
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v25, @"Offset");
        CFNumberRef v27 = Value;
        if (Value && (CFTypeID v28 = CFGetTypeID(Value), v28 == CFNumberGetTypeID()))
        {
          LODWORD(valuePtr[0]) = 0;
          ZinGetCFObject(valuePtr, v27);
          uint64_t v29 = SLODWORD(valuePtr[0]);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v24, &v55, (uint64_t)&std::piecewise_construct, &__p)[3] = v29;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
          long long v30 = (BOOL *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v24, &v55, (uint64_t)&std::piecewise_construct, &__p);
          ZinParseBoolean(v25, @"Circular", v30 + 32);
        }
        else
        {
          CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(v25, @"Offset");
          CFStringRef v32 = v31;
          if (!v31 || (CFTypeID v33 = CFGetTypeID(v31), v33 != CFStringGetTypeID()))
          {
            BOOL v46 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            if (v46) {
              ZinParseRingBufferOffset(v46, v47, v48, v49, v50, v51, v52, v53);
            }
            ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferOffset");
            break;
          }
          memset(&__p, 0, sizeof(__p));
          ZinGetCFObject((uint64_t)&__p, v32);
          valuePtr[0] = &v55;
          int64x2_t v34 = (std::string *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v23, &v55, (uint64_t)&std::piecewise_construct, valuePtr);
          std::string::operator=(v34 + 1, &__p);
          valuePtr[0] = &v55;
          uint64_t v35 = (BOOL *)std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrDynamicOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v23, &v55, (uint64_t)&std::piecewise_construct, valuePtr);
          ZinParseBoolean(v25, @"Circular", v35 + 48);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (++v22 == (const __CFDictionary **)v13)
        {
          uint64_t v36 = 0;
          goto LABEL_40;
        }
      }
LABEL_39:
      uint64_t v36 = 3;
LABEL_40:
      uint64_t v22 = (const __CFDictionary **)v56;
      if (v56)
      {
LABEL_41:
        uint64_t v57 = (char *)v22;
        operator delete(v22);
      }
    }
  }
  return v36;
}

void sub_211259DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinParseRingBufferDimension(const __CFDictionary *a1, uint64_t a2, CFArrayRef *a3)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, @"Dimension");
  if (!Value || (CFTypeID v5 = CFGetTypeID(Value), v5 != CFStringGetTypeID()) || (result = ZinParseDimension(), result))
  {
    BOOL v7 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v7) {
      ZinParseRingBufferDimension(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferDimension");
    return 3;
  }
  return result;
}

uint64_t ZinParseRingBufferReaderOutputSize(const __CFDictionary *a1, ZinIrRingBufferReaderUnitInfo *a2, CFArrayRef *a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"RingBufferReaderOutputSizeInfo");
  if (!Value || (CFArrayRef v6 = Value, v7 = CFGetTypeID(Value), v7 != CFArrayGetTypeID()))
  {
    BOOL v32 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v32) {
      ZinParseRingBufferReaderOutputSize(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferReaderOutputSizeInfo");
    return 3;
  }
  int Count = CFArrayGetCount(v6);
  if (Count <= 0)
  {
    BOOL v41 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v41) {
      ZinParseRingBufferReaderOutputSize(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferOffset");
    return 3;
  }
  CFIndex v9 = 0;
  std::string __p = 0;
  int v60 = 0;
  int v61 = 0;
  uint64_t v10 = Count;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v6, v9);
    uint64_t v12 = ValueAtIndex;
    if (!ValueAtIndex || (CFTypeID v13 = CFGetTypeID(ValueAtIndex), v13 != CFDictionaryGetTypeID()))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinParseRingBufferReaderOutputSize(v9);
      }
      ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferOffset");
      goto LABEL_40;
    }
    uint64_t v14 = v60;
    if (v60 >= v61)
    {
      uint64_t v16 = (v60 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = (v61 - (unsigned char *)__p) >> 2;
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      if ((unint64_t)(v61 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v61, v18);
      }
      else {
        long long v19 = 0;
      }
      uint64_t v20 = &v19[8 * v16];
      *(void *)uint64_t v20 = v12;
      unint64_t v15 = v20 + 8;
      uint64_t v22 = (char *)__p;
      uint64_t v21 = v60;
      if (v60 != __p)
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *((void *)v20 - 1) = v23;
          v20 -= 8;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)__p;
      }
      std::string __p = v20;
      int v60 = v15;
      int v61 = &v19[8 * v18];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)int v60 = v12;
      unint64_t v15 = v14 + 8;
    }
    int v60 = v15;
    ++v9;
  }
  while (v9 != v10);
  char v24 = (const __CFDictionary **)__p;
  if (__p == v15)
  {
    uint64_t v31 = 0;
    if (__p) {
      goto LABEL_42;
    }
  }
  else
  {
    CFDictionaryRef v25 = (void *)((char *)a2 + 160);
    while (1)
    {
      CFDictionaryRef v26 = *v24;
      int v58 = 0;
      if (ZinParseRingBufferDimension(v26, (uint64_t)&v58, a3)) {
        break;
      }
      if (std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(v25, &v58))
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          DimensionToString(v58, v57);
          ZinParseRingBufferReaderOutputSize();
        }
        ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferDimension");
        break;
      }
      CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(v26, @"Size");
      CFNumberRef v28 = v27;
      if (!v27 || (CFTypeID v29 = CFGetTypeID(v27), v29 != CFNumberGetTypeID()))
      {
        BOOL v49 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        if (v49) {
          ZinParseRingBufferReaderOutputSize(v49, v50, v51, v52, v53, v54, v55, v56);
        }
        ZinIrUnitStatus::SetError(a3, @"InvalidUnitRingBufferReaderOutputSizeInfo");
        break;
      }
      valuePtr[0] = 0;
      ZinGetCFObject(valuePtr, v28);
      uint64_t v30 = valuePtr[0];
      v57[0] = &v58;
      std::__hash_table<std::__hash_value_type<ZinDependencyOffsetDim,long>,std::__unordered_map_hasher<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::hash<ZinDependencyOffsetDim>,std::equal_to<ZinDependencyOffsetDim>,true>,std::__unordered_map_equal<ZinDependencyOffsetDim,std::__hash_value_type<ZinDependencyOffsetDim,long>,std::equal_to<ZinDependencyOffsetDim>,std::hash<ZinDependencyOffsetDim>,true>,std::allocator<std::__hash_value_type<ZinDependencyOffsetDim,long>>>::__emplace_unique_key_args<ZinDependencyOffsetDim,std::piecewise_construct_t const&,std::tuple<ZinDependencyOffsetDim const&>,std::tuple<>>((uint64_t)v25, &v58, (uint64_t)&std::piecewise_construct, v57)[3] = v30;
      if (++v24 == (const __CFDictionary **)v15)
      {
        uint64_t v31 = 0;
        goto LABEL_41;
      }
    }
LABEL_40:
    uint64_t v31 = 3;
LABEL_41:
    char v24 = (const __CFDictionary **)__p;
    if (__p)
    {
LABEL_42:
      int v60 = (char *)v24;
      operator delete(v24);
    }
  }
  return v31;
}

void sub_21125A278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinIrStaticOffsetPerAxisInfo>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  *((unsigned char *)v11 + 32) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_21125A4D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ZinParseRingBufferOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unknown or unsupported ringbuffer offset!\n", a5, a6, a7, a8, 0);
}

void ZinParseRingBufferOffset(int a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Unable to parse ringbuffer offset array at index #%d.\n", (uint8_t *)v1, 8u);
}

void ZinParseRingBufferOffset()
{
  OUTLINED_FUNCTION_1_12();
  *(_DWORD *)uint64_t v1 = 136315138;
  *(void *)(v1 + 4) = v2;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Ringbuffer offset has duplicated entry at dimension %s.\n", v3, 0xCu);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

void ZinParseRingBufferDimension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ZinParseRingBufferReaderOutputSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Ring buffer reader output size cannot be empty.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Unknown or unsupported ringbuffer size!\n", a5, a6, a7, a8, 0);
}

void ZinParseRingBufferReaderOutputSize(int a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Unable to parse ring buffer reader output size array at index #%d.\n", (uint8_t *)v1, 8u);
}

void ZinParseRingBufferReaderOutputSize()
{
  OUTLINED_FUNCTION_1_12();
  *(_DWORD *)uint64_t v1 = 136315138;
  *(void *)(v1 + 4) = v2;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Ringbuffer reader output size has duplicated entry at dimension %s.\n", v3, 0xCu);
  if (*(char *)(v0 + 23) < 0) {
    operator delete(*(void **)v0);
  }
}

__CFDictionary *ZinCreateDropoutUnit(unsigned char *a1)
{
  CFMutableDictionaryRef Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFNumberRef v5 = CFNumberCreate(v3, kCFNumberFloat32Type, a1 + 80);
  CFDictionaryAddValue(Mutable, @"DropoutRate", v5);
  CFRelease(v5);
  CFNumberRef v6 = CFNumberCreate(v3, kCFNumberSInt64Type, a1 + 88);
  CFDictionaryAddValue(Mutable, @"Seed", v6);
  CFRelease(v6);
  unint64_t v7 = (const void **)MEMORY[0x263EFFB38];
  if (a1[96]) {
    unint64_t v7 = (const void **)MEMORY[0x263EFFB40];
  }
  unint64_t v8 = *v7;
  CFDictionaryAddValue(Mutable, @"EnablePostScale", *v7);
  CFRelease(v8);
  CFDictionaryAddValue(Unit, @"Params", Mutable);
  CFRelease(Mutable);
  return Unit;
}

uint64_t ZinKernelFormatGetPaletteFormat(int a1, _DWORD *a2)
{
  if (!a2) {
    return 14100;
  }
  int v2 = a1 - 7;
  if ((a1 - 7) > 0x14) {
    return 14100;
  }
  uint64_t result = 0;
  *a2 = dword_211EFED10[v2];
  return result;
}

uint64_t ZinKernelFormatGetUnderlyingType(int a1)
{
  if ((a1 - 1) > 0x1E) {
    return 0;
  }
  else {
    return dword_211EFED64[a1 - 1];
  }
}

uint64_t ZinKernelFormatGetUnderlyingTypeSizeInBytes(int a1)
{
  uint64_t v1 = (int)ZinKernelFormatGetUnderlyingType(a1) - 1;
  if (v1 > 4) {
    return -1;
  }
  else {
    return qword_211EFEDE0[v1];
  }
}

uint64_t ZinKernelGetPaletteLUTSize(int a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 14100;
  }
  int v3 = a1 - 1;
  if ((a1 - 1) > 0x1D) {
    return 14100;
  }
  uint64_t result = 0;
  *a3 = qword_211EFEE08[v3] * a2;
  return result;
}

uint64_t GetPalettizedKernelFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2 <= 5 && ((1 << a2) & 0x36) != 0)
  {
    switch(a1)
    {
      case 1:
        int v4 = a2 - 1;
        if ((a2 - 1) >= 5) {
          goto LABEL_20;
        }
        CFNumberRef v5 = (unsigned int *)&unk_211EFEEF8;
        goto LABEL_14;
      case 2:
        int v4 = a2 - 1;
        if ((a2 - 1) >= 5) {
          goto LABEL_20;
        }
        CFNumberRef v5 = (unsigned int *)&unk_211EFEF0C;
        goto LABEL_14;
      case 3:
        int v4 = a2 - 1;
        if ((a2 - 1) >= 5) {
          goto LABEL_20;
        }
        CFNumberRef v5 = (unsigned int *)&unk_211EFEF20;
        goto LABEL_14;
      case 4:
        int v4 = a2 - 1;
        if ((a2 - 1) >= 5) {
          goto LABEL_20;
        }
        CFNumberRef v5 = (unsigned int *)&unk_211EFEF34;
        goto LABEL_14;
      case 6:
        int v4 = a2 - 1;
        if ((a2 - 1) >= 5) {
          goto LABEL_20;
        }
        CFNumberRef v5 = (unsigned int *)&unk_211EFEF48;
LABEL_14:
        uint64_t result = v5[v4];
        break;
      case 8:
        if ((a2 - 1) >= 2)
        {
          if (a2 == 4) {
            uint64_t result = 27;
          }
          else {
LABEL_20:
          }
            uint64_t result = 0;
        }
        else
        {
          uint64_t result = a2;
        }
        break;
      default:
        goto LABEL_20;
    }
  }
  return result;
}

uint64_t ZinKernelDescriptorGetStab(uint64_t a1, const char *a2, unsigned __int16 *a3, char *a4, size_t a5)
{
  uint64_t v5 = 14100;
  if (!a1 || !a2 || !a3 || !a4) {
    return v5;
  }
  int v11 = *(unsigned char *)(a1 + 272) & 1;
  if (*(unsigned char *)(a1 + 272)) {
    uint64_t v12 = 150;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v55 = 1;
  uint64_t v56 = 0;
  int v13 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    uint64_t PaletteLUTSize = ZinKernelGetPaletteLUTSize(*(_DWORD *)a1, *(void *)(a1 + 240), &v56);
    if (PaletteLUTSize)
    {
      uint64_t v5 = PaletteLUTSize;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinKernelDescriptorGetStab_cold_1();
      }
      return v5;
    }
    uint64_t v15 = v56;
    uint64_t v53 = a3;
    size_t v38 = a5;
    uint64_t v36 = a2;
    uint64_t v37 = a4;
    uint64_t v34 = v12;
    int v35 = v11;
    if (v56 < 1)
    {
      uint64_t v19 = 1;
      int Typeno = 1;
    }
    else
    {
      LODWORD(v54) = 0;
      ZinKernelFormatGetPaletteFormat(v13, &v54);
      int v17 = v54;
      ZinKernelFormatGetBitDepth(v54, &v55);
      int Typeno = ZinKernelFormatGetTypeno(v17);
      uint64_t v19 = v55;
    }
    uint64_t v32 = v19;
    int v33 = Typeno;
    uint64_t v54 = 0;
    ZinKernelFormatGetBitDepth(v13, &v54);
    uint64_t v16 = v54;
  }
  else
  {
    uint64_t v34 = v12;
    int v35 = v11;
    uint64_t v36 = a2;
    uint64_t v37 = a4;
    size_t v38 = a5;
    uint64_t v53 = a3;
    uint64_t v54 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v32 = 1;
    int v33 = 1;
  }
  uint64_t v51 = *(int *)(a1 + 160);
  uint64_t v41 = *(int *)(a1 + 164);
  uint64_t v20 = *(void *)(a1 + 72);
  uint64_t v44 = *(void *)(a1 + 80);
  uint64_t v52 = *(int *)(a1 + 156);
  uint64_t v48 = *(void *)(a1 + 88);
  int v49 = *(_DWORD *)(a1 + 152);
  uint64_t v46 = *(void *)(a1 + 104);
  uint64_t v47 = *(void *)(a1 + 96);
  uint64_t v21 = *(void *)(a1 + 248);
  uint64_t v50 = v21;
  uint64_t v22 = *(int *)(a1 + 172);
  uint64_t v42 = *(int *)(a1 + 168);
  uint64_t v39 = *(void *)(a1 + 256);
  unint64_t v40 = (v44 * v51 * v52 * v49 * v48 * v47 * v46 * v21 * v42 * v41 * v22 * v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(unsigned __int8 *)(a1 + 9);
  if (((v23 * v20) & 0x800000000000000) != 0) {
    uint64_t v24 = (16 * v23 * v20) | 0xE;
  }
  else {
    uint64_t v24 = (16 * v23 * v20) | 7;
  }
  uint64_t v25 = *(unsigned __int8 *)(a1 + 17);
  if (((v25 * v20) & 0x800000000000000) != 0) {
    uint64_t v26 = (16 * v25 * v20) | 0xE;
  }
  else {
    uint64_t v26 = (16 * v25 * v20) | 7;
  }
  uint64_t v43 = *(void *)(a1 + 264);
  uint64_t v45 = v43 + *(void *)(a1 + 256) * (v21 - 1) + v15 + v34;
  int v27 = ZinKernelFormatGetTypeno(v13);
  if (v23) {
    uint64_t v28 = v20;
  }
  else {
    uint64_t v28 = 0;
  }
  if (v25) {
    uint64_t v29 = v20;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = v44;
  if (!v13) {
    uint64_t v30 = 0;
  }
  if (snprintf(v37, v38, "%s:t%u=s%lulut:ar1;0;%d;%d,0,%lu;pal:ar1;0;%lu;%u,%lu,%lu;ocgs:ar1;0;%lu;%u=s%lu,%luscale:ar1;0;%lu;%u,0,%lu;bi"
         "as:ar1;0;%lu;%u,%lu,%lu;weights:ar1;0;%lu;ar1;0;%d;ar1;0;%d;ar1;0;%d;ar1;0;%lu;ar1;0;%lu;ar1;0;%lu;ar1;0;%lu;ar"
         "1;0;%d;ar1;0;%d;ar1;0;%d;%d,%lu,%lu,%lu,%lu",
         v36,
         *v53,
         v45,
         v35,
         8,
         8 * v34,
         8 * v15 / v32,
         v33,
         v34,
         8 * v15,
         v50,
         *v53 + 1,
         v39,
         v43,
         v28,
         5,
         v24 & 0xFFFFFFFFFFFFFFF8,
         v29,
         5,
         v24 >> 3,
         v26 & 0xFFFFFFFFFFFFFFF8,
         v30,
         v52,
         v49,
         v51,
         v48,
         v47,
         v46,
         v20,
         v42,
         v41,
         v22,
         v27,
         (v26 >> 3) + (v24 >> 3),
         v40,
         v15 + v34,
         8 * v39) >= v38)
    return 14102;
  uint64_t v5 = 0;
  *v53 += 2;
  return v5;
}

uint64_t ZinKernelFormatGetTypeno(int a1)
{
  if ((a1 - 1) > 0x1D) {
    return 0;
  }
  else {
    return word_211EFEF5C[a1 - 1];
  }
}

void ZinKernelDescriptorGetStab_cold_1()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Invalid palette information.\n", v0, 2u);
}

uint64_t ZinPEElementWisePerf::GetPECostPerPatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t *a8)
{
  a8[3] = (a5 + a7 - 1) / a7 * ((a4 + a6 - 1) / a6);
  unsigned __int8 v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  unint64_t v10 = a8[3];
  uint64_t v11 = 4;
  if ((v9 & (v10 < 4)) == 0) {
    uint64_t v11 = a8[3];
  }
  a8[1] = v10;
  a8[2] = v11;
  *a8 = v10;
  return 0;
}

BOOL ZinPEElementWisePerf::HasReduction(ZinPEElementWisePerf *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 42) + 24);
  return v1 && *(void *)(v1 + 504) != 0;
}

double ZinDynamicRange::ZinAbsRange(float **a1)
{
  uint64_t v1 = *a1;
  int v2 = a1[1];
  if (*a1 == v2) {
    return 0.0;
  }
  char v3 = 0;
  LODWORD(result) = 2139095039;
  float v5 = 1.1755e-38;
  do
  {
    float v6 = fabsf(*v1);
    if (v6 != INFINITY)
    {
      if (*(float *)&result >= v6) {
        float v7 = v6;
      }
      else {
        float v7 = *(float *)&result;
      }
      if (*v1 != 0.0) {
        *(float *)&double result = v7;
      }
      if (v6 >= v5) {
        float v5 = v6;
      }
      char v3 = 1;
    }
    ++v1;
  }
  while (v1 != v2);
  if ((v3 & 1) == 0) {
    *(float *)&double result = 0.0;
  }
  return result;
}

void ZinDynamicRange::ZinConvertToFP32WithShift(float **a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::string __p = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (a2 >= a3)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinDynamicRange::ZinConvertToFP32WithShift();
    }
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 8) = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((void *)(a4 + 8), 0, 0, 0);
  }
  else
  {
    double v8 = ZinDynamicRange::ZinAbsRange(a1);
    float v9 = *(float *)&v8;
    float v11 = v10;
    LOBYTE(v12) = 0;
    if (*(float *)&v8 <= 0.000015259 && a2 < 0)
    {
      int v12 = 0;
      BOOL v13 = (LODWORD(v8) & 0x7FFFFFFFu) > 0x7F7FFFFF;
      int v14 = 1;
      do
      {
        --v12;
        float v15 = ldexp(1.0, v14);
        float v16 = fabsf(v9 * v15);
        if (v16 > 3.4028e38) {
          float v16 = 3.4028e38;
        }
        if (v13) {
          float v16 = 0.0;
        }
        ++v14;
      }
      while (v16 < 0.000015259 && v12 > a2);
    }
    float v18 = ldexpf(1.0, -(char)v12);
    uint64_t v19 = *a1;
    uint64_t v20 = a1[1];
    if (*a1 == v20)
    {
      uint64_t v20 = *a1;
    }
    else
    {
      char v21 = 0;
      float v22 = 1.1755e-38;
      uint64_t v23 = *a1;
      do
      {
        while (fabsf(*v23) != INFINITY)
        {
          float v24 = fabsf(v18 * *v23);
          if (v24 >= v22) {
            float v22 = v24;
          }
          ++v23;
          char v21 = 1;
          if (v23 == v20) {
            goto LABEL_27;
          }
        }
        ++v23;
      }
      while (v23 != v20);
      if ((v21 & 1) == 0) {
        goto LABEL_39;
      }
LABEL_27:
      if (v22 > 32768.0 && a3 > (char)v12)
      {
        int v25 = ~(char)v12 << 24;
        int v26 = (char)v12 + 1;
        do
        {
          int v12 = v26;
          double v27 = ldexp(1.0, v25 >> 24);
          if ((LODWORD(v11) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
            break;
          }
          float v28 = v27;
          float v29 = fabsf(v11 * v28);
          if (v29 < 1.1755e-38) {
            float v29 = 1.1755e-38;
          }
          v25 -= 0x1000000;
          int v26 = v12 + 1;
        }
        while (v29 > 32768.0 && v12 < a3);
        uint64_t v19 = *a1;
        uint64_t v20 = a1[1];
      }
    }
LABEL_39:
    std::vector<float>::reserve(&__p, v20 - v19);
    uint64_t v31 = *a1;
    uint64_t v32 = a1[1];
    if (*a1 == v32)
    {
      uint64_t v37 = (uint64_t)v47;
    }
    else
    {
      do
      {
        float v33 = *v31;
        float v34 = ldexp(1.0, -(char)v12);
        float v35 = v33 * v34;
        uint64_t v36 = v47;
        if (v47 >= v48)
        {
          size_t v38 = (float *)__p;
          uint64_t v39 = ((char *)v47 - (unsigned char *)__p) >> 2;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62) {
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = (char *)v48 - (unsigned char *)__p;
          if (((char *)v48 - (unsigned char *)__p) >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v48, v42);
            size_t v38 = (float *)__p;
            uint64_t v36 = v47;
          }
          else
          {
            uint64_t v43 = 0;
          }
          uint64_t v44 = (float *)&v43[4 * v39];
          *uint64_t v44 = v35;
          uint64_t v37 = (uint64_t)(v44 + 1);
          while (v36 != v38)
          {
            int v45 = *((_DWORD *)v36-- - 1);
            *((_DWORD *)v44-- - 1) = v45;
          }
          std::string __p = v44;
          uint64_t v47 = (float *)v37;
          uint64_t v48 = (float *)&v43[4 * v42];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *uint64_t v47 = v35;
          uint64_t v37 = (uint64_t)(v36 + 1);
        }
        uint64_t v47 = (float *)v37;
        ++v31;
      }
      while (v31 != v32);
    }
    *(unsigned char *)a4 = v12;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 8) = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((void *)(a4 + 8), __p, v37, (v37 - (uint64_t)__p) >> 2);
    if (__p)
    {
      uint64_t v47 = (float *)__p;
      operator delete(__p);
    }
  }
}

void sub_21125B3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinDynamicRange::VectorMinMax(ZinDynamicRange *this, const ZinIrVector *a2, float *a3, float *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 7);
  if (!v4) {
    goto LABEL_14;
  }
  BOOL v13 = a2;
  int v14 = a3;
  uint64_t v6 = 0;
  char v7 = 0;
  float v8 = 3.4028e38;
  float v9 = -3.4028e38;
  float v10 = &_os_log_internal;
  do
  {
    ZinIrVector::GetAt<float>((uint64_t)this, v6);
    if (fabsf(v11) == INFINITY)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 136315394;
        float v16 = "VectorMinMax";
        __int16 v17 = 2048;
        uint64_t v18 = v6;
        _os_log_impl(&dword_210C72000, v10, OS_LOG_TYPE_INFO, "%s: bias INF value detected at offset %zu", buf, 0x16u);
      }
    }
    else
    {
      if (v11 < v8) {
        float v8 = v11;
      }
      if (v11 > v9) {
        float v9 = v11;
      }
      char v7 = 1;
    }
    ++v6;
  }
  while (v4 != v6);
  a2 = v13;
  a3 = v14;
  if (v7)
  {
    *(float *)BOOL v13 = v8;
    *int v14 = v9;
    return 1;
  }
  else
  {
LABEL_14:
    uint64_t result = 0;
    *a3 = 0.0;
    *(_DWORD *)a2 = 0;
  }
  return result;
}

void ZinDynamicRange::ZinConvertToFP32WithShift()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_210C72000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Not a valid range to accomodate fp16, returning shift of 0\n", v0, 2u);
}

void ZinCopyLayer::LowerEngine(void *a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)a1[11];
  uint64_t v3 = *(void *)(v2 + 16);
  if (*((char *)a1 + 47) >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 47);
  }
  else {
    size_t v4 = a1[4];
  }
  float v5 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v4 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    float v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*((char *)a1 + 47) >= 0) {
      uint64_t v6 = a1 + 3;
    }
    else {
      uint64_t v6 = (const void *)a1[3];
    }
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 95;
  char v7 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v21, "copy_lowerengine");
  float v8 = std::string::append(v7, "_xfm", 4uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v26 = v8->__r_.__value_.__r.__words[2];
  long long v25 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v26 >= 0) {
    float v10 = (const std::string::value_type *)&v25;
  }
  else {
    float v10 = (const std::string::value_type *)v25;
  }
  if (v26 >= 0) {
    std::string::size_type v11 = HIBYTE(v26);
  }
  else {
    std::string::size_type v11 = *((void *)&v25 + 1);
  }
  int v12 = std::string::append(&v23, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  __n128 v14 = ZinObjectNameFactory::ZinObjectNameFactory(&v24, __p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = *(unsigned int *)((*(uint64_t (**)(void *, void, void, __n128))(*a1 + 32))(a1, 0, 0, v14)
                        + 88);
  uint64_t v16 = (*(uint64_t (**)(void *, void, void))(*a1 + 32))(a1, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v16, &v20);
  v19[0] = 0;
  v19[168] = 0;
  ZinBuilder::CreateNEBypass(v3, (uint64_t)&v24, v2, v15, &v20, 0, (uint64_t)v19, 1.0);
}

void sub_21125B96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *__p, uint64_t a17)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  *(void *)(v17 - 136) = &unk_26C34DA98;
  if (*(char *)(v17 - 105) < 0) {
    operator delete(*(void **)(v17 - 128));
  }
  _Unwind_Resume(a1);
}

void ZinCopyLayer::Clone()
{
}

void sub_21125BB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  MEMORY[0x21667D3C0](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

void *ZinCopyLayer::OpCodeKindToString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "COPY");
}

uint64_t ZinCopyLayer::DebugDetailPrint(ZinCopyLayer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 184))();
}

void ZinCopyLayer::Lower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_210C72000, &_os_log_internal, a3, "Lowering Copy failed while Reinterpret casting\n", a5, a6, a7, a8, 0);
}

void ZinObjectGeneration::Make()
{
}

void sub_21125BD84(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v1, 0xE1C40CDB54DAALL);
  _Unwind_Resume(a1);
}

uint64_t ZinObjectGeneration::AddBaseTypes(ZinObjectGeneration *this)
{
  uint64_t v2 = 0;
  long long v13 = xmmword_211EFEFC0;
  while (1)
  {
    uint64_t v3 = ZinObjectGeneration::AddBaseTypes(void)::base_types[v2];
    uint64_t v4 = ZinComputeMutableProgramWrapper::AddSymbol(*((void *)this + 6), 0, (uint64_t)&v13, (uint64_t)v3, 0, 0, 0);
    if (v4) {
      break;
    }
    if (++v2 == 23) {
      return v4;
    }
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
    ZinObjectGeneration::AddBaseTypes((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
  }
  return v4;
}

void ZinObjectGeneration::ZinObjectGeneration(uint64_t a1, void *a2, int a3, int a4)
{
  *(void *)a1 = &unk_26C34D0A8;
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = a2[1];
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  int v5 = a3;
  int v6 = 128;
  int v7 = a4;
  long long v8 = xmmword_211EEF7A0;
  int v9 = 0;
  int v4 = 0;
  operator new();
}

void sub_21125BF58(_Unwind_Exception *a1)
{
  MEMORY[0x21667D3C0](v2, 0x1022C409972253CLL);
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ZinObjectGeneration::~ZinObjectGeneration(ZinComputeMutableProgramWrapper **this)
{
  *this = (ZinComputeMutableProgramWrapper *)&unk_26C34D0A8;
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](this + 6, 0);
}

{
  uint64_t vars8;

  *this = (ZinComputeMutableProgramWrapper *)&unk_26C34D0A8;
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](this + 6, 0);

  JUMPOUT(0x21667D3C0);
}

uint64_t *ZinObjectGeneration::SetMemoryPools(void *a1, void *a2)
{
  int v10 = 2;
  int v4 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v10);
  if (v4) {
    uint64_t v5 = v4[3];
  }
  else {
    uint64_t v5 = 0;
  }
  a1[3] = v5;
  int v11 = 1;
  int v6 = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v11);
  if (v6) {
    uint64_t v7 = v6[3];
  }
  else {
    uint64_t v7 = 0;
  }
  a1[4] = v7;
  int v12 = 0;
  uint64_t result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::find<ZinIrDimension>(a2, &v12);
  if (result) {
    uint64_t v9 = result[3];
  }
  else {
    uint64_t v9 = 0;
  }
  a1[5] = v9;
  return result;
}

void ZinObjectGeneration::AddTensorDebugInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t Program = ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  uint64_t v10 = Program;
  if (a5) {
    char v11 = 32;
  }
  else {
    char v11 = 0x80;
  }
  v19[0] = 0;
  v19[1] = a4;
  BYTE4(v19[0]) = v11;
  HIWORD(v19[0]) = *(_WORD *)(Program + 216);
  if (*(char *)(a3 + 23) >= 0) {
    int v12 = (const char *)a3;
  }
  else {
    int v12 = *(const char **)a3;
  }
  ZinTensorDescriptorGetStab(a2, v12, (unsigned __int16 *)(Program + 216), v20, 0x200uLL);
  if (ZinComputeMutableProgramAddSymbol<ZinComputeMutableProgram>(v10, 0, (uint64_t)v19, v20, 0, 0, 0))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      ZinObjectGeneration::AddTensorDebugInfo(a3 + 23, a3, v13, v14, v15, v16, v17, v18);
    }
  }
}

uint64_t ZinObjectGeneration::AddExternSymbol(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 < *(void *)(*a4 + 32)) {
    ZinAssertImpl("Adding out of bounds symbol to section");
  }
  uint64_t v21 = 0;
  unint64_t v22 = v4;
  if (a2 == a3) {
    char v9 = 15;
  }
  else {
    char v9 = 14;
  }
  BYTE4(v21) = v9;
  uint64_t Program = ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  char v11 = (char *)(a2 + 160);
  if (*(char *)(a2 + 183) < 0) {
    char v11 = *(char **)(a2 + 160);
  }
  uint64_t ComputeProgramMutableSymbolSize = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)a2);
  if (ZinComputeMutableProgramAddSymbol<ZinComputeMutableProgram>(Program, a4, (uint64_t)&v21, v11, 0, ComputeProgramMutableSymbolSize, 0))ZinAssertImpl("Failed to create a symbol with the given name and size\n", v21); {
  if (((v21 & 0x100000000) != 0 || *(unsigned char *)(*(void *)(a1 + 16) + 100)) && *(_DWORD *)(a2 + 156) == 1)
  }
    ZinObjectGeneration::AddTensorDebugInfo(a1, a2 + 208, a2 + 160, v22 - *(void *)(*a4 + 32), BYTE4(v21) & 1);
  unint64_t v13 = v22;
  unint64_t v14 = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)a2) + v13 - *(void *)(*a4 + 32);
  if (*(void *)(*a4 + 40) < v14) {
    *(void *)(*a4 + 4std::unique_ptr<ZinIntervalTree<ZinIrSymbol *,ZinIrSymbol::Compare,ZinLiveRange>>::reset[abi:ne180100]((void **)this + 6, 0) = v14;
  }
  uint64_t v15 = *(void **)(a2 + 488);
  uint64_t v16 = (void *)(a2 + 496);
  if (v15 != v16)
  {
    do
    {
      ZinObjectGeneration::AddExternSymbol(a1, v15[4], a3, a4);
      uint64_t v17 = (void *)v15[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v15[2];
          BOOL v19 = *v18 == (void)v15;
          uint64_t v15 = v18;
        }
        while (!v19);
      }
      uint64_t v15 = v18;
    }
    while (v18 != v16);
  }
  return 0;
}

uint64_t ZinObjectGenerationLegacy::AddFVMLIBWithSymbol(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t Program = ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  int v12 = (char **)Program;
  uint64_t v13 = *(void *)(*(void *)(a2 + 8) + 128);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 8);
    return ZinObjectGenerationLegacy::CreateFVMLIB(a1, v12, v14, a2, a3, a4, *(void *)(*(void *)(a1 + 8) + 512), a6);
  }
  if (!ZinComputeMutableProgramAddSegment<ZinComputeMutableProgram>(Program))
  {
    uint64_t v14 = 0;
    return ZinObjectGenerationLegacy::CreateFVMLIB(a1, v12, v14, a2, a3, a4, *(void *)(*(void *)(a1 + 8) + 512), a6);
  }
  return 3;
}

uint64_t ZinObjectGenerationLegacy::CreateFVMLIB(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, uint64_t a8)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(void *)float v33 = 0;
  uint64_t v8 = *(void *)(a4 + 16);
  if (v8 != *(void *)(a4 + 24))
  {
    BOOL v20 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v20) {
      ZinObjectGenerationLegacy::CreateFVMLIB(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    return 3;
  }
  uint64_t v16 = *(void *)(a4 + 8);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v35 = *(unint64_t *)"__FVMLIB";
  if (*(char *)(a5 + 23) >= 0) {
    uint64_t v17 = (const char *)a5;
  }
  else {
    uint64_t v17 = *(const char **)a5;
  }
  strcpy(__dst, v17);
  int v18 = ZinLog2OfPow2(a7);
  *(void *)&long long v36 = v8;
  DWORD1(v37) = v18;
  LODWORD(v38) = a6;
  if (ZinComputeMutableProgramAddSection<ZinComputeMutableProgram>((uint64_t)a2, a3)
    || ZinComputeMutableProgramAddSectionSymbol<ZinComputeMutableProgram>((uint64_t)a2, *(const char ***)v33, 0))
  {
    return 3;
  }
  if (!*(void *)(v16 + 128))
  {
    if (*(void *)(a4 + 16)) {
      ZinAssertImpl("Invalid symbol base offset");
    }
    ZinIrSection::SetComputeProgramSectionAndTransferBarId(v16, *(uint64_t *)v33);
  }
  BOOL v19 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a8, (void **)(a4 + 160));
  if ((void **)(a8 + 8) == v19) {
    ZinAssertImpl("Failed to find library name for live tensor\n");
  }
  if (*((char *)v19 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__dst, (const std::string::value_type *)v19[7], (std::string::size_type)v19[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v19 + 7);
    *(void *)&long long v35 = v19[9];
  }
  v32[0] = 0;
  v32[1] = 0;
  if ((SBYTE7(v35) & 0x80u) == 0) {
    float v29 = __dst;
  }
  else {
    float v29 = *(char **)__dst;
  }
  if (ZinComputeMutableProgramAddFvmlib(a2, *(uint64_t *)v33, (uint64_t)v32, v29, 0)) {
    ZinAssertImpl("ZinComputeMutableProgramAddFvmlib failed.");
  }
  uint64_t v30 = a4;
  do
  {
    uint64_t v31 = v30;
    uint64_t v30 = *(void *)(v30 + 512);
  }
  while (v30);
  ZinObjectGeneration::AddExternSymbol(a1, v31, a4, *(void **)v33);
  if (SBYTE7(v35) < 0) {
    operator delete(*(void **)__dst);
  }
  return 0;
}

void sub_21125C6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinObjectGenerationLegacy::AddLiveIOFVMLIB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 104);
  if (!v7 || (uint64_t v8 = *(uint64_t **)(v7 + 40), v8 == *(uint64_t **)(v7 + 48))) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *v8;
  }
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  switch((int)a3)
  {
    case 0:
      HIBYTE(v16) = 7;
      qmemcpy(v15, "__const", 7);
      uint64_t v10 = 1;
      int v11 = 33;
      goto LABEL_10;
    case 1:
      HIBYTE(v16) = 6;
      qmemcpy(v15, "__data", 6);
      uint64_t v10 = 2;
      int v11 = 35;
      goto LABEL_10;
    case 2:
      HIBYTE(v16) = 6;
      qmemcpy(v15, "__data", 6);
      uint64_t v10 = 3;
      int v11 = 53;
      goto LABEL_10;
    case 3:
      return a3;
    default:
      uint64_t v10 = 0;
      int v11 = 1;
LABEL_10:
      a3 = ZinObjectGenerationLegacy::AddFVMLIBWithSymbol(a1, v9, (uint64_t)v15, v11, v10, a4);
      if (!a3)
      {
        uint64_t v12 = *(void *)(a2 + 104);
        if (!v12) {
          return 0;
        }
        uint64_t v13 = *(void *)(v12 + 64);
        if (!v13) {
          return 0;
        }
        a3 = ZinObjectGenerationLegacy::AddFVMLIBWithSymbol(a1, v13, (uint64_t)v15, v11, v10, a4);
        if (!a3) {
          return 0;
        }
      }
      return a3;
  }
}

uint64_t ZinObjectGeneration::HandleSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v19 = 0;
  uint64_t v13 = *(void *)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_211F4AA5D);
  int v14 = ZinComputeMutableProgramWrapper::AddSectionAndSymbol(v13, a2, a4, a5, 0, a6, a7, (uint64_t)__p, &v19);
  int v15 = v14;
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (v15) {
      return 3;
    }
  }
  else if (v14)
  {
    return 3;
  }
  ZinIrSection::SetComputeProgramSectionAndTransferBarId(a3, v19);
  return 0;
}

void sub_21125C958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinObjectGeneration::BuildComputeProgram(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    ZinIrMemoryPool::GetSections(v2, 1, &__p);
    uint64_t v3 = *(void *)(v99 + 16);
    std::__list_imp<ZinIrSection *>::clear(&__p);
    ZinIrMemoryPool::GetSections(*(void *)(a1 + 40), 0, &__p);
    uint64_t v4 = *(void *)(v99 + 16);
    std::__list_imp<ZinIrSection *>::clear(&__p);
    ZinIrMemoryPool::GetSections(*(void *)(a1 + 40), 8, &__p);
    if (v100)
    {
      if (*(void *)(*(void *)(v99 + 16) + 32)) {
        uint64_t v5 = *(void *)(v99 + 16);
      }
      else {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    ZinIrMemoryPool::GetSections(*(void *)(a1 + 40), 4, v96);
    uint64_t v7 = *((void *)v96[1] + 2);
    std::__list_imp<ZinIrSection *>::clear(v96);
    ZinIrMemoryPool::GetSections(*(void *)(a1 + 40), 6, v96);
    if (v97)
    {
      ZinIrMemoryPool::GetSections(*(void *)(a1 + 40), 6, v94);
      uint64_t v6 = *((void *)v94[1] + 2);
      std::__list_imp<ZinIrSection *>::clear(v94);
    }
    else
    {
      uint64_t v6 = 0;
    }
    std::__list_imp<ZinIrSection *>::clear(v96);
    std::__list_imp<ZinIrSection *>::clear(&__p);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    ZinIrMemoryPool::GetSections(v8, 4, &__p);
    uint64_t v9 = *(void *)(v99 + 16);
    std::__list_imp<ZinIrSection *>::clear(&__p);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  if (!v10)
  {
    uint64_t v90 = 0;
    if (v9) {
      goto LABEL_17;
    }
LABEL_19:
    BOOL v11 = 0;
    goto LABEL_20;
  }
  ZinIrMemoryPool::GetSections(v10, 4, &__p);
  uint64_t v90 = *(void *)(v99 + 16);
  std::__list_imp<ZinIrSection *>::clear(&__p);
  if (!v9) {
    goto LABEL_19;
  }
LABEL_17:
  BOOL v11 = *(void *)(v9 + 32) != 0;
LABEL_20:
  if (ZinObjectGeneration::AddBaseTypes((ZinObjectGeneration *)a1)) {
    return 3;
  }
  ZinComputeMutableProgramWrapper::SetNextStabTypeno(*(ZinComputeMutableProgramWrapper **)(a1 + 48), 24);
  if (v3)
  {
    v94[0] = 0;
    uint64_t v13 = *(void *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
    int v14 = ZinComputeMutableProgramWrapper::AddSegment(v13, (uint64_t)&__p, 5, 0, (uint64_t)v94);
    int v15 = v14;
    if (SHIBYTE(v100) < 0)
    {
      operator delete(__p);
      if (v15) {
        return 3;
      }
    }
    else if (v14)
    {
      return 3;
    }
    uint64_t v16 = v94[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
    std::string::basic_string[abi:ne180100]<0>(v96, "__text");
    int v17 = ZinObjectGeneration::HandleSection(a1, (uint64_t)v16, v3, (uint64_t)&__p, (uint64_t)v96, *(void *)(*(void *)(a1 + 8) + 512), 40);
    if (SHIBYTE(v97) < 0) {
      operator delete(v96[0]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v17) {
      return 3;
    }
  }
  uint64_t v93 = 0;
  if (v4 | v5)
  {
    uint64_t v18 = *(void *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
    int v19 = ZinComputeMutableProgramWrapper::AddSegment(v18, (uint64_t)&__p, 1, 0, (uint64_t)&v93);
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v19) {
      return 3;
    }
    if (v4)
    {
      uint64_t v20 = v93;
      std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
      std::string::basic_string[abi:ne180100]<0>(v96, "__const");
      int v21 = ZinObjectGeneration::HandleSection(a1, v20, v4, (uint64_t)&__p, (uint64_t)v96, *(void *)(*(void *)(a1 + 8) + 528), 38);
      if (SHIBYTE(v97) < 0) {
        operator delete(v96[0]);
      }
      if (SHIBYTE(v100) < 0) {
        operator delete(__p);
      }
      if (v21) {
        return 3;
      }
    }
    if (v5)
    {
      uint64_t v22 = v93;
      std::string::basic_string[abi:ne180100]<0>(&__p, "__TEXT");
      std::string::basic_string[abi:ne180100]<0>(v96, "__jit_const");
      int v23 = ZinObjectGeneration::HandleSection(a1, v22, v5, (uint64_t)&__p, (uint64_t)v96, *(void *)(*(void *)(a1 + 8) + 528), 54);
      if (SHIBYTE(v97) < 0) {
        operator delete(v96[0]);
      }
      if (SHIBYTE(v100) < 0) {
        operator delete(__p);
      }
      if (v23) {
        return 3;
      }
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 16) + 100))
  {
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v24 = *(void *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DEBUG");
    int v25 = ZinComputeMutableProgramWrapper::AddSegment(v24, (uint64_t)&__p, 0, 0, (uint64_t)&v92);
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v25) {
      return 3;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_211F4AA5D);
    uint64_t v26 = *(void *)(a1 + 48);
    uint64_t v27 = v92;
    std::string::basic_string[abi:ne180100]<0>(v96, "__DEBUG");
    std::string::basic_string[abi:ne180100]<0>(v94, "__debug_info");
    int v28 = ZinComputeMutableProgramWrapper::AddSectionAndSymbol(v26, v27, (uint64_t)v96, (uint64_t)v94, 0, 4, 50, (uint64_t)&__p, &v91);
    if (v95 < 0) {
      operator delete(v94[0]);
    }
    if (SHIBYTE(v97) < 0) {
      operator delete(v96[0]);
    }
    if (v28)
    {
      BOOL v29 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      if (v29) {
        ZinObjectGeneration::BuildComputeProgram(v29, v30, v31, v32, v33, v34, v35, v36);
      }
    }
    else
    {
      *(void *)(a1 + 56) = v91;
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v28) {
      return 3;
    }
  }
  if (v7 && *(void *)(v7 + 32))
  {
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v37 = *(void *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DATA");
    int v38 = ZinComputeMutableProgramWrapper::AddSegment(v37, (uint64_t)&__p, 3, 0, (uint64_t)&v92);
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v38) {
      return 3;
    }
    uint64_t v39 = *(void *)(a1 + 48);
    uint64_t v40 = v92;
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DATA");
    std::string::basic_string[abi:ne180100]<0>(v96, "__bss");
    uint64_t v41 = *(void *)(v7 + 32);
    uint64_t v42 = *(void *)(*(void *)(a1 + 8) + 528);
    std::string::basic_string[abi:ne180100]<0>(v94, &byte_211F4AA5D);
    int v43 = ZinComputeMutableProgramWrapper::AddSectionAndSymbol(v39, v40, (uint64_t)&__p, (uint64_t)v96, v41, v42, 37, (uint64_t)v94, &v91);
    if (v95 < 0) {
      operator delete(v94[0]);
    }
    if (SHIBYTE(v97) < 0) {
      operator delete(v96[0]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v43) {
      return 3;
    }
    ZinIrSection::SetComputeProgramSectionAndTransferBarId(v7, v91);
    uint64_t v44 = *(void **)(v7 + 64);
    if (v44 != (void *)(v7 + 72))
    {
      while (1)
      {
        uint64_t v45 = v44[4];
        uint64_t v46 = *(void *)(v45 + 16);
        std::string __p = (void *)0xE00000000;
        uint64_t v99 = v46;
        uint64_t v47 = (void *)(v45 + 160);
        if (*(char *)(v45 + 183) < 0) {
          uint64_t v47 = (void *)*v47;
        }
        uint64_t v48 = *(void *)(a1 + 48);
        uint64_t v49 = v91;
        uint64_t ComputeProgramMutableSymbolSize = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)v45);
        if (ZinComputeMutableProgramWrapper::AddSymbol(v48, v49, (uint64_t)&__p, (uint64_t)v47, 0, ComputeProgramMutableSymbolSize, 0))break; {
        if (*(unsigned char *)(*(void *)(a1 + 16) + 100))
        }
          ZinObjectGeneration::AddTensorDebugInfo(a1, v44[4] + 208, v44[4] + 160, v99, 0);
        uint64_t v51 = (void *)v44[1];
        if (v51)
        {
          do
          {
            uint64_t v52 = v51;
            uint64_t v51 = (void *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            uint64_t v52 = (void *)v44[2];
            BOOL v53 = *v52 == (void)v44;
            uint64_t v44 = v52;
          }
          while (!v53);
        }
        uint64_t v44 = v52;
        if (v52 == (void *)(v7 + 72)) {
          goto LABEL_87;
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinObjectGeneration::BuildComputeProgram((uint64_t)(v44 + 4), v83, v84, v85, v86, v87, v88, v89);
      }
      return 3;
    }
  }
LABEL_87:
  if (v6)
  {
    v94[0] = 0;
    uint64_t v54 = *(void *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DYNSHAPE");
    int v55 = ZinComputeMutableProgramWrapper::AddSegment(v54, (uint64_t)&__p, 0, 0, (uint64_t)v94);
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v55) {
      return 3;
    }
    uint64_t v56 = v94[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, "__DYNSHAPE");
    std::string::basic_string[abi:ne180100]<0>(v96, "__text");
    int v57 = ZinObjectGeneration::HandleSection(a1, (uint64_t)v56, v6, (uint64_t)&__p, (uint64_t)v96, *(void *)(*(void *)(a1 + 8) + 528), 46);
    if (SHIBYTE(v97) < 0) {
      operator delete(v96[0]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v57) {
      return 3;
    }
  }
  if (v11)
  {
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v58 = *(void *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(&__p, "__L3");
    int v59 = ZinComputeMutableProgramWrapper::AddSegment(v58, (uint64_t)&__p, 3, 0, (uint64_t)&v92);
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v59) {
      return 3;
    }
    uint64_t v60 = *(void *)(a1 + 48);
    uint64_t v61 = v92;
    std::string::basic_string[abi:ne180100]<0>(&__p, "__L3");
    std::string::basic_string[abi:ne180100]<0>(v96, "__bss");
    uint64_t v62 = *(void *)(v9 + 32);
    uint64_t v63 = *(void *)(*(void *)(a1 + 8) + 528);
    std::string::basic_string[abi:ne180100]<0>(v94, &byte_211F4AA5D);
    int v64 = ZinComputeMutableProgramWrapper::AddSectionAndSymbol(v60, v61, (uint64_t)&__p, (uint64_t)v96, v62, v63, 37, (uint64_t)v94, &v91);
    if (v95 < 0) {
      operator delete(v94[0]);
    }
    if (SHIBYTE(v97) < 0) {
      operator delete(v96[0]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(__p);
    }
    if (v64) {
      return 3;
    }
    ZinIrSection::SetComputeProgramSectionAndTransferBarId(v9, v91);
    int64x2_t v65 = *(void **)(v9 + 64);
    uint64_t v66 = (void *)(v9 + 72);
    if (v65 != (void *)(v9 + 72))
    {
      do
      {
        uint64_t v67 = v65[4];
        uint64_t v68 = *(void *)(v67 + 16);
        std::string __p = (void *)0xE00000000;
        uint64_t v99 = v68;
        uint64_t v69 = (void *)(v67 + 160);
        if (*(char *)(v67 + 183) < 0) {
          uint64_t v69 = (void *)*v69;
        }
        uint64_t v70 = *(void *)(a1 + 48);
        uint64_t v71 = v91;
        uint64_t v72 = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)v67);
        if (ZinComputeMutableProgramWrapper::AddSymbol(v70, v71, (uint64_t)&__p, (uint64_t)v69, 0, v72, 0))return 3; {
        if (*(unsigned char *)(*(void *)(a1 + 16) + 100))
        }
          ZinObjectGeneration::AddTensorDebugInfo(a1, v65[4] + 208, v65[4] + 160, v99, 0);
        uint64_t v73 = (void *)v65[1];
        if (v73)
        {
          do
          {
            int64x2_t v74 = v73;
            uint64_t v73 = (void *)*v73;
          }
          while (v73);
        }
        else
        {
          do
          {
            int64x2_t v74 = (void *)v65[2];
            BOOL v53 = *v74 == (void)v65;
            int64x2_t v65 = v74;
          }
          while (!v53);
        }
        int64x2_t v65 = v74;
      }
      while (v74 != v66);
    }
  }
  if (v90)
  {
    int64x2_t v75 = *(void **)(v90 + 64);
    if (v75 != (void *)(v90 + 72))
    {
      while (1)
      {
        uint64_t v76 = v75[4];
        uint64_t v77 = *(void *)(v76 + 16) + *(void *)(*(void *)(a1 + 24) + 32);
        std::string __p = (void *)0x2000200000000;
        uint64_t v99 = v77;
        long long v78 = (void *)(v76 + 160);
        if (*(char *)(v76 + 183) < 0) {
          long long v78 = (void *)*v78;
        }
        uint64_t v79 = *(void *)(a1 + 48);
        uint64_t v80 = ZinIrSymbol::GetComputeProgramMutableSymbolSize((ZinIrSymbol *)v76);
        if (ZinComputeMutableProgramWrapper::AddSymbol(v79, 0, (uint64_t)&__p, (uint64_t)v78, 0, v80, 0))break; {
        if (*(unsigned char *)(*(void *)(a1 + 16) + 100))
        }
          ZinObjectGeneration::AddTensorDebugInfo(a1, v75[4] + 208, v75[4] + 160, v99, 0);
        unint64_t v81 = (void *)v75[1];
        if (v81)
        {
          do
          {
            std::string v82 = v81;
            unint64_t v81 = (void *)*v81;
          }
          while (v81);
        }
        else
        {
          do
          {
            std::string v82 = (void *)v75[2];
            BOOL v53 = *v82 == (void)v75;
            int64x2_t v75 = v82;
          }
          while (!v53);
        }
        uint64_t result = 0;
        int64x2_t v75 = v82;
        if (v82 == (void *)(v90 + 72)) {
          return result;
        }
      }
      return 3;
    }
  }
  return 0;
}

void sub_21125D3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinObjectGenerationLegacy::BuildComputeProgram(uint64_t a1, void *a2, uint64_t a3)
{
  void v28[3] = *MEMORY[0x263EF8340];
  uint64_t v6 = ZinObjectGeneration::BuildComputeProgram(a1);
  if (!v6)
  {
    std::map<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>::map[abi:ne180100](v27, *a2 + 72);
    std::map<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>::map[abi:ne180100](v28, *a2 + 48);
    uint64_t v7 = 0;
    uint64_t v8 = &_os_log_internal;
    do
    {
      uint64_t v9 = &v27[3 * v7];
      uint64_t v12 = *v9;
      uint64_t v10 = v9 + 1;
      BOOL v11 = (long long *)v12;
      if ((uint64_t *)v12 != v10)
      {
        do
        {
          std::pair<std::string const,std::pair<IOType,std::vector<ZinIrTensor *>>>::pair[abi:ne180100](&__p, v11 + 2);
          uint64_t v13 = v25;
          int v14 = v26;
          if (v25 == v26)
          {
            int v15 = 1;
            if (v25) {
              goto LABEL_15;
            }
          }
          else
          {
            while (!*v13 || !ZinObjectGenerationLegacy::AddLiveIOFVMLIB(a1, *v13, v24, a3 + 48))
            {
              if (++v13 == v14)
              {
                int v15 = 1;
                goto LABEL_14;
              }
            }
            if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
              ZinObjectGenerationLegacy::BuildComputeProgram(&v21, v22);
            }
            int v15 = 0;
LABEL_14:
            uint64_t v13 = v25;
            if (v25)
            {
LABEL_15:
              uint64_t v26 = v13;
              operator delete(v13);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!v15)
          {
            uint64_t v6 = 3;
            goto LABEL_28;
          }
          uint64_t v16 = (uint64_t *)*((void *)v11 + 1);
          if (v16)
          {
            do
            {
              int v17 = v16;
              uint64_t v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              int v17 = (uint64_t *)*((void *)v11 + 2);
              BOOL v18 = *v17 == (void)v11;
              BOOL v11 = (long long *)v17;
            }
            while (!v18);
          }
          BOOL v11 = (long long *)v17;
        }
        while (v17 != v10);
      }
      ++v7;
    }
    while (v7 != 2);
    uint64_t v6 = 0;
LABEL_28:
    for (uint64_t i = 0; i != -6; i -= 3)
      std::__tree<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<IOType,std::vector<ZinIrTensor *>>>>>::destroy((uint64_t)&v27[i + 3], (void *)v28[i + 1]);
  }
  return v6;
}

void sub_21125D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

uint64_t ZinObjectGenerationRT::BuildComputeProgram(uint64_t a1)
{
  uint64_t result = ZinObjectGeneration::BuildComputeProgram(a1);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      ZinIrMemoryPool::GetSections(v3, 9, __p);
      if (v30)
      {
        ZinIrMemoryPool::GetSections(*(void *)(a1 + 40), 9, v27);
        uint64_t v4 = *((void *)v27[1] + 2);
        std::__list_imp<ZinIrSection *>::clear(v27);
        std::__list_imp<ZinIrSection *>::clear(__p);
        uint64_t v26 = 0;
        if (v4)
        {
          uint64_t v5 = *(void *)(a1 + 48);
          std::string::basic_string[abi:ne180100]<0>(__p, "__RUNTIME");
          int v6 = ZinComputeMutableProgramWrapper::AddSegment(v5, (uint64_t)__p, 1, 0, (uint64_t)&v26);
          int v7 = v6;
          if (SHIBYTE(v30) < 0)
          {
            operator delete(__p[0]);
            if (v7)
            {
LABEL_7:
              BOOL v8 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v8) {
                ZinObjectGenerationRT::BuildComputeProgram(v8, v9, v10, v11, v12, v13, v14, v15);
              }
              return 3;
            }
          }
          else if (v6)
          {
            goto LABEL_7;
          }
          uint64_t v16 = v26;
          std::string::basic_string[abi:ne180100]<0>(__p, "__RUNTIME");
          std::string::basic_string[abi:ne180100]<0>(v27, "__runtime");
          int v17 = ZinObjectGeneration::HandleSection(a1, v16, v4, (uint64_t)__p, (uint64_t)v27, 4, 64);
          if (v28 < 0) {
            operator delete(v27[0]);
          }
          if (SHIBYTE(v30) < 0)
          {
            operator delete(__p[0]);
            if (v17)
            {
LABEL_14:
              BOOL v18 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              if (v18) {
                ZinObjectGenerationRT::BuildComputeProgram(v18, v19, v20, v21, v22, v23, v24, v25);
              }
              return 3;
            }
          }
          else if (v17)
          {
            goto LABEL_14;
          }
          return 0;
        }
      }
      else
      {
        std::__list_imp<ZinIrSection *>::clear(__p);
      }
    }
    ZinAssertImpl("Missing the __runtime section");
  }
  return result;
}

void sub_21125D860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinObjectGeneration::Generate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFArrayRef *a5)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  int v6 = *(long long ***)(a2 + 16);
  uint64_t v83 = *(void **)(a2 + 8);
  uint64_t Program = ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  BOOL v8 = *v6;
  uint64_t v9 = v6[1];
  if (*v6 != v9)
  {
    uint64_t v10 = Program;
    do
    {
      if (!*((unsigned char *)v8 + 48))
      {
        uint64_t v12 = *((void *)v8 + 3);
        ZinIrSymbol::Descriptor::Descriptor(v95, v8, *((void *)v8 + 5));
        *(void *)std::string __p = *(void *)v95;
        if ((v95[31] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)&v95[8], *(std::string::size_type *)&v95[16]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)&v95[8];
          *(void *)&__p[24] = *(void *)&v95[24];
        }
        memcpy(v94, v96, sizeof(v94));
        uint64_t v19 = *((void *)v8 + 4);
        LOBYTE(v87) = 0;
        char v88 = 0;
        ZinIrSection::CreateSymbolAtOffset(v12, (uint64_t)__p, 0, v19, v19, 0, 0);
      }
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v11 = *v8;
        v89.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v11;
      }
      long long v13 = *(long long *)((char *)v8 + 24);
      long long v14 = *(long long *)((char *)v8 + 56);
      long long v91 = *(long long *)((char *)v8 + 40);
      long long v92 = v14;
      long long v90 = v13;
      if (BYTE9(v91)) {
        int v15 = 117440512;
      }
      else {
        int v15 = 83886080;
      }
      *(_DWORD *)char v95 = DWORD2(v90);
      *(_DWORD *)&v95[4] = v15;
      uint64_t v87 = 0;
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v16 = &v89;
      }
      else {
        uint64_t v16 = (std::string *)v89.__r_.__value_.__r.__words[0];
      }
      int v17 = ZinComputeMutableSectionAddReloc<ZinComputeMutableProgram>(v10, *(void ***)(v90 + 128), (char *)v16, v95, &v87);
      if (v17)
      {
        ZinIrNetworkStatus::SetError(a5, @"ComputeProgramError");
      }
      else
      {
        BOOL v18 = v87;
        unsigned char *v87 = BYTE10(v91);
        *(_OWORD *)(v18 + 8) = v92;
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (v17) {
        return 3;
      }
      BOOL v8 = (long long *)((char *)v8 + 72);
    }
    while (v8 != v9);
  }
  if (!*(unsigned char *)(*(void *)(a2 + 80) + 387)) {
    return 0;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)char v95 = _Q0;
  *(_OWORD *)&v95[16] = _Q0;
  *(void *)&v96[0] = 0xBFF0000000000000;
  *(_OWORD *)std::string __p = _Q0;
  *(_OWORD *)&__p[16] = _Q0;
  *(void *)&v94[0] = 0xBFF0000000000000;
  v89.__r_.__value_.__r.__words[0] = 0;
  *(void *)uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v25 = *(ZinIrHalParameters **)(a2 + 72);
  ZinIrHalParameters::GetMaxFrequenciesAndLevels(v25, (double *)&v89, &v86[1], v86);
  ZinIrHalParameters::GetClosestValidFrequency(v25, *(double *)&v89.__r_.__value_.__l.__data_ * 0.8, (double *)&v87);
  double v26 = *(double *)&v87;
  if (ZinPerfUtil::GetThreadPerformanceStats(*(ZinIrOpLayer ****)(a2 + 24), *(ZinIrHalParameters **)(a1 + 8), v86[1], v86[0], (uint64_t)v95, *(double *)&v89.__r_.__value_.__l.__data_ / 1000000.0)|| ZinPerfUtil::GetThreadPerformanceStats(*(ZinIrOpLayer ****)(a2 + 24), *(ZinIrHalParameters **)(a1 + 8), v86[1], v86[0], (uint64_t)__p, v26 / 1000000.0))
  {
    return 3;
  }
  char v28 = v83;
  unint64_t v29 = v83[20];
  uint64_t v30 = (char **)(v83 + 18);
  uint64_t v31 = (_OWORD *)v83[19];
  if ((unint64_t)v31 >= v29)
  {
    uint64_t v38 = 0x6DB6DB6DB6DB6DB7 * (((char *)v31 - *v30) >> 4);
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) > 0x249249249249249) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v40 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v29 - (void)*v30) >> 4);
    if (2 * v40 > v39) {
      unint64_t v39 = 2 * v40;
    }
    if (v40 >= 0x124924924924924) {
      unint64_t v41 = 0x249249249249249;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinRtProcedure>>((uint64_t)(v83 + 20), v41);
      char v28 = v83;
    }
    else
    {
      uint64_t v42 = 0;
    }
    int v43 = &v42[112 * v38];
    uint64_t v44 = &v42[112 * v41];
    long long v45 = *(_OWORD *)v95;
    long long v46 = v96[0];
    *((_OWORD *)v43 + 1) = *(_OWORD *)&v95[16];
    *((_OWORD *)v43 + 2) = v46;
    *(_OWORD *)int v43 = v45;
    long long v47 = v96[1];
    long long v48 = v96[2];
    long long v49 = v96[4];
    *((_OWORD *)v43 + 5) = v96[3];
    *((_OWORD *)v43 + 6) = v49;
    *((_OWORD *)v43 + 3) = v47;
    *((_OWORD *)v43 + 4) = v48;
    uint64_t v37 = v43 + 112;
    uint64_t v51 = (char *)v28[18];
    uint64_t v50 = (char *)v28[19];
    if (v50 != v51)
    {
      do
      {
        long long v52 = *((_OWORD *)v50 - 7);
        long long v53 = *((_OWORD *)v50 - 5);
        *((_OWORD *)v43 - 6) = *((_OWORD *)v50 - 6);
        *((_OWORD *)v43 - 5) = v53;
        *((_OWORD *)v43 - 7) = v52;
        long long v54 = *((_OWORD *)v50 - 4);
        long long v55 = *((_OWORD *)v50 - 3);
        long long v56 = *((_OWORD *)v50 - 1);
        *((_OWORD *)v43 - 2) = *((_OWORD *)v50 - 2);
        *((_OWORD *)v43 - 1) = v56;
        *((_OWORD *)v43 - 4) = v54;
        *((_OWORD *)v43 - 3) = v55;
        v43 -= 112;
        v50 -= 112;
      }
      while (v50 != v51);
      uint64_t v50 = *v30;
    }
    v28[18] = v43;
    v28[19] = v37;
    v28[20] = v44;
    if (v50) {
      operator delete(v50);
    }
  }
  else
  {
    long long v32 = *(_OWORD *)v95;
    long long v33 = v96[0];
    v31[1] = *(_OWORD *)&v95[16];
    _OWORD v31[2] = v33;
    *uint64_t v31 = v32;
    long long v34 = v96[1];
    long long v35 = v96[2];
    long long v36 = v96[4];
    v31[5] = v96[3];
    v31[6] = v36;
    v31[3] = v34;
    void v31[4] = v35;
    uint64_t v37 = v31 + 7;
  }
  v28[19] = v37;
  unint64_t v57 = v28[20];
  if ((unint64_t)v37 >= v57)
  {
    uint64_t v64 = 0x6DB6DB6DB6DB6DB7 * (((char *)v37 - *v30) >> 4);
    if ((unint64_t)(v64 + 1) > 0x249249249249249) {
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v65 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v57 - (void)*v30) >> 4);
    uint64_t v66 = 2 * v65;
    if (2 * v65 <= v64 + 1) {
      uint64_t v66 = v64 + 1;
    }
    if (v65 >= 0x124924924924924) {
      unint64_t v67 = 0x249249249249249;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67)
    {
      uint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinRtProcedure>>((uint64_t)(v83 + 20), v67);
      char v28 = v83;
    }
    else
    {
      uint64_t v68 = 0;
    }
    uint64_t v69 = &v68[112 * v64];
    uint64_t v70 = &v68[112 * v67];
    long long v71 = *(_OWORD *)__p;
    long long v72 = v94[0];
    *((_OWORD *)v69 + 1) = *(_OWORD *)&__p[16];
    *((_OWORD *)v69 + 2) = v72;
    *(_OWORD *)uint64_t v69 = v71;
    long long v73 = v94[1];
    long long v74 = v94[2];
    long long v75 = v94[4];
    *((_OWORD *)v69 + 5) = v94[3];
    *((_OWORD *)v69 + 6) = v75;
    *((_OWORD *)v69 + 3) = v73;
    *((_OWORD *)v69 + 4) = v74;
    uint64_t v63 = v69 + 112;
    uint64_t v77 = (char *)v28[18];
    uint64_t v76 = (char *)v28[19];
    if (v76 != v77)
    {
      do
      {
        long long v78 = *((_OWORD *)v76 - 7);
        long long v79 = *((_OWORD *)v76 - 5);
        *((_OWORD *)v69 - 6) = *((_OWORD *)v76 - 6);
        *((_OWORD *)v69 - 5) = v79;
        *((_OWORD *)v69 - 7) = v78;
        long long v80 = *((_OWORD *)v76 - 4);
        long long v81 = *((_OWORD *)v76 - 3);
        long long v82 = *((_OWORD *)v76 - 1);
        *((_OWORD *)v69 - 2) = *((_OWORD *)v76 - 2);
        *((_OWORD *)v69 - 1) = v82;
        *((_OWORD *)v69 - 4) = v80;
        *((_OWORD *)v69 - 3) = v81;
        v69 -= 112;
        v76 -= 112;
      }
      while (v76 != v77);
      uint64_t v76 = *v30;
    }
    v28[18] = v69;
    v28[19] = v63;
    v28[20] = v70;
    if (v76) {
      operator delete(v76);
    }
  }
  else
  {
    long long v58 = *(_OWORD *)__p;
    long long v59 = v94[0];
    v37[1] = *(_OWORD *)&__p[16];
    _OWORD v37[2] = v59;
    _OWORD *v37 = v58;
    long long v60 = v94[1];
    long long v61 = v94[2];
    long long v62 = v94[4];
    v37[5] = v94[3];
    v37[6] = v62;
    void v37[3] = v60;
    void v37[4] = v61;
    uint64_t v63 = v37 + 7;
  }
  uint64_t result = 0;
  v28[19] = v63;
  return result;
}

void sub_21125DEFC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinObjectGenerationLegacy::Generate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFArrayRef *a5)
{
  uint64_t v6 = a4;
  uint64_t v10 = ZinObjectGeneration::Generate(a1, a2, a3, a4, a5);
  if (v10) {
    return v10;
  }
  long long v82 = (uint64_t *)a3;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v104 = 0;
  long long v11 = *(long long **)(a2 + 8);
  long long v12 = *v11;
  long long v13 = v11[2];
  long long v92 = v11[1];
  long long v93 = v13;
  long long v91 = v12;
  long long v14 = v11[3];
  long long v15 = v11[4];
  long long v16 = v11[5];
  *(_OWORD *)&v96[9] = *(long long *)((char *)v11 + 89);
  long long v95 = v15;
  *(_OWORD *)unint64_t v96 = v16;
  long long v94 = v14;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = 0;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__init_with_size[abi:ne180100]<ZinDynamicOffsetCustomBarCmd*,ZinDynamicOffsetCustomBarCmd*>(&v97, *((void *)v11 + 14), *((void *)v11 + 15), (uint64_t)(*((void *)v11 + 15) - *((void *)v11 + 14)) >> 6);
  uint64_t v100 = *((void *)v11 + 17);
  std::string __p = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  std::vector<ThreadModeledPerformance>::__init_with_size[abi:ne180100]<ThreadModeledPerformance*,ThreadModeledPerformance*>(&__p, *((const void **)v11 + 18), *((void *)v11 + 19), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)v11 + 19) - *((void *)v11 + 18)) >> 4));
  uint64_t Program = ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
  unint64_t v86 = ZinMemCacheUtil::CalculateExpectedMemCacheSize(*(ZinIrOpLayer ****)(a2 + 24));
  if (BYTE8(v93)) {
    *((void *)&v92 + 1) = v86;
  }
  if (*(char *)(a2 + 55) >= 0) {
    int v17 = (char *)(a2 + 32);
  }
  else {
    int v17 = *(char **)(a2 + 32);
  }
  if (ZinComputeMutableProgramAddProcedure(Program, v17, &v106))
  {
    ZinIrNetworkStatus::SetError(a5, @"InvalidProcedure");
    goto LABEL_9;
  }
  uint64_t v79 = a2 + 32;
  long long v80 = a5;
  uint64_t v19 = v97;
  uint64_t v83 = v98;
  if (v98 == v97)
  {
LABEL_89:
    uint64_t v61 = *(void *)(a2 + 88);
    uint64_t v62 = *(void *)(v61 + 8);
    if (v62 != v61)
    {
      int v63 = 0;
      while (!(***(unsigned int (****)(void, long long *, void, void, unint64_t, uint64_t, const char **, void, ZinComputeProcedureMutableOperation **, void, void, CFArrayRef *))(v62 + 16))(*(void *)(v62 + 16), &v91, *(void *)a2, *(unsigned __int8 *)(a2 + 56), v86, Program, v106, *(unsigned int *)(a2 + 96), &v105, *(void *)(a1 + 32), *(void *)(a1 + 40), v80))
      {
        ++v63;
        uint64_t v62 = *(void *)(v62 + 8);
        if (v62 == v61) {
          goto LABEL_93;
        }
      }
      ZinIrNetworkStatus::SetError(v80, @"InvalidProcedure");
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinObjectGenerationLegacy::Generate(v63);
      }
      goto LABEL_9;
    }
LABEL_93:
    uint64_t v64 = *(void *)(a1 + 40);
    if (v64)
    {
      ZinIrMemoryPool::GetSections(v64, 6, &v108);
      if (v108.__r_.__value_.__r.__words[2])
      {
        uint64_t v65 = *(void *)(v108.__r_.__value_.__l.__size_ + 16);
        std::__list_imp<ZinIrSection *>::clear(&v108);
        if (v65)
        {
          uint64_t v66 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040F6D918ACuLL);
          uint64_t v67 = *(void *)(a2 + 64);
          v66[1] = 0;
          v66[2] = v67;
          int v68 = ZinComputeMutableProgramAddAneAotMetadataOperation(Program, (uint64_t)v106, (uint64_t)v66);
          free(v66);
          if (v68)
          {
            ZinIrNetworkStatus::SetError(v80, @"UnsupportedOperation");
            goto LABEL_9;
          }
          uint64_t v73 = *(void *)(v65 + 128);
          if (v73) {
            *(void *)(v104 + 16) = v73;
          }
        }
      }
      else
      {
        std::__list_imp<ZinIrSection *>::clear(&v108);
      }
    }
    if (!ZinComputeMutableProgramCollectOperationScheduleInfo((uint64_t)v106))
    {
      uint64_t v69 = *(void *)(a1 + 8);
      uint64_t v70 = (void *)ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
      if (ZinAddAneLiveInParamBindings(v82, v6, v79, (uint64_t *)&v97, v69, v70)
        || (long long v71 = (void *)ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48)),
            ZinAneBindingsForLiveIO(v82, v6, v6 + 48, v79, 0, v71)))
      {
        CFStringRef v72 = @"InvalidInput";
      }
      else
      {
        long long v74 = (void *)ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
        if (ZinAneBindingsForLiveIO(v82, v6, v6 + 48, v79, 2, v74))
        {
          CFStringRef v72 = @"InvalidState";
        }
        else
        {
          long long v75 = (void *)ZinComputeMutableProgramWrapper::GetProgram(*(ZinComputeMutableProgramWrapper **)(a1 + 48));
          if (!ZinAneBindingsForLiveIO(v82, v6 + 24, v6 + 48, v79, 1, v75))
          {
            uint64_t v10 = 0;
            goto LABEL_10;
          }
          CFStringRef v72 = @"InvalidOutput";
        }
      }
      ZinIrNetworkStatus::SetError(v80, v72);
    }
LABEL_9:
    uint64_t v10 = 3;
    goto LABEL_10;
  }
  long long v81 = (void **)(v6 + 8);
  __format = "LiveIO should have a proper symbol";
  long long v78 = "Invalid dynamic offset or function type for custom BAR command along wrap axis.";
  uint64_t v84 = v6;
  while (1)
  {
    uint64_t v20 = malloc_type_calloc(1uLL, 0x118uLL, 0x1000040ED3ACACAuLL);
    *uint64_t v20 = 1;
    uint64_t v88 = 0;
    std::string v89 = 0;
    unint64_t v90 = 0;
    uint64_t v21 = *(void *)(a2 + 72);
    unint64_t v22 = (unint64_t)v19[56] << 32;
    uint64_t v23 = *(void *)(ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)v19) + 24);
    if (v22)
    {
      if (v23 != 1)
      {
        uint64_t v76 = "SNE BAR command with wrap axis should only have offset along wrap axis.";
LABEL_121:
        long long v78 = (char *)v76;
LABEL_122:
        ZinAssertImpl(v78);
      }
      int v24 = 8;
      uint64_t v25 = 3;
    }
    else
    {
      unint64_t v26 = v23 - 1;
      if (v26 > 4)
      {
        uint64_t v76 = "Invalid count of dynamic offsets";
        goto LABEL_121;
      }
      int v24 = v26 + 3;
      uint64_t v25 = 2 * v26 + 3;
    }
    uint64_t v85 = v25;
    int v27 = *(_DWORD *)(v21 + 1308);
    void v20[2] = v27 != 0;
    unsigned int BarId = ZinDynamicOffsetCustomBarCmd::GetBarId((ZinDynamicOffsetCustomBarCmd *)v19);
    if (!v27) {
      goto LABEL_24;
    }
    if (BarId)
    {
      uint64_t v76 = "64bit bar id should be an even number.";
      goto LABEL_121;
    }
    unsigned int BarId = ZinDynamicOffsetCustomBarCmd::GetBarId((ZinDynamicOffsetCustomBarCmd *)v19) >> 1;
LABEL_24:
    void v20[3] = BarId;
    v20[4] = v24;
    v20[5] = v85;
    uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v19);
    uint64_t DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)v19);
    uint64_t v31 = DynamicOffsetInfo;
    long long v32 = (char *)(NumNeededNEs + 24);
    if (*(char *)(NumNeededNEs + 47) < 0) {
      long long v32 = *(char **)v32;
    }
    if (v19[56])
    {
      if (!v22 || *(void *)(DynamicOffsetInfo + 24) != 1) {
        goto LABEL_122;
      }
      uint64_t v33 = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v19);
      uint64_t v34 = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)v19);
      int v35 = 0;
      switch(*(_DWORD *)(*(void *)(v34 + 16) + 24))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0x10:
          goto LABEL_98;
        case 0xE:
          goto LABEL_31;
        case 0xF:
          int v35 = 1;
LABEL_31:
          v20[6] = v35;
          break;
        default:
          break;
      }
      void v20[8] = 0;
      GetLiveInParamUnmangledName(v6, *(void *)(v34 + 16) + 24, &v108);
      long long v36 = v89;
      if ((unint64_t)v89 >= v90)
      {
        unint64_t v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v88, (uint64_t)&v108);
      }
      else
      {
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v89, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v37 = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
          v89->__r_.__value_.__r.__words[2] = v108.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
        }
        unint64_t v40 = v36 + 1;
      }
      std::string v89 = v40;
      v20[10] = 3;
      v20[12] = *(void *)(v21 + 1224);
      v20[14] = 4;
      *((void *)v20 + 8) = *(void *)(v33 + 72);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v108.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      memset(&v110, 0, sizeof(v110));
      std::string::basic_string[abi:ne180100]<0>(&v108, v32);
      uint64_t v38 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(v6, (void **)&v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v108.__r_.__value_.__l.__data_);
      }
      if (v81 == v38)
      {
        uint64_t v41 = *(void *)(NumNeededNEs + 104);
        if (!v41 || *(_DWORD *)(v41 + 96) != 2) {
          ZinAssertImpl("Error: the root tensor of RingBufferReader should be allocated to DRAM");
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        {
          v110.__r_.__value_.__l.__size_ = 5;
          uint64_t v42 = (std::string *)v110.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v110.__r_.__value_.__s + 23) = 5;
          uint64_t v42 = &v110;
        }
        strcpy((char *)v42, "__bss");
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v108, v32);
        unint64_t v39 = (const std::string *)std::map<std::string,BOOL>::at(v6, (void **)&v108.__r_.__value_.__l.__data_);
        std::string::operator=(&v110, v39);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
      }
      v20[6] = 2;
      int v43 = (char *)(v20 + 6);
      void v20[8] = 0;
      uint64_t v44 = v89;
      if ((unint64_t)v89 >= v90)
      {
        long long v46 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v88, (uint64_t)&v110);
      }
      else
      {
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v89, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v45 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
          v89->__r_.__value_.__r.__words[2] = v110.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
        }
        long long v46 = v44 + 1;
      }
      std::string v89 = v46;
      long long v47 = (void *)(v31 + 16);
      int v48 = 1;
      while (1)
      {
        long long v47 = (void *)*v47;
        if (!v47) {
          break;
        }
        std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor>::pair[abi:ne180100]((uint64_t)&v108, (uint64_t)(v47 + 2));
        if (LODWORD(v108.__r_.__value_.__r.__words[1]) < 0xE || LODWORD(v108.__r_.__value_.__r.__words[1]) == 16)
        {
          char v50 = 0;
        }
        else
        {
          int data = (int)v108.__r_.__value_.__l.__data_;
          long long v52 = &v43[16 * v48];
          *(_DWORD *)long long v52 = LODWORD(v108.__r_.__value_.__r.__words[1]) == 15;
          *((_DWORD *)v52 + 2) = 0;
          GetLiveInParamUnmangledName(v84, (uint64_t)&v108.__r_.__value_.__l.__size_, &v107);
          long long v53 = v89;
          if ((unint64_t)v89 >= v90)
          {
            long long v55 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v88, (uint64_t)&v107);
          }
          else
          {
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v89, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v54 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
              v89->__r_.__value_.__r.__words[2] = v107.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
            }
            long long v55 = v53 + 1;
          }
          std::string v89 = v55;
          uint64_t v56 = *(void *)(NumNeededNEs + 104);
          if (!v56) {
            goto LABEL_117;
          }
          unint64_t v57 = *(uint64_t **)(v56 + 40);
          if (v57 == *(uint64_t **)(v56 + 48)) {
            goto LABEL_117;
          }
          uint64_t v58 = *v57;
          if (!v58) {
            goto LABEL_117;
          }
          if (data == 5)
          {
            __format = "Invalid stride dimension";
LABEL_117:
            ZinAssertImpl(__format);
          }
          uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)(v58 + 296), data);
          long long v60 = &v43[16 * v48 + 16];
          *(_DWORD *)long long v60 = 4;
          *((void *)v60 + 1) = ValueAt;
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v107.__r_.__value_.__l.__data_);
          }
          v48 += 2;
          char v50 = 1;
        }
        if (v109 < 0)
        {
          operator delete((void *)v108.__r_.__value_.__r.__words[2]);
          if ((v50 & 1) == 0) {
            goto LABEL_84;
          }
        }
        else if ((v50 & 1) == 0)
        {
          goto LABEL_84;
        }
      }
      if (v85 != v48) {
        ZinAssertImpl("Invalid variable count for the SNE function");
      }
LABEL_84:
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = v84;
      if (v47)
      {
LABEL_98:
        ZinIrNetworkStatus::SetError(v80, @"InvalidProcedure");
        goto LABEL_102;
      }
    }
    if (ZinComputeMutableProgramAddSneOperation(Program, v106, v20, &v88, &v105)) {
      break;
    }
    free(v20);
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
    v19 += 64;
    if (v19 == v83) {
      goto LABEL_89;
    }
  }
  ZinIrNetworkStatus::SetError(v80, @"UnsupportedOperation");
LABEL_102:
  free(v20);
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  uint64_t v10 = 3;
LABEL_10:
  if (__p)
  {
    uint64_t v102 = __p;
    operator delete(__p);
  }
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
  std::vector<ZinDynamicOffsetCustomBarCmd>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  return v10;
}

void sub_21125E898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t ZinAddAneLiveInParamBindings(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  uint64_t v56 = 0;
  long long v55 = 0;
  long long v54 = &v55;
  if (ZinIrBindings::GetLiveInParamDescriptor(*a1, (uint64_t)&v54)) {
    goto LABEL_2;
  }
  if (!v56 || (int v7 = v54, v54 == &v55))
  {
LABEL_58:
    uint64_t v6 = 0;
    goto LABEL_59;
  }
  while (1)
  {
    bzero(v50, 0xD20uLL);
    uint64_t v49 = 0x100000007;
    int Typeno = ZinTensorFormatGetTypeno(*((_DWORD *)v7 + 14));
    uint64_t v9 = v7[11];
    v50[3] = Typeno;
    v50[4] = v9;
    uint64_t v10 = *a4;
    uint64_t v47 = a4[1];
    p_std::string::size_type size = (uint64_t)&v66.__r_.__value_.__l.__size_;
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = 1;
    if (*a4 != v47)
    {
      while (1)
      {
        v66.__r_.__value_.__r.__words[0] = *(void *)v10;
        std::unordered_map<ZinIrDimension,ZinLiveInputParamDescriptor>::unordered_map(p_size, v10 + 8);
        uint64_t v14 = *(void *)(v10 + 48);
        char v68 = *(unsigned char *)(v10 + 56);
        uint64_t v67 = v14;
        uint64_t DynamicOffsetInfo = ZinDynamicOffsetCustomBarCmd::GetDynamicOffsetInfo((ZinDynamicOffsetCustomBarCmd *)&v66);
        std::unordered_map<ZinIrDimension,ZinLiveInputParamDescriptor>::unordered_map((uint64_t)v64, DynamicOffsetInfo);
        long long v16 = v65;
        if (v65) {
          break;
        }
LABEL_41:
        std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table((uint64_t)v64);
        p_std::string::size_type size = std::__hash_table<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,ZinLiveInputParamDescriptor>>>::~__hash_table((uint64_t)&v66.__r_.__value_.__l.__size_);
        v10 += 64;
        if (v10 == v47) {
          goto LABEL_42;
        }
      }
      while (1)
      {
        std::pair<ZinIrDimension const,ZinLiveInputParamDescriptor>::pair[abi:ne180100]((uint64_t)v60, (uint64_t)(v16 + 2));
        uint64_t v17 = v63;
        unsigned __int8 v18 = v63;
        if ((v63 & 0x80u) == 0) {
          size_t v19 = v63;
        }
        else {
          size_t v19 = __n;
        }
        uint64_t v20 = (void *)*((unsigned __int8 *)v7 + 55);
        int v21 = (char)v20;
        if ((char)v20 < 0) {
          uint64_t v20 = v7[5];
        }
        if ((void *)v19 == v20)
        {
          if (v21 >= 0) {
            unint64_t v22 = (unsigned __int8 *)(v7 + 4);
          }
          else {
            unint64_t v22 = (unsigned __int8 *)v7[4];
          }
          if ((char)v63 < 0)
          {
            int v24 = __s1;
            if (memcmp(__s1, v22, __n)) {
              goto LABEL_39;
            }
LABEL_23:
            uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v66);
            long long v26 = *(_OWORD *)(NumNeededNEs + 64);
            v58[0] = *(_OWORD *)(NumNeededNEs + 48);
            v58[1] = v26;
            uint64_t v59 = *(void *)(NumNeededNEs + 80);
            uint64_t ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v58, v60[0]);
            if (ValueAt < v12) {
              uint64_t v12 = ValueAt;
            }
            if (v60[0] == 4)
            {
              PostAllocationuint64_t Interleave = ZinIrRegAllocUtil::GetPostAllocationInterleave((ZinIrRegAllocUtil *)NumNeededNEs, v28);
              int v57 = 0;
              if (GetHWDMAFormatMode(*(_DWORD *)(NumNeededNEs + 88), &v57)) {
                ZinAssertImpl("invalid tensor format");
              }
              uint64_t v30 = ZinIrRegAllocUtil::CalculateLinearDmaGranularityInX(*(void *)(a5 + 528), v57, PostAllocationInterleave);
              uint64_t v31 = 0;
              if (v13 && v30)
              {
                if (v13 >= 0) {
                  unint64_t v32 = v13;
                }
                else {
                  unint64_t v32 = -v13;
                }
                unint64_t v33 = v30;
                unint64_t v34 = v32;
                do
                {
                  unint64_t v35 = v34;
                  unint64_t v34 = v33;
                  unint64_t v33 = v35 % v33;
                }
                while (v33);
                uint64_t v31 = v32 / v34 * v30;
              }
              uint64_t v13 = v31;
            }
            unsigned __int8 v18 = v63;
            goto LABEL_37;
          }
          if (!v63) {
            goto LABEL_23;
          }
          p_s1 = &__s1;
          while (*(unsigned __int8 *)p_s1 == *v22)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            ++v22;
            if (!--v17) {
              goto LABEL_23;
            }
          }
        }
LABEL_37:
        if ((v18 & 0x80) != 0)
        {
          int v24 = __s1;
LABEL_39:
          operator delete(v24);
        }
        long long v16 = (void *)*v16;
        if (!v16) {
          goto LABEL_41;
        }
      }
    }
LABEL_42:
    uint64_t v51 = 0;
    uint64_t v52 = v12;
    uint64_t v53 = v13;
    memset(&v66, 0, sizeof(v66));
    long long v36 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, (void **)v7 + 4);
    if ((void **)(a2 + 8) == v36) {
      break;
    }
    std::string::operator=(&v66, (const std::string *)(v36 + 7));
    long long v37 = *(char *)(a3 + 23) >= 0 ? (const char *)a3 : *(const char **)a3;
    uint64_t v38 = (v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v66
        : (std::string *)v66.__r_.__value_.__r.__words[0];
    if (ZinComputeMutableProgramAddAneLiveInParamBinding(a6, &v49, v37, (const char *)v38, 0)) {
      break;
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    unint64_t v39 = v7[1];
    if (v39)
    {
      do
      {
        unint64_t v40 = (void **)v39;
        unint64_t v39 = (void *)*v39;
      }
      while (v39);
    }
    else
    {
      do
      {
        unint64_t v40 = (void **)v7[2];
        BOOL v41 = *v40 == v7;
        int v7 = v40;
      }
      while (!v41);
    }
    int v7 = v40;
    if (v40 == &v55) {
      goto LABEL_58;
    }
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
LABEL_2:
  uint64_t v6 = 3;
LABEL_59:
  std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::destroy((uint64_t)&v54, v55);
  return v6;
}

void sub_21125EDC0(_Unwind_Exception *a1)
{
}

uint64_t ZinAneBindingsForLiveIO(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6)
{
  unsigned int v44 = ANECGetBindingIOTypeFromIOType(a5);
  v54[0] = 0;
  v54[1] = 0;
  v52[1] = 0;
  uint64_t v53 = v54;
  uint64_t v51 = (uint64_t *)v52;
  v52[0] = 0;
  v50[0] = 0;
  v50[1] = 0;
  v48[1] = 0;
  uint64_t v49 = v50;
  uint64_t v47 = v48;
  v48[0] = 0;
  v46[0] = 0;
  v46[1] = 0;
  long long v45 = v46;
  if (ZinIrBindings::GetSinglePlaneUncompressedDescriptor(*a1, a5, (uint64_t)&v53, &v51)) {
    goto LABEL_70;
  }
  uint64_t v42 = a1;
  long long v11 = v53;
  if (v53 != v54)
  {
    do
    {
      bzero(v72, 0xD20uLL);
      int v70 = 3;
      unsigned int v71 = v44;
      long long v12 = *(_OWORD *)(v11 + 27);
      long long v62 = *(_OWORD *)(v11 + 25);
      long long v63 = v12;
      long long v13 = *(_OWORD *)(v11 + 31);
      long long v64 = *(_OWORD *)(v11 + 29);
      long long v65 = v13;
      long long v14 = *(_OWORD *)(v11 + 19);
      *(_OWORD *)long long v60 = *(_OWORD *)(v11 + 17);
      *(_OWORD *)&v60[16] = v14;
      long long v15 = *(_OWORD *)(v11 + 23);
      *(_OWORD *)&v60[32] = *(_OWORD *)(v11 + 21);
      long long v61 = v15;
      long long v16 = *(_OWORD *)(v11 + 9);
      int32x4_t v17 = *(int32x4_t *)(v11 + 13);
      *(_OWORD *)&v57[32] = *(_OWORD *)(v11 + 11);
      int32x4_t v58 = v17;
      int32x4_t v59 = *(int32x4_t *)(v11 + 15);
      *(_OWORD *)int v57 = *(_OWORD *)(v11 + 7);
      *(_OWORD *)&v57[16] = v16;
      if (*((char *)v11 + 287) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v11[33], (std::string::size_type)v11[34]);
      }
      else {
        std::string __p = *(std::string *)((unsigned char *)v11 + 11);
      }
      uint64_t v67 = (uint64_t)v11[36];
      int Typeno = ZinTensorFormatGetTypeno(*(int *)v57);
      int v75 = *(_DWORD *)v60;
      int v77 = *(_DWORD *)&v57[40];
      uint64_t v80 = *(void *)&v60[40];
      int32x4_t v74 = vuzp1q_s32(v58, v59);
      int32x4_t v76 = vuzp1q_s32(*(int32x4_t *)&v57[8], *(int32x4_t *)&v57[24]);
      long long v78 = *(_OWORD *)&v60[8];
      long long v79 = *(_OWORD *)&v60[24];
      int v81 = v64;
      uint64_t v82 = v67;
      memset(&v56, 0, sizeof(v56));
      memset(&v55, 0, sizeof(v55));
      unsigned __int8 v18 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, (void **)v11 + 4);
      if ((void **)(a2 + 8) == v18) {
        goto LABEL_64;
      }
      std::string::operator=(&v56, (const std::string *)(v18 + 7));
      size_t v19 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a3, (void **)&__p.__r_.__value_.__l.__data_);
      if ((void **)(a3 + 8) == v19) {
        goto LABEL_64;
      }
      std::string::operator=(&v55, (const std::string *)(v19 + 7));
      uint64_t v20 = *(char *)(a4 + 23) >= 0 ? (const char *)a4 : *(const char **)a4;
      int v21 = (v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v56
          : (std::string *)v56.__r_.__value_.__r.__words[0];
      unint64_t v22 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v55
          : (std::string *)v55.__r_.__value_.__r.__words[0];
      if (ZinComputeMutableProgramAddAneSinglePlaneUncompressedBinding(a6, &v70, v20, (const char *)v21, (const char *)v22, 0))goto LABEL_64; {
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      }
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = v11[1];
      if (v23)
      {
        do
        {
          int v24 = (void **)v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          int v24 = (void **)v11[2];
          BOOL v25 = *v24 == v11;
          long long v11 = v24;
        }
        while (!v25);
      }
      long long v11 = v24;
    }
    while (v24 != v54);
  }
  long long v26 = v51;
  if (v51 != (uint64_t *)v52)
  {
    while (1)
    {
      bzero(v72, 0xD20uLL);
      int v70 = 2;
      unsigned int v71 = v44;
      long long v27 = *(_OWORD *)(v26 + 27);
      long long v62 = *(_OWORD *)(v26 + 25);
      long long v63 = v27;
      long long v28 = *(_OWORD *)(v26 + 31);
      long long v64 = *(_OWORD *)(v26 + 29);
      long long v65 = v28;
      long long v29 = *(_OWORD *)(v26 + 19);
      *(_OWORD *)long long v60 = *(_OWORD *)(v26 + 17);
      *(_OWORD *)&v60[16] = v29;
      long long v30 = *(_OWORD *)(v26 + 23);
      *(_OWORD *)&v60[32] = *(_OWORD *)(v26 + 21);
      long long v61 = v30;
      long long v31 = *(_OWORD *)(v26 + 9);
      int32x4_t v32 = *(int32x4_t *)(v26 + 13);
      *(_OWORD *)&v57[32] = *(_OWORD *)(v26 + 11);
      int32x4_t v58 = v32;
      int32x4_t v59 = *(int32x4_t *)(v26 + 15);
      *(_OWORD *)int v57 = *(_OWORD *)(v26 + 7);
      *(_OWORD *)&v57[16] = v31;
      if (*((char *)v26 + 287) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v26[33], v26[34]);
      }
      else {
        std::string __p = *(std::string *)((unsigned char *)v26 + 11);
      }
      uint64_t v67 = v26[36];
      __int16 v69 = *((_WORD *)v26 + 156);
      long long v68 = *(_OWORD *)(v26 + 37);
      int Typeno = ZinTensorFormatGetTypeno(*(int *)v57);
      int v75 = *(_DWORD *)v60;
      int v77 = *(_DWORD *)&v57[40];
      uint64_t v80 = *(void *)&v60[40];
      int32x4_t v74 = vuzp1q_s32(v58, v59);
      int32x4_t v76 = vuzp1q_s32(*(int32x4_t *)&v57[8], *(int32x4_t *)&v57[24]);
      long long v78 = *(_OWORD *)&v60[8];
      long long v79 = *(_OWORD *)&v60[24];
      int v81 = v64;
      uint64_t v82 = v67;
      int v83 = ZinIrDimensionGetTypeno(v68);
      int v84 = DWORD2(v68);
      __int16 v85 = v69;
      memset(&v56, 0, sizeof(v56));
      memset(&v55, 0, sizeof(v55));
      unint64_t v33 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a2, (void **)v26 + 4);
      if ((void **)(a2 + 8) == v33) {
        break;
      }
      std::string::operator=(&v56, (const std::string *)(v33 + 7));
      unint64_t v34 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a3, (void **)&__p.__r_.__value_.__l.__data_);
      if ((void **)(a3 + 8) == v34) {
        break;
      }
      std::string::operator=(&v55, (const std::string *)(v34 + 7));
      unint64_t v35 = *(char *)(a4 + 23) >= 0 ? (const char *)a4 : *(const char **)a4;
      long long v36 = (v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v56
          : (std::string *)v56.__r_.__value_.__r.__words[0];
      long long v37 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v55
          : (std::string *)v55.__r_.__value_.__r.__words[0];
      if (ZinComputeMutableProgramAddAneSinglePlaneUncompressedBinding(a6, &v70, v35, (const char *)v36, (const char *)v37, 0))break; {
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      }
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v38 = (uint64_t *)v26[1];
      if (v38)
      {
        do
        {
          unint64_t v39 = v38;
          uint64_t v38 = (uint64_t *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          unint64_t v39 = (uint64_t *)v26[2];
          BOOL v25 = *v39 == (void)v26;
          long long v26 = v39;
        }
        while (!v25);
      }
      long long v26 = v39;
      if (v39 == (uint64_t *)v52) {
        goto LABEL_58;
      }
    }
LABEL_64:
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_70;
  }
LABEL_58:
  if (ZinIrBindings::GetMultiPlaneUncompressedDescriptor(*v42, a5, (uint64_t)&v49)
    || ZinAddAneMultiPlaneUncompressedBindings(a6, a4, &v49, v44, a2, a3)
    || ZinIrBindings::GetCompressedDescriptor(*v42, a5, (uint64_t)&v47))
  {
LABEL_70:
    uint64_t v40 = 3;
    goto LABEL_71;
  }
  if (ZinAddAneCompressedBindings(a6, a4, &v47, v44, a2, a3)) {
    uint64_t v40 = 3;
  }
  else {
    uint64_t v40 = 0;
  }
LABEL_71:
  std::__tree<std::__value_type<std::string,WeightFileProperties>,std::__map_value_compare<std::string,std::__value_type<std::string,WeightFileProperties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,WeightFileProperties>>>::destroy((uint64_t)&v45, v46[0]);
  std::__tree<std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTiledCompressedIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTiledCompressedIODescriptor>>>::destroy((uint64_t)&v47, v48[0]);
  std::__tree<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinMultiPlaneLinearIODescriptor>>>::destroy((uint64_t)&v49, v50[0]);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v51, v52[0]);
  std::__tree<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinSinglePlaneLinearIODescriptor>>>::destroy((uint64_t)&v53, v54[0]);
  return v40;
}

void sub_21125F4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
}

uint64_t ZinObjectGeneration::GetComputeMutableProgram(ZinObjectGeneration *this)
{
  uint64_t result = *((void *)this + 6);
  if (!result) {
    ZinAssertImpl("Invalid compute program");
  }
  return result;
}

uint64_t ZinObjectGeneration::GetComputeMutableProgramWithOwnership@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 48);
  if (!v2) {
    ZinAssertImpl("Invalid compute program");
  }
  *(void *)(this + 48) = 0;
  *a2 = v2;
  return this;
}

BOOL ZinObjectGenHandleProgramToFile(ZinComputeMutableProgram *a1, const ZinIrCompilerParameters *a2, uint64_t a3, __sFILE *a4)
{
  int v4 = ZinComputeMutableProgramToFile<ZinComputeMutableProgram>((uint64_t)a1, a3, a4);
  if (v4)
  {
    BOOL v5 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    if (v5) {
      ZinObjectGenHandleProgramToFile(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return v4 == 0;
}

uint64_t ZinObjectGenWriteSymbolData(const char *a1, uint64_t a2, size_t a3, __sFILE *a4)
{
  uint64_t v7 = 0;
  if (!fseek(a4, a2, 0))
  {
    uint64_t v7 = 1;
    size_t v8 = fwrite(a1, a3, 1uLL, a4);
    if (v8 != 1)
    {
      uint64_t v9 = v8;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        ZinObjectGenWriteSymbolData(v9);
      }
      return 0;
    }
  }
  return v7;
}

void ZinObjectGenerationLegacy::~ZinObjectGenerationLegacy(ZinComputeMutableProgramWrapper **this)
{
  *this = (ZinComputeMutableProgramWrapper *)&unk_26C34D0A8;
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](this + 6, 0);
}

{
  uint64_t vars8;

  *this = (ZinComputeMutableProgramWrapper *)&unk_26C34D0A8;
  std::unique_ptr<ZinComputeMutableProgramWrapper>::reset[abi:ne180100](this + 6, 0);

  JUMPOUT(0x21667D3C0);
}

void *std::vector<ThreadModeledPerformance>::__init_with_size[abi:ne180100]<ThreadModeledPerformance*,ThreadModeledPerformance*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<ThreadModeledPerformance>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21125F794(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void GetLiveInParamUnmangledName(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  BOOL v5 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>(a1, (void **)(a2 + 8));
  if ((void **)(a1 + 8) == v5) {
    ZinAssertImpl("Cannot find mangled name in IrNameMap");
  }
  if (*((char *)v5 + 79) < 0)
  {
    uint64_t v7 = (const std::string::value_type *)v5[7];
    std::string::size_type v8 = (std::string::size_type)v5[8];
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 7);
    a3->__r_.__value_.__r.__words[2] = (std::string::size_type)v5[9];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}